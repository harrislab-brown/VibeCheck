
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019458  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08019728  08019728  0001a728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a000  0801a000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a008  0801a008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a00c  0801a00c  0001b00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801a010  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006998  240002cc  0801a2dc  0001c2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006c64  0801a2dc  0001cc64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003386d  00000000  00000000  0001c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006642  00000000  00000000  0004fb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002660  00000000  00000000  000561b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001dd4  00000000  00000000  00058810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ab8c  00000000  00000000  0005a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ab37  00000000  00000000  00065170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017175b  00000000  00000000  0009fca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00211402  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b9ec  00000000  00000000  00211448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0021ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019710 	.word	0x08019710

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08019710 	.word	0x08019710

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 fd40 	bl	8003546 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002d34 	.word	0x24002d34

08000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8000ade:	f003 fb25 	bl	800412c <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24002d54 	.word	0x24002d54

08000af0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8000afa:	f003 fb33 	bl	8004164 <VibeCheckWaveGen_DMACpltCallback>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24002d54 	.word	0x24002d54

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b10:	f000 feb4 	bl	800187c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f003 fd88 	bl	8004628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f834 	bl	8000b84 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b1c:	f000 f8a2 	bl	8000c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 fd9e 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b24:	f000 fd74 	bl	8001610 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b28:	f000 f9b2 	bl	8000e90 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000b2c:	f000 f9ec 	bl	8000f08 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000b30:	f000 fa2a 	bl	8000f88 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b34:	f000 fa7e 	bl	8001034 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b38:	f000 fad2 	bl	80010e0 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b3c:	f000 fc56 	bl	80013ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b40:	f000 fbc6 	bl	80012d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 fd18 	bl	8001578 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b48:	f000 fb20 	bl	800118c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b4c:	f000 fb72 	bl	8001234 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b50:	f000 f8b8 	bl	8000cc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b54:	f000 f932 	bl	8000dbc <MX_ADC2_Init>
  MX_UART7_Init();
 8000b58:	f000 fcc0 	bl	80014dc <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b5c:	f013 fa04 	bl	8013f68 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1);
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <main+0x68>)
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <main+0x6c>)
 8000b64:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <main+0x70>)
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <main+0x74>)
 8000b68:	f001 fca4 	bl	80024b4 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <main+0x74>)
 8000b6e:	f001 fd75 	bl	800265c <VibeCheck_Loop>
 8000b72:	e7fb      	b.n	8000b6c <main+0x60>
 8000b74:	240003c8 	.word	0x240003c8
 8000b78:	240006b8 	.word	0x240006b8
 8000b7c:	24000750 	.word	0x24000750
 8000b80:	24000910 	.word	0x24000910

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09c      	sub	sp, #112	@ 0x70
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	224c      	movs	r2, #76	@ 0x4c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f015 fa21 	bl	8015fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f015 fa1b 	bl	8015fda <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f009 fc29 	bl	800a3fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc6:	bf00      	nop
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bd4:	d1f8      	bne.n	8000bc8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2321      	movs	r3, #33	@ 0x21
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf0:	2328      	movs	r3, #40	@ 0x28
 8000bf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c00:	230c      	movs	r3, #12
 8000c02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 fc3d 	bl	800a490 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c1c:	f000 fe5a 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	233f      	movs	r3, #63	@ 0x3f
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2103      	movs	r1, #3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f009 fffc 	bl	800ac44 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c52:	f000 fe3f 	bl	80018d4 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	@ 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024800 	.word	0x58024800

08000c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	@ 0xb8
 8000c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	22b8      	movs	r2, #184	@ 0xb8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f015 f9b2 	bl	8015fda <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c86:	2310      	movs	r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00a fb56 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cb6:	f000 fe0d 	bl	80018d4 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	37b8      	adds	r7, #184	@ 0xb8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2224      	movs	r2, #36	@ 0x24
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f015 f97c 	bl	8015fda <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000ce4:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <MX_ADC1_Init+0xec>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	4818      	ldr	r0, [pc, #96]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d4a:	f003 ff69 	bl	8004c20 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 fdbe 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d64:	f004 ffa8 	bl	8005cb8 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 fdb1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_ADC1_Init+0xf0>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_ADC1_Init+0xf4>)
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2304      	movs	r3, #4
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d96:	f004 f94b 	bl	8005030 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000da0:	f000 fd98 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240002e8 	.word	0x240002e8
 8000db0:	40022000 	.word	0x40022000
 8000db4:	10c00010 	.word	0x10c00010
 8000db8:	47ff0000 	.word	0x47ff0000

08000dbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2224      	movs	r2, #36	@ 0x24
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f015 f906 	bl	8015fda <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <MX_ADC2_Init+0xc8>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e36:	f003 fef3 	bl	8004c20 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e40:	f000 fd48 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_ADC2_Init+0xcc>)
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_ADC2_Init+0xd0>)
 8000e52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e54:	2304      	movs	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e68:	f004 f8e2 	bl	8005030 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e72:	f000 fd2f 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000358 	.word	0x24000358
 8000e84:	40022100 	.word	0x40022100
 8000e88:	0c900008 	.word	0x0c900008
 8000e8c:	47ff0000 	.word	0x47ff0000

08000e90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2224      	movs	r2, #36	@ 0x24
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f015 f89c 	bl	8015fda <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <MX_DAC1_Init+0x74>)
 8000ea6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ea8:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eaa:	f005 f96f 	bl	800618c <HAL_DAC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000eb4:	f000 fd0e 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ed4:	f005 fa46 	bl	8006364 <HAL_DAC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 fcf9 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eea:	f005 fa3b 	bl	8006364 <HAL_DAC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000ef4:	f000 fcee 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240003c8 	.word	0x240003c8
 8000f04:	40007400 	.word	0x40007400

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <MX_I2C2_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <MX_I2C2_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f44:	f007 fe88 	bl	8008c58 <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 fcc1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f56:	f007 ff1b 	bl	8008d90 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fcb8 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f68:	f007 ff5d 	bl	8008e26 <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fcaf 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240004cc 	.word	0x240004cc
 8000f80:	40005800 	.word	0x40005800
 8000f84:	307075b1 	.word	0x307075b1

08000f88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f8e:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <MX_SPI2_Init+0xa8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_SPI2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001018:	f00c fd86 	bl	800db28 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001022:	f000 fc57 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000520 	.word	0x24000520
 8001030:	40003800 	.word	0x40003800

08001034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010c4:	f00c fd30 	bl	800db28 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fc01 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240005a8 	.word	0x240005a8
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <MX_SPI4_Init+0xa8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800110c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001110:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001170:	f00c fcda 	bl	800db28 <HAL_SPI_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 fbab 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24000630 	.word	0x24000630
 8001188:	40013400 	.word	0x40013400

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011ac:	4a20      	ldr	r2, [pc, #128]	@ (8001230 <MX_TIM1_Init+0xa4>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d6:	4815      	ldr	r0, [pc, #84]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d8:	f00c fde5 	bl	800dda6 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011e2:	f000 fb77 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011f4:	f00d fb62 	bl	800e8bc <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 fb69 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001202:	2320      	movs	r3, #32
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_TIM1_Init+0xa0>)
 8001214:	f00e f8be 	bl	800f394 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 fb59 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240006b8 	.word	0x240006b8
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4814      	ldr	r0, [pc, #80]	@ (80012cc <MX_TIM2_Init+0x98>)
 800127c:	f00c fd93 	bl	800dda6 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001286:	f000 fb25 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001298:	f00d fb10 	bl	800e8bc <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a2:	f000 fb17 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a6:	2320      	movs	r3, #32
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	@ (80012cc <MX_TIM2_Init+0x98>)
 80012b4:	f00e f86e 	bl	800f394 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012be:	f000 fb09 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24000704 	.word	0x24000704

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001304:	4a38      	ldr	r2, [pc, #224]	@ (80013e8 <MX_TIM3_Init+0x118>)
 8001306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	482e      	ldr	r0, [pc, #184]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800132a:	f00c fd3c 	bl	800dda6 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001334:	f000 face 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	4827      	ldr	r0, [pc, #156]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001346:	f00d fab9 	bl	800e8bc <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 fac0 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001354:	4823      	ldr	r0, [pc, #140]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001356:	f00c fe81 	bl	800e05c <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 fab8 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001374:	f00e f80e 	bl	800f394 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 faa9 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	@ 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800139a:	f00d f97b 	bl	800e694 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a4:	f000 fa96 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013b0:	f00d f970 	bl	800e694 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80013ba:	f000 fa8b 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2208      	movs	r2, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013c6:	f00d f965 	bl	800e694 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80013d0:	f000 fa80 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013d6:	f000 fdb7 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	@ 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000750 	.word	0x24000750
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001420:	4a2d      	ldr	r2, [pc, #180]	@ (80014d8 <MX_TIM4_Init+0xec>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001444:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001446:	f00c fcae 	bl	800dda6 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001450:	f000 fa40 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001462:	f00d fa2b 	bl	800e8bc <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800146c:	f000 fa32 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001472:	f00c fdf3 	bl	800e05c <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800147c:	f000 fa2a 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001490:	f00d ff80 	bl	800f394 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800149a:	f000 fa1b 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	@ 0x60
 80014a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014b6:	f00d f8ed 	bl	800e694 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014c0:	f000 fa08 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014c6:	f000 fd3f 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	@ 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400079c 	.word	0x2400079c
 80014d8:	40000800 	.word	0x40000800

080014dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <MX_UART7_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <MX_UART7_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <MX_UART7_Init+0x94>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_UART7_Init+0x94>)
 8001508:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800150c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_UART7_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_UART7_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_UART7_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_UART7_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_UART7_Init+0x94>)
 8001528:	f00d ffee 	bl	800f508 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001532:	f000 f9cf 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_UART7_Init+0x94>)
 800153a:	f00f f8fa 	bl	8010732 <HAL_UARTEx_SetTxFifoThreshold>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001544:	f000 f9c6 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <MX_UART7_Init+0x94>)
 800154c:	f00f f92f 	bl	80107ae <HAL_UARTEx_SetRxFifoThreshold>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 f9bd 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_UART7_Init+0x94>)
 800155c:	f00f f8b0 	bl	80106c0 <HAL_UARTEx_DisableFifoMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001566:	f000 f9b5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240007e8 	.word	0x240007e8
 8001574:	40007800 	.word	0x40007800

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <MX_USART1_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015c2:	f00d ffa1 	bl	800f508 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f982 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015d4:	f00f f8ad 	bl	8010732 <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f979 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015e6:	f00f f8e2 	bl	80107ae <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f970 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015f6:	f00f f863 	bl	80106c0 <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f968 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2400087c 	.word	0x2400087c
 800160c:	40011000 	.word	0x40011000

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_DMA_Init+0x4c>)
 8001618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800161c:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <MX_DMA_Init+0x4c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <MX_DMA_Init+0x4c>)
 8001628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	200b      	movs	r0, #11
 800163a:	f004 fcfa 	bl	8006032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800163e:	200b      	movs	r0, #11
 8001640:	f004 fd11 	bl	8006066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	200c      	movs	r0, #12
 800164a:	f004 fcf2 	bl	8006032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800164e:	200c      	movs	r0, #12
 8001650:	f004 fd09 	bl	8006066 <HAL_NVIC_EnableIRQ>

}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58024400 	.word	0x58024400

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	@ 0x30
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b7b      	ldr	r3, [pc, #492]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167c:	4a79      	ldr	r2, [pc, #484]	@ (8001864 <MX_GPIO_Init+0x204>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001686:	4b77      	ldr	r3, [pc, #476]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a72      	ldr	r2, [pc, #456]	@ (8001864 <MX_GPIO_Init+0x204>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b64      	ldr	r3, [pc, #400]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a63      	ldr	r2, [pc, #396]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	4b55      	ldr	r3, [pc, #340]	@ (8001864 <MX_GPIO_Init+0x204>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a54      	ldr	r2, [pc, #336]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <MX_GPIO_Init+0x204>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2110      	movs	r1, #16
 800172e:	484e      	ldr	r0, [pc, #312]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001730:	f007 fa78 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	484c      	ldr	r0, [pc, #304]	@ (800186c <MX_GPIO_Init+0x20c>)
 800173a:	f007 fa73 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	484b      	ldr	r0, [pc, #300]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001744:	f007 fa6e 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	210a      	movs	r1, #10
 800174c:	4848      	ldr	r0, [pc, #288]	@ (8001870 <MX_GPIO_Init+0x210>)
 800174e:	f007 fa69 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001758:	4846      	ldr	r0, [pc, #280]	@ (8001874 <MX_GPIO_Init+0x214>)
 800175a:	f007 fa63 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4845      	ldr	r0, [pc, #276]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001764:	f007 fa5e 	bl	8008c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001768:	2308      	movs	r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	483b      	ldr	r0, [pc, #236]	@ (8001868 <MX_GPIO_Init+0x208>)
 800177c:	f007 f892 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001798:	f007 f884 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800179c:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	482e      	ldr	r0, [pc, #184]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017b2:	f007 f877 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4827      	ldr	r0, [pc, #156]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017ce:	f007 f869 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 80017d2:	230b      	movs	r3, #11
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_GPIO_Init+0x210>)
 80017ea:	f007 f85b 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 80017ee:	f248 0304 	movw	r3, #32772	@ 0x8004
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	481b      	ldr	r0, [pc, #108]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001804:	f007 f84e 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001808:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x214>)
 8001822:	f007 f83f 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001826:	f240 3306 	movw	r3, #774	@ 0x306
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	@ (8001878 <MX_GPIO_Init+0x218>)
 800183c:	f007 f832 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001858:	f007 f824 	bl	80088a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	@ 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	58021000 	.word	0x58021000
 800186c:	58020800 	.word	0x58020800
 8001870:	58020000 	.word	0x58020000
 8001874:	58020400 	.word	0x58020400
 8001878:	58020c00 	.word	0x58020c00

0800187c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800188e:	f004 fc05 	bl	800609c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001896:	2300      	movs	r3, #0
 8001898:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800189e:	231f      	movs	r3, #31
 80018a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018a2:	2387      	movs	r3, #135	@ 0x87
 80018a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018aa:	2300      	movs	r3, #0
 80018ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018be:	463b      	mov	r3, r7
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fc23 	bl	800610c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f004 fc00 	bl	80060cc <HAL_MPU_Enable>

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_MspInit+0x30>)
 80018e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_MspInit+0x30>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_MspInit+0x30>)
 80018f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	58024400 	.word	0x58024400

08001914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a39      	ldr	r2, [pc, #228]	@ (8001a18 <HAL_ADC_MspInit+0x104>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d133      	bne.n	800199e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001936:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a37      	ldr	r2, [pc, #220]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 800193e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10e      	bne.n	8001966 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001948:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 800194a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800194e:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 800195a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001976:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001984:	2330      	movs	r3, #48	@ 0x30
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	4823      	ldr	r0, [pc, #140]	@ (8001a24 <HAL_ADC_MspInit+0x110>)
 8001998:	f006 ff84 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800199c:	e037      	b.n	8001a0e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <HAL_ADC_MspInit+0x114>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d132      	bne.n	8001a0e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 80019b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_ADC_MspInit+0x108>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10e      	bne.n	80019d8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019c0:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_ADC_MspInit+0x10c>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f6:	23c0      	movs	r3, #192	@ 0xc0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <HAL_ADC_MspInit+0x118>)
 8001a0a:	f006 ff4b 	bl	80088a4 <HAL_GPIO_Init>
}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	24004f28 	.word	0x24004f28
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020800 	.word	0x58020800
 8001a28:	40022100 	.word	0x40022100
 8001a2c:	58020000 	.word	0x58020000

08001a30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a48      	ldr	r2, [pc, #288]	@ (8001b70 <HAL_DAC_MspInit+0x140>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f040 808a 	bne.w	8001b68 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001a54:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a5a:	4a46      	ldr	r2, [pc, #280]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b40      	ldr	r3, [pc, #256]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a78:	4a3e      	ldr	r2, [pc, #248]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <HAL_DAC_MspInit+0x144>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a90:	2330      	movs	r3, #48	@ 0x30
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4835      	ldr	r0, [pc, #212]	@ (8001b78 <HAL_DAC_MspInit+0x148>)
 8001aa4:	f006 fefe 	bl	80088a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001aaa:	4a35      	ldr	r2, [pc, #212]	@ (8001b80 <HAL_DAC_MspInit+0x150>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001aae:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ab0:	2243      	movs	r2, #67	@ 0x43
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ab6:	2240      	movs	r2, #64	@ 0x40
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001aca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ace:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ad6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001ad8:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ade:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001aec:	4823      	ldr	r0, [pc, #140]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001aee:	f004 fe05 	bl	80066fc <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001af8:	f7ff feec 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a1f      	ldr	r2, [pc, #124]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <HAL_DAC_MspInit+0x14c>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <HAL_DAC_MspInit+0x158>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b10:	2244      	movs	r2, #68	@ 0x44
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b16:	2240      	movs	r2, #64	@ 0x40
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b36:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b4e:	f004 fdd5 	bl	80066fc <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001b58:	f7ff febc 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_DAC_MspInit+0x154>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	@ 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40007400 	.word	0x40007400
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020000 	.word	0x58020000
 8001b7c:	240003dc 	.word	0x240003dc
 8001b80:	40020010 	.word	0x40020010
 8001b84:	24000454 	.word	0x24000454
 8001b88:	40020028 	.word	0x40020028

08001b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0b8      	sub	sp, #224	@ 0xe0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	22b8      	movs	r2, #184	@ 0xb8
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f014 fa14 	bl	8015fda <memset>
  if(hi2c->Instance==I2C2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <HAL_I2C_MspInit+0xc8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d146      	bne.n	8001c4a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bbc:	f04f 0208 	mov.w	r2, #8
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f009 fbc2 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bde:	f7ff fe79 	bl	80018d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c08:	2312      	movs	r3, #18
 8001c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c24:	4619      	mov	r1, r3
 8001c26:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <HAL_I2C_MspInit+0xd0>)
 8001c28:	f006 fe3c 	bl	80088a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001c34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_I2C_MspInit+0xcc>)
 8001c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c4a:	bf00      	nop
 8001c4c:	37e0      	adds	r7, #224	@ 0xe0
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40005800 	.word	0x40005800
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020400 	.word	0x58020400

08001c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0bc      	sub	sp, #240	@ 0xf0
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	22b8      	movs	r2, #184	@ 0xb8
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f014 f9aa 	bl	8015fda <memset>
  if(hspi->Instance==SPI2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a72      	ldr	r2, [pc, #456]	@ (8001e54 <HAL_SPI_MspInit+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d146      	bne.n	8001d1e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 fb59 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001cb0:	f7ff fe10 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb4:	4b68      	ldr	r3, [pc, #416]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cba:	4a67      	ldr	r2, [pc, #412]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cc4:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b61      	ldr	r3, [pc, #388]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001cf0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d14:	4619      	mov	r1, r3
 8001d16:	4851      	ldr	r0, [pc, #324]	@ (8001e5c <HAL_SPI_MspInit+0x1fc>)
 8001d18:	f006 fdc4 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001d1c:	e096      	b.n	8001e4c <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4f      	ldr	r2, [pc, #316]	@ (8001e60 <HAL_SPI_MspInit+0x200>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d146      	bne.n	8001db6 <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001d28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fb0d 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001d48:	f7ff fdc4 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d4c:	4b42      	ldr	r3, [pc, #264]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d52:	4a41      	ldr	r2, [pc, #260]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	4a39      	ldr	r2, [pc, #228]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d88:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001da2:	2306      	movs	r3, #6
 8001da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dac:	4619      	mov	r1, r3
 8001dae:	482d      	ldr	r0, [pc, #180]	@ (8001e64 <HAL_SPI_MspInit+0x204>)
 8001db0:	f006 fd78 	bl	80088a4 <HAL_GPIO_Init>
}
 8001db4:	e04a      	b.n	8001e4c <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <HAL_SPI_MspInit+0x208>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d145      	bne.n	8001e4c <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001dc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd2:	f107 0320 	add.w	r3, r7, #32
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 fac0 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001de2:	f7ff fd77 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dec:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001dee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001df2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0a:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_SPI_MspInit+0x1f8>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e22:	2364      	movs	r3, #100	@ 0x64
 8001e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e44:	4619      	mov	r1, r3
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <HAL_SPI_MspInit+0x20c>)
 8001e48:	f006 fd2c 	bl	80088a4 <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	37f0      	adds	r7, #240	@ 0xf0
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40003800 	.word	0x40003800
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020400 	.word	0x58020400
 8001e60:	40003c00 	.word	0x40003c00
 8001e64:	58020800 	.word	0x58020800
 8001e68:	40013400 	.word	0x40013400
 8001e6c:	58021000 	.word	0x58021000

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <HAL_TIM_Base_MspInit+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10f      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e82:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ea0:	e045      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eaa:	d10f      	bne.n	8001ecc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb2:	4a22      	ldr	r2, [pc, #136]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
}
 8001eca:	e030      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f40 <HAL_TIM_Base_MspInit+0xd0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d117      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001edc:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	201d      	movs	r0, #29
 8001efa:	f004 f89a 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001efe:	201d      	movs	r0, #29
 8001f00:	f004 f8b1 	bl	8006066 <HAL_NVIC_EnableIRQ>
}
 8001f04:	e013      	b.n	8001f2e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f44 <HAL_TIM_Base_MspInit+0xd4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10e      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f16:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_TIM_Base_MspInit+0xcc>)
 8001f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a26      	ldr	r2, [pc, #152]	@ (8002000 <HAL_TIM_MspPostInit+0xb8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d120      	bne.n	8001fac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f7a:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001f88:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4818      	ldr	r0, [pc, #96]	@ (8002008 <HAL_TIM_MspPostInit+0xc0>)
 8001fa6:	f006 fc7d 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001faa:	e024      	b.n	8001ff6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_TIM_MspPostInit+0xc4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d11f      	bne.n	8001ff6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_TIM_MspPostInit+0xbc>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001ff2:	f006 fc57 	bl	80088a4 <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	@ 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40000400 	.word	0x40000400
 8002004:	58024400 	.word	0x58024400
 8002008:	58020800 	.word	0x58020800
 800200c:	40000800 	.word	0x40000800
 8002010:	58020c00 	.word	0x58020c00

08002014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0ba      	sub	sp, #232	@ 0xe8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	22b8      	movs	r2, #184	@ 0xb8
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f013 ffd0 	bl	8015fda <memset>
  if(huart->Instance==UART7)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_UART_MspInit+0x160>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d147      	bne.n	80020d4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002044:	f04f 0202 	mov.w	r2, #2
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002056:	f107 0318 	add.w	r3, r7, #24
 800205a:	4618      	mov	r0, r3
 800205c:	f009 f97e 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002066:	f7ff fc35 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800206a:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002070:	4a41      	ldr	r2, [pc, #260]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002076:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800207a:	4b3f      	ldr	r3, [pc, #252]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800207c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002080:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002088:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208e:	4a3a      	ldr	r2, [pc, #232]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002098:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80020a6:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80020aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80020c0:	2307      	movs	r3, #7
 80020c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ca:	4619      	mov	r1, r3
 80020cc:	482b      	ldr	r0, [pc, #172]	@ (800217c <HAL_UART_MspInit+0x168>)
 80020ce:	f006 fbe9 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020d2:	e04a      	b.n	800216a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a29      	ldr	r2, [pc, #164]	@ (8002180 <HAL_UART_MspInit+0x16c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d145      	bne.n	800216a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020de:	f04f 0201 	mov.w	r2, #1
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f009 f931 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002100:	f7ff fbe8 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800210a:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002128:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <HAL_UART_MspInit+0x164>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_UART_MspInit+0x164>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002140:	23c0      	movs	r3, #192	@ 0xc0
 8002142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002158:	2307      	movs	r3, #7
 800215a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002162:	4619      	mov	r1, r3
 8002164:	4807      	ldr	r0, [pc, #28]	@ (8002184 <HAL_UART_MspInit+0x170>)
 8002166:	f006 fb9d 	bl	80088a4 <HAL_GPIO_Init>
}
 800216a:	bf00      	nop
 800216c:	37e8      	adds	r7, #232	@ 0xe8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40007800 	.word	0x40007800
 8002178:	58024400 	.word	0x58024400
 800217c:	58021000 	.word	0x58021000
 8002180:	40011000 	.word	0x40011000
 8002184:	58020400 	.word	0x58020400

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021de:	f002 fa95 	bl	800470c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <DMA1_Stream0_IRQHandler+0x10>)
 80021ee:	f005 f847 	bl	8007280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	240003dc 	.word	0x240003dc

080021fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <DMA1_Stream1_IRQHandler+0x10>)
 8002202:	f005 f83d 	bl	8007280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	24000454 	.word	0x24000454

08002210 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <TIM3_IRQHandler+0x10>)
 8002216:	f00c f935 	bl	800e484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	24000750 	.word	0x24000750

08002224 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <OTG_HS_IRQHandler+0x10>)
 800222a:	f006 ff89 	bl	8009140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	24006414 	.word	0x24006414

08002238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_kill>:

int _kill(int pid, int sig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002252:	f013 ff33 	bl	80160bc <__errno>
 8002256:	4603      	mov	r3, r0
 8002258:	2216      	movs	r2, #22
 800225a:	601a      	str	r2, [r3, #0]
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_exit>:

void _exit (int status)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ffe7 	bl	8002248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800227a:	bf00      	nop
 800227c:	e7fd      	b.n	800227a <_exit+0x12>

0800227e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e00a      	b.n	80022a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002290:	f3af 8000 	nop.w
 8002294:	4601      	mov	r1, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbf0      	blt.n	8002290 <_read+0x12>
  }

  return len;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e009      	b.n	80022de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	60ba      	str	r2, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbf1      	blt.n	80022ca <_write+0x12>
  }
  return len;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_close>:

int _close(int file)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002318:	605a      	str	r2, [r3, #4]
  return 0;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_isatty>:

int _isatty(int file)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <_sbrk+0x5c>)
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <_sbrk+0x60>)
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <_sbrk+0x64>)
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <_sbrk+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002388:	f013 fe98 	bl	80160bc <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e009      	b.n	80023ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239e:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <_sbrk+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	24050000 	.word	0x24050000
 80023b8:	00000400 	.word	0x00000400
 80023bc:	24004f2c 	.word	0x24004f2c
 80023c0:	24006c68 	.word	0x24006c68

080023c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023c8:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <SystemInit+0xd0>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	4a31      	ldr	r2, [pc, #196]	@ (8002494 <SystemInit+0xd0>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <SystemInit+0xd4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d807      	bhi.n	80023f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <SystemInit+0xd4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 030f 	bic.w	r3, r3, #15
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <SystemInit+0xd4>)
 80023ee:	f043 0307 	orr.w	r3, r3, #7
 80023f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023f4:	4b29      	ldr	r3, [pc, #164]	@ (800249c <SystemInit+0xd8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a28      	ldr	r2, [pc, #160]	@ (800249c <SystemInit+0xd8>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002400:	4b26      	ldr	r3, [pc, #152]	@ (800249c <SystemInit+0xd8>)
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <SystemInit+0xd8>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4924      	ldr	r1, [pc, #144]	@ (800249c <SystemInit+0xd8>)
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <SystemInit+0xdc>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002412:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <SystemInit+0xd4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <SystemInit+0xd4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 030f 	bic.w	r3, r3, #15
 8002426:	4a1c      	ldr	r2, [pc, #112]	@ (8002498 <SystemInit+0xd4>)
 8002428:	f043 0307 	orr.w	r3, r3, #7
 800242c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <SystemInit+0xd8>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <SystemInit+0xd8>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <SystemInit+0xd8>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002440:	4b16      	ldr	r3, [pc, #88]	@ (800249c <SystemInit+0xd8>)
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <SystemInit+0xe0>)
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002446:	4b15      	ldr	r3, [pc, #84]	@ (800249c <SystemInit+0xd8>)
 8002448:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <SystemInit+0xe4>)
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800244c:	4b13      	ldr	r3, [pc, #76]	@ (800249c <SystemInit+0xd8>)
 800244e:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <SystemInit+0xe8>)
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <SystemInit+0xd8>)
 8002454:	2200      	movs	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002458:	4b10      	ldr	r3, [pc, #64]	@ (800249c <SystemInit+0xd8>)
 800245a:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <SystemInit+0xe8>)
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800245e:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <SystemInit+0xd8>)
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002464:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <SystemInit+0xd8>)
 8002466:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <SystemInit+0xe8>)
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <SystemInit+0xd8>)
 800246c:	2200      	movs	r2, #0
 800246e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <SystemInit+0xd8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a09      	ldr	r2, [pc, #36]	@ (800249c <SystemInit+0xd8>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800247c:	4b07      	ldr	r3, [pc, #28]	@ (800249c <SystemInit+0xd8>)
 800247e:	2200      	movs	r2, #0
 8002480:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <SystemInit+0xec>)
 8002484:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002488:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	52002000 	.word	0x52002000
 800249c:	58024400 	.word	0x58024400
 80024a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024a4:	02020200 	.word	0x02020200
 80024a8:	01ff0000 	.word	0x01ff0000
 80024ac:	01010280 	.word	0x01010280
 80024b0:	52004000 	.word	0x52004000

080024b4 <VibeCheck_Init>:

void VibeCheck_Init(VibeCheck* vc,
		TIM_HandleTypeDef* htim_strobe,
		TIM_HandleTypeDef* htim_wavegen,
		DAC_HandleTypeDef* hdac_wavegen)
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b0cf      	sub	sp, #316	@ 0x13c
 80024b8:	af10      	add	r7, sp, #64	@ 0x40
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 faf9 	bl	8002abc <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80024ca:	4a5c      	ldr	r2, [pc, #368]	@ (800263c <VibeCheck_Init+0x188>)
 80024cc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80024d0:	6810      	ldr	r0, [r2, #0]
 80024d2:	6018      	str	r0, [r3, #0]
 80024d4:	8891      	ldrh	r1, [r2, #4]
 80024d6:	7992      	ldrb	r2, [r2, #6]
 80024d8:	8099      	strh	r1, [r3, #4]
 80024da:	719a      	strb	r2, [r3, #6]
 80024dc:	f107 03b7 	add.w	r3, r7, #183	@ 0xb7
 80024e0:	2239      	movs	r2, #57	@ 0x39
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f013 fd78 	bl	8015fda <memset>
 80024ea:	4b55      	ldr	r3, [pc, #340]	@ (8002640 <VibeCheck_Init+0x18c>)
 80024ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	f242 4324 	movw	r3, #9252	@ 0x2424
 80024f6:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 80024f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 80024fc:	4a51      	ldr	r2, [pc, #324]	@ (8002644 <VibeCheck_Init+0x190>)
 80024fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002502:	6810      	ldr	r0, [r2, #0]
 8002504:	6851      	ldr	r1, [r2, #4]
 8002506:	c303      	stmia	r3!, {r0, r1}
 8002508:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800250c:	2238      	movs	r2, #56	@ 0x38
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f013 fd62 	bl	8015fda <memset>
 8002516:	4b4c      	ldr	r3, [pc, #304]	@ (8002648 <VibeCheck_Init+0x194>)
 8002518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002522:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 8002524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	};

	VibeCheckShell_InputHandler accel_cmd = {
 8002528:	4a48      	ldr	r2, [pc, #288]	@ (800264c <VibeCheck_Init+0x198>)
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	6810      	ldr	r0, [r2, #0]
 8002530:	6018      	str	r0, [r3, #0]
 8002532:	8892      	ldrh	r2, [r2, #4]
 8002534:	809a      	strh	r2, [r3, #4]
 8002536:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 800253a:	223a      	movs	r2, #58	@ 0x3a
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f013 fd4b 	bl	8015fda <memset>
 8002544:	4b42      	ldr	r3, [pc, #264]	@ (8002650 <VibeCheck_Init+0x19c>)
 8002546:	663b      	str	r3, [r7, #96]	@ 0x60
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	f244 4378 	movw	r3, #17528	@ 0x4478
 800254e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 8002550:	667b      	str	r3, [r7, #100]	@ 0x64
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8002552:	68fe      	ldr	r6, [r7, #12]
 8002554:	466d      	mov	r5, sp
 8002556:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 800255a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800256a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800256e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002574:	4630      	mov	r0, r6
 8002576:	f000 fbcf 	bl	8002d18 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 800257a:	68fe      	ldr	r6, [r7, #12]
 800257c:	466d      	mov	r5, sp
 800257e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002592:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002596:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800259a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259c:	4630      	mov	r0, r6
 800259e:	f000 fbbb 	bl	8002d18 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 80025a2:	68fe      	ldr	r6, [r7, #12]
 80025a4:	466d      	mov	r5, sp
 80025a6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 fba7 	bl	8002d18 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <VibeCheck_Init+0x1a0>)
 80025cc:	61bb      	str	r3, [r7, #24]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f242 4344 	movw	r3, #9284	@ 0x2444
 80025d4:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 80025d6:	61fb      	str	r3, [r7, #28]
	};

	VibeCheckShell_OutputHandler accel_sender = {
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <VibeCheck_Init+0x1a4>)
 80025da:	613b      	str	r3, [r7, #16]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	f244 4378 	movw	r3, #17528	@ 0x4478
 80025e2:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 80025e4:	617b      	str	r3, [r7, #20]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025f0:	f000 fbc4 	bl	8002d7c <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025fe:	f000 fbbd 	bl	8002d7c <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002608:	4413      	add	r3, r2
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fded 	bl	80031ec <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002618:	4413      	add	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fb34 	bl	8003c8c <VibeCheckWaveGen_Init>
	VibeCheckAccel_Init(&vc->accel);
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	f244 4378 	movw	r3, #17528	@ 0x4478
 800262a:	4413      	add	r3, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f843 	bl	80026b8 <VibeCheckAccel_Init>
}
 8002632:	bf00      	nop
 8002634:	37fc      	adds	r7, #252	@ 0xfc
 8002636:	46bd      	mov	sp, r7
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263a:	bf00      	nop
 800263c:	08019728 	.word	0x08019728
 8002640:	0800378d 	.word	0x0800378d
 8002644:	08019730 	.word	0x08019730
 8002648:	08004481 	.word	0x08004481
 800264c:	08019738 	.word	0x08019738
 8002650:	08002939 	.word	0x08002939
 8002654:	0800455d 	.word	0x0800455d
 8002658:	080029f1 	.word	0x080029f1

0800265c <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f242 4344 	movw	r3, #9284	@ 0x2444
 800266a:	4413      	add	r3, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fba9 	bl	8003dc4 <VibeCheckWaveGen_Update>
	VibeCheckAccel_Update(&vc->accel);
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	f244 4378 	movw	r3, #17528	@ 0x4478
 8002678:	4413      	add	r3, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f836 	bl	80026ec <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fa54 	bl	8002b30 <VibeCheckShell_Update>
 8002688:	4603      	mov	r3, r0
 800268a:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f107 020c 	add.w	r2, r7, #12
 8002692:	f107 0110 	add.w	r1, r7, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fbe6 	bl	8002e68 <VibeCheckShell_GetOutput>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <VibeCheck_Loop+0x54>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	b292      	uxth	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f011 fd24 	bl	80140f8 <CDC_Transmit_HS>
	}
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80026f4:	f002 f81e 	bl	8004734 <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d95e      	bls.n	80027c6 <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d055      	beq.n	80027be <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80027d0 <VibeCheckAccel_Update+0xe4>
 8002720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	f016 f9ba 	bl	8018aa0 <sinf>
 800272c:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80027d0 <VibeCheckAccel_Update+0xe4>
 800273e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002742:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80027d4 <VibeCheckAccel_Update+0xe8>
 8002746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800274a:	eeb0 0a67 	vmov.f32	s0, s15
 800274e:	f016 f9a7 	bl	8018aa0 <sinf>
 8002752:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002760:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80027d0 <VibeCheckAccel_Update+0xe4>
 8002764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002768:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80027d8 <VibeCheckAccel_Update+0xec>
 800276c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	f016 f994 	bl	8018aa0 <sinf>
 8002778:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 800277c:	ed97 1a02 	vldr	s2, [r7, #8]
 8002780:	edd7 0a03 	vldr	s1, [r7, #12]
 8002784:	ed97 0a04 	vldr	s0, [r7, #16]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	2101      	movs	r1, #1
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f825 	bl	80027dc <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 8002792:	ed97 1a03 	vldr	s2, [r7, #12]
 8002796:	edd7 0a04 	vldr	s1, [r7, #16]
 800279a:	ed97 0a02 	vldr	s0, [r7, #8]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	2102      	movs	r1, #2
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f81a 	bl	80027dc <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 80027a8:	ed97 1a04 	vldr	s2, [r7, #16]
 80027ac:	edd7 0a02 	vldr	s1, [r7, #8]
 80027b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	2103      	movs	r1, #3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f80f 	bl	80027dc <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40c90fd0 	.word	0x40c90fd0
 80027d4:	3f860a8b 	.word	0x3f860a8b
 80027d8:	40060a8b 	.word	0x40060a8b

080027dc <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6178      	str	r0, [r7, #20]
 80027e4:	460b      	mov	r3, r1
 80027e6:	60fa      	str	r2, [r7, #12]
 80027e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80027f0:	ed87 1a00 	vstr	s2, [r7]
 80027f4:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	7cfa      	ldrb	r2, [r7, #19]
 800280a:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3304      	adds	r3, #4
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3308      	adds	r3, #8
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	330c      	adds	r3, #12
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3310      	adds	r3, #16
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002880:	2b0a      	cmp	r3, #10
 8002882:	d104      	bne.n	800288e <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2201      	movs	r2, #1
 8002888:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 800288c:	e00c      	b.n	80028a8 <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002894:	2b14      	cmp	r3, #20
 8002896:	d107      	bne.n	80028a8 <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <VibeCheckAccel_GetDataReady+0x3c>
	{
		accel->data_ready = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800290e:	2b09      	cmp	r3, #9
 8002910:	d805      	bhi.n	800291e <VibeCheckAccel_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e002      	b.n	8002924 <VibeCheckAccel_GetDataReady+0x38>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <VibeCheckAccel_GetDataReady+0x3e>
	}
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b094      	sub	sp, #80	@ 0x50
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	4619      	mov	r1, r3
 800294e:	6838      	ldr	r0, [r7, #0]
 8002950:	f000 fb06 	bl	8002f60 <VibeCheckShell_GetNextString>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03c      	beq.n	80029d4 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	4920      	ldr	r1, [pc, #128]	@ (80029e0 <VibeCheckAccelCMD_Execute+0xa8>)
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fcd5 	bl	8000310 <strcmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d133      	bne.n	80029d4 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	2240      	movs	r2, #64	@ 0x40
 8002972:	4619      	mov	r1, r3
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f000 faf3 	bl	8002f60 <VibeCheckShell_GetNextString>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d029      	beq.n	80029d4 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	4917      	ldr	r1, [pc, #92]	@ (80029e4 <VibeCheckAccelCMD_Execute+0xac>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fcc2 	bl	8000310 <strcmp>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 8002992:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002994:	f7ff ff8e 	bl	80028b4 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002998:	4913      	ldr	r1, [pc, #76]	@ (80029e8 <VibeCheckAccelCMD_Execute+0xb0>)
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f000 fb9a 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80029a0:	6838      	ldr	r0, [r7, #0]
 80029a2:	f000 fc15 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e015      	b.n	80029d6 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	490f      	ldr	r1, [pc, #60]	@ (80029ec <VibeCheckAccelCMD_Execute+0xb4>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fcad 	bl	8000310 <strcmp>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 80029bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80029be:	f7ff ff87 	bl	80028d0 <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80029c2:	4909      	ldr	r1, [pc, #36]	@ (80029e8 <VibeCheckAccelCMD_Execute+0xb0>)
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f000 fb85 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f000 fc00 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3750      	adds	r7, #80	@ 0x50
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	08019740 	.word	0x08019740
 80029e4:	0801974c 	.word	0x0801974c
 80029e8:	08019754 	.word	0x08019754
 80029ec:	08019758 	.word	0x08019758

080029f0 <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	6938      	ldr	r0, [r7, #16]
 8002a06:	f7ff ff71 	bl	80028ec <VibeCheckAccel_GetDataReady>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d04e      	beq.n	8002aae <VibeCheckAccelSender_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8002a10:	4929      	ldr	r1, [pc, #164]	@ (8002ab8 <VibeCheckAccelSender_Execute+0xc8>)
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f000 fb5e 	bl	80030d4 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f000 fbcb 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8002a1e:	210a      	movs	r1, #10
 8002a20:	6838      	ldr	r0, [r7, #0]
 8002a22:	f000 fb91 	bl	8003148 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002a2a:	e038      	b.n	8002a9e <VibeCheckAccelSender_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f000 fbc1 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	6838      	ldr	r0, [r7, #0]
 8002a3a:	f000 fb85 	bl	8003148 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f000 fbb8 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f000 fb7c 	bl	8003148 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f000 fbaf 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a60:	6838      	ldr	r0, [r7, #0]
 8002a62:	f000 fb89 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f000 fba4 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a72:	eeb0 0a67 	vmov.f32	s0, s15
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f000 fb7e 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f000 fb99 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a88:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8c:	6838      	ldr	r0, [r7, #0]
 8002a8e:	f000 fb73 	bl	8003178 <VibeCheckShell_PutOutputFloat>

			data++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3314      	adds	r3, #20
 8002a96:	60fb      	str	r3, [r7, #12]
			data_written++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b09      	cmp	r3, #9
 8002aa2:	d9c3      	bls.n	8002a2c <VibeCheckAccelSender_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f000 fb93 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <VibeCheckAccelSender_Execute+0xc0>
	}
	else
	{
		return 0;
 8002aae:	2300      	movs	r3, #0
	}
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	08019760 	.word	0x08019760

08002abc <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aea:	461a      	mov	r2, r3
 8002aec:	2300      	movs	r3, #0
 8002aee:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af6:	461a      	mov	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b02:	461a      	mov	r2, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b099      	sub	sp, #100	@ 0x64
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b46:	d302      	bcc.n	8002b4e <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8092 	beq.w	8002c7e <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8002b60:	e08d      	b.n	8002c7e <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2240      	movs	r2, #64	@ 0x40
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9f8 	bl	8002f60 <VibeCheckShell_GetNextString>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04d      	beq.n	8002c12 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b7a:	e041      	b.n	8002c00 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8002b7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	f107 020c 	add.w	r2, r7, #12
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fbb9 	bl	8000310 <strcmp>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d11e      	bne.n	8002be2 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	18ca      	adds	r2, r1, r3
 8002bb2:	f241 035c 	movw	r3, #4188	@ 0x105c
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	47a0      	blx	r4
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8002be0:	e01b      	b.n	8002c1a <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002be8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d102      	bne.n	8002bfa <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c06:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002c0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3b5      	bcc.n	8002b7c <VibeCheckShell_Update+0x4c>
 8002c10:	e004      	b.n	8002c1c <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002c12:	2302      	movs	r3, #2
 8002c14:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002c18:	e000      	b.n	8002c1c <VibeCheckShell_Update+0xec>
					break;
 8002c1a:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c50:	d103      	bne.n	8002c5a <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482c      	ldr	r0, [pc, #176]	@ (8002d14 <VibeCheckShell_Update+0x1e4>)
 8002c62:	f013 f9c2 	bl	8015fea <strchr>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d100      	bne.n	8002c6e <VibeCheckShell_Update+0x13e>
		{
 8002c6c:	e7d6      	b.n	8002c1c <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8002c6e:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f af6c 	bne.w	8002b62 <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c8e:	e018      	b.n	8002cc2 <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c94:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8002c98:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ca0:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	4790      	blx	r2
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cc8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002ccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3de      	bcc.n	8002c90 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cde:	d302      	bcc.n	8002ce6 <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cea:	2300      	movs	r3, #0
 8002cec:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002cf0:	f362 0307 	bfi	r3, r2, #0, #8
 8002cf4:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8002cf8:	f362 230f 	bfi	r3, r2, #8, #8
 8002cfc:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002d00:	f362 4317 	bfi	r3, r2, #16, #8
 8002d04:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002d08:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3764      	adds	r7, #100	@ 0x64
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	08019768 	.word	0x08019768

08002d18 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8002d18:	b084      	sub	sp, #16
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	f107 0014 	add.w	r0, r7, #20
 8002d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d30:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002d34:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d36:	d81a      	bhi.n	8002d6e <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d42:	1c53      	adds	r3, r2, #1
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002d4a:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	18ca      	adds	r2, r1, r3
 8002d5a:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	f107 0114 	add.w	r1, r7, #20
 8002d66:	2248      	movs	r2, #72	@ 0x48
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f013 f9d4 	bl	8016116 <memcpy>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d78:	b004      	add	sp, #16
 8002d7a:	4770      	bx	lr

08002d7c <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d90:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002d94:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d96:	d814      	bhi.n	8002dc2 <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d9e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002daa:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	1d3a      	adds	r2, r7, #4
 8002dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbe:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e035      	b.n	8002e4e <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	7811      	ldrb	r1, [r2, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0a:	d103      	bne.n	8002e14 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	480e      	ldr	r0, [pc, #56]	@ (8002e64 <VibeCheckShell_PutInput+0x94>)
 8002e2a:	f013 f8de 	bl	8015fea <strchr>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3c5      	bcc.n	8002de2 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8002e56:	e000      	b.n	8002e5a <VibeCheckShell_PutInput+0x8a>
			break;
 8002e58:	bf00      	nop
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08019768 	.word	0x08019768

08002e68 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d101      	bne.n	8002e8c <VibeCheckShell_GetOutput+0x24>
		return 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e062      	b.n	8002f52 <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d930      	bls.n	8002f02 <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	441a      	add	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed8:	6959      	ldr	r1, [r3, #20]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	1acb      	subs	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eec:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002efc:	6153      	str	r3, [r2, #20]
		return 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e027      	b.n	8002f52 <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	441a      	add	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4413      	add	r3, r2
 8002f38:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f42:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	6153      	str	r3, [r2, #20]
		return 1;
 8002f50:	2301      	movs	r3, #1
	}

}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e057      	b.n	8003022 <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	4619      	mov	r1, r3
 8002f82:	482c      	ldr	r0, [pc, #176]	@ (8003034 <VibeCheckShell_GetNextString+0xd4>)
 8002f84:	f013 f831 	bl	8015fea <strchr>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
				return 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e046      	b.n	800302c <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e044      	b.n	800302c <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc8:	d103      	bne.n	8002fd2 <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4818      	ldr	r0, [pc, #96]	@ (8003038 <VibeCheckShell_GetNextString+0xd8>)
 8002fd8:	f013 f807 	bl	8015fea <strchr>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01c      	beq.n	8003022 <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
					return 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e01c      	b.n	800302c <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
 8002ff6:	7cbb      	ldrb	r3, [r7, #18]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	4a10      	ldr	r2, [pc, #64]	@ (800303c <VibeCheckShell_GetNextString+0xdc>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d103      	bne.n	8003010 <VibeCheckShell_GetNextString+0xb0>
 8003008:	7cbb      	ldrb	r3, [r7, #18]
 800300a:	f103 0220 	add.w	r2, r3, #32
 800300e:	e000      	b.n	8003012 <VibeCheckShell_GetNextString+0xb2>
 8003010:	7cba      	ldrb	r2, [r7, #18]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
				i++;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3a3      	bcc.n	8002f72 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	08019768 	.word	0x08019768
 8003038:	0801976c 	.word	0x0801976c
 800303c:	08019918 	.word	0x08019918

08003040 <VibeCheckShell_GetNextFloat>:
	return 0;
}


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b099      	sub	sp, #100	@ 0x64
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff84 	bl	8002f60 <VibeCheckShell_GetNextString>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d033      	beq.n	80030c6 <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <VibeCheckShell_GetNextFloat+0x90>)
 8003060:	f107 040c 	add.w	r4, r7, #12
 8003064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003066:	c407      	stmia	r4!, {r0, r1, r2}
 8003068:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 800306a:	2300      	movs	r3, #0
 800306c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800306e:	e013      	b.n	8003098 <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 8003070:	f107 021c 	add.w	r2, r7, #28
 8003074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f012 ffb1 	bl	8015fea <strchr>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 800308e:	2300      	movs	r3, #0
 8003090:	e01a      	b.n	80030c8 <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 8003092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003094:	3301      	adds	r3, #1
 8003096:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd f997 	bl	80003d0 <strlen>
 80030a2:	4602      	mov	r2, r0
 80030a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d3e2      	bcc.n	8003070 <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4618      	mov	r0, r3
 80030b0:	f011 fc76 	bl	80149a0 <atof>
 80030b4:	eeb0 7b40 	vmov.f64	d7, d0
 80030b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3764      	adds	r7, #100	@ 0x64
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	0801977c 	.word	0x0801977c

080030d4 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	while (*str)
 80030de:	e027      	b.n	8003130 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	1c53      	adds	r3, r2, #1
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80030f6:	6101      	str	r1, [r0, #16]
 80030f8:	7811      	ldrb	r1, [r2, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	460a      	mov	r2, r1
 8003100:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	3301      	adds	r3, #1
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003114:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003122:	d105      	bne.n	8003130 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6113      	str	r3, [r2, #16]
	while (*str)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1d3      	bne.n	80030e0 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b092      	sub	sp, #72	@ 0x48
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4906      	ldr	r1, [pc, #24]	@ (8003174 <VibeCheckShell_PutOutputInt+0x2c>)
 800315a:	4618      	mov	r0, r3
 800315c:	f012 feda 	bl	8015f14 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffb4 	bl	80030d4 <VibeCheckShell_PutOutputString>
}
 800316c:	bf00      	nop
 800316e:	3748      	adds	r7, #72	@ 0x48
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0801978c 	.word	0x0801978c

08003178 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b092      	sub	sp, #72	@ 0x48
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8003184:	edd7 7a00 	vldr	s15, [r7]
 8003188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800318c:	f107 0008 	add.w	r0, r7, #8
 8003190:	ec53 2b17 	vmov	r2, r3, d7
 8003194:	4906      	ldr	r1, [pc, #24]	@ (80031b0 <VibeCheckShell_PutOutputFloat+0x38>)
 8003196:	f012 febd 	bl	8015f14 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff97 	bl	80030d4 <VibeCheckShell_PutOutputString>
}
 80031a6:	bf00      	nop
 80031a8:	3748      	adds	r7, #72	@ 0x48
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	08019790 	.word	0x08019790

080031b4 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <VibeCheckShell_PutOutputSeparator+0x18>)
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ff88 	bl	80030d4 <VibeCheckShell_PutOutputString>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	08019794 	.word	0x08019794

080031d0 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 80031d8:	4903      	ldr	r1, [pc, #12]	@ (80031e8 <VibeCheckShell_PutOutputDelimiter+0x18>)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ff7a 	bl	80030d4 <VibeCheckShell_PutOutputString>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	08019768 	.word	0x08019768

080031ec <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003202:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800320a:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f640 125f 	movw	r2, #2399	@ 0x95f
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edd3 7a01 	vldr	s15, [r3, #4]
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f84a 	bl	80032c4 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edd3 7a02 	vldr	s15, [r3, #8]
 8003236:	eeb0 0a67 	vmov.f32	s0, s15
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f928 	bl	8003490 <VibeCheckStrobe_SetExposure>

}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f00a fe7b 	bl	800df50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f00a ff5d 	bl	800e120 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2104      	movs	r1, #4
 800326c:	4618      	mov	r0, r3
 800326e:	f00a ff57 	bl	800e120 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2108      	movs	r1, #8
 8003278:	4618      	mov	r0, r3
 800327a:	f00a ff51 	bl	800e120 <HAL_TIM_PWM_Start>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f00a fe5c 	bl	800df50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f00b f85a 	bl	800e358 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2104      	movs	r1, #4
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00b f854 	bl	800e358 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2108      	movs	r1, #8
 80032b6:	4618      	mov	r0, r3
 80032b8:	f00b f84e 	bl	800e358 <HAL_TIM_PWM_Stop>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 80032d0:	edd7 7a00 	vldr	s15, [r7]
 80032d4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80032d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	d502      	bpl.n	80032e8 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 80032e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032e6:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 80032e8:	edd7 7a00 	vldr	s15, [r7]
 80032ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003358 <VibeCheckStrobe_SetFrequency+0x94>
 80032f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	dd01      	ble.n	80032fe <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <VibeCheckStrobe_SetFrequency+0x98>)
 80032fc:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 80032fe:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003360 <VibeCheckStrobe_SetFrequency+0x9c>
 8003302:	ed97 7a00 	vldr	s14, [r7]
 8003306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800330e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003316:	ee17 2a90 	vmov	r2, s15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800332e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003332:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003360 <VibeCheckStrobe_SetFrequency+0x9c>
 8003336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6912      	ldr	r2, [r2, #16]
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	447a0000 	.word	0x447a0000
 800335c:	447a0000 	.word	0x447a0000
 8003360:	47c35000 	.word	0x47c35000

08003364 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	ee07 3a90 	vmov	s15, r3
}
 8003374:	eeb0 0a67 	vmov.f32	s0, s15
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8003390:	edd7 7a00 	vldr	s15, [r7]
 8003394:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800345c <VibeCheckStrobe_SetPhase+0xd8>
 8003398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	d501      	bpl.n	80033a6 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 80033a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003460 <VibeCheckStrobe_SetPhase+0xdc>)
 80033a4:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 80033a6:	edd7 7a00 	vldr	s15, [r7]
 80033aa:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003464 <VibeCheckStrobe_SetPhase+0xe0>
 80033ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	dd01      	ble.n	80033bc <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 80033b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003468 <VibeCheckStrobe_SetPhase+0xe4>)
 80033ba:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c2:	ed97 7a00 	vldr	s14, [r7]
 80033c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ca:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 80033ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80033d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800346c <VibeCheckStrobe_SetPhase+0xe8>
 80033d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ee:	ee17 3a90 	vmov	r3, s15
 80033f2:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d029      	beq.n	800344e <VibeCheckStrobe_SetPhase+0xca>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d125      	bne.n	800344e <VibeCheckStrobe_SetPhase+0xca>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d121      	bne.n	800344e <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800342a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800346c <VibeCheckStrobe_SetPhase+0xe8>
 800342e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	441a      	add	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	619a      	str	r2, [r3, #24]
	}
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	c3340000 	.word	0xc3340000
 8003460:	c3340000 	.word	0xc3340000
 8003464:	43340000 	.word	0x43340000
 8003468:	43340000 	.word	0x43340000
 800346c:	43b40000 	.word	0x43b40000

08003470 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	ee07 3a90 	vmov	s15, r3
}
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 800349c:	edd7 7a00 	vldr	s15, [r7]
 80034a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800351c <VibeCheckStrobe_SetExposure+0x8c>
 80034a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003520 <VibeCheckStrobe_SetExposure+0x90>
 80034ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b4:	ee17 3a90 	vmov	r3, s15
 80034b8:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d904      	bls.n	80034d2 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034dc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003520 <VibeCheckStrobe_SetExposure+0x90>
 80034e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003524 <VibeCheckStrobe_SetExposure+0x94>
 80034e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	3a83126f 	.word	0x3a83126f
 8003520:	47c35000 	.word	0x47c35000
 8003524:	447a0000 	.word	0x447a0000

08003528 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	ee07 3a90 	vmov	s15, r3
}
 8003538:	eeb0 0a67 	vmov.f32	s0, s15
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6912      	ldr	r2, [r2, #16]
 8003560:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6952      	ldr	r2, [r2, #20]
 800357a:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
	}
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b096      	sub	sp, #88	@ 0x58
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800359e:	f107 0318 	add.w	r3, r7, #24
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	4619      	mov	r1, r3
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	f7ff fcda 	bl	8002f60 <VibeCheckShell_GetNextString>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d065      	beq.n	800367e <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80035b2:	f107 0318 	add.w	r3, r7, #24
 80035b6:	4934      	ldr	r1, [pc, #208]	@ (8003688 <VibeCheckStrobeCMD_Set+0xf4>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fc fea9 	bl	8000310 <strcmp>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d118      	bne.n	80035f6 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	4619      	mov	r1, r3
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f7ff fd38 	bl	8003040 <VibeCheckShell_GetNextFloat>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d053      	beq.n	800367e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 80035d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80035da:	eeb0 0a67 	vmov.f32	s0, s15
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fe70 	bl	80032c4 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80035e4:	4929      	ldr	r1, [pc, #164]	@ (800368c <VibeCheckStrobeCMD_Set+0xf8>)
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f7ff fd74 	bl	80030d4 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7ff fdef 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e044      	b.n	8003680 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 80035f6:	f107 0318 	add.w	r3, r7, #24
 80035fa:	4925      	ldr	r1, [pc, #148]	@ (8003690 <VibeCheckStrobeCMD_Set+0xfc>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc fe87 	bl	8000310 <strcmp>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d118      	bne.n	800363a <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	4619      	mov	r1, r3
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f7ff fd16 	bl	8003040 <VibeCheckShell_GetNextFloat>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d031      	beq.n	800367e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 800361a:	edd7 7a04 	vldr	s15, [r7, #16]
 800361e:	eeb0 0a67 	vmov.f32	s0, s15
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff feae 	bl	8003384 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003628:	4918      	ldr	r1, [pc, #96]	@ (800368c <VibeCheckStrobeCMD_Set+0xf8>)
 800362a:	6838      	ldr	r0, [r7, #0]
 800362c:	f7ff fd52 	bl	80030d4 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	f7ff fdcd 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003636:	2301      	movs	r3, #1
 8003638:	e022      	b.n	8003680 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 800363a:	f107 0318 	add.w	r3, r7, #24
 800363e:	4915      	ldr	r1, [pc, #84]	@ (8003694 <VibeCheckStrobeCMD_Set+0x100>)
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc fe65 	bl	8000310 <strcmp>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4619      	mov	r1, r3
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f7ff fcf4 	bl	8003040 <VibeCheckShell_GetNextFloat>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800365e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003662:	eeb0 0a67 	vmov.f32	s0, s15
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff12 	bl	8003490 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 800366c:	4907      	ldr	r1, [pc, #28]	@ (800368c <VibeCheckStrobeCMD_Set+0xf8>)
 800366e:	6838      	ldr	r0, [r7, #0]
 8003670:	f7ff fd30 	bl	80030d4 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f7ff fdab 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3758      	adds	r7, #88	@ 0x58
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	08019798 	.word	0x08019798
 800368c:	080197a4 	.word	0x080197a4
 8003690:	080197a8 	.word	0x080197a8
 8003694:	080197b0 	.word	0x080197b0

08003698 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b092      	sub	sp, #72	@ 0x48
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	2240      	movs	r2, #64	@ 0x40
 80036a8:	4619      	mov	r1, r3
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f7ff fc58 	bl	8002f60 <VibeCheckShell_GetNextString>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d05c      	beq.n	8003770 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	4930      	ldr	r1, [pc, #192]	@ (800377c <VibeCheckStrobeCMD_Get+0xe4>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc fe27 	bl	8000310 <strcmp>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d115      	bne.n	80036f4 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80036c8:	492d      	ldr	r1, [pc, #180]	@ (8003780 <VibeCheckStrobeCMD_Get+0xe8>)
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	f7ff fd02 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	f7ff fd6f 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe44 	bl	8003364 <VibeCheckStrobe_GetFrequency>
 80036dc:	eef0 7a40 	vmov.f32	s15, s0
 80036e0:	eeb0 0a67 	vmov.f32	s0, s15
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f7ff fd47 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	f7ff fd70 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e03e      	b.n	8003772 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4922      	ldr	r1, [pc, #136]	@ (8003784 <VibeCheckStrobeCMD_Get+0xec>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc fe08 	bl	8000310 <strcmp>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003706:	491e      	ldr	r1, [pc, #120]	@ (8003780 <VibeCheckStrobeCMD_Get+0xe8>)
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f7ff fce3 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800370e:	6838      	ldr	r0, [r7, #0]
 8003710:	f7ff fd50 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff feab 	bl	8003470 <VibeCheckStrobe_GetPhase>
 800371a:	eef0 7a40 	vmov.f32	s15, s0
 800371e:	eeb0 0a67 	vmov.f32	s0, s15
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f7ff fd28 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	f7ff fd51 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800372e:	2301      	movs	r3, #1
 8003730:	e01f      	b.n	8003772 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4914      	ldr	r1, [pc, #80]	@ (8003788 <VibeCheckStrobeCMD_Get+0xf0>)
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc fde9 	bl	8000310 <strcmp>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <VibeCheckStrobeCMD_Get+0xe8>)
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	f7ff fcc4 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f7ff fd31 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fee8 	bl	8003528 <VibeCheckStrobe_GetExposure>
 8003758:	eef0 7a40 	vmov.f32	s15, s0
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f7ff fd09 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003766:	6838      	ldr	r0, [r7, #0]
 8003768:	f7ff fd32 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3748      	adds	r7, #72	@ 0x48
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	08019798 	.word	0x08019798
 8003780:	080197a4 	.word	0x080197a4
 8003784:	080197a8 	.word	0x080197a8
 8003788:	080197b0 	.word	0x080197b0

0800378c <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b094      	sub	sp, #80	@ 0x50
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	2240      	movs	r2, #64	@ 0x40
 80037a0:	4619      	mov	r1, r3
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f7ff fbdc 	bl	8002f60 <VibeCheckShell_GetNextString>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04d      	beq.n	800384a <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4928      	ldr	r1, [pc, #160]	@ (8003854 <VibeCheckStrobeCMD_Execute+0xc8>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fdab 	bl	8000310 <strcmp>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80037c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80037c2:	f7ff fd41 	bl	8003248 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80037c6:	4924      	ldr	r1, [pc, #144]	@ (8003858 <VibeCheckStrobeCMD_Execute+0xcc>)
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	f7ff fc83 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f7ff fcfe 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e039      	b.n	800384c <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	491f      	ldr	r1, [pc, #124]	@ (800385c <VibeCheckStrobeCMD_Execute+0xd0>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fd96 	bl	8000310 <strcmp>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 80037ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80037ec:	f7ff fd4b 	bl	8003286 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80037f0:	4919      	ldr	r1, [pc, #100]	@ (8003858 <VibeCheckStrobeCMD_Execute+0xcc>)
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f7ff fc6e 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f7ff fce9 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80037fe:	2301      	movs	r3, #1
 8003800:	e024      	b.n	800384c <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	4916      	ldr	r1, [pc, #88]	@ (8003860 <VibeCheckStrobeCMD_Execute+0xd4>)
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fd81 	bl	8000310 <strcmp>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003818:	f7ff febc 	bl	8003594 <VibeCheckStrobeCMD_Set>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003822:	2301      	movs	r3, #1
 8003824:	e012      	b.n	800384c <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	490e      	ldr	r1, [pc, #56]	@ (8003864 <VibeCheckStrobeCMD_Execute+0xd8>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fd6f 	bl	8000310 <strcmp>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800383c:	f7ff ff2c 	bl	8003698 <VibeCheckStrobeCMD_Get>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3750      	adds	r7, #80	@ 0x50
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	080197bc 	.word	0x080197bc
 8003858:	080197a4 	.word	0x080197a4
 800385c:	080197c4 	.word	0x080197c4
 8003860:	080197cc 	.word	0x080197cc
 8003864:	080197d0 	.word	0x080197d0

08003868 <ComputeSineWave>:




static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	ed2d 8b02 	vpush	{d8}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e032      	b.n	80038e6 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8003880:	edd7 7a01 	vldr	s15, [r7, #4]
 8003884:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003896:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003908 <ComputeSineWave+0xa0>
 800389a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038b0:	eeb0 0b47 	vmov.f64	d0, d7
 80038b4:	f015 f87c 	bl	80189b0 <sin>
 80038b8:	eeb0 7b40 	vmov.f64	d7, d0
 80038bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80038c0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038c8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8003900 <ComputeSineWave+0x98>
 80038cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	60fa      	str	r2, [r7, #12]
 80038d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038da:	ee17 2a90 	vmov	r2, s15
 80038de:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3301      	adds	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3c8      	bcc.n	8003880 <ComputeSineWave+0x18>
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	ecbd 8b02 	vpop	{d8}
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f3af 8000 	nop.w
 8003900:	00000000 	.word	0x00000000
 8003904:	409ffe00 	.word	0x409ffe00
 8003908:	40490fd0 	.word	0x40490fd0

0800390c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e02c      	b.n	800397a <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d212      	bcs.n	8003950 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 800392a:	edd7 7a01 	vldr	s15, [r7, #4]
 800392e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003932:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003936:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003990 <ComputeSquareWave+0x84>
 800393a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1d1a      	adds	r2, r3, #4
 8003942:	60fa      	str	r2, [r7, #12]
 8003944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003948:	ee17 2a90 	vmov	r2, s15
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e011      	b.n	8003974 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8003950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003954:	edd7 7a01 	vldr	s15, [r7, #4]
 8003958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003990 <ComputeSquareWave+0x84>
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	60fa      	str	r2, [r7, #12]
 800396a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800396e:	ee17 2a90 	vmov	r2, s15
 8003972:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3301      	adds	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d3ce      	bcc.n	8003920 <ComputeSquareWave+0x14>
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	44fff000 	.word	0x44fff000

08003994 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e052      	b.n	8003a4e <ComputeSawWave+0xba>
		if (i < len / 2)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d222      	bcs.n	80039f8 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039de:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003a64 <ComputeSawWave+0xd0>
 80039e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f0:	ee17 2a90 	vmov	r2, s15
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e027      	b.n	8003a48 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80039f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a1a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a30:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003a64 <ComputeSawWave+0xd0>
 8003a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	60fa      	str	r2, [r7, #12]
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 2a90 	vmov	r2, s15
 8003a46:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d3a8      	bcc.n	80039a8 <ComputeSawWave+0x14>
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	44fff000 	.word	0x44fff000

08003a68 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e082      	b.n	8003b82 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d221      	bcs.n	8003aca <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003b9c <ComputeTriangleWave+0x134>
 8003ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	60fa      	str	r2, [r7, #12]
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 2a90 	vmov	r2, s15
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e058      	b.n	8003b7c <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d227      	bcs.n	8003b2a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8003ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ade:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003afa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b08:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b10:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003b9c <ComputeTriangleWave+0x134>
 8003b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	60fa      	str	r2, [r7, #12]
 8003b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b22:	ee17 2a90 	vmov	r2, s15
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e028      	b.n	8003b7c <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8003b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b2e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b4e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b64:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003b9c <ComputeTriangleWave+0x134>
 8003b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	60fa      	str	r2, [r7, #12]
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 2a90 	vmov	r2, s15
 8003b7a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	f4ff af78 	bcc.w	8003a7c <ComputeTriangleWave+0x14>
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	44fff000 	.word	0x44fff000

08003ba0 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e008      	b.n	8003bc2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003bba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3f2      	bcc.n	8003bb0 <ComputeNullWave+0x10>
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d044      	beq.n	8003c78 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bf4:	7e1b      	ldrb	r3, [r3, #24]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d844      	bhi.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c2b 	.word	0x08003c2b
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c5f 	.word	0x08003c5f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f7ff fe20 	bl	8003868 <ComputeSineWave>
			break;
 8003c28:	e02c      	b.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c30:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c34:	eeb0 0a67 	vmov.f32	s0, s15
 8003c38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c3c:	6838      	ldr	r0, [r7, #0]
 8003c3e:	f7ff fe65 	bl	800390c <ComputeSquareWave>
			break;
 8003c42:	e01f      	b.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	f7ff fe9c 	bl	8003994 <ComputeSawWave>
			break;
 8003c5c:	e012      	b.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c64:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c68:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	f7ff fef9 	bl	8003a68 <ComputeTriangleWave>
			break;
 8003c76:	e005      	b.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8003c78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	f7ff ff8f 	bl	8003ba0 <ComputeNullWave>
	}
}
 8003c82:	e7ff      	b.n	8003c84 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b42      	ldr	r3, [pc, #264]	@ (8003db8 <VibeCheckWaveGen_Init+0x12c>)
 8003cae:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <VibeCheckWaveGen_Init+0x130>)
 8003cba:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d20:	461a      	mov	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	6153      	str	r3, [r2, #20]

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2217      	movs	r2, #23
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d36:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f8fa 	bl	8003f38 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3308      	adds	r3, #8
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff44 	bl	8003bd8 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f241 0308 	movw	r3, #4104	@ 0x1008
 8003d56:	4413      	add	r3, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff ff3c 	bl	8003bd8 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6858      	ldr	r0, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f103 0208 	add.w	r2, r3, #8
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d72:	2100      	movs	r1, #0
 8003d74:	f002 fa2c 	bl	80061d0 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6858      	ldr	r0, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f103 0208 	add.w	r2, r3, #8
 8003d82:	2300      	movs	r3, #0
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	f002 fa20 	bl	80061d0 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f00a f85d 	bl	800de54 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4808      	ldr	r0, [pc, #32]	@ (8003dc0 <VibeCheckWaveGen_Init+0x134>)
 8003da0:	f004 ff40 	bl	8008c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8003da4:	2200      	movs	r2, #0
 8003da6:	2102      	movs	r1, #2
 8003da8:	4805      	ldr	r0, [pc, #20]	@ (8003dc0 <VibeCheckWaveGen_Init+0x134>)
 8003daa:	f004 ff3b 	bl	8008c24 <HAL_GPIO_WritePin>
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	43dc0000 	.word	0x43dc0000
 8003dbc:	3a83126f 	.word	0x3a83126f
 8003dc0:	58020000 	.word	0x58020000

08003dc4 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 8003dcc:	f000 fcb2 	bl	8004734 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2bfa      	cmp	r3, #250	@ 0xfa
 8003de0:	d939      	bls.n	8003e56 <VibeCheckWaveGen_Update+0x92>
 8003de2:	2104      	movs	r1, #4
 8003de4:	4831      	ldr	r0, [pc, #196]	@ (8003eac <VibeCheckWaveGen_Update+0xe8>)
 8003de6:	f004 ff05 	bl	8008bf4 <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d032      	beq.n	8003e56 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	4827      	ldr	r0, [pc, #156]	@ (8003eac <VibeCheckWaveGen_Update+0xe8>)
 8003e0e:	f004 ff09 	bl	8008c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003e12:	2200      	movs	r2, #0
 8003e14:	2102      	movs	r1, #2
 8003e16:	4825      	ldr	r0, [pc, #148]	@ (8003eac <VibeCheckWaveGen_Update+0xe8>)
 8003e18:	f004 ff04 	bl	8008c24 <HAL_GPIO_WritePin>
 8003e1c:	e00f      	b.n	8003e3e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e24:	461a      	mov	r2, r3
 8003e26:	2301      	movs	r3, #1
 8003e28:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	481f      	ldr	r0, [pc, #124]	@ (8003eac <VibeCheckWaveGen_Update+0xe8>)
 8003e30:	f004 fef8 	bl	8008c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003e34:	2201      	movs	r2, #1
 8003e36:	2102      	movs	r1, #2
 8003e38:	481c      	ldr	r0, [pc, #112]	@ (8003eac <VibeCheckWaveGen_Update+0xe8>)
 8003e3a:	f004 fef3 	bl	8008c24 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e44:	461a      	mov	r2, r3
 8003e46:	2301      	movs	r3, #1
 8003e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e50:	461a      	mov	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3308      	adds	r3, #8
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff feb5 	bl	8003bd8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <VibeCheckWaveGen_Update+0xde>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f241 0308 	movw	r3, #4104	@ 0x1008
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fea1 	bl	8003bd8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	6153      	str	r3, [r2, #20]
	}


}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	58020000 	.word	0x58020000

08003eb0 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	60d3      	str	r3, [r2, #12]
	}

}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d011      	beq.n	8003f2c <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2300      	movs	r3, #0
 8003f12:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f26:	461a      	mov	r2, r3
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60d3      	str	r3, [r2, #12]
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8003f44:	edd7 7a00 	vldr	s15, [r7]
 8003f48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	d502      	bpl.n	8003f58 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8003f58:	edd7 7a00 	vldr	s15, [r7]
 8003f5c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003fd8 <VibeCheckWaveGen_SetFrequency+0xa0>
 8003f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	dd01      	ble.n	8003f6e <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <VibeCheckWaveGen_SetFrequency+0xa4>)
 8003f6c:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8003f6e:	edd7 7a00 	vldr	s15, [r7]
 8003f72:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003fe0 <VibeCheckWaveGen_SetFrequency+0xa8>
 8003f76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f7a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003fe4 <VibeCheckWaveGen_SetFrequency+0xac>
 8003f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8e:	ee17 3a90 	vmov	r3, s15
 8003f92:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003fe4 <VibeCheckWaveGen_SetFrequency+0xac>
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003fe0 <VibeCheckWaveGen_SetFrequency+0xa8>
 8003fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003fbc:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	45989000 	.word	0x45989000
 8003fdc:	45989000 	.word	0x45989000
 8003fe0:	44800000 	.word	0x44800000
 8003fe4:	4b189680 	.word	0x4b189680

08003fe8 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	ee07 3a90 	vmov	s15, r3
}
 8003ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8004016:	edd7 7a00 	vldr	s15, [r7]
 800401a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	d502      	bpl.n	800402a <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800402a:	edd7 7a00 	vldr	s15, [r7]
 800402e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	dd02      	ble.n	8004042 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 800403c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004040:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004048:	461a      	mov	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004054:	461a      	mov	r2, r3
 8004056:	2301      	movs	r3, #1
 8004058:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004060:	461a      	mov	r2, r3
 8004062:	2301      	movs	r3, #1
 8004064:	60d3      	str	r3, [r2, #12]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	ee07 3a90 	vmov	s15, r3
}
 8004086:	eeb0 0a67 	vmov.f32	s0, s15
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040a6:	461a      	mov	r2, r3
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040b2:	461a      	mov	r2, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040be:	461a      	mov	r2, r3
 80040c0:	2301      	movs	r3, #1
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040de:	7e1b      	ldrb	r3, [r3, #24]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004108:	461a      	mov	r2, r3
 800410a:	2300      	movs	r3, #0
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	601a      	str	r2, [r3, #0]
		return 1;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004152:	461a      	mov	r2, r3
 8004154:	2301      	movs	r3, #1
 8004156:	6113      	str	r3, [r2, #16]
	}
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800418a:	461a      	mov	r2, r3
 800418c:	2301      	movs	r3, #1
 800418e:	6153      	str	r3, [r2, #20]
	}
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b094      	sub	sp, #80	@ 0x50
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	4619      	mov	r1, r3
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f7fe fed6 	bl	8002f60 <VibeCheckShell_GetNextString>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80b0 	beq.w	800431c <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4959      	ldr	r1, [pc, #356]	@ (8004328 <VibeCheckWaveGenCMD_Set+0x18c>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f8a4 	bl	8000310 <strcmp>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d119      	bne.n	8004202 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	4619      	mov	r1, r3
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f7fe ff33 	bl	8003040 <VibeCheckShell_GetNextFloat>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 809d 	beq.w	800431c <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 80041e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041e6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fea4 	bl	8003f38 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80041f0:	494e      	ldr	r1, [pc, #312]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 80041f2:	6838      	ldr	r0, [r7, #0]
 80041f4:	f7fe ff6e 	bl	80030d4 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80041f8:	6838      	ldr	r0, [r7, #0]
 80041fa:	f7fe ffe9 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	e08d      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	494a      	ldr	r1, [pc, #296]	@ (8004330 <VibeCheckWaveGenCMD_Set+0x194>)
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc f881 	bl	8000310 <strcmp>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d118      	bne.n	8004246 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4619      	mov	r1, r3
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f7fe ff10 	bl	8003040 <VibeCheckShell_GetNextFloat>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d07a      	beq.n	800431c <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8004226:	edd7 7a02 	vldr	s15, [r7, #8]
 800422a:	eeb0 0a67 	vmov.f32	s0, s15
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff feeb 	bl	800400a <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004234:	493d      	ldr	r1, [pc, #244]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 8004236:	6838      	ldr	r0, [r7, #0]
 8004238:	f7fe ff4c 	bl	80030d4 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800423c:	6838      	ldr	r0, [r7, #0]
 800423e:	f7fe ffc7 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8004246:	f107 0310 	add.w	r3, r7, #16
 800424a:	493a      	ldr	r1, [pc, #232]	@ (8004334 <VibeCheckWaveGenCMD_Set+0x198>)
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f85f 	bl	8000310 <strcmp>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d161      	bne.n	800431c <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004258:	f107 0310 	add.w	r3, r7, #16
 800425c:	2240      	movs	r2, #64	@ 0x40
 800425e:	4619      	mov	r1, r3
 8004260:	6838      	ldr	r0, [r7, #0]
 8004262:	f7fe fe7d 	bl	8002f60 <VibeCheckShell_GetNextString>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d057      	beq.n	800431c <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	4931      	ldr	r1, [pc, #196]	@ (8004338 <VibeCheckWaveGenCMD_Set+0x19c>)
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f84c 	bl	8000310 <strcmp>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 800427e:	2100      	movs	r1, #0
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff07 	bl	8004094 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004286:	4929      	ldr	r1, [pc, #164]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 8004288:	6838      	ldr	r0, [r7, #0]
 800428a:	f7fe ff23 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800428e:	6838      	ldr	r0, [r7, #0]
 8004290:	f7fe ff9e 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004294:	2301      	movs	r3, #1
 8004296:	e042      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	4927      	ldr	r1, [pc, #156]	@ (800433c <VibeCheckWaveGenCMD_Set+0x1a0>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc f836 	bl	8000310 <strcmp>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 80042aa:	2101      	movs	r1, #1
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fef1 	bl	8004094 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80042b2:	491e      	ldr	r1, [pc, #120]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f7fe ff0d 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80042ba:	6838      	ldr	r0, [r7, #0]
 80042bc:	f7fe ff88 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e02c      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 80042c4:	f107 0310 	add.w	r3, r7, #16
 80042c8:	491d      	ldr	r1, [pc, #116]	@ (8004340 <VibeCheckWaveGenCMD_Set+0x1a4>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc f820 	bl	8000310 <strcmp>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 80042d6:	2102      	movs	r1, #2
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fedb 	bl	8004094 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80042de:	4913      	ldr	r1, [pc, #76]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 80042e0:	6838      	ldr	r0, [r7, #0]
 80042e2:	f7fe fef7 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80042e6:	6838      	ldr	r0, [r7, #0]
 80042e8:	f7fe ff72 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e016      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	4913      	ldr	r1, [pc, #76]	@ (8004344 <VibeCheckWaveGenCMD_Set+0x1a8>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc f80a 	bl	8000310 <strcmp>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8004302:	2103      	movs	r1, #3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fec5 	bl	8004094 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800430a:	4908      	ldr	r1, [pc, #32]	@ (800432c <VibeCheckWaveGenCMD_Set+0x190>)
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f7fe fee1 	bl	80030d4 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004312:	6838      	ldr	r0, [r7, #0]
 8004314:	f7fe ff5c 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3750      	adds	r7, #80	@ 0x50
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	080197d4 	.word	0x080197d4
 800432c:	080197e0 	.word	0x080197e0
 8004330:	080197e4 	.word	0x080197e4
 8004334:	080197f0 	.word	0x080197f0
 8004338:	080197fc 	.word	0x080197fc
 800433c:	08019804 	.word	0x08019804
 8004340:	0801980c 	.word	0x0801980c
 8004344:	08019810 	.word	0x08019810

08004348 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b092      	sub	sp, #72	@ 0x48
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	4619      	mov	r1, r3
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f7fe fe00 	bl	8002f60 <VibeCheckShell_GetNextString>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d077      	beq.n	8004456 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	493d      	ldr	r1, [pc, #244]	@ (8004460 <VibeCheckWaveGenCMD_Get+0x118>)
 800436c:	4618      	mov	r0, r3
 800436e:	f7fb ffcf 	bl	8000310 <strcmp>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d115      	bne.n	80043a4 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004378:	493a      	ldr	r1, [pc, #232]	@ (8004464 <VibeCheckWaveGenCMD_Get+0x11c>)
 800437a:	6838      	ldr	r0, [r7, #0]
 800437c:	f7fe feaa 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004380:	6838      	ldr	r0, [r7, #0]
 8004382:	f7fe ff17 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe2e 	bl	8003fe8 <VibeCheckWaveGen_GetFrequency>
 800438c:	eef0 7a40 	vmov.f32	s15, s0
 8004390:	eeb0 0a67 	vmov.f32	s0, s15
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f7fe feef 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800439a:	6838      	ldr	r0, [r7, #0]
 800439c:	f7fe ff18 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e059      	b.n	8004458 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 80043a4:	f107 0308 	add.w	r3, r7, #8
 80043a8:	492f      	ldr	r1, [pc, #188]	@ (8004468 <VibeCheckWaveGenCMD_Get+0x120>)
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fb ffb0 	bl	8000310 <strcmp>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d115      	bne.n	80043e2 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80043b6:	492b      	ldr	r1, [pc, #172]	@ (8004464 <VibeCheckWaveGenCMD_Get+0x11c>)
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f7fe fe8b 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80043be:	6838      	ldr	r0, [r7, #0]
 80043c0:	f7fe fef8 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fe54 	bl	8004072 <VibeCheckWaveGen_GetAmplitude>
 80043ca:	eef0 7a40 	vmov.f32	s15, s0
 80043ce:	eeb0 0a67 	vmov.f32	s0, s15
 80043d2:	6838      	ldr	r0, [r7, #0]
 80043d4:	f7fe fed0 	bl	8003178 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80043d8:	6838      	ldr	r0, [r7, #0]
 80043da:	f7fe fef9 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03a      	b.n	8004458 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4921      	ldr	r1, [pc, #132]	@ (800446c <VibeCheckWaveGenCMD_Get+0x124>)
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fb ff91 	bl	8000310 <strcmp>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d130      	bne.n	8004456 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80043f4:	491b      	ldr	r1, [pc, #108]	@ (8004464 <VibeCheckWaveGenCMD_Get+0x11c>)
 80043f6:	6838      	ldr	r0, [r7, #0]
 80043f8:	f7fe fe6c 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80043fc:	6838      	ldr	r0, [r7, #0]
 80043fe:	f7fe fed9 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff fe64 	bl	80040d0 <VibeCheckWaveGen_GetWaveform>
 8004408:	4603      	mov	r3, r0
 800440a:	2b03      	cmp	r3, #3
 800440c:	d81e      	bhi.n	800444c <VibeCheckWaveGenCMD_Get+0x104>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <VibeCheckWaveGenCMD_Get+0xcc>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004425 	.word	0x08004425
 8004418:	0800442f 	.word	0x0800442f
 800441c:	08004439 	.word	0x08004439
 8004420:	08004443 	.word	0x08004443
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8004424:	4912      	ldr	r1, [pc, #72]	@ (8004470 <VibeCheckWaveGenCMD_Get+0x128>)
 8004426:	6838      	ldr	r0, [r7, #0]
 8004428:	f7fe fe54 	bl	80030d4 <VibeCheckShell_PutOutputString>
				break;
 800442c:	e00e      	b.n	800444c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 800442e:	4911      	ldr	r1, [pc, #68]	@ (8004474 <VibeCheckWaveGenCMD_Get+0x12c>)
 8004430:	6838      	ldr	r0, [r7, #0]
 8004432:	f7fe fe4f 	bl	80030d4 <VibeCheckShell_PutOutputString>
				break;
 8004436:	e009      	b.n	800444c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8004438:	490f      	ldr	r1, [pc, #60]	@ (8004478 <VibeCheckWaveGenCMD_Get+0x130>)
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	f7fe fe4a 	bl	80030d4 <VibeCheckShell_PutOutputString>
				break;
 8004440:	e004      	b.n	800444c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8004442:	490e      	ldr	r1, [pc, #56]	@ (800447c <VibeCheckWaveGenCMD_Get+0x134>)
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f7fe fe45 	bl	80030d4 <VibeCheckShell_PutOutputString>
				break;
 800444a:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 800444c:	6838      	ldr	r0, [r7, #0]
 800444e:	f7fe febf 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3748      	adds	r7, #72	@ 0x48
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	080197d4 	.word	0x080197d4
 8004464:	080197e0 	.word	0x080197e0
 8004468:	080197e4 	.word	0x080197e4
 800446c:	080197f0 	.word	0x080197f0
 8004470:	080197fc 	.word	0x080197fc
 8004474:	08019804 	.word	0x08019804
 8004478:	0801980c 	.word	0x0801980c
 800447c:	08019810 	.word	0x08019810

08004480 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b094      	sub	sp, #80	@ 0x50
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	4619      	mov	r1, r3
 8004496:	6838      	ldr	r0, [r7, #0]
 8004498:	f7fe fd62 	bl	8002f60 <VibeCheckShell_GetNextString>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d04d      	beq.n	800453e <VibeCheckWaveGenCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	4928      	ldr	r1, [pc, #160]	@ (8004548 <VibeCheckWaveGenCMD_Execute+0xc8>)
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fb ff31 	bl	8000310 <strcmp>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <VibeCheckWaveGenCMD_Execute+0x4c>
		{
			VibeCheckWaveGen_Start(wavegen);
 80044b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044b6:	f7ff fcfb 	bl	8003eb0 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80044ba:	4924      	ldr	r1, [pc, #144]	@ (800454c <VibeCheckWaveGenCMD_Execute+0xcc>)
 80044bc:	6838      	ldr	r0, [r7, #0]
 80044be:	f7fe fe09 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f7fe fe84 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e039      	b.n	8004540 <VibeCheckWaveGenCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	491f      	ldr	r1, [pc, #124]	@ (8004550 <VibeCheckWaveGenCMD_Execute+0xd0>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fb ff1c 	bl	8000310 <strcmp>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <VibeCheckWaveGenCMD_Execute+0x76>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80044de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044e0:	f7ff fd08 	bl	8003ef4 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80044e4:	4919      	ldr	r1, [pc, #100]	@ (800454c <VibeCheckWaveGenCMD_Execute+0xcc>)
 80044e6:	6838      	ldr	r0, [r7, #0]
 80044e8:	f7fe fdf4 	bl	80030d4 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f7fe fe6f 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e024      	b.n	8004540 <VibeCheckWaveGenCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	4916      	ldr	r1, [pc, #88]	@ (8004554 <VibeCheckWaveGenCMD_Execute+0xd4>)
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fb ff07 	bl	8000310 <strcmp>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <VibeCheckWaveGenCMD_Execute+0x9a>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800450c:	f7ff fe46 	bl	800419c <VibeCheckWaveGenCMD_Set>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <VibeCheckWaveGenCMD_Execute+0xbe>
			{
				return 1;
 8004516:	2301      	movs	r3, #1
 8004518:	e012      	b.n	8004540 <VibeCheckWaveGenCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	490e      	ldr	r1, [pc, #56]	@ (8004558 <VibeCheckWaveGenCMD_Execute+0xd8>)
 8004520:	4618      	mov	r0, r3
 8004522:	f7fb fef5 	bl	8000310 <strcmp>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <VibeCheckWaveGenCMD_Execute+0xbe>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004530:	f7ff ff0a 	bl	8004348 <VibeCheckWaveGenCMD_Get>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <VibeCheckWaveGenCMD_Execute+0xbe>
			{
				return 1;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <VibeCheckWaveGenCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	@ 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	0801981c 	.word	0x0801981c
 800454c:	080197e0 	.word	0x080197e0
 8004550:	08019824 	.word	0x08019824
 8004554:	0801982c 	.word	0x0801982c
 8004558:	08019830 	.word	0x08019830

0800455c <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fdbb 	bl	80040ec <VibeCheckWaveGen_WasMuteButtonPressed>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01e      	beq.n	80045ba <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 800457c:	4911      	ldr	r1, [pc, #68]	@ (80045c4 <VibeCheckWaveGenSender_Execute+0x68>)
 800457e:	6838      	ldr	r0, [r7, #0]
 8004580:	f7fe fda8 	bl	80030d4 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f7fe fe15 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 800458a:	490f      	ldr	r1, [pc, #60]	@ (80045c8 <VibeCheckWaveGenSender_Execute+0x6c>)
 800458c:	6838      	ldr	r0, [r7, #0]
 800458e:	f7fe fda1 	bl	80030d4 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f7fe fe0e 	bl	80031b4 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 800459e:	490b      	ldr	r1, [pc, #44]	@ (80045cc <VibeCheckWaveGenSender_Execute+0x70>)
 80045a0:	6838      	ldr	r0, [r7, #0]
 80045a2:	f7fe fd97 	bl	80030d4 <VibeCheckShell_PutOutputString>
 80045a6:	e003      	b.n	80045b0 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 80045a8:	4909      	ldr	r1, [pc, #36]	@ (80045d0 <VibeCheckWaveGenSender_Execute+0x74>)
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f7fe fd92 	bl	80030d4 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 80045b0:	6838      	ldr	r0, [r7, #0]
 80045b2:	f7fe fe0d 	bl	80031d0 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08019834 	.word	0x08019834
 80045c8:	08019838 	.word	0x08019838
 80045cc:	08019840 	.word	0x08019840
 80045d0:	08019848 	.word	0x08019848

080045d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80045d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800460c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80045d8:	f7fd fef4 	bl	80023c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045dc:	480c      	ldr	r0, [pc, #48]	@ (8004610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045de:	490d      	ldr	r1, [pc, #52]	@ (8004614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045e4:	e002      	b.n	80045ec <LoopCopyDataInit>

080045e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ea:	3304      	adds	r3, #4

080045ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045f0:	d3f9      	bcc.n	80045e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045f2:	4a0a      	ldr	r2, [pc, #40]	@ (800461c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045f8:	e001      	b.n	80045fe <LoopFillZerobss>

080045fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045fc:	3204      	adds	r2, #4

080045fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004600:	d3fb      	bcc.n	80045fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004602:	f011 fd61 	bl	80160c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004606:	f7fc fa81 	bl	8000b0c <main>
  bx  lr
 800460a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800460c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004610:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004614:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8004618:	0801a010 	.word	0x0801a010
  ldr r2, =_sbss
 800461c:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8004620:	24006c64 	.word	0x24006c64

08004624 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004624:	e7fe      	b.n	8004624 <ADC3_IRQHandler>
	...

08004628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462e:	2003      	movs	r0, #3
 8004630:	f001 fcf4 	bl	800601c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004634:	f006 fcbc 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <HAL_Init+0x68>)
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	4913      	ldr	r1, [pc, #76]	@ (8004694 <HAL_Init+0x6c>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004652:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <HAL_Init+0x68>)
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	4a0e      	ldr	r2, [pc, #56]	@ (8004694 <HAL_Init+0x6c>)
 800465c:	5cd3      	ldrb	r3, [r2, r3]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
 8004668:	4a0b      	ldr	r2, [pc, #44]	@ (8004698 <HAL_Init+0x70>)
 800466a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800466c:	4a0b      	ldr	r2, [pc, #44]	@ (800469c <HAL_Init+0x74>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004672:	200f      	movs	r0, #15
 8004674:	f000 f814 	bl	80046a0 <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e002      	b.n	8004688 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004682:	f7fd f92d 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	58024400 	.word	0x58024400
 8004694:	08019884 	.word	0x08019884
 8004698:	24000004 	.word	0x24000004
 800469c:	24000000 	.word	0x24000000

080046a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046a8:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <HAL_InitTick+0x60>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e021      	b.n	80046f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046b4:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <HAL_InitTick+0x64>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_InitTick+0x60>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	4619      	mov	r1, r3
 80046be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fcd9 	bl	8006082 <HAL_SYSTICK_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e00e      	b.n	80046f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d80a      	bhi.n	80046f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046e0:	2200      	movs	r2, #0
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	f001 fca3 	bl	8006032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046ec:	4a06      	ldr	r2, [pc, #24]	@ (8004708 <HAL_InitTick+0x68>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2400000c 	.word	0x2400000c
 8004704:	24000000 	.word	0x24000000
 8004708:	24000008 	.word	0x24000008

0800470c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_IncTick+0x20>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_IncTick+0x24>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4413      	add	r3, r2
 800471c:	4a04      	ldr	r2, [pc, #16]	@ (8004730 <HAL_IncTick+0x24>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2400000c 	.word	0x2400000c
 8004730:	24004f30 	.word	0x24004f30

08004734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return uwTick;
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_GetTick+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	24004f30 	.word	0x24004f30

0800474c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7ff ffee 	bl	8004734 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d005      	beq.n	8004772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_Delay+0x44>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004772:	bf00      	nop
 8004774:	f7ff ffde 	bl	8004734 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d8f7      	bhi.n	8004774 <HAL_Delay+0x28>
  {
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2400000c 	.word	0x2400000c

08004794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3360      	adds	r3, #96	@ 0x60
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a10      	ldr	r2, [pc, #64]	@ (800485c <LL_ADC_SetOffset+0x60>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10b      	bne.n	8004838 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004836:	e00b      	b.n	8004850 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	431a      	orrs	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	58026000 	.word	0x58026000

08004860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3360      	adds	r3, #96	@ 0x60
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	611a      	str	r2, [r3, #16]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3360      	adds	r3, #96	@ 0x60
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	601a      	str	r2, [r3, #0]
  }
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	58026000 	.word	0x58026000

08004904 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <LL_ADC_SetOffsetSaturation+0x40>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10e      	bne.n	8004936 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3360      	adds	r3, #96	@ 0x60
 800491c:	461a      	mov	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	431a      	orrs	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	58026000 	.word	0x58026000

08004948 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a0c      	ldr	r2, [pc, #48]	@ (8004988 <LL_ADC_SetOffsetSign+0x40>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10e      	bne.n	800497a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3360      	adds	r3, #96	@ 0x60
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	58026000 	.word	0x58026000

0800498c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3360      	adds	r3, #96	@ 0x60
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <LL_ADC_SetOffsetState+0x50>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80049be:	e007      	b.n	80049d0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	58026000 	.word	0x58026000

080049e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3330      	adds	r3, #48	@ 0x30
 80049f0:	461a      	mov	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	4413      	add	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	211f      	movs	r1, #31
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	0e9b      	lsrs	r3, r3, #26
 8004a18:	f003 011f 	and.w	r1, r3, #31
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	431a      	orrs	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3314      	adds	r3, #20
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0e5b      	lsrs	r3, r3, #25
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	4413      	add	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0d1b      	lsrs	r3, r3, #20
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2107      	movs	r1, #7
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0d1b      	lsrs	r3, r3, #20
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d115      	bne.n	8004ad0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0318 	and.w	r3, r3, #24
 8004aba:	4914      	ldr	r1, [pc, #80]	@ (8004b0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004abc:	40d9      	lsrs	r1, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004ace:	e014      	b.n	8004afa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f003 0318 	and.w	r3, r3, #24
 8004ae6:	4909      	ldr	r1, [pc, #36]	@ (8004b0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004ae8:	40d9      	lsrs	r1, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	400b      	ands	r3, r1
 8004aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	58026000 	.word	0x58026000
 8004b0c:	000fffff 	.word	0x000fffff

08004b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6093      	str	r3, [r2, #8]
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	5fffffc0 	.word	0x5fffffc0

08004b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b48:	d101      	bne.n	8004b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	6fffffc0 	.word	0x6fffffc0

08004b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b98:	d101      	bne.n	8004b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <LL_ADC_IsEnabled+0x18>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <LL_ADC_IsEnabled+0x1a>
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d101      	bne.n	8004bea <LL_ADC_REG_IsConversionOngoing+0x18>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d101      	bne.n	8004c10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1ee      	b.n	8005018 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fe63 	bl	8001914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff67 	bl	8004b34 <LL_ADC_IsDeepPowerDownEnabled>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff4d 	bl	8004b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff82 	bl	8004b84 <LL_ADC_IsInternalRegulatorEnabled>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d114      	bne.n	8004cb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff66 	bl	8004b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c90:	4b8e      	ldr	r3, [pc, #568]	@ (8004ecc <HAL_ADC_Init+0x2ac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	099b      	lsrs	r3, r3, #6
 8004c96:	4a8e      	ldr	r2, [pc, #568]	@ (8004ed0 <HAL_ADC_Init+0x2b0>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ca2:	e002      	b.n	8004caa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f9      	bne.n	8004ca4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff65 	bl	8004b84 <LL_ADC_IsInternalRegulatorEnabled>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc4:	f043 0210 	orr.w	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff76 	bl	8004bd2 <LL_ADC_REG_IsConversionOngoing>
 8004ce6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8188 	bne.w	8005006 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 8184 	bne.w	8005006 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff4a 	bl	8004bac <LL_ADC_IsEnabled>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d136      	bne.n	8004d8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed4 <HAL_ADC_Init+0x2b4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_ADC_Init+0x112>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed8 <HAL_ADC_Init+0x2b8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10e      	bne.n	8004d50 <HAL_ADC_Init+0x130>
 8004d32:	4868      	ldr	r0, [pc, #416]	@ (8004ed4 <HAL_ADC_Init+0x2b4>)
 8004d34:	f7ff ff3a 	bl	8004bac <LL_ADC_IsEnabled>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4867      	ldr	r0, [pc, #412]	@ (8004ed8 <HAL_ADC_Init+0x2b8>)
 8004d3c:	f7ff ff36 	bl	8004bac <LL_ADC_IsEnabled>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4323      	orrs	r3, r4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e008      	b.n	8004d62 <HAL_ADC_Init+0x142>
 8004d50:	4862      	ldr	r0, [pc, #392]	@ (8004edc <HAL_ADC_Init+0x2bc>)
 8004d52:	f7ff ff2b 	bl	8004bac <LL_ADC_IsEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed4 <HAL_ADC_Init+0x2b4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_ADC_Init+0x15a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a58      	ldr	r2, [pc, #352]	@ (8004ed8 <HAL_ADC_Init+0x2b8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_Init+0x15e>
 8004d7a:	4a59      	ldr	r2, [pc, #356]	@ (8004ee0 <HAL_ADC_Init+0x2c0>)
 8004d7c:	e000      	b.n	8004d80 <HAL_ADC_Init+0x160>
 8004d7e:	4a59      	ldr	r2, [pc, #356]	@ (8004ee4 <HAL_ADC_Init+0x2c4>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7ff fd04 	bl	8004794 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a52      	ldr	r2, [pc, #328]	@ (8004edc <HAL_ADC_Init+0x2bc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d129      	bne.n	8004dea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7e5b      	ldrb	r3, [r3, #25]
 8004d9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004da0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004da6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d013      	beq.n	8004dd8 <HAL_ADC_Init+0x1b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d00d      	beq.n	8004dd4 <HAL_ADC_Init+0x1b4>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b1c      	cmp	r3, #28
 8004dbe:	d007      	beq.n	8004dd0 <HAL_ADC_Init+0x1b0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b18      	cmp	r3, #24
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_Init+0x1ac>
 8004dc8:	2318      	movs	r3, #24
 8004dca:	e006      	b.n	8004dda <HAL_ADC_Init+0x1ba>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e004      	b.n	8004dda <HAL_ADC_Init+0x1ba>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	e002      	b.n	8004dda <HAL_ADC_Init+0x1ba>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	e000      	b.n	8004dda <HAL_ADC_Init+0x1ba>
 8004dd8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004dda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e00e      	b.n	8004e08 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7e5b      	ldrb	r3, [r3, #25]
 8004dee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004df4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004dfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	3b01      	subs	r3, #1
 8004e18:	045b      	lsls	r3, r3, #17
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	@ (8004edc <HAL_ADC_Init+0x2bc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d115      	bne.n	8004e72 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <HAL_ADC_Init+0x2c8>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	69b9      	ldr	r1, [r7, #24]
 8004e56:	430b      	orrs	r3, r1
 8004e58:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	611a      	str	r2, [r3, #16]
 8004e70:	e009      	b.n	8004e86 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <HAL_ADC_Init+0x2cc>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fea1 	bl	8004bd2 <LL_ADC_REG_IsConversionOngoing>
 8004e90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff feae 	bl	8004bf8 <LL_ADC_INJ_IsConversionOngoing>
 8004e9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 808e 	bne.w	8004fc2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 808a 	bne.w	8004fc2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <HAL_ADC_Init+0x2bc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7e1b      	ldrb	r3, [r3, #24]
 8004ebc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ec4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e018      	b.n	8004efe <HAL_ADC_Init+0x2de>
 8004ecc:	24000000 	.word	0x24000000
 8004ed0:	053e2d63 	.word	0x053e2d63
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40022100 	.word	0x40022100
 8004edc:	58026000 	.word	0x58026000
 8004ee0:	40022300 	.word	0x40022300
 8004ee4:	58026300 	.word	0x58026300
 8004ee8:	fff04007 	.word	0xfff04007
 8004eec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7e1b      	ldrb	r3, [r3, #24]
 8004ef4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	4b46      	ldr	r3, [pc, #280]	@ (8005020 <HAL_ADC_Init+0x400>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d137      	bne.n	8004f8c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3f      	ldr	r2, [pc, #252]	@ (8005024 <HAL_ADC_Init+0x404>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d116      	bne.n	8004f5a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	4b3d      	ldr	r3, [pc, #244]	@ (8005028 <HAL_ADC_Init+0x408>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f3e:	4311      	orrs	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	611a      	str	r2, [r3, #16]
 8004f58:	e020      	b.n	8004f9c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	4b32      	ldr	r3, [pc, #200]	@ (800502c <HAL_ADC_Init+0x40c>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f68:	3a01      	subs	r2, #1
 8004f6a:	0411      	lsls	r1, r2, #16
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f76:	4311      	orrs	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e007      	b.n	8004f9c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_ADC_Init+0x404>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d002      	beq.n	8004fc2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd67 	bl	8005a90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	f023 010f 	bic.w	r1, r3, #15
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fe2:	e007      	b.n	8004ff4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020f 	bic.w	r2, r2, #15
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	f023 0303 	bic.w	r3, r3, #3
 8004ffc:	f043 0201 	orr.w	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	661a      	str	r2, [r3, #96]	@ 0x60
 8005004:	e007      	b.n	8005016 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005016:	7ffb      	ldrb	r3, [r7, #31]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3724      	adds	r7, #36	@ 0x24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	ffffbffc 	.word	0xffffbffc
 8005024:	58026000 	.word	0x58026000
 8005028:	fc00f81f 	.word	0xfc00f81f
 800502c:	fc00f81e 	.word	0xfc00f81e

08005030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b0b9      	sub	sp, #228	@ 0xe4
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800504a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4aab      	ldr	r2, [pc, #684]	@ (8005300 <HAL_ADC_ConfigChannel+0x2d0>)
 8005052:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d102      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x34>
 800505e:	2302      	movs	r3, #2
 8005060:	f000 bcfe 	b.w	8005a60 <HAL_ADC_ConfigChannel+0xa30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fdae 	bl	8004bd2 <LL_ADC_REG_IsConversionOngoing>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 84e2 	bne.w	8005a42 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	db38      	blt.n	80050f8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a9e      	ldr	r2, [pc, #632]	@ (8005304 <HAL_ADC_ConfigChannel+0x2d4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d033      	beq.n	80050f8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005098:	2b00      	cmp	r3, #0
 800509a:	d108      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x7e>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2201      	movs	r2, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	e01d      	b.n	80050ea <HAL_ADC_ConfigChannel+0xba>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80050d2:	2320      	movs	r3, #32
 80050d4:	e004      	b.n	80050e0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80050d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2201      	movs	r2, #1
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	69d1      	ldr	r1, [r2, #28]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	f7ff fc6b 	bl	80049e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fd5f 	bl	8004bd2 <LL_ADC_REG_IsConversionOngoing>
 8005114:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fd6b 	bl	8004bf8 <LL_ADC_INJ_IsConversionOngoing>
 8005122:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 8270 	bne.w	8005610 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005130:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 826b 	bne.w	8005610 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	461a      	mov	r2, r3
 8005148:	f7ff fc76 	bl	8004a38 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6c      	ldr	r2, [pc, #432]	@ (8005304 <HAL_ADC_ConfigChannel+0x2d4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10d      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	08db      	lsrs	r3, r3, #3
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005170:	e032      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005172:	4b65      	ldr	r3, [pc, #404]	@ (8005308 <HAL_ADC_ConfigChannel+0x2d8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800517a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800517e:	d10b      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x168>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	e01d      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x1a4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_ADC_ConfigChannel+0x18e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	e00a      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x1a4>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d048      	beq.n	8005272 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6919      	ldr	r1, [r3, #16]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051f0:	f7ff fb04 	bl	80047fc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a42      	ldr	r2, [pc, #264]	@ (8005304 <HAL_ADC_ConfigChannel+0x2d4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d119      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6919      	ldr	r1, [r3, #16]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	461a      	mov	r2, r3
 800520c:	f7ff fb9c 	bl	8004948 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6919      	ldr	r1, [r3, #16]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x1f8>
 8005222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005226:	e000      	b.n	800522a <HAL_ADC_ConfigChannel+0x1fa>
 8005228:	2300      	movs	r3, #0
 800522a:	461a      	mov	r2, r3
 800522c:	f7ff fb6a 	bl	8004904 <LL_ADC_SetOffsetSaturation>
 8005230:	e1ee      	b.n	8005610 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6919      	ldr	r1, [r3, #16]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005240:	2b01      	cmp	r3, #1
 8005242:	d102      	bne.n	800524a <HAL_ADC_ConfigChannel+0x21a>
 8005244:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005248:	e000      	b.n	800524c <HAL_ADC_ConfigChannel+0x21c>
 800524a:	2300      	movs	r3, #0
 800524c:	461a      	mov	r2, r3
 800524e:	f7ff fb37 	bl	80048c0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6919      	ldr	r1, [r3, #16]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	7e1b      	ldrb	r3, [r3, #24]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d102      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x238>
 8005262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005266:	e000      	b.n	800526a <HAL_ADC_ConfigChannel+0x23a>
 8005268:	2300      	movs	r3, #0
 800526a:	461a      	mov	r2, r3
 800526c:	f7ff fb0e 	bl	800488c <LL_ADC_SetDataRightShift>
 8005270:	e1ce      	b.n	8005610 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a23      	ldr	r2, [pc, #140]	@ (8005304 <HAL_ADC_ConfigChannel+0x2d4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	f040 8181 	bne.w	8005580 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff faeb 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800528a:	4603      	mov	r3, r0
 800528c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x27a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fae0 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80052a0:	4603      	mov	r3, r0
 80052a2:	0e9b      	lsrs	r3, r3, #26
 80052a4:	f003 021f 	and.w	r2, r3, #31
 80052a8:	e01e      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x2b8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fad5 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052c0:	fa93 f3a3 	rbit	r3, r3
 80052c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80052c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80052d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80052d8:	2320      	movs	r3, #32
 80052da:	e004      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80052dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_ADC_ConfigChannel+0x2dc>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	e01e      	b.n	800533e <HAL_ADC_ConfigChannel+0x30e>
 8005300:	47ff0000 	.word	0x47ff0000
 8005304:	58026000 	.word	0x58026000
 8005308:	5c001000 	.word	0x5c001000
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005330:	2320      	movs	r3, #32
 8005332:	e004      	b.n	800533e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	429a      	cmp	r2, r3
 8005340:	d106      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fb1e 	bl	800498c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fa82 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800535c:	4603      	mov	r3, r0
 800535e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <HAL_ADC_ConfigChannel+0x34c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa77 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	0e9b      	lsrs	r3, r3, #26
 8005376:	f003 021f 	and.w	r2, r3, #31
 800537a:	e01e      	b.n	80053ba <HAL_ADC_ConfigChannel+0x38a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2101      	movs	r1, #1
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fa6c 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005392:	fa93 f3a3 	rbit	r3, r3
 8005396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800539a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800539e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80053a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80053aa:	2320      	movs	r3, #32
 80053ac:	e004      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80053ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053b2:	fab3 f383 	clz	r3, r3
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_ADC_ConfigChannel+0x3a2>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	0e9b      	lsrs	r3, r3, #26
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	e018      	b.n	8005404 <HAL_ADC_ConfigChannel+0x3d4>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053de:	fa93 f3a3 	rbit	r3, r3
 80053e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80053e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80053ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80053f6:	2320      	movs	r3, #32
 80053f8:	e004      	b.n	8005404 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80053fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	429a      	cmp	r2, r3
 8005406:	d106      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2200      	movs	r2, #0
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fabb 	bl	800498c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fa1f 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005422:	4603      	mov	r3, r0
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <HAL_ADC_ConfigChannel+0x412>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fa14 	bl	8004860 <LL_ADC_GetOffsetChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	0e9b      	lsrs	r3, r3, #26
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	e01e      	b.n	8005480 <HAL_ADC_ConfigChannel+0x450>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2102      	movs	r1, #2
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fa09 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800544e:	4603      	mov	r3, r0
 8005450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005470:	2320      	movs	r3, #32
 8005472:	e004      	b.n	800547e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x468>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0e9b      	lsrs	r3, r3, #26
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	e014      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x492>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80054a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80054ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e004      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80054b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d106      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2102      	movs	r1, #2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fa5c 	bl	800498c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2103      	movs	r1, #3
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f9c0 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x4d0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2103      	movs	r1, #3
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff f9b5 	bl	8004860 <LL_ADC_GetOffsetChannel>
 80054f6:	4603      	mov	r3, r0
 80054f8:	0e9b      	lsrs	r3, r3, #26
 80054fa:	f003 021f 	and.w	r2, r3, #31
 80054fe:	e017      	b.n	8005530 <HAL_ADC_ConfigChannel+0x500>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2103      	movs	r1, #3
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff f9aa 	bl	8004860 <LL_ADC_GetOffsetChannel>
 800550c:	4603      	mov	r3, r0
 800550e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005512:	fa93 f3a3 	rbit	r3, r3
 8005516:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800551a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800551c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005522:	2320      	movs	r3, #32
 8005524:	e003      	b.n	800552e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8005526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005528:	fab3 f383 	clz	r3, r3
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x518>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0e9b      	lsrs	r3, r3, #26
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	e011      	b.n	800556c <HAL_ADC_ConfigChannel+0x53c>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005558:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800555a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005560:	2320      	movs	r3, #32
 8005562:	e003      	b.n	800556c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	429a      	cmp	r2, r3
 800556e:	d14f      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	2103      	movs	r1, #3
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fa07 	bl	800498c <LL_ADC_SetOffsetState>
 800557e:	e047      	b.n	8005610 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	069b      	lsls	r3, r3, #26
 8005590:	429a      	cmp	r2, r3
 8005592:	d107      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055a2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	069b      	lsls	r3, r3, #26
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055c6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	069b      	lsls	r3, r3, #26
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055ea:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	069b      	lsls	r3, r3, #26
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d107      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800560e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fac9 	bl	8004bac <LL_ADC_IsEnabled>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 8219 	bne.w	8005a54 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	461a      	mov	r2, r3
 8005630:	f7ff fa2e 	bl	8004a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4aa1      	ldr	r2, [pc, #644]	@ (80058c0 <HAL_ADC_ConfigChannel+0x890>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f040 812e 	bne.w	800589c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x638>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2b09      	cmp	r3, #9
 800565e:	bf94      	ite	ls
 8005660:	2301      	movls	r3, #1
 8005662:	2300      	movhi	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e019      	b.n	800569c <HAL_ADC_ConfigChannel+0x66c>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005670:	fa93 f3a3 	rbit	r3, r3
 8005674:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005678:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800567a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005680:	2320      	movs	r3, #32
 8005682:	e003      	b.n	800568c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2b09      	cmp	r3, #9
 8005694:	bf94      	ite	ls
 8005696:	2301      	movls	r3, #1
 8005698:	2300      	movhi	r3, #0
 800569a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800569c:	2b00      	cmp	r3, #0
 800569e:	d079      	beq.n	8005794 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x68c>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	0e9b      	lsrs	r3, r3, #26
 80056b2:	3301      	adds	r3, #1
 80056b4:	069b      	lsls	r3, r3, #26
 80056b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056ba:	e015      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x6b8>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80056ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80056d4:	2320      	movs	r3, #32
 80056d6:	e003      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80056d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056da:	fab3 f383 	clz	r3, r3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	3301      	adds	r3, #1
 80056e2:	069b      	lsls	r3, r3, #26
 80056e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x6d8>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0e9b      	lsrs	r3, r3, #26
 80056fa:	3301      	adds	r3, #1
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	e017      	b.n	8005738 <HAL_ADC_ConfigChannel+0x708>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800571a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005720:	2320      	movs	r3, #32
 8005722:	e003      	b.n	800572c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	3301      	adds	r3, #1
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2101      	movs	r1, #1
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	ea42 0103 	orr.w	r1, r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <HAL_ADC_ConfigChannel+0x72e>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	0e9b      	lsrs	r3, r3, #26
 800574e:	3301      	adds	r3, #1
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	051b      	lsls	r3, r3, #20
 800575c:	e018      	b.n	8005790 <HAL_ADC_ConfigChannel+0x760>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8005776:	2320      	movs	r3, #32
 8005778:	e003      	b.n	8005782 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	fab3 f383 	clz	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	3301      	adds	r3, #1
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	4613      	mov	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4413      	add	r3, r2
 800578e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005790:	430b      	orrs	r3, r1
 8005792:	e07e      	b.n	8005892 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x780>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	3301      	adds	r3, #1
 80057a8:	069b      	lsls	r3, r3, #26
 80057aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057ae:	e015      	b.n	80057dc <HAL_ADC_ConfigChannel+0x7ac>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	fa93 f3a3 	rbit	r3, r3
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80057c8:	2320      	movs	r3, #32
 80057ca:	e003      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	3301      	adds	r3, #1
 80057d6:	069b      	lsls	r3, r3, #26
 80057d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x7cc>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0e9b      	lsrs	r3, r3, #26
 80057ee:	3301      	adds	r3, #1
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	e017      	b.n	800582c <HAL_ADC_ConfigChannel+0x7fc>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	61bb      	str	r3, [r7, #24]
  return result;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005814:	2320      	movs	r3, #32
 8005816:	e003      	b.n	8005820 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2101      	movs	r1, #1
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10d      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x828>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0e9b      	lsrs	r3, r3, #26
 8005842:	3301      	adds	r3, #1
 8005844:	f003 021f 	and.w	r2, r3, #31
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	3b1e      	subs	r3, #30
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005856:	e01b      	b.n	8005890 <HAL_ADC_ConfigChannel+0x860>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	fa93 f3a3 	rbit	r3, r3
 8005864:	60fb      	str	r3, [r7, #12]
  return result;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005870:	2320      	movs	r3, #32
 8005872:	e003      	b.n	800587c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fab3 f383 	clz	r3, r3
 800587a:	b2db      	uxtb	r3, r3
 800587c:	3301      	adds	r3, #1
 800587e:	f003 021f 	and.w	r2, r3, #31
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	3b1e      	subs	r3, #30
 800588a:	051b      	lsls	r3, r3, #20
 800588c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005890:	430b      	orrs	r3, r1
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	4619      	mov	r1, r3
 8005898:	f7ff f8ce 	bl	8004a38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f280 80d7 	bge.w	8005a54 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a06      	ldr	r2, [pc, #24]	@ (80058c4 <HAL_ADC_ConfigChannel+0x894>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_ADC_ConfigChannel+0x88a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <HAL_ADC_ConfigChannel+0x898>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10a      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x8a0>
 80058ba:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <HAL_ADC_ConfigChannel+0x89c>)
 80058bc:	e009      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x8a2>
 80058be:	bf00      	nop
 80058c0:	47ff0000 	.word	0x47ff0000
 80058c4:	40022000 	.word	0x40022000
 80058c8:	40022100 	.word	0x40022100
 80058cc:	40022300 	.word	0x40022300
 80058d0:	4b65      	ldr	r3, [pc, #404]	@ (8005a68 <HAL_ADC_ConfigChannel+0xa38>)
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe ff84 	bl	80047e0 <LL_ADC_GetCommonPathInternalCh>
 80058d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a62      	ldr	r2, [pc, #392]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa3c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_ADC_ConfigChannel+0x8c0>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a61      	ldr	r2, [pc, #388]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa40>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10e      	bne.n	800590e <HAL_ADC_ConfigChannel+0x8de>
 80058f0:	485e      	ldr	r0, [pc, #376]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa3c>)
 80058f2:	f7ff f95b 	bl	8004bac <LL_ADC_IsEnabled>
 80058f6:	4604      	mov	r4, r0
 80058f8:	485d      	ldr	r0, [pc, #372]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa40>)
 80058fa:	f7ff f957 	bl	8004bac <LL_ADC_IsEnabled>
 80058fe:	4603      	mov	r3, r0
 8005900:	4323      	orrs	r3, r4
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	e008      	b.n	8005920 <HAL_ADC_ConfigChannel+0x8f0>
 800590e:	4859      	ldr	r0, [pc, #356]	@ (8005a74 <HAL_ADC_ConfigChannel+0xa44>)
 8005910:	f7ff f94c 	bl	8004bac <LL_ADC_IsEnabled>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8084 	beq.w	8005a2e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a53      	ldr	r2, [pc, #332]	@ (8005a78 <HAL_ADC_ConfigChannel+0xa48>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d132      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x966>
 8005930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d12c      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a4c      	ldr	r2, [pc, #304]	@ (8005a74 <HAL_ADC_ConfigChannel+0xa44>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f040 8086 	bne.w	8005a54 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a47      	ldr	r2, [pc, #284]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa3c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_ADC_ConfigChannel+0x92c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a46      	ldr	r2, [pc, #280]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa40>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x930>
 800595c:	4a47      	ldr	r2, [pc, #284]	@ (8005a7c <HAL_ADC_ConfigChannel+0xa4c>)
 800595e:	e000      	b.n	8005962 <HAL_ADC_ConfigChannel+0x932>
 8005960:	4a41      	ldr	r2, [pc, #260]	@ (8005a68 <HAL_ADC_ConfigChannel+0xa38>)
 8005962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005966:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7fe ff24 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005972:	4b43      	ldr	r3, [pc, #268]	@ (8005a80 <HAL_ADC_ConfigChannel+0xa50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	4a42      	ldr	r2, [pc, #264]	@ (8005a84 <HAL_ADC_ConfigChannel+0xa54>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	099b      	lsrs	r3, r3, #6
 8005980:	3301      	adds	r3, #1
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005986:	e002      	b.n	800598e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3b01      	subs	r3, #1
 800598c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f9      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005994:	e05e      	b.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a88 <HAL_ADC_ConfigChannel+0xa58>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d120      	bne.n	80059e2 <HAL_ADC_ConfigChannel+0x9b2>
 80059a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11a      	bne.n	80059e2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a30      	ldr	r2, [pc, #192]	@ (8005a74 <HAL_ADC_ConfigChannel+0xa44>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d14e      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2c      	ldr	r2, [pc, #176]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa3c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_ADC_ConfigChannel+0x99a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa40>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x99e>
 80059ca:	4a2c      	ldr	r2, [pc, #176]	@ (8005a7c <HAL_ADC_ConfigChannel+0xa4c>)
 80059cc:	e000      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x9a0>
 80059ce:	4a26      	ldr	r2, [pc, #152]	@ (8005a68 <HAL_ADC_ConfigChannel+0xa38>)
 80059d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fe feed 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059e0:	e038      	b.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a29      	ldr	r2, [pc, #164]	@ (8005a8c <HAL_ADC_ConfigChannel+0xa5c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d133      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
 80059ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d12d      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a74 <HAL_ADC_ConfigChannel+0xa44>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d128      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a19      	ldr	r2, [pc, #100]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa3c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_ADC_ConfigChannel+0x9e6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa40>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x9ea>
 8005a16:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_ADC_ConfigChannel+0xa4c>)
 8005a18:	e000      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x9ec>
 8005a1a:	4a13      	ldr	r2, [pc, #76]	@ (8005a68 <HAL_ADC_ConfigChannel+0xa38>)
 8005a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fe fec7 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
 8005a2c:	e012      	b.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005a40:	e008      	b.n	8005a54 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a5c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	37e4      	adds	r7, #228	@ 0xe4
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}
 8005a68:	58026300 	.word	0x58026300
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	40022100 	.word	0x40022100
 8005a74:	58026000 	.word	0x58026000
 8005a78:	c7520000 	.word	0xc7520000
 8005a7c:	40022300 	.word	0x40022300
 8005a80:	24000000 	.word	0x24000000
 8005a84:	053e2d63 	.word	0x053e2d63
 8005a88:	c3210000 	.word	0xc3210000
 8005a8c:	cb840000 	.word	0xcb840000

08005a90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a6c      	ldr	r2, [pc, #432]	@ (8005c50 <ADC_ConfigureBoostMode+0x1c0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <ADC_ConfigureBoostMode+0x1c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6b      	ldr	r2, [pc, #428]	@ (8005c54 <ADC_ConfigureBoostMode+0x1c4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d109      	bne.n	8005ac0 <ADC_ConfigureBoostMode+0x30>
 8005aac:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <ADC_ConfigureBoostMode+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e008      	b.n	8005ad2 <ADC_ConfigureBoostMode+0x42>
 8005ac0:	4b66      	ldr	r3, [pc, #408]	@ (8005c5c <ADC_ConfigureBoostMode+0x1cc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01c      	beq.n	8005b10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ad6:	f005 fbe5 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 8005ada:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ae4:	d010      	beq.n	8005b08 <ADC_ConfigureBoostMode+0x78>
 8005ae6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005aea:	d873      	bhi.n	8005bd4 <ADC_ConfigureBoostMode+0x144>
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d002      	beq.n	8005af8 <ADC_ConfigureBoostMode+0x68>
 8005af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005af6:	d16d      	bne.n	8005bd4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	60fb      	str	r3, [r7, #12]
        break;
 8005b06:	e068      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	60fb      	str	r3, [r7, #12]
        break;
 8005b0e:	e064      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005b10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005b14:	f04f 0100 	mov.w	r1, #0
 8005b18:	f006 fdc0 	bl	800c69c <HAL_RCCEx_GetPeriphCLKFreq>
 8005b1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005b26:	d051      	beq.n	8005bcc <ADC_ConfigureBoostMode+0x13c>
 8005b28:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005b2c:	d854      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b2e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005b32:	d047      	beq.n	8005bc4 <ADC_ConfigureBoostMode+0x134>
 8005b34:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005b38:	d84e      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b3a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005b3e:	d03d      	beq.n	8005bbc <ADC_ConfigureBoostMode+0x12c>
 8005b40:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005b44:	d848      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b4a:	d033      	beq.n	8005bb4 <ADC_ConfigureBoostMode+0x124>
 8005b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b50:	d842      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b52:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005b56:	d029      	beq.n	8005bac <ADC_ConfigureBoostMode+0x11c>
 8005b58:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005b5c:	d83c      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b5e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005b62:	d01a      	beq.n	8005b9a <ADC_ConfigureBoostMode+0x10a>
 8005b64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005b68:	d836      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005b6e:	d014      	beq.n	8005b9a <ADC_ConfigureBoostMode+0x10a>
 8005b70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005b74:	d830      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7a:	d00e      	beq.n	8005b9a <ADC_ConfigureBoostMode+0x10a>
 8005b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b80:	d82a      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b86:	d008      	beq.n	8005b9a <ADC_ConfigureBoostMode+0x10a>
 8005b88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b8c:	d824      	bhi.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
 8005b8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b92:	d002      	beq.n	8005b9a <ADC_ConfigureBoostMode+0x10a>
 8005b94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b98:	d11e      	bne.n	8005bd8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	0c9b      	lsrs	r3, r3, #18
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
        break;
 8005baa:	e016      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
        break;
 8005bb2:	e012      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	60fb      	str	r3, [r7, #12]
        break;
 8005bba:	e00e      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	099b      	lsrs	r3, r3, #6
 8005bc0:	60fb      	str	r3, [r7, #12]
        break;
 8005bc2:	e00a      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	60fb      	str	r3, [r7, #12]
        break;
 8005bca:	e006      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	60fb      	str	r3, [r7, #12]
        break;
 8005bd2:	e002      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
        break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005bd8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <ADC_ConfigureBoostMode+0x1d0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d808      	bhi.n	8005bfa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005bf6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005bf8:	e025      	b.n	8005c46 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a19      	ldr	r2, [pc, #100]	@ (8005c64 <ADC_ConfigureBoostMode+0x1d4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d80a      	bhi.n	8005c18 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c14:	609a      	str	r2, [r3, #8]
}
 8005c16:	e016      	b.n	8005c46 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a13      	ldr	r2, [pc, #76]	@ (8005c68 <ADC_ConfigureBoostMode+0x1d8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d80a      	bhi.n	8005c36 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	e007      	b.n	8005c46 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005c44:	609a      	str	r2, [r3, #8]
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40022000 	.word	0x40022000
 8005c54:	40022100 	.word	0x40022100
 8005c58:	40022300 	.word	0x40022300
 8005c5c:	58026300 	.word	0x58026300
 8005c60:	005f5e10 	.word	0x005f5e10
 8005c64:	00bebc20 	.word	0x00bebc20
 8005c68:	017d7840 	.word	0x017d7840

08005c6c <LL_ADC_IsEnabled>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <LL_ADC_IsEnabled+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <LL_ADC_IsEnabled+0x1a>
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d101      	bne.n	8005caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b0a3      	sub	sp, #140	@ 0x8c
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e0c1      	b.n	8005e5a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5e      	ldr	r2, [pc, #376]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d102      	bne.n	8005cf6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e001      	b.n	8005cfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0a0      	b.n	8005e5a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ffb9 	bl	8005c92 <LL_ADC_REG_IsConversionOngoing>
 8005d20:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ffb2 	bl	8005c92 <LL_ADC_REG_IsConversionOngoing>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8081 	bne.w	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d17c      	bne.n	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a48      	ldr	r2, [pc, #288]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a46      	ldr	r2, [pc, #280]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d101      	bne.n	8005d56 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005d52:	4b46      	ldr	r3, [pc, #280]	@ (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005d54:	e000      	b.n	8005d58 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005d56:	4b46      	ldr	r3, [pc, #280]	@ (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005d58:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d039      	beq.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005d62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3a      	ldr	r2, [pc, #232]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a39      	ldr	r2, [pc, #228]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d10e      	bne.n	8005da6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005d88:	4836      	ldr	r0, [pc, #216]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d8a:	f7ff ff6f 	bl	8005c6c <LL_ADC_IsEnabled>
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4835      	ldr	r0, [pc, #212]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d92:	f7ff ff6b 	bl	8005c6c <LL_ADC_IsEnabled>
 8005d96:	4603      	mov	r3, r0
 8005d98:	4323      	orrs	r3, r4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	e008      	b.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005da6:	4833      	ldr	r0, [pc, #204]	@ (8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005da8:	f7ff ff60 	bl	8005c6c <LL_ADC_IsEnabled>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d047      	beq.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005dbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	6811      	ldr	r1, [r2, #0]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	6892      	ldr	r2, [r2, #8]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dd2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dd4:	e03a      	b.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005dd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005de0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10e      	bne.n	8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005df6:	481b      	ldr	r0, [pc, #108]	@ (8005e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005df8:	f7ff ff38 	bl	8005c6c <LL_ADC_IsEnabled>
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	481a      	ldr	r0, [pc, #104]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e00:	f7ff ff34 	bl	8005c6c <LL_ADC_IsEnabled>
 8005e04:	4603      	mov	r3, r0
 8005e06:	4323      	orrs	r3, r4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e008      	b.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005e14:	4817      	ldr	r0, [pc, #92]	@ (8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005e16:	f7ff ff29 	bl	8005c6c <LL_ADC_IsEnabled>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005e2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e36:	e009      	b.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005e4a:	e000      	b.n	8005e4e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005e56:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	378c      	adds	r7, #140	@ 0x8c
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40022000 	.word	0x40022000
 8005e68:	40022100 	.word	0x40022100
 8005e6c:	40022300 	.word	0x40022300
 8005e70:	58026300 	.word	0x58026300
 8005e74:	58026000 	.word	0x58026000
 8005e78:	fffff0e0 	.word	0xfffff0e0

08005e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <__NVIC_SetPriorityGrouping+0x40>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eaa:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <__NVIC_SetPriorityGrouping+0x40>)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	60d3      	str	r3, [r2, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	e000ed00 	.word	0xe000ed00
 8005ec0:	05fa0000 	.word	0x05fa0000

08005ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <__NVIC_GetPriorityGrouping+0x18>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 0307 	and.w	r3, r3, #7
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db0b      	blt.n	8005f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	4907      	ldr	r1, [pc, #28]	@ (8005f18 <__NVIC_EnableIRQ+0x38>)
 8005efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	e000e100 	.word	0xe000e100

08005f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db0a      	blt.n	8005f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	490c      	ldr	r1, [pc, #48]	@ (8005f68 <__NVIC_SetPriority+0x4c>)
 8005f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	440b      	add	r3, r1
 8005f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f44:	e00a      	b.n	8005f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4908      	ldr	r1, [pc, #32]	@ (8005f6c <__NVIC_SetPriority+0x50>)
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	3b04      	subs	r3, #4
 8005f54:	0112      	lsls	r2, r2, #4
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	440b      	add	r3, r1
 8005f5a:	761a      	strb	r2, [r3, #24]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000e100 	.word	0xe000e100
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	@ 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f1c3 0307 	rsb	r3, r3, #7
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	bf28      	it	cs
 8005f8e:	2304      	movcs	r3, #4
 8005f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d902      	bls.n	8005fa0 <NVIC_EncodePriority+0x30>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3b03      	subs	r3, #3
 8005f9e:	e000      	b.n	8005fa2 <NVIC_EncodePriority+0x32>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43d9      	mvns	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	4313      	orrs	r3, r2
         );
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3724      	adds	r7, #36	@ 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fe8:	d301      	bcc.n	8005fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00f      	b.n	800600e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fee:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <SysTick_Config+0x40>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ff6:	210f      	movs	r1, #15
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f7ff ff8e 	bl	8005f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006000:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <SysTick_Config+0x40>)
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006006:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <SysTick_Config+0x40>)
 8006008:	2207      	movs	r2, #7
 800600a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000e010 	.word	0xe000e010

0800601c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff29 	bl	8005e7c <__NVIC_SetPriorityGrouping>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006040:	f7ff ff40 	bl	8005ec4 <__NVIC_GetPriorityGrouping>
 8006044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f7ff ff90 	bl	8005f70 <NVIC_EncodePriority>
 8006050:	4602      	mov	r2, r0
 8006052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ff5f 	bl	8005f1c <__NVIC_SetPriority>
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	4603      	mov	r3, r0
 800606e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff33 	bl	8005ee0 <__NVIC_EnableIRQ>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ffa4 	bl	8005fd8 <SysTick_Config>
 8006090:	4603      	mov	r3, r0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80060a0:	f3bf 8f5f 	dmb	sy
}
 80060a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80060a6:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <HAL_MPU_Disable+0x28>)
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	4a06      	ldr	r2, [pc, #24]	@ (80060c4 <HAL_MPU_Disable+0x28>)
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_MPU_Disable+0x2c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	e000ed00 	.word	0xe000ed00
 80060c8:	e000ed90 	.word	0xe000ed90

080060cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80060d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006104 <HAL_MPU_Enable+0x38>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80060de:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <HAL_MPU_Enable+0x3c>)
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <HAL_MPU_Enable+0x3c>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80060ea:	f3bf 8f4f 	dsb	sy
}
 80060ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060f0:	f3bf 8f6f 	isb	sy
}
 80060f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	e000ed90 	.word	0xe000ed90
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	785a      	ldrb	r2, [r3, #1]
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <HAL_MPU_ConfigRegion+0x7c>)
 800611a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800611c:	4b1a      	ldr	r3, [pc, #104]	@ (8006188 <HAL_MPU_ConfigRegion+0x7c>)
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4a19      	ldr	r2, [pc, #100]	@ (8006188 <HAL_MPU_ConfigRegion+0x7c>)
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006128:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <HAL_MPU_ConfigRegion+0x7c>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7adb      	ldrb	r3, [r3, #11]
 800613a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800613c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7a9b      	ldrb	r3, [r3, #10]
 8006142:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7b5b      	ldrb	r3, [r3, #13]
 800614a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800614c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7b9b      	ldrb	r3, [r3, #14]
 8006152:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006154:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7bdb      	ldrb	r3, [r3, #15]
 800615a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800615c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7a5b      	ldrb	r3, [r3, #9]
 8006162:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7a1b      	ldrb	r3, [r3, #8]
 800616a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800616c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006174:	4a04      	ldr	r2, [pc, #16]	@ (8006188 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006176:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006178:	6113      	str	r3, [r2, #16]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	e000ed90 	.word	0xe000ed90

0800618c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e014      	b.n	80061c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	791b      	ldrb	r3, [r3, #4]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fc3e 	bl	8001a30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0a2      	b.n	800632e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	795b      	ldrb	r3, [r3, #5]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_DAC_Start_DMA+0x24>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e09c      	b.n	800632e <HAL_DAC_Start_DMA+0x15e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d129      	bne.n	800625a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4a4b      	ldr	r2, [pc, #300]	@ (8006338 <HAL_DAC_Start_DMA+0x168>)
 800620c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4a4a      	ldr	r2, [pc, #296]	@ (800633c <HAL_DAC_Start_DMA+0x16c>)
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	4a49      	ldr	r2, [pc, #292]	@ (8006340 <HAL_DAC_Start_DMA+0x170>)
 800621c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800622c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_DAC_Start_DMA+0x6c>
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d005      	beq.n	8006246 <HAL_DAC_Start_DMA+0x76>
 800623a:	e009      	b.n	8006250 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	613b      	str	r3, [r7, #16]
        break;
 8006244:	e033      	b.n	80062ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	613b      	str	r3, [r7, #16]
        break;
 800624e:	e02e      	b.n	80062ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3310      	adds	r3, #16
 8006256:	613b      	str	r3, [r7, #16]
        break;
 8006258:	e029      	b.n	80062ae <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	4a39      	ldr	r2, [pc, #228]	@ (8006344 <HAL_DAC_Start_DMA+0x174>)
 8006260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	4a38      	ldr	r2, [pc, #224]	@ (8006348 <HAL_DAC_Start_DMA+0x178>)
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4a37      	ldr	r2, [pc, #220]	@ (800634c <HAL_DAC_Start_DMA+0x17c>)
 8006270:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006280:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_DAC_Start_DMA+0xc0>
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d005      	beq.n	800629a <HAL_DAC_Start_DMA+0xca>
 800628e:	e009      	b.n	80062a4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	613b      	str	r3, [r7, #16]
        break;
 8006298:	e009      	b.n	80062ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3318      	adds	r3, #24
 80062a0:	613b      	str	r3, [r7, #16]
        break;
 80062a2:	e004      	b.n	80062ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	331c      	adds	r3, #28
 80062aa:	613b      	str	r3, [r7, #16]
        break;
 80062ac:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d111      	bne.n	80062d8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6898      	ldr	r0, [r3, #8]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	f000 fd6d 	bl	8006dac <HAL_DMA_Start_IT>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
 80062d6:	e010      	b.n	80062fa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80062e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68d8      	ldr	r0, [r3, #12]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	f000 fd5b 	bl	8006dac <HAL_DMA_Start_IT>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6819      	ldr	r1, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2201      	movs	r2, #1
 8006314:	409a      	lsls	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e005      	b.n	800632c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f043 0204 	orr.w	r2, r3, #4
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	080065e9 	.word	0x080065e9
 800633c:	0800660b 	.word	0x0800660b
 8006340:	08006627 	.word	0x08006627
 8006344:	08006691 	.word	0x08006691
 8006348:	080066b3 	.word	0x080066b3
 800634c:	080066cf 	.word	0x080066cf

08006350 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_DAC_ConfigChannel+0x1e>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e12a      	b.n	80065dc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	795b      	ldrb	r3, [r3, #5]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_DAC_ConfigChannel+0x2e>
 800638e:	2302      	movs	r3, #2
 8006390:	e124      	b.n	80065dc <HAL_DAC_ConfigChannel+0x278>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2202      	movs	r2, #2
 800639c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d17a      	bne.n	800649c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80063a6:	f7fe f9c5 	bl	8004734 <HAL_GetTick>
 80063aa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d13d      	bne.n	800642e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063b2:	e018      	b.n	80063e6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80063b4:	f7fe f9be 	bl	8004734 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d911      	bls.n	80063e6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063c8:	4b86      	ldr	r3, [pc, #536]	@ (80065e4 <HAL_DAC_ConfigChannel+0x280>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f043 0208 	orr.w	r2, r3, #8
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2203      	movs	r2, #3
 80063e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e0fa      	b.n	80065dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ec:	4b7d      	ldr	r3, [pc, #500]	@ (80065e4 <HAL_DAC_ConfigChannel+0x280>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1df      	bne.n	80063b4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	6992      	ldr	r2, [r2, #24]
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80063fe:	e020      	b.n	8006442 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006400:	f7fe f998 	bl	8004734 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d90f      	bls.n	800642e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	da0a      	bge.n	800642e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f043 0208 	orr.w	r2, r3, #8
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2203      	movs	r2, #3
 8006428:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0d6      	b.n	80065dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	dbe3      	blt.n	8006400 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	6992      	ldr	r2, [r2, #24]
 8006440:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	ea02 0103 	and.w	r1, r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	409a      	lsls	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	21ff      	movs	r1, #255	@ 0xff
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	ea02 0103 	and.w	r1, r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	409a      	lsls	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d11d      	bne.n	80064e0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	221f      	movs	r2, #31
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2207      	movs	r2, #7
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d102      	bne.n	800650a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
 8006508:	e00f      	b.n	800652a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b02      	cmp	r3, #2
 8006510:	d102      	bne.n	8006518 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006512:	2301      	movs	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
 8006516:	e008      	b.n	800652a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006520:	2301      	movs	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24
 8006524:	e001      	b.n	800652a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4313      	orrs	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43da      	mvns	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	400a      	ands	r2, r1
 8006570:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	22c0      	movs	r2, #192	@ 0xc0
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	43da      	mvns	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	400a      	ands	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80065d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	@ 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20008000 	.word	0x20008000

080065e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7fa fa7a 	bl	8000af0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	711a      	strb	r2, [r3, #4]
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7fa fa5b 	bl	8000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f043 0204 	orr.w	r2, r3, #4
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fe85 	bl	8006350 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	711a      	strb	r2, [r3, #4]
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ffd8 	bl	8006654 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	711a      	strb	r2, [r3, #4]
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff ffd1 	bl	8006668 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f043 0204 	orr.w	r2, r3, #4
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff ffc7 	bl	800667c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	711a      	strb	r2, [r3, #4]
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006704:	f7fe f816 	bl	8004734 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e312      	b.n	8006d3a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a66      	ldr	r2, [pc, #408]	@ (80068b4 <HAL_DMA_Init+0x1b8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04a      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a65      	ldr	r2, [pc, #404]	@ (80068b8 <HAL_DMA_Init+0x1bc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d045      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a63      	ldr	r2, [pc, #396]	@ (80068bc <HAL_DMA_Init+0x1c0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d040      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a62      	ldr	r2, [pc, #392]	@ (80068c0 <HAL_DMA_Init+0x1c4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a60      	ldr	r2, [pc, #384]	@ (80068c4 <HAL_DMA_Init+0x1c8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d036      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5f      	ldr	r2, [pc, #380]	@ (80068c8 <HAL_DMA_Init+0x1cc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d031      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5d      	ldr	r2, [pc, #372]	@ (80068cc <HAL_DMA_Init+0x1d0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02c      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5c      	ldr	r2, [pc, #368]	@ (80068d0 <HAL_DMA_Init+0x1d4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d027      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5a      	ldr	r2, [pc, #360]	@ (80068d4 <HAL_DMA_Init+0x1d8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a59      	ldr	r2, [pc, #356]	@ (80068d8 <HAL_DMA_Init+0x1dc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d01d      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a57      	ldr	r2, [pc, #348]	@ (80068dc <HAL_DMA_Init+0x1e0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a56      	ldr	r2, [pc, #344]	@ (80068e0 <HAL_DMA_Init+0x1e4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a54      	ldr	r2, [pc, #336]	@ (80068e4 <HAL_DMA_Init+0x1e8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a53      	ldr	r2, [pc, #332]	@ (80068e8 <HAL_DMA_Init+0x1ec>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a51      	ldr	r2, [pc, #324]	@ (80068ec <HAL_DMA_Init+0x1f0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_Init+0xb8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a50      	ldr	r2, [pc, #320]	@ (80068f0 <HAL_DMA_Init+0x1f4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <HAL_DMA_Init+0xbc>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <HAL_DMA_Init+0xbe>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 813c 	beq.w	8006a38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a37      	ldr	r2, [pc, #220]	@ (80068b4 <HAL_DMA_Init+0x1b8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d04a      	beq.n	8006870 <HAL_DMA_Init+0x174>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a36      	ldr	r2, [pc, #216]	@ (80068b8 <HAL_DMA_Init+0x1bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d045      	beq.n	8006870 <HAL_DMA_Init+0x174>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a34      	ldr	r2, [pc, #208]	@ (80068bc <HAL_DMA_Init+0x1c0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d040      	beq.n	8006870 <HAL_DMA_Init+0x174>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a33      	ldr	r2, [pc, #204]	@ (80068c0 <HAL_DMA_Init+0x1c4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d03b      	beq.n	8006870 <HAL_DMA_Init+0x174>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a31      	ldr	r2, [pc, #196]	@ (80068c4 <HAL_DMA_Init+0x1c8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d036      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a30      	ldr	r2, [pc, #192]	@ (80068c8 <HAL_DMA_Init+0x1cc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d031      	beq.n	8006870 <HAL_DMA_Init+0x174>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2e      	ldr	r2, [pc, #184]	@ (80068cc <HAL_DMA_Init+0x1d0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d02c      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2d      	ldr	r2, [pc, #180]	@ (80068d0 <HAL_DMA_Init+0x1d4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d027      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2b      	ldr	r2, [pc, #172]	@ (80068d4 <HAL_DMA_Init+0x1d8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d022      	beq.n	8006870 <HAL_DMA_Init+0x174>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <HAL_DMA_Init+0x1dc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d01d      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a28      	ldr	r2, [pc, #160]	@ (80068dc <HAL_DMA_Init+0x1e0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <HAL_DMA_Init+0x174>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a27      	ldr	r2, [pc, #156]	@ (80068e0 <HAL_DMA_Init+0x1e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a25      	ldr	r2, [pc, #148]	@ (80068e4 <HAL_DMA_Init+0x1e8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a24      	ldr	r2, [pc, #144]	@ (80068e8 <HAL_DMA_Init+0x1ec>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_DMA_Init+0x174>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a22      	ldr	r2, [pc, #136]	@ (80068ec <HAL_DMA_Init+0x1f0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_DMA_Init+0x174>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a21      	ldr	r2, [pc, #132]	@ (80068f0 <HAL_DMA_Init+0x1f4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d108      	bne.n	8006882 <HAL_DMA_Init+0x186>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	e007      	b.n	8006892 <HAL_DMA_Init+0x196>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006892:	e02f      	b.n	80068f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006894:	f7fd ff4e 	bl	8004734 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b05      	cmp	r3, #5
 80068a0:	d928      	bls.n	80068f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2203      	movs	r2, #3
 80068ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e242      	b.n	8006d3a <HAL_DMA_Init+0x63e>
 80068b4:	40020010 	.word	0x40020010
 80068b8:	40020028 	.word	0x40020028
 80068bc:	40020040 	.word	0x40020040
 80068c0:	40020058 	.word	0x40020058
 80068c4:	40020070 	.word	0x40020070
 80068c8:	40020088 	.word	0x40020088
 80068cc:	400200a0 	.word	0x400200a0
 80068d0:	400200b8 	.word	0x400200b8
 80068d4:	40020410 	.word	0x40020410
 80068d8:	40020428 	.word	0x40020428
 80068dc:	40020440 	.word	0x40020440
 80068e0:	40020458 	.word	0x40020458
 80068e4:	40020470 	.word	0x40020470
 80068e8:	40020488 	.word	0x40020488
 80068ec:	400204a0 	.word	0x400204a0
 80068f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1c8      	bne.n	8006894 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4b83      	ldr	r3, [pc, #524]	@ (8006b1c <HAL_DMA_Init+0x420>)
 800690e:	4013      	ands	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800691a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006926:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006932:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	2b04      	cmp	r3, #4
 8006946:	d107      	bne.n	8006958 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	4313      	orrs	r3, r2
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b28      	cmp	r3, #40	@ 0x28
 800695e:	d903      	bls.n	8006968 <HAL_DMA_Init+0x26c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b2e      	cmp	r3, #46	@ 0x2e
 8006966:	d91f      	bls.n	80069a8 <HAL_DMA_Init+0x2ac>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b3e      	cmp	r3, #62	@ 0x3e
 800696e:	d903      	bls.n	8006978 <HAL_DMA_Init+0x27c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b42      	cmp	r3, #66	@ 0x42
 8006976:	d917      	bls.n	80069a8 <HAL_DMA_Init+0x2ac>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b46      	cmp	r3, #70	@ 0x46
 800697e:	d903      	bls.n	8006988 <HAL_DMA_Init+0x28c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b48      	cmp	r3, #72	@ 0x48
 8006986:	d90f      	bls.n	80069a8 <HAL_DMA_Init+0x2ac>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b4e      	cmp	r3, #78	@ 0x4e
 800698e:	d903      	bls.n	8006998 <HAL_DMA_Init+0x29c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b52      	cmp	r3, #82	@ 0x52
 8006996:	d907      	bls.n	80069a8 <HAL_DMA_Init+0x2ac>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b73      	cmp	r3, #115	@ 0x73
 800699e:	d905      	bls.n	80069ac <HAL_DMA_Init+0x2b0>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b77      	cmp	r3, #119	@ 0x77
 80069a6:	d801      	bhi.n	80069ac <HAL_DMA_Init+0x2b0>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_DMA_Init+0x2b2>
 80069ac:	2300      	movs	r3, #0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d117      	bne.n	8006a14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fdca 	bl	8008590 <DMA_CheckFifoParam>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2240      	movs	r2, #64	@ 0x40
 8006a06:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e192      	b.n	8006d3a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fd05 	bl	800842c <DMA_CalcBaseAndBitshift>
 8006a22:	4603      	mov	r3, r0
 8006a24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	223f      	movs	r2, #63	@ 0x3f
 8006a30:	409a      	lsls	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	e0c8      	b.n	8006bca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a38      	ldr	r2, [pc, #224]	@ (8006b20 <HAL_DMA_Init+0x424>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d022      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a37      	ldr	r2, [pc, #220]	@ (8006b24 <HAL_DMA_Init+0x428>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d01d      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a35      	ldr	r2, [pc, #212]	@ (8006b28 <HAL_DMA_Init+0x42c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a34      	ldr	r2, [pc, #208]	@ (8006b2c <HAL_DMA_Init+0x430>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a32      	ldr	r2, [pc, #200]	@ (8006b30 <HAL_DMA_Init+0x434>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a31      	ldr	r2, [pc, #196]	@ (8006b34 <HAL_DMA_Init+0x438>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2f      	ldr	r2, [pc, #188]	@ (8006b38 <HAL_DMA_Init+0x43c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_DMA_Init+0x38c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2e      	ldr	r2, [pc, #184]	@ (8006b3c <HAL_DMA_Init+0x440>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d101      	bne.n	8006a8c <HAL_DMA_Init+0x390>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <HAL_DMA_Init+0x392>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8092 	beq.w	8006bb8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_DMA_Init+0x424>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d021      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a20      	ldr	r2, [pc, #128]	@ (8006b24 <HAL_DMA_Init+0x428>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01c      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_DMA_Init+0x42c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d017      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <HAL_DMA_Init+0x430>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d012      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_DMA_Init+0x434>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00d      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1a      	ldr	r2, [pc, #104]	@ (8006b34 <HAL_DMA_Init+0x438>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d008      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a18      	ldr	r2, [pc, #96]	@ (8006b38 <HAL_DMA_Init+0x43c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <HAL_DMA_Init+0x3e6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a17      	ldr	r2, [pc, #92]	@ (8006b3c <HAL_DMA_Init+0x440>)
 8006ae0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <HAL_DMA_Init+0x444>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d01c      	beq.n	8006b44 <HAL_DMA_Init+0x448>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b80      	cmp	r3, #128	@ 0x80
 8006b10:	d102      	bne.n	8006b18 <HAL_DMA_Init+0x41c>
 8006b12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b16:	e016      	b.n	8006b46 <HAL_DMA_Init+0x44a>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e014      	b.n	8006b46 <HAL_DMA_Init+0x44a>
 8006b1c:	fe10803f 	.word	0xfe10803f
 8006b20:	58025408 	.word	0x58025408
 8006b24:	5802541c 	.word	0x5802541c
 8006b28:	58025430 	.word	0x58025430
 8006b2c:	58025444 	.word	0x58025444
 8006b30:	58025458 	.word	0x58025458
 8006b34:	5802546c 	.word	0x5802546c
 8006b38:	58025480 	.word	0x58025480
 8006b3c:	58025494 	.word	0x58025494
 8006b40:	fffe000f 	.word	0xfffe000f
 8006b44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68d2      	ldr	r2, [r2, #12]
 8006b4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006b74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d44 <HAL_DMA_Init+0x648>)
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d48 <HAL_DMA_Init+0x64c>)
 8006b90:	fba2 2303 	umull	r2, r3, r2, r3
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	009a      	lsls	r2, r3, #2
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fc45 	bl	800842c <DMA_CalcBaseAndBitshift>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2201      	movs	r2, #1
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e008      	b.n	8006bca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2240      	movs	r2, #64	@ 0x40
 8006bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e0b7      	b.n	8006d3a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a5f      	ldr	r2, [pc, #380]	@ (8006d4c <HAL_DMA_Init+0x650>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d072      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d50 <HAL_DMA_Init+0x654>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d06d      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a5c      	ldr	r2, [pc, #368]	@ (8006d54 <HAL_DMA_Init+0x658>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d068      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5a      	ldr	r2, [pc, #360]	@ (8006d58 <HAL_DMA_Init+0x65c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d063      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a59      	ldr	r2, [pc, #356]	@ (8006d5c <HAL_DMA_Init+0x660>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d05e      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a57      	ldr	r2, [pc, #348]	@ (8006d60 <HAL_DMA_Init+0x664>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d059      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a56      	ldr	r2, [pc, #344]	@ (8006d64 <HAL_DMA_Init+0x668>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d054      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a54      	ldr	r2, [pc, #336]	@ (8006d68 <HAL_DMA_Init+0x66c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04f      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a53      	ldr	r2, [pc, #332]	@ (8006d6c <HAL_DMA_Init+0x670>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d04a      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a51      	ldr	r2, [pc, #324]	@ (8006d70 <HAL_DMA_Init+0x674>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d045      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a50      	ldr	r2, [pc, #320]	@ (8006d74 <HAL_DMA_Init+0x678>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d040      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8006d78 <HAL_DMA_Init+0x67c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d03b      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a4d      	ldr	r2, [pc, #308]	@ (8006d7c <HAL_DMA_Init+0x680>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d036      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a4b      	ldr	r2, [pc, #300]	@ (8006d80 <HAL_DMA_Init+0x684>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d031      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006d84 <HAL_DMA_Init+0x688>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d02c      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a48      	ldr	r2, [pc, #288]	@ (8006d88 <HAL_DMA_Init+0x68c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d027      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a47      	ldr	r2, [pc, #284]	@ (8006d8c <HAL_DMA_Init+0x690>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d022      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a45      	ldr	r2, [pc, #276]	@ (8006d90 <HAL_DMA_Init+0x694>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01d      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a44      	ldr	r2, [pc, #272]	@ (8006d94 <HAL_DMA_Init+0x698>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a42      	ldr	r2, [pc, #264]	@ (8006d98 <HAL_DMA_Init+0x69c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a41      	ldr	r2, [pc, #260]	@ (8006d9c <HAL_DMA_Init+0x6a0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8006da0 <HAL_DMA_Init+0x6a4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3e      	ldr	r2, [pc, #248]	@ (8006da4 <HAL_DMA_Init+0x6a8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_DMA_Init+0x5be>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8006da8 <HAL_DMA_Init+0x6ac>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_DMA_Init+0x5c2>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_DMA_Init+0x5c4>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d032      	beq.n	8006d2a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fcdf 	bl	8008688 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b80      	cmp	r3, #128	@ 0x80
 8006cd0:	d102      	bne.n	8006cd8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006cec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_DMA_Init+0x61c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d80c      	bhi.n	8006d18 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fd5c 	bl	80087bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e008      	b.n	8006d2a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	a7fdabf8 	.word	0xa7fdabf8
 8006d48:	cccccccd 	.word	0xcccccccd
 8006d4c:	40020010 	.word	0x40020010
 8006d50:	40020028 	.word	0x40020028
 8006d54:	40020040 	.word	0x40020040
 8006d58:	40020058 	.word	0x40020058
 8006d5c:	40020070 	.word	0x40020070
 8006d60:	40020088 	.word	0x40020088
 8006d64:	400200a0 	.word	0x400200a0
 8006d68:	400200b8 	.word	0x400200b8
 8006d6c:	40020410 	.word	0x40020410
 8006d70:	40020428 	.word	0x40020428
 8006d74:	40020440 	.word	0x40020440
 8006d78:	40020458 	.word	0x40020458
 8006d7c:	40020470 	.word	0x40020470
 8006d80:	40020488 	.word	0x40020488
 8006d84:	400204a0 	.word	0x400204a0
 8006d88:	400204b8 	.word	0x400204b8
 8006d8c:	58025408 	.word	0x58025408
 8006d90:	5802541c 	.word	0x5802541c
 8006d94:	58025430 	.word	0x58025430
 8006d98:	58025444 	.word	0x58025444
 8006d9c:	58025458 	.word	0x58025458
 8006da0:	5802546c 	.word	0x5802546c
 8006da4:	58025480 	.word	0x58025480
 8006da8:	58025494 	.word	0x58025494

08006dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e226      	b.n	8007216 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_DMA_Start_IT+0x2a>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e21f      	b.n	8007216 <HAL_DMA_Start_IT+0x46a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	f040 820a 	bne.w	8007200 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a68      	ldr	r2, [pc, #416]	@ (8006fa0 <HAL_DMA_Start_IT+0x1f4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04a      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a66      	ldr	r2, [pc, #408]	@ (8006fa4 <HAL_DMA_Start_IT+0x1f8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d045      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a65      	ldr	r2, [pc, #404]	@ (8006fa8 <HAL_DMA_Start_IT+0x1fc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d040      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a63      	ldr	r2, [pc, #396]	@ (8006fac <HAL_DMA_Start_IT+0x200>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d03b      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a62      	ldr	r2, [pc, #392]	@ (8006fb0 <HAL_DMA_Start_IT+0x204>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d036      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a60      	ldr	r2, [pc, #384]	@ (8006fb4 <HAL_DMA_Start_IT+0x208>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d031      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8006fb8 <HAL_DMA_Start_IT+0x20c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02c      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5d      	ldr	r2, [pc, #372]	@ (8006fbc <HAL_DMA_Start_IT+0x210>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d027      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8006fc0 <HAL_DMA_Start_IT+0x214>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5a      	ldr	r2, [pc, #360]	@ (8006fc4 <HAL_DMA_Start_IT+0x218>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a59      	ldr	r2, [pc, #356]	@ (8006fc8 <HAL_DMA_Start_IT+0x21c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a57      	ldr	r2, [pc, #348]	@ (8006fcc <HAL_DMA_Start_IT+0x220>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a56      	ldr	r2, [pc, #344]	@ (8006fd0 <HAL_DMA_Start_IT+0x224>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a54      	ldr	r2, [pc, #336]	@ (8006fd4 <HAL_DMA_Start_IT+0x228>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a53      	ldr	r2, [pc, #332]	@ (8006fd8 <HAL_DMA_Start_IT+0x22c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_Start_IT+0xee>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a51      	ldr	r2, [pc, #324]	@ (8006fdc <HAL_DMA_Start_IT+0x230>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d108      	bne.n	8006eac <HAL_DMA_Start_IT+0x100>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e007      	b.n	8006ebc <HAL_DMA_Start_IT+0x110>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0201 	bic.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f001 f906 	bl	80080d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a34      	ldr	r2, [pc, #208]	@ (8006fa0 <HAL_DMA_Start_IT+0x1f4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d04a      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a33      	ldr	r2, [pc, #204]	@ (8006fa4 <HAL_DMA_Start_IT+0x1f8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d045      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a31      	ldr	r2, [pc, #196]	@ (8006fa8 <HAL_DMA_Start_IT+0x1fc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d040      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a30      	ldr	r2, [pc, #192]	@ (8006fac <HAL_DMA_Start_IT+0x200>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d03b      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8006fb0 <HAL_DMA_Start_IT+0x204>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d036      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb4 <HAL_DMA_Start_IT+0x208>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d031      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb8 <HAL_DMA_Start_IT+0x20c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d02c      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2a      	ldr	r2, [pc, #168]	@ (8006fbc <HAL_DMA_Start_IT+0x210>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d027      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	@ (8006fc0 <HAL_DMA_Start_IT+0x214>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d022      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a27      	ldr	r2, [pc, #156]	@ (8006fc4 <HAL_DMA_Start_IT+0x218>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d01d      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a25      	ldr	r2, [pc, #148]	@ (8006fc8 <HAL_DMA_Start_IT+0x21c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a24      	ldr	r2, [pc, #144]	@ (8006fcc <HAL_DMA_Start_IT+0x220>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a22      	ldr	r2, [pc, #136]	@ (8006fd0 <HAL_DMA_Start_IT+0x224>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a21      	ldr	r2, [pc, #132]	@ (8006fd4 <HAL_DMA_Start_IT+0x228>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd8 <HAL_DMA_Start_IT+0x22c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_DMA_Start_IT+0x1bc>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1e      	ldr	r2, [pc, #120]	@ (8006fdc <HAL_DMA_Start_IT+0x230>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <HAL_DMA_Start_IT+0x1c0>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <HAL_DMA_Start_IT+0x1c2>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d036      	beq.n	8006fe0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 021e 	bic.w	r2, r3, #30
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0216 	orr.w	r2, r2, #22
 8006f84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d03e      	beq.n	800700c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0208 	orr.w	r2, r2, #8
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e035      	b.n	800700c <HAL_DMA_Start_IT+0x260>
 8006fa0:	40020010 	.word	0x40020010
 8006fa4:	40020028 	.word	0x40020028
 8006fa8:	40020040 	.word	0x40020040
 8006fac:	40020058 	.word	0x40020058
 8006fb0:	40020070 	.word	0x40020070
 8006fb4:	40020088 	.word	0x40020088
 8006fb8:	400200a0 	.word	0x400200a0
 8006fbc:	400200b8 	.word	0x400200b8
 8006fc0:	40020410 	.word	0x40020410
 8006fc4:	40020428 	.word	0x40020428
 8006fc8:	40020440 	.word	0x40020440
 8006fcc:	40020458 	.word	0x40020458
 8006fd0:	40020470 	.word	0x40020470
 8006fd4:	40020488 	.word	0x40020488
 8006fd8:	400204a0 	.word	0x400204a0
 8006fdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f023 020e 	bic.w	r2, r3, #14
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 020a 	orr.w	r2, r2, #10
 8006ff2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0204 	orr.w	r2, r2, #4
 800700a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a83      	ldr	r2, [pc, #524]	@ (8007220 <HAL_DMA_Start_IT+0x474>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d072      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a82      	ldr	r2, [pc, #520]	@ (8007224 <HAL_DMA_Start_IT+0x478>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d06d      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a80      	ldr	r2, [pc, #512]	@ (8007228 <HAL_DMA_Start_IT+0x47c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d068      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a7f      	ldr	r2, [pc, #508]	@ (800722c <HAL_DMA_Start_IT+0x480>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d063      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a7d      	ldr	r2, [pc, #500]	@ (8007230 <HAL_DMA_Start_IT+0x484>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d05e      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7c      	ldr	r2, [pc, #496]	@ (8007234 <HAL_DMA_Start_IT+0x488>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d059      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a7a      	ldr	r2, [pc, #488]	@ (8007238 <HAL_DMA_Start_IT+0x48c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d054      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a79      	ldr	r2, [pc, #484]	@ (800723c <HAL_DMA_Start_IT+0x490>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04f      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a77      	ldr	r2, [pc, #476]	@ (8007240 <HAL_DMA_Start_IT+0x494>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d04a      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a76      	ldr	r2, [pc, #472]	@ (8007244 <HAL_DMA_Start_IT+0x498>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d045      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a74      	ldr	r2, [pc, #464]	@ (8007248 <HAL_DMA_Start_IT+0x49c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d040      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a73      	ldr	r2, [pc, #460]	@ (800724c <HAL_DMA_Start_IT+0x4a0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d03b      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a71      	ldr	r2, [pc, #452]	@ (8007250 <HAL_DMA_Start_IT+0x4a4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d036      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a70      	ldr	r2, [pc, #448]	@ (8007254 <HAL_DMA_Start_IT+0x4a8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d031      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a6e      	ldr	r2, [pc, #440]	@ (8007258 <HAL_DMA_Start_IT+0x4ac>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02c      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a6d      	ldr	r2, [pc, #436]	@ (800725c <HAL_DMA_Start_IT+0x4b0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d027      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6b      	ldr	r2, [pc, #428]	@ (8007260 <HAL_DMA_Start_IT+0x4b4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6a      	ldr	r2, [pc, #424]	@ (8007264 <HAL_DMA_Start_IT+0x4b8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01d      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a68      	ldr	r2, [pc, #416]	@ (8007268 <HAL_DMA_Start_IT+0x4bc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a67      	ldr	r2, [pc, #412]	@ (800726c <HAL_DMA_Start_IT+0x4c0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a65      	ldr	r2, [pc, #404]	@ (8007270 <HAL_DMA_Start_IT+0x4c4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a64      	ldr	r2, [pc, #400]	@ (8007274 <HAL_DMA_Start_IT+0x4c8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a62      	ldr	r2, [pc, #392]	@ (8007278 <HAL_DMA_Start_IT+0x4cc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_DMA_Start_IT+0x350>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a61      	ldr	r2, [pc, #388]	@ (800727c <HAL_DMA_Start_IT+0x4d0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d101      	bne.n	8007100 <HAL_DMA_Start_IT+0x354>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <HAL_DMA_Start_IT+0x356>
 8007100:	2300      	movs	r3, #0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01a      	beq.n	800713c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007122:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800713a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a37      	ldr	r2, [pc, #220]	@ (8007220 <HAL_DMA_Start_IT+0x474>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04a      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a36      	ldr	r2, [pc, #216]	@ (8007224 <HAL_DMA_Start_IT+0x478>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d045      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a34      	ldr	r2, [pc, #208]	@ (8007228 <HAL_DMA_Start_IT+0x47c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d040      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a33      	ldr	r2, [pc, #204]	@ (800722c <HAL_DMA_Start_IT+0x480>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d03b      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a31      	ldr	r2, [pc, #196]	@ (8007230 <HAL_DMA_Start_IT+0x484>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d036      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a30      	ldr	r2, [pc, #192]	@ (8007234 <HAL_DMA_Start_IT+0x488>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d031      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2e      	ldr	r2, [pc, #184]	@ (8007238 <HAL_DMA_Start_IT+0x48c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d02c      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <HAL_DMA_Start_IT+0x490>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d027      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2b      	ldr	r2, [pc, #172]	@ (8007240 <HAL_DMA_Start_IT+0x494>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d022      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2a      	ldr	r2, [pc, #168]	@ (8007244 <HAL_DMA_Start_IT+0x498>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01d      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a28      	ldr	r2, [pc, #160]	@ (8007248 <HAL_DMA_Start_IT+0x49c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d018      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a27      	ldr	r2, [pc, #156]	@ (800724c <HAL_DMA_Start_IT+0x4a0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a25      	ldr	r2, [pc, #148]	@ (8007250 <HAL_DMA_Start_IT+0x4a4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a24      	ldr	r2, [pc, #144]	@ (8007254 <HAL_DMA_Start_IT+0x4a8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a22      	ldr	r2, [pc, #136]	@ (8007258 <HAL_DMA_Start_IT+0x4ac>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_DMA_Start_IT+0x430>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a21      	ldr	r2, [pc, #132]	@ (800725c <HAL_DMA_Start_IT+0x4b0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d108      	bne.n	80071ee <HAL_DMA_Start_IT+0x442>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e012      	b.n	8007214 <HAL_DMA_Start_IT+0x468>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e009      	b.n	8007214 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40020010 	.word	0x40020010
 8007224:	40020028 	.word	0x40020028
 8007228:	40020040 	.word	0x40020040
 800722c:	40020058 	.word	0x40020058
 8007230:	40020070 	.word	0x40020070
 8007234:	40020088 	.word	0x40020088
 8007238:	400200a0 	.word	0x400200a0
 800723c:	400200b8 	.word	0x400200b8
 8007240:	40020410 	.word	0x40020410
 8007244:	40020428 	.word	0x40020428
 8007248:	40020440 	.word	0x40020440
 800724c:	40020458 	.word	0x40020458
 8007250:	40020470 	.word	0x40020470
 8007254:	40020488 	.word	0x40020488
 8007258:	400204a0 	.word	0x400204a0
 800725c:	400204b8 	.word	0x400204b8
 8007260:	58025408 	.word	0x58025408
 8007264:	5802541c 	.word	0x5802541c
 8007268:	58025430 	.word	0x58025430
 800726c:	58025444 	.word	0x58025444
 8007270:	58025458 	.word	0x58025458
 8007274:	5802546c 	.word	0x5802546c
 8007278:	58025480 	.word	0x58025480
 800727c:	58025494 	.word	0x58025494

08007280 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800728c:	4b67      	ldr	r3, [pc, #412]	@ (800742c <HAL_DMA_IRQHandler+0x1ac>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a67      	ldr	r2, [pc, #412]	@ (8007430 <HAL_DMA_IRQHandler+0x1b0>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	0a9b      	lsrs	r3, r3, #10
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a5f      	ldr	r2, [pc, #380]	@ (8007434 <HAL_DMA_IRQHandler+0x1b4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d04a      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5d      	ldr	r2, [pc, #372]	@ (8007438 <HAL_DMA_IRQHandler+0x1b8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d045      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a5c      	ldr	r2, [pc, #368]	@ (800743c <HAL_DMA_IRQHandler+0x1bc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d040      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a5a      	ldr	r2, [pc, #360]	@ (8007440 <HAL_DMA_IRQHandler+0x1c0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d03b      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a59      	ldr	r2, [pc, #356]	@ (8007444 <HAL_DMA_IRQHandler+0x1c4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d036      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a57      	ldr	r2, [pc, #348]	@ (8007448 <HAL_DMA_IRQHandler+0x1c8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d031      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a56      	ldr	r2, [pc, #344]	@ (800744c <HAL_DMA_IRQHandler+0x1cc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d02c      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a54      	ldr	r2, [pc, #336]	@ (8007450 <HAL_DMA_IRQHandler+0x1d0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d027      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a53      	ldr	r2, [pc, #332]	@ (8007454 <HAL_DMA_IRQHandler+0x1d4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d022      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a51      	ldr	r2, [pc, #324]	@ (8007458 <HAL_DMA_IRQHandler+0x1d8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01d      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a50      	ldr	r2, [pc, #320]	@ (800745c <HAL_DMA_IRQHandler+0x1dc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a4e      	ldr	r2, [pc, #312]	@ (8007460 <HAL_DMA_IRQHandler+0x1e0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d013      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a4d      	ldr	r2, [pc, #308]	@ (8007464 <HAL_DMA_IRQHandler+0x1e4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a4b      	ldr	r2, [pc, #300]	@ (8007468 <HAL_DMA_IRQHandler+0x1e8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4a      	ldr	r2, [pc, #296]	@ (800746c <HAL_DMA_IRQHandler+0x1ec>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_DMA_IRQHandler+0xd2>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a48      	ldr	r2, [pc, #288]	@ (8007470 <HAL_DMA_IRQHandler+0x1f0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d101      	bne.n	8007356 <HAL_DMA_IRQHandler+0xd6>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <HAL_DMA_IRQHandler+0xd8>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 842b 	beq.w	8007bb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2208      	movs	r2, #8
 8007368:	409a      	lsls	r2, r3
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	4013      	ands	r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80a2 	beq.w	80074b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2e      	ldr	r2, [pc, #184]	@ (8007434 <HAL_DMA_IRQHandler+0x1b4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d04a      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2d      	ldr	r2, [pc, #180]	@ (8007438 <HAL_DMA_IRQHandler+0x1b8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d045      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2b      	ldr	r2, [pc, #172]	@ (800743c <HAL_DMA_IRQHandler+0x1bc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d040      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2a      	ldr	r2, [pc, #168]	@ (8007440 <HAL_DMA_IRQHandler+0x1c0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d03b      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a28      	ldr	r2, [pc, #160]	@ (8007444 <HAL_DMA_IRQHandler+0x1c4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d036      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a27      	ldr	r2, [pc, #156]	@ (8007448 <HAL_DMA_IRQHandler+0x1c8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d031      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a25      	ldr	r2, [pc, #148]	@ (800744c <HAL_DMA_IRQHandler+0x1cc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d02c      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a24      	ldr	r2, [pc, #144]	@ (8007450 <HAL_DMA_IRQHandler+0x1d0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d027      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a22      	ldr	r2, [pc, #136]	@ (8007454 <HAL_DMA_IRQHandler+0x1d4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d022      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a21      	ldr	r2, [pc, #132]	@ (8007458 <HAL_DMA_IRQHandler+0x1d8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d01d      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <HAL_DMA_IRQHandler+0x1dc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d018      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007460 <HAL_DMA_IRQHandler+0x1e0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <HAL_DMA_IRQHandler+0x1e4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00e      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <HAL_DMA_IRQHandler+0x1e8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <HAL_DMA_IRQHandler+0x1ec>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_DMA_IRQHandler+0x194>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a18      	ldr	r2, [pc, #96]	@ (8007470 <HAL_DMA_IRQHandler+0x1f0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d12f      	bne.n	8007474 <HAL_DMA_IRQHandler+0x1f4>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf14      	ite	ne
 8007422:	2301      	movne	r3, #1
 8007424:	2300      	moveq	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	e02e      	b.n	8007488 <HAL_DMA_IRQHandler+0x208>
 800742a:	bf00      	nop
 800742c:	24000000 	.word	0x24000000
 8007430:	1b4e81b5 	.word	0x1b4e81b5
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d015      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0204 	bic.w	r2, r2, #4
 800749a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	2208      	movs	r2, #8
 80074a6:	409a      	lsls	r2, r3
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	f043 0201 	orr.w	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	fa22 f303 	lsr.w	r3, r2, r3
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d06e      	beq.n	80075ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a69      	ldr	r2, [pc, #420]	@ (8007678 <HAL_DMA_IRQHandler+0x3f8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d04a      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a67      	ldr	r2, [pc, #412]	@ (800767c <HAL_DMA_IRQHandler+0x3fc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d045      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a66      	ldr	r2, [pc, #408]	@ (8007680 <HAL_DMA_IRQHandler+0x400>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d040      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a64      	ldr	r2, [pc, #400]	@ (8007684 <HAL_DMA_IRQHandler+0x404>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d03b      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a63      	ldr	r2, [pc, #396]	@ (8007688 <HAL_DMA_IRQHandler+0x408>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d036      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a61      	ldr	r2, [pc, #388]	@ (800768c <HAL_DMA_IRQHandler+0x40c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d031      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a60      	ldr	r2, [pc, #384]	@ (8007690 <HAL_DMA_IRQHandler+0x410>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d02c      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a5e      	ldr	r2, [pc, #376]	@ (8007694 <HAL_DMA_IRQHandler+0x414>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d027      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a5d      	ldr	r2, [pc, #372]	@ (8007698 <HAL_DMA_IRQHandler+0x418>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d022      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a5b      	ldr	r2, [pc, #364]	@ (800769c <HAL_DMA_IRQHandler+0x41c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01d      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a5a      	ldr	r2, [pc, #360]	@ (80076a0 <HAL_DMA_IRQHandler+0x420>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d018      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a58      	ldr	r2, [pc, #352]	@ (80076a4 <HAL_DMA_IRQHandler+0x424>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a57      	ldr	r2, [pc, #348]	@ (80076a8 <HAL_DMA_IRQHandler+0x428>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a55      	ldr	r2, [pc, #340]	@ (80076ac <HAL_DMA_IRQHandler+0x42c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a54      	ldr	r2, [pc, #336]	@ (80076b0 <HAL_DMA_IRQHandler+0x430>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_DMA_IRQHandler+0x2ee>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a52      	ldr	r2, [pc, #328]	@ (80076b4 <HAL_DMA_IRQHandler+0x434>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10a      	bne.n	8007584 <HAL_DMA_IRQHandler+0x304>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e003      	b.n	800758c <HAL_DMA_IRQHandler+0x30c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a4:	f043 0202 	orr.w	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2204      	movs	r2, #4
 80075b6:	409a      	lsls	r2, r3
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 808f 	beq.w	80076e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007678 <HAL_DMA_IRQHandler+0x3f8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d04a      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2a      	ldr	r2, [pc, #168]	@ (800767c <HAL_DMA_IRQHandler+0x3fc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d045      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a29      	ldr	r2, [pc, #164]	@ (8007680 <HAL_DMA_IRQHandler+0x400>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d040      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a27      	ldr	r2, [pc, #156]	@ (8007684 <HAL_DMA_IRQHandler+0x404>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d03b      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a26      	ldr	r2, [pc, #152]	@ (8007688 <HAL_DMA_IRQHandler+0x408>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d036      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a24      	ldr	r2, [pc, #144]	@ (800768c <HAL_DMA_IRQHandler+0x40c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d031      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a23      	ldr	r2, [pc, #140]	@ (8007690 <HAL_DMA_IRQHandler+0x410>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d02c      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a21      	ldr	r2, [pc, #132]	@ (8007694 <HAL_DMA_IRQHandler+0x414>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d027      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a20      	ldr	r2, [pc, #128]	@ (8007698 <HAL_DMA_IRQHandler+0x418>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d022      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1e      	ldr	r2, [pc, #120]	@ (800769c <HAL_DMA_IRQHandler+0x41c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1d      	ldr	r2, [pc, #116]	@ (80076a0 <HAL_DMA_IRQHandler+0x420>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d018      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <HAL_DMA_IRQHandler+0x424>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1a      	ldr	r2, [pc, #104]	@ (80076a8 <HAL_DMA_IRQHandler+0x428>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_DMA_IRQHandler+0x42c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <HAL_DMA_IRQHandler+0x430>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_DMA_IRQHandler+0x3e2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <HAL_DMA_IRQHandler+0x434>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d12a      	bne.n	80076b8 <HAL_DMA_IRQHandler+0x438>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf14      	ite	ne
 8007670:	2301      	movne	r3, #1
 8007672:	2300      	moveq	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e023      	b.n	80076c0 <HAL_DMA_IRQHandler+0x440>
 8007678:	40020010 	.word	0x40020010
 800767c:	40020028 	.word	0x40020028
 8007680:	40020040 	.word	0x40020040
 8007684:	40020058 	.word	0x40020058
 8007688:	40020070 	.word	0x40020070
 800768c:	40020088 	.word	0x40020088
 8007690:	400200a0 	.word	0x400200a0
 8007694:	400200b8 	.word	0x400200b8
 8007698:	40020410 	.word	0x40020410
 800769c:	40020428 	.word	0x40020428
 80076a0:	40020440 	.word	0x40020440
 80076a4:	40020458 	.word	0x40020458
 80076a8:	40020470 	.word	0x40020470
 80076ac:	40020488 	.word	0x40020488
 80076b0:	400204a0 	.word	0x400204a0
 80076b4:	400204b8 	.word	0x400204b8
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00d      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c8:	f003 031f 	and.w	r3, r3, #31
 80076cc:	2204      	movs	r2, #4
 80076ce:	409a      	lsls	r2, r3
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d8:	f043 0204 	orr.w	r2, r3, #4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2210      	movs	r2, #16
 80076ea:	409a      	lsls	r2, r3
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80a6 	beq.w	8007842 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a85      	ldr	r2, [pc, #532]	@ (8007910 <HAL_DMA_IRQHandler+0x690>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d04a      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a83      	ldr	r2, [pc, #524]	@ (8007914 <HAL_DMA_IRQHandler+0x694>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d045      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a82      	ldr	r2, [pc, #520]	@ (8007918 <HAL_DMA_IRQHandler+0x698>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d040      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a80      	ldr	r2, [pc, #512]	@ (800791c <HAL_DMA_IRQHandler+0x69c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d03b      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a7f      	ldr	r2, [pc, #508]	@ (8007920 <HAL_DMA_IRQHandler+0x6a0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d036      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a7d      	ldr	r2, [pc, #500]	@ (8007924 <HAL_DMA_IRQHandler+0x6a4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d031      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a7c      	ldr	r2, [pc, #496]	@ (8007928 <HAL_DMA_IRQHandler+0x6a8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d02c      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a7a      	ldr	r2, [pc, #488]	@ (800792c <HAL_DMA_IRQHandler+0x6ac>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d027      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a79      	ldr	r2, [pc, #484]	@ (8007930 <HAL_DMA_IRQHandler+0x6b0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d022      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a77      	ldr	r2, [pc, #476]	@ (8007934 <HAL_DMA_IRQHandler+0x6b4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01d      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a76      	ldr	r2, [pc, #472]	@ (8007938 <HAL_DMA_IRQHandler+0x6b8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a74      	ldr	r2, [pc, #464]	@ (800793c <HAL_DMA_IRQHandler+0x6bc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a73      	ldr	r2, [pc, #460]	@ (8007940 <HAL_DMA_IRQHandler+0x6c0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a71      	ldr	r2, [pc, #452]	@ (8007944 <HAL_DMA_IRQHandler+0x6c4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a70      	ldr	r2, [pc, #448]	@ (8007948 <HAL_DMA_IRQHandler+0x6c8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_DMA_IRQHandler+0x516>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a6e      	ldr	r2, [pc, #440]	@ (800794c <HAL_DMA_IRQHandler+0x6cc>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d10a      	bne.n	80077ac <HAL_DMA_IRQHandler+0x52c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e009      	b.n	80077c0 <HAL_DMA_IRQHandler+0x540>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bf14      	ite	ne
 80077ba:	2301      	movne	r3, #1
 80077bc:	2300      	moveq	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d03e      	beq.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2210      	movs	r2, #16
 80077ce:	409a      	lsls	r2, r3
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d108      	bne.n	8007802 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d024      	beq.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
 8007800:	e01f      	b.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01b      	beq.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	e016      	b.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d107      	bne.n	8007832 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0208 	bic.w	r2, r2, #8
 8007830:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	2220      	movs	r2, #32
 800784c:	409a      	lsls	r2, r3
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	4013      	ands	r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8110 	beq.w	8007a78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2c      	ldr	r2, [pc, #176]	@ (8007910 <HAL_DMA_IRQHandler+0x690>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d04a      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a2b      	ldr	r2, [pc, #172]	@ (8007914 <HAL_DMA_IRQHandler+0x694>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d045      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a29      	ldr	r2, [pc, #164]	@ (8007918 <HAL_DMA_IRQHandler+0x698>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d040      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a28      	ldr	r2, [pc, #160]	@ (800791c <HAL_DMA_IRQHandler+0x69c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d03b      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a26      	ldr	r2, [pc, #152]	@ (8007920 <HAL_DMA_IRQHandler+0x6a0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d036      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a25      	ldr	r2, [pc, #148]	@ (8007924 <HAL_DMA_IRQHandler+0x6a4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d031      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a23      	ldr	r2, [pc, #140]	@ (8007928 <HAL_DMA_IRQHandler+0x6a8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d02c      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a22      	ldr	r2, [pc, #136]	@ (800792c <HAL_DMA_IRQHandler+0x6ac>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d027      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a20      	ldr	r2, [pc, #128]	@ (8007930 <HAL_DMA_IRQHandler+0x6b0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d022      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007934 <HAL_DMA_IRQHandler+0x6b4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d01d      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <HAL_DMA_IRQHandler+0x6b8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d018      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1c      	ldr	r2, [pc, #112]	@ (800793c <HAL_DMA_IRQHandler+0x6bc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d013      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007940 <HAL_DMA_IRQHandler+0x6c0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00e      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a19      	ldr	r2, [pc, #100]	@ (8007944 <HAL_DMA_IRQHandler+0x6c4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d009      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a17      	ldr	r2, [pc, #92]	@ (8007948 <HAL_DMA_IRQHandler+0x6c8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d004      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x678>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a16      	ldr	r2, [pc, #88]	@ (800794c <HAL_DMA_IRQHandler+0x6cc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d12b      	bne.n	8007950 <HAL_DMA_IRQHandler+0x6d0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b00      	cmp	r3, #0
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e02a      	b.n	8007964 <HAL_DMA_IRQHandler+0x6e4>
 800790e:	bf00      	nop
 8007910:	40020010 	.word	0x40020010
 8007914:	40020028 	.word	0x40020028
 8007918:	40020040 	.word	0x40020040
 800791c:	40020058 	.word	0x40020058
 8007920:	40020070 	.word	0x40020070
 8007924:	40020088 	.word	0x40020088
 8007928:	400200a0 	.word	0x400200a0
 800792c:	400200b8 	.word	0x400200b8
 8007930:	40020410 	.word	0x40020410
 8007934:	40020428 	.word	0x40020428
 8007938:	40020440 	.word	0x40020440
 800793c:	40020458 	.word	0x40020458
 8007940:	40020470 	.word	0x40020470
 8007944:	40020488 	.word	0x40020488
 8007948:	400204a0 	.word	0x400204a0
 800794c:	400204b8 	.word	0x400204b8
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8087 	beq.w	8007a78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2220      	movs	r2, #32
 8007974:	409a      	lsls	r2, r3
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b04      	cmp	r3, #4
 8007984:	d139      	bne.n	80079fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0216 	bic.w	r2, r2, #22
 8007994:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_DMA_IRQHandler+0x736>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0208 	bic.w	r2, r2, #8
 80079c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	223f      	movs	r2, #63	@ 0x3f
 80079d0:	409a      	lsls	r2, r3
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 834a 	beq.w	8008084 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
          }
          return;
 80079f8:	e344      	b.n	8008084 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d018      	beq.n	8007a3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d108      	bne.n	8007a28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02c      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
 8007a26:	e027      	b.n	8007a78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d023      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	4798      	blx	r3
 8007a38:	e01e      	b.n	8007a78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10f      	bne.n	8007a68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0210 	bic.w	r2, r2, #16
 8007a56:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8306 	beq.w	800808e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8088 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a7a      	ldr	r2, [pc, #488]	@ (8007c88 <HAL_DMA_IRQHandler+0xa08>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d04a      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a79      	ldr	r2, [pc, #484]	@ (8007c8c <HAL_DMA_IRQHandler+0xa0c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d045      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a77      	ldr	r2, [pc, #476]	@ (8007c90 <HAL_DMA_IRQHandler+0xa10>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d040      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a76      	ldr	r2, [pc, #472]	@ (8007c94 <HAL_DMA_IRQHandler+0xa14>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d03b      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a74      	ldr	r2, [pc, #464]	@ (8007c98 <HAL_DMA_IRQHandler+0xa18>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d036      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a73      	ldr	r2, [pc, #460]	@ (8007c9c <HAL_DMA_IRQHandler+0xa1c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d031      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a71      	ldr	r2, [pc, #452]	@ (8007ca0 <HAL_DMA_IRQHandler+0xa20>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d02c      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a70      	ldr	r2, [pc, #448]	@ (8007ca4 <HAL_DMA_IRQHandler+0xa24>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d027      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a6e      	ldr	r2, [pc, #440]	@ (8007ca8 <HAL_DMA_IRQHandler+0xa28>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d022      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6d      	ldr	r2, [pc, #436]	@ (8007cac <HAL_DMA_IRQHandler+0xa2c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d01d      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a6b      	ldr	r2, [pc, #428]	@ (8007cb0 <HAL_DMA_IRQHandler+0xa30>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d018      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8007cb4 <HAL_DMA_IRQHandler+0xa34>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d013      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a68      	ldr	r2, [pc, #416]	@ (8007cb8 <HAL_DMA_IRQHandler+0xa38>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00e      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a67      	ldr	r2, [pc, #412]	@ (8007cbc <HAL_DMA_IRQHandler+0xa3c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d009      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a65      	ldr	r2, [pc, #404]	@ (8007cc0 <HAL_DMA_IRQHandler+0xa40>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x8b8>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a64      	ldr	r2, [pc, #400]	@ (8007cc4 <HAL_DMA_IRQHandler+0xa44>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d108      	bne.n	8007b4a <HAL_DMA_IRQHandler+0x8ca>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0201 	bic.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	e007      	b.n	8007b5a <HAL_DMA_IRQHandler+0x8da>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d307      	bcc.n	8007b76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f2      	bne.n	8007b5a <HAL_DMA_IRQHandler+0x8da>
 8007b74:	e000      	b.n	8007b78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b76:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2203      	movs	r2, #3
 8007b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007b8e:	e003      	b.n	8007b98 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8272 	beq.w	800808e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	e26c      	b.n	800808e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a43      	ldr	r2, [pc, #268]	@ (8007cc8 <HAL_DMA_IRQHandler+0xa48>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d022      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a42      	ldr	r2, [pc, #264]	@ (8007ccc <HAL_DMA_IRQHandler+0xa4c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d01d      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a40      	ldr	r2, [pc, #256]	@ (8007cd0 <HAL_DMA_IRQHandler+0xa50>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d018      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8007cd4 <HAL_DMA_IRQHandler+0xa54>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3d      	ldr	r2, [pc, #244]	@ (8007cd8 <HAL_DMA_IRQHandler+0xa58>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00e      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3c      	ldr	r2, [pc, #240]	@ (8007cdc <HAL_DMA_IRQHandler+0xa5c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d009      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ce0 <HAL_DMA_IRQHandler+0xa60>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x984>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a39      	ldr	r2, [pc, #228]	@ (8007ce4 <HAL_DMA_IRQHandler+0xa64>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d101      	bne.n	8007c08 <HAL_DMA_IRQHandler+0x988>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_DMA_IRQHandler+0x98a>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 823f 	beq.w	800808e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	2204      	movs	r2, #4
 8007c22:	409a      	lsls	r2, r3
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80cd 	beq.w	8007dc8 <HAL_DMA_IRQHandler+0xb48>
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80c7 	beq.w	8007dc8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3e:	f003 031f 	and.w	r3, r3, #31
 8007c42:	2204      	movs	r2, #4
 8007c44:	409a      	lsls	r2, r3
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d049      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8210 	beq.w	8008088 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c70:	e20a      	b.n	8008088 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8206 	beq.w	8008088 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c84:	e200      	b.n	8008088 <HAL_DMA_IRQHandler+0xe08>
 8007c86:	bf00      	nop
 8007c88:	40020010 	.word	0x40020010
 8007c8c:	40020028 	.word	0x40020028
 8007c90:	40020040 	.word	0x40020040
 8007c94:	40020058 	.word	0x40020058
 8007c98:	40020070 	.word	0x40020070
 8007c9c:	40020088 	.word	0x40020088
 8007ca0:	400200a0 	.word	0x400200a0
 8007ca4:	400200b8 	.word	0x400200b8
 8007ca8:	40020410 	.word	0x40020410
 8007cac:	40020428 	.word	0x40020428
 8007cb0:	40020440 	.word	0x40020440
 8007cb4:	40020458 	.word	0x40020458
 8007cb8:	40020470 	.word	0x40020470
 8007cbc:	40020488 	.word	0x40020488
 8007cc0:	400204a0 	.word	0x400204a0
 8007cc4:	400204b8 	.word	0x400204b8
 8007cc8:	58025408 	.word	0x58025408
 8007ccc:	5802541c 	.word	0x5802541c
 8007cd0:	58025430 	.word	0x58025430
 8007cd4:	58025444 	.word	0x58025444
 8007cd8:	58025458 	.word	0x58025458
 8007cdc:	5802546c 	.word	0x5802546c
 8007ce0:	58025480 	.word	0x58025480
 8007ce4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d160      	bne.n	8007db4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8007ef4 <HAL_DMA_IRQHandler+0xc74>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d04a      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a7d      	ldr	r2, [pc, #500]	@ (8007ef8 <HAL_DMA_IRQHandler+0xc78>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d045      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8007efc <HAL_DMA_IRQHandler+0xc7c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d040      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7a      	ldr	r2, [pc, #488]	@ (8007f00 <HAL_DMA_IRQHandler+0xc80>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d03b      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a79      	ldr	r2, [pc, #484]	@ (8007f04 <HAL_DMA_IRQHandler+0xc84>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d036      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a77      	ldr	r2, [pc, #476]	@ (8007f08 <HAL_DMA_IRQHandler+0xc88>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d031      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a76      	ldr	r2, [pc, #472]	@ (8007f0c <HAL_DMA_IRQHandler+0xc8c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d02c      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a74      	ldr	r2, [pc, #464]	@ (8007f10 <HAL_DMA_IRQHandler+0xc90>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d027      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a73      	ldr	r2, [pc, #460]	@ (8007f14 <HAL_DMA_IRQHandler+0xc94>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d022      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a71      	ldr	r2, [pc, #452]	@ (8007f18 <HAL_DMA_IRQHandler+0xc98>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01d      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a70      	ldr	r2, [pc, #448]	@ (8007f1c <HAL_DMA_IRQHandler+0xc9c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d018      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6e      	ldr	r2, [pc, #440]	@ (8007f20 <HAL_DMA_IRQHandler+0xca0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d013      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8007f24 <HAL_DMA_IRQHandler+0xca4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00e      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a6b      	ldr	r2, [pc, #428]	@ (8007f28 <HAL_DMA_IRQHandler+0xca8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6a      	ldr	r2, [pc, #424]	@ (8007f2c <HAL_DMA_IRQHandler+0xcac>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d004      	beq.n	8007d92 <HAL_DMA_IRQHandler+0xb12>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a68      	ldr	r2, [pc, #416]	@ (8007f30 <HAL_DMA_IRQHandler+0xcb0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d108      	bne.n	8007da4 <HAL_DMA_IRQHandler+0xb24>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0208 	bic.w	r2, r2, #8
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	e007      	b.n	8007db4 <HAL_DMA_IRQHandler+0xb34>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0204 	bic.w	r2, r2, #4
 8007db2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8165 	beq.w	8008088 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dc6:	e15f      	b.n	8008088 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80c5 	beq.w	8007f68 <HAL_DMA_IRQHandler+0xce8>
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80bf 	beq.w	8007f68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	2202      	movs	r2, #2
 8007df4:	409a      	lsls	r2, r3
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d018      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 813a 	beq.w	800808c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e20:	e134      	b.n	800808c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8130 	beq.w	800808c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e34:	e12a      	b.n	800808c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 8089 	bne.w	8007f54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef4 <HAL_DMA_IRQHandler+0xc74>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d04a      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a29      	ldr	r2, [pc, #164]	@ (8007ef8 <HAL_DMA_IRQHandler+0xc78>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d045      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a28      	ldr	r2, [pc, #160]	@ (8007efc <HAL_DMA_IRQHandler+0xc7c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d040      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <HAL_DMA_IRQHandler+0xc80>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d03b      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a25      	ldr	r2, [pc, #148]	@ (8007f04 <HAL_DMA_IRQHandler+0xc84>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d036      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a23      	ldr	r2, [pc, #140]	@ (8007f08 <HAL_DMA_IRQHandler+0xc88>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d031      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a22      	ldr	r2, [pc, #136]	@ (8007f0c <HAL_DMA_IRQHandler+0xc8c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d02c      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <HAL_DMA_IRQHandler+0xc90>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d027      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1f      	ldr	r2, [pc, #124]	@ (8007f14 <HAL_DMA_IRQHandler+0xc94>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d022      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <HAL_DMA_IRQHandler+0xc98>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01d      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8007f1c <HAL_DMA_IRQHandler+0xc9c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d018      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f20 <HAL_DMA_IRQHandler+0xca0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a19      	ldr	r2, [pc, #100]	@ (8007f24 <HAL_DMA_IRQHandler+0xca4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <HAL_DMA_IRQHandler+0xca8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d009      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <HAL_DMA_IRQHandler+0xcac>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d004      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xc62>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a14      	ldr	r2, [pc, #80]	@ (8007f30 <HAL_DMA_IRQHandler+0xcb0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d128      	bne.n	8007f34 <HAL_DMA_IRQHandler+0xcb4>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0214 	bic.w	r2, r2, #20
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	e027      	b.n	8007f44 <HAL_DMA_IRQHandler+0xcc4>
 8007ef4:	40020010 	.word	0x40020010
 8007ef8:	40020028 	.word	0x40020028
 8007efc:	40020040 	.word	0x40020040
 8007f00:	40020058 	.word	0x40020058
 8007f04:	40020070 	.word	0x40020070
 8007f08:	40020088 	.word	0x40020088
 8007f0c:	400200a0 	.word	0x400200a0
 8007f10:	400200b8 	.word	0x400200b8
 8007f14:	40020410 	.word	0x40020410
 8007f18:	40020428 	.word	0x40020428
 8007f1c:	40020440 	.word	0x40020440
 8007f20:	40020458 	.word	0x40020458
 8007f24:	40020470 	.word	0x40020470
 8007f28:	40020488 	.word	0x40020488
 8007f2c:	400204a0 	.word	0x400204a0
 8007f30:	400204b8 	.word	0x400204b8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 020a 	bic.w	r2, r2, #10
 8007f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8097 	beq.w	800808c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f66:	e091      	b.n	800808c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	2208      	movs	r2, #8
 8007f72:	409a      	lsls	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8088 	beq.w	800808e <HAL_DMA_IRQHandler+0xe0e>
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8082 	beq.w	800808e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a41      	ldr	r2, [pc, #260]	@ (8008094 <HAL_DMA_IRQHandler+0xe14>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d04a      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a3f      	ldr	r2, [pc, #252]	@ (8008098 <HAL_DMA_IRQHandler+0xe18>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d045      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800809c <HAL_DMA_IRQHandler+0xe1c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d040      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3c      	ldr	r2, [pc, #240]	@ (80080a0 <HAL_DMA_IRQHandler+0xe20>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d03b      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80080a4 <HAL_DMA_IRQHandler+0xe24>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d036      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a39      	ldr	r2, [pc, #228]	@ (80080a8 <HAL_DMA_IRQHandler+0xe28>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d031      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a38      	ldr	r2, [pc, #224]	@ (80080ac <HAL_DMA_IRQHandler+0xe2c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d02c      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a36      	ldr	r2, [pc, #216]	@ (80080b0 <HAL_DMA_IRQHandler+0xe30>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d027      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a35      	ldr	r2, [pc, #212]	@ (80080b4 <HAL_DMA_IRQHandler+0xe34>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d022      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a33      	ldr	r2, [pc, #204]	@ (80080b8 <HAL_DMA_IRQHandler+0xe38>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01d      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a32      	ldr	r2, [pc, #200]	@ (80080bc <HAL_DMA_IRQHandler+0xe3c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d018      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a30      	ldr	r2, [pc, #192]	@ (80080c0 <HAL_DMA_IRQHandler+0xe40>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d013      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2f      	ldr	r2, [pc, #188]	@ (80080c4 <HAL_DMA_IRQHandler+0xe44>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00e      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2d      	ldr	r2, [pc, #180]	@ (80080c8 <HAL_DMA_IRQHandler+0xe48>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d009      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2c      	ldr	r2, [pc, #176]	@ (80080cc <HAL_DMA_IRQHandler+0xe4c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d004      	beq.n	800802a <HAL_DMA_IRQHandler+0xdaa>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a2a      	ldr	r2, [pc, #168]	@ (80080d0 <HAL_DMA_IRQHandler+0xe50>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d108      	bne.n	800803c <HAL_DMA_IRQHandler+0xdbc>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 021c 	bic.w	r2, r2, #28
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	e007      	b.n	800804c <HAL_DMA_IRQHandler+0xdcc>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 020e 	bic.w	r2, r2, #14
 800804a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2201      	movs	r2, #1
 8008056:	409a      	lsls	r2, r3
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	e004      	b.n	800808e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008084:	bf00      	nop
 8008086:	e002      	b.n	800808e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008088:	bf00      	nop
 800808a:	e000      	b.n	800808e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800808e:	3728      	adds	r7, #40	@ 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40020010 	.word	0x40020010
 8008098:	40020028 	.word	0x40020028
 800809c:	40020040 	.word	0x40020040
 80080a0:	40020058 	.word	0x40020058
 80080a4:	40020070 	.word	0x40020070
 80080a8:	40020088 	.word	0x40020088
 80080ac:	400200a0 	.word	0x400200a0
 80080b0:	400200b8 	.word	0x400200b8
 80080b4:	40020410 	.word	0x40020410
 80080b8:	40020428 	.word	0x40020428
 80080bc:	40020440 	.word	0x40020440
 80080c0:	40020458 	.word	0x40020458
 80080c4:	40020470 	.word	0x40020470
 80080c8:	40020488 	.word	0x40020488
 80080cc:	400204a0 	.word	0x400204a0
 80080d0:	400204b8 	.word	0x400204b8

080080d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a7f      	ldr	r2, [pc, #508]	@ (80082f0 <DMA_SetConfig+0x21c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d072      	beq.n	80081de <DMA_SetConfig+0x10a>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a7d      	ldr	r2, [pc, #500]	@ (80082f4 <DMA_SetConfig+0x220>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d06d      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a7c      	ldr	r2, [pc, #496]	@ (80082f8 <DMA_SetConfig+0x224>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d068      	beq.n	80081de <DMA_SetConfig+0x10a>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a7a      	ldr	r2, [pc, #488]	@ (80082fc <DMA_SetConfig+0x228>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d063      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a79      	ldr	r2, [pc, #484]	@ (8008300 <DMA_SetConfig+0x22c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d05e      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a77      	ldr	r2, [pc, #476]	@ (8008304 <DMA_SetConfig+0x230>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d059      	beq.n	80081de <DMA_SetConfig+0x10a>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a76      	ldr	r2, [pc, #472]	@ (8008308 <DMA_SetConfig+0x234>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d054      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a74      	ldr	r2, [pc, #464]	@ (800830c <DMA_SetConfig+0x238>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d04f      	beq.n	80081de <DMA_SetConfig+0x10a>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a73      	ldr	r2, [pc, #460]	@ (8008310 <DMA_SetConfig+0x23c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d04a      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a71      	ldr	r2, [pc, #452]	@ (8008314 <DMA_SetConfig+0x240>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d045      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a70      	ldr	r2, [pc, #448]	@ (8008318 <DMA_SetConfig+0x244>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d040      	beq.n	80081de <DMA_SetConfig+0x10a>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a6e      	ldr	r2, [pc, #440]	@ (800831c <DMA_SetConfig+0x248>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d03b      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a6d      	ldr	r2, [pc, #436]	@ (8008320 <DMA_SetConfig+0x24c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d036      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a6b      	ldr	r2, [pc, #428]	@ (8008324 <DMA_SetConfig+0x250>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d031      	beq.n	80081de <DMA_SetConfig+0x10a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a6a      	ldr	r2, [pc, #424]	@ (8008328 <DMA_SetConfig+0x254>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d02c      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a68      	ldr	r2, [pc, #416]	@ (800832c <DMA_SetConfig+0x258>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d027      	beq.n	80081de <DMA_SetConfig+0x10a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a67      	ldr	r2, [pc, #412]	@ (8008330 <DMA_SetConfig+0x25c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d022      	beq.n	80081de <DMA_SetConfig+0x10a>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a65      	ldr	r2, [pc, #404]	@ (8008334 <DMA_SetConfig+0x260>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d01d      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a64      	ldr	r2, [pc, #400]	@ (8008338 <DMA_SetConfig+0x264>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d018      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a62      	ldr	r2, [pc, #392]	@ (800833c <DMA_SetConfig+0x268>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d013      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a61      	ldr	r2, [pc, #388]	@ (8008340 <DMA_SetConfig+0x26c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00e      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5f      	ldr	r2, [pc, #380]	@ (8008344 <DMA_SetConfig+0x270>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d009      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008348 <DMA_SetConfig+0x274>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d004      	beq.n	80081de <DMA_SetConfig+0x10a>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a5c      	ldr	r2, [pc, #368]	@ (800834c <DMA_SetConfig+0x278>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d101      	bne.n	80081e2 <DMA_SetConfig+0x10e>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <DMA_SetConfig+0x110>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00d      	beq.n	8008204 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80081f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008202:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a39      	ldr	r2, [pc, #228]	@ (80082f0 <DMA_SetConfig+0x21c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d04a      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a38      	ldr	r2, [pc, #224]	@ (80082f4 <DMA_SetConfig+0x220>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d045      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a36      	ldr	r2, [pc, #216]	@ (80082f8 <DMA_SetConfig+0x224>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d040      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a35      	ldr	r2, [pc, #212]	@ (80082fc <DMA_SetConfig+0x228>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d03b      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a33      	ldr	r2, [pc, #204]	@ (8008300 <DMA_SetConfig+0x22c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d036      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a32      	ldr	r2, [pc, #200]	@ (8008304 <DMA_SetConfig+0x230>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d031      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a30      	ldr	r2, [pc, #192]	@ (8008308 <DMA_SetConfig+0x234>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d02c      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a2f      	ldr	r2, [pc, #188]	@ (800830c <DMA_SetConfig+0x238>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d027      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a2d      	ldr	r2, [pc, #180]	@ (8008310 <DMA_SetConfig+0x23c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d022      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a2c      	ldr	r2, [pc, #176]	@ (8008314 <DMA_SetConfig+0x240>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d01d      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a2a      	ldr	r2, [pc, #168]	@ (8008318 <DMA_SetConfig+0x244>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d018      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a29      	ldr	r2, [pc, #164]	@ (800831c <DMA_SetConfig+0x248>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a27      	ldr	r2, [pc, #156]	@ (8008320 <DMA_SetConfig+0x24c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00e      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a26      	ldr	r2, [pc, #152]	@ (8008324 <DMA_SetConfig+0x250>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d009      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a24      	ldr	r2, [pc, #144]	@ (8008328 <DMA_SetConfig+0x254>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <DMA_SetConfig+0x1d0>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a23      	ldr	r2, [pc, #140]	@ (800832c <DMA_SetConfig+0x258>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d101      	bne.n	80082a8 <DMA_SetConfig+0x1d4>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <DMA_SetConfig+0x1d6>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d059      	beq.n	8008362 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	223f      	movs	r2, #63	@ 0x3f
 80082b8:	409a      	lsls	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80082cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b40      	cmp	r3, #64	@ 0x40
 80082dc:	d138      	bne.n	8008350 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082ee:	e086      	b.n	80083fe <DMA_SetConfig+0x32a>
 80082f0:	40020010 	.word	0x40020010
 80082f4:	40020028 	.word	0x40020028
 80082f8:	40020040 	.word	0x40020040
 80082fc:	40020058 	.word	0x40020058
 8008300:	40020070 	.word	0x40020070
 8008304:	40020088 	.word	0x40020088
 8008308:	400200a0 	.word	0x400200a0
 800830c:	400200b8 	.word	0x400200b8
 8008310:	40020410 	.word	0x40020410
 8008314:	40020428 	.word	0x40020428
 8008318:	40020440 	.word	0x40020440
 800831c:	40020458 	.word	0x40020458
 8008320:	40020470 	.word	0x40020470
 8008324:	40020488 	.word	0x40020488
 8008328:	400204a0 	.word	0x400204a0
 800832c:	400204b8 	.word	0x400204b8
 8008330:	58025408 	.word	0x58025408
 8008334:	5802541c 	.word	0x5802541c
 8008338:	58025430 	.word	0x58025430
 800833c:	58025444 	.word	0x58025444
 8008340:	58025458 	.word	0x58025458
 8008344:	5802546c 	.word	0x5802546c
 8008348:	58025480 	.word	0x58025480
 800834c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	60da      	str	r2, [r3, #12]
}
 8008360:	e04d      	b.n	80083fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a29      	ldr	r2, [pc, #164]	@ (800840c <DMA_SetConfig+0x338>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a27      	ldr	r2, [pc, #156]	@ (8008410 <DMA_SetConfig+0x33c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a26      	ldr	r2, [pc, #152]	@ (8008414 <DMA_SetConfig+0x340>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d018      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a24      	ldr	r2, [pc, #144]	@ (8008418 <DMA_SetConfig+0x344>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a23      	ldr	r2, [pc, #140]	@ (800841c <DMA_SetConfig+0x348>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a21      	ldr	r2, [pc, #132]	@ (8008420 <DMA_SetConfig+0x34c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a20      	ldr	r2, [pc, #128]	@ (8008424 <DMA_SetConfig+0x350>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <DMA_SetConfig+0x2de>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008428 <DMA_SetConfig+0x354>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d101      	bne.n	80083b6 <DMA_SetConfig+0x2e2>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <DMA_SetConfig+0x2e4>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d020      	beq.n	80083fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2201      	movs	r2, #1
 80083c6:	409a      	lsls	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d108      	bne.n	80083ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	60da      	str	r2, [r3, #12]
}
 80083ec:	e007      	b.n	80083fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	60da      	str	r2, [r3, #12]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	58025408 	.word	0x58025408
 8008410:	5802541c 	.word	0x5802541c
 8008414:	58025430 	.word	0x58025430
 8008418:	58025444 	.word	0x58025444
 800841c:	58025458 	.word	0x58025458
 8008420:	5802546c 	.word	0x5802546c
 8008424:	58025480 	.word	0x58025480
 8008428:	58025494 	.word	0x58025494

0800842c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a42      	ldr	r2, [pc, #264]	@ (8008544 <DMA_CalcBaseAndBitshift+0x118>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d04a      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a41      	ldr	r2, [pc, #260]	@ (8008548 <DMA_CalcBaseAndBitshift+0x11c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d045      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a3f      	ldr	r2, [pc, #252]	@ (800854c <DMA_CalcBaseAndBitshift+0x120>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d040      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a3e      	ldr	r2, [pc, #248]	@ (8008550 <DMA_CalcBaseAndBitshift+0x124>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d03b      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a3c      	ldr	r2, [pc, #240]	@ (8008554 <DMA_CalcBaseAndBitshift+0x128>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d036      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a3b      	ldr	r2, [pc, #236]	@ (8008558 <DMA_CalcBaseAndBitshift+0x12c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d031      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a39      	ldr	r2, [pc, #228]	@ (800855c <DMA_CalcBaseAndBitshift+0x130>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d02c      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a38      	ldr	r2, [pc, #224]	@ (8008560 <DMA_CalcBaseAndBitshift+0x134>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d027      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a36      	ldr	r2, [pc, #216]	@ (8008564 <DMA_CalcBaseAndBitshift+0x138>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d022      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a35      	ldr	r2, [pc, #212]	@ (8008568 <DMA_CalcBaseAndBitshift+0x13c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d01d      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a33      	ldr	r2, [pc, #204]	@ (800856c <DMA_CalcBaseAndBitshift+0x140>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d018      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a32      	ldr	r2, [pc, #200]	@ (8008570 <DMA_CalcBaseAndBitshift+0x144>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d013      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a30      	ldr	r2, [pc, #192]	@ (8008574 <DMA_CalcBaseAndBitshift+0x148>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00e      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008578 <DMA_CalcBaseAndBitshift+0x14c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d009      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2d      	ldr	r2, [pc, #180]	@ (800857c <DMA_CalcBaseAndBitshift+0x150>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d004      	beq.n	80084d4 <DMA_CalcBaseAndBitshift+0xa8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008580 <DMA_CalcBaseAndBitshift+0x154>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d101      	bne.n	80084d8 <DMA_CalcBaseAndBitshift+0xac>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <DMA_CalcBaseAndBitshift+0xae>
 80084d8:	2300      	movs	r3, #0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d024      	beq.n	8008528 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	3b10      	subs	r3, #16
 80084e6:	4a27      	ldr	r2, [pc, #156]	@ (8008584 <DMA_CalcBaseAndBitshift+0x158>)
 80084e8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	4a24      	ldr	r2, [pc, #144]	@ (8008588 <DMA_CalcBaseAndBitshift+0x15c>)
 80084f8:	5cd3      	ldrb	r3, [r2, r3]
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d908      	bls.n	8008518 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	4b1f      	ldr	r3, [pc, #124]	@ (800858c <DMA_CalcBaseAndBitshift+0x160>)
 800850e:	4013      	ands	r3, r2
 8008510:	1d1a      	adds	r2, r3, #4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	659a      	str	r2, [r3, #88]	@ 0x58
 8008516:	e00d      	b.n	8008534 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <DMA_CalcBaseAndBitshift+0x160>)
 8008520:	4013      	ands	r3, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6593      	str	r3, [r2, #88]	@ 0x58
 8008526:	e005      	b.n	8008534 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	40020010 	.word	0x40020010
 8008548:	40020028 	.word	0x40020028
 800854c:	40020040 	.word	0x40020040
 8008550:	40020058 	.word	0x40020058
 8008554:	40020070 	.word	0x40020070
 8008558:	40020088 	.word	0x40020088
 800855c:	400200a0 	.word	0x400200a0
 8008560:	400200b8 	.word	0x400200b8
 8008564:	40020410 	.word	0x40020410
 8008568:	40020428 	.word	0x40020428
 800856c:	40020440 	.word	0x40020440
 8008570:	40020458 	.word	0x40020458
 8008574:	40020470 	.word	0x40020470
 8008578:	40020488 	.word	0x40020488
 800857c:	400204a0 	.word	0x400204a0
 8008580:	400204b8 	.word	0x400204b8
 8008584:	aaaaaaab 	.word	0xaaaaaaab
 8008588:	08019894 	.word	0x08019894
 800858c:	fffffc00 	.word	0xfffffc00

08008590 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d120      	bne.n	80085e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d858      	bhi.n	800865e <DMA_CheckFifoParam+0xce>
 80085ac:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <DMA_CheckFifoParam+0x24>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	080085d7 	.word	0x080085d7
 80085bc:	080085c5 	.word	0x080085c5
 80085c0:	0800865f 	.word	0x0800865f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d048      	beq.n	8008662 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085d4:	e045      	b.n	8008662 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80085de:	d142      	bne.n	8008666 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085e4:	e03f      	b.n	8008666 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ee:	d123      	bne.n	8008638 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d838      	bhi.n	800866a <DMA_CheckFifoParam+0xda>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <DMA_CheckFifoParam+0x70>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008611 	.word	0x08008611
 8008604:	08008617 	.word	0x08008617
 8008608:	08008611 	.word	0x08008611
 800860c:	08008629 	.word	0x08008629
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
        break;
 8008614:	e030      	b.n	8008678 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d025      	beq.n	800866e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008626:	e022      	b.n	800866e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008630:	d11f      	bne.n	8008672 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008636:	e01c      	b.n	8008672 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	2b02      	cmp	r3, #2
 800863e:	d902      	bls.n	8008646 <DMA_CheckFifoParam+0xb6>
 8008640:	2b03      	cmp	r3, #3
 8008642:	d003      	beq.n	800864c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008644:	e018      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	73fb      	strb	r3, [r7, #15]
        break;
 800864a:	e015      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00e      	beq.n	8008676 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e00b      	b.n	8008676 <DMA_CheckFifoParam+0xe6>
        break;
 800865e:	bf00      	nop
 8008660:	e00a      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        break;
 8008662:	bf00      	nop
 8008664:	e008      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        break;
 8008666:	bf00      	nop
 8008668:	e006      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        break;
 800866a:	bf00      	nop
 800866c:	e004      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        break;
 800866e:	bf00      	nop
 8008670:	e002      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
        break;
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <DMA_CheckFifoParam+0xe8>
    break;
 8008676:	bf00      	nop
    }
  }

  return status;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a38      	ldr	r2, [pc, #224]	@ (800877c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a36      	ldr	r2, [pc, #216]	@ (8008780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a35      	ldr	r2, [pc, #212]	@ (8008784 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a33      	ldr	r2, [pc, #204]	@ (8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a32      	ldr	r2, [pc, #200]	@ (800878c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a30      	ldr	r2, [pc, #192]	@ (8008790 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a2f      	ldr	r2, [pc, #188]	@ (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d101      	bne.n	80086ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01a      	beq.n	8008726 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	3b08      	subs	r3, #8
 80086f8:	4a28      	ldr	r2, [pc, #160]	@ (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80086fa:	fba2 2303 	umull	r2, r3, r2, r3
 80086fe:	091b      	lsrs	r3, r3, #4
 8008700:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4b26      	ldr	r3, [pc, #152]	@ (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a24      	ldr	r2, [pc, #144]	@ (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008714:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2201      	movs	r2, #1
 800871e:	409a      	lsls	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008724:	e024      	b.n	8008770 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	3b10      	subs	r3, #16
 800872e:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008730:	fba2 2303 	umull	r2, r3, r2, r3
 8008734:	091b      	lsrs	r3, r3, #4
 8008736:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d806      	bhi.n	800874e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d902      	bls.n	800874e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3308      	adds	r3, #8
 800874c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4b18      	ldr	r3, [pc, #96]	@ (80087b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a16      	ldr	r2, [pc, #88]	@ (80087b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008760:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 031f 	and.w	r3, r3, #31
 8008768:	2201      	movs	r2, #1
 800876a:	409a      	lsls	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008770:	bf00      	nop
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	58025408 	.word	0x58025408
 8008780:	5802541c 	.word	0x5802541c
 8008784:	58025430 	.word	0x58025430
 8008788:	58025444 	.word	0x58025444
 800878c:	58025458 	.word	0x58025458
 8008790:	5802546c 	.word	0x5802546c
 8008794:	58025480 	.word	0x58025480
 8008798:	58025494 	.word	0x58025494
 800879c:	cccccccd 	.word	0xcccccccd
 80087a0:	16009600 	.word	0x16009600
 80087a4:	58025880 	.word	0x58025880
 80087a8:	aaaaaaab 	.word	0xaaaaaaab
 80087ac:	400204b8 	.word	0x400204b8
 80087b0:	4002040f 	.word	0x4002040f
 80087b4:	10008200 	.word	0x10008200
 80087b8:	40020880 	.word	0x40020880

080087bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04a      	beq.n	8008868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d847      	bhi.n	8008868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a25      	ldr	r2, [pc, #148]	@ (8008874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d022      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a24      	ldr	r2, [pc, #144]	@ (8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d01d      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a22      	ldr	r2, [pc, #136]	@ (800887c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d018      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1f      	ldr	r2, [pc, #124]	@ (8008884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00e      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1e      	ldr	r2, [pc, #120]	@ (8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d009      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1c      	ldr	r2, [pc, #112]	@ (800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d004      	beq.n	8008828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1b      	ldr	r2, [pc, #108]	@ (8008890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d101      	bne.n	800882c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800882c:	2300      	movs	r3, #0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4b17      	ldr	r3, [pc, #92]	@ (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	461a      	mov	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008844:	671a      	str	r2, [r3, #112]	@ 0x70
 8008846:	e009      	b.n	800885c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4b14      	ldr	r3, [pc, #80]	@ (800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	461a      	mov	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a11      	ldr	r2, [pc, #68]	@ (80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800885a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3b01      	subs	r3, #1
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	58025408 	.word	0x58025408
 8008878:	5802541c 	.word	0x5802541c
 800887c:	58025430 	.word	0x58025430
 8008880:	58025444 	.word	0x58025444
 8008884:	58025458 	.word	0x58025458
 8008888:	5802546c 	.word	0x5802546c
 800888c:	58025480 	.word	0x58025480
 8008890:	58025494 	.word	0x58025494
 8008894:	1600963f 	.word	0x1600963f
 8008898:	58025940 	.word	0x58025940
 800889c:	1000823f 	.word	0x1000823f
 80088a0:	40020940 	.word	0x40020940

080088a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	@ 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088b2:	4b86      	ldr	r3, [pc, #536]	@ (8008acc <HAL_GPIO_Init+0x228>)
 80088b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088b6:	e18c      	b.n	8008bd2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	2101      	movs	r1, #1
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	4013      	ands	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 817e 	beq.w	8008bcc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d005      	beq.n	80088e8 <HAL_GPIO_Init+0x44>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d130      	bne.n	800894a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	2203      	movs	r2, #3
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	4013      	ands	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4313      	orrs	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800891e:	2201      	movs	r2, #1
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	fa02 f303 	lsl.w	r3, r2, r3
 8008926:	43db      	mvns	r3, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	4013      	ands	r3, r2
 800892c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	f003 0201 	and.w	r2, r3, #1
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	4313      	orrs	r3, r2
 8008942:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b03      	cmp	r3, #3
 8008954:	d017      	beq.n	8008986 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	2203      	movs	r2, #3
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43db      	mvns	r3, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4013      	ands	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	fa02 f303 	lsl.w	r3, r2, r3
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	4313      	orrs	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d123      	bne.n	80089da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	08da      	lsrs	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3208      	adds	r2, #8
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	220f      	movs	r2, #15
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	43db      	mvns	r3, r3
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	4013      	ands	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	08da      	lsrs	r2, r3, #3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3208      	adds	r2, #8
 80089d4:	69b9      	ldr	r1, [r7, #24]
 80089d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	2203      	movs	r2, #3
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	43db      	mvns	r3, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f003 0203 	and.w	r2, r3, #3
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80d8 	beq.w	8008bcc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ad0 <HAL_GPIO_Init+0x22c>)
 8008a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a22:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad0 <HAL_GPIO_Init+0x22c>)
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008a2c:	4b28      	ldr	r3, [pc, #160]	@ (8008ad0 <HAL_GPIO_Init+0x22c>)
 8008a2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a3a:	4a26      	ldr	r2, [pc, #152]	@ (8008ad4 <HAL_GPIO_Init+0x230>)
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	089b      	lsrs	r3, r3, #2
 8008a40:	3302      	adds	r3, #2
 8008a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	220f      	movs	r2, #15
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43db      	mvns	r3, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad8 <HAL_GPIO_Init+0x234>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d04a      	beq.n	8008afc <HAL_GPIO_Init+0x258>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	@ (8008adc <HAL_GPIO_Init+0x238>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d02b      	beq.n	8008ac6 <HAL_GPIO_Init+0x222>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae0 <HAL_GPIO_Init+0x23c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d025      	beq.n	8008ac2 <HAL_GPIO_Init+0x21e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae4 <HAL_GPIO_Init+0x240>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d01f      	beq.n	8008abe <HAL_GPIO_Init+0x21a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a19      	ldr	r2, [pc, #100]	@ (8008ae8 <HAL_GPIO_Init+0x244>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d019      	beq.n	8008aba <HAL_GPIO_Init+0x216>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a18      	ldr	r2, [pc, #96]	@ (8008aec <HAL_GPIO_Init+0x248>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <HAL_GPIO_Init+0x212>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a17      	ldr	r2, [pc, #92]	@ (8008af0 <HAL_GPIO_Init+0x24c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00d      	beq.n	8008ab2 <HAL_GPIO_Init+0x20e>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a16      	ldr	r2, [pc, #88]	@ (8008af4 <HAL_GPIO_Init+0x250>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d007      	beq.n	8008aae <HAL_GPIO_Init+0x20a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	@ (8008af8 <HAL_GPIO_Init+0x254>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d101      	bne.n	8008aaa <HAL_GPIO_Init+0x206>
 8008aa6:	2309      	movs	r3, #9
 8008aa8:	e029      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008aaa:	230a      	movs	r3, #10
 8008aac:	e027      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008aae:	2307      	movs	r3, #7
 8008ab0:	e025      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008ab2:	2306      	movs	r3, #6
 8008ab4:	e023      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008ab6:	2305      	movs	r3, #5
 8008ab8:	e021      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008aba:	2304      	movs	r3, #4
 8008abc:	e01f      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e01d      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e01b      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e019      	b.n	8008afe <HAL_GPIO_Init+0x25a>
 8008aca:	bf00      	nop
 8008acc:	58000080 	.word	0x58000080
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	58000400 	.word	0x58000400
 8008ad8:	58020000 	.word	0x58020000
 8008adc:	58020400 	.word	0x58020400
 8008ae0:	58020800 	.word	0x58020800
 8008ae4:	58020c00 	.word	0x58020c00
 8008ae8:	58021000 	.word	0x58021000
 8008aec:	58021400 	.word	0x58021400
 8008af0:	58021800 	.word	0x58021800
 8008af4:	58021c00 	.word	0x58021c00
 8008af8:	58022400 	.word	0x58022400
 8008afc:	2300      	movs	r3, #0
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	f002 0203 	and.w	r2, r2, #3
 8008b04:	0092      	lsls	r2, r2, #2
 8008b06:	4093      	lsls	r3, r2
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b0e:	4938      	ldr	r1, [pc, #224]	@ (8008bf0 <HAL_GPIO_Init+0x34c>)
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	3302      	adds	r3, #2
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	43db      	mvns	r3, r3
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	43db      	mvns	r3, r3
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	43db      	mvns	r3, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4013      	ands	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	43db      	mvns	r3, r3
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f ae6b 	bne.w	80088b8 <HAL_GPIO_Init+0x14>
  }
}
 8008be2:	bf00      	nop
 8008be4:	bf00      	nop
 8008be6:	3724      	adds	r7, #36	@ 0x24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	58000400 	.word	0x58000400

08008bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	887b      	ldrh	r3, [r7, #2]
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
 8008c10:	e001      	b.n	8008c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
 8008c30:	4613      	mov	r3, r2
 8008c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c34:	787b      	ldrb	r3, [r7, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c3a:	887a      	ldrh	r2, [r7, #2]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c40:	e003      	b.n	8008c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	041a      	lsls	r2, r3, #16
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	619a      	str	r2, [r3, #24]
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e08b      	b.n	8008d82 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7f8 ff84 	bl	8001b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008ca8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008cb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d107      	bne.n	8008cd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cce:	609a      	str	r2, [r3, #8]
 8008cd0:	e006      	b.n	8008ce0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008cde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d108      	bne.n	8008cfa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cf6:	605a      	str	r2, [r3, #4]
 8008cf8:	e007      	b.n	8008d0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6859      	ldr	r1, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b1d      	ldr	r3, [pc, #116]	@ (8008d8c <HAL_I2C_Init+0x134>)
 8008d16:	430b      	orrs	r3, r1
 8008d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69d9      	ldr	r1, [r3, #28]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	02008000 	.word	0x02008000

08008d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d138      	bne.n	8008e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e032      	b.n	8008e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2224      	movs	r2, #36	@ 0x24
 8008dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0201 	bic.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6819      	ldr	r1, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e000      	b.n	8008e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e18:	2302      	movs	r3, #2
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d139      	bne.n	8008eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e033      	b.n	8008eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2224      	movs	r2, #36	@ 0x24
 8008e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e000      	b.n	8008eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008eb0:	2302      	movs	r3, #2
  }
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af02      	add	r7, sp, #8
 8008ec4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0fe      	b.n	80090ce <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f00b fa4f 	bl	8014388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f007 fe0b 	bl	8010b12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7c1a      	ldrb	r2, [r3, #16]
 8008f04:	f88d 2000 	strb.w	r2, [sp]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f0c:	f007 fcdc 	bl	80108c8 <USB_CoreInit>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e0d5      	b.n	80090ce <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2100      	movs	r1, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f007 fe03 	bl	8010b34 <USB_SetCurrentMode>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0c6      	b.n	80090ce <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
 8008f44:	e04a      	b.n	8008fdc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008f46:	7bfa      	ldrb	r2, [r7, #15]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	3315      	adds	r3, #21
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008f5a:	7bfa      	ldrb	r2, [r7, #15]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	3314      	adds	r3, #20
 8008f6a:	7bfa      	ldrb	r2, [r7, #15]
 8008f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008f6e:	7bfa      	ldrb	r2, [r7, #15]
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	b298      	uxth	r0, r3
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	332e      	adds	r3, #46	@ 0x2e
 8008f82:	4602      	mov	r2, r0
 8008f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f86:	7bfa      	ldrb	r2, [r7, #15]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	3318      	adds	r3, #24
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f9a:	7bfa      	ldrb	r2, [r7, #15]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	331c      	adds	r3, #28
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008fae:	7bfa      	ldrb	r2, [r7, #15]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	3320      	adds	r3, #32
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008fc2:	7bfa      	ldrb	r2, [r7, #15]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	3324      	adds	r3, #36	@ 0x24
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	791b      	ldrb	r3, [r3, #4]
 8008fe0:	7bfa      	ldrb	r2, [r7, #15]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d3af      	bcc.n	8008f46 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
 8008fea:	e044      	b.n	8009076 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008fec:	7bfa      	ldrb	r2, [r7, #15]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009002:	7bfa      	ldrb	r2, [r7, #15]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009014:	7bfa      	ldrb	r2, [r7, #15]
 8009016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800902e:	7bfa      	ldrb	r2, [r7, #15]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009044:	7bfa      	ldrb	r2, [r7, #15]
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	4613      	mov	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800905a:	7bfa      	ldrb	r2, [r7, #15]
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	3301      	adds	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	7bfa      	ldrb	r2, [r7, #15]
 800907c:	429a      	cmp	r2, r3
 800907e:	d3b5      	bcc.n	8008fec <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7c1a      	ldrb	r2, [r3, #16]
 8009088:	f88d 2000 	strb.w	r2, [sp]
 800908c:	3304      	adds	r3, #4
 800908e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009090:	f007 fd9c 	bl	8010bcc <USB_DevInit>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2202      	movs	r2, #2
 800909e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e013      	b.n	80090ce <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7b1b      	ldrb	r3, [r3, #12]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d102      	bne.n	80090c2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f96d 	bl	800a39c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f008 fddb 	bl	8011c82 <USB_DevDisconnect>

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_PCD_Start+0x1c>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e022      	b.n	8009138 <HAL_PCD_Start+0x62>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800910a:	2b01      	cmp	r3, #1
 800910c:	d105      	bne.n	800911a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009112:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f007 fce6 	bl	8010af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f008 fd89 	bl	8011c40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b08d      	sub	sp, #52	@ 0x34
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f008 fe47 	bl	8011dea <USB_GetMode>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 84b9 	bne.w	8009ad6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f008 fdab 	bl	8011cc4 <USB_ReadInterrupts>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 84af 	beq.w	8009ad4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	0a1b      	lsrs	r3, r3, #8
 8009180:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f008 fd98 	bl	8011cc4 <USB_ReadInterrupts>
 8009194:	4603      	mov	r3, r0
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b02      	cmp	r3, #2
 800919c:	d107      	bne.n	80091ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f002 0202 	and.w	r2, r2, #2
 80091ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f008 fd86 	bl	8011cc4 <USB_ReadInterrupts>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f003 0310 	and.w	r3, r3, #16
 80091be:	2b10      	cmp	r3, #16
 80091c0:	d161      	bne.n	8009286 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699a      	ldr	r2, [r3, #24]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0210 	bic.w	r2, r2, #16
 80091d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 020f 	and.w	r2, r3, #15
 80091de:	4613      	mov	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	0c5b      	lsrs	r3, r3, #17
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d124      	bne.n	8009248 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009204:	4013      	ands	r3, r2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d035      	beq.n	8009276 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	091b      	lsrs	r3, r3, #4
 8009212:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009218:	b29b      	uxth	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	6a38      	ldr	r0, [r7, #32]
 800921e:	f008 fbbd 	bl	801199c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800922e:	441a      	add	r2, r3
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	695a      	ldr	r2, [r3, #20]
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	091b      	lsrs	r3, r3, #4
 800923c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009240:	441a      	add	r2, r3
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	615a      	str	r2, [r3, #20]
 8009246:	e016      	b.n	8009276 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	0c5b      	lsrs	r3, r3, #17
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	2b06      	cmp	r3, #6
 8009252:	d110      	bne.n	8009276 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800925a:	2208      	movs	r2, #8
 800925c:	4619      	mov	r1, r3
 800925e:	6a38      	ldr	r0, [r7, #32]
 8009260:	f008 fb9c 	bl	801199c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	695a      	ldr	r2, [r3, #20]
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009270:	441a      	add	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	699a      	ldr	r2, [r3, #24]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 0210 	orr.w	r2, r2, #16
 8009284:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f008 fd1a 	bl	8011cc4 <USB_ReadInterrupts>
 8009290:	4603      	mov	r3, r0
 8009292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009296:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800929a:	f040 80a7 	bne.w	80093ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f008 fd1f 	bl	8011cea <USB_ReadDevAllOutEpInterrupt>
 80092ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80092ae:	e099      	b.n	80093e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 808e 	beq.w	80093d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f008 fd43 	bl	8011d52 <USB_ReadDevOutEPInterrupt>
 80092cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00c      	beq.n	80092f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e4:	461a      	mov	r2, r3
 80092e6:	2301      	movs	r3, #1
 80092e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80092ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fecf 	bl	800a090 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00c      	beq.n	8009316 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009308:	461a      	mov	r2, r3
 800930a:	2308      	movs	r3, #8
 800930c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800930e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 ffa5 	bl	800a260 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932c:	461a      	mov	r2, r3
 800932e:	2310      	movs	r3, #16
 8009330:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d030      	beq.n	800939e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009344:	2b80      	cmp	r3, #128	@ 0x80
 8009346:	d109      	bne.n	800935c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800935a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800935c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800935e:	4613      	mov	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	3304      	adds	r3, #4
 8009370:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	78db      	ldrb	r3, [r3, #3]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d108      	bne.n	800938c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f00b f8f6 	bl	8014578 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009398:	461a      	mov	r2, r3
 800939a:	2302      	movs	r3, #2
 800939c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d008      	beq.n	80093ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b4:	461a      	mov	r2, r3
 80093b6:	2320      	movs	r3, #32
 80093b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d009      	beq.n	80093d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d0:	461a      	mov	r2, r3
 80093d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	3301      	adds	r3, #1
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f47f af62 	bne.w	80092b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f008 fc67 	bl	8011cc4 <USB_ReadInterrupts>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009400:	f040 80db 	bne.w	80095ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f008 fc88 	bl	8011d1e <USB_ReadDevAllInEpInterrupt>
 800940e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009414:	e0cd      	b.n	80095b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80c2 	beq.w	80095a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009428:	b2d2      	uxtb	r2, r2
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f008 fcae 	bl	8011d8e <USB_ReadDevInEPInterrupt>
 8009432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d057      	beq.n	80094ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	f003 030f 	and.w	r3, r3, #15
 8009444:	2201      	movs	r2, #1
 8009446:	fa02 f303 	lsl.w	r3, r2, r3
 800944a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	43db      	mvns	r3, r3
 8009458:	69f9      	ldr	r1, [r7, #28]
 800945a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800945e:	4013      	ands	r3, r2
 8009460:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946e:	461a      	mov	r2, r3
 8009470:	2301      	movs	r3, #1
 8009472:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	799b      	ldrb	r3, [r3, #6]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d132      	bne.n	80094e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	3320      	adds	r3, #32
 800948c:	6819      	ldr	r1, [r3, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009492:	4613      	mov	r3, r2
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4403      	add	r3, r0
 800949c:	331c      	adds	r3, #28
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4419      	add	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a6:	4613      	mov	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4403      	add	r3, r0
 80094b0:	3320      	adds	r3, #32
 80094b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d113      	bne.n	80094e2 <HAL_PCD_IRQHandler+0x3a2>
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3324      	adds	r3, #36	@ 0x24
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d108      	bne.n	80094e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094da:	461a      	mov	r2, r3
 80094dc:	2101      	movs	r1, #1
 80094de:	f008 fcb7 	bl	8011e50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f00a ffc0 	bl	801446e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d008      	beq.n	800950a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009504:	461a      	mov	r2, r3
 8009506:	2308      	movs	r3, #8
 8009508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d008      	beq.n	8009526 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009520:	461a      	mov	r2, r3
 8009522:	2310      	movs	r3, #16
 8009524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953c:	461a      	mov	r2, r3
 800953e:	2340      	movs	r3, #64	@ 0x40
 8009540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d023      	beq.n	8009594 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800954c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800954e:	6a38      	ldr	r0, [r7, #32]
 8009550:	f007 fc9a 	bl	8010e88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009556:	4613      	mov	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	3310      	adds	r3, #16
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	3304      	adds	r3, #4
 8009566:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	78db      	ldrb	r3, [r3, #3]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d108      	bne.n	8009582 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2200      	movs	r2, #0
 8009574:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009578:	b2db      	uxtb	r3, r3
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f00b f80d 	bl	801459c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800958e:	461a      	mov	r2, r3
 8009590:	2302      	movs	r3, #2
 8009592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800959e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fce8 	bl	8009f76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	3301      	adds	r3, #1
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f47f af2e 	bne.w	8009416 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f008 fb80 	bl	8011cc4 <USB_ReadInterrupts>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095ce:	d122      	bne.n	8009616 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d108      	bne.n	8009600 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80095f6:	2100      	movs	r1, #0
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fef3 	bl	800a3e4 <HAL_PCDEx_LPM_Callback>
 80095fe:	e002      	b.n	8009606 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f00a ffab 	bl	801455c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695a      	ldr	r2, [r3, #20]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f008 fb52 	bl	8011cc4 <USB_ReadInterrupts>
 8009620:	4603      	mov	r3, r0
 8009622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800962a:	d112      	bne.n	8009652 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b01      	cmp	r3, #1
 800963a:	d102      	bne.n	8009642 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f00a ff67 	bl	8014510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009650:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f008 fb34 	bl	8011cc4 <USB_ReadInterrupts>
 800965c:	4603      	mov	r3, r0
 800965e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009666:	d121      	bne.n	80096ac <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009676:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800967e:	2b00      	cmp	r3, #0
 8009680:	d111      	bne.n	80096a6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009690:	089b      	lsrs	r3, r3, #2
 8009692:	f003 020f 	and.w	r2, r3, #15
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800969c:	2101      	movs	r1, #1
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fea0 	bl	800a3e4 <HAL_PCDEx_LPM_Callback>
 80096a4:	e002      	b.n	80096ac <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f00a ff32 	bl	8014510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f008 fb07 	bl	8011cc4 <USB_ReadInterrupts>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c0:	f040 80b7 	bne.w	8009832 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096d2:	f023 0301 	bic.w	r3, r3, #1
 80096d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2110      	movs	r1, #16
 80096de:	4618      	mov	r0, r3
 80096e0:	f007 fbd2 	bl	8010e88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096e4:	2300      	movs	r3, #0
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096e8:	e046      	b.n	8009778 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80096ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f6:	461a      	mov	r2, r3
 80096f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80096fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800970e:	0151      	lsls	r1, r2, #5
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	440a      	add	r2, r1
 8009714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009718:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800971c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800971e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972a:	461a      	mov	r2, r3
 800972c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009730:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	69fa      	ldr	r2, [r7, #28]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800974c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800976c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009770:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	3301      	adds	r3, #1
 8009776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	791b      	ldrb	r3, [r3, #4]
 800977c:	461a      	mov	r2, r3
 800977e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009780:	4293      	cmp	r3, r2
 8009782:	d3b2      	bcc.n	80096ea <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	69fa      	ldr	r2, [r7, #28]
 800978e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009792:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009796:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7bdb      	ldrb	r3, [r3, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d016      	beq.n	80097ce <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097b0:	f043 030b 	orr.w	r3, r3, #11
 80097b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097c0:	69fa      	ldr	r2, [r7, #28]
 80097c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097c6:	f043 030b 	orr.w	r3, r3, #11
 80097ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80097cc:	e015      	b.n	80097fa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d4:	695a      	ldr	r2, [r3, #20]
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097dc:	4619      	mov	r1, r3
 80097de:	f242 032b 	movw	r3, #8235	@ 0x202b
 80097e2:	4313      	orrs	r3, r2
 80097e4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097f4:	f043 030b 	orr.w	r3, r3, #11
 80097f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009808:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800980c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800981c:	461a      	mov	r2, r3
 800981e:	f008 fb17 	bl	8011e50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f008 fa44 	bl	8011cc4 <USB_ReadInterrupts>
 800983c:	4603      	mov	r3, r0
 800983e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009846:	d123      	bne.n	8009890 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f008 fadb 	bl	8011e08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f007 fb8f 	bl	8010f7a <USB_GetDevSpeed>
 800985c:	4603      	mov	r3, r0
 800985e:	461a      	mov	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681c      	ldr	r4, [r3, #0]
 8009868:	f001 fd1c 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800986c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009872:	461a      	mov	r2, r3
 8009874:	4620      	mov	r0, r4
 8009876:	f007 f899 	bl	80109ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f00a fe1f 	bl	80144be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695a      	ldr	r2, [r3, #20]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800988e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4618      	mov	r0, r3
 8009896:	f008 fa15 	bl	8011cc4 <USB_ReadInterrupts>
 800989a:	4603      	mov	r3, r0
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d10a      	bne.n	80098ba <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f00a fdfc 	bl	80144a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695a      	ldr	r2, [r3, #20]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f002 0208 	and.w	r2, r2, #8
 80098b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f008 fa00 	bl	8011cc4 <USB_ReadInterrupts>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ca:	2b80      	cmp	r3, #128	@ 0x80
 80098cc:	d123      	bne.n	8009916 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098da:	2301      	movs	r3, #1
 80098dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80098de:	e014      	b.n	800990a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e4:	4613      	mov	r3, r2
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d105      	bne.n	8009904 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fb08 	bl	8009f14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	3301      	adds	r3, #1
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	791b      	ldrb	r3, [r3, #4]
 800990e:	461a      	mov	r2, r3
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	4293      	cmp	r3, r2
 8009914:	d3e4      	bcc.n	80098e0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f008 f9d2 	bl	8011cc4 <USB_ReadInterrupts>
 8009920:	4603      	mov	r3, r0
 8009922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800992a:	d13c      	bne.n	80099a6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009930:	e02b      	b.n	800998a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009946:	4613      	mov	r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	3318      	adds	r3, #24
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d115      	bne.n	8009984 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009958:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800995a:	2b00      	cmp	r3, #0
 800995c:	da12      	bge.n	8009984 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009962:	4613      	mov	r3, r2
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	3317      	adds	r3, #23
 800996e:	2201      	movs	r2, #1
 8009970:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	b2db      	uxtb	r3, r3
 8009976:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800997a:	b2db      	uxtb	r3, r3
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fac8 	bl	8009f14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	3301      	adds	r3, #1
 8009988:	627b      	str	r3, [r7, #36]	@ 0x24
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	791b      	ldrb	r3, [r3, #4]
 800998e:	461a      	mov	r2, r3
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	4293      	cmp	r3, r2
 8009994:	d3cd      	bcc.n	8009932 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	695a      	ldr	r2, [r3, #20]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80099a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f008 f98a 	bl	8011cc4 <USB_ReadInterrupts>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ba:	d156      	bne.n	8009a6a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099bc:	2301      	movs	r3, #1
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
 80099c0:	e045      	b.n	8009a4e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d6:	4613      	mov	r3, r2
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d12e      	bne.n	8009a48 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80099ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da2b      	bge.n	8009a48 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80099fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d121      	bne.n	8009a48 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009a16:	2201      	movs	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a44:	6053      	str	r3, [r2, #4]
            break;
 8009a46:	e008      	b.n	8009a5a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	791b      	ldrb	r3, [r3, #4]
 8009a52:	461a      	mov	r2, r3
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d3b3      	bcc.n	80099c2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695a      	ldr	r2, [r3, #20]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f008 f928 	bl	8011cc4 <USB_ReadInterrupts>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7e:	d10a      	bne.n	8009a96 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f00a fd9d 	bl	80145c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695a      	ldr	r2, [r3, #20]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f008 f912 	bl	8011cc4 <USB_ReadInterrupts>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d115      	bne.n	8009ad6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f00a fd8d 	bl	80145dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6859      	ldr	r1, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	e000      	b.n	8009ad6 <HAL_PCD_IRQHandler+0x996>
      return;
 8009ad4:	bf00      	nop
    }
  }
}
 8009ad6:	3734      	adds	r7, #52	@ 0x34
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd90      	pop	{r4, r7, pc}

08009adc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d101      	bne.n	8009af6 <HAL_PCD_SetAddress+0x1a>
 8009af2:	2302      	movs	r3, #2
 8009af4:	e012      	b.n	8009b1c <HAL_PCD_SetAddress+0x40>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	78fa      	ldrb	r2, [r7, #3]
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f008 f871 	bl	8011bf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	70fb      	strb	r3, [r7, #3]
 8009b36:	460b      	mov	r3, r1
 8009b38:	803b      	strh	r3, [r7, #0]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da0f      	bge.n	8009b6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	f003 020f 	and.w	r2, r3, #15
 8009b50:	4613      	mov	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	3310      	adds	r3, #16
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	3304      	adds	r3, #4
 8009b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	705a      	strb	r2, [r3, #1]
 8009b68:	e00f      	b.n	8009b8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	f003 020f 	and.w	r2, r3, #15
 8009b70:	4613      	mov	r3, r2
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	4413      	add	r3, r2
 8009b80:	3304      	adds	r3, #4
 8009b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009b96:	883a      	ldrh	r2, [r7, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	78ba      	ldrb	r2, [r7, #2]
 8009ba0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	785b      	ldrb	r3, [r3, #1]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d004      	beq.n	8009bb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009bb4:	78bb      	ldrb	r3, [r7, #2]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d102      	bne.n	8009bc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_PCD_EP_Open+0xaa>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e00e      	b.n	8009bec <HAL_PCD_EP_Open+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f007 f9f1 	bl	8010fc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009bea:	7afb      	ldrb	r3, [r7, #11]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da0f      	bge.n	8009c28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	f003 020f 	and.w	r2, r3, #15
 8009c0e:	4613      	mov	r3, r2
 8009c10:	00db      	lsls	r3, r3, #3
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	3310      	adds	r3, #16
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	705a      	strb	r2, [r3, #1]
 8009c26:	e00f      	b.n	8009c48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	f003 020f 	and.w	r2, r3, #15
 8009c2e:	4613      	mov	r3, r2
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3304      	adds	r3, #4
 8009c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <HAL_PCD_EP_Close+0x6e>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e00e      	b.n	8009c80 <HAL_PCD_EP_Close+0x8c>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f007 fa2f 	bl	80110d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	460b      	mov	r3, r1
 8009c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	3304      	adds	r3, #4
 8009cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cca:	7afb      	ldrb	r3, [r7, #11]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	799b      	ldrb	r3, [r3, #6]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d102      	bne.n	8009ce4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6818      	ldr	r0, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	799b      	ldrb	r3, [r3, #6]
 8009cec:	461a      	mov	r2, r3
 8009cee:	6979      	ldr	r1, [r7, #20]
 8009cf0:	f007 facc 	bl	801128c <USB_EPStartXfer>

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 020f 	and.w	r2, r3, #15
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	4613      	mov	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	4413      	add	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	440b      	add	r3, r1
 8009d1c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009d20:	681b      	ldr	r3, [r3, #0]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d3e:	7afb      	ldrb	r3, [r7, #11]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	3304      	adds	r3, #4
 8009d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2200      	movs	r2, #0
 8009d66:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	f003 030f 	and.w	r3, r3, #15
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	799b      	ldrb	r3, [r3, #6]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d102      	bne.n	8009d88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	799b      	ldrb	r3, [r3, #6]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6979      	ldr	r1, [r7, #20]
 8009d94:	f007 fa7a 	bl	801128c <USB_EPStartXfer>

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	f003 030f 	and.w	r3, r3, #15
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	7912      	ldrb	r2, [r2, #4]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e04f      	b.n	8009e60 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	da0f      	bge.n	8009de8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	f003 020f 	and.w	r2, r3, #15
 8009dce:	4613      	mov	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	3310      	adds	r3, #16
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	4413      	add	r3, r2
 8009ddc:	3304      	adds	r3, #4
 8009dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2201      	movs	r2, #1
 8009de4:	705a      	strb	r2, [r3, #1]
 8009de6:	e00d      	b.n	8009e04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009de8:	78fa      	ldrb	r2, [r7, #3]
 8009dea:	4613      	mov	r3, r2
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2201      	movs	r2, #1
 8009e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	f003 030f 	and.w	r3, r3, #15
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_PCD_EP_SetStall+0x82>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e01d      	b.n	8009e60 <HAL_PCD_EP_SetStall+0xbe>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68f9      	ldr	r1, [r7, #12]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f007 fe0a 	bl	8011a4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	f003 030f 	and.w	r3, r3, #15
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7999      	ldrb	r1, [r3, #6]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e50:	461a      	mov	r2, r3
 8009e52:	f007 fffd 	bl	8011e50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	7912      	ldrb	r2, [r2, #4]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d901      	bls.n	8009e86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e042      	b.n	8009f0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da0f      	bge.n	8009eae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	f003 020f 	and.w	r2, r3, #15
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	3310      	adds	r3, #16
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	705a      	strb	r2, [r3, #1]
 8009eac:	e00f      	b.n	8009ece <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	f003 020f 	and.w	r2, r3, #15
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <HAL_PCD_EP_ClrStall+0x86>
 8009eea:	2302      	movs	r3, #2
 8009eec:	e00e      	b.n	8009f0c <HAL_PCD_EP_ClrStall+0xa4>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68f9      	ldr	r1, [r7, #12]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f007 fe13 	bl	8011b28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	da0c      	bge.n	8009f42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	f003 020f 	and.w	r2, r3, #15
 8009f2e:	4613      	mov	r3, r2
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	3310      	adds	r3, #16
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	e00c      	b.n	8009f5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	f003 020f 	and.w	r2, r3, #15
 8009f48:	4613      	mov	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	4413      	add	r3, r2
 8009f58:	3304      	adds	r3, #4
 8009f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f007 fc32 	bl	80117cc <USB_EPStopXfer>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b08a      	sub	sp, #40	@ 0x28
 8009f7a:	af02      	add	r7, sp, #8
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	3310      	adds	r3, #16
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	4413      	add	r3, r2
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	695a      	ldr	r2, [r3, #20]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d901      	bls.n	8009fae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e06b      	b.n	800a086 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d902      	bls.n	8009fca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	3303      	adds	r3, #3
 8009fce:	089b      	lsrs	r3, r3, #2
 8009fd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009fd2:	e02a      	b.n	800a02a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d902      	bls.n	8009ff0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	3303      	adds	r3, #3
 8009ff4:	089b      	lsrs	r3, r3, #2
 8009ff6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68d9      	ldr	r1, [r3, #12]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4603      	mov	r3, r0
 800a00c:	6978      	ldr	r0, [r7, #20]
 800a00e:	f007 fc87 	bl	8011920 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	695a      	ldr	r2, [r3, #20]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d809      	bhi.n	800a054 <PCD_WriteEmptyTxFifo+0xde>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	695a      	ldr	r2, [r3, #20]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d203      	bcs.n	800a054 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1bf      	bne.n	8009fd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d811      	bhi.n	800a084 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	2201      	movs	r2, #1
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	43db      	mvns	r3, r3
 800a07a:	6939      	ldr	r1, [r7, #16]
 800a07c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a080:	4013      	ands	r3, r2
 800a082:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3720      	adds	r7, #32
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	333c      	adds	r3, #60	@ 0x3c
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	799b      	ldrb	r3, [r3, #6]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d17b      	bne.n	800a1be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d015      	beq.n	800a0fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	4a61      	ldr	r2, [pc, #388]	@ (800a258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	f240 80b9 	bls.w	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80b3 	beq.w	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0f8:	6093      	str	r3, [r2, #8]
 800a0fa:	e0a7      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b00      	cmp	r3, #0
 800a104:	d009      	beq.n	800a11a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a112:	461a      	mov	r2, r3
 800a114:	2320      	movs	r3, #32
 800a116:	6093      	str	r3, [r2, #8]
 800a118:	e098      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	f040 8093 	bne.w	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	4a4b      	ldr	r2, [pc, #300]	@ (800a258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d90f      	bls.n	800a14e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00a      	beq.n	800a14e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a144:	461a      	mov	r2, r3
 800a146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a14a:	6093      	str	r3, [r2, #8]
 800a14c:	e07e      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	4613      	mov	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	4413      	add	r3, r2
 800a160:	3304      	adds	r3, #4
 800a162:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a1a      	ldr	r2, [r3, #32]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	0159      	lsls	r1, r3, #5
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	440b      	add	r3, r1
 800a170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a17a:	1ad2      	subs	r2, r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d114      	bne.n	800a1b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a198:	461a      	mov	r2, r3
 800a19a:	2101      	movs	r1, #1
 800a19c:	f007 fe58 	bl	8011e50 <USB_EP0_OutStart>
 800a1a0:	e006      	b.n	800a1b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	441a      	add	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f00a f93e 	bl	8014438 <HAL_PCD_DataOutStageCallback>
 800a1bc:	e046      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	4a26      	ldr	r2, [pc, #152]	@ (800a25c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d124      	bne.n	800a210 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1e2:	6093      	str	r3, [r2, #8]
 800a1e4:	e032      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d008      	beq.n	800a202 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2320      	movs	r3, #32
 800a200:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f00a f915 	bl	8014438 <HAL_PCD_DataOutStageCallback>
 800a20e:	e01d      	b.n	800a24c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d114      	bne.n	800a240 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	4613      	mov	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	4413      	add	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	440b      	add	r3, r1
 800a224:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d108      	bne.n	800a240 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a238:	461a      	mov	r2, r3
 800a23a:	2100      	movs	r1, #0
 800a23c:	f007 fe08 	bl	8011e50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f00a f8f6 	bl	8014438 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	4f54300a 	.word	0x4f54300a
 800a25c:	4f54310a 	.word	0x4f54310a

0800a260 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	333c      	adds	r3, #60	@ 0x3c
 800a278:	3304      	adds	r3, #4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4a15      	ldr	r2, [pc, #84]	@ (800a2e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d90e      	bls.n	800a2b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f00a f8ad 	bl	8014414 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a2e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d90c      	bls.n	800a2dc <PCD_EP_OutSetupPacket_int+0x7c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	799b      	ldrb	r3, [r3, #6]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d108      	bne.n	800a2dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	f007 fdba 	bl	8011e50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	4f54300a 	.word	0x4f54300a

0800a2ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d107      	bne.n	800a31a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a30a:	883b      	ldrh	r3, [r7, #0]
 800a30c:	0419      	lsls	r1, r3, #16
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	430a      	orrs	r2, r1
 800a316:	629a      	str	r2, [r3, #40]	@ 0x28
 800a318:	e028      	b.n	800a36c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	0c1b      	lsrs	r3, r3, #16
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	4413      	add	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
 800a32c:	e00d      	b.n	800a34a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	3340      	adds	r3, #64	@ 0x40
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	4413      	add	r3, r2
 800a342:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	3301      	adds	r3, #1
 800a348:	73fb      	strb	r3, [r7, #15]
 800a34a:	7bfa      	ldrb	r2, [r7, #15]
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	3b01      	subs	r3, #1
 800a350:	429a      	cmp	r2, r3
 800a352:	d3ec      	bcc.n	800a32e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a354:	883b      	ldrh	r3, [r7, #0]
 800a356:	0418      	lsls	r0, r3, #16
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6819      	ldr	r1, [r3, #0]
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	3b01      	subs	r3, #1
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	4302      	orrs	r2, r0
 800a364:	3340      	adds	r3, #64	@ 0x40
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	887a      	ldrh	r2, [r7, #2]
 800a38c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3ca:	4b05      	ldr	r3, [pc, #20]	@ (800a3e0 <HAL_PCDEx_ActivateLPM+0x44>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	10000003 	.word	0x10000003

0800a3e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a404:	4b19      	ldr	r3, [pc, #100]	@ (800a46c <HAL_PWREx_ConfigSupply+0x70>)
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d00a      	beq.n	800a426 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a410:	4b16      	ldr	r3, [pc, #88]	@ (800a46c <HAL_PWREx_ConfigSupply+0x70>)
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d001      	beq.n	800a422 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e01f      	b.n	800a462 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	e01d      	b.n	800a462 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a426:	4b11      	ldr	r3, [pc, #68]	@ (800a46c <HAL_PWREx_ConfigSupply+0x70>)
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f023 0207 	bic.w	r2, r3, #7
 800a42e:	490f      	ldr	r1, [pc, #60]	@ (800a46c <HAL_PWREx_ConfigSupply+0x70>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4313      	orrs	r3, r2
 800a434:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a436:	f7fa f97d 	bl	8004734 <HAL_GetTick>
 800a43a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a43c:	e009      	b.n	800a452 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a43e:	f7fa f979 	bl	8004734 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a44c:	d901      	bls.n	800a452 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e007      	b.n	800a462 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a452:	4b06      	ldr	r3, [pc, #24]	@ (800a46c <HAL_PWREx_ConfigSupply+0x70>)
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a45a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a45e:	d1ee      	bne.n	800a43e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024800 	.word	0x58024800

0800a470 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a474:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	4a04      	ldr	r2, [pc, #16]	@ (800a48c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a47a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a47e:	60d3      	str	r3, [r2, #12]
}
 800a480:	bf00      	nop
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	58024800 	.word	0x58024800

0800a490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08c      	sub	sp, #48	@ 0x30
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e3c8      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 8087 	beq.w	800a5be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4b0:	4b88      	ldr	r3, [pc, #544]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4ba:	4b86      	ldr	r3, [pc, #536]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	2b10      	cmp	r3, #16
 800a4c4:	d007      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x46>
 800a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c8:	2b18      	cmp	r3, #24
 800a4ca:	d110      	bne.n	800a4ee <HAL_RCC_OscConfig+0x5e>
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d10b      	bne.n	800a4ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4d6:	4b7f      	ldr	r3, [pc, #508]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d06c      	beq.n	800a5bc <HAL_RCC_OscConfig+0x12c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d168      	bne.n	800a5bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e3a2      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4f6:	d106      	bne.n	800a506 <HAL_RCC_OscConfig+0x76>
 800a4f8:	4b76      	ldr	r3, [pc, #472]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a75      	ldr	r2, [pc, #468]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a4fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	e02e      	b.n	800a564 <HAL_RCC_OscConfig+0xd4>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10c      	bne.n	800a528 <HAL_RCC_OscConfig+0x98>
 800a50e:	4b71      	ldr	r3, [pc, #452]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a70      	ldr	r2, [pc, #448]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a6d      	ldr	r2, [pc, #436]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a520:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	e01d      	b.n	800a564 <HAL_RCC_OscConfig+0xd4>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a530:	d10c      	bne.n	800a54c <HAL_RCC_OscConfig+0xbc>
 800a532:	4b68      	ldr	r3, [pc, #416]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a67      	ldr	r2, [pc, #412]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	4b65      	ldr	r3, [pc, #404]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a64      	ldr	r2, [pc, #400]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	e00b      	b.n	800a564 <HAL_RCC_OscConfig+0xd4>
 800a54c:	4b61      	ldr	r3, [pc, #388]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a60      	ldr	r2, [pc, #384]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	4b5e      	ldr	r3, [pc, #376]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a5d      	ldr	r2, [pc, #372]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a55e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d013      	beq.n	800a594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a56c:	f7fa f8e2 	bl	8004734 <HAL_GetTick>
 800a570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a572:	e008      	b.n	800a586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a574:	f7fa f8de 	bl	8004734 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	2b64      	cmp	r3, #100	@ 0x64
 800a580:	d901      	bls.n	800a586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e356      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a586:	4b53      	ldr	r3, [pc, #332]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f0      	beq.n	800a574 <HAL_RCC_OscConfig+0xe4>
 800a592:	e014      	b.n	800a5be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7fa f8ce 	bl	8004734 <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a59c:	f7fa f8ca 	bl	8004734 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b64      	cmp	r3, #100	@ 0x64
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e342      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5ae:	4b49      	ldr	r3, [pc, #292]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x10c>
 800a5ba:	e000      	b.n	800a5be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 808c 	beq.w	800a6e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5cc:	4b41      	ldr	r3, [pc, #260]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a5dc:	6a3b      	ldr	r3, [r7, #32]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d007      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x162>
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	d137      	bne.n	800a658 <HAL_RCC_OscConfig+0x1c8>
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d132      	bne.n	800a658 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5f2:	4b38      	ldr	r3, [pc, #224]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0304 	and.w	r3, r3, #4
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <HAL_RCC_OscConfig+0x17a>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e314      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a60a:	4b32      	ldr	r3, [pc, #200]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f023 0219 	bic.w	r2, r3, #25
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	492f      	ldr	r1, [pc, #188]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61c:	f7fa f88a 	bl	8004734 <HAL_GetTick>
 800a620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a624:	f7fa f886 	bl	8004734 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e2fe      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a636:	4b27      	ldr	r3, [pc, #156]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0f0      	beq.n	800a624 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a642:	4b24      	ldr	r3, [pc, #144]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	061b      	lsls	r3, r3, #24
 800a650:	4920      	ldr	r1, [pc, #128]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a652:	4313      	orrs	r3, r2
 800a654:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a656:	e045      	b.n	800a6e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d026      	beq.n	800a6ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a660:	4b1c      	ldr	r3, [pc, #112]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f023 0219 	bic.w	r2, r3, #25
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	4919      	ldr	r1, [pc, #100]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a672:	f7fa f85f 	bl	8004734 <HAL_GetTick>
 800a676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a678:	e008      	b.n	800a68c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a67a:	f7fa f85b 	bl	8004734 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b02      	cmp	r3, #2
 800a686:	d901      	bls.n	800a68c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e2d3      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a68c:	4b11      	ldr	r3, [pc, #68]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0f0      	beq.n	800a67a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a698:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	061b      	lsls	r3, r3, #24
 800a6a6:	490b      	ldr	r1, [pc, #44]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	604b      	str	r3, [r1, #4]
 800a6ac:	e01a      	b.n	800a6e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ae:	4b09      	ldr	r3, [pc, #36]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a08      	ldr	r2, [pc, #32]	@ (800a6d4 <HAL_RCC_OscConfig+0x244>)
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ba:	f7fa f83b 	bl	8004734 <HAL_GetTick>
 800a6be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6c0:	e00a      	b.n	800a6d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6c2:	f7fa f837 	bl	8004734 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d903      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e2af      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
 800a6d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6d8:	4b96      	ldr	r3, [pc, #600]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1ee      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d06a      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6f0:	4b90      	ldr	r3, [pc, #576]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6fa:	4b8e      	ldr	r3, [pc, #568]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b08      	cmp	r3, #8
 800a704:	d007      	beq.n	800a716 <HAL_RCC_OscConfig+0x286>
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b18      	cmp	r3, #24
 800a70a:	d11b      	bne.n	800a744 <HAL_RCC_OscConfig+0x2b4>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b01      	cmp	r3, #1
 800a714:	d116      	bne.n	800a744 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a716:	4b87      	ldr	r3, [pc, #540]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <HAL_RCC_OscConfig+0x29e>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	2b80      	cmp	r3, #128	@ 0x80
 800a728:	d001      	beq.n	800a72e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e282      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a72e:	4b81      	ldr	r3, [pc, #516]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	061b      	lsls	r3, r3, #24
 800a73c:	497d      	ldr	r1, [pc, #500]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a742:	e040      	b.n	800a7c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d023      	beq.n	800a794 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a74c:	4b79      	ldr	r3, [pc, #484]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a78      	ldr	r2, [pc, #480]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a758:	f7f9 ffec 	bl	8004734 <HAL_GetTick>
 800a75c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a75e:	e008      	b.n	800a772 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a760:	f7f9 ffe8 	bl	8004734 <HAL_GetTick>
 800a764:	4602      	mov	r2, r0
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d901      	bls.n	800a772 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e260      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a772:	4b70      	ldr	r3, [pc, #448]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f0      	beq.n	800a760 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a77e:	4b6d      	ldr	r3, [pc, #436]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	061b      	lsls	r3, r3, #24
 800a78c:	4969      	ldr	r1, [pc, #420]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a78e:	4313      	orrs	r3, r2
 800a790:	60cb      	str	r3, [r1, #12]
 800a792:	e018      	b.n	800a7c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a794:	4b67      	ldr	r3, [pc, #412]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a66      	ldr	r2, [pc, #408]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a79a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a79e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a0:	f7f9 ffc8 	bl	8004734 <HAL_GetTick>
 800a7a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7a6:	e008      	b.n	800a7ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a7a8:	f7f9 ffc4 	bl	8004734 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d901      	bls.n	800a7ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e23c      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7ba:	4b5e      	ldr	r3, [pc, #376]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1f0      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0308 	and.w	r3, r3, #8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d036      	beq.n	800a840 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d019      	beq.n	800a80e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7da:	4b56      	ldr	r3, [pc, #344]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	4a55      	ldr	r2, [pc, #340]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a7e0:	f043 0301 	orr.w	r3, r3, #1
 800a7e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e6:	f7f9 ffa5 	bl	8004734 <HAL_GetTick>
 800a7ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7ec:	e008      	b.n	800a800 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7ee:	f7f9 ffa1 	bl	8004734 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d901      	bls.n	800a800 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e219      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a800:	4b4c      	ldr	r3, [pc, #304]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f0      	beq.n	800a7ee <HAL_RCC_OscConfig+0x35e>
 800a80c:	e018      	b.n	800a840 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a80e:	4b49      	ldr	r3, [pc, #292]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a812:	4a48      	ldr	r2, [pc, #288]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81a:	f7f9 ff8b 	bl	8004734 <HAL_GetTick>
 800a81e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a820:	e008      	b.n	800a834 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a822:	f7f9 ff87 	bl	8004734 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d901      	bls.n	800a834 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e1ff      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a834:	4b3f      	ldr	r3, [pc, #252]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a838:	f003 0302 	and.w	r3, r3, #2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1f0      	bne.n	800a822 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0320 	and.w	r3, r3, #32
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d036      	beq.n	800a8ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d019      	beq.n	800a888 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a854:	4b37      	ldr	r3, [pc, #220]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a36      	ldr	r2, [pc, #216]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a85a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a85e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a860:	f7f9 ff68 	bl	8004734 <HAL_GetTick>
 800a864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a866:	e008      	b.n	800a87a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a868:	f7f9 ff64 	bl	8004734 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d901      	bls.n	800a87a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e1dc      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a87a:	4b2e      	ldr	r3, [pc, #184]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0f0      	beq.n	800a868 <HAL_RCC_OscConfig+0x3d8>
 800a886:	e018      	b.n	800a8ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a888:	4b2a      	ldr	r3, [pc, #168]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a29      	ldr	r2, [pc, #164]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a88e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a892:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a894:	f7f9 ff4e 	bl	8004734 <HAL_GetTick>
 800a898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a89c:	f7f9 ff4a 	bl	8004734 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e1c2      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8ae:	4b21      	ldr	r3, [pc, #132]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f0      	bne.n	800a89c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0304 	and.w	r3, r3, #4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 8086 	beq.w	800a9d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a938 <HAL_RCC_OscConfig+0x4a8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a1a      	ldr	r2, [pc, #104]	@ (800a938 <HAL_RCC_OscConfig+0x4a8>)
 800a8ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8d4:	f7f9 ff2e 	bl	8004734 <HAL_GetTick>
 800a8d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8da:	e008      	b.n	800a8ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8dc:	f7f9 ff2a 	bl	8004734 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	2b64      	cmp	r3, #100	@ 0x64
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e1a2      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8ee:	4b12      	ldr	r3, [pc, #72]	@ (800a938 <HAL_RCC_OscConfig+0x4a8>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0f0      	beq.n	800a8dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d106      	bne.n	800a910 <HAL_RCC_OscConfig+0x480>
 800a902:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a906:	4a0b      	ldr	r2, [pc, #44]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a90e:	e032      	b.n	800a976 <HAL_RCC_OscConfig+0x4e6>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d111      	bne.n	800a93c <HAL_RCC_OscConfig+0x4ac>
 800a918:	4b06      	ldr	r3, [pc, #24]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a91a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a91c:	4a05      	ldr	r2, [pc, #20]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a91e:	f023 0301 	bic.w	r3, r3, #1
 800a922:	6713      	str	r3, [r2, #112]	@ 0x70
 800a924:	4b03      	ldr	r3, [pc, #12]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a928:	4a02      	ldr	r2, [pc, #8]	@ (800a934 <HAL_RCC_OscConfig+0x4a4>)
 800a92a:	f023 0304 	bic.w	r3, r3, #4
 800a92e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a930:	e021      	b.n	800a976 <HAL_RCC_OscConfig+0x4e6>
 800a932:	bf00      	nop
 800a934:	58024400 	.word	0x58024400
 800a938:	58024800 	.word	0x58024800
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	2b05      	cmp	r3, #5
 800a942:	d10c      	bne.n	800a95e <HAL_RCC_OscConfig+0x4ce>
 800a944:	4b83      	ldr	r3, [pc, #524]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a948:	4a82      	ldr	r2, [pc, #520]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a94a:	f043 0304 	orr.w	r3, r3, #4
 800a94e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a950:	4b80      	ldr	r3, [pc, #512]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a954:	4a7f      	ldr	r2, [pc, #508]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a95c:	e00b      	b.n	800a976 <HAL_RCC_OscConfig+0x4e6>
 800a95e:	4b7d      	ldr	r3, [pc, #500]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a962:	4a7c      	ldr	r2, [pc, #496]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a964:	f023 0301 	bic.w	r3, r3, #1
 800a968:	6713      	str	r3, [r2, #112]	@ 0x70
 800a96a:	4b7a      	ldr	r3, [pc, #488]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a96c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a96e:	4a79      	ldr	r2, [pc, #484]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a970:	f023 0304 	bic.w	r3, r3, #4
 800a974:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d015      	beq.n	800a9aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a97e:	f7f9 fed9 	bl	8004734 <HAL_GetTick>
 800a982:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a984:	e00a      	b.n	800a99c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a986:	f7f9 fed5 	bl	8004734 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a994:	4293      	cmp	r3, r2
 800a996:	d901      	bls.n	800a99c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e14b      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a99c:	4b6d      	ldr	r3, [pc, #436]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0ee      	beq.n	800a986 <HAL_RCC_OscConfig+0x4f6>
 800a9a8:	e014      	b.n	800a9d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9aa:	f7f9 fec3 	bl	8004734 <HAL_GetTick>
 800a9ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9b0:	e00a      	b.n	800a9c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9b2:	f7f9 febf 	bl	8004734 <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d901      	bls.n	800a9c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e135      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9c8:	4b62      	ldr	r3, [pc, #392]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a9ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1ee      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 812a 	beq.w	800ac32 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a9de:	4b5d      	ldr	r3, [pc, #372]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9e6:	2b18      	cmp	r3, #24
 800a9e8:	f000 80ba 	beq.w	800ab60 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	f040 8095 	bne.w	800ab20 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9f6:	4b57      	ldr	r3, [pc, #348]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a56      	ldr	r2, [pc, #344]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800a9fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa02:	f7f9 fe97 	bl	8004734 <HAL_GetTick>
 800aa06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa08:	e008      	b.n	800aa1c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa0a:	f7f9 fe93 	bl	8004734 <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d901      	bls.n	800aa1c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e10b      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa1c:	4b4d      	ldr	r3, [pc, #308]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f0      	bne.n	800aa0a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa28:	4b4a      	ldr	r3, [pc, #296]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa2c:	4b4a      	ldr	r3, [pc, #296]	@ (800ab58 <HAL_RCC_OscConfig+0x6c8>)
 800aa2e:	4013      	ands	r3, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aa38:	0112      	lsls	r2, r2, #4
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	4945      	ldr	r1, [pc, #276]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa46:	3b01      	subs	r3, #1
 800aa48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa50:	3b01      	subs	r3, #1
 800aa52:	025b      	lsls	r3, r3, #9
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	431a      	orrs	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	041b      	lsls	r3, r3, #16
 800aa60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	061b      	lsls	r3, r3, #24
 800aa6e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa72:	4938      	ldr	r1, [pc, #224]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aa78:	4b36      	ldr	r3, [pc, #216]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7c:	4a35      	ldr	r2, [pc, #212]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa7e:	f023 0301 	bic.w	r3, r3, #1
 800aa82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa84:	4b33      	ldr	r3, [pc, #204]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa88:	4b34      	ldr	r3, [pc, #208]	@ (800ab5c <HAL_RCC_OscConfig+0x6cc>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aa90:	00d2      	lsls	r2, r2, #3
 800aa92:	4930      	ldr	r1, [pc, #192]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa94:	4313      	orrs	r3, r2
 800aa96:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aa98:	4b2e      	ldr	r3, [pc, #184]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aa9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9c:	f023 020c 	bic.w	r2, r3, #12
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	492b      	ldr	r1, [pc, #172]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aaaa:	4b2a      	ldr	r3, [pc, #168]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aaac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaae:	f023 0202 	bic.w	r2, r3, #2
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab6:	4927      	ldr	r1, [pc, #156]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aab8:	4313      	orrs	r3, r2
 800aaba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aabc:	4b25      	ldr	r3, [pc, #148]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	4a24      	ldr	r2, [pc, #144]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac8:	4b22      	ldr	r3, [pc, #136]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aaca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aacc:	4a21      	ldr	r2, [pc, #132]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aad4:	4b1f      	ldr	r3, [pc, #124]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad8:	4a1e      	ldr	r2, [pc, #120]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aada:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aae0:	4b1c      	ldr	r3, [pc, #112]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaec:	4b19      	ldr	r3, [pc, #100]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a18      	ldr	r2, [pc, #96]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800aaf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aaf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf8:	f7f9 fe1c 	bl	8004734 <HAL_GetTick>
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab00:	f7f9 fe18 	bl	8004734 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e090      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab12:	4b10      	ldr	r3, [pc, #64]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <HAL_RCC_OscConfig+0x670>
 800ab1e:	e088      	b.n	800ac32 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab20:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a0b      	ldr	r2, [pc, #44]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800ab26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2c:	f7f9 fe02 	bl	8004734 <HAL_GetTick>
 800ab30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab32:	e008      	b.n	800ab46 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab34:	f7f9 fdfe 	bl	8004734 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d901      	bls.n	800ab46 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e076      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab46:	4b03      	ldr	r3, [pc, #12]	@ (800ab54 <HAL_RCC_OscConfig+0x6c4>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f0      	bne.n	800ab34 <HAL_RCC_OscConfig+0x6a4>
 800ab52:	e06e      	b.n	800ac32 <HAL_RCC_OscConfig+0x7a2>
 800ab54:	58024400 	.word	0x58024400
 800ab58:	fffffc0c 	.word	0xfffffc0c
 800ab5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab60:	4b36      	ldr	r3, [pc, #216]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ab62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab66:	4b35      	ldr	r3, [pc, #212]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ab68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d031      	beq.n	800abd8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f003 0203 	and.w	r2, r3, #3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d12a      	bne.n	800abd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	091b      	lsrs	r3, r3, #4
 800ab86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d122      	bne.n	800abd8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d11a      	bne.n	800abd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	0a5b      	lsrs	r3, r3, #9
 800aba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d111      	bne.n	800abd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	0c1b      	lsrs	r3, r3, #16
 800abb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d108      	bne.n	800abd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	0e1b      	lsrs	r3, r3, #24
 800abca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d001      	beq.n	800abdc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e02b      	b.n	800ac34 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800abdc:	4b17      	ldr	r3, [pc, #92]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800abde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abe6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d01f      	beq.n	800ac32 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800abf2:	4b12      	ldr	r3, [pc, #72]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf6:	4a11      	ldr	r2, [pc, #68]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800abf8:	f023 0301 	bic.w	r3, r3, #1
 800abfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abfe:	f7f9 fd99 	bl	8004734 <HAL_GetTick>
 800ac02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac04:	bf00      	nop
 800ac06:	f7f9 fd95 	bl	8004734 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d0f9      	beq.n	800ac06 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac12:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ac14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac16:	4b0a      	ldr	r3, [pc, #40]	@ (800ac40 <HAL_RCC_OscConfig+0x7b0>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac1e:	00d2      	lsls	r2, r2, #3
 800ac20:	4906      	ldr	r1, [pc, #24]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac26:	4b05      	ldr	r3, [pc, #20]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ac28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2a:	4a04      	ldr	r2, [pc, #16]	@ (800ac3c <HAL_RCC_OscConfig+0x7ac>)
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3730      	adds	r7, #48	@ 0x30
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	ffff0007 	.word	0xffff0007

0800ac44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e19c      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac58:	4b8a      	ldr	r3, [pc, #552]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d910      	bls.n	800ac88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac66:	4b87      	ldr	r3, [pc, #540]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f023 020f 	bic.w	r2, r3, #15
 800ac6e:	4985      	ldr	r1, [pc, #532]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac76:	4b83      	ldr	r3, [pc, #524]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 030f 	and.w	r3, r3, #15
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d001      	beq.n	800ac88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e184      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d010      	beq.n	800acb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	691a      	ldr	r2, [r3, #16]
 800ac98:	4b7b      	ldr	r3, [pc, #492]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d908      	bls.n	800acb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aca4:	4b78      	ldr	r3, [pc, #480]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	4975      	ldr	r1, [pc, #468]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0308 	and.w	r3, r3, #8
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d010      	beq.n	800ace4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	695a      	ldr	r2, [r3, #20]
 800acc6:	4b70      	ldr	r3, [pc, #448]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800acce:	429a      	cmp	r2, r3
 800acd0:	d908      	bls.n	800ace4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800acd2:	4b6d      	ldr	r3, [pc, #436]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	496a      	ldr	r1, [pc, #424]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0310 	and.w	r3, r3, #16
 800acec:	2b00      	cmp	r3, #0
 800acee:	d010      	beq.n	800ad12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	699a      	ldr	r2, [r3, #24]
 800acf4:	4b64      	ldr	r3, [pc, #400]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d908      	bls.n	800ad12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad00:	4b61      	ldr	r3, [pc, #388]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	495e      	ldr	r1, [pc, #376]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d010      	beq.n	800ad40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69da      	ldr	r2, [r3, #28]
 800ad22:	4b59      	ldr	r3, [pc, #356]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d908      	bls.n	800ad40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad2e:	4b56      	ldr	r3, [pc, #344]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	4953      	ldr	r1, [pc, #332]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d010      	beq.n	800ad6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	4b4d      	ldr	r3, [pc, #308]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	f003 030f 	and.w	r3, r3, #15
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d908      	bls.n	800ad6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	f023 020f 	bic.w	r2, r3, #15
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	4947      	ldr	r1, [pc, #284]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d055      	beq.n	800ae26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ad7a:	4b43      	ldr	r3, [pc, #268]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	4940      	ldr	r1, [pc, #256]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d107      	bne.n	800ada4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad94:	4b3c      	ldr	r3, [pc, #240]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d121      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e0f6      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d107      	bne.n	800adbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adac:	4b36      	ldr	r3, [pc, #216]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d115      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e0ea      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d107      	bne.n	800add4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adc4:	4b30      	ldr	r3, [pc, #192]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d109      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e0de      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800add4:	4b2c      	ldr	r3, [pc, #176]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e0d6      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ade4:	4b28      	ldr	r3, [pc, #160]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f023 0207 	bic.w	r2, r3, #7
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4925      	ldr	r1, [pc, #148]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf6:	f7f9 fc9d 	bl	8004734 <HAL_GetTick>
 800adfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adfc:	e00a      	b.n	800ae14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adfe:	f7f9 fc99 	bl	8004734 <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d901      	bls.n	800ae14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e0be      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae14:	4b1c      	ldr	r3, [pc, #112]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d1eb      	bne.n	800adfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d010      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	4b14      	ldr	r3, [pc, #80]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f003 030f 	and.w	r3, r3, #15
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d208      	bcs.n	800ae54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae42:	4b11      	ldr	r3, [pc, #68]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	f023 020f 	bic.w	r2, r3, #15
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	490e      	ldr	r1, [pc, #56]	@ (800ae88 <HAL_RCC_ClockConfig+0x244>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae54:	4b0b      	ldr	r3, [pc, #44]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d214      	bcs.n	800ae8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae62:	4b08      	ldr	r3, [pc, #32]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f023 020f 	bic.w	r2, r3, #15
 800ae6a:	4906      	ldr	r1, [pc, #24]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae72:	4b04      	ldr	r3, [pc, #16]	@ (800ae84 <HAL_RCC_ClockConfig+0x240>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d005      	beq.n	800ae8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e086      	b.n	800af92 <HAL_RCC_ClockConfig+0x34e>
 800ae84:	52002000 	.word	0x52002000
 800ae88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d010      	beq.n	800aeba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	4b3f      	ldr	r3, [pc, #252]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d208      	bcs.n	800aeba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aea8:	4b3c      	ldr	r3, [pc, #240]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4939      	ldr	r1, [pc, #228]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d010      	beq.n	800aee8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695a      	ldr	r2, [r3, #20]
 800aeca:	4b34      	ldr	r3, [pc, #208]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d208      	bcs.n	800aee8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aed6:	4b31      	ldr	r3, [pc, #196]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	492e      	ldr	r1, [pc, #184]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0310 	and.w	r3, r3, #16
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d010      	beq.n	800af16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	699a      	ldr	r2, [r3, #24]
 800aef8:	4b28      	ldr	r3, [pc, #160]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800aefa:	69db      	ldr	r3, [r3, #28]
 800aefc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af00:	429a      	cmp	r2, r3
 800af02:	d208      	bcs.n	800af16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af04:	4b25      	ldr	r3, [pc, #148]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	4922      	ldr	r1, [pc, #136]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af12:	4313      	orrs	r3, r2
 800af14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d010      	beq.n	800af44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69da      	ldr	r2, [r3, #28]
 800af26:	4b1d      	ldr	r3, [pc, #116]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af2e:	429a      	cmp	r2, r3
 800af30:	d208      	bcs.n	800af44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af32:	4b1a      	ldr	r3, [pc, #104]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	4917      	ldr	r1, [pc, #92]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af40:	4313      	orrs	r3, r2
 800af42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af44:	f000 f834 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 800af48:	4602      	mov	r2, r0
 800af4a:	4b14      	ldr	r3, [pc, #80]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	0a1b      	lsrs	r3, r3, #8
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	4912      	ldr	r1, [pc, #72]	@ (800afa0 <HAL_RCC_ClockConfig+0x35c>)
 800af56:	5ccb      	ldrb	r3, [r1, r3]
 800af58:	f003 031f 	and.w	r3, r3, #31
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af62:	4b0e      	ldr	r3, [pc, #56]	@ (800af9c <HAL_RCC_ClockConfig+0x358>)
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f003 030f 	and.w	r3, r3, #15
 800af6a:	4a0d      	ldr	r2, [pc, #52]	@ (800afa0 <HAL_RCC_ClockConfig+0x35c>)
 800af6c:	5cd3      	ldrb	r3, [r2, r3]
 800af6e:	f003 031f 	and.w	r3, r3, #31
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	fa22 f303 	lsr.w	r3, r2, r3
 800af78:	4a0a      	ldr	r2, [pc, #40]	@ (800afa4 <HAL_RCC_ClockConfig+0x360>)
 800af7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af7c:	4a0a      	ldr	r2, [pc, #40]	@ (800afa8 <HAL_RCC_ClockConfig+0x364>)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800af82:	4b0a      	ldr	r3, [pc, #40]	@ (800afac <HAL_RCC_ClockConfig+0x368>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f7f9 fb8a 	bl	80046a0 <HAL_InitTick>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	58024400 	.word	0x58024400
 800afa0:	08019884 	.word	0x08019884
 800afa4:	24000004 	.word	0x24000004
 800afa8:	24000000 	.word	0x24000000
 800afac:	24000008 	.word	0x24000008

0800afb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b089      	sub	sp, #36	@ 0x24
 800afb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afb6:	4bb3      	ldr	r3, [pc, #716]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afbe:	2b18      	cmp	r3, #24
 800afc0:	f200 8155 	bhi.w	800b26e <HAL_RCC_GetSysClockFreq+0x2be>
 800afc4:	a201      	add	r2, pc, #4	@ (adr r2, 800afcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800afc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afca:	bf00      	nop
 800afcc:	0800b031 	.word	0x0800b031
 800afd0:	0800b26f 	.word	0x0800b26f
 800afd4:	0800b26f 	.word	0x0800b26f
 800afd8:	0800b26f 	.word	0x0800b26f
 800afdc:	0800b26f 	.word	0x0800b26f
 800afe0:	0800b26f 	.word	0x0800b26f
 800afe4:	0800b26f 	.word	0x0800b26f
 800afe8:	0800b26f 	.word	0x0800b26f
 800afec:	0800b057 	.word	0x0800b057
 800aff0:	0800b26f 	.word	0x0800b26f
 800aff4:	0800b26f 	.word	0x0800b26f
 800aff8:	0800b26f 	.word	0x0800b26f
 800affc:	0800b26f 	.word	0x0800b26f
 800b000:	0800b26f 	.word	0x0800b26f
 800b004:	0800b26f 	.word	0x0800b26f
 800b008:	0800b26f 	.word	0x0800b26f
 800b00c:	0800b05d 	.word	0x0800b05d
 800b010:	0800b26f 	.word	0x0800b26f
 800b014:	0800b26f 	.word	0x0800b26f
 800b018:	0800b26f 	.word	0x0800b26f
 800b01c:	0800b26f 	.word	0x0800b26f
 800b020:	0800b26f 	.word	0x0800b26f
 800b024:	0800b26f 	.word	0x0800b26f
 800b028:	0800b26f 	.word	0x0800b26f
 800b02c:	0800b063 	.word	0x0800b063
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b030:	4b94      	ldr	r3, [pc, #592]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0320 	and.w	r3, r3, #32
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b03c:	4b91      	ldr	r3, [pc, #580]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	08db      	lsrs	r3, r3, #3
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	4a90      	ldr	r2, [pc, #576]	@ (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
 800b04c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b04e:	e111      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b050:	4b8d      	ldr	r3, [pc, #564]	@ (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b052:	61bb      	str	r3, [r7, #24]
      break;
 800b054:	e10e      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b056:	4b8d      	ldr	r3, [pc, #564]	@ (800b28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b058:	61bb      	str	r3, [r7, #24]
      break;
 800b05a:	e10b      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b05c:	4b8c      	ldr	r3, [pc, #560]	@ (800b290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b05e:	61bb      	str	r3, [r7, #24]
      break;
 800b060:	e108      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b062:	4b88      	ldr	r3, [pc, #544]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b066:	f003 0303 	and.w	r3, r3, #3
 800b06a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b06c:	4b85      	ldr	r3, [pc, #532]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b070:	091b      	lsrs	r3, r3, #4
 800b072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b076:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b078:	4b82      	ldr	r3, [pc, #520]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b082:	4b80      	ldr	r3, [pc, #512]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b086:	08db      	lsrs	r3, r3, #3
 800b088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 80e1 	beq.w	800b268 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	f000 8083 	beq.w	800b1b4 <HAL_RCC_GetSysClockFreq+0x204>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	f200 80a1 	bhi.w	800b1f8 <HAL_RCC_GetSysClockFreq+0x248>
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x114>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d056      	beq.n	800b170 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0c2:	e099      	b.n	800b1f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0c4:	4b6f      	ldr	r3, [pc, #444]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02d      	beq.n	800b12c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0d0:	4b6c      	ldr	r3, [pc, #432]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	08db      	lsrs	r3, r3, #3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	4a6b      	ldr	r2, [pc, #428]	@ (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	ee07 3a90 	vmov	s15, r3
 800b0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b62      	ldr	r3, [pc, #392]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b10e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b12a:	e087      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13e:	4b51      	ldr	r3, [pc, #324]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b152:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b16e:	e065      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b40      	ldr	r3, [pc, #256]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a02 	vldr	s12, [r7, #8]
 800b196:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1b2:	e043      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b2a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1f6:	e021      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	4b1e      	ldr	r3, [pc, #120]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b21e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b23a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b23c:	4b11      	ldr	r3, [pc, #68]	@ (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b240:	0a5b      	lsrs	r3, r3, #9
 800b242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b246:	3301      	adds	r3, #1
 800b248:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b254:	edd7 6a07 	vldr	s13, [r7, #28]
 800b258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b260:	ee17 3a90 	vmov	r3, s15
 800b264:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b266:	e005      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	61bb      	str	r3, [r7, #24]
      break;
 800b26c:	e002      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b26e:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b270:	61bb      	str	r3, [r7, #24]
      break;
 800b272:	bf00      	nop
  }

  return sysclockfreq;
 800b274:	69bb      	ldr	r3, [r7, #24]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3724      	adds	r7, #36	@ 0x24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
 800b288:	03d09000 	.word	0x03d09000
 800b28c:	003d0900 	.word	0x003d0900
 800b290:	016e3600 	.word	0x016e3600
 800b294:	46000000 	.word	0x46000000
 800b298:	4c742400 	.word	0x4c742400
 800b29c:	4a742400 	.word	0x4a742400
 800b2a0:	4bb71b00 	.word	0x4bb71b00

0800b2a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2aa:	f7ff fe81 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	0a1b      	lsrs	r3, r3, #8
 800b2b6:	f003 030f 	and.w	r3, r3, #15
 800b2ba:	490f      	ldr	r1, [pc, #60]	@ (800b2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2bc:	5ccb      	ldrb	r3, [r1, r3]
 800b2be:	f003 031f 	and.w	r3, r3, #31
 800b2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f003 030f 	and.w	r3, r3, #15
 800b2d0:	4a09      	ldr	r2, [pc, #36]	@ (800b2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2d2:	5cd3      	ldrb	r3, [r2, r3]
 800b2d4:	f003 031f 	and.w	r3, r3, #31
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	4a07      	ldr	r2, [pc, #28]	@ (800b2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b2e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2e2:	4a07      	ldr	r2, [pc, #28]	@ (800b300 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2e8:	4b04      	ldr	r3, [pc, #16]	@ (800b2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	08019884 	.word	0x08019884
 800b2fc:	24000004 	.word	0x24000004
 800b300:	24000000 	.word	0x24000000

0800b304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b308:	f7ff ffcc 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4b06      	ldr	r3, [pc, #24]	@ (800b328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	091b      	lsrs	r3, r3, #4
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	4904      	ldr	r1, [pc, #16]	@ (800b32c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b31a:	5ccb      	ldrb	r3, [r1, r3]
 800b31c:	f003 031f 	and.w	r3, r3, #31
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b324:	4618      	mov	r0, r3
 800b326:	bd80      	pop	{r7, pc}
 800b328:	58024400 	.word	0x58024400
 800b32c:	08019884 	.word	0x08019884

0800b330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b334:	f7ff ffb6 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800b338:	4602      	mov	r2, r0
 800b33a:	4b06      	ldr	r3, [pc, #24]	@ (800b354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	4904      	ldr	r1, [pc, #16]	@ (800b358 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b346:	5ccb      	ldrb	r3, [r1, r3]
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b350:	4618      	mov	r0, r3
 800b352:	bd80      	pop	{r7, pc}
 800b354:	58024400 	.word	0x58024400
 800b358:	08019884 	.word	0x08019884

0800b35c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b35c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b360:	b0c6      	sub	sp, #280	@ 0x118
 800b362:	af00      	add	r7, sp, #0
 800b364:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b368:	2300      	movs	r3, #0
 800b36a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b380:	2500      	movs	r5, #0
 800b382:	ea54 0305 	orrs.w	r3, r4, r5
 800b386:	d049      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b38c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b38e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b392:	d02f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b394:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b398:	d828      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b39a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b39e:	d01a      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b3a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3a4:	d822      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b3aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3ae:	d007      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b3b0:	e01c      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b2:	4bab      	ldr	r3, [pc, #684]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	4aaa      	ldr	r2, [pc, #680]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3be:	e01a      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	2102      	movs	r1, #2
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f002 fa49 	bl	800d860 <RCCEx_PLL2_Config>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3d4:	e00f      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3da:	3328      	adds	r3, #40	@ 0x28
 800b3dc:	2102      	movs	r1, #2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f002 faf0 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3ea:	e004      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b3f2:	e000      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3fe:	4b98      	ldr	r3, [pc, #608]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b402:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b40a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b40c:	4a94      	ldr	r2, [pc, #592]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b40e:	430b      	orrs	r3, r1
 800b410:	6513      	str	r3, [r2, #80]	@ 0x50
 800b412:	e003      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b428:	f04f 0900 	mov.w	r9, #0
 800b42c:	ea58 0309 	orrs.w	r3, r8, r9
 800b430:	d047      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d82a      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b43c:	a201      	add	r2, pc, #4	@ (adr r2, 800b444 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b459 	.word	0x0800b459
 800b448:	0800b467 	.word	0x0800b467
 800b44c:	0800b47d 	.word	0x0800b47d
 800b450:	0800b49b 	.word	0x0800b49b
 800b454:	0800b49b 	.word	0x0800b49b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b458:	4b81      	ldr	r3, [pc, #516]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45c:	4a80      	ldr	r2, [pc, #512]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b464:	e01a      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b46a:	3308      	adds	r3, #8
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f002 f9f6 	bl	800d860 <RCCEx_PLL2_Config>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b47a:	e00f      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b480:	3328      	adds	r3, #40	@ 0x28
 800b482:	2100      	movs	r1, #0
 800b484:	4618      	mov	r0, r3
 800b486:	f002 fa9d 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b490:	e004      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b498:	e000      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b49c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10a      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4a4:	4b6e      	ldr	r3, [pc, #440]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a8:	f023 0107 	bic.w	r1, r3, #7
 800b4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b2:	4a6b      	ldr	r2, [pc, #428]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b4b8:	e003      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b4ce:	f04f 0b00 	mov.w	fp, #0
 800b4d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b4d6:	d05b      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4e0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b4e4:	d03b      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b4e6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b4ea:	d834      	bhi.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b4f0:	d037      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b4f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b4f6:	d82e      	bhi.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b4fc:	d033      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b4fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b502:	d828      	bhi.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b508:	d01a      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b50a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b50e:	d822      	bhi.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b518:	d007      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b51a:	e01c      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b51c:	4b50      	ldr	r3, [pc, #320]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b520:	4a4f      	ldr	r2, [pc, #316]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b528:	e01e      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b52e:	3308      	adds	r3, #8
 800b530:	2100      	movs	r1, #0
 800b532:	4618      	mov	r0, r3
 800b534:	f002 f994 	bl	800d860 <RCCEx_PLL2_Config>
 800b538:	4603      	mov	r3, r0
 800b53a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b53e:	e013      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b544:	3328      	adds	r3, #40	@ 0x28
 800b546:	2100      	movs	r1, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f002 fa3b 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b54e:	4603      	mov	r3, r0
 800b550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b554:	e008      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b55c:	e004      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b55e:	bf00      	nop
 800b560:	e002      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b562:	bf00      	nop
 800b564:	e000      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b566:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10b      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b570:	4b3b      	ldr	r3, [pc, #236]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b574:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b57c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b580:	4a37      	ldr	r2, [pc, #220]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b582:	430b      	orrs	r3, r1
 800b584:	6593      	str	r3, [r2, #88]	@ 0x58
 800b586:	e003      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b58c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b59c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b5a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	d05d      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b5b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b5bc:	d03b      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b5be:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b5c2:	d834      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5c8:	d037      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b5ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5ce:	d82e      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5d4:	d033      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b5d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5da:	d828      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5e0:	d01a      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b5e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5e6:	d822      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b5ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5f0:	d007      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b5f2:	e01c      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f8:	4a19      	ldr	r2, [pc, #100]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b600:	e01e      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b606:	3308      	adds	r3, #8
 800b608:	2100      	movs	r1, #0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f002 f928 	bl	800d860 <RCCEx_PLL2_Config>
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b616:	e013      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	3328      	adds	r3, #40	@ 0x28
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f002 f9cf 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b62c:	e008      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b634:	e004      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b636:	bf00      	nop
 800b638:	e002      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b63a:	bf00      	nop
 800b63c:	e000      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b63e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b648:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b64c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b654:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b658:	4a01      	ldr	r2, [pc, #4]	@ (800b660 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b65a:	430b      	orrs	r3, r1
 800b65c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b65e:	e005      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b678:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b67c:	2300      	movs	r3, #0
 800b67e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b682:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b686:	460b      	mov	r3, r1
 800b688:	4313      	orrs	r3, r2
 800b68a:	d03a      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b692:	2b30      	cmp	r3, #48	@ 0x30
 800b694:	d01f      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b696:	2b30      	cmp	r3, #48	@ 0x30
 800b698:	d819      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d00c      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	d815      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d019      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b6a6:	2b10      	cmp	r3, #16
 800b6a8:	d111      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6aa:	4baa      	ldr	r3, [pc, #680]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ae:	4aa9      	ldr	r2, [pc, #676]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6b6:	e011      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6bc:	3308      	adds	r3, #8
 800b6be:	2102      	movs	r1, #2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f002 f8cd 	bl	800d860 <RCCEx_PLL2_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6cc:	e006      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6d4:	e002      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b6d6:	bf00      	nop
 800b6d8:	e000      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b6da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b6e4:	4b9b      	ldr	r3, [pc, #620]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6f2:	4a98      	ldr	r2, [pc, #608]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6f4:	430b      	orrs	r3, r1
 800b6f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b6f8:	e003      	b.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b70e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b712:	2300      	movs	r3, #0
 800b714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b718:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b71c:	460b      	mov	r3, r1
 800b71e:	4313      	orrs	r3, r2
 800b720:	d051      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b72c:	d035      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b72e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b732:	d82e      	bhi.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b734:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b738:	d031      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b73a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b73e:	d828      	bhi.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b744:	d01a      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b74a:	d822      	bhi.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b754:	d007      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b756:	e01c      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b758:	4b7e      	ldr	r3, [pc, #504]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75c:	4a7d      	ldr	r2, [pc, #500]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b75e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b764:	e01c      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76a:	3308      	adds	r3, #8
 800b76c:	2100      	movs	r1, #0
 800b76e:	4618      	mov	r0, r3
 800b770:	f002 f876 	bl	800d860 <RCCEx_PLL2_Config>
 800b774:	4603      	mov	r3, r0
 800b776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b77a:	e011      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b780:	3328      	adds	r3, #40	@ 0x28
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f002 f91d 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b790:	e006      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b798:	e002      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b79a:	bf00      	nop
 800b79c:	e000      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b7a8:	4b6a      	ldr	r3, [pc, #424]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7b6:	4a67      	ldr	r2, [pc, #412]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7bc:	e003      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b7d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	d053      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b7f0:	d033      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b7f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b7f6:	d82c      	bhi.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b7f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7fc:	d02f      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b7fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b802:	d826      	bhi.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b808:	d02b      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b80a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b80e:	d820      	bhi.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b814:	d012      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b81a:	d81a      	bhi.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d022      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b824:	d115      	bne.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82a:	3308      	adds	r3, #8
 800b82c:	2101      	movs	r1, #1
 800b82e:	4618      	mov	r0, r3
 800b830:	f002 f816 	bl	800d860 <RCCEx_PLL2_Config>
 800b834:	4603      	mov	r3, r0
 800b836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b83a:	e015      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b840:	3328      	adds	r3, #40	@ 0x28
 800b842:	2101      	movs	r1, #1
 800b844:	4618      	mov	r0, r3
 800b846:	f002 f8bd 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b850:	e00a      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b858:	e006      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b85a:	bf00      	nop
 800b85c:	e004      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b85e:	bf00      	nop
 800b860:	e002      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b862:	bf00      	nop
 800b864:	e000      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b870:	4b38      	ldr	r3, [pc, #224]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b874:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b87e:	4a35      	ldr	r2, [pc, #212]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b880:	430b      	orrs	r3, r1
 800b882:	6513      	str	r3, [r2, #80]	@ 0x50
 800b884:	e003      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b88a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b89a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b8a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	d058      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b8b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8ba:	d033      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8c0:	d82c      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c6:	d02f      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8cc:	d826      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8d2:	d02b      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b8d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8d8:	d820      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8de:	d012      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8e4:	d81a      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d022      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b8ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8ee:	d115      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 ffb1 	bl	800d860 <RCCEx_PLL2_Config>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b904:	e015      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90a:	3328      	adds	r3, #40	@ 0x28
 800b90c:	2101      	movs	r1, #1
 800b90e:	4618      	mov	r0, r3
 800b910:	f002 f858 	bl	800d9c4 <RCCEx_PLL3_Config>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b91a:	e00a      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b922:	e006      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b924:	bf00      	nop
 800b926:	e004      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b928:	bf00      	nop
 800b92a:	e002      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10e      	bne.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b93a:	4b06      	ldr	r3, [pc, #24]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b93c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b93e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b94a:	4a02      	ldr	r2, [pc, #8]	@ (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b94c:	430b      	orrs	r3, r1
 800b94e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b950:	e006      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b952:	bf00      	nop
 800b954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b95c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b96c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b970:	2300      	movs	r3, #0
 800b972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b976:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d037      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b98a:	d00e      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b990:	d816      	bhi.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b99a:	d111      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99c:	4bc4      	ldr	r3, [pc, #784]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a0:	4ac3      	ldr	r2, [pc, #780]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9a8:	e00f      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 ff54 	bl	800d860 <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9be:	e004      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9c6:	e000      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b9c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9d2:	4bb7      	ldr	r3, [pc, #732]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9e0:	4ab3      	ldr	r2, [pc, #716]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9e2:	430b      	orrs	r3, r1
 800b9e4:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9e6:	e003      	b.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b9fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba00:	2300      	movs	r3, #0
 800ba02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ba06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	d039      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d81c      	bhi.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba5d 	.word	0x0800ba5d
 800ba24:	0800ba31 	.word	0x0800ba31
 800ba28:	0800ba3f 	.word	0x0800ba3f
 800ba2c:	0800ba5d 	.word	0x0800ba5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba30:	4b9f      	ldr	r3, [pc, #636]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba34:	4a9e      	ldr	r2, [pc, #632]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba3c:	e00f      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba42:	3308      	adds	r3, #8
 800ba44:	2102      	movs	r1, #2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 ff0a 	bl	800d860 <RCCEx_PLL2_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba52:	e004      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba5a:	e000      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ba5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ba66:	4b92      	ldr	r3, [pc, #584]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba6a:	f023 0103 	bic.w	r1, r3, #3
 800ba6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba74:	4a8e      	ldr	r2, [pc, #568]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba76:	430b      	orrs	r3, r1
 800ba78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba7a:	e003      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ba90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f000 8099 	beq.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baa6:	4b83      	ldr	r3, [pc, #524]	@ (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a82      	ldr	r2, [pc, #520]	@ (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bab2:	f7f8 fe3f 	bl	8004734 <HAL_GetTick>
 800bab6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baba:	e00b      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800babc:	f7f8 fe3a 	bl	8004734 <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b64      	cmp	r3, #100	@ 0x64
 800baca:	d903      	bls.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bad2:	e005      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bad4:	4b77      	ldr	r3, [pc, #476]	@ (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0ed      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d173      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bae8:	4b71      	ldr	r3, [pc, #452]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800baf4:	4053      	eors	r3, r2
 800baf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d015      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bafe:	4b6c      	ldr	r3, [pc, #432]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb0a:	4b69      	ldr	r3, [pc, #420]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb0e:	4a68      	ldr	r2, [pc, #416]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb16:	4b66      	ldr	r3, [pc, #408]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb1a:	4a65      	ldr	r2, [pc, #404]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb22:	4a63      	ldr	r2, [pc, #396]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb36:	d118      	bne.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb38:	f7f8 fdfc 	bl	8004734 <HAL_GetTick>
 800bb3c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb40:	e00d      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb42:	f7f8 fdf7 	bl	8004734 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bb4c:	1ad2      	subs	r2, r2, r3
 800bb4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d903      	bls.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bb5c:	e005      	b.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb5e:	4b54      	ldr	r3, [pc, #336]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0eb      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bb6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d129      	bne.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb82:	d10e      	bne.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bb84:	4b4a      	ldr	r3, [pc, #296]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb94:	091a      	lsrs	r2, r3, #4
 800bb96:	4b48      	ldr	r3, [pc, #288]	@ (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	4a45      	ldr	r2, [pc, #276]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	6113      	str	r3, [r2, #16]
 800bba0:	e005      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bba2:	4b43      	ldr	r3, [pc, #268]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	4a42      	ldr	r2, [pc, #264]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbac:	6113      	str	r3, [r2, #16]
 800bbae:	4b40      	ldr	r3, [pc, #256]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bbba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbbe:	4a3c      	ldr	r2, [pc, #240]	@ (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc0:	430b      	orrs	r3, r1
 800bbc2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbc4:	e008      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800bbce:	e003      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f002 0301 	and.w	r3, r2, #1
 800bbe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bbee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	f000 808f 	beq.w	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc00:	2b28      	cmp	r3, #40	@ 0x28
 800bc02:	d871      	bhi.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bc04:	a201      	add	r2, pc, #4	@ (adr r2, 800bc0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0a:	bf00      	nop
 800bc0c:	0800bcf1 	.word	0x0800bcf1
 800bc10:	0800bce9 	.word	0x0800bce9
 800bc14:	0800bce9 	.word	0x0800bce9
 800bc18:	0800bce9 	.word	0x0800bce9
 800bc1c:	0800bce9 	.word	0x0800bce9
 800bc20:	0800bce9 	.word	0x0800bce9
 800bc24:	0800bce9 	.word	0x0800bce9
 800bc28:	0800bce9 	.word	0x0800bce9
 800bc2c:	0800bcbd 	.word	0x0800bcbd
 800bc30:	0800bce9 	.word	0x0800bce9
 800bc34:	0800bce9 	.word	0x0800bce9
 800bc38:	0800bce9 	.word	0x0800bce9
 800bc3c:	0800bce9 	.word	0x0800bce9
 800bc40:	0800bce9 	.word	0x0800bce9
 800bc44:	0800bce9 	.word	0x0800bce9
 800bc48:	0800bce9 	.word	0x0800bce9
 800bc4c:	0800bcd3 	.word	0x0800bcd3
 800bc50:	0800bce9 	.word	0x0800bce9
 800bc54:	0800bce9 	.word	0x0800bce9
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bce9 	.word	0x0800bce9
 800bc60:	0800bce9 	.word	0x0800bce9
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce9 	.word	0x0800bce9
 800bc6c:	0800bcf1 	.word	0x0800bcf1
 800bc70:	0800bce9 	.word	0x0800bce9
 800bc74:	0800bce9 	.word	0x0800bce9
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bce9 	.word	0x0800bce9
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce9 	.word	0x0800bce9
 800bc8c:	0800bcf1 	.word	0x0800bcf1
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bce9 	.word	0x0800bce9
 800bc98:	0800bce9 	.word	0x0800bce9
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bce9 	.word	0x0800bce9
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bcf1 	.word	0x0800bcf1
 800bcb0:	58024400 	.word	0x58024400
 800bcb4:	58024800 	.word	0x58024800
 800bcb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f001 fdcb 	bl	800d860 <RCCEx_PLL2_Config>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bcd0:	e00f      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd6:	3328      	adds	r3, #40	@ 0x28
 800bcd8:	2101      	movs	r1, #1
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f001 fe72 	bl	800d9c4 <RCCEx_PLL3_Config>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bce6:	e004      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcee:	e000      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bcf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bcfa:	4bbf      	ldr	r3, [pc, #764]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd08:	4abb      	ldr	r2, [pc, #748]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd0a:	430b      	orrs	r3, r1
 800bd0c:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd0e:	e003      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f002 0302 	and.w	r3, r2, #2
 800bd24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4313      	orrs	r3, r2
 800bd36:	d041      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d824      	bhi.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bd42:	a201      	add	r2, pc, #4	@ (adr r2, 800bd48 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd95 	.word	0x0800bd95
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd77 	.word	0x0800bd77
 800bd54:	0800bd95 	.word	0x0800bd95
 800bd58:	0800bd95 	.word	0x0800bd95
 800bd5c:	0800bd95 	.word	0x0800bd95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd64:	3308      	adds	r3, #8
 800bd66:	2101      	movs	r1, #1
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f001 fd79 	bl	800d860 <RCCEx_PLL2_Config>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd74:	e00f      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7a:	3328      	adds	r3, #40	@ 0x28
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fe20 	bl	800d9c4 <RCCEx_PLL3_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd8a:	e004      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd92:	e000      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd9e:	4b96      	ldr	r3, [pc, #600]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bda0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bda2:	f023 0107 	bic.w	r1, r3, #7
 800bda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdac:	4a92      	ldr	r2, [pc, #584]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	6553      	str	r3, [r2, #84]	@ 0x54
 800bdb2:	e003      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f002 0304 	and.w	r3, r2, #4
 800bdc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	d044      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bde4:	2b05      	cmp	r3, #5
 800bde6:	d825      	bhi.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bde8:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdee:	bf00      	nop
 800bdf0:	0800be3d 	.word	0x0800be3d
 800bdf4:	0800be09 	.word	0x0800be09
 800bdf8:	0800be1f 	.word	0x0800be1f
 800bdfc:	0800be3d 	.word	0x0800be3d
 800be00:	0800be3d 	.word	0x0800be3d
 800be04:	0800be3d 	.word	0x0800be3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0c:	3308      	adds	r3, #8
 800be0e:	2101      	movs	r1, #1
 800be10:	4618      	mov	r0, r3
 800be12:	f001 fd25 	bl	800d860 <RCCEx_PLL2_Config>
 800be16:	4603      	mov	r3, r0
 800be18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be1c:	e00f      	b.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be22:	3328      	adds	r3, #40	@ 0x28
 800be24:	2101      	movs	r1, #1
 800be26:	4618      	mov	r0, r3
 800be28:	f001 fdcc 	bl	800d9c4 <RCCEx_PLL3_Config>
 800be2c:	4603      	mov	r3, r0
 800be2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be32:	e004      	b.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be3a:	e000      	b.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800be3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be46:	4b6c      	ldr	r3, [pc, #432]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be4a:	f023 0107 	bic.w	r1, r3, #7
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be56:	4a68      	ldr	r2, [pc, #416]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be58:	430b      	orrs	r3, r1
 800be5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800be5c:	e003      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f002 0320 	and.w	r3, r2, #32
 800be72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be76:	2300      	movs	r3, #0
 800be78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800be7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800be80:	460b      	mov	r3, r1
 800be82:	4313      	orrs	r3, r2
 800be84:	d055      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be92:	d033      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800be94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be98:	d82c      	bhi.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be9e:	d02f      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bea4:	d826      	bhi.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800beaa:	d02b      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800beac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800beb0:	d820      	bhi.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb6:	d012      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800beb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bebc:	d81a      	bhi.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d022      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bec6:	d115      	bne.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800becc:	3308      	adds	r3, #8
 800bece:	2100      	movs	r1, #0
 800bed0:	4618      	mov	r0, r3
 800bed2:	f001 fcc5 	bl	800d860 <RCCEx_PLL2_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bedc:	e015      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee2:	3328      	adds	r3, #40	@ 0x28
 800bee4:	2102      	movs	r1, #2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f001 fd6c 	bl	800d9c4 <RCCEx_PLL3_Config>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bef2:	e00a      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800befa:	e006      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800befc:	bf00      	nop
 800befe:	e004      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bf00:	bf00      	nop
 800bf02:	e002      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bf04:	bf00      	nop
 800bf06:	e000      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bf08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf12:	4b39      	ldr	r3, [pc, #228]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bf1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf22:	4a35      	ldr	r2, [pc, #212]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf24:	430b      	orrs	r3, r1
 800bf26:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf28:	e003      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bf3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf42:	2300      	movs	r3, #0
 800bf44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf48:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	d058      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bf5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bf5e:	d033      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bf60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bf64:	d82c      	bhi.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf6a:	d02f      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bf6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf70:	d826      	bhi.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf76:	d02b      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bf78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf7c:	d820      	bhi.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf82:	d012      	beq.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800bf84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf88:	d81a      	bhi.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d022      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bf8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf92:	d115      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	3308      	adds	r3, #8
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 fc5f 	bl	800d860 <RCCEx_PLL2_Config>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfa8:	e015      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfae:	3328      	adds	r3, #40	@ 0x28
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 fd06 	bl	800d9c4 <RCCEx_PLL3_Config>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfbe:	e00a      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfc6:	e006      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfc8:	bf00      	nop
 800bfca:	e004      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfcc:	bf00      	nop
 800bfce:	e002      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfd0:	bf00      	nop
 800bfd2:	e000      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bfd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10e      	bne.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfde:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfe2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bfee:	4a02      	ldr	r2, [pc, #8]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bff0:	430b      	orrs	r3, r1
 800bff2:	6593      	str	r3, [r2, #88]	@ 0x58
 800bff4:	e006      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bff6:	bf00      	nop
 800bff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c010:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c014:	2300      	movs	r3, #0
 800c016:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c01a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c01e:	460b      	mov	r3, r1
 800c020:	4313      	orrs	r3, r2
 800c022:	d055      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c02c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c030:	d033      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c032:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c036:	d82c      	bhi.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c03c:	d02f      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c03e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c042:	d826      	bhi.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c044:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c048:	d02b      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c04a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c04e:	d820      	bhi.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c054:	d012      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c05a:	d81a      	bhi.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d022      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c064:	d115      	bne.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06a:	3308      	adds	r3, #8
 800c06c:	2100      	movs	r1, #0
 800c06e:	4618      	mov	r0, r3
 800c070:	f001 fbf6 	bl	800d860 <RCCEx_PLL2_Config>
 800c074:	4603      	mov	r3, r0
 800c076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c07a:	e015      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c080:	3328      	adds	r3, #40	@ 0x28
 800c082:	2102      	movs	r1, #2
 800c084:	4618      	mov	r0, r3
 800c086:	f001 fc9d 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c090:	e00a      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c098:	e006      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c09a:	bf00      	nop
 800c09c:	e004      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c09e:	bf00      	nop
 800c0a0:	e002      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c0a2:	bf00      	nop
 800c0a4:	e000      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c0a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0b0:	4ba0      	ldr	r3, [pc, #640]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0c0:	4a9c      	ldr	r2, [pc, #624]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0c2:	430b      	orrs	r3, r1
 800c0c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0c6:	e003      	b.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f002 0308 	and.w	r3, r2, #8
 800c0dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c0e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	d01e      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0fc:	d10c      	bne.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c102:	3328      	adds	r3, #40	@ 0x28
 800c104:	2102      	movs	r1, #2
 800c106:	4618      	mov	r0, r3
 800c108:	f001 fc5c 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c118:	4b86      	ldr	r3, [pc, #536]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c11a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c128:	4a82      	ldr	r2, [pc, #520]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c12a:	430b      	orrs	r3, r1
 800c12c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f002 0310 	and.w	r3, r2, #16
 800c13a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c13e:	2300      	movs	r3, #0
 800c140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c144:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c148:	460b      	mov	r3, r1
 800c14a:	4313      	orrs	r3, r2
 800c14c:	d01e      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c15a:	d10c      	bne.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c160:	3328      	adds	r3, #40	@ 0x28
 800c162:	2102      	movs	r1, #2
 800c164:	4618      	mov	r0, r3
 800c166:	f001 fc2d 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c176:	4b6f      	ldr	r3, [pc, #444]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c17a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c186:	4a6b      	ldr	r2, [pc, #428]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c188:	430b      	orrs	r3, r1
 800c18a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c19a:	2300      	movs	r3, #0
 800c19c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c19e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	d03e      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c1b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1b4:	d022      	beq.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c1b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1ba:	d81b      	bhi.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1c4:	d00b      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c1c6:	e015      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f001 fb45 	bl	800d860 <RCCEx_PLL2_Config>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1dc:	e00f      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e2:	3328      	adds	r3, #40	@ 0x28
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 fbec 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1f2:	e004      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1fa:	e000      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10b      	bne.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c206:	4b4b      	ldr	r3, [pc, #300]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c20a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c216:	4a47      	ldr	r2, [pc, #284]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c218:	430b      	orrs	r3, r1
 800c21a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c21c:	e003      	b.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c21e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c222:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c232:	673b      	str	r3, [r7, #112]	@ 0x70
 800c234:	2300      	movs	r3, #0
 800c236:	677b      	str	r3, [r7, #116]	@ 0x74
 800c238:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c23c:	460b      	mov	r3, r1
 800c23e:	4313      	orrs	r3, r2
 800c240:	d03b      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c24a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c24e:	d01f      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c254:	d818      	bhi.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c25a:	d003      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c25c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c260:	d007      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c262:	e011      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c264:	4b33      	ldr	r3, [pc, #204]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c268:	4a32      	ldr	r2, [pc, #200]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c26a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c26e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c270:	e00f      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c276:	3328      	adds	r3, #40	@ 0x28
 800c278:	2101      	movs	r1, #1
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 fba2 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c286:	e004      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c28e:	e000      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10b      	bne.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c29a:	4b26      	ldr	r3, [pc, #152]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2aa:	4a22      	ldr	r2, [pc, #136]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2ac:	430b      	orrs	r3, r1
 800c2ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2b0:	e003      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c2c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	d034      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2e4:	d007      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c2e6:	e011      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2e8:	4b12      	ldr	r3, [pc, #72]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ec:	4a11      	ldr	r2, [pc, #68]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c2f4:	e00e      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 faae 	bl	800d860 <RCCEx_PLL2_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c30a:	e003      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c312:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10d      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c31c:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c31e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c320:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c32a:	4a02      	ldr	r2, [pc, #8]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c32c:	430b      	orrs	r3, r1
 800c32e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c330:	e006      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c332:	bf00      	nop
 800c334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c33c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c34c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c34e:	2300      	movs	r3, #0
 800c350:	667b      	str	r3, [r7, #100]	@ 0x64
 800c352:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c356:	460b      	mov	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	d00c      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c360:	3328      	adds	r3, #40	@ 0x28
 800c362:	2102      	movs	r1, #2
 800c364:	4618      	mov	r0, r3
 800c366:	f001 fb2d 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c382:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c384:	2300      	movs	r3, #0
 800c386:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c388:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c38c:	460b      	mov	r3, r1
 800c38e:	4313      	orrs	r3, r2
 800c390:	d036      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c39c:	d018      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c39e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3a2:	d811      	bhi.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c3a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3a8:	d014      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c3aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3ae:	d80b      	bhi.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d011      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c3b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3b8:	d106      	bne.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ba:	4bb7      	ldr	r3, [pc, #732]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	4ab6      	ldr	r2, [pc, #728]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c3c6:	e008      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3ce:	e004      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3d0:	bf00      	nop
 800c3d2:	e002      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3d4:	bf00      	nop
 800c3d6:	e000      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c3d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c3e2:	4bad      	ldr	r3, [pc, #692]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3f0:	4aa9      	ldr	r2, [pc, #676]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3f2:	430b      	orrs	r3, r1
 800c3f4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c3f6:	e003      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c40c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c40e:	2300      	movs	r3, #0
 800c410:	657b      	str	r3, [r7, #84]	@ 0x54
 800c412:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c416:	460b      	mov	r3, r1
 800c418:	4313      	orrs	r3, r2
 800c41a:	d009      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c41c:	4b9e      	ldr	r3, [pc, #632]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c420:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c42a:	4a9b      	ldr	r2, [pc, #620]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c42c:	430b      	orrs	r3, r1
 800c42e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43e:	2300      	movs	r3, #0
 800c440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c442:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c446:	460b      	mov	r3, r1
 800c448:	4313      	orrs	r3, r2
 800c44a:	d009      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c44c:	4b92      	ldr	r3, [pc, #584]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c450:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c45a:	4a8f      	ldr	r2, [pc, #572]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c45c:	430b      	orrs	r3, r1
 800c45e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c46e:	2300      	movs	r3, #0
 800c470:	647b      	str	r3, [r7, #68]	@ 0x44
 800c472:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c476:	460b      	mov	r3, r1
 800c478:	4313      	orrs	r3, r2
 800c47a:	d00e      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c47c:	4b86      	ldr	r3, [pc, #536]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4a85      	ldr	r2, [pc, #532]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c482:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c486:	6113      	str	r3, [r2, #16]
 800c488:	4b83      	ldr	r3, [pc, #524]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c48a:	6919      	ldr	r1, [r3, #16]
 800c48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c494:	4a80      	ldr	r2, [pc, #512]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c496:	430b      	orrs	r3, r1
 800c498:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	d009      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c4b6:	4b78      	ldr	r3, [pc, #480]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c4:	4a74      	ldr	r2, [pc, #464]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4c6:	430b      	orrs	r3, r1
 800c4c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4d8:	2300      	movs	r3, #0
 800c4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	d00a      	beq.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c4e6:	4b6c      	ldr	r3, [pc, #432]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4f6:	4a68      	ldr	r2, [pc, #416]	@ (800c698 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4f8:	430b      	orrs	r3, r1
 800c4fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	2100      	movs	r1, #0
 800c506:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c50e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c512:	460b      	mov	r3, r1
 800c514:	4313      	orrs	r3, r2
 800c516:	d011      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51c:	3308      	adds	r3, #8
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f001 f99d 	bl	800d860 <RCCEx_PLL2_Config>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c52c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	2100      	movs	r1, #0
 800c546:	6239      	str	r1, [r7, #32]
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c54e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c552:	460b      	mov	r3, r1
 800c554:	4313      	orrs	r3, r2
 800c556:	d011      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c55c:	3308      	adds	r3, #8
 800c55e:	2101      	movs	r1, #1
 800c560:	4618      	mov	r0, r3
 800c562:	f001 f97d 	bl	800d860 <RCCEx_PLL2_Config>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c56c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c570:	2b00      	cmp	r3, #0
 800c572:	d003      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	2100      	movs	r1, #0
 800c586:	61b9      	str	r1, [r7, #24]
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	61fb      	str	r3, [r7, #28]
 800c58e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c592:	460b      	mov	r3, r1
 800c594:	4313      	orrs	r3, r2
 800c596:	d011      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59c:	3308      	adds	r3, #8
 800c59e:	2102      	movs	r1, #2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 f95d 	bl	800d860 <RCCEx_PLL2_Config>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6139      	str	r1, [r7, #16]
 800c5c8:	f003 0308 	and.w	r3, r3, #8
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	d011      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5dc:	3328      	adds	r3, #40	@ 0x28
 800c5de:	2100      	movs	r1, #0
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f001 f9ef 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d003      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	2100      	movs	r1, #0
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	f003 0310 	and.w	r3, r3, #16
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c612:	460b      	mov	r3, r1
 800c614:	4313      	orrs	r3, r2
 800c616:	d011      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61c:	3328      	adds	r3, #40	@ 0x28
 800c61e:	2101      	movs	r1, #1
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f9cf 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c626:	4603      	mov	r3, r0
 800c628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c62c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	2100      	movs	r1, #0
 800c646:	6039      	str	r1, [r7, #0]
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	607b      	str	r3, [r7, #4]
 800c64e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c652:	460b      	mov	r3, r1
 800c654:	4313      	orrs	r3, r2
 800c656:	d011      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c65c:	3328      	adds	r3, #40	@ 0x28
 800c65e:	2102      	movs	r1, #2
 800c660:	4618      	mov	r0, r3
 800c662:	f001 f9af 	bl	800d9c4 <RCCEx_PLL3_Config>
 800c666:	4603      	mov	r3, r0
 800c668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c66c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c67c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	e000      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c690:	46bd      	mov	sp, r7
 800c692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c696:	bf00      	nop
 800c698:	58024400 	.word	0x58024400

0800c69c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b090      	sub	sp, #64	@ 0x40
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6aa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	f040 8094 	bne.w	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c6b4:	4b9b      	ldr	r3, [pc, #620]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	f200 8087 	bhi.w	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6e1 	.word	0x0800c6e1
 800c6d0:	0800c709 	.word	0x0800c709
 800c6d4:	0800c731 	.word	0x0800c731
 800c6d8:	0800c7cd 	.word	0x0800c7cd
 800c6dc:	0800c759 	.word	0x0800c759
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6e0:	4b90      	ldr	r3, [pc, #576]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c6ec:	d108      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 ff62 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6fc:	f000 bc93 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c704:	f000 bc8f 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c708:	4b86      	ldr	r3, [pc, #536]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c714:	d108      	bne.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c716:	f107 0318 	add.w	r3, r7, #24
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 fca6 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c724:	f000 bc7f 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c72c:	f000 bc7b 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c730:	4b7c      	ldr	r3, [pc, #496]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c73c:	d108      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c73e:	f107 030c 	add.w	r3, r7, #12
 800c742:	4618      	mov	r0, r3
 800c744:	f000 fde6 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74c:	f000 bc6b 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c754:	f000 bc67 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c758:	4b72      	ldr	r3, [pc, #456]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c75a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c75c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c760:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c762:	4b70      	ldr	r3, [pc, #448]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d10c      	bne.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c770:	2b00      	cmp	r3, #0
 800c772:	d109      	bne.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c774:	4b6b      	ldr	r3, [pc, #428]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	08db      	lsrs	r3, r3, #3
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	4a6a      	ldr	r2, [pc, #424]	@ (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c780:	fa22 f303 	lsr.w	r3, r2, r3
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c786:	e01f      	b.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c788:	4b66      	ldr	r3, [pc, #408]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c794:	d106      	bne.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c79c:	d102      	bne.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c79e:	4b63      	ldr	r3, [pc, #396]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7a2:	e011      	b.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7a4:	4b5f      	ldr	r3, [pc, #380]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7b0:	d106      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7b8:	d102      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7ba:	4b5d      	ldr	r3, [pc, #372]	@ (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7be:	e003      	b.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c7c4:	f000 bc2f 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7c8:	f000 bc2d 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7cc:	4b59      	ldr	r3, [pc, #356]	@ (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7d0:	f000 bc29 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7d8:	f000 bc25 	b.w	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	f040 80a7 	bne.w	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c7ea:	4b4e      	ldr	r3, [pc, #312]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c7f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7fa:	d054      	beq.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c802:	f200 808b 	bhi.w	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c808:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c80c:	f000 8083 	beq.w	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c812:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c816:	f200 8081 	bhi.w	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c820:	d02f      	beq.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c828:	d878      	bhi.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c836:	d012      	beq.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c838:	e070      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c83a:	4b3a      	ldr	r3, [pc, #232]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c846:	d107      	bne.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 feb5 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c856:	e3e6      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c85c:	e3e3      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c85e:	4b31      	ldr	r3, [pc, #196]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c86a:	d107      	bne.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c86c:	f107 0318 	add.w	r3, r7, #24
 800c870:	4618      	mov	r0, r3
 800c872:	f000 fbfb 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c87a:	e3d4      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c880:	e3d1      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c882:	4b28      	ldr	r3, [pc, #160]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c88a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c88e:	d107      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c890:	f107 030c 	add.w	r3, r7, #12
 800c894:	4618      	mov	r0, r3
 800c896:	f000 fd3d 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89e:	e3c2      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8a4:	e3bf      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8a6:	4b1f      	ldr	r3, [pc, #124]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c8ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	d10c      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d109      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8c2:	4b18      	ldr	r3, [pc, #96]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	08db      	lsrs	r3, r3, #3
 800c8c8:	f003 0303 	and.w	r3, r3, #3
 800c8cc:	4a16      	ldr	r2, [pc, #88]	@ (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c8ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8d4:	e01e      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8e2:	d106      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8ea:	d102      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8f0:	e010      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8fe:	d106      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c906:	d102      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c908:	4b09      	ldr	r3, [pc, #36]	@ (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c90c:	e002      	b.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c912:	e388      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c914:	e387      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c916:	4b07      	ldr	r3, [pc, #28]	@ (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c91a:	e384      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c920:	e381      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c922:	bf00      	nop
 800c924:	58024400 	.word	0x58024400
 800c928:	03d09000 	.word	0x03d09000
 800c92c:	003d0900 	.word	0x003d0900
 800c930:	016e3600 	.word	0x016e3600
 800c934:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c940:	430b      	orrs	r3, r1
 800c942:	f040 809c 	bne.w	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c946:	4b9e      	ldr	r3, [pc, #632]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c94a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c94e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c952:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c956:	d054      	beq.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c95e:	f200 808b 	bhi.w	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c968:	f000 8083 	beq.w	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c972:	f200 8081 	bhi.w	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c97c:	d02f      	beq.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c984:	d878      	bhi.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c992:	d012      	beq.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c994:	e070      	b.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c996:	4b8a      	ldr	r3, [pc, #552]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c99e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c9a2:	d107      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 fe07 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b2:	e338      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9b8:	e335      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9ba:	4b81      	ldr	r3, [pc, #516]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9c6:	d107      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9c8:	f107 0318 	add.w	r3, r7, #24
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 fb4d 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9d6:	e326      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9dc:	e323      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9de:	4b78      	ldr	r3, [pc, #480]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9ea:	d107      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ec:	f107 030c 	add.w	r3, r7, #12
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fc8f 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9fa:	e314      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca00:	e311      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca02:	4b6f      	ldr	r3, [pc, #444]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca0c:	4b6c      	ldr	r3, [pc, #432]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d10c      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ca18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca1e:	4b68      	ldr	r3, [pc, #416]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	08db      	lsrs	r3, r3, #3
 800ca24:	f003 0303 	and.w	r3, r3, #3
 800ca28:	4a66      	ldr	r2, [pc, #408]	@ (800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ca2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca30:	e01e      	b.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca32:	4b63      	ldr	r3, [pc, #396]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca3e:	d106      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ca40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca46:	d102      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca48:	4b5f      	ldr	r3, [pc, #380]	@ (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca4c:	e010      	b.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca4e:	4b5c      	ldr	r3, [pc, #368]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca5a:	d106      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ca5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca62:	d102      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca64:	4b59      	ldr	r3, [pc, #356]	@ (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca68:	e002      	b.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca6e:	e2da      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca70:	e2d9      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca72:	4b57      	ldr	r3, [pc, #348]	@ (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ca74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca76:	e2d6      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca7c:	e2d3      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca82:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ca86:	430b      	orrs	r3, r1
 800ca88:	f040 80a7 	bne.w	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca8c:	4b4c      	ldr	r3, [pc, #304]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca90:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ca94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ca96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca9c:	d055      	beq.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caa4:	f200 8096 	bhi.w	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800caae:	f000 8084 	beq.w	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cab8:	f200 808c 	bhi.w	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cac2:	d030      	beq.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caca:	f200 8083 	bhi.w	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cada:	d012      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cadc:	e07a      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cade:	4b38      	ldr	r3, [pc, #224]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800caea:	d107      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 fd63 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cafa:	e294      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb00:	e291      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb02:	4b2f      	ldr	r3, [pc, #188]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb0e:	d107      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb10:	f107 0318 	add.w	r3, r7, #24
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 faa9 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1e:	e282      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb24:	e27f      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb26:	4b26      	ldr	r3, [pc, #152]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb32:	d107      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb34:	f107 030c 	add.w	r3, r7, #12
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fbeb 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb42:	e270      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb48:	e26d      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb4a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb54:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	d10c      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d109      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb66:	4b16      	ldr	r3, [pc, #88]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	08db      	lsrs	r3, r3, #3
 800cb6c:	f003 0303 	and.w	r3, r3, #3
 800cb70:	4a14      	ldr	r2, [pc, #80]	@ (800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cb72:	fa22 f303 	lsr.w	r3, r2, r3
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb78:	e01e      	b.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb7a:	4b11      	ldr	r3, [pc, #68]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb86:	d106      	bne.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb8e:	d102      	bne.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb90:	4b0d      	ldr	r3, [pc, #52]	@ (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb94:	e010      	b.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb96:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cba2:	d106      	bne.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbaa:	d102      	bne.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbac:	4b07      	ldr	r3, [pc, #28]	@ (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbb0:	e002      	b.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cbb6:	e236      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbb8:	e235      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbba:	4b05      	ldr	r3, [pc, #20]	@ (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbbe:	e232      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbc0:	58024400 	.word	0x58024400
 800cbc4:	03d09000 	.word	0x03d09000
 800cbc8:	003d0900 	.word	0x003d0900
 800cbcc:	016e3600 	.word	0x016e3600
 800cbd0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd8:	e225      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbde:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cbe2:	430b      	orrs	r3, r1
 800cbe4:	f040 8085 	bne.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cbe8:	4b9c      	ldr	r3, [pc, #624]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cbf8:	d06b      	beq.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cc00:	d874      	bhi.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc08:	d056      	beq.n	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc10:	d86c      	bhi.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc18:	d03b      	beq.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc20:	d864      	bhi.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc28:	d021      	beq.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc30:	d85c      	bhi.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc3e:	d004      	beq.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cc40:	e054      	b.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cc42:	f7fe fb5f 	bl	800b304 <HAL_RCC_GetPCLK1Freq>
 800cc46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc48:	e1ed      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc4a:	4b84      	ldr	r3, [pc, #528]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc56:	d107      	bne.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc58:	f107 0318 	add.w	r3, r7, #24
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 fa05 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc66:	e1de      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc6c:	e1db      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc6e:	4b7b      	ldr	r3, [pc, #492]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc7a:	d107      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc7c:	f107 030c 	add.w	r3, r7, #12
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fb47 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc8a:	e1cc      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc90:	e1c9      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc92:	4b72      	ldr	r3, [pc, #456]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d109      	bne.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc9e:	4b6f      	ldr	r3, [pc, #444]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	08db      	lsrs	r3, r3, #3
 800cca4:	f003 0303 	and.w	r3, r3, #3
 800cca8:	4a6d      	ldr	r2, [pc, #436]	@ (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ccaa:	fa22 f303 	lsr.w	r3, r2, r3
 800ccae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccb0:	e1b9      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccb6:	e1b6      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ccb8:	4b68      	ldr	r3, [pc, #416]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccc4:	d102      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ccc6:	4b67      	ldr	r3, [pc, #412]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccca:	e1ac      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccd0:	e1a9      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccd2:	4b62      	ldr	r3, [pc, #392]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccde:	d102      	bne.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cce0:	4b61      	ldr	r3, [pc, #388]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce4:	e19f      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccea:	e19c      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ccec:	2300      	movs	r3, #0
 800ccee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccf0:	e199      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ccf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ccfa:	430b      	orrs	r3, r1
 800ccfc:	d173      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ccfe:	4b57      	ldr	r3, [pc, #348]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cd06:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd0e:	d02f      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd16:	d863      	bhi.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd24:	d012      	beq.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cd26:	e05b      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd28:	4b4c      	ldr	r3, [pc, #304]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd34:	d107      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd36:	f107 0318 	add.w	r3, r7, #24
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f996 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd44:	e16f      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd4a:	e16c      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd4c:	4b43      	ldr	r3, [pc, #268]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd58:	d107      	bne.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd5a:	f107 030c 	add.w	r3, r7, #12
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fad8 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd68:	e15d      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd6e:	e15a      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd70:	4b3a      	ldr	r3, [pc, #232]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd7a:	4b38      	ldr	r3, [pc, #224]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 0304 	and.w	r3, r3, #4
 800cd82:	2b04      	cmp	r3, #4
 800cd84:	d10c      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d109      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd8c:	4b33      	ldr	r3, [pc, #204]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	08db      	lsrs	r3, r3, #3
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	4a32      	ldr	r2, [pc, #200]	@ (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cd98:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd9e:	e01e      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cda0:	4b2e      	ldr	r3, [pc, #184]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cda8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdac:	d106      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cdae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdb4:	d102      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdb6:	4b2b      	ldr	r3, [pc, #172]	@ (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdba:	e010      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdbc:	4b27      	ldr	r3, [pc, #156]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdc8:	d106      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdd0:	d102      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdd2:	4b25      	ldr	r3, [pc, #148]	@ (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdd6:	e002      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cddc:	e123      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdde:	e122      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde4:	e11f      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cde6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdea:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cdee:	430b      	orrs	r3, r1
 800cdf0:	d13c      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cdf2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cdfa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d004      	beq.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce08:	d012      	beq.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ce0a:	e023      	b.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce0c:	4b13      	ldr	r3, [pc, #76]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce18:	d107      	bne.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fbcc 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce28:	e0fd      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce2e:	e0fa      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce30:	4b0a      	ldr	r3, [pc, #40]	@ (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce3c:	d107      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce3e:	f107 0318 	add.w	r3, r7, #24
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f912 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce4c:	e0eb      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce52:	e0e8      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce58:	e0e5      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce5a:	bf00      	nop
 800ce5c:	58024400 	.word	0x58024400
 800ce60:	03d09000 	.word	0x03d09000
 800ce64:	003d0900 	.word	0x003d0900
 800ce68:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ce6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce70:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ce74:	430b      	orrs	r3, r1
 800ce76:	f040 8085 	bne.w	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce7a:	4b6d      	ldr	r3, [pc, #436]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce7e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ce82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce8a:	d06b      	beq.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce92:	d874      	bhi.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce9a:	d056      	beq.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cea2:	d86c      	bhi.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ceaa:	d03b      	beq.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ceac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ceb2:	d864      	bhi.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ceba:	d021      	beq.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cec2:	d85c      	bhi.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d004      	beq.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ceca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ced0:	d004      	beq.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ced2:	e054      	b.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ced4:	f000 f8b4 	bl	800d040 <HAL_RCCEx_GetD3PCLK1Freq>
 800ced8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ceda:	e0a4      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cedc:	4b54      	ldr	r3, [pc, #336]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cee8:	d107      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceea:	f107 0318 	add.w	r3, r7, #24
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 f8bc 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef8:	e095      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cefe:	e092      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf00:	4b4b      	ldr	r3, [pc, #300]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf0c:	d107      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf0e:	f107 030c 	add.w	r3, r7, #12
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f9fe 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf1c:	e083      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf22:	e080      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf24:	4b42      	ldr	r3, [pc, #264]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	d109      	bne.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf30:	4b3f      	ldr	r3, [pc, #252]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	08db      	lsrs	r3, r3, #3
 800cf36:	f003 0303 	and.w	r3, r3, #3
 800cf3a:	4a3e      	ldr	r2, [pc, #248]	@ (800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cf3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf42:	e070      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf48:	e06d      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf4a:	4b39      	ldr	r3, [pc, #228]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf56:	d102      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800cf58:	4b37      	ldr	r3, [pc, #220]	@ (800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf5c:	e063      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf62:	e060      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf64:	4b32      	ldr	r3, [pc, #200]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf70:	d102      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800cf72:	4b32      	ldr	r3, [pc, #200]	@ (800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf76:	e056      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf7c:	e053      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf82:	e050      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf88:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cf8c:	430b      	orrs	r3, r1
 800cf8e:	d148      	bne.n	800d022 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf90:	4b27      	ldr	r3, [pc, #156]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa0:	d02a      	beq.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa8:	d838      	bhi.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfb6:	d00d      	beq.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cfb8:	e030      	b.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfba:	4b1d      	ldr	r3, [pc, #116]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfc6:	d102      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cfc8:	4b1c      	ldr	r3, [pc, #112]	@ (800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfcc:	e02b      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfd2:	e028      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfd4:	4b16      	ldr	r3, [pc, #88]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfe0:	d107      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fae8 	bl	800d5bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff0:	e019      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff6:	e016      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cff8:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d004:	d107      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d006:	f107 0318 	add.w	r3, r7, #24
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f82e 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d014:	e007      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d01a:	e004      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d020:	e001      	b.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3740      	adds	r7, #64	@ 0x40
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	58024400 	.word	0x58024400
 800d034:	03d09000 	.word	0x03d09000
 800d038:	003d0900 	.word	0x003d0900
 800d03c:	016e3600 	.word	0x016e3600

0800d040 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d044:	f7fe f92e 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800d048:	4602      	mov	r2, r0
 800d04a:	4b06      	ldr	r3, [pc, #24]	@ (800d064 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	091b      	lsrs	r3, r3, #4
 800d050:	f003 0307 	and.w	r3, r3, #7
 800d054:	4904      	ldr	r1, [pc, #16]	@ (800d068 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d056:	5ccb      	ldrb	r3, [r1, r3]
 800d058:	f003 031f 	and.w	r3, r3, #31
 800d05c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d060:	4618      	mov	r0, r3
 800d062:	bd80      	pop	{r7, pc}
 800d064:	58024400 	.word	0x58024400
 800d068:	08019884 	.word	0x08019884

0800d06c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b089      	sub	sp, #36	@ 0x24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d074:	4ba1      	ldr	r3, [pc, #644]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d078:	f003 0303 	and.w	r3, r3, #3
 800d07c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d07e:	4b9f      	ldr	r3, [pc, #636]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d082:	0b1b      	lsrs	r3, r3, #12
 800d084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d088:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d08a:	4b9c      	ldr	r3, [pc, #624]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08e:	091b      	lsrs	r3, r3, #4
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d096:	4b99      	ldr	r3, [pc, #612]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d09a:	08db      	lsrs	r3, r3, #3
 800d09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	fb02 f303 	mul.w	r3, r2, r3
 800d0a6:	ee07 3a90 	vmov	s15, r3
 800d0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8111 	beq.w	800d2dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	f000 8083 	beq.w	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	f200 80a1 	bhi.w	800d20c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d003      	beq.n	800d0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d056      	beq.n	800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d0d6:	e099      	b.n	800d20c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0d8:	4b88      	ldr	r3, [pc, #544]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0320 	and.w	r3, r3, #32
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d02d      	beq.n	800d140 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0e4:	4b85      	ldr	r3, [pc, #532]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	08db      	lsrs	r3, r3, #3
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	4a84      	ldr	r2, [pc, #528]	@ (800d300 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	ee07 3a90 	vmov	s15, r3
 800d0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d10e:	4b7b      	ldr	r3, [pc, #492]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d13e:	e087      	b.n	800d250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d308 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d152:	4b6a      	ldr	r3, [pc, #424]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d162:	ed97 6a03 	vldr	s12, [r7, #12]
 800d166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d182:	e065      	b.n	800d250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d30c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d196:	4b59      	ldr	r3, [pc, #356]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c6:	e043      	b.n	800d250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	ee07 3a90 	vmov	s15, r3
 800d1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1da:	4b48      	ldr	r3, [pc, #288]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e2:	ee07 3a90 	vmov	s15, r3
 800d1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d20a:	e021      	b.n	800d250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d30c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d21e:	4b37      	ldr	r3, [pc, #220]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d23e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d24e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d250:	4b2a      	ldr	r3, [pc, #168]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d254:	0a5b      	lsrs	r3, r3, #9
 800d256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d26a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d276:	ee17 2a90 	vmov	r2, s15
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d27e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d282:	0c1b      	lsrs	r3, r3, #16
 800d284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d288:	ee07 3a90 	vmov	s15, r3
 800d28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d294:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d298:	edd7 6a07 	vldr	s13, [r7, #28]
 800d29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2a4:	ee17 2a90 	vmov	r2, s15
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d2ac:	4b13      	ldr	r3, [pc, #76]	@ (800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b0:	0e1b      	lsrs	r3, r3, #24
 800d2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2d2:	ee17 2a90 	vmov	r2, s15
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d2da:	e008      	b.n	800d2ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	609a      	str	r2, [r3, #8]
}
 800d2ee:	bf00      	nop
 800d2f0:	3724      	adds	r7, #36	@ 0x24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	58024400 	.word	0x58024400
 800d300:	03d09000 	.word	0x03d09000
 800d304:	46000000 	.word	0x46000000
 800d308:	4c742400 	.word	0x4c742400
 800d30c:	4a742400 	.word	0x4a742400
 800d310:	4bb71b00 	.word	0x4bb71b00

0800d314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d314:	b480      	push	{r7}
 800d316:	b089      	sub	sp, #36	@ 0x24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d31c:	4ba1      	ldr	r3, [pc, #644]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d320:	f003 0303 	and.w	r3, r3, #3
 800d324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d326:	4b9f      	ldr	r3, [pc, #636]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32a:	0d1b      	lsrs	r3, r3, #20
 800d32c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d332:	4b9c      	ldr	r3, [pc, #624]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d336:	0a1b      	lsrs	r3, r3, #8
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d33e:	4b99      	ldr	r3, [pc, #612]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d342:	08db      	lsrs	r3, r3, #3
 800d344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	fb02 f303 	mul.w	r3, r2, r3
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 8111 	beq.w	800d584 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b02      	cmp	r3, #2
 800d366:	f000 8083 	beq.w	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	f200 80a1 	bhi.w	800d4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d056      	beq.n	800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d37e:	e099      	b.n	800d4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d380:	4b88      	ldr	r3, [pc, #544]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 0320 	and.w	r3, r3, #32
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d02d      	beq.n	800d3e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d38c:	4b85      	ldr	r3, [pc, #532]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	08db      	lsrs	r3, r3, #3
 800d392:	f003 0303 	and.w	r3, r3, #3
 800d396:	4a84      	ldr	r2, [pc, #528]	@ (800d5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d398:	fa22 f303 	lsr.w	r3, r2, r3
 800d39c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	ee07 3a90 	vmov	s15, r3
 800d3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b6:	4b7b      	ldr	r3, [pc, #492]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3e6:	e087      	b.n	800d4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3fa:	4b6a      	ldr	r3, [pc, #424]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d42a:	e065      	b.n	800d4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d436:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43e:	4b59      	ldr	r3, [pc, #356]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d452:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d46e:	e043      	b.n	800d4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d47a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d482:	4b48      	ldr	r3, [pc, #288]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d48a:	ee07 3a90 	vmov	s15, r3
 800d48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d492:	ed97 6a03 	vldr	s12, [r7, #12]
 800d496:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4b2:	e021      	b.n	800d4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c6:	4b37      	ldr	r3, [pc, #220]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d4f8:	4b2a      	ldr	r3, [pc, #168]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fc:	0a5b      	lsrs	r3, r3, #9
 800d4fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d502:	ee07 3a90 	vmov	s15, r3
 800d506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d50a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d50e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d512:	edd7 6a07 	vldr	s13, [r7, #28]
 800d516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d51e:	ee17 2a90 	vmov	r2, s15
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d526:	4b1f      	ldr	r3, [pc, #124]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d530:	ee07 3a90 	vmov	s15, r3
 800d534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d53c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d540:	edd7 6a07 	vldr	s13, [r7, #28]
 800d544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d54c:	ee17 2a90 	vmov	r2, s15
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d554:	4b13      	ldr	r3, [pc, #76]	@ (800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d558:	0e1b      	lsrs	r3, r3, #24
 800d55a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d56a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d56e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d57a:	ee17 2a90 	vmov	r2, s15
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d582:	e008      	b.n	800d596 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	609a      	str	r2, [r3, #8]
}
 800d596:	bf00      	nop
 800d598:	3724      	adds	r7, #36	@ 0x24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	58024400 	.word	0x58024400
 800d5a8:	03d09000 	.word	0x03d09000
 800d5ac:	46000000 	.word	0x46000000
 800d5b0:	4c742400 	.word	0x4c742400
 800d5b4:	4a742400 	.word	0x4a742400
 800d5b8:	4bb71b00 	.word	0x4bb71b00

0800d5bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b089      	sub	sp, #36	@ 0x24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5c4:	4ba0      	ldr	r3, [pc, #640]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d5ce:	4b9e      	ldr	r3, [pc, #632]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d2:	091b      	lsrs	r3, r3, #4
 800d5d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d5da:	4b9b      	ldr	r3, [pc, #620]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5e4:	4b98      	ldr	r3, [pc, #608]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e8:	08db      	lsrs	r3, r3, #3
 800d5ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	fb02 f303 	mul.w	r3, r2, r3
 800d5f4:	ee07 3a90 	vmov	s15, r3
 800d5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 8111 	beq.w	800d82a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	f000 8083 	beq.w	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2b02      	cmp	r3, #2
 800d614:	f200 80a1 	bhi.w	800d75a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d056      	beq.n	800d6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d624:	e099      	b.n	800d75a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d626:	4b88      	ldr	r3, [pc, #544]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0320 	and.w	r3, r3, #32
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d02d      	beq.n	800d68e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d632:	4b85      	ldr	r3, [pc, #532]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	08db      	lsrs	r3, r3, #3
 800d638:	f003 0303 	and.w	r3, r3, #3
 800d63c:	4a83      	ldr	r2, [pc, #524]	@ (800d84c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d63e:	fa22 f303 	lsr.w	r3, r2, r3
 800d642:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d65c:	4b7a      	ldr	r3, [pc, #488]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d664:	ee07 3a90 	vmov	s15, r3
 800d668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d670:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d67c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d688:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d68c:	e087      	b.n	800d79e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d698:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d854 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a0:	4b69      	ldr	r3, [pc, #420]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6d0:	e065      	b.n	800d79e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6dc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d858 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e4:	4b58      	ldr	r3, [pc, #352]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d714:	e043      	b.n	800d79e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	ee07 3a90 	vmov	s15, r3
 800d71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d720:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d85c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d728:	4b47      	ldr	r3, [pc, #284]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d730:	ee07 3a90 	vmov	s15, r3
 800d734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d738:	ed97 6a03 	vldr	s12, [r7, #12]
 800d73c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d758:	e021      	b.n	800d79e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	ee07 3a90 	vmov	s15, r3
 800d760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d764:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d854 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d76c:	4b36      	ldr	r3, [pc, #216]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d774:	ee07 3a90 	vmov	s15, r3
 800d778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d77c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d780:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d850 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d78c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d79c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d79e:	4b2a      	ldr	r3, [pc, #168]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a2:	0a5b      	lsrs	r3, r3, #9
 800d7a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7a8:	ee07 3a90 	vmov	s15, r3
 800d7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7c4:	ee17 2a90 	vmov	r2, s15
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d0:	0c1b      	lsrs	r3, r3, #16
 800d7d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7d6:	ee07 3a90 	vmov	s15, r3
 800d7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f2:	ee17 2a90 	vmov	r2, s15
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d7fa:	4b13      	ldr	r3, [pc, #76]	@ (800d848 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fe:	0e1b      	lsrs	r3, r3, #24
 800d800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d810:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d814:	edd7 6a07 	vldr	s13, [r7, #28]
 800d818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d820:	ee17 2a90 	vmov	r2, s15
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d828:	e008      	b.n	800d83c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	609a      	str	r2, [r3, #8]
}
 800d83c:	bf00      	nop
 800d83e:	3724      	adds	r7, #36	@ 0x24
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	58024400 	.word	0x58024400
 800d84c:	03d09000 	.word	0x03d09000
 800d850:	46000000 	.word	0x46000000
 800d854:	4c742400 	.word	0x4c742400
 800d858:	4a742400 	.word	0x4a742400
 800d85c:	4bb71b00 	.word	0x4bb71b00

0800d860 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d86e:	4b53      	ldr	r3, [pc, #332]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	2b03      	cmp	r3, #3
 800d878:	d101      	bne.n	800d87e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	e099      	b.n	800d9b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d87e:	4b4f      	ldr	r3, [pc, #316]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a4e      	ldr	r2, [pc, #312]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d884:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d88a:	f7f6 ff53 	bl	8004734 <HAL_GetTick>
 800d88e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d890:	e008      	b.n	800d8a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d892:	f7f6 ff4f 	bl	8004734 <HAL_GetTick>
 800d896:	4602      	mov	r2, r0
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d901      	bls.n	800d8a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e086      	b.n	800d9b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8a4:	4b45      	ldr	r3, [pc, #276]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1f0      	bne.n	800d892 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8b0:	4b42      	ldr	r3, [pc, #264]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	031b      	lsls	r3, r3, #12
 800d8be:	493f      	ldr	r1, [pc, #252]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	025b      	lsls	r3, r3, #9
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	041b      	lsls	r3, r3, #16
 800d8e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	061b      	lsls	r3, r3, #24
 800d8f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d8f4:	4931      	ldr	r1, [pc, #196]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d8fa:	4b30      	ldr	r3, [pc, #192]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	492d      	ldr	r1, [pc, #180]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d908:	4313      	orrs	r3, r2
 800d90a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d90c:	4b2b      	ldr	r3, [pc, #172]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d910:	f023 0220 	bic.w	r2, r3, #32
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	4928      	ldr	r1, [pc, #160]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d91e:	4b27      	ldr	r3, [pc, #156]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d922:	4a26      	ldr	r2, [pc, #152]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d924:	f023 0310 	bic.w	r3, r3, #16
 800d928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d92a:	4b24      	ldr	r3, [pc, #144]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d92c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d92e:	4b24      	ldr	r3, [pc, #144]	@ (800d9c0 <RCCEx_PLL2_Config+0x160>)
 800d930:	4013      	ands	r3, r2
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	69d2      	ldr	r2, [r2, #28]
 800d936:	00d2      	lsls	r2, r2, #3
 800d938:	4920      	ldr	r1, [pc, #128]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d93a:	4313      	orrs	r3, r2
 800d93c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d93e:	4b1f      	ldr	r3, [pc, #124]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	4a1e      	ldr	r2, [pc, #120]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d944:	f043 0310 	orr.w	r3, r3, #16
 800d948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d950:	4b1a      	ldr	r3, [pc, #104]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d954:	4a19      	ldr	r2, [pc, #100]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d956:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d95a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d95c:	e00f      	b.n	800d97e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d106      	bne.n	800d972 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d964:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	4a14      	ldr	r2, [pc, #80]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d96a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d96e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d970:	e005      	b.n	800d97e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d972:	4b12      	ldr	r3, [pc, #72]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	4a11      	ldr	r2, [pc, #68]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d978:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d97c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d97e:	4b0f      	ldr	r3, [pc, #60]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a0e      	ldr	r2, [pc, #56]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d984:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d98a:	f7f6 fed3 	bl	8004734 <HAL_GetTick>
 800d98e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d990:	e008      	b.n	800d9a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d992:	f7f6 fecf 	bl	8004734 <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d901      	bls.n	800d9a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e006      	b.n	800d9b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9a4:	4b05      	ldr	r3, [pc, #20]	@ (800d9bc <RCCEx_PLL2_Config+0x15c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d0f0      	beq.n	800d992 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	58024400 	.word	0x58024400
 800d9c0:	ffff0007 	.word	0xffff0007

0800d9c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9d2:	4b53      	ldr	r3, [pc, #332]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800d9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d6:	f003 0303 	and.w	r3, r3, #3
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	d101      	bne.n	800d9e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e099      	b.n	800db16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d9e2:	4b4f      	ldr	r3, [pc, #316]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a4e      	ldr	r2, [pc, #312]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ee:	f7f6 fea1 	bl	8004734 <HAL_GetTick>
 800d9f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9f4:	e008      	b.n	800da08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9f6:	f7f6 fe9d 	bl	8004734 <HAL_GetTick>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	2b02      	cmp	r3, #2
 800da02:	d901      	bls.n	800da08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da04:	2303      	movs	r3, #3
 800da06:	e086      	b.n	800db16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da08:	4b45      	ldr	r3, [pc, #276]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1f0      	bne.n	800d9f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da14:	4b42      	ldr	r3, [pc, #264]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	051b      	lsls	r3, r3, #20
 800da22:	493f      	ldr	r1, [pc, #252]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da24:	4313      	orrs	r3, r2
 800da26:	628b      	str	r3, [r1, #40]	@ 0x28
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	3b01      	subs	r3, #1
 800da38:	025b      	lsls	r3, r3, #9
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	431a      	orrs	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	3b01      	subs	r3, #1
 800da44:	041b      	lsls	r3, r3, #16
 800da46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800da4a:	431a      	orrs	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	3b01      	subs	r3, #1
 800da52:	061b      	lsls	r3, r3, #24
 800da54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800da58:	4931      	ldr	r1, [pc, #196]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da5a:	4313      	orrs	r3, r2
 800da5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da5e:	4b30      	ldr	r3, [pc, #192]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	492d      	ldr	r1, [pc, #180]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da6c:	4313      	orrs	r3, r2
 800da6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da70:	4b2b      	ldr	r3, [pc, #172]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	4928      	ldr	r1, [pc, #160]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da7e:	4313      	orrs	r3, r2
 800da80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da82:	4b27      	ldr	r3, [pc, #156]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da86:	4a26      	ldr	r2, [pc, #152]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da8e:	4b24      	ldr	r3, [pc, #144]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da92:	4b24      	ldr	r3, [pc, #144]	@ (800db24 <RCCEx_PLL3_Config+0x160>)
 800da94:	4013      	ands	r3, r2
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	69d2      	ldr	r2, [r2, #28]
 800da9a:	00d2      	lsls	r2, r2, #3
 800da9c:	4920      	ldr	r1, [pc, #128]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800daa2:	4b1f      	ldr	r3, [pc, #124]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800daa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa6:	4a1e      	ldr	r2, [pc, #120]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800daa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800daac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dab4:	4b1a      	ldr	r3, [pc, #104]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab8:	4a19      	ldr	r2, [pc, #100]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800daba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dabe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dac0:	e00f      	b.n	800dae2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d106      	bne.n	800dad6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dac8:	4b15      	ldr	r3, [pc, #84]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dacc:	4a14      	ldr	r2, [pc, #80]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dad4:	e005      	b.n	800dae2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dad6:	4b12      	ldr	r3, [pc, #72]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dada:	4a11      	ldr	r2, [pc, #68]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dadc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dae2:	4b0f      	ldr	r3, [pc, #60]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a0e      	ldr	r2, [pc, #56]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800dae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800daec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800daee:	f7f6 fe21 	bl	8004734 <HAL_GetTick>
 800daf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800daf4:	e008      	b.n	800db08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800daf6:	f7f6 fe1d 	bl	8004734 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	2b02      	cmp	r3, #2
 800db02:	d901      	bls.n	800db08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	e006      	b.n	800db16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db08:	4b05      	ldr	r3, [pc, #20]	@ (800db20 <RCCEx_PLL3_Config+0x15c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0f0      	beq.n	800daf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db14:	7bfb      	ldrb	r3, [r7, #15]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	58024400 	.word	0x58024400
 800db24:	ffff0007 	.word	0xffff0007

0800db28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e10f      	b.n	800dd5a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a87      	ldr	r2, [pc, #540]	@ (800dd64 <HAL_SPI_Init+0x23c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d00f      	beq.n	800db6a <HAL_SPI_Init+0x42>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a86      	ldr	r2, [pc, #536]	@ (800dd68 <HAL_SPI_Init+0x240>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d00a      	beq.n	800db6a <HAL_SPI_Init+0x42>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a84      	ldr	r2, [pc, #528]	@ (800dd6c <HAL_SPI_Init+0x244>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d005      	beq.n	800db6a <HAL_SPI_Init+0x42>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	2b0f      	cmp	r3, #15
 800db64:	d901      	bls.n	800db6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	e0f7      	b.n	800dd5a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f900 	bl	800dd70 <SPI_GetPacketSize>
 800db70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a7b      	ldr	r2, [pc, #492]	@ (800dd64 <HAL_SPI_Init+0x23c>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d00c      	beq.n	800db96 <HAL_SPI_Init+0x6e>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a79      	ldr	r2, [pc, #484]	@ (800dd68 <HAL_SPI_Init+0x240>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d007      	beq.n	800db96 <HAL_SPI_Init+0x6e>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a78      	ldr	r2, [pc, #480]	@ (800dd6c <HAL_SPI_Init+0x244>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d002      	beq.n	800db96 <HAL_SPI_Init+0x6e>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b08      	cmp	r3, #8
 800db94:	d811      	bhi.n	800dbba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db9a:	4a72      	ldr	r2, [pc, #456]	@ (800dd64 <HAL_SPI_Init+0x23c>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d009      	beq.n	800dbb4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a70      	ldr	r2, [pc, #448]	@ (800dd68 <HAL_SPI_Init+0x240>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d004      	beq.n	800dbb4 <HAL_SPI_Init+0x8c>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a6f      	ldr	r2, [pc, #444]	@ (800dd6c <HAL_SPI_Init+0x244>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d104      	bne.n	800dbbe <HAL_SPI_Init+0x96>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b10      	cmp	r3, #16
 800dbb8:	d901      	bls.n	800dbbe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e0cd      	b.n	800dd5a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7f4 f844 	bl	8001c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0201 	bic.w	r2, r2, #1
 800dbee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800dbfa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc04:	d119      	bne.n	800dc3a <HAL_SPI_Init+0x112>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc0e:	d103      	bne.n	800dc18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d008      	beq.n	800dc2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10c      	bne.n	800dc3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc28:	d107      	bne.n	800dc3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dc38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00f      	beq.n	800dc66 <HAL_SPI_Init+0x13e>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	2b06      	cmp	r3, #6
 800dc4c:	d90b      	bls.n	800dc66 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	430a      	orrs	r2, r1
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	e007      	b.n	800dc76 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dc74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	69da      	ldr	r2, [r3, #28]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7e:	431a      	orrs	r2, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	431a      	orrs	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc88:	ea42 0103 	orr.w	r1, r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68da      	ldr	r2, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	430a      	orrs	r2, r1
 800dc96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	431a      	orrs	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	431a      	orrs	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	431a      	orrs	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcca:	431a      	orrs	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	431a      	orrs	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcd6:	ea42 0103 	orr.w	r1, r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	430a      	orrs	r2, r1
 800dce4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d113      	bne.n	800dd16 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dd14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00a      	beq.n	800dd48 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	430a      	orrs	r2, r1
 800dd46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	40013000 	.word	0x40013000
 800dd68:	40003800 	.word	0x40003800
 800dd6c:	40003c00 	.word	0x40003c00

0800dd70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd7c:	095b      	lsrs	r3, r3, #5
 800dd7e:	3301      	adds	r3, #1
 800dd80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	3301      	adds	r3, #1
 800dd88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	3307      	adds	r3, #7
 800dd8e:	08db      	lsrs	r3, r3, #3
 800dd90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	fb02 f303 	mul.w	r3, r2, r3
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e049      	b.n	800de4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7f4 f84f 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3304      	adds	r3, #4
 800dde2:	4619      	mov	r1, r3
 800dde4:	4610      	mov	r0, r2
 800dde6:	f000 fe89 	bl	800eafc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2201      	movs	r2, #1
 800de0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2201      	movs	r2, #1
 800de16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2201      	movs	r2, #1
 800de2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800de54:	b480      	push	{r7}
 800de56:	b085      	sub	sp, #20
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b01      	cmp	r3, #1
 800de66:	d001      	beq.n	800de6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800de68:	2301      	movs	r3, #1
 800de6a:	e056      	b.n	800df1a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2202      	movs	r2, #2
 800de70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a2b      	ldr	r2, [pc, #172]	@ (800df28 <HAL_TIM_Base_Start+0xd4>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d02c      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de86:	d027      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a27      	ldr	r2, [pc, #156]	@ (800df2c <HAL_TIM_Base_Start+0xd8>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d022      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a26      	ldr	r2, [pc, #152]	@ (800df30 <HAL_TIM_Base_Start+0xdc>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d01d      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a24      	ldr	r2, [pc, #144]	@ (800df34 <HAL_TIM_Base_Start+0xe0>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d018      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a23      	ldr	r2, [pc, #140]	@ (800df38 <HAL_TIM_Base_Start+0xe4>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d013      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a21      	ldr	r2, [pc, #132]	@ (800df3c <HAL_TIM_Base_Start+0xe8>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d00e      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a20      	ldr	r2, [pc, #128]	@ (800df40 <HAL_TIM_Base_Start+0xec>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d009      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a1e      	ldr	r2, [pc, #120]	@ (800df44 <HAL_TIM_Base_Start+0xf0>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d004      	beq.n	800ded8 <HAL_TIM_Base_Start+0x84>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4a1d      	ldr	r2, [pc, #116]	@ (800df48 <HAL_TIM_Base_Start+0xf4>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d115      	bne.n	800df04 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	689a      	ldr	r2, [r3, #8]
 800dede:	4b1b      	ldr	r3, [pc, #108]	@ (800df4c <HAL_TIM_Base_Start+0xf8>)
 800dee0:	4013      	ands	r3, r2
 800dee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b06      	cmp	r3, #6
 800dee8:	d015      	beq.n	800df16 <HAL_TIM_Base_Start+0xc2>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800def0:	d011      	beq.n	800df16 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f042 0201 	orr.w	r2, r2, #1
 800df00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df02:	e008      	b.n	800df16 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f042 0201 	orr.w	r2, r2, #1
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	e000      	b.n	800df18 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	40010000 	.word	0x40010000
 800df2c:	40000400 	.word	0x40000400
 800df30:	40000800 	.word	0x40000800
 800df34:	40000c00 	.word	0x40000c00
 800df38:	40010400 	.word	0x40010400
 800df3c:	40001800 	.word	0x40001800
 800df40:	40014000 	.word	0x40014000
 800df44:	4000e000 	.word	0x4000e000
 800df48:	4000e400 	.word	0x4000e400
 800df4c:	00010007 	.word	0x00010007

0800df50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b01      	cmp	r3, #1
 800df62:	d001      	beq.n	800df68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df64:	2301      	movs	r3, #1
 800df66:	e05e      	b.n	800e026 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2202      	movs	r2, #2
 800df6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f042 0201 	orr.w	r2, r2, #1
 800df7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a2b      	ldr	r2, [pc, #172]	@ (800e034 <HAL_TIM_Base_Start_IT+0xe4>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d02c      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df92:	d027      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a27      	ldr	r2, [pc, #156]	@ (800e038 <HAL_TIM_Base_Start_IT+0xe8>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d022      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a26      	ldr	r2, [pc, #152]	@ (800e03c <HAL_TIM_Base_Start_IT+0xec>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d01d      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a24      	ldr	r2, [pc, #144]	@ (800e040 <HAL_TIM_Base_Start_IT+0xf0>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d018      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a23      	ldr	r2, [pc, #140]	@ (800e044 <HAL_TIM_Base_Start_IT+0xf4>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d013      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a21      	ldr	r2, [pc, #132]	@ (800e048 <HAL_TIM_Base_Start_IT+0xf8>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d00e      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a20      	ldr	r2, [pc, #128]	@ (800e04c <HAL_TIM_Base_Start_IT+0xfc>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d009      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a1e      	ldr	r2, [pc, #120]	@ (800e050 <HAL_TIM_Base_Start_IT+0x100>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d004      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x94>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a1d      	ldr	r2, [pc, #116]	@ (800e054 <HAL_TIM_Base_Start_IT+0x104>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d115      	bne.n	800e010 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	689a      	ldr	r2, [r3, #8]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	@ (800e058 <HAL_TIM_Base_Start_IT+0x108>)
 800dfec:	4013      	ands	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b06      	cmp	r3, #6
 800dff4:	d015      	beq.n	800e022 <HAL_TIM_Base_Start_IT+0xd2>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dffc:	d011      	beq.n	800e022 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f042 0201 	orr.w	r2, r2, #1
 800e00c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e00e:	e008      	b.n	800e022 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0201 	orr.w	r2, r2, #1
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	e000      	b.n	800e024 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	40010000 	.word	0x40010000
 800e038:	40000400 	.word	0x40000400
 800e03c:	40000800 	.word	0x40000800
 800e040:	40000c00 	.word	0x40000c00
 800e044:	40010400 	.word	0x40010400
 800e048:	40001800 	.word	0x40001800
 800e04c:	40014000 	.word	0x40014000
 800e050:	4000e000 	.word	0x4000e000
 800e054:	4000e400 	.word	0x4000e400
 800e058:	00010007 	.word	0x00010007

0800e05c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e049      	b.n	800e102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f841 	bl	800e10a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2202      	movs	r2, #2
 800e08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f000 fd2e 	bl	800eafc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e112:	bf00      	nop
 800e114:	370c      	adds	r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
	...

0800e120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d109      	bne.n	800e144 <HAL_TIM_PWM_Start+0x24>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b01      	cmp	r3, #1
 800e13a:	bf14      	ite	ne
 800e13c:	2301      	movne	r3, #1
 800e13e:	2300      	moveq	r3, #0
 800e140:	b2db      	uxtb	r3, r3
 800e142:	e03c      	b.n	800e1be <HAL_TIM_PWM_Start+0x9e>
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b04      	cmp	r3, #4
 800e148:	d109      	bne.n	800e15e <HAL_TIM_PWM_Start+0x3e>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b01      	cmp	r3, #1
 800e154:	bf14      	ite	ne
 800e156:	2301      	movne	r3, #1
 800e158:	2300      	moveq	r3, #0
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	e02f      	b.n	800e1be <HAL_TIM_PWM_Start+0x9e>
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b08      	cmp	r3, #8
 800e162:	d109      	bne.n	800e178 <HAL_TIM_PWM_Start+0x58>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	bf14      	ite	ne
 800e170:	2301      	movne	r3, #1
 800e172:	2300      	moveq	r3, #0
 800e174:	b2db      	uxtb	r3, r3
 800e176:	e022      	b.n	800e1be <HAL_TIM_PWM_Start+0x9e>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b0c      	cmp	r3, #12
 800e17c:	d109      	bne.n	800e192 <HAL_TIM_PWM_Start+0x72>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b01      	cmp	r3, #1
 800e188:	bf14      	ite	ne
 800e18a:	2301      	movne	r3, #1
 800e18c:	2300      	moveq	r3, #0
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	e015      	b.n	800e1be <HAL_TIM_PWM_Start+0x9e>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	2b10      	cmp	r3, #16
 800e196:	d109      	bne.n	800e1ac <HAL_TIM_PWM_Start+0x8c>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	bf14      	ite	ne
 800e1a4:	2301      	movne	r3, #1
 800e1a6:	2300      	moveq	r3, #0
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	e008      	b.n	800e1be <HAL_TIM_PWM_Start+0x9e>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	bf14      	ite	ne
 800e1b8:	2301      	movne	r3, #1
 800e1ba:	2300      	moveq	r3, #0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e0ab      	b.n	800e31e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d104      	bne.n	800e1d6 <HAL_TIM_PWM_Start+0xb6>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1d4:	e023      	b.n	800e21e <HAL_TIM_PWM_Start+0xfe>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b04      	cmp	r3, #4
 800e1da:	d104      	bne.n	800e1e6 <HAL_TIM_PWM_Start+0xc6>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2202      	movs	r2, #2
 800e1e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1e4:	e01b      	b.n	800e21e <HAL_TIM_PWM_Start+0xfe>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b08      	cmp	r3, #8
 800e1ea:	d104      	bne.n	800e1f6 <HAL_TIM_PWM_Start+0xd6>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1f4:	e013      	b.n	800e21e <HAL_TIM_PWM_Start+0xfe>
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b0c      	cmp	r3, #12
 800e1fa:	d104      	bne.n	800e206 <HAL_TIM_PWM_Start+0xe6>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2202      	movs	r2, #2
 800e200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e204:	e00b      	b.n	800e21e <HAL_TIM_PWM_Start+0xfe>
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b10      	cmp	r3, #16
 800e20a:	d104      	bne.n	800e216 <HAL_TIM_PWM_Start+0xf6>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2202      	movs	r2, #2
 800e210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e214:	e003      	b.n	800e21e <HAL_TIM_PWM_Start+0xfe>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2202      	movs	r2, #2
 800e21a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2201      	movs	r2, #1
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	4618      	mov	r0, r3
 800e228:	f001 f88e 	bl	800f348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a3d      	ldr	r2, [pc, #244]	@ (800e328 <HAL_TIM_PWM_Start+0x208>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d013      	beq.n	800e25e <HAL_TIM_PWM_Start+0x13e>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a3c      	ldr	r2, [pc, #240]	@ (800e32c <HAL_TIM_PWM_Start+0x20c>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d00e      	beq.n	800e25e <HAL_TIM_PWM_Start+0x13e>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a3a      	ldr	r2, [pc, #232]	@ (800e330 <HAL_TIM_PWM_Start+0x210>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d009      	beq.n	800e25e <HAL_TIM_PWM_Start+0x13e>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a39      	ldr	r2, [pc, #228]	@ (800e334 <HAL_TIM_PWM_Start+0x214>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d004      	beq.n	800e25e <HAL_TIM_PWM_Start+0x13e>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a37      	ldr	r2, [pc, #220]	@ (800e338 <HAL_TIM_PWM_Start+0x218>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d101      	bne.n	800e262 <HAL_TIM_PWM_Start+0x142>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <HAL_TIM_PWM_Start+0x144>
 800e262:	2300      	movs	r3, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d007      	beq.n	800e278 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e276:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a2a      	ldr	r2, [pc, #168]	@ (800e328 <HAL_TIM_PWM_Start+0x208>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d02c      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e28a:	d027      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a2a      	ldr	r2, [pc, #168]	@ (800e33c <HAL_TIM_PWM_Start+0x21c>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d022      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a29      	ldr	r2, [pc, #164]	@ (800e340 <HAL_TIM_PWM_Start+0x220>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d01d      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a27      	ldr	r2, [pc, #156]	@ (800e344 <HAL_TIM_PWM_Start+0x224>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d018      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800e32c <HAL_TIM_PWM_Start+0x20c>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d013      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a23      	ldr	r2, [pc, #140]	@ (800e348 <HAL_TIM_PWM_Start+0x228>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d00e      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a1b      	ldr	r2, [pc, #108]	@ (800e330 <HAL_TIM_PWM_Start+0x210>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d009      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1f      	ldr	r2, [pc, #124]	@ (800e34c <HAL_TIM_PWM_Start+0x22c>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d004      	beq.n	800e2dc <HAL_TIM_PWM_Start+0x1bc>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a1e      	ldr	r2, [pc, #120]	@ (800e350 <HAL_TIM_PWM_Start+0x230>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d115      	bne.n	800e308 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	689a      	ldr	r2, [r3, #8]
 800e2e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e354 <HAL_TIM_PWM_Start+0x234>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b06      	cmp	r3, #6
 800e2ec:	d015      	beq.n	800e31a <HAL_TIM_PWM_Start+0x1fa>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2f4:	d011      	beq.n	800e31a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f042 0201 	orr.w	r2, r2, #1
 800e304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e306:	e008      	b.n	800e31a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f042 0201 	orr.w	r2, r2, #1
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	e000      	b.n	800e31c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e31a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	40010000 	.word	0x40010000
 800e32c:	40010400 	.word	0x40010400
 800e330:	40014000 	.word	0x40014000
 800e334:	40014400 	.word	0x40014400
 800e338:	40014800 	.word	0x40014800
 800e33c:	40000400 	.word	0x40000400
 800e340:	40000800 	.word	0x40000800
 800e344:	40000c00 	.word	0x40000c00
 800e348:	40001800 	.word	0x40001800
 800e34c:	4000e000 	.word	0x4000e000
 800e350:	4000e400 	.word	0x4000e400
 800e354:	00010007 	.word	0x00010007

0800e358 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2200      	movs	r2, #0
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 ffec 	bl	800f348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a3e      	ldr	r2, [pc, #248]	@ (800e470 <HAL_TIM_PWM_Stop+0x118>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d013      	beq.n	800e3a2 <HAL_TIM_PWM_Stop+0x4a>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a3d      	ldr	r2, [pc, #244]	@ (800e474 <HAL_TIM_PWM_Stop+0x11c>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d00e      	beq.n	800e3a2 <HAL_TIM_PWM_Stop+0x4a>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a3b      	ldr	r2, [pc, #236]	@ (800e478 <HAL_TIM_PWM_Stop+0x120>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d009      	beq.n	800e3a2 <HAL_TIM_PWM_Stop+0x4a>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a3a      	ldr	r2, [pc, #232]	@ (800e47c <HAL_TIM_PWM_Stop+0x124>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d004      	beq.n	800e3a2 <HAL_TIM_PWM_Stop+0x4a>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a38      	ldr	r2, [pc, #224]	@ (800e480 <HAL_TIM_PWM_Stop+0x128>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d101      	bne.n	800e3a6 <HAL_TIM_PWM_Stop+0x4e>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e000      	b.n	800e3a8 <HAL_TIM_PWM_Stop+0x50>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d017      	beq.n	800e3dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6a1a      	ldr	r2, [r3, #32]
 800e3b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10f      	bne.n	800e3dc <HAL_TIM_PWM_Stop+0x84>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6a1a      	ldr	r2, [r3, #32]
 800e3c2:	f240 4344 	movw	r3, #1092	@ 0x444
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d107      	bne.n	800e3dc <HAL_TIM_PWM_Stop+0x84>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e3da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6a1a      	ldr	r2, [r3, #32]
 800e3e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10f      	bne.n	800e40c <HAL_TIM_PWM_Stop+0xb4>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6a1a      	ldr	r2, [r3, #32]
 800e3f2:	f240 4344 	movw	r3, #1092	@ 0x444
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d107      	bne.n	800e40c <HAL_TIM_PWM_Stop+0xb4>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f022 0201 	bic.w	r2, r2, #1
 800e40a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d104      	bne.n	800e41c <HAL_TIM_PWM_Stop+0xc4>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e41a:	e023      	b.n	800e464 <HAL_TIM_PWM_Stop+0x10c>
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d104      	bne.n	800e42c <HAL_TIM_PWM_Stop+0xd4>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e42a:	e01b      	b.n	800e464 <HAL_TIM_PWM_Stop+0x10c>
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b08      	cmp	r3, #8
 800e430:	d104      	bne.n	800e43c <HAL_TIM_PWM_Stop+0xe4>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e43a:	e013      	b.n	800e464 <HAL_TIM_PWM_Stop+0x10c>
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2b0c      	cmp	r3, #12
 800e440:	d104      	bne.n	800e44c <HAL_TIM_PWM_Stop+0xf4>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e44a:	e00b      	b.n	800e464 <HAL_TIM_PWM_Stop+0x10c>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b10      	cmp	r3, #16
 800e450:	d104      	bne.n	800e45c <HAL_TIM_PWM_Stop+0x104>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e45a:	e003      	b.n	800e464 <HAL_TIM_PWM_Stop+0x10c>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	40010000 	.word	0x40010000
 800e474:	40010400 	.word	0x40010400
 800e478:	40014000 	.word	0x40014000
 800e47c:	40014400 	.word	0x40014400
 800e480:	40014800 	.word	0x40014800

0800e484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d020      	beq.n	800e4e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f003 0302 	and.w	r3, r3, #2
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d01b      	beq.n	800e4e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f06f 0202 	mvn.w	r2, #2
 800e4b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	f003 0303 	and.w	r3, r3, #3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 faf6 	bl	800eac0 <HAL_TIM_IC_CaptureCallback>
 800e4d4:	e005      	b.n	800e4e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fae8 	bl	800eaac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 faf9 	bl	800ead4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f003 0304 	and.w	r3, r3, #4
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d020      	beq.n	800e534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f003 0304 	and.w	r3, r3, #4
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01b      	beq.n	800e534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f06f 0204 	mvn.w	r2, #4
 800e504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2202      	movs	r2, #2
 800e50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fad0 	bl	800eac0 <HAL_TIM_IC_CaptureCallback>
 800e520:	e005      	b.n	800e52e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 fac2 	bl	800eaac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fad3 	bl	800ead4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f003 0308 	and.w	r3, r3, #8
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d020      	beq.n	800e580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f003 0308 	and.w	r3, r3, #8
 800e544:	2b00      	cmp	r3, #0
 800e546:	d01b      	beq.n	800e580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f06f 0208 	mvn.w	r2, #8
 800e550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2204      	movs	r2, #4
 800e556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	69db      	ldr	r3, [r3, #28]
 800e55e:	f003 0303 	and.w	r3, r3, #3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 faaa 	bl	800eac0 <HAL_TIM_IC_CaptureCallback>
 800e56c:	e005      	b.n	800e57a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 fa9c 	bl	800eaac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 faad 	bl	800ead4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b00      	cmp	r3, #0
 800e588:	d020      	beq.n	800e5cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f003 0310 	and.w	r3, r3, #16
 800e590:	2b00      	cmp	r3, #0
 800e592:	d01b      	beq.n	800e5cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f06f 0210 	mvn.w	r2, #16
 800e59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2208      	movs	r2, #8
 800e5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fa84 	bl	800eac0 <HAL_TIM_IC_CaptureCallback>
 800e5b8:	e005      	b.n	800e5c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fa76 	bl	800eaac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fa87 	bl	800ead4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00c      	beq.n	800e5f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d007      	beq.n	800e5f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f06f 0201 	mvn.w	r2, #1
 800e5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7f2 fa64 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d104      	bne.n	800e604 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00c      	beq.n	800e61e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 ff61 	bl	800f4e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00c      	beq.n	800e642 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 ff59 	bl	800f4f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00c      	beq.n	800e666 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e652:	2b00      	cmp	r3, #0
 800e654:	d007      	beq.n	800e666 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fa41 	bl	800eae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f003 0320 	and.w	r3, r3, #32
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00c      	beq.n	800e68a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f06f 0220 	mvn.w	r2, #32
 800e682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 ff21 	bl	800f4cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
	...

0800e694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d101      	bne.n	800e6b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e0ff      	b.n	800e8b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b14      	cmp	r3, #20
 800e6be:	f200 80f0 	bhi.w	800e8a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e6c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e71d 	.word	0x0800e71d
 800e6cc:	0800e8a3 	.word	0x0800e8a3
 800e6d0:	0800e8a3 	.word	0x0800e8a3
 800e6d4:	0800e8a3 	.word	0x0800e8a3
 800e6d8:	0800e75d 	.word	0x0800e75d
 800e6dc:	0800e8a3 	.word	0x0800e8a3
 800e6e0:	0800e8a3 	.word	0x0800e8a3
 800e6e4:	0800e8a3 	.word	0x0800e8a3
 800e6e8:	0800e79f 	.word	0x0800e79f
 800e6ec:	0800e8a3 	.word	0x0800e8a3
 800e6f0:	0800e8a3 	.word	0x0800e8a3
 800e6f4:	0800e8a3 	.word	0x0800e8a3
 800e6f8:	0800e7df 	.word	0x0800e7df
 800e6fc:	0800e8a3 	.word	0x0800e8a3
 800e700:	0800e8a3 	.word	0x0800e8a3
 800e704:	0800e8a3 	.word	0x0800e8a3
 800e708:	0800e821 	.word	0x0800e821
 800e70c:	0800e8a3 	.word	0x0800e8a3
 800e710:	0800e8a3 	.word	0x0800e8a3
 800e714:	0800e8a3 	.word	0x0800e8a3
 800e718:	0800e861 	.word	0x0800e861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68b9      	ldr	r1, [r7, #8]
 800e722:	4618      	mov	r0, r3
 800e724:	f000 fa9c 	bl	800ec60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	699a      	ldr	r2, [r3, #24]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f042 0208 	orr.w	r2, r2, #8
 800e736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	699a      	ldr	r2, [r3, #24]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f022 0204 	bic.w	r2, r2, #4
 800e746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6999      	ldr	r1, [r3, #24]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	691a      	ldr	r2, [r3, #16]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	430a      	orrs	r2, r1
 800e758:	619a      	str	r2, [r3, #24]
      break;
 800e75a:	e0a5      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	68b9      	ldr	r1, [r7, #8]
 800e762:	4618      	mov	r0, r3
 800e764:	f000 fb0c 	bl	800ed80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	699a      	ldr	r2, [r3, #24]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	699a      	ldr	r2, [r3, #24]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6999      	ldr	r1, [r3, #24]
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	021a      	lsls	r2, r3, #8
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	430a      	orrs	r2, r1
 800e79a:	619a      	str	r2, [r3, #24]
      break;
 800e79c:	e084      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68b9      	ldr	r1, [r7, #8]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 fb75 	bl	800ee94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	69da      	ldr	r2, [r3, #28]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0208 	orr.w	r2, r2, #8
 800e7b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	69da      	ldr	r2, [r3, #28]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f022 0204 	bic.w	r2, r2, #4
 800e7c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69d9      	ldr	r1, [r3, #28]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	691a      	ldr	r2, [r3, #16]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	61da      	str	r2, [r3, #28]
      break;
 800e7dc:	e064      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 fbdd 	bl	800efa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	69da      	ldr	r2, [r3, #28]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	69da      	ldr	r2, [r3, #28]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	69d9      	ldr	r1, [r3, #28]
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	021a      	lsls	r2, r3, #8
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	430a      	orrs	r2, r1
 800e81c:	61da      	str	r2, [r3, #28]
      break;
 800e81e:	e043      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	4618      	mov	r0, r3
 800e828:	f000 fc26 	bl	800f078 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0208 	orr.w	r2, r2, #8
 800e83a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f022 0204 	bic.w	r2, r2, #4
 800e84a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	430a      	orrs	r2, r1
 800e85c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e85e:	e023      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68b9      	ldr	r1, [r7, #8]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 fc6a 	bl	800f140 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e87a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e88a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	021a      	lsls	r2, r3, #8
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	430a      	orrs	r2, r1
 800e89e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e8a0:	e002      	b.n	800e8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e8a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop

0800e8bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d101      	bne.n	800e8d8 <HAL_TIM_ConfigClockSource+0x1c>
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	e0dc      	b.n	800ea92 <HAL_TIM_ConfigClockSource+0x1d6>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	4b6a      	ldr	r3, [pc, #424]	@ (800ea9c <HAL_TIM_ConfigClockSource+0x1e0>)
 800e8f4:	4013      	ands	r3, r2
 800e8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e8fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a64      	ldr	r2, [pc, #400]	@ (800eaa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	f000 80a9 	beq.w	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e914:	4a62      	ldr	r2, [pc, #392]	@ (800eaa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e916:	4293      	cmp	r3, r2
 800e918:	f200 80ae 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e91c:	4a61      	ldr	r2, [pc, #388]	@ (800eaa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	f000 80a1 	beq.w	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e924:	4a5f      	ldr	r2, [pc, #380]	@ (800eaa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e926:	4293      	cmp	r3, r2
 800e928:	f200 80a6 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e92c:	4a5e      	ldr	r2, [pc, #376]	@ (800eaa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	f000 8099 	beq.w	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e934:	4a5c      	ldr	r2, [pc, #368]	@ (800eaa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e936:	4293      	cmp	r3, r2
 800e938:	f200 809e 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e93c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e940:	f000 8091 	beq.w	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e948:	f200 8096 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e94c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e950:	f000 8089 	beq.w	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e958:	f200 808e 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e95c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e960:	d03e      	beq.n	800e9e0 <HAL_TIM_ConfigClockSource+0x124>
 800e962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e966:	f200 8087 	bhi.w	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e96e:	f000 8086 	beq.w	800ea7e <HAL_TIM_ConfigClockSource+0x1c2>
 800e972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e976:	d87f      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e978:	2b70      	cmp	r3, #112	@ 0x70
 800e97a:	d01a      	beq.n	800e9b2 <HAL_TIM_ConfigClockSource+0xf6>
 800e97c:	2b70      	cmp	r3, #112	@ 0x70
 800e97e:	d87b      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e980:	2b60      	cmp	r3, #96	@ 0x60
 800e982:	d050      	beq.n	800ea26 <HAL_TIM_ConfigClockSource+0x16a>
 800e984:	2b60      	cmp	r3, #96	@ 0x60
 800e986:	d877      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e988:	2b50      	cmp	r3, #80	@ 0x50
 800e98a:	d03c      	beq.n	800ea06 <HAL_TIM_ConfigClockSource+0x14a>
 800e98c:	2b50      	cmp	r3, #80	@ 0x50
 800e98e:	d873      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e990:	2b40      	cmp	r3, #64	@ 0x40
 800e992:	d058      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0x18a>
 800e994:	2b40      	cmp	r3, #64	@ 0x40
 800e996:	d86f      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e998:	2b30      	cmp	r3, #48	@ 0x30
 800e99a:	d064      	beq.n	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e99c:	2b30      	cmp	r3, #48	@ 0x30
 800e99e:	d86b      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d060      	beq.n	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9a4:	2b20      	cmp	r3, #32
 800e9a6:	d867      	bhi.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d05c      	beq.n	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9ac:	2b10      	cmp	r3, #16
 800e9ae:	d05a      	beq.n	800ea66 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9b0:	e062      	b.n	800ea78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e9c2:	f000 fca1 	bl	800f308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e9d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	609a      	str	r2, [r3, #8]
      break;
 800e9de:	e04f      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e9f0:	f000 fc8a 	bl	800f308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689a      	ldr	r2, [r3, #8]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea02:	609a      	str	r2, [r3, #8]
      break;
 800ea04:	e03c      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea12:	461a      	mov	r2, r3
 800ea14:	f000 fbfa 	bl	800f20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2150      	movs	r1, #80	@ 0x50
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f000 fc54 	bl	800f2cc <TIM_ITRx_SetConfig>
      break;
 800ea24:	e02c      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea32:	461a      	mov	r2, r3
 800ea34:	f000 fc19 	bl	800f26a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2160      	movs	r1, #96	@ 0x60
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 fc44 	bl	800f2cc <TIM_ITRx_SetConfig>
      break;
 800ea44:	e01c      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea52:	461a      	mov	r2, r3
 800ea54:	f000 fbda 	bl	800f20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2140      	movs	r1, #64	@ 0x40
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 fc34 	bl	800f2cc <TIM_ITRx_SetConfig>
      break;
 800ea64:	e00c      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	4610      	mov	r0, r2
 800ea72:	f000 fc2b 	bl	800f2cc <TIM_ITRx_SetConfig>
      break;
 800ea76:	e003      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea7c:	e000      	b.n	800ea80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ea7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	ffceff88 	.word	0xffceff88
 800eaa0:	00100040 	.word	0x00100040
 800eaa4:	00100030 	.word	0x00100030
 800eaa8:	00100020 	.word	0x00100020

0800eaac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eab4:	bf00      	nop
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eaf0:	bf00      	nop
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a4a      	ldr	r2, [pc, #296]	@ (800ec38 <TIM_Base_SetConfig+0x13c>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d013      	beq.n	800eb3c <TIM_Base_SetConfig+0x40>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb1a:	d00f      	beq.n	800eb3c <TIM_Base_SetConfig+0x40>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a47      	ldr	r2, [pc, #284]	@ (800ec3c <TIM_Base_SetConfig+0x140>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d00b      	beq.n	800eb3c <TIM_Base_SetConfig+0x40>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a46      	ldr	r2, [pc, #280]	@ (800ec40 <TIM_Base_SetConfig+0x144>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d007      	beq.n	800eb3c <TIM_Base_SetConfig+0x40>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a45      	ldr	r2, [pc, #276]	@ (800ec44 <TIM_Base_SetConfig+0x148>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d003      	beq.n	800eb3c <TIM_Base_SetConfig+0x40>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a44      	ldr	r2, [pc, #272]	@ (800ec48 <TIM_Base_SetConfig+0x14c>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d108      	bne.n	800eb4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a39      	ldr	r2, [pc, #228]	@ (800ec38 <TIM_Base_SetConfig+0x13c>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d027      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb5c:	d023      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a36      	ldr	r2, [pc, #216]	@ (800ec3c <TIM_Base_SetConfig+0x140>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d01f      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a35      	ldr	r2, [pc, #212]	@ (800ec40 <TIM_Base_SetConfig+0x144>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d01b      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a34      	ldr	r2, [pc, #208]	@ (800ec44 <TIM_Base_SetConfig+0x148>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d017      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a33      	ldr	r2, [pc, #204]	@ (800ec48 <TIM_Base_SetConfig+0x14c>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d013      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a32      	ldr	r2, [pc, #200]	@ (800ec4c <TIM_Base_SetConfig+0x150>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d00f      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a31      	ldr	r2, [pc, #196]	@ (800ec50 <TIM_Base_SetConfig+0x154>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d00b      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a30      	ldr	r2, [pc, #192]	@ (800ec54 <TIM_Base_SetConfig+0x158>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d007      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a2f      	ldr	r2, [pc, #188]	@ (800ec58 <TIM_Base_SetConfig+0x15c>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d003      	beq.n	800eba6 <TIM_Base_SetConfig+0xaa>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a2e      	ldr	r2, [pc, #184]	@ (800ec5c <TIM_Base_SetConfig+0x160>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d108      	bne.n	800ebb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	689a      	ldr	r2, [r3, #8]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a16      	ldr	r2, [pc, #88]	@ (800ec38 <TIM_Base_SetConfig+0x13c>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00f      	beq.n	800ec04 <TIM_Base_SetConfig+0x108>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a18      	ldr	r2, [pc, #96]	@ (800ec48 <TIM_Base_SetConfig+0x14c>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d00b      	beq.n	800ec04 <TIM_Base_SetConfig+0x108>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4a17      	ldr	r2, [pc, #92]	@ (800ec4c <TIM_Base_SetConfig+0x150>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d007      	beq.n	800ec04 <TIM_Base_SetConfig+0x108>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a16      	ldr	r2, [pc, #88]	@ (800ec50 <TIM_Base_SetConfig+0x154>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d003      	beq.n	800ec04 <TIM_Base_SetConfig+0x108>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a15      	ldr	r2, [pc, #84]	@ (800ec54 <TIM_Base_SetConfig+0x158>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d103      	bne.n	800ec0c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d105      	bne.n	800ec2a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	691b      	ldr	r3, [r3, #16]
 800ec22:	f023 0201 	bic.w	r2, r3, #1
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	611a      	str	r2, [r3, #16]
  }
}
 800ec2a:	bf00      	nop
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	40010000 	.word	0x40010000
 800ec3c:	40000400 	.word	0x40000400
 800ec40:	40000800 	.word	0x40000800
 800ec44:	40000c00 	.word	0x40000c00
 800ec48:	40010400 	.word	0x40010400
 800ec4c:	40014000 	.word	0x40014000
 800ec50:	40014400 	.word	0x40014400
 800ec54:	40014800 	.word	0x40014800
 800ec58:	4000e000 	.word	0x4000e000
 800ec5c:	4000e400 	.word	0x4000e400

0800ec60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b087      	sub	sp, #28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a1b      	ldr	r3, [r3, #32]
 800ec74:	f023 0201 	bic.w	r2, r3, #1
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4b37      	ldr	r3, [pc, #220]	@ (800ed68 <TIM_OC1_SetConfig+0x108>)
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f023 0303 	bic.w	r3, r3, #3
 800ec96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f023 0302 	bic.w	r3, r3, #2
 800eca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a2d      	ldr	r2, [pc, #180]	@ (800ed6c <TIM_OC1_SetConfig+0x10c>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d00f      	beq.n	800ecdc <TIM_OC1_SetConfig+0x7c>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a2c      	ldr	r2, [pc, #176]	@ (800ed70 <TIM_OC1_SetConfig+0x110>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00b      	beq.n	800ecdc <TIM_OC1_SetConfig+0x7c>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a2b      	ldr	r2, [pc, #172]	@ (800ed74 <TIM_OC1_SetConfig+0x114>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d007      	beq.n	800ecdc <TIM_OC1_SetConfig+0x7c>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a2a      	ldr	r2, [pc, #168]	@ (800ed78 <TIM_OC1_SetConfig+0x118>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d003      	beq.n	800ecdc <TIM_OC1_SetConfig+0x7c>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a29      	ldr	r2, [pc, #164]	@ (800ed7c <TIM_OC1_SetConfig+0x11c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d10c      	bne.n	800ecf6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f023 0308 	bic.w	r3, r3, #8
 800ece2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f023 0304 	bic.w	r3, r3, #4
 800ecf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ed6c <TIM_OC1_SetConfig+0x10c>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d00f      	beq.n	800ed1e <TIM_OC1_SetConfig+0xbe>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a1b      	ldr	r2, [pc, #108]	@ (800ed70 <TIM_OC1_SetConfig+0x110>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d00b      	beq.n	800ed1e <TIM_OC1_SetConfig+0xbe>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a1a      	ldr	r2, [pc, #104]	@ (800ed74 <TIM_OC1_SetConfig+0x114>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d007      	beq.n	800ed1e <TIM_OC1_SetConfig+0xbe>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a19      	ldr	r2, [pc, #100]	@ (800ed78 <TIM_OC1_SetConfig+0x118>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d003      	beq.n	800ed1e <TIM_OC1_SetConfig+0xbe>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a18      	ldr	r2, [pc, #96]	@ (800ed7c <TIM_OC1_SetConfig+0x11c>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d111      	bne.n	800ed42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	695b      	ldr	r3, [r3, #20]
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	693a      	ldr	r2, [r7, #16]
 800ed46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	685a      	ldr	r2, [r3, #4]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	621a      	str	r2, [r3, #32]
}
 800ed5c:	bf00      	nop
 800ed5e:	371c      	adds	r7, #28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	fffeff8f 	.word	0xfffeff8f
 800ed6c:	40010000 	.word	0x40010000
 800ed70:	40010400 	.word	0x40010400
 800ed74:	40014000 	.word	0x40014000
 800ed78:	40014400 	.word	0x40014400
 800ed7c:	40014800 	.word	0x40014800

0800ed80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b087      	sub	sp, #28
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6a1b      	ldr	r3, [r3, #32]
 800ed8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	f023 0210 	bic.w	r2, r3, #16
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	699b      	ldr	r3, [r3, #24]
 800eda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	4b34      	ldr	r3, [pc, #208]	@ (800ee7c <TIM_OC2_SetConfig+0xfc>)
 800edac:	4013      	ands	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	f023 0320 	bic.w	r3, r3, #32
 800edca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	011b      	lsls	r3, r3, #4
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a29      	ldr	r2, [pc, #164]	@ (800ee80 <TIM_OC2_SetConfig+0x100>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d003      	beq.n	800ede8 <TIM_OC2_SetConfig+0x68>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a28      	ldr	r2, [pc, #160]	@ (800ee84 <TIM_OC2_SetConfig+0x104>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d10d      	bne.n	800ee04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800edee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	011b      	lsls	r3, r3, #4
 800edf6:	697a      	ldr	r2, [r7, #20]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4a1e      	ldr	r2, [pc, #120]	@ (800ee80 <TIM_OC2_SetConfig+0x100>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d00f      	beq.n	800ee2c <TIM_OC2_SetConfig+0xac>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a1d      	ldr	r2, [pc, #116]	@ (800ee84 <TIM_OC2_SetConfig+0x104>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d00b      	beq.n	800ee2c <TIM_OC2_SetConfig+0xac>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a1c      	ldr	r2, [pc, #112]	@ (800ee88 <TIM_OC2_SetConfig+0x108>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d007      	beq.n	800ee2c <TIM_OC2_SetConfig+0xac>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ee8c <TIM_OC2_SetConfig+0x10c>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d003      	beq.n	800ee2c <TIM_OC2_SetConfig+0xac>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	4a1a      	ldr	r2, [pc, #104]	@ (800ee90 <TIM_OC2_SetConfig+0x110>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d113      	bne.n	800ee54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	695b      	ldr	r3, [r3, #20]
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	699b      	ldr	r3, [r3, #24]
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	693a      	ldr	r2, [r7, #16]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	685a      	ldr	r2, [r3, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	621a      	str	r2, [r3, #32]
}
 800ee6e:	bf00      	nop
 800ee70:	371c      	adds	r7, #28
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	feff8fff 	.word	0xfeff8fff
 800ee80:	40010000 	.word	0x40010000
 800ee84:	40010400 	.word	0x40010400
 800ee88:	40014000 	.word	0x40014000
 800ee8c:	40014400 	.word	0x40014400
 800ee90:	40014800 	.word	0x40014800

0800ee94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	4b33      	ldr	r3, [pc, #204]	@ (800ef8c <TIM_OC3_SetConfig+0xf8>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f023 0303 	bic.w	r3, r3, #3
 800eeca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4313      	orrs	r3, r2
 800eed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eedc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	021b      	lsls	r3, r3, #8
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4a28      	ldr	r2, [pc, #160]	@ (800ef90 <TIM_OC3_SetConfig+0xfc>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d003      	beq.n	800eefa <TIM_OC3_SetConfig+0x66>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4a27      	ldr	r2, [pc, #156]	@ (800ef94 <TIM_OC3_SetConfig+0x100>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d10d      	bne.n	800ef16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	021b      	lsls	r3, r3, #8
 800ef08:	697a      	ldr	r2, [r7, #20]
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a1d      	ldr	r2, [pc, #116]	@ (800ef90 <TIM_OC3_SetConfig+0xfc>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00f      	beq.n	800ef3e <TIM_OC3_SetConfig+0xaa>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a1c      	ldr	r2, [pc, #112]	@ (800ef94 <TIM_OC3_SetConfig+0x100>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d00b      	beq.n	800ef3e <TIM_OC3_SetConfig+0xaa>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a1b      	ldr	r2, [pc, #108]	@ (800ef98 <TIM_OC3_SetConfig+0x104>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d007      	beq.n	800ef3e <TIM_OC3_SetConfig+0xaa>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a1a      	ldr	r2, [pc, #104]	@ (800ef9c <TIM_OC3_SetConfig+0x108>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d003      	beq.n	800ef3e <TIM_OC3_SetConfig+0xaa>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a19      	ldr	r2, [pc, #100]	@ (800efa0 <TIM_OC3_SetConfig+0x10c>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d113      	bne.n	800ef66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	011b      	lsls	r3, r3, #4
 800ef54:	693a      	ldr	r2, [r7, #16]
 800ef56:	4313      	orrs	r3, r2
 800ef58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	699b      	ldr	r3, [r3, #24]
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	697a      	ldr	r2, [r7, #20]
 800ef7e:	621a      	str	r2, [r3, #32]
}
 800ef80:	bf00      	nop
 800ef82:	371c      	adds	r7, #28
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	fffeff8f 	.word	0xfffeff8f
 800ef90:	40010000 	.word	0x40010000
 800ef94:	40010400 	.word	0x40010400
 800ef98:	40014000 	.word	0x40014000
 800ef9c:	40014400 	.word	0x40014400
 800efa0:	40014800 	.word	0x40014800

0800efa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a1b      	ldr	r3, [r3, #32]
 800efb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	4b24      	ldr	r3, [pc, #144]	@ (800f060 <TIM_OC4_SetConfig+0xbc>)
 800efd0:	4013      	ands	r3, r2
 800efd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800efda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	021b      	lsls	r3, r3, #8
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800efee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	031b      	lsls	r3, r3, #12
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	4313      	orrs	r3, r2
 800effa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4a19      	ldr	r2, [pc, #100]	@ (800f064 <TIM_OC4_SetConfig+0xc0>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d00f      	beq.n	800f024 <TIM_OC4_SetConfig+0x80>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a18      	ldr	r2, [pc, #96]	@ (800f068 <TIM_OC4_SetConfig+0xc4>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d00b      	beq.n	800f024 <TIM_OC4_SetConfig+0x80>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a17      	ldr	r2, [pc, #92]	@ (800f06c <TIM_OC4_SetConfig+0xc8>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d007      	beq.n	800f024 <TIM_OC4_SetConfig+0x80>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a16      	ldr	r2, [pc, #88]	@ (800f070 <TIM_OC4_SetConfig+0xcc>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d003      	beq.n	800f024 <TIM_OC4_SetConfig+0x80>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a15      	ldr	r2, [pc, #84]	@ (800f074 <TIM_OC4_SetConfig+0xd0>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d109      	bne.n	800f038 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f02a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	695b      	ldr	r3, [r3, #20]
 800f030:	019b      	lsls	r3, r3, #6
 800f032:	697a      	ldr	r2, [r7, #20]
 800f034:	4313      	orrs	r3, r2
 800f036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	621a      	str	r2, [r3, #32]
}
 800f052:	bf00      	nop
 800f054:	371c      	adds	r7, #28
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	feff8fff 	.word	0xfeff8fff
 800f064:	40010000 	.word	0x40010000
 800f068:	40010400 	.word	0x40010400
 800f06c:	40014000 	.word	0x40014000
 800f070:	40014400 	.word	0x40014400
 800f074:	40014800 	.word	0x40014800

0800f078 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6a1b      	ldr	r3, [r3, #32]
 800f086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a1b      	ldr	r3, [r3, #32]
 800f08c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4b21      	ldr	r3, [pc, #132]	@ (800f128 <TIM_OC5_SetConfig+0xb0>)
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f0b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	041b      	lsls	r3, r3, #16
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a18      	ldr	r2, [pc, #96]	@ (800f12c <TIM_OC5_SetConfig+0xb4>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00f      	beq.n	800f0ee <TIM_OC5_SetConfig+0x76>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a17      	ldr	r2, [pc, #92]	@ (800f130 <TIM_OC5_SetConfig+0xb8>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d00b      	beq.n	800f0ee <TIM_OC5_SetConfig+0x76>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a16      	ldr	r2, [pc, #88]	@ (800f134 <TIM_OC5_SetConfig+0xbc>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d007      	beq.n	800f0ee <TIM_OC5_SetConfig+0x76>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a15      	ldr	r2, [pc, #84]	@ (800f138 <TIM_OC5_SetConfig+0xc0>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d003      	beq.n	800f0ee <TIM_OC5_SetConfig+0x76>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a14      	ldr	r2, [pc, #80]	@ (800f13c <TIM_OC5_SetConfig+0xc4>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d109      	bne.n	800f102 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	695b      	ldr	r3, [r3, #20]
 800f0fa:	021b      	lsls	r3, r3, #8
 800f0fc:	697a      	ldr	r2, [r7, #20]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	621a      	str	r2, [r3, #32]
}
 800f11c:	bf00      	nop
 800f11e:	371c      	adds	r7, #28
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	fffeff8f 	.word	0xfffeff8f
 800f12c:	40010000 	.word	0x40010000
 800f130:	40010400 	.word	0x40010400
 800f134:	40014000 	.word	0x40014000
 800f138:	40014400 	.word	0x40014400
 800f13c:	40014800 	.word	0x40014800

0800f140 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a1b      	ldr	r3, [r3, #32]
 800f154:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	4b22      	ldr	r3, [pc, #136]	@ (800f1f4 <TIM_OC6_SetConfig+0xb4>)
 800f16c:	4013      	ands	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	021b      	lsls	r3, r3, #8
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4313      	orrs	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	051b      	lsls	r3, r3, #20
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a19      	ldr	r2, [pc, #100]	@ (800f1f8 <TIM_OC6_SetConfig+0xb8>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d00f      	beq.n	800f1b8 <TIM_OC6_SetConfig+0x78>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a18      	ldr	r2, [pc, #96]	@ (800f1fc <TIM_OC6_SetConfig+0xbc>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d00b      	beq.n	800f1b8 <TIM_OC6_SetConfig+0x78>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a17      	ldr	r2, [pc, #92]	@ (800f200 <TIM_OC6_SetConfig+0xc0>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d007      	beq.n	800f1b8 <TIM_OC6_SetConfig+0x78>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a16      	ldr	r2, [pc, #88]	@ (800f204 <TIM_OC6_SetConfig+0xc4>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <TIM_OC6_SetConfig+0x78>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a15      	ldr	r2, [pc, #84]	@ (800f208 <TIM_OC6_SetConfig+0xc8>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d109      	bne.n	800f1cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	029b      	lsls	r3, r3, #10
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	697a      	ldr	r2, [r7, #20]
 800f1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	621a      	str	r2, [r3, #32]
}
 800f1e6:	bf00      	nop
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	feff8fff 	.word	0xfeff8fff
 800f1f8:	40010000 	.word	0x40010000
 800f1fc:	40010400 	.word	0x40010400
 800f200:	40014000 	.word	0x40014000
 800f204:	40014400 	.word	0x40014400
 800f208:	40014800 	.word	0x40014800

0800f20c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	f023 0201 	bic.w	r2, r3, #1
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	011b      	lsls	r3, r3, #4
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	4313      	orrs	r3, r2
 800f240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f023 030a 	bic.w	r3, r3, #10
 800f248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	4313      	orrs	r3, r2
 800f250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	693a      	ldr	r2, [r7, #16]
 800f256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	621a      	str	r2, [r3, #32]
}
 800f25e:	bf00      	nop
 800f260:	371c      	adds	r7, #28
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b087      	sub	sp, #28
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6a1b      	ldr	r3, [r3, #32]
 800f280:	f023 0210 	bic.w	r2, r3, #16
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	031b      	lsls	r3, r3, #12
 800f29a:	693a      	ldr	r2, [r7, #16]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f2a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	011b      	lsls	r3, r3, #4
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	621a      	str	r2, [r3, #32]
}
 800f2be:	bf00      	nop
 800f2c0:	371c      	adds	r7, #28
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
	...

0800f2cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4b09      	ldr	r3, [pc, #36]	@ (800f304 <TIM_ITRx_SetConfig+0x38>)
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	f043 0307 	orr.w	r3, r3, #7
 800f2ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	609a      	str	r2, [r3, #8]
}
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	ffcfff8f 	.word	0xffcfff8f

0800f308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f308:	b480      	push	{r7}
 800f30a:	b087      	sub	sp, #28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	021a      	lsls	r2, r3, #8
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	431a      	orrs	r2, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	4313      	orrs	r3, r2
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	4313      	orrs	r3, r2
 800f334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	697a      	ldr	r2, [r7, #20]
 800f33a:	609a      	str	r2, [r3, #8]
}
 800f33c:	bf00      	nop
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	f003 031f 	and.w	r3, r3, #31
 800f35a:	2201      	movs	r2, #1
 800f35c:	fa02 f303 	lsl.w	r3, r2, r3
 800f360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a1a      	ldr	r2, [r3, #32]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	43db      	mvns	r3, r3
 800f36a:	401a      	ands	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6a1a      	ldr	r2, [r3, #32]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	f003 031f 	and.w	r3, r3, #31
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	fa01 f303 	lsl.w	r3, r1, r3
 800f380:	431a      	orrs	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	621a      	str	r2, [r3, #32]
}
 800f386:	bf00      	nop
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
	...

0800f394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d101      	bne.n	800f3ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	e077      	b.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2202      	movs	r2, #2
 800f3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a35      	ldr	r2, [pc, #212]	@ (800f4a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d004      	beq.n	800f3e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a34      	ldr	r2, [pc, #208]	@ (800f4ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d108      	bne.n	800f3f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f3e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4313      	orrs	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a25      	ldr	r2, [pc, #148]	@ (800f4a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d02c      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f41e:	d027      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a22      	ldr	r2, [pc, #136]	@ (800f4b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d022      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a21      	ldr	r2, [pc, #132]	@ (800f4b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d01d      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4a1f      	ldr	r2, [pc, #124]	@ (800f4b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d018      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4a1a      	ldr	r2, [pc, #104]	@ (800f4ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d013      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a1b      	ldr	r2, [pc, #108]	@ (800f4bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d00e      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a1a      	ldr	r2, [pc, #104]	@ (800f4c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d009      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a18      	ldr	r2, [pc, #96]	@ (800f4c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d004      	beq.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a17      	ldr	r2, [pc, #92]	@ (800f4c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d10c      	bne.n	800f48a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	4313      	orrs	r3, r2
 800f480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3714      	adds	r7, #20
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	40010000 	.word	0x40010000
 800f4ac:	40010400 	.word	0x40010400
 800f4b0:	40000400 	.word	0x40000400
 800f4b4:	40000800 	.word	0x40000800
 800f4b8:	40000c00 	.word	0x40000c00
 800f4bc:	40001800 	.word	0x40001800
 800f4c0:	40014000 	.word	0x40014000
 800f4c4:	4000e000 	.word	0x4000e000
 800f4c8:	4000e400 	.word	0x4000e400

0800f4cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4e8:	bf00      	nop
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4fc:	bf00      	nop
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	e042      	b.n	800f5a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7f2 fd71 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2224      	movs	r2, #36	@ 0x24
 800f536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f022 0201 	bic.w	r2, r2, #1
 800f548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d002      	beq.n	800f558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fe94 	bl	8010280 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f825 	bl	800f5a8 <UART_SetConfig>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b01      	cmp	r3, #1
 800f562:	d101      	bne.n	800f568 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f564:	2301      	movs	r3, #1
 800f566:	e01b      	b.n	800f5a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	689a      	ldr	r2, [r3, #8]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f042 0201 	orr.w	r2, r2, #1
 800f596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 ff13 	bl	80103c4 <UART_CheckIdleState>
 800f59e:	4603      	mov	r3, r0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5ac:	b092      	sub	sp, #72	@ 0x48
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	689a      	ldr	r2, [r3, #8]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	691b      	ldr	r3, [r3, #16]
 800f5c0:	431a      	orrs	r2, r3
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	695b      	ldr	r3, [r3, #20]
 800f5c6:	431a      	orrs	r2, r3
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	69db      	ldr	r3, [r3, #28]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	4bbe      	ldr	r3, [pc, #760]	@ (800f8d0 <UART_SetConfig+0x328>)
 800f5d8:	4013      	ands	r3, r2
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	6812      	ldr	r2, [r2, #0]
 800f5de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	68da      	ldr	r2, [r3, #12]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	430a      	orrs	r2, r1
 800f5f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	699b      	ldr	r3, [r3, #24]
 800f5fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4ab3      	ldr	r2, [pc, #716]	@ (800f8d4 <UART_SetConfig+0x32c>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d004      	beq.n	800f614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f610:	4313      	orrs	r3, r2
 800f612:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689a      	ldr	r2, [r3, #8]
 800f61a:	4baf      	ldr	r3, [pc, #700]	@ (800f8d8 <UART_SetConfig+0x330>)
 800f61c:	4013      	ands	r3, r2
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	6812      	ldr	r2, [r2, #0]
 800f622:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f624:	430b      	orrs	r3, r1
 800f626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f62e:	f023 010f 	bic.w	r1, r3, #15
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	430a      	orrs	r2, r1
 800f63c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4aa6      	ldr	r2, [pc, #664]	@ (800f8dc <UART_SetConfig+0x334>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d177      	bne.n	800f738 <UART_SetConfig+0x190>
 800f648:	4ba5      	ldr	r3, [pc, #660]	@ (800f8e0 <UART_SetConfig+0x338>)
 800f64a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f64c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f650:	2b28      	cmp	r3, #40	@ 0x28
 800f652:	d86d      	bhi.n	800f730 <UART_SetConfig+0x188>
 800f654:	a201      	add	r2, pc, #4	@ (adr r2, 800f65c <UART_SetConfig+0xb4>)
 800f656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65a:	bf00      	nop
 800f65c:	0800f701 	.word	0x0800f701
 800f660:	0800f731 	.word	0x0800f731
 800f664:	0800f731 	.word	0x0800f731
 800f668:	0800f731 	.word	0x0800f731
 800f66c:	0800f731 	.word	0x0800f731
 800f670:	0800f731 	.word	0x0800f731
 800f674:	0800f731 	.word	0x0800f731
 800f678:	0800f731 	.word	0x0800f731
 800f67c:	0800f709 	.word	0x0800f709
 800f680:	0800f731 	.word	0x0800f731
 800f684:	0800f731 	.word	0x0800f731
 800f688:	0800f731 	.word	0x0800f731
 800f68c:	0800f731 	.word	0x0800f731
 800f690:	0800f731 	.word	0x0800f731
 800f694:	0800f731 	.word	0x0800f731
 800f698:	0800f731 	.word	0x0800f731
 800f69c:	0800f711 	.word	0x0800f711
 800f6a0:	0800f731 	.word	0x0800f731
 800f6a4:	0800f731 	.word	0x0800f731
 800f6a8:	0800f731 	.word	0x0800f731
 800f6ac:	0800f731 	.word	0x0800f731
 800f6b0:	0800f731 	.word	0x0800f731
 800f6b4:	0800f731 	.word	0x0800f731
 800f6b8:	0800f731 	.word	0x0800f731
 800f6bc:	0800f719 	.word	0x0800f719
 800f6c0:	0800f731 	.word	0x0800f731
 800f6c4:	0800f731 	.word	0x0800f731
 800f6c8:	0800f731 	.word	0x0800f731
 800f6cc:	0800f731 	.word	0x0800f731
 800f6d0:	0800f731 	.word	0x0800f731
 800f6d4:	0800f731 	.word	0x0800f731
 800f6d8:	0800f731 	.word	0x0800f731
 800f6dc:	0800f721 	.word	0x0800f721
 800f6e0:	0800f731 	.word	0x0800f731
 800f6e4:	0800f731 	.word	0x0800f731
 800f6e8:	0800f731 	.word	0x0800f731
 800f6ec:	0800f731 	.word	0x0800f731
 800f6f0:	0800f731 	.word	0x0800f731
 800f6f4:	0800f731 	.word	0x0800f731
 800f6f8:	0800f731 	.word	0x0800f731
 800f6fc:	0800f729 	.word	0x0800f729
 800f700:	2301      	movs	r3, #1
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e326      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f708:	2304      	movs	r3, #4
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e322      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f710:	2308      	movs	r3, #8
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e31e      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f718:	2310      	movs	r3, #16
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e31a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f720:	2320      	movs	r3, #32
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e316      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f728:	2340      	movs	r3, #64	@ 0x40
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e312      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f730:	2380      	movs	r3, #128	@ 0x80
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f736:	e30e      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a69      	ldr	r2, [pc, #420]	@ (800f8e4 <UART_SetConfig+0x33c>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d130      	bne.n	800f7a4 <UART_SetConfig+0x1fc>
 800f742:	4b67      	ldr	r3, [pc, #412]	@ (800f8e0 <UART_SetConfig+0x338>)
 800f744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d826      	bhi.n	800f79c <UART_SetConfig+0x1f4>
 800f74e:	a201      	add	r2, pc, #4	@ (adr r2, 800f754 <UART_SetConfig+0x1ac>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f76d 	.word	0x0800f76d
 800f758:	0800f775 	.word	0x0800f775
 800f75c:	0800f77d 	.word	0x0800f77d
 800f760:	0800f785 	.word	0x0800f785
 800f764:	0800f78d 	.word	0x0800f78d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2300      	movs	r3, #0
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e2f0      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e2ec      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e2e8      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e2e4      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e2e0      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f794:	2340      	movs	r3, #64	@ 0x40
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e2dc      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e2d8      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a4f      	ldr	r2, [pc, #316]	@ (800f8e8 <UART_SetConfig+0x340>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d130      	bne.n	800f810 <UART_SetConfig+0x268>
 800f7ae:	4b4c      	ldr	r3, [pc, #304]	@ (800f8e0 <UART_SetConfig+0x338>)
 800f7b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	2b05      	cmp	r3, #5
 800f7b8:	d826      	bhi.n	800f808 <UART_SetConfig+0x260>
 800f7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c0 <UART_SetConfig+0x218>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f7e1 	.word	0x0800f7e1
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f7f1 	.word	0x0800f7f1
 800f7d0:	0800f7f9 	.word	0x0800f7f9
 800f7d4:	0800f801 	.word	0x0800f801
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e2ba      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e2b6      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e2b2      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e2ae      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f7f8:	2320      	movs	r3, #32
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e2aa      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f800:	2340      	movs	r3, #64	@ 0x40
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e2a6      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f808:	2380      	movs	r3, #128	@ 0x80
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80e:	e2a2      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a35      	ldr	r2, [pc, #212]	@ (800f8ec <UART_SetConfig+0x344>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d130      	bne.n	800f87c <UART_SetConfig+0x2d4>
 800f81a:	4b31      	ldr	r3, [pc, #196]	@ (800f8e0 <UART_SetConfig+0x338>)
 800f81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f81e:	f003 0307 	and.w	r3, r3, #7
 800f822:	2b05      	cmp	r3, #5
 800f824:	d826      	bhi.n	800f874 <UART_SetConfig+0x2cc>
 800f826:	a201      	add	r2, pc, #4	@ (adr r2, 800f82c <UART_SetConfig+0x284>)
 800f828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82c:	0800f845 	.word	0x0800f845
 800f830:	0800f84d 	.word	0x0800f84d
 800f834:	0800f855 	.word	0x0800f855
 800f838:	0800f85d 	.word	0x0800f85d
 800f83c:	0800f865 	.word	0x0800f865
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	2300      	movs	r3, #0
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84a:	e284      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f84c:	2304      	movs	r3, #4
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f852:	e280      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f854:	2308      	movs	r3, #8
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85a:	e27c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f85c:	2310      	movs	r3, #16
 800f85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f862:	e278      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f864:	2320      	movs	r3, #32
 800f866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86a:	e274      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f86c:	2340      	movs	r3, #64	@ 0x40
 800f86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f872:	e270      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f874:	2380      	movs	r3, #128	@ 0x80
 800f876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f87a:	e26c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a1b      	ldr	r2, [pc, #108]	@ (800f8f0 <UART_SetConfig+0x348>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d142      	bne.n	800f90c <UART_SetConfig+0x364>
 800f886:	4b16      	ldr	r3, [pc, #88]	@ (800f8e0 <UART_SetConfig+0x338>)
 800f888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	2b05      	cmp	r3, #5
 800f890:	d838      	bhi.n	800f904 <UART_SetConfig+0x35c>
 800f892:	a201      	add	r2, pc, #4	@ (adr r2, 800f898 <UART_SetConfig+0x2f0>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f8b1 	.word	0x0800f8b1
 800f89c:	0800f8b9 	.word	0x0800f8b9
 800f8a0:	0800f8c1 	.word	0x0800f8c1
 800f8a4:	0800f8c9 	.word	0x0800f8c9
 800f8a8:	0800f8f5 	.word	0x0800f8f5
 800f8ac:	0800f8fd 	.word	0x0800f8fd
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b6:	e24e      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8be:	e24a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f8c0:	2308      	movs	r3, #8
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c6:	e246      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f8c8:	2310      	movs	r3, #16
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ce:	e242      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f8d0:	cfff69f3 	.word	0xcfff69f3
 800f8d4:	58000c00 	.word	0x58000c00
 800f8d8:	11fff4ff 	.word	0x11fff4ff
 800f8dc:	40011000 	.word	0x40011000
 800f8e0:	58024400 	.word	0x58024400
 800f8e4:	40004400 	.word	0x40004400
 800f8e8:	40004800 	.word	0x40004800
 800f8ec:	40004c00 	.word	0x40004c00
 800f8f0:	40005000 	.word	0x40005000
 800f8f4:	2320      	movs	r3, #32
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e22c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f8fc:	2340      	movs	r3, #64	@ 0x40
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f902:	e228      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f904:	2380      	movs	r3, #128	@ 0x80
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90a:	e224      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4ab1      	ldr	r2, [pc, #708]	@ (800fbd8 <UART_SetConfig+0x630>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d176      	bne.n	800fa04 <UART_SetConfig+0x45c>
 800f916:	4bb1      	ldr	r3, [pc, #708]	@ (800fbdc <UART_SetConfig+0x634>)
 800f918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f91a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f91e:	2b28      	cmp	r3, #40	@ 0x28
 800f920:	d86c      	bhi.n	800f9fc <UART_SetConfig+0x454>
 800f922:	a201      	add	r2, pc, #4	@ (adr r2, 800f928 <UART_SetConfig+0x380>)
 800f924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f928:	0800f9cd 	.word	0x0800f9cd
 800f92c:	0800f9fd 	.word	0x0800f9fd
 800f930:	0800f9fd 	.word	0x0800f9fd
 800f934:	0800f9fd 	.word	0x0800f9fd
 800f938:	0800f9fd 	.word	0x0800f9fd
 800f93c:	0800f9fd 	.word	0x0800f9fd
 800f940:	0800f9fd 	.word	0x0800f9fd
 800f944:	0800f9fd 	.word	0x0800f9fd
 800f948:	0800f9d5 	.word	0x0800f9d5
 800f94c:	0800f9fd 	.word	0x0800f9fd
 800f950:	0800f9fd 	.word	0x0800f9fd
 800f954:	0800f9fd 	.word	0x0800f9fd
 800f958:	0800f9fd 	.word	0x0800f9fd
 800f95c:	0800f9fd 	.word	0x0800f9fd
 800f960:	0800f9fd 	.word	0x0800f9fd
 800f964:	0800f9fd 	.word	0x0800f9fd
 800f968:	0800f9dd 	.word	0x0800f9dd
 800f96c:	0800f9fd 	.word	0x0800f9fd
 800f970:	0800f9fd 	.word	0x0800f9fd
 800f974:	0800f9fd 	.word	0x0800f9fd
 800f978:	0800f9fd 	.word	0x0800f9fd
 800f97c:	0800f9fd 	.word	0x0800f9fd
 800f980:	0800f9fd 	.word	0x0800f9fd
 800f984:	0800f9fd 	.word	0x0800f9fd
 800f988:	0800f9e5 	.word	0x0800f9e5
 800f98c:	0800f9fd 	.word	0x0800f9fd
 800f990:	0800f9fd 	.word	0x0800f9fd
 800f994:	0800f9fd 	.word	0x0800f9fd
 800f998:	0800f9fd 	.word	0x0800f9fd
 800f99c:	0800f9fd 	.word	0x0800f9fd
 800f9a0:	0800f9fd 	.word	0x0800f9fd
 800f9a4:	0800f9fd 	.word	0x0800f9fd
 800f9a8:	0800f9ed 	.word	0x0800f9ed
 800f9ac:	0800f9fd 	.word	0x0800f9fd
 800f9b0:	0800f9fd 	.word	0x0800f9fd
 800f9b4:	0800f9fd 	.word	0x0800f9fd
 800f9b8:	0800f9fd 	.word	0x0800f9fd
 800f9bc:	0800f9fd 	.word	0x0800f9fd
 800f9c0:	0800f9fd 	.word	0x0800f9fd
 800f9c4:	0800f9fd 	.word	0x0800f9fd
 800f9c8:	0800f9f5 	.word	0x0800f9f5
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e1c0      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9d4:	2304      	movs	r3, #4
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e1bc      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9dc:	2308      	movs	r3, #8
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e2:	e1b8      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9e4:	2310      	movs	r3, #16
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ea:	e1b4      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9ec:	2320      	movs	r3, #32
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f2:	e1b0      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9f4:	2340      	movs	r3, #64	@ 0x40
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fa:	e1ac      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800f9fc:	2380      	movs	r3, #128	@ 0x80
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa02:	e1a8      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a75      	ldr	r2, [pc, #468]	@ (800fbe0 <UART_SetConfig+0x638>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d130      	bne.n	800fa70 <UART_SetConfig+0x4c8>
 800fa0e:	4b73      	ldr	r3, [pc, #460]	@ (800fbdc <UART_SetConfig+0x634>)
 800fa10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	2b05      	cmp	r3, #5
 800fa18:	d826      	bhi.n	800fa68 <UART_SetConfig+0x4c0>
 800fa1a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa20 <UART_SetConfig+0x478>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa39 	.word	0x0800fa39
 800fa24:	0800fa41 	.word	0x0800fa41
 800fa28:	0800fa49 	.word	0x0800fa49
 800fa2c:	0800fa51 	.word	0x0800fa51
 800fa30:	0800fa59 	.word	0x0800fa59
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3e:	e18a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e186      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e182      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e17e      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5e:	e17a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa60:	2340      	movs	r3, #64	@ 0x40
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa66:	e176      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa68:	2380      	movs	r3, #128	@ 0x80
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6e:	e172      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a5b      	ldr	r2, [pc, #364]	@ (800fbe4 <UART_SetConfig+0x63c>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d130      	bne.n	800fadc <UART_SetConfig+0x534>
 800fa7a:	4b58      	ldr	r3, [pc, #352]	@ (800fbdc <UART_SetConfig+0x634>)
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d826      	bhi.n	800fad4 <UART_SetConfig+0x52c>
 800fa86:	a201      	add	r2, pc, #4	@ (adr r2, 800fa8c <UART_SetConfig+0x4e4>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa5 	.word	0x0800faa5
 800fa90:	0800faad 	.word	0x0800faad
 800fa94:	0800fab5 	.word	0x0800fab5
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	2300      	movs	r3, #0
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e154      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800faac:	2304      	movs	r3, #4
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e150      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fab4:	2308      	movs	r3, #8
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e14c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fabc:	2310      	movs	r3, #16
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e148      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fac4:	2320      	movs	r3, #32
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e144      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800facc:	2340      	movs	r3, #64	@ 0x40
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e140      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fad4:	2380      	movs	r3, #128	@ 0x80
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fada:	e13c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a41      	ldr	r2, [pc, #260]	@ (800fbe8 <UART_SetConfig+0x640>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	f040 8082 	bne.w	800fbec <UART_SetConfig+0x644>
 800fae8:	4b3c      	ldr	r3, [pc, #240]	@ (800fbdc <UART_SetConfig+0x634>)
 800faea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800faf0:	2b28      	cmp	r3, #40	@ 0x28
 800faf2:	d86d      	bhi.n	800fbd0 <UART_SetConfig+0x628>
 800faf4:	a201      	add	r2, pc, #4	@ (adr r2, 800fafc <UART_SetConfig+0x554>)
 800faf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fafa:	bf00      	nop
 800fafc:	0800fba1 	.word	0x0800fba1
 800fb00:	0800fbd1 	.word	0x0800fbd1
 800fb04:	0800fbd1 	.word	0x0800fbd1
 800fb08:	0800fbd1 	.word	0x0800fbd1
 800fb0c:	0800fbd1 	.word	0x0800fbd1
 800fb10:	0800fbd1 	.word	0x0800fbd1
 800fb14:	0800fbd1 	.word	0x0800fbd1
 800fb18:	0800fbd1 	.word	0x0800fbd1
 800fb1c:	0800fba9 	.word	0x0800fba9
 800fb20:	0800fbd1 	.word	0x0800fbd1
 800fb24:	0800fbd1 	.word	0x0800fbd1
 800fb28:	0800fbd1 	.word	0x0800fbd1
 800fb2c:	0800fbd1 	.word	0x0800fbd1
 800fb30:	0800fbd1 	.word	0x0800fbd1
 800fb34:	0800fbd1 	.word	0x0800fbd1
 800fb38:	0800fbd1 	.word	0x0800fbd1
 800fb3c:	0800fbb1 	.word	0x0800fbb1
 800fb40:	0800fbd1 	.word	0x0800fbd1
 800fb44:	0800fbd1 	.word	0x0800fbd1
 800fb48:	0800fbd1 	.word	0x0800fbd1
 800fb4c:	0800fbd1 	.word	0x0800fbd1
 800fb50:	0800fbd1 	.word	0x0800fbd1
 800fb54:	0800fbd1 	.word	0x0800fbd1
 800fb58:	0800fbd1 	.word	0x0800fbd1
 800fb5c:	0800fbb9 	.word	0x0800fbb9
 800fb60:	0800fbd1 	.word	0x0800fbd1
 800fb64:	0800fbd1 	.word	0x0800fbd1
 800fb68:	0800fbd1 	.word	0x0800fbd1
 800fb6c:	0800fbd1 	.word	0x0800fbd1
 800fb70:	0800fbd1 	.word	0x0800fbd1
 800fb74:	0800fbd1 	.word	0x0800fbd1
 800fb78:	0800fbd1 	.word	0x0800fbd1
 800fb7c:	0800fbc1 	.word	0x0800fbc1
 800fb80:	0800fbd1 	.word	0x0800fbd1
 800fb84:	0800fbd1 	.word	0x0800fbd1
 800fb88:	0800fbd1 	.word	0x0800fbd1
 800fb8c:	0800fbd1 	.word	0x0800fbd1
 800fb90:	0800fbd1 	.word	0x0800fbd1
 800fb94:	0800fbd1 	.word	0x0800fbd1
 800fb98:	0800fbd1 	.word	0x0800fbd1
 800fb9c:	0800fbc9 	.word	0x0800fbc9
 800fba0:	2301      	movs	r3, #1
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba6:	e0d6      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fba8:	2304      	movs	r3, #4
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbae:	e0d2      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb6:	e0ce      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbb8:	2310      	movs	r3, #16
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e0ca      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbc0:	2320      	movs	r3, #32
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e0c6      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbc8:	2340      	movs	r3, #64	@ 0x40
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbce:	e0c2      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbd0:	2380      	movs	r3, #128	@ 0x80
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd6:	e0be      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fbd8:	40011400 	.word	0x40011400
 800fbdc:	58024400 	.word	0x58024400
 800fbe0:	40007800 	.word	0x40007800
 800fbe4:	40007c00 	.word	0x40007c00
 800fbe8:	40011800 	.word	0x40011800
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4aad      	ldr	r2, [pc, #692]	@ (800fea8 <UART_SetConfig+0x900>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d176      	bne.n	800fce4 <UART_SetConfig+0x73c>
 800fbf6:	4bad      	ldr	r3, [pc, #692]	@ (800feac <UART_SetConfig+0x904>)
 800fbf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fbfe:	2b28      	cmp	r3, #40	@ 0x28
 800fc00:	d86c      	bhi.n	800fcdc <UART_SetConfig+0x734>
 800fc02:	a201      	add	r2, pc, #4	@ (adr r2, 800fc08 <UART_SetConfig+0x660>)
 800fc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc08:	0800fcad 	.word	0x0800fcad
 800fc0c:	0800fcdd 	.word	0x0800fcdd
 800fc10:	0800fcdd 	.word	0x0800fcdd
 800fc14:	0800fcdd 	.word	0x0800fcdd
 800fc18:	0800fcdd 	.word	0x0800fcdd
 800fc1c:	0800fcdd 	.word	0x0800fcdd
 800fc20:	0800fcdd 	.word	0x0800fcdd
 800fc24:	0800fcdd 	.word	0x0800fcdd
 800fc28:	0800fcb5 	.word	0x0800fcb5
 800fc2c:	0800fcdd 	.word	0x0800fcdd
 800fc30:	0800fcdd 	.word	0x0800fcdd
 800fc34:	0800fcdd 	.word	0x0800fcdd
 800fc38:	0800fcdd 	.word	0x0800fcdd
 800fc3c:	0800fcdd 	.word	0x0800fcdd
 800fc40:	0800fcdd 	.word	0x0800fcdd
 800fc44:	0800fcdd 	.word	0x0800fcdd
 800fc48:	0800fcbd 	.word	0x0800fcbd
 800fc4c:	0800fcdd 	.word	0x0800fcdd
 800fc50:	0800fcdd 	.word	0x0800fcdd
 800fc54:	0800fcdd 	.word	0x0800fcdd
 800fc58:	0800fcdd 	.word	0x0800fcdd
 800fc5c:	0800fcdd 	.word	0x0800fcdd
 800fc60:	0800fcdd 	.word	0x0800fcdd
 800fc64:	0800fcdd 	.word	0x0800fcdd
 800fc68:	0800fcc5 	.word	0x0800fcc5
 800fc6c:	0800fcdd 	.word	0x0800fcdd
 800fc70:	0800fcdd 	.word	0x0800fcdd
 800fc74:	0800fcdd 	.word	0x0800fcdd
 800fc78:	0800fcdd 	.word	0x0800fcdd
 800fc7c:	0800fcdd 	.word	0x0800fcdd
 800fc80:	0800fcdd 	.word	0x0800fcdd
 800fc84:	0800fcdd 	.word	0x0800fcdd
 800fc88:	0800fccd 	.word	0x0800fccd
 800fc8c:	0800fcdd 	.word	0x0800fcdd
 800fc90:	0800fcdd 	.word	0x0800fcdd
 800fc94:	0800fcdd 	.word	0x0800fcdd
 800fc98:	0800fcdd 	.word	0x0800fcdd
 800fc9c:	0800fcdd 	.word	0x0800fcdd
 800fca0:	0800fcdd 	.word	0x0800fcdd
 800fca4:	0800fcdd 	.word	0x0800fcdd
 800fca8:	0800fcd5 	.word	0x0800fcd5
 800fcac:	2301      	movs	r3, #1
 800fcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb2:	e050      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fcb4:	2304      	movs	r3, #4
 800fcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcba:	e04c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fcbc:	2308      	movs	r3, #8
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc2:	e048      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fcc4:	2310      	movs	r3, #16
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcca:	e044      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fccc:	2320      	movs	r3, #32
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcd2:	e040      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fcd4:	2340      	movs	r3, #64	@ 0x40
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e03c      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fcdc:	2380      	movs	r3, #128	@ 0x80
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fce2:	e038      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a71      	ldr	r2, [pc, #452]	@ (800feb0 <UART_SetConfig+0x908>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d130      	bne.n	800fd50 <UART_SetConfig+0x7a8>
 800fcee:	4b6f      	ldr	r3, [pc, #444]	@ (800feac <UART_SetConfig+0x904>)
 800fcf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fcf2:	f003 0307 	and.w	r3, r3, #7
 800fcf6:	2b05      	cmp	r3, #5
 800fcf8:	d826      	bhi.n	800fd48 <UART_SetConfig+0x7a0>
 800fcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800fd00 <UART_SetConfig+0x758>)
 800fcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd00:	0800fd19 	.word	0x0800fd19
 800fd04:	0800fd21 	.word	0x0800fd21
 800fd08:	0800fd29 	.word	0x0800fd29
 800fd0c:	0800fd31 	.word	0x0800fd31
 800fd10:	0800fd39 	.word	0x0800fd39
 800fd14:	0800fd41 	.word	0x0800fd41
 800fd18:	2302      	movs	r3, #2
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e01a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd20:	2304      	movs	r3, #4
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e016      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd28:	2308      	movs	r3, #8
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e012      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd30:	2310      	movs	r3, #16
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e00e      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd38:	2320      	movs	r3, #32
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e00a      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd40:	2340      	movs	r3, #64	@ 0x40
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd46:	e006      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd48:	2380      	movs	r3, #128	@ 0x80
 800fd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd4e:	e002      	b.n	800fd56 <UART_SetConfig+0x7ae>
 800fd50:	2380      	movs	r3, #128	@ 0x80
 800fd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a55      	ldr	r2, [pc, #340]	@ (800feb0 <UART_SetConfig+0x908>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	f040 80f8 	bne.w	800ff52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fd62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd66:	2b20      	cmp	r3, #32
 800fd68:	dc46      	bgt.n	800fdf8 <UART_SetConfig+0x850>
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	db75      	blt.n	800fe5a <UART_SetConfig+0x8b2>
 800fd6e:	3b02      	subs	r3, #2
 800fd70:	2b1e      	cmp	r3, #30
 800fd72:	d872      	bhi.n	800fe5a <UART_SetConfig+0x8b2>
 800fd74:	a201      	add	r2, pc, #4	@ (adr r2, 800fd7c <UART_SetConfig+0x7d4>)
 800fd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7a:	bf00      	nop
 800fd7c:	0800fdff 	.word	0x0800fdff
 800fd80:	0800fe5b 	.word	0x0800fe5b
 800fd84:	0800fe07 	.word	0x0800fe07
 800fd88:	0800fe5b 	.word	0x0800fe5b
 800fd8c:	0800fe5b 	.word	0x0800fe5b
 800fd90:	0800fe5b 	.word	0x0800fe5b
 800fd94:	0800fe17 	.word	0x0800fe17
 800fd98:	0800fe5b 	.word	0x0800fe5b
 800fd9c:	0800fe5b 	.word	0x0800fe5b
 800fda0:	0800fe5b 	.word	0x0800fe5b
 800fda4:	0800fe5b 	.word	0x0800fe5b
 800fda8:	0800fe5b 	.word	0x0800fe5b
 800fdac:	0800fe5b 	.word	0x0800fe5b
 800fdb0:	0800fe5b 	.word	0x0800fe5b
 800fdb4:	0800fe27 	.word	0x0800fe27
 800fdb8:	0800fe5b 	.word	0x0800fe5b
 800fdbc:	0800fe5b 	.word	0x0800fe5b
 800fdc0:	0800fe5b 	.word	0x0800fe5b
 800fdc4:	0800fe5b 	.word	0x0800fe5b
 800fdc8:	0800fe5b 	.word	0x0800fe5b
 800fdcc:	0800fe5b 	.word	0x0800fe5b
 800fdd0:	0800fe5b 	.word	0x0800fe5b
 800fdd4:	0800fe5b 	.word	0x0800fe5b
 800fdd8:	0800fe5b 	.word	0x0800fe5b
 800fddc:	0800fe5b 	.word	0x0800fe5b
 800fde0:	0800fe5b 	.word	0x0800fe5b
 800fde4:	0800fe5b 	.word	0x0800fe5b
 800fde8:	0800fe5b 	.word	0x0800fe5b
 800fdec:	0800fe5b 	.word	0x0800fe5b
 800fdf0:	0800fe5b 	.word	0x0800fe5b
 800fdf4:	0800fe4d 	.word	0x0800fe4d
 800fdf8:	2b40      	cmp	r3, #64	@ 0x40
 800fdfa:	d02a      	beq.n	800fe52 <UART_SetConfig+0x8aa>
 800fdfc:	e02d      	b.n	800fe5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fdfe:	f7fd f91f 	bl	800d040 <HAL_RCCEx_GetD3PCLK1Freq>
 800fe02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe04:	e02f      	b.n	800fe66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fd f92e 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe14:	e027      	b.n	800fe66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe16:	f107 0318 	add.w	r3, r7, #24
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fd fa7a 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe24:	e01f      	b.n	800fe66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe26:	4b21      	ldr	r3, [pc, #132]	@ (800feac <UART_SetConfig+0x904>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f003 0320 	and.w	r3, r3, #32
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d009      	beq.n	800fe46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe32:	4b1e      	ldr	r3, [pc, #120]	@ (800feac <UART_SetConfig+0x904>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	08db      	lsrs	r3, r3, #3
 800fe38:	f003 0303 	and.w	r3, r3, #3
 800fe3c:	4a1d      	ldr	r2, [pc, #116]	@ (800feb4 <UART_SetConfig+0x90c>)
 800fe3e:	fa22 f303 	lsr.w	r3, r2, r3
 800fe42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe44:	e00f      	b.n	800fe66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fe46:	4b1b      	ldr	r3, [pc, #108]	@ (800feb4 <UART_SetConfig+0x90c>)
 800fe48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe4a:	e00c      	b.n	800fe66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe4c:	4b1a      	ldr	r3, [pc, #104]	@ (800feb8 <UART_SetConfig+0x910>)
 800fe4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe50:	e009      	b.n	800fe66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe58:	e005      	b.n	800fe66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 81ee 	beq.w	801024a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe72:	4a12      	ldr	r2, [pc, #72]	@ (800febc <UART_SetConfig+0x914>)
 800fe74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe80:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	4613      	mov	r3, r2
 800fe88:	005b      	lsls	r3, r3, #1
 800fe8a:	4413      	add	r3, r2
 800fe8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d305      	bcc.n	800fe9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d910      	bls.n	800fec0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fea4:	e1d1      	b.n	801024a <UART_SetConfig+0xca2>
 800fea6:	bf00      	nop
 800fea8:	40011c00 	.word	0x40011c00
 800feac:	58024400 	.word	0x58024400
 800feb0:	58000c00 	.word	0x58000c00
 800feb4:	03d09000 	.word	0x03d09000
 800feb8:	003d0900 	.word	0x003d0900
 800febc:	0801989c 	.word	0x0801989c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fec2:	2200      	movs	r2, #0
 800fec4:	60bb      	str	r3, [r7, #8]
 800fec6:	60fa      	str	r2, [r7, #12]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fecc:	4ac0      	ldr	r2, [pc, #768]	@ (80101d0 <UART_SetConfig+0xc28>)
 800fece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	2200      	movs	r2, #0
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	607a      	str	r2, [r7, #4]
 800feda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fede:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fee2:	f7f0 fc39 	bl	8000758 <__aeabi_uldivmod>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4610      	mov	r0, r2
 800feec:	4619      	mov	r1, r3
 800feee:	f04f 0200 	mov.w	r2, #0
 800fef2:	f04f 0300 	mov.w	r3, #0
 800fef6:	020b      	lsls	r3, r1, #8
 800fef8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fefc:	0202      	lsls	r2, r0, #8
 800fefe:	6979      	ldr	r1, [r7, #20]
 800ff00:	6849      	ldr	r1, [r1, #4]
 800ff02:	0849      	lsrs	r1, r1, #1
 800ff04:	2000      	movs	r0, #0
 800ff06:	460c      	mov	r4, r1
 800ff08:	4605      	mov	r5, r0
 800ff0a:	eb12 0804 	adds.w	r8, r2, r4
 800ff0e:	eb43 0905 	adc.w	r9, r3, r5
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	469a      	mov	sl, r3
 800ff1a:	4693      	mov	fp, r2
 800ff1c:	4652      	mov	r2, sl
 800ff1e:	465b      	mov	r3, fp
 800ff20:	4640      	mov	r0, r8
 800ff22:	4649      	mov	r1, r9
 800ff24:	f7f0 fc18 	bl	8000758 <__aeabi_uldivmod>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff36:	d308      	bcc.n	800ff4a <UART_SetConfig+0x9a2>
 800ff38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff3e:	d204      	bcs.n	800ff4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff46:	60da      	str	r2, [r3, #12]
 800ff48:	e17f      	b.n	801024a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff50:	e17b      	b.n	801024a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	69db      	ldr	r3, [r3, #28]
 800ff56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff5a:	f040 80bd 	bne.w	80100d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ff5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff62:	2b20      	cmp	r3, #32
 800ff64:	dc48      	bgt.n	800fff8 <UART_SetConfig+0xa50>
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	db7b      	blt.n	8010062 <UART_SetConfig+0xaba>
 800ff6a:	2b20      	cmp	r3, #32
 800ff6c:	d879      	bhi.n	8010062 <UART_SetConfig+0xaba>
 800ff6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ff74 <UART_SetConfig+0x9cc>)
 800ff70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff74:	0800ffff 	.word	0x0800ffff
 800ff78:	08010007 	.word	0x08010007
 800ff7c:	08010063 	.word	0x08010063
 800ff80:	08010063 	.word	0x08010063
 800ff84:	0801000f 	.word	0x0801000f
 800ff88:	08010063 	.word	0x08010063
 800ff8c:	08010063 	.word	0x08010063
 800ff90:	08010063 	.word	0x08010063
 800ff94:	0801001f 	.word	0x0801001f
 800ff98:	08010063 	.word	0x08010063
 800ff9c:	08010063 	.word	0x08010063
 800ffa0:	08010063 	.word	0x08010063
 800ffa4:	08010063 	.word	0x08010063
 800ffa8:	08010063 	.word	0x08010063
 800ffac:	08010063 	.word	0x08010063
 800ffb0:	08010063 	.word	0x08010063
 800ffb4:	0801002f 	.word	0x0801002f
 800ffb8:	08010063 	.word	0x08010063
 800ffbc:	08010063 	.word	0x08010063
 800ffc0:	08010063 	.word	0x08010063
 800ffc4:	08010063 	.word	0x08010063
 800ffc8:	08010063 	.word	0x08010063
 800ffcc:	08010063 	.word	0x08010063
 800ffd0:	08010063 	.word	0x08010063
 800ffd4:	08010063 	.word	0x08010063
 800ffd8:	08010063 	.word	0x08010063
 800ffdc:	08010063 	.word	0x08010063
 800ffe0:	08010063 	.word	0x08010063
 800ffe4:	08010063 	.word	0x08010063
 800ffe8:	08010063 	.word	0x08010063
 800ffec:	08010063 	.word	0x08010063
 800fff0:	08010063 	.word	0x08010063
 800fff4:	08010055 	.word	0x08010055
 800fff8:	2b40      	cmp	r3, #64	@ 0x40
 800fffa:	d02e      	beq.n	801005a <UART_SetConfig+0xab2>
 800fffc:	e031      	b.n	8010062 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fffe:	f7fb f981 	bl	800b304 <HAL_RCC_GetPCLK1Freq>
 8010002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010004:	e033      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010006:	f7fb f993 	bl	800b330 <HAL_RCC_GetPCLK2Freq>
 801000a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801000c:	e02f      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801000e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010012:	4618      	mov	r0, r3
 8010014:	f7fd f82a 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801001c:	e027      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801001e:	f107 0318 	add.w	r3, r7, #24
 8010022:	4618      	mov	r0, r3
 8010024:	f7fd f976 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801002c:	e01f      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801002e:	4b69      	ldr	r3, [pc, #420]	@ (80101d4 <UART_SetConfig+0xc2c>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f003 0320 	and.w	r3, r3, #32
 8010036:	2b00      	cmp	r3, #0
 8010038:	d009      	beq.n	801004e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801003a:	4b66      	ldr	r3, [pc, #408]	@ (80101d4 <UART_SetConfig+0xc2c>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	08db      	lsrs	r3, r3, #3
 8010040:	f003 0303 	and.w	r3, r3, #3
 8010044:	4a64      	ldr	r2, [pc, #400]	@ (80101d8 <UART_SetConfig+0xc30>)
 8010046:	fa22 f303 	lsr.w	r3, r2, r3
 801004a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801004c:	e00f      	b.n	801006e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801004e:	4b62      	ldr	r3, [pc, #392]	@ (80101d8 <UART_SetConfig+0xc30>)
 8010050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010052:	e00c      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010054:	4b61      	ldr	r3, [pc, #388]	@ (80101dc <UART_SetConfig+0xc34>)
 8010056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010058:	e009      	b.n	801006e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801005a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801005e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010060:	e005      	b.n	801006e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010062:	2300      	movs	r3, #0
 8010064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010066:	2301      	movs	r3, #1
 8010068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801006c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801006e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010070:	2b00      	cmp	r3, #0
 8010072:	f000 80ea 	beq.w	801024a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007a:	4a55      	ldr	r2, [pc, #340]	@ (80101d0 <UART_SetConfig+0xc28>)
 801007c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010080:	461a      	mov	r2, r3
 8010082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010084:	fbb3 f3f2 	udiv	r3, r3, r2
 8010088:	005a      	lsls	r2, r3, #1
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	085b      	lsrs	r3, r3, #1
 8010090:	441a      	add	r2, r3
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	fbb2 f3f3 	udiv	r3, r2, r3
 801009a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801009c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009e:	2b0f      	cmp	r3, #15
 80100a0:	d916      	bls.n	80100d0 <UART_SetConfig+0xb28>
 80100a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100a8:	d212      	bcs.n	80100d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	f023 030f 	bic.w	r3, r3, #15
 80100b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b6:	085b      	lsrs	r3, r3, #1
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	f003 0307 	and.w	r3, r3, #7
 80100be:	b29a      	uxth	r2, r3
 80100c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80100c2:	4313      	orrs	r3, r2
 80100c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	e0bc      	b.n	801024a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80100d6:	e0b8      	b.n	801024a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80100d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80100dc:	2b20      	cmp	r3, #32
 80100de:	dc4b      	bgt.n	8010178 <UART_SetConfig+0xbd0>
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f2c0 8087 	blt.w	80101f4 <UART_SetConfig+0xc4c>
 80100e6:	2b20      	cmp	r3, #32
 80100e8:	f200 8084 	bhi.w	80101f4 <UART_SetConfig+0xc4c>
 80100ec:	a201      	add	r2, pc, #4	@ (adr r2, 80100f4 <UART_SetConfig+0xb4c>)
 80100ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f2:	bf00      	nop
 80100f4:	0801017f 	.word	0x0801017f
 80100f8:	08010187 	.word	0x08010187
 80100fc:	080101f5 	.word	0x080101f5
 8010100:	080101f5 	.word	0x080101f5
 8010104:	0801018f 	.word	0x0801018f
 8010108:	080101f5 	.word	0x080101f5
 801010c:	080101f5 	.word	0x080101f5
 8010110:	080101f5 	.word	0x080101f5
 8010114:	0801019f 	.word	0x0801019f
 8010118:	080101f5 	.word	0x080101f5
 801011c:	080101f5 	.word	0x080101f5
 8010120:	080101f5 	.word	0x080101f5
 8010124:	080101f5 	.word	0x080101f5
 8010128:	080101f5 	.word	0x080101f5
 801012c:	080101f5 	.word	0x080101f5
 8010130:	080101f5 	.word	0x080101f5
 8010134:	080101af 	.word	0x080101af
 8010138:	080101f5 	.word	0x080101f5
 801013c:	080101f5 	.word	0x080101f5
 8010140:	080101f5 	.word	0x080101f5
 8010144:	080101f5 	.word	0x080101f5
 8010148:	080101f5 	.word	0x080101f5
 801014c:	080101f5 	.word	0x080101f5
 8010150:	080101f5 	.word	0x080101f5
 8010154:	080101f5 	.word	0x080101f5
 8010158:	080101f5 	.word	0x080101f5
 801015c:	080101f5 	.word	0x080101f5
 8010160:	080101f5 	.word	0x080101f5
 8010164:	080101f5 	.word	0x080101f5
 8010168:	080101f5 	.word	0x080101f5
 801016c:	080101f5 	.word	0x080101f5
 8010170:	080101f5 	.word	0x080101f5
 8010174:	080101e7 	.word	0x080101e7
 8010178:	2b40      	cmp	r3, #64	@ 0x40
 801017a:	d037      	beq.n	80101ec <UART_SetConfig+0xc44>
 801017c:	e03a      	b.n	80101f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801017e:	f7fb f8c1 	bl	800b304 <HAL_RCC_GetPCLK1Freq>
 8010182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010184:	e03c      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010186:	f7fb f8d3 	bl	800b330 <HAL_RCC_GetPCLK2Freq>
 801018a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801018c:	e038      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801018e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010192:	4618      	mov	r0, r3
 8010194:	f7fc ff6a 	bl	800d06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801019c:	e030      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801019e:	f107 0318 	add.w	r3, r7, #24
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fd f8b6 	bl	800d314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101ac:	e028      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101ae:	4b09      	ldr	r3, [pc, #36]	@ (80101d4 <UART_SetConfig+0xc2c>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d012      	beq.n	80101e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101ba:	4b06      	ldr	r3, [pc, #24]	@ (80101d4 <UART_SetConfig+0xc2c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	08db      	lsrs	r3, r3, #3
 80101c0:	f003 0303 	and.w	r3, r3, #3
 80101c4:	4a04      	ldr	r2, [pc, #16]	@ (80101d8 <UART_SetConfig+0xc30>)
 80101c6:	fa22 f303 	lsr.w	r3, r2, r3
 80101ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101cc:	e018      	b.n	8010200 <UART_SetConfig+0xc58>
 80101ce:	bf00      	nop
 80101d0:	0801989c 	.word	0x0801989c
 80101d4:	58024400 	.word	0x58024400
 80101d8:	03d09000 	.word	0x03d09000
 80101dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80101e0:	4b24      	ldr	r3, [pc, #144]	@ (8010274 <UART_SetConfig+0xccc>)
 80101e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101e4:	e00c      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80101e6:	4b24      	ldr	r3, [pc, #144]	@ (8010278 <UART_SetConfig+0xcd0>)
 80101e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101ea:	e009      	b.n	8010200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101f2:	e005      	b.n	8010200 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80101f4:	2300      	movs	r3, #0
 80101f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80101f8:	2301      	movs	r3, #1
 80101fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80101fe:	bf00      	nop
    }

    if (pclk != 0U)
 8010200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d021      	beq.n	801024a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801020a:	4a1c      	ldr	r2, [pc, #112]	@ (801027c <UART_SetConfig+0xcd4>)
 801020c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010210:	461a      	mov	r2, r3
 8010212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010214:	fbb3 f2f2 	udiv	r2, r3, r2
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	085b      	lsrs	r3, r3, #1
 801021e:	441a      	add	r2, r3
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	fbb2 f3f3 	udiv	r3, r2, r3
 8010228:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801022a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022c:	2b0f      	cmp	r3, #15
 801022e:	d909      	bls.n	8010244 <UART_SetConfig+0xc9c>
 8010230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010236:	d205      	bcs.n	8010244 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801023a:	b29a      	uxth	r2, r3
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	60da      	str	r2, [r3, #12]
 8010242:	e002      	b.n	801024a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	2201      	movs	r2, #1
 801024e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2201      	movs	r2, #1
 8010256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	2200      	movs	r2, #0
 801025e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2200      	movs	r2, #0
 8010264:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010266:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801026a:	4618      	mov	r0, r3
 801026c:	3748      	adds	r7, #72	@ 0x48
 801026e:	46bd      	mov	sp, r7
 8010270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010274:	03d09000 	.word	0x03d09000
 8010278:	003d0900 	.word	0x003d0900
 801027c:	0801989c 	.word	0x0801989c

08010280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801028c:	f003 0308 	and.w	r3, r3, #8
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00a      	beq.n	80102aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	430a      	orrs	r2, r1
 80102a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ae:	f003 0301 	and.w	r3, r3, #1
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00a      	beq.n	80102cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	430a      	orrs	r2, r1
 80102ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d0:	f003 0302 	and.w	r3, r3, #2
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00a      	beq.n	80102ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	430a      	orrs	r2, r1
 80102ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102f2:	f003 0304 	and.w	r3, r3, #4
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00a      	beq.n	8010310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	430a      	orrs	r2, r1
 801030e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010314:	f003 0310 	and.w	r3, r3, #16
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	430a      	orrs	r2, r1
 8010330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010336:	f003 0320 	and.w	r3, r3, #32
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	430a      	orrs	r2, r1
 8010352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801035c:	2b00      	cmp	r3, #0
 801035e:	d01a      	beq.n	8010396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	430a      	orrs	r2, r1
 8010374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801037a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801037e:	d10a      	bne.n	8010396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	430a      	orrs	r2, r1
 8010394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801039a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00a      	beq.n	80103b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	430a      	orrs	r2, r1
 80103b6:	605a      	str	r2, [r3, #4]
  }
}
 80103b8:	bf00      	nop
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b098      	sub	sp, #96	@ 0x60
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103d4:	f7f4 f9ae 	bl	8004734 <HAL_GetTick>
 80103d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	f003 0308 	and.w	r3, r3, #8
 80103e4:	2b08      	cmp	r3, #8
 80103e6:	d12f      	bne.n	8010448 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103f0:	2200      	movs	r2, #0
 80103f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 f88e 	bl	8010518 <UART_WaitOnFlagUntilTimeout>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d022      	beq.n	8010448 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040a:	e853 3f00 	ldrex	r3, [r3]
 801040e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010416:	653b      	str	r3, [r7, #80]	@ 0x50
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	461a      	mov	r2, r3
 801041e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010420:	647b      	str	r3, [r7, #68]	@ 0x44
 8010422:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010428:	e841 2300 	strex	r3, r2, [r1]
 801042c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801042e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e6      	bne.n	8010402 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2220      	movs	r2, #32
 8010438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010444:	2303      	movs	r3, #3
 8010446:	e063      	b.n	8010510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f003 0304 	and.w	r3, r3, #4
 8010452:	2b04      	cmp	r3, #4
 8010454:	d149      	bne.n	80104ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010456:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801045e:	2200      	movs	r2, #0
 8010460:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f857 	bl	8010518 <UART_WaitOnFlagUntilTimeout>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d03c      	beq.n	80104ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010478:	e853 3f00 	ldrex	r3, [r3]
 801047c:	623b      	str	r3, [r7, #32]
   return(result);
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	461a      	mov	r2, r3
 801048c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801048e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010490:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010496:	e841 2300 	strex	r3, r2, [r1]
 801049a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801049c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e6      	bne.n	8010470 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3308      	adds	r3, #8
 80104a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	e853 3f00 	ldrex	r3, [r3]
 80104b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f023 0301 	bic.w	r3, r3, #1
 80104b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3308      	adds	r3, #8
 80104c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80104c2:	61fa      	str	r2, [r7, #28]
 80104c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	69b9      	ldr	r1, [r7, #24]
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	617b      	str	r3, [r7, #20]
   return(result);
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e5      	bne.n	80104a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2220      	movs	r2, #32
 80104da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104e6:	2303      	movs	r3, #3
 80104e8:	e012      	b.n	8010510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2220      	movs	r2, #32
 80104ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2220      	movs	r2, #32
 80104f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3758      	adds	r7, #88	@ 0x58
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	603b      	str	r3, [r7, #0]
 8010524:	4613      	mov	r3, r2
 8010526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010528:	e04f      	b.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010530:	d04b      	beq.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010532:	f7f4 f8ff 	bl	8004734 <HAL_GetTick>
 8010536:	4602      	mov	r2, r0
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	69ba      	ldr	r2, [r7, #24]
 801053e:	429a      	cmp	r2, r3
 8010540:	d302      	bcc.n	8010548 <UART_WaitOnFlagUntilTimeout+0x30>
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010548:	2303      	movs	r3, #3
 801054a:	e04e      	b.n	80105ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f003 0304 	and.w	r3, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	d037      	beq.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	2b80      	cmp	r3, #128	@ 0x80
 801055e:	d034      	beq.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	2b40      	cmp	r3, #64	@ 0x40
 8010564:	d031      	beq.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	69db      	ldr	r3, [r3, #28]
 801056c:	f003 0308 	and.w	r3, r3, #8
 8010570:	2b08      	cmp	r3, #8
 8010572:	d110      	bne.n	8010596 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2208      	movs	r2, #8
 801057a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f000 f839 	bl	80105f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2208      	movs	r2, #8
 8010586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010592:	2301      	movs	r3, #1
 8010594:	e029      	b.n	80105ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	69db      	ldr	r3, [r3, #28]
 801059c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105a4:	d111      	bne.n	80105ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80105ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f000 f81f 	bl	80105f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2220      	movs	r2, #32
 80105ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80105c6:	2303      	movs	r3, #3
 80105c8:	e00f      	b.n	80105ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	69da      	ldr	r2, [r3, #28]
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	4013      	ands	r3, r2
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	bf0c      	ite	eq
 80105da:	2301      	moveq	r3, #1
 80105dc:	2300      	movne	r3, #0
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	461a      	mov	r2, r3
 80105e2:	79fb      	ldrb	r3, [r7, #7]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d0a0      	beq.n	801052a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
	...

080105f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b095      	sub	sp, #84	@ 0x54
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801060c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801061a:	643b      	str	r3, [r7, #64]	@ 0x40
 801061c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010620:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e6      	bne.n	80105fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3308      	adds	r3, #8
 8010634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	e853 3f00 	ldrex	r3, [r3]
 801063c:	61fb      	str	r3, [r7, #28]
   return(result);
 801063e:	69fa      	ldr	r2, [r7, #28]
 8010640:	4b1e      	ldr	r3, [pc, #120]	@ (80106bc <UART_EndRxTransfer+0xc8>)
 8010642:	4013      	ands	r3, r2
 8010644:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3308      	adds	r3, #8
 801064c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801064e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010650:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010656:	e841 2300 	strex	r3, r2, [r1]
 801065a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1e5      	bne.n	801062e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010666:	2b01      	cmp	r3, #1
 8010668:	d118      	bne.n	801069c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	e853 3f00 	ldrex	r3, [r3]
 8010676:	60bb      	str	r3, [r7, #8]
   return(result);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	f023 0310 	bic.w	r3, r3, #16
 801067e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	461a      	mov	r2, r3
 8010686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010688:	61bb      	str	r3, [r7, #24]
 801068a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068c:	6979      	ldr	r1, [r7, #20]
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	e841 2300 	strex	r3, r2, [r1]
 8010694:	613b      	str	r3, [r7, #16]
   return(result);
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1e6      	bne.n	801066a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2220      	movs	r2, #32
 80106a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2200      	movs	r2, #0
 80106a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80106b0:	bf00      	nop
 80106b2:	3754      	adds	r7, #84	@ 0x54
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	effffffe 	.word	0xeffffffe

080106c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d101      	bne.n	80106d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80106d2:	2302      	movs	r3, #2
 80106d4:	e027      	b.n	8010726 <HAL_UARTEx_DisableFifoMode+0x66>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2201      	movs	r2, #1
 80106da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2224      	movs	r2, #36	@ 0x24
 80106e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f022 0201 	bic.w	r2, r2, #1
 80106fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010704:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2220      	movs	r2, #32
 8010718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010724:	2300      	movs	r3, #0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3714      	adds	r7, #20
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr

08010732 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010742:	2b01      	cmp	r3, #1
 8010744:	d101      	bne.n	801074a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010746:	2302      	movs	r3, #2
 8010748:	e02d      	b.n	80107a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2201      	movs	r2, #1
 801074e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2224      	movs	r2, #36	@ 0x24
 8010756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f022 0201 	bic.w	r2, r2, #1
 8010770:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	430a      	orrs	r2, r1
 8010784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f850 	bl	801082c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2220      	movs	r2, #32
 8010798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b084      	sub	sp, #16
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d101      	bne.n	80107c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107c2:	2302      	movs	r3, #2
 80107c4:	e02d      	b.n	8010822 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2224      	movs	r2, #36	@ 0x24
 80107d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f022 0201 	bic.w	r2, r2, #1
 80107ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	430a      	orrs	r2, r1
 8010800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f812 	bl	801082c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2220      	movs	r2, #32
 8010814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
	...

0801082c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010838:	2b00      	cmp	r3, #0
 801083a:	d108      	bne.n	801084e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2201      	movs	r2, #1
 8010848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801084c:	e031      	b.n	80108b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801084e:	2310      	movs	r3, #16
 8010850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010852:	2310      	movs	r3, #16
 8010854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	0e5b      	lsrs	r3, r3, #25
 801085e:	b2db      	uxtb	r3, r3
 8010860:	f003 0307 	and.w	r3, r3, #7
 8010864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	0f5b      	lsrs	r3, r3, #29
 801086e:	b2db      	uxtb	r3, r3
 8010870:	f003 0307 	and.w	r3, r3, #7
 8010874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010876:	7bbb      	ldrb	r3, [r7, #14]
 8010878:	7b3a      	ldrb	r2, [r7, #12]
 801087a:	4911      	ldr	r1, [pc, #68]	@ (80108c0 <UARTEx_SetNbDataToProcess+0x94>)
 801087c:	5c8a      	ldrb	r2, [r1, r2]
 801087e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010882:	7b3a      	ldrb	r2, [r7, #12]
 8010884:	490f      	ldr	r1, [pc, #60]	@ (80108c4 <UARTEx_SetNbDataToProcess+0x98>)
 8010886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010888:	fb93 f3f2 	sdiv	r3, r3, r2
 801088c:	b29a      	uxth	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010894:	7bfb      	ldrb	r3, [r7, #15]
 8010896:	7b7a      	ldrb	r2, [r7, #13]
 8010898:	4909      	ldr	r1, [pc, #36]	@ (80108c0 <UARTEx_SetNbDataToProcess+0x94>)
 801089a:	5c8a      	ldrb	r2, [r1, r2]
 801089c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80108a0:	7b7a      	ldrb	r2, [r7, #13]
 80108a2:	4908      	ldr	r1, [pc, #32]	@ (80108c4 <UARTEx_SetNbDataToProcess+0x98>)
 80108a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80108a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80108b2:	bf00      	nop
 80108b4:	3714      	adds	r7, #20
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	080198b4 	.word	0x080198b4
 80108c4:	080198bc 	.word	0x080198bc

080108c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108c8:	b084      	sub	sp, #16
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b084      	sub	sp, #16
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
 80108d2:	f107 001c 	add.w	r0, r7, #28
 80108d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80108da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d121      	bne.n	8010926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	68da      	ldr	r2, [r3, #12]
 80108f2:	4b2c      	ldr	r3, [pc, #176]	@ (80109a4 <USB_CoreInit+0xdc>)
 80108f4:	4013      	ands	r3, r2
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801090a:	2b01      	cmp	r3, #1
 801090c:	d105      	bne.n	801091a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f001 faf6 	bl	8011f0c <USB_CoreReset>
 8010920:	4603      	mov	r3, r0
 8010922:	73fb      	strb	r3, [r7, #15]
 8010924:	e01b      	b.n	801095e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f001 faea 	bl	8011f0c <USB_CoreReset>
 8010938:	4603      	mov	r3, r0
 801093a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801093c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010940:	2b00      	cmp	r3, #0
 8010942:	d106      	bne.n	8010952 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010948:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010950:	e005      	b.n	801095e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010956:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801095e:	7fbb      	ldrb	r3, [r7, #30]
 8010960:	2b01      	cmp	r3, #1
 8010962:	d116      	bne.n	8010992 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010968:	b29a      	uxth	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010972:	4b0d      	ldr	r3, [pc, #52]	@ (80109a8 <USB_CoreInit+0xe0>)
 8010974:	4313      	orrs	r3, r2
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	f043 0206 	orr.w	r2, r3, #6
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	f043 0220 	orr.w	r2, r3, #32
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010992:	7bfb      	ldrb	r3, [r7, #15]
}
 8010994:	4618      	mov	r0, r3
 8010996:	3710      	adds	r7, #16
 8010998:	46bd      	mov	sp, r7
 801099a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801099e:	b004      	add	sp, #16
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	ffbdffbf 	.word	0xffbdffbf
 80109a8:	03ee0000 	.word	0x03ee0000

080109ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	4613      	mov	r3, r2
 80109b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d165      	bne.n	8010a8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	4a41      	ldr	r2, [pc, #260]	@ (8010ac8 <USB_SetTurnaroundTime+0x11c>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d906      	bls.n	80109d6 <USB_SetTurnaroundTime+0x2a>
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	4a40      	ldr	r2, [pc, #256]	@ (8010acc <USB_SetTurnaroundTime+0x120>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d202      	bcs.n	80109d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80109d0:	230f      	movs	r3, #15
 80109d2:	617b      	str	r3, [r7, #20]
 80109d4:	e062      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	4a3c      	ldr	r2, [pc, #240]	@ (8010acc <USB_SetTurnaroundTime+0x120>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d306      	bcc.n	80109ec <USB_SetTurnaroundTime+0x40>
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	4a3b      	ldr	r2, [pc, #236]	@ (8010ad0 <USB_SetTurnaroundTime+0x124>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d202      	bcs.n	80109ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80109e6:	230e      	movs	r3, #14
 80109e8:	617b      	str	r3, [r7, #20]
 80109ea:	e057      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	4a38      	ldr	r2, [pc, #224]	@ (8010ad0 <USB_SetTurnaroundTime+0x124>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d306      	bcc.n	8010a02 <USB_SetTurnaroundTime+0x56>
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	4a37      	ldr	r2, [pc, #220]	@ (8010ad4 <USB_SetTurnaroundTime+0x128>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d202      	bcs.n	8010a02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80109fc:	230d      	movs	r3, #13
 80109fe:	617b      	str	r3, [r7, #20]
 8010a00:	e04c      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	4a33      	ldr	r2, [pc, #204]	@ (8010ad4 <USB_SetTurnaroundTime+0x128>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d306      	bcc.n	8010a18 <USB_SetTurnaroundTime+0x6c>
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	4a32      	ldr	r2, [pc, #200]	@ (8010ad8 <USB_SetTurnaroundTime+0x12c>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d802      	bhi.n	8010a18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010a12:	230c      	movs	r3, #12
 8010a14:	617b      	str	r3, [r7, #20]
 8010a16:	e041      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8010ad8 <USB_SetTurnaroundTime+0x12c>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d906      	bls.n	8010a2e <USB_SetTurnaroundTime+0x82>
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	4a2e      	ldr	r2, [pc, #184]	@ (8010adc <USB_SetTurnaroundTime+0x130>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d802      	bhi.n	8010a2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010a28:	230b      	movs	r3, #11
 8010a2a:	617b      	str	r3, [r7, #20]
 8010a2c:	e036      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	4a2a      	ldr	r2, [pc, #168]	@ (8010adc <USB_SetTurnaroundTime+0x130>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d906      	bls.n	8010a44 <USB_SetTurnaroundTime+0x98>
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	4a29      	ldr	r2, [pc, #164]	@ (8010ae0 <USB_SetTurnaroundTime+0x134>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d802      	bhi.n	8010a44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010a3e:	230a      	movs	r3, #10
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	e02b      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	4a26      	ldr	r2, [pc, #152]	@ (8010ae0 <USB_SetTurnaroundTime+0x134>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d906      	bls.n	8010a5a <USB_SetTurnaroundTime+0xae>
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	4a25      	ldr	r2, [pc, #148]	@ (8010ae4 <USB_SetTurnaroundTime+0x138>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d202      	bcs.n	8010a5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010a54:	2309      	movs	r3, #9
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	e020      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	4a21      	ldr	r2, [pc, #132]	@ (8010ae4 <USB_SetTurnaroundTime+0x138>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d306      	bcc.n	8010a70 <USB_SetTurnaroundTime+0xc4>
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	4a20      	ldr	r2, [pc, #128]	@ (8010ae8 <USB_SetTurnaroundTime+0x13c>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d802      	bhi.n	8010a70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010a6a:	2308      	movs	r3, #8
 8010a6c:	617b      	str	r3, [r7, #20]
 8010a6e:	e015      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	4a1d      	ldr	r2, [pc, #116]	@ (8010ae8 <USB_SetTurnaroundTime+0x13c>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d906      	bls.n	8010a86 <USB_SetTurnaroundTime+0xda>
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8010aec <USB_SetTurnaroundTime+0x140>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d202      	bcs.n	8010a86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010a80:	2307      	movs	r3, #7
 8010a82:	617b      	str	r3, [r7, #20]
 8010a84:	e00a      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010a86:	2306      	movs	r3, #6
 8010a88:	617b      	str	r3, [r7, #20]
 8010a8a:	e007      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010a8c:	79fb      	ldrb	r3, [r7, #7]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d102      	bne.n	8010a98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010a92:	2309      	movs	r3, #9
 8010a94:	617b      	str	r3, [r7, #20]
 8010a96:	e001      	b.n	8010a9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010a98:	2309      	movs	r3, #9
 8010a9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	68da      	ldr	r2, [r3, #12]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	029b      	lsls	r3, r3, #10
 8010ab0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010ab4:	431a      	orrs	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	371c      	adds	r7, #28
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr
 8010ac8:	00d8acbf 	.word	0x00d8acbf
 8010acc:	00e4e1c0 	.word	0x00e4e1c0
 8010ad0:	00f42400 	.word	0x00f42400
 8010ad4:	01067380 	.word	0x01067380
 8010ad8:	011a499f 	.word	0x011a499f
 8010adc:	01312cff 	.word	0x01312cff
 8010ae0:	014ca43f 	.word	0x014ca43f
 8010ae4:	016e3600 	.word	0x016e3600
 8010ae8:	01a6ab1f 	.word	0x01a6ab1f
 8010aec:	01e84800 	.word	0x01e84800

08010af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f043 0201 	orr.w	r2, r3, #1
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b083      	sub	sp, #12
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	f023 0201 	bic.w	r2, r3, #1
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010b26:	2300      	movs	r3, #0
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010b40:	2300      	movs	r3, #0
 8010b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010b50:	78fb      	ldrb	r3, [r7, #3]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d115      	bne.n	8010b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b62:	200a      	movs	r0, #10
 8010b64:	f7f3 fdf2 	bl	800474c <HAL_Delay>
      ms += 10U;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	330a      	adds	r3, #10
 8010b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f001 f93b 	bl	8011dea <USB_GetMode>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d01e      	beq.n	8010bb8 <USB_SetCurrentMode+0x84>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8010b7e:	d9f0      	bls.n	8010b62 <USB_SetCurrentMode+0x2e>
 8010b80:	e01a      	b.n	8010bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010b82:	78fb      	ldrb	r3, [r7, #3]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d115      	bne.n	8010bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b94:	200a      	movs	r0, #10
 8010b96:	f7f3 fdd9 	bl	800474c <HAL_Delay>
      ms += 10U;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	330a      	adds	r3, #10
 8010b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f001 f922 	bl	8011dea <USB_GetMode>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d005      	beq.n	8010bb8 <USB_SetCurrentMode+0x84>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8010bb0:	d9f0      	bls.n	8010b94 <USB_SetCurrentMode+0x60>
 8010bb2:	e001      	b.n	8010bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e005      	b.n	8010bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2bc8      	cmp	r3, #200	@ 0xc8
 8010bbc:	d101      	bne.n	8010bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010bc2:	2300      	movs	r3, #0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010bcc:	b084      	sub	sp, #16
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b086      	sub	sp, #24
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010be6:	2300      	movs	r3, #0
 8010be8:	613b      	str	r3, [r7, #16]
 8010bea:	e009      	b.n	8010c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	3340      	adds	r3, #64	@ 0x40
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	4413      	add	r3, r2
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	613b      	str	r3, [r7, #16]
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b0e      	cmp	r3, #14
 8010c04:	d9f2      	bls.n	8010bec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010c06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d11c      	bne.n	8010c48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	68fa      	ldr	r2, [r7, #12]
 8010c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c1c:	f043 0302 	orr.w	r3, r3, #2
 8010c20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	e005      	b.n	8010c54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010c60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d10d      	bne.n	8010c84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d104      	bne.n	8010c7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010c70:	2100      	movs	r1, #0
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f968 	bl	8010f48 <USB_SetDevSpeed>
 8010c78:	e008      	b.n	8010c8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010c7a:	2101      	movs	r1, #1
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 f963 	bl	8010f48 <USB_SetDevSpeed>
 8010c82:	e003      	b.n	8010c8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010c84:	2103      	movs	r1, #3
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f95e 	bl	8010f48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010c8c:	2110      	movs	r1, #16
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f8fa 	bl	8010e88 <USB_FlushTxFifo>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d001      	beq.n	8010c9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f924 	bl	8010eec <USB_FlushRxFifo>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010caa:	2301      	movs	r3, #1
 8010cac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ccc:	461a      	mov	r2, r3
 8010cce:	2300      	movs	r3, #0
 8010cd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	613b      	str	r3, [r7, #16]
 8010cd6:	e043      	b.n	8010d60 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cee:	d118      	bne.n	8010d22 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10a      	bne.n	8010d0c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	015a      	lsls	r2, r3, #5
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d02:	461a      	mov	r2, r3
 8010d04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010d08:	6013      	str	r3, [r2, #0]
 8010d0a:	e013      	b.n	8010d34 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	015a      	lsls	r2, r3, #5
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	4413      	add	r3, r2
 8010d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d18:	461a      	mov	r2, r3
 8010d1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	e008      	b.n	8010d34 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	015a      	lsls	r2, r3, #5
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	4413      	add	r3, r2
 8010d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d2e:	461a      	mov	r2, r3
 8010d30:	2300      	movs	r3, #0
 8010d32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	015a      	lsls	r2, r3, #5
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d40:	461a      	mov	r2, r3
 8010d42:	2300      	movs	r3, #0
 8010d44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	015a      	lsls	r2, r3, #5
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d52:	461a      	mov	r2, r3
 8010d54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010d58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	613b      	str	r3, [r7, #16]
 8010d60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010d64:	461a      	mov	r2, r3
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d3b5      	bcc.n	8010cd8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	613b      	str	r3, [r7, #16]
 8010d70:	e043      	b.n	8010dfa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	015a      	lsls	r2, r3, #5
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	4413      	add	r3, r2
 8010d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d88:	d118      	bne.n	8010dbc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d10a      	bne.n	8010da6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	015a      	lsls	r2, r3, #5
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010da2:	6013      	str	r3, [r2, #0]
 8010da4:	e013      	b.n	8010dce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	015a      	lsls	r2, r3, #5
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	4413      	add	r3, r2
 8010dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010db2:	461a      	mov	r2, r3
 8010db4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010db8:	6013      	str	r3, [r2, #0]
 8010dba:	e008      	b.n	8010dce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	015a      	lsls	r2, r3, #5
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dc8:	461a      	mov	r2, r3
 8010dca:	2300      	movs	r3, #0
 8010dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	015a      	lsls	r2, r3, #5
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dda:	461a      	mov	r2, r3
 8010ddc:	2300      	movs	r3, #0
 8010dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	015a      	lsls	r2, r3, #5
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	4413      	add	r3, r2
 8010de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dec:	461a      	mov	r2, r3
 8010dee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	3301      	adds	r3, #1
 8010df8:	613b      	str	r3, [r7, #16]
 8010dfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010dfe:	461a      	mov	r2, r3
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d3b5      	bcc.n	8010d72 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010e26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d105      	bne.n	8010e3c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	699b      	ldr	r3, [r3, #24]
 8010e34:	f043 0210 	orr.w	r2, r3, #16
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	699a      	ldr	r2, [r3, #24]
 8010e40:	4b0f      	ldr	r3, [pc, #60]	@ (8010e80 <USB_DevInit+0x2b4>)
 8010e42:	4313      	orrs	r3, r2
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010e48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d005      	beq.n	8010e5c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	699b      	ldr	r3, [r3, #24]
 8010e54:	f043 0208 	orr.w	r2, r3, #8
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d105      	bne.n	8010e70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	699a      	ldr	r2, [r3, #24]
 8010e68:	4b06      	ldr	r3, [pc, #24]	@ (8010e84 <USB_DevInit+0x2b8>)
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3718      	adds	r7, #24
 8010e76:	46bd      	mov	sp, r7
 8010e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e7c:	b004      	add	sp, #16
 8010e7e:	4770      	bx	lr
 8010e80:	803c3800 	.word	0x803c3800
 8010e84:	40000004 	.word	0x40000004

08010e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	3301      	adds	r3, #1
 8010e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ea2:	d901      	bls.n	8010ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e01b      	b.n	8010ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	691b      	ldr	r3, [r3, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	daf2      	bge.n	8010e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	019b      	lsls	r3, r3, #6
 8010eb8:	f043 0220 	orr.w	r2, r3, #32
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ecc:	d901      	bls.n	8010ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010ece:	2303      	movs	r3, #3
 8010ed0:	e006      	b.n	8010ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	f003 0320 	and.w	r3, r3, #32
 8010eda:	2b20      	cmp	r3, #32
 8010edc:	d0f0      	beq.n	8010ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	3301      	adds	r3, #1
 8010efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f04:	d901      	bls.n	8010f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010f06:	2303      	movs	r3, #3
 8010f08:	e018      	b.n	8010f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	daf2      	bge.n	8010ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010f12:	2300      	movs	r3, #0
 8010f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2210      	movs	r2, #16
 8010f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010f28:	d901      	bls.n	8010f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	e006      	b.n	8010f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	691b      	ldr	r3, [r3, #16]
 8010f32:	f003 0310 	and.w	r3, r3, #16
 8010f36:	2b10      	cmp	r3, #16
 8010f38:	d0f0      	beq.n	8010f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3714      	adds	r7, #20
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	460b      	mov	r3, r1
 8010f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	78fb      	ldrb	r3, [r7, #3]
 8010f62:	68f9      	ldr	r1, [r7, #12]
 8010f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3714      	adds	r7, #20
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f7a:	b480      	push	{r7}
 8010f7c:	b087      	sub	sp, #28
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	f003 0306 	and.w	r3, r3, #6
 8010f92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d102      	bne.n	8010fa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	75fb      	strb	r3, [r7, #23]
 8010f9e:	e00a      	b.n	8010fb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d002      	beq.n	8010fac <USB_GetDevSpeed+0x32>
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b06      	cmp	r3, #6
 8010faa:	d102      	bne.n	8010fb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010fac:	2302      	movs	r3, #2
 8010fae:	75fb      	strb	r3, [r7, #23]
 8010fb0:	e001      	b.n	8010fb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010fb2:	230f      	movs	r3, #15
 8010fb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	371c      	adds	r7, #28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr

08010fc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	785b      	ldrb	r3, [r3, #1]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d139      	bne.n	8011054 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fe6:	69da      	ldr	r2, [r3, #28]
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	f003 030f 	and.w	r3, r3, #15
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	68f9      	ldr	r1, [r7, #12]
 8010ffa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ffe:	4313      	orrs	r3, r2
 8011000:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	015a      	lsls	r2, r3, #5
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	4413      	add	r3, r2
 801100a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011014:	2b00      	cmp	r3, #0
 8011016:	d153      	bne.n	80110c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	015a      	lsls	r2, r3, #5
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	4413      	add	r3, r2
 8011020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	791b      	ldrb	r3, [r3, #4]
 8011032:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011034:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	059b      	lsls	r3, r3, #22
 801103a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801103c:	431a      	orrs	r2, r3
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	0159      	lsls	r1, r3, #5
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	440b      	add	r3, r1
 8011046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801104a:	4619      	mov	r1, r3
 801104c:	4b20      	ldr	r3, [pc, #128]	@ (80110d0 <USB_ActivateEndpoint+0x10c>)
 801104e:	4313      	orrs	r3, r2
 8011050:	600b      	str	r3, [r1, #0]
 8011052:	e035      	b.n	80110c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801105a:	69da      	ldr	r2, [r3, #28]
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	f003 030f 	and.w	r3, r3, #15
 8011064:	2101      	movs	r1, #1
 8011066:	fa01 f303 	lsl.w	r3, r1, r3
 801106a:	041b      	lsls	r3, r3, #16
 801106c:	68f9      	ldr	r1, [r7, #12]
 801106e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011072:	4313      	orrs	r3, r2
 8011074:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	015a      	lsls	r2, r3, #5
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	4413      	add	r3, r2
 801107e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d119      	bne.n	80110c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	015a      	lsls	r2, r3, #5
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	4413      	add	r3, r2
 8011094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	791b      	ldrb	r3, [r3, #4]
 80110a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80110a8:	430b      	orrs	r3, r1
 80110aa:	431a      	orrs	r2, r3
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	0159      	lsls	r1, r3, #5
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	440b      	add	r3, r1
 80110b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110b8:	4619      	mov	r1, r3
 80110ba:	4b05      	ldr	r3, [pc, #20]	@ (80110d0 <USB_ActivateEndpoint+0x10c>)
 80110bc:	4313      	orrs	r3, r2
 80110be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	10008000 	.word	0x10008000

080110d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	785b      	ldrb	r3, [r3, #1]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d161      	bne.n	80111b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	015a      	lsls	r2, r3, #5
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	4413      	add	r3, r2
 80110f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011106:	d11f      	bne.n	8011148 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	015a      	lsls	r2, r3, #5
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4413      	add	r3, r2
 8011110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68ba      	ldr	r2, [r7, #8]
 8011118:	0151      	lsls	r1, r2, #5
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	440a      	add	r2, r1
 801111e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011126:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	015a      	lsls	r2, r3, #5
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	4413      	add	r3, r2
 8011130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68ba      	ldr	r2, [r7, #8]
 8011138:	0151      	lsls	r1, r2, #5
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	440a      	add	r2, r1
 801113e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011142:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801114e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	f003 030f 	and.w	r3, r3, #15
 8011158:	2101      	movs	r1, #1
 801115a:	fa01 f303 	lsl.w	r3, r1, r3
 801115e:	b29b      	uxth	r3, r3
 8011160:	43db      	mvns	r3, r3
 8011162:	68f9      	ldr	r1, [r7, #12]
 8011164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011168:	4013      	ands	r3, r2
 801116a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011172:	69da      	ldr	r2, [r3, #28]
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	f003 030f 	and.w	r3, r3, #15
 801117c:	2101      	movs	r1, #1
 801117e:	fa01 f303 	lsl.w	r3, r1, r3
 8011182:	b29b      	uxth	r3, r3
 8011184:	43db      	mvns	r3, r3
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801118c:	4013      	ands	r3, r2
 801118e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	015a      	lsls	r2, r3, #5
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	4413      	add	r3, r2
 8011198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	0159      	lsls	r1, r3, #5
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	440b      	add	r3, r1
 80111a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111aa:	4619      	mov	r1, r3
 80111ac:	4b35      	ldr	r3, [pc, #212]	@ (8011284 <USB_DeactivateEndpoint+0x1b0>)
 80111ae:	4013      	ands	r3, r2
 80111b0:	600b      	str	r3, [r1, #0]
 80111b2:	e060      	b.n	8011276 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	015a      	lsls	r2, r3, #5
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	4413      	add	r3, r2
 80111bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111ca:	d11f      	bne.n	801120c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	015a      	lsls	r2, r3, #5
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	4413      	add	r3, r2
 80111d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	0151      	lsls	r1, r2, #5
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	440a      	add	r2, r1
 80111e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80111ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	015a      	lsls	r2, r3, #5
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	4413      	add	r3, r2
 80111f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	68ba      	ldr	r2, [r7, #8]
 80111fc:	0151      	lsls	r1, r2, #5
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	440a      	add	r2, r1
 8011202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801120a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f003 030f 	and.w	r3, r3, #15
 801121c:	2101      	movs	r1, #1
 801121e:	fa01 f303 	lsl.w	r3, r1, r3
 8011222:	041b      	lsls	r3, r3, #16
 8011224:	43db      	mvns	r3, r3
 8011226:	68f9      	ldr	r1, [r7, #12]
 8011228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801122c:	4013      	ands	r3, r2
 801122e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011236:	69da      	ldr	r2, [r3, #28]
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f003 030f 	and.w	r3, r3, #15
 8011240:	2101      	movs	r1, #1
 8011242:	fa01 f303 	lsl.w	r3, r1, r3
 8011246:	041b      	lsls	r3, r3, #16
 8011248:	43db      	mvns	r3, r3
 801124a:	68f9      	ldr	r1, [r7, #12]
 801124c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011250:	4013      	ands	r3, r2
 8011252:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	015a      	lsls	r2, r3, #5
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	4413      	add	r3, r2
 801125c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	0159      	lsls	r1, r3, #5
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	440b      	add	r3, r1
 801126a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801126e:	4619      	mov	r1, r3
 8011270:	4b05      	ldr	r3, [pc, #20]	@ (8011288 <USB_DeactivateEndpoint+0x1b4>)
 8011272:	4013      	ands	r3, r2
 8011274:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011276:	2300      	movs	r3, #0
}
 8011278:	4618      	mov	r0, r3
 801127a:	3714      	adds	r7, #20
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr
 8011284:	ec337800 	.word	0xec337800
 8011288:	eff37800 	.word	0xeff37800

0801128c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
 8011290:	af02      	add	r7, sp, #8
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	4613      	mov	r3, r2
 8011298:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	785b      	ldrb	r3, [r3, #1]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	f040 8181 	bne.w	80115b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	691b      	ldr	r3, [r3, #16]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d132      	bne.n	801131c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	015a      	lsls	r2, r3, #5
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	4413      	add	r3, r2
 80112be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112c2:	691a      	ldr	r2, [r3, #16]
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	0159      	lsls	r1, r3, #5
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	440b      	add	r3, r1
 80112cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112d0:	4619      	mov	r1, r3
 80112d2:	4ba5      	ldr	r3, [pc, #660]	@ (8011568 <USB_EPStartXfer+0x2dc>)
 80112d4:	4013      	ands	r3, r2
 80112d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	015a      	lsls	r2, r3, #5
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	4413      	add	r3, r2
 80112e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112e4:	691b      	ldr	r3, [r3, #16]
 80112e6:	69ba      	ldr	r2, [r7, #24]
 80112e8:	0151      	lsls	r1, r2, #5
 80112ea:	69fa      	ldr	r2, [r7, #28]
 80112ec:	440a      	add	r2, r1
 80112ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80112f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	015a      	lsls	r2, r3, #5
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	4413      	add	r3, r2
 8011300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011304:	691a      	ldr	r2, [r3, #16]
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	0159      	lsls	r1, r3, #5
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	440b      	add	r3, r1
 801130e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011312:	4619      	mov	r1, r3
 8011314:	4b95      	ldr	r3, [pc, #596]	@ (801156c <USB_EPStartXfer+0x2e0>)
 8011316:	4013      	ands	r3, r2
 8011318:	610b      	str	r3, [r1, #16]
 801131a:	e092      	b.n	8011442 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	015a      	lsls	r2, r3, #5
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	4413      	add	r3, r2
 8011324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011328:	691a      	ldr	r2, [r3, #16]
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	0159      	lsls	r1, r3, #5
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	440b      	add	r3, r1
 8011332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011336:	4619      	mov	r1, r3
 8011338:	4b8c      	ldr	r3, [pc, #560]	@ (801156c <USB_EPStartXfer+0x2e0>)
 801133a:	4013      	ands	r3, r2
 801133c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	015a      	lsls	r2, r3, #5
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	4413      	add	r3, r2
 8011346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801134a:	691a      	ldr	r2, [r3, #16]
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	0159      	lsls	r1, r3, #5
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	440b      	add	r3, r1
 8011354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011358:	4619      	mov	r1, r3
 801135a:	4b83      	ldr	r3, [pc, #524]	@ (8011568 <USB_EPStartXfer+0x2dc>)
 801135c:	4013      	ands	r3, r2
 801135e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d11a      	bne.n	801139c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	691a      	ldr	r2, [r3, #16]
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	429a      	cmp	r2, r3
 8011370:	d903      	bls.n	801137a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	689a      	ldr	r2, [r3, #8]
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	015a      	lsls	r2, r3, #5
 801137e:	69fb      	ldr	r3, [r7, #28]
 8011380:	4413      	add	r3, r2
 8011382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011386:	691b      	ldr	r3, [r3, #16]
 8011388:	69ba      	ldr	r2, [r7, #24]
 801138a:	0151      	lsls	r1, r2, #5
 801138c:	69fa      	ldr	r2, [r7, #28]
 801138e:	440a      	add	r2, r1
 8011390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011398:	6113      	str	r3, [r2, #16]
 801139a:	e01b      	b.n	80113d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	015a      	lsls	r2, r3, #5
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	4413      	add	r3, r2
 80113a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	6919      	ldr	r1, [r3, #16]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	689b      	ldr	r3, [r3, #8]
 80113b2:	440b      	add	r3, r1
 80113b4:	1e59      	subs	r1, r3, #1
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80113be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80113c0:	4b6b      	ldr	r3, [pc, #428]	@ (8011570 <USB_EPStartXfer+0x2e4>)
 80113c2:	400b      	ands	r3, r1
 80113c4:	69b9      	ldr	r1, [r7, #24]
 80113c6:	0148      	lsls	r0, r1, #5
 80113c8:	69f9      	ldr	r1, [r7, #28]
 80113ca:	4401      	add	r1, r0
 80113cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80113d0:	4313      	orrs	r3, r2
 80113d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	015a      	lsls	r2, r3, #5
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	4413      	add	r3, r2
 80113dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113e0:	691a      	ldr	r2, [r3, #16]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80113ea:	69b9      	ldr	r1, [r7, #24]
 80113ec:	0148      	lsls	r0, r1, #5
 80113ee:	69f9      	ldr	r1, [r7, #28]
 80113f0:	4401      	add	r1, r0
 80113f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80113f6:	4313      	orrs	r3, r2
 80113f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	791b      	ldrb	r3, [r3, #4]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d11f      	bne.n	8011442 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	015a      	lsls	r2, r3, #5
 8011406:	69fb      	ldr	r3, [r7, #28]
 8011408:	4413      	add	r3, r2
 801140a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	69ba      	ldr	r2, [r7, #24]
 8011412:	0151      	lsls	r1, r2, #5
 8011414:	69fa      	ldr	r2, [r7, #28]
 8011416:	440a      	add	r2, r1
 8011418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801141c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011420:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	015a      	lsls	r2, r3, #5
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	4413      	add	r3, r2
 801142a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	69ba      	ldr	r2, [r7, #24]
 8011432:	0151      	lsls	r1, r2, #5
 8011434:	69fa      	ldr	r2, [r7, #28]
 8011436:	440a      	add	r2, r1
 8011438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801143c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011440:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011442:	79fb      	ldrb	r3, [r7, #7]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d14b      	bne.n	80114e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	69db      	ldr	r3, [r3, #28]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d009      	beq.n	8011464 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	015a      	lsls	r2, r3, #5
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	4413      	add	r3, r2
 8011458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801145c:	461a      	mov	r2, r3
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	69db      	ldr	r3, [r3, #28]
 8011462:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	791b      	ldrb	r3, [r3, #4]
 8011468:	2b01      	cmp	r3, #1
 801146a:	d128      	bne.n	80114be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011478:	2b00      	cmp	r3, #0
 801147a:	d110      	bne.n	801149e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	015a      	lsls	r2, r3, #5
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	4413      	add	r3, r2
 8011484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	69ba      	ldr	r2, [r7, #24]
 801148c:	0151      	lsls	r1, r2, #5
 801148e:	69fa      	ldr	r2, [r7, #28]
 8011490:	440a      	add	r2, r1
 8011492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011496:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	e00f      	b.n	80114be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	015a      	lsls	r2, r3, #5
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	4413      	add	r3, r2
 80114a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	0151      	lsls	r1, r2, #5
 80114b0:	69fa      	ldr	r2, [r7, #28]
 80114b2:	440a      	add	r2, r1
 80114b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80114b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80114bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	015a      	lsls	r2, r3, #5
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	4413      	add	r3, r2
 80114c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	69ba      	ldr	r2, [r7, #24]
 80114ce:	0151      	lsls	r1, r2, #5
 80114d0:	69fa      	ldr	r2, [r7, #28]
 80114d2:	440a      	add	r2, r1
 80114d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80114d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80114dc:	6013      	str	r3, [r2, #0]
 80114de:	e16a      	b.n	80117b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	015a      	lsls	r2, r3, #5
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	4413      	add	r3, r2
 80114e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	69ba      	ldr	r2, [r7, #24]
 80114f0:	0151      	lsls	r1, r2, #5
 80114f2:	69fa      	ldr	r2, [r7, #28]
 80114f4:	440a      	add	r2, r1
 80114f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80114fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80114fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	791b      	ldrb	r3, [r3, #4]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d015      	beq.n	8011534 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	691b      	ldr	r3, [r3, #16]
 801150c:	2b00      	cmp	r3, #0
 801150e:	f000 8152 	beq.w	80117b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	f003 030f 	and.w	r3, r3, #15
 8011522:	2101      	movs	r1, #1
 8011524:	fa01 f303 	lsl.w	r3, r1, r3
 8011528:	69f9      	ldr	r1, [r7, #28]
 801152a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801152e:	4313      	orrs	r3, r2
 8011530:	634b      	str	r3, [r1, #52]	@ 0x34
 8011532:	e140      	b.n	80117b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011540:	2b00      	cmp	r3, #0
 8011542:	d117      	bne.n	8011574 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	69ba      	ldr	r2, [r7, #24]
 8011554:	0151      	lsls	r1, r2, #5
 8011556:	69fa      	ldr	r2, [r7, #28]
 8011558:	440a      	add	r2, r1
 801155a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801155e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011562:	6013      	str	r3, [r2, #0]
 8011564:	e016      	b.n	8011594 <USB_EPStartXfer+0x308>
 8011566:	bf00      	nop
 8011568:	e007ffff 	.word	0xe007ffff
 801156c:	fff80000 	.word	0xfff80000
 8011570:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	69ba      	ldr	r2, [r7, #24]
 8011584:	0151      	lsls	r1, r2, #5
 8011586:	69fa      	ldr	r2, [r7, #28]
 8011588:	440a      	add	r2, r1
 801158a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801158e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011592:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	68d9      	ldr	r1, [r3, #12]
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	781a      	ldrb	r2, [r3, #0]
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	b298      	uxth	r0, r3
 80115a2:	79fb      	ldrb	r3, [r7, #7]
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	4603      	mov	r3, r0
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f000 f9b9 	bl	8011920 <USB_WritePacket>
 80115ae:	e102      	b.n	80117b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115bc:	691a      	ldr	r2, [r3, #16]
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	0159      	lsls	r1, r3, #5
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	440b      	add	r3, r1
 80115c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115ca:	4619      	mov	r1, r3
 80115cc:	4b7c      	ldr	r3, [pc, #496]	@ (80117c0 <USB_EPStartXfer+0x534>)
 80115ce:	4013      	ands	r3, r2
 80115d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	015a      	lsls	r2, r3, #5
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	4413      	add	r3, r2
 80115da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115de:	691a      	ldr	r2, [r3, #16]
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	0159      	lsls	r1, r3, #5
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	440b      	add	r3, r1
 80115e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115ec:	4619      	mov	r1, r3
 80115ee:	4b75      	ldr	r3, [pc, #468]	@ (80117c4 <USB_EPStartXfer+0x538>)
 80115f0:	4013      	ands	r3, r2
 80115f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d12f      	bne.n	801165a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	691b      	ldr	r3, [r3, #16]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d003      	beq.n	801160a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	689a      	ldr	r2, [r3, #8]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	689a      	ldr	r2, [r3, #8]
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	015a      	lsls	r2, r3, #5
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	4413      	add	r3, r2
 801161a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801161e:	691a      	ldr	r2, [r3, #16]
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	6a1b      	ldr	r3, [r3, #32]
 8011624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011628:	69b9      	ldr	r1, [r7, #24]
 801162a:	0148      	lsls	r0, r1, #5
 801162c:	69f9      	ldr	r1, [r7, #28]
 801162e:	4401      	add	r1, r0
 8011630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011634:	4313      	orrs	r3, r2
 8011636:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	015a      	lsls	r2, r3, #5
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	4413      	add	r3, r2
 8011640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	69ba      	ldr	r2, [r7, #24]
 8011648:	0151      	lsls	r1, r2, #5
 801164a:	69fa      	ldr	r2, [r7, #28]
 801164c:	440a      	add	r2, r1
 801164e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011652:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011656:	6113      	str	r3, [r2, #16]
 8011658:	e05f      	b.n	801171a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d123      	bne.n	80116aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	015a      	lsls	r2, r3, #5
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	4413      	add	r3, r2
 801166a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801166e:	691a      	ldr	r2, [r3, #16]
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011678:	69b9      	ldr	r1, [r7, #24]
 801167a:	0148      	lsls	r0, r1, #5
 801167c:	69f9      	ldr	r1, [r7, #28]
 801167e:	4401      	add	r1, r0
 8011680:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011684:	4313      	orrs	r3, r2
 8011686:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	015a      	lsls	r2, r3, #5
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	4413      	add	r3, r2
 8011690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	69ba      	ldr	r2, [r7, #24]
 8011698:	0151      	lsls	r1, r2, #5
 801169a:	69fa      	ldr	r2, [r7, #28]
 801169c:	440a      	add	r2, r1
 801169e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80116a6:	6113      	str	r3, [r2, #16]
 80116a8:	e037      	b.n	801171a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	691a      	ldr	r2, [r3, #16]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	4413      	add	r3, r2
 80116b4:	1e5a      	subs	r2, r3, #1
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80116be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	8afa      	ldrh	r2, [r7, #22]
 80116c6:	fb03 f202 	mul.w	r2, r3, r2
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	015a      	lsls	r2, r3, #5
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	4413      	add	r3, r2
 80116d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116da:	691a      	ldr	r2, [r3, #16]
 80116dc:	8afb      	ldrh	r3, [r7, #22]
 80116de:	04d9      	lsls	r1, r3, #19
 80116e0:	4b39      	ldr	r3, [pc, #228]	@ (80117c8 <USB_EPStartXfer+0x53c>)
 80116e2:	400b      	ands	r3, r1
 80116e4:	69b9      	ldr	r1, [r7, #24]
 80116e6:	0148      	lsls	r0, r1, #5
 80116e8:	69f9      	ldr	r1, [r7, #28]
 80116ea:	4401      	add	r1, r0
 80116ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80116f0:	4313      	orrs	r3, r2
 80116f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	015a      	lsls	r2, r3, #5
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	4413      	add	r3, r2
 80116fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011700:	691a      	ldr	r2, [r3, #16]
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	6a1b      	ldr	r3, [r3, #32]
 8011706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801170a:	69b9      	ldr	r1, [r7, #24]
 801170c:	0148      	lsls	r0, r1, #5
 801170e:	69f9      	ldr	r1, [r7, #28]
 8011710:	4401      	add	r1, r0
 8011712:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011716:	4313      	orrs	r3, r2
 8011718:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d10d      	bne.n	801173c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	68d9      	ldr	r1, [r3, #12]
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	015a      	lsls	r2, r3, #5
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	4413      	add	r3, r2
 8011734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011738:	460a      	mov	r2, r1
 801173a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	791b      	ldrb	r3, [r3, #4]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d128      	bne.n	8011796 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011750:	2b00      	cmp	r3, #0
 8011752:	d110      	bne.n	8011776 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	015a      	lsls	r2, r3, #5
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	4413      	add	r3, r2
 801175c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	0151      	lsls	r1, r2, #5
 8011766:	69fa      	ldr	r2, [r7, #28]
 8011768:	440a      	add	r2, r1
 801176a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801176e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	e00f      	b.n	8011796 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	015a      	lsls	r2, r3, #5
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	4413      	add	r3, r2
 801177e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	0151      	lsls	r1, r2, #5
 8011788:	69fa      	ldr	r2, [r7, #28]
 801178a:	440a      	add	r2, r1
 801178c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011794:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	015a      	lsls	r2, r3, #5
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	4413      	add	r3, r2
 801179e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	0151      	lsls	r1, r2, #5
 80117a8:	69fa      	ldr	r2, [r7, #28]
 80117aa:	440a      	add	r2, r1
 80117ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80117b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80117b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3720      	adds	r7, #32
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	fff80000 	.word	0xfff80000
 80117c4:	e007ffff 	.word	0xe007ffff
 80117c8:	1ff80000 	.word	0x1ff80000

080117cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b087      	sub	sp, #28
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80117d6:	2300      	movs	r3, #0
 80117d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80117da:	2300      	movs	r3, #0
 80117dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d14a      	bne.n	8011880 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	015a      	lsls	r2, r3, #5
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	4413      	add	r3, r2
 80117f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011802:	f040 8086 	bne.w	8011912 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	4413      	add	r3, r2
 8011810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	683a      	ldr	r2, [r7, #0]
 8011818:	7812      	ldrb	r2, [r2, #0]
 801181a:	0151      	lsls	r1, r2, #5
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	440a      	add	r2, r1
 8011820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011824:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011828:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	4413      	add	r3, r2
 8011834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	683a      	ldr	r2, [r7, #0]
 801183c:	7812      	ldrb	r2, [r2, #0]
 801183e:	0151      	lsls	r1, r2, #5
 8011840:	693a      	ldr	r2, [r7, #16]
 8011842:	440a      	add	r2, r1
 8011844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011848:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801184c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	3301      	adds	r3, #1
 8011852:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f242 7210 	movw	r2, #10000	@ 0x2710
 801185a:	4293      	cmp	r3, r2
 801185c:	d902      	bls.n	8011864 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801185e:	2301      	movs	r3, #1
 8011860:	75fb      	strb	r3, [r7, #23]
          break;
 8011862:	e056      	b.n	8011912 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	015a      	lsls	r2, r3, #5
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	4413      	add	r3, r2
 801186e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801187c:	d0e7      	beq.n	801184e <USB_EPStopXfer+0x82>
 801187e:	e048      	b.n	8011912 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	015a      	lsls	r2, r3, #5
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	4413      	add	r3, r2
 801188a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011898:	d13b      	bne.n	8011912 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	015a      	lsls	r2, r3, #5
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	4413      	add	r3, r2
 80118a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	7812      	ldrb	r2, [r2, #0]
 80118ae:	0151      	lsls	r1, r2, #5
 80118b0:	693a      	ldr	r2, [r7, #16]
 80118b2:	440a      	add	r2, r1
 80118b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80118b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80118bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	015a      	lsls	r2, r3, #5
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	4413      	add	r3, r2
 80118c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	7812      	ldrb	r2, [r2, #0]
 80118d2:	0151      	lsls	r1, r2, #5
 80118d4:	693a      	ldr	r2, [r7, #16]
 80118d6:	440a      	add	r2, r1
 80118d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80118dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3301      	adds	r3, #1
 80118e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d902      	bls.n	80118f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	75fb      	strb	r3, [r7, #23]
          break;
 80118f6:	e00c      	b.n	8011912 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	015a      	lsls	r2, r3, #5
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	4413      	add	r3, r2
 8011902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801190c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011910:	d0e7      	beq.n	80118e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011912:	7dfb      	ldrb	r3, [r7, #23]
}
 8011914:	4618      	mov	r0, r3
 8011916:	371c      	adds	r7, #28
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011920:	b480      	push	{r7}
 8011922:	b089      	sub	sp, #36	@ 0x24
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	4611      	mov	r1, r2
 801192c:	461a      	mov	r2, r3
 801192e:	460b      	mov	r3, r1
 8011930:	71fb      	strb	r3, [r7, #7]
 8011932:	4613      	mov	r3, r2
 8011934:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801193e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011942:	2b00      	cmp	r3, #0
 8011944:	d123      	bne.n	801198e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011946:	88bb      	ldrh	r3, [r7, #4]
 8011948:	3303      	adds	r3, #3
 801194a:	089b      	lsrs	r3, r3, #2
 801194c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801194e:	2300      	movs	r3, #0
 8011950:	61bb      	str	r3, [r7, #24]
 8011952:	e018      	b.n	8011986 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011954:	79fb      	ldrb	r3, [r7, #7]
 8011956:	031a      	lsls	r2, r3, #12
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	4413      	add	r3, r2
 801195c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011960:	461a      	mov	r2, r3
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	3301      	adds	r3, #1
 801196c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	3301      	adds	r3, #1
 8011972:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	3301      	adds	r3, #1
 8011978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	3301      	adds	r3, #1
 801197e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011980:	69bb      	ldr	r3, [r7, #24]
 8011982:	3301      	adds	r3, #1
 8011984:	61bb      	str	r3, [r7, #24]
 8011986:	69ba      	ldr	r2, [r7, #24]
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	429a      	cmp	r2, r3
 801198c:	d3e2      	bcc.n	8011954 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3724      	adds	r7, #36	@ 0x24
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801199c:	b480      	push	{r7}
 801199e:	b08b      	sub	sp, #44	@ 0x2c
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	4613      	mov	r3, r2
 80119a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80119b2:	88fb      	ldrh	r3, [r7, #6]
 80119b4:	089b      	lsrs	r3, r3, #2
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80119ba:	88fb      	ldrh	r3, [r7, #6]
 80119bc:	f003 0303 	and.w	r3, r3, #3
 80119c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80119c2:	2300      	movs	r3, #0
 80119c4:	623b      	str	r3, [r7, #32]
 80119c6:	e014      	b.n	80119f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80119d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d6:	3301      	adds	r3, #1
 80119d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	3301      	adds	r3, #1
 80119de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80119e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e2:	3301      	adds	r3, #1
 80119e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80119e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e8:	3301      	adds	r3, #1
 80119ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	3301      	adds	r3, #1
 80119f0:	623b      	str	r3, [r7, #32]
 80119f2:	6a3a      	ldr	r2, [r7, #32]
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d3e6      	bcc.n	80119c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80119fa:	8bfb      	ldrh	r3, [r7, #30]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d01e      	beq.n	8011a3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011a00:	2300      	movs	r3, #0
 8011a02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	f107 0310 	add.w	r3, r7, #16
 8011a10:	6812      	ldr	r2, [r2, #0]
 8011a12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011a14:	693a      	ldr	r2, [r7, #16]
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a24:	701a      	strb	r2, [r3, #0]
      i++;
 8011a26:	6a3b      	ldr	r3, [r7, #32]
 8011a28:	3301      	adds	r3, #1
 8011a2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2e:	3301      	adds	r3, #1
 8011a30:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011a32:	8bfb      	ldrh	r3, [r7, #30]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011a38:	8bfb      	ldrh	r3, [r7, #30]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1ea      	bne.n	8011a14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	372c      	adds	r7, #44	@ 0x2c
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b085      	sub	sp, #20
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	785b      	ldrb	r3, [r3, #1]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d12c      	bne.n	8011ac2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	015a      	lsls	r2, r3, #5
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	4413      	add	r3, r2
 8011a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	db12      	blt.n	8011aa0 <USB_EPSetStall+0x54>
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00f      	beq.n	8011aa0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	015a      	lsls	r2, r3, #5
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	4413      	add	r3, r2
 8011a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	0151      	lsls	r1, r2, #5
 8011a92:	68fa      	ldr	r2, [r7, #12]
 8011a94:	440a      	add	r2, r1
 8011a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011a9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	015a      	lsls	r2, r3, #5
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	0151      	lsls	r1, r2, #5
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	440a      	add	r2, r1
 8011ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011abe:	6013      	str	r3, [r2, #0]
 8011ac0:	e02b      	b.n	8011b1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	015a      	lsls	r2, r3, #5
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	4413      	add	r3, r2
 8011aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	db12      	blt.n	8011afa <USB_EPSetStall+0xae>
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00f      	beq.n	8011afa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	015a      	lsls	r2, r3, #5
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	0151      	lsls	r1, r2, #5
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	440a      	add	r2, r1
 8011af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011af4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011af8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	015a      	lsls	r2, r3, #5
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	4413      	add	r3, r2
 8011b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	0151      	lsls	r1, r2, #5
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	440a      	add	r2, r1
 8011b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011b18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011b1a:	2300      	movs	r3, #0
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	785b      	ldrb	r3, [r3, #1]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d128      	bne.n	8011b96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	015a      	lsls	r2, r3, #5
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	0151      	lsls	r1, r2, #5
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	440a      	add	r2, r1
 8011b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011b62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	791b      	ldrb	r3, [r3, #4]
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d003      	beq.n	8011b74 <USB_EPClearStall+0x4c>
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	791b      	ldrb	r3, [r3, #4]
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d138      	bne.n	8011be6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	015a      	lsls	r2, r3, #5
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	0151      	lsls	r1, r2, #5
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	440a      	add	r2, r1
 8011b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011b92:	6013      	str	r3, [r2, #0]
 8011b94:	e027      	b.n	8011be6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	015a      	lsls	r2, r3, #5
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	0151      	lsls	r1, r2, #5
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	440a      	add	r2, r1
 8011bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011bb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011bb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	791b      	ldrb	r3, [r3, #4]
 8011bba:	2b03      	cmp	r3, #3
 8011bbc:	d003      	beq.n	8011bc6 <USB_EPClearStall+0x9e>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	791b      	ldrb	r3, [r3, #4]
 8011bc2:	2b02      	cmp	r3, #2
 8011bc4:	d10f      	bne.n	8011be6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	015a      	lsls	r2, r3, #5
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	0151      	lsls	r1, r2, #5
 8011bd8:	68fa      	ldr	r2, [r7, #12]
 8011bda:	440a      	add	r2, r1
 8011bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011be4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3714      	adds	r7, #20
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	68fa      	ldr	r2, [r7, #12]
 8011c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011c12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011c16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	78fb      	ldrb	r3, [r7, #3]
 8011c22:	011b      	lsls	r3, r3, #4
 8011c24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011c28:	68f9      	ldr	r1, [r7, #12]
 8011c2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011c5a:	f023 0303 	bic.w	r3, r3, #3
 8011c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011c6e:	f023 0302 	bic.w	r3, r3, #2
 8011c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3714      	adds	r7, #20
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr

08011c82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011c82:	b480      	push	{r7}
 8011c84:	b085      	sub	sp, #20
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011c9c:	f023 0303 	bic.w	r3, r3, #3
 8011ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011cb0:	f043 0302 	orr.w	r3, r3, #2
 8011cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	695b      	ldr	r3, [r3, #20]
 8011cd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	699b      	ldr	r3, [r3, #24]
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	4013      	ands	r3, r2
 8011cda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011cea:	b480      	push	{r7}
 8011cec:	b085      	sub	sp, #20
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cfc:	699b      	ldr	r3, [r3, #24]
 8011cfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d06:	69db      	ldr	r3, [r3, #28]
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	4013      	ands	r3, r2
 8011d0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	0c1b      	lsrs	r3, r3, #16
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3714      	adds	r7, #20
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr

08011d1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b085      	sub	sp, #20
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d30:	699b      	ldr	r3, [r3, #24]
 8011d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d3a:	69db      	ldr	r3, [r3, #28]
 8011d3c:	68ba      	ldr	r2, [r7, #8]
 8011d3e:	4013      	ands	r3, r2
 8011d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	b29b      	uxth	r3, r3
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3714      	adds	r7, #20
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr

08011d52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011d52:	b480      	push	{r7}
 8011d54:	b085      	sub	sp, #20
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011d62:	78fb      	ldrb	r3, [r7, #3]
 8011d64:	015a      	lsls	r2, r3, #5
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	4413      	add	r3, r2
 8011d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d78:	695b      	ldr	r3, [r3, #20]
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	4013      	ands	r3, r2
 8011d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011d80:	68bb      	ldr	r3, [r7, #8]
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3714      	adds	r7, #20
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011d8e:	b480      	push	{r7}
 8011d90:	b087      	sub	sp, #28
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	460b      	mov	r3, r1
 8011d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011db0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011db2:	78fb      	ldrb	r3, [r7, #3]
 8011db4:	f003 030f 	and.w	r3, r3, #15
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	fa22 f303 	lsr.w	r3, r2, r3
 8011dbe:	01db      	lsls	r3, r3, #7
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	693a      	ldr	r2, [r7, #16]
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011dc8:	78fb      	ldrb	r3, [r7, #3]
 8011dca:	015a      	lsls	r2, r3, #5
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	4413      	add	r3, r2
 8011dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	693a      	ldr	r2, [r7, #16]
 8011dd8:	4013      	ands	r3, r2
 8011dda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011ddc:	68bb      	ldr	r3, [r7, #8]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	371c      	adds	r7, #28
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr

08011dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011dea:	b480      	push	{r7}
 8011dec:	b083      	sub	sp, #12
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	695b      	ldr	r3, [r3, #20]
 8011df6:	f003 0301 	and.w	r3, r3, #1
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr
	...

08011e08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e22:	4619      	mov	r1, r3
 8011e24:	4b09      	ldr	r3, [pc, #36]	@ (8011e4c <USB_ActivateSetup+0x44>)
 8011e26:	4013      	ands	r3, r2
 8011e28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	68fa      	ldr	r2, [r7, #12]
 8011e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3714      	adds	r7, #20
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr
 8011e4c:	fffff800 	.word	0xfffff800

08011e50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b087      	sub	sp, #28
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	607a      	str	r2, [r7, #4]
 8011e5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	333c      	adds	r3, #60	@ 0x3c
 8011e66:	3304      	adds	r3, #4
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	4a26      	ldr	r2, [pc, #152]	@ (8011f08 <USB_EP0_OutStart+0xb8>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d90a      	bls.n	8011e8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011e84:	d101      	bne.n	8011e8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011e86:	2300      	movs	r3, #0
 8011e88:	e037      	b.n	8011efa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e90:	461a      	mov	r2, r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e9c:	691b      	ldr	r3, [r3, #16]
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	697a      	ldr	r2, [r7, #20]
 8011eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011eb8:	f043 0318 	orr.w	r3, r3, #24
 8011ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ecc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011ed0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011ed2:	7afb      	ldrb	r3, [r7, #11]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d10f      	bne.n	8011ef8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ede:	461a      	mov	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	697a      	ldr	r2, [r7, #20]
 8011eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ef2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	371c      	adds	r7, #28
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	4f54300a 	.word	0x4f54300a

08011f0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011f24:	d901      	bls.n	8011f2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011f26:	2303      	movs	r3, #3
 8011f28:	e01b      	b.n	8011f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	691b      	ldr	r3, [r3, #16]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	daf2      	bge.n	8011f18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011f32:	2300      	movs	r3, #0
 8011f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	f043 0201 	orr.w	r2, r3, #1
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	3301      	adds	r3, #1
 8011f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011f4e:	d901      	bls.n	8011f54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e006      	b.n	8011f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	691b      	ldr	r3, [r3, #16]
 8011f58:	f003 0301 	and.w	r3, r3, #1
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d0f0      	beq.n	8011f42 <USB_CoreReset+0x36>

  return HAL_OK;
 8011f60:	2300      	movs	r3, #0
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3714      	adds	r7, #20
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr
	...

08011f70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	460b      	mov	r3, r1
 8011f7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011f7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011f80:	f002 fcca 	bl	8014918 <USBD_static_malloc>
 8011f84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d109      	bne.n	8011fa0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	32b0      	adds	r2, #176	@ 0xb0
 8011f96:	2100      	movs	r1, #0
 8011f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011f9c:	2302      	movs	r3, #2
 8011f9e:	e0d4      	b.n	801214a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011fa0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f004 f817 	bl	8015fda <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	32b0      	adds	r2, #176	@ 0xb0
 8011fb6:	68f9      	ldr	r1, [r7, #12]
 8011fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	32b0      	adds	r2, #176	@ 0xb0
 8011fc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	7c1b      	ldrb	r3, [r3, #16]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d138      	bne.n	801204a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8012154 <USBD_CDC_Init+0x1e4>)
 8011fda:	7819      	ldrb	r1, [r3, #0]
 8011fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011fe0:	2202      	movs	r2, #2
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f002 fb75 	bl	80146d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8012154 <USBD_CDC_Init+0x1e4>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	f003 020f 	and.w	r2, r3, #15
 8011ff0:	6879      	ldr	r1, [r7, #4]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	4413      	add	r3, r2
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	440b      	add	r3, r1
 8011ffc:	3324      	adds	r3, #36	@ 0x24
 8011ffe:	2201      	movs	r2, #1
 8012000:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012002:	4b55      	ldr	r3, [pc, #340]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012004:	7819      	ldrb	r1, [r3, #0]
 8012006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801200a:	2202      	movs	r2, #2
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f002 fb60 	bl	80146d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012012:	4b51      	ldr	r3, [pc, #324]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	f003 020f 	and.w	r2, r3, #15
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	4613      	mov	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	4413      	add	r3, r2
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	440b      	add	r3, r1
 8012026:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801202a:	2201      	movs	r2, #1
 801202c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801202e:	4b4b      	ldr	r3, [pc, #300]	@ (801215c <USBD_CDC_Init+0x1ec>)
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	f003 020f 	and.w	r2, r3, #15
 8012036:	6879      	ldr	r1, [r7, #4]
 8012038:	4613      	mov	r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	4413      	add	r3, r2
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	440b      	add	r3, r1
 8012042:	3326      	adds	r3, #38	@ 0x26
 8012044:	2210      	movs	r2, #16
 8012046:	801a      	strh	r2, [r3, #0]
 8012048:	e035      	b.n	80120b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801204a:	4b42      	ldr	r3, [pc, #264]	@ (8012154 <USBD_CDC_Init+0x1e4>)
 801204c:	7819      	ldrb	r1, [r3, #0]
 801204e:	2340      	movs	r3, #64	@ 0x40
 8012050:	2202      	movs	r2, #2
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f002 fb3d 	bl	80146d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012058:	4b3e      	ldr	r3, [pc, #248]	@ (8012154 <USBD_CDC_Init+0x1e4>)
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	f003 020f 	and.w	r2, r3, #15
 8012060:	6879      	ldr	r1, [r7, #4]
 8012062:	4613      	mov	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	440b      	add	r3, r1
 801206c:	3324      	adds	r3, #36	@ 0x24
 801206e:	2201      	movs	r2, #1
 8012070:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012072:	4b39      	ldr	r3, [pc, #228]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012074:	7819      	ldrb	r1, [r3, #0]
 8012076:	2340      	movs	r3, #64	@ 0x40
 8012078:	2202      	movs	r2, #2
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f002 fb29 	bl	80146d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012080:	4b35      	ldr	r3, [pc, #212]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	f003 020f 	and.w	r2, r3, #15
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	4613      	mov	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	4413      	add	r3, r2
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	440b      	add	r3, r1
 8012094:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012098:	2201      	movs	r2, #1
 801209a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801209c:	4b2f      	ldr	r3, [pc, #188]	@ (801215c <USBD_CDC_Init+0x1ec>)
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	f003 020f 	and.w	r2, r3, #15
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	4613      	mov	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4413      	add	r3, r2
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	440b      	add	r3, r1
 80120b0:	3326      	adds	r3, #38	@ 0x26
 80120b2:	2210      	movs	r2, #16
 80120b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80120b6:	4b29      	ldr	r3, [pc, #164]	@ (801215c <USBD_CDC_Init+0x1ec>)
 80120b8:	7819      	ldrb	r1, [r3, #0]
 80120ba:	2308      	movs	r3, #8
 80120bc:	2203      	movs	r2, #3
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f002 fb07 	bl	80146d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80120c4:	4b25      	ldr	r3, [pc, #148]	@ (801215c <USBD_CDC_Init+0x1ec>)
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	f003 020f 	and.w	r2, r3, #15
 80120cc:	6879      	ldr	r1, [r7, #4]
 80120ce:	4613      	mov	r3, r2
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	4413      	add	r3, r2
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	440b      	add	r3, r1
 80120d8:	3324      	adds	r3, #36	@ 0x24
 80120da:	2201      	movs	r2, #1
 80120dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2200      	movs	r2, #0
 80120e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	33b0      	adds	r3, #176	@ 0xb0
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	4413      	add	r3, r2
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2200      	movs	r2, #0
 8012106:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012114:	2302      	movs	r3, #2
 8012116:	e018      	b.n	801214a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	7c1b      	ldrb	r3, [r3, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10a      	bne.n	8012136 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012120:	4b0d      	ldr	r3, [pc, #52]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012122:	7819      	ldrb	r1, [r3, #0]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801212a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f002 fbbe 	bl	80148b0 <USBD_LL_PrepareReceive>
 8012134:	e008      	b.n	8012148 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012136:	4b08      	ldr	r3, [pc, #32]	@ (8012158 <USBD_CDC_Init+0x1e8>)
 8012138:	7819      	ldrb	r1, [r3, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012140:	2340      	movs	r3, #64	@ 0x40
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f002 fbb4 	bl	80148b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	24000097 	.word	0x24000097
 8012158:	24000098 	.word	0x24000098
 801215c:	24000099 	.word	0x24000099

08012160 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801216c:	4b3a      	ldr	r3, [pc, #232]	@ (8012258 <USBD_CDC_DeInit+0xf8>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	4619      	mov	r1, r3
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f002 fad3 	bl	801471e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012178:	4b37      	ldr	r3, [pc, #220]	@ (8012258 <USBD_CDC_DeInit+0xf8>)
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	f003 020f 	and.w	r2, r3, #15
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	4413      	add	r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	440b      	add	r3, r1
 801218c:	3324      	adds	r3, #36	@ 0x24
 801218e:	2200      	movs	r2, #0
 8012190:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012192:	4b32      	ldr	r3, [pc, #200]	@ (801225c <USBD_CDC_DeInit+0xfc>)
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	4619      	mov	r1, r3
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f002 fac0 	bl	801471e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801219e:	4b2f      	ldr	r3, [pc, #188]	@ (801225c <USBD_CDC_DeInit+0xfc>)
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	f003 020f 	and.w	r2, r3, #15
 80121a6:	6879      	ldr	r1, [r7, #4]
 80121a8:	4613      	mov	r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	4413      	add	r3, r2
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	440b      	add	r3, r1
 80121b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80121b6:	2200      	movs	r2, #0
 80121b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80121ba:	4b29      	ldr	r3, [pc, #164]	@ (8012260 <USBD_CDC_DeInit+0x100>)
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	4619      	mov	r1, r3
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f002 faac 	bl	801471e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80121c6:	4b26      	ldr	r3, [pc, #152]	@ (8012260 <USBD_CDC_DeInit+0x100>)
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	f003 020f 	and.w	r2, r3, #15
 80121ce:	6879      	ldr	r1, [r7, #4]
 80121d0:	4613      	mov	r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4413      	add	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	440b      	add	r3, r1
 80121da:	3324      	adds	r3, #36	@ 0x24
 80121dc:	2200      	movs	r2, #0
 80121de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80121e0:	4b1f      	ldr	r3, [pc, #124]	@ (8012260 <USBD_CDC_DeInit+0x100>)
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	f003 020f 	and.w	r2, r3, #15
 80121e8:	6879      	ldr	r1, [r7, #4]
 80121ea:	4613      	mov	r3, r2
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	4413      	add	r3, r2
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	440b      	add	r3, r1
 80121f4:	3326      	adds	r3, #38	@ 0x26
 80121f6:	2200      	movs	r2, #0
 80121f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	32b0      	adds	r2, #176	@ 0xb0
 8012204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d01f      	beq.n	801224c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	33b0      	adds	r3, #176	@ 0xb0
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	4413      	add	r3, r2
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	32b0      	adds	r2, #176	@ 0xb0
 801222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801222e:	4618      	mov	r0, r3
 8012230:	f002 fb80 	bl	8014934 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	32b0      	adds	r2, #176	@ 0xb0
 801223e:	2100      	movs	r1, #0
 8012240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	24000097 	.word	0x24000097
 801225c:	24000098 	.word	0x24000098
 8012260:	24000099 	.word	0x24000099

08012264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	32b0      	adds	r2, #176	@ 0xb0
 8012278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801227c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801227e:	2300      	movs	r3, #0
 8012280:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012282:	2300      	movs	r3, #0
 8012284:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012286:	2300      	movs	r3, #0
 8012288:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012290:	2303      	movs	r3, #3
 8012292:	e0bf      	b.n	8012414 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801229c:	2b00      	cmp	r3, #0
 801229e:	d050      	beq.n	8012342 <USBD_CDC_Setup+0xde>
 80122a0:	2b20      	cmp	r3, #32
 80122a2:	f040 80af 	bne.w	8012404 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	88db      	ldrh	r3, [r3, #6]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d03a      	beq.n	8012324 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	b25b      	sxtb	r3, r3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	da1b      	bge.n	80122f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	33b0      	adds	r3, #176	@ 0xb0
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	4413      	add	r3, r2
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	683a      	ldr	r2, [r7, #0]
 80122cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80122ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80122d0:	683a      	ldr	r2, [r7, #0]
 80122d2:	88d2      	ldrh	r2, [r2, #6]
 80122d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	88db      	ldrh	r3, [r3, #6]
 80122da:	2b07      	cmp	r3, #7
 80122dc:	bf28      	it	cs
 80122de:	2307      	movcs	r3, #7
 80122e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	89fa      	ldrh	r2, [r7, #14]
 80122e6:	4619      	mov	r1, r3
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f001 fdbd 	bl	8013e68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80122ee:	e090      	b.n	8012412 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	785a      	ldrb	r2, [r3, #1]
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	88db      	ldrh	r3, [r3, #6]
 80122fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8012300:	d803      	bhi.n	801230a <USBD_CDC_Setup+0xa6>
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	88db      	ldrh	r3, [r3, #6]
 8012306:	b2da      	uxtb	r2, r3
 8012308:	e000      	b.n	801230c <USBD_CDC_Setup+0xa8>
 801230a:	2240      	movs	r2, #64	@ 0x40
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012312:	6939      	ldr	r1, [r7, #16]
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801231a:	461a      	mov	r2, r3
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f001 fdcf 	bl	8013ec0 <USBD_CtlPrepareRx>
      break;
 8012322:	e076      	b.n	8012412 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	33b0      	adds	r3, #176	@ 0xb0
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	4413      	add	r3, r2
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	683a      	ldr	r2, [r7, #0]
 8012338:	7850      	ldrb	r0, [r2, #1]
 801233a:	2200      	movs	r2, #0
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	4798      	blx	r3
      break;
 8012340:	e067      	b.n	8012412 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	785b      	ldrb	r3, [r3, #1]
 8012346:	2b0b      	cmp	r3, #11
 8012348:	d851      	bhi.n	80123ee <USBD_CDC_Setup+0x18a>
 801234a:	a201      	add	r2, pc, #4	@ (adr r2, 8012350 <USBD_CDC_Setup+0xec>)
 801234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012350:	08012381 	.word	0x08012381
 8012354:	080123fd 	.word	0x080123fd
 8012358:	080123ef 	.word	0x080123ef
 801235c:	080123ef 	.word	0x080123ef
 8012360:	080123ef 	.word	0x080123ef
 8012364:	080123ef 	.word	0x080123ef
 8012368:	080123ef 	.word	0x080123ef
 801236c:	080123ef 	.word	0x080123ef
 8012370:	080123ef 	.word	0x080123ef
 8012374:	080123ef 	.word	0x080123ef
 8012378:	080123ab 	.word	0x080123ab
 801237c:	080123d5 	.word	0x080123d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b03      	cmp	r3, #3
 801238a:	d107      	bne.n	801239c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801238c:	f107 030a 	add.w	r3, r7, #10
 8012390:	2202      	movs	r2, #2
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f001 fd67 	bl	8013e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801239a:	e032      	b.n	8012402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801239c:	6839      	ldr	r1, [r7, #0]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f001 fce5 	bl	8013d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80123a4:	2303      	movs	r3, #3
 80123a6:	75fb      	strb	r3, [r7, #23]
          break;
 80123a8:	e02b      	b.n	8012402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d107      	bne.n	80123c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80123b6:	f107 030d 	add.w	r3, r7, #13
 80123ba:	2201      	movs	r2, #1
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f001 fd52 	bl	8013e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80123c4:	e01d      	b.n	8012402 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f001 fcd0 	bl	8013d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80123ce:	2303      	movs	r3, #3
 80123d0:	75fb      	strb	r3, [r7, #23]
          break;
 80123d2:	e016      	b.n	8012402 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d00f      	beq.n	8012400 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80123e0:	6839      	ldr	r1, [r7, #0]
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f001 fcc3 	bl	8013d6e <USBD_CtlError>
            ret = USBD_FAIL;
 80123e8:	2303      	movs	r3, #3
 80123ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80123ec:	e008      	b.n	8012400 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80123ee:	6839      	ldr	r1, [r7, #0]
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f001 fcbc 	bl	8013d6e <USBD_CtlError>
          ret = USBD_FAIL;
 80123f6:	2303      	movs	r3, #3
 80123f8:	75fb      	strb	r3, [r7, #23]
          break;
 80123fa:	e002      	b.n	8012402 <USBD_CDC_Setup+0x19e>
          break;
 80123fc:	bf00      	nop
 80123fe:	e008      	b.n	8012412 <USBD_CDC_Setup+0x1ae>
          break;
 8012400:	bf00      	nop
      }
      break;
 8012402:	e006      	b.n	8012412 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012404:	6839      	ldr	r1, [r7, #0]
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f001 fcb1 	bl	8013d6e <USBD_CtlError>
      ret = USBD_FAIL;
 801240c:	2303      	movs	r3, #3
 801240e:	75fb      	strb	r3, [r7, #23]
      break;
 8012410:	bf00      	nop
  }

  return (uint8_t)ret;
 8012412:	7dfb      	ldrb	r3, [r7, #23]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801242e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	32b0      	adds	r2, #176	@ 0xb0
 801243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d101      	bne.n	8012446 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012442:	2303      	movs	r3, #3
 8012444:	e065      	b.n	8012512 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	32b0      	adds	r2, #176	@ 0xb0
 8012450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012456:	78fb      	ldrb	r3, [r7, #3]
 8012458:	f003 020f 	and.w	r2, r3, #15
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	4613      	mov	r3, r2
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	4413      	add	r3, r2
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	440b      	add	r3, r1
 8012468:	3318      	adds	r3, #24
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d02f      	beq.n	80124d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012470:	78fb      	ldrb	r3, [r7, #3]
 8012472:	f003 020f 	and.w	r2, r3, #15
 8012476:	6879      	ldr	r1, [r7, #4]
 8012478:	4613      	mov	r3, r2
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	4413      	add	r3, r2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	440b      	add	r3, r1
 8012482:	3318      	adds	r3, #24
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	78fb      	ldrb	r3, [r7, #3]
 8012488:	f003 010f 	and.w	r1, r3, #15
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	460b      	mov	r3, r1
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	440b      	add	r3, r1
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4403      	add	r3, r0
 8012498:	331c      	adds	r3, #28
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	fbb2 f1f3 	udiv	r1, r2, r3
 80124a0:	fb01 f303 	mul.w	r3, r1, r3
 80124a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d112      	bne.n	80124d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80124aa:	78fb      	ldrb	r3, [r7, #3]
 80124ac:	f003 020f 	and.w	r2, r3, #15
 80124b0:	6879      	ldr	r1, [r7, #4]
 80124b2:	4613      	mov	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	440b      	add	r3, r1
 80124bc:	3318      	adds	r3, #24
 80124be:	2200      	movs	r2, #0
 80124c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80124c2:	78f9      	ldrb	r1, [r7, #3]
 80124c4:	2300      	movs	r3, #0
 80124c6:	2200      	movs	r2, #0
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f002 f9d0 	bl	801486e <USBD_LL_Transmit>
 80124ce:	e01f      	b.n	8012510 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	2200      	movs	r2, #0
 80124d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	33b0      	adds	r3, #176	@ 0xb0
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	4413      	add	r3, r2
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	691b      	ldr	r3, [r3, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d010      	beq.n	8012510 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	33b0      	adds	r3, #176	@ 0xb0
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4413      	add	r3, r2
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	691b      	ldr	r3, [r3, #16]
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012506:	68ba      	ldr	r2, [r7, #8]
 8012508:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801250c:	78fa      	ldrb	r2, [r7, #3]
 801250e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012510:	2300      	movs	r3, #0
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	460b      	mov	r3, r1
 8012524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	32b0      	adds	r2, #176	@ 0xb0
 8012530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012534:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	32b0      	adds	r2, #176	@ 0xb0
 8012540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d101      	bne.n	801254c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012548:	2303      	movs	r3, #3
 801254a:	e01a      	b.n	8012582 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801254c:	78fb      	ldrb	r3, [r7, #3]
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f002 f9ce 	bl	80148f2 <USBD_LL_GetRxDataSize>
 8012556:	4602      	mov	r2, r0
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	33b0      	adds	r3, #176	@ 0xb0
 8012568:	009b      	lsls	r3, r3, #2
 801256a:	4413      	add	r3, r2
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801257c:	4611      	mov	r1, r2
 801257e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012580:	2300      	movs	r3, #0
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}

0801258a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801258a:	b580      	push	{r7, lr}
 801258c:	b084      	sub	sp, #16
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	32b0      	adds	r2, #176	@ 0xb0
 801259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d101      	bne.n	80125ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80125a8:	2303      	movs	r3, #3
 80125aa:	e024      	b.n	80125f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	33b0      	adds	r3, #176	@ 0xb0
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	4413      	add	r3, r2
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d019      	beq.n	80125f4 <USBD_CDC_EP0_RxReady+0x6a>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80125c6:	2bff      	cmp	r3, #255	@ 0xff
 80125c8:	d014      	beq.n	80125f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	33b0      	adds	r3, #176	@ 0xb0
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	4413      	add	r3, r2
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	68fa      	ldr	r2, [r7, #12]
 80125de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80125e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80125ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	22ff      	movs	r2, #255	@ 0xff
 80125f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80125f4:	2300      	movs	r3, #0
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012608:	2182      	movs	r1, #130	@ 0x82
 801260a:	4818      	ldr	r0, [pc, #96]	@ (801266c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801260c:	f000 fd4f 	bl	80130ae <USBD_GetEpDesc>
 8012610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012612:	2101      	movs	r1, #1
 8012614:	4815      	ldr	r0, [pc, #84]	@ (801266c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012616:	f000 fd4a 	bl	80130ae <USBD_GetEpDesc>
 801261a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801261c:	2181      	movs	r1, #129	@ 0x81
 801261e:	4813      	ldr	r0, [pc, #76]	@ (801266c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012620:	f000 fd45 	bl	80130ae <USBD_GetEpDesc>
 8012624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d002      	beq.n	8012632 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	2210      	movs	r2, #16
 8012630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d006      	beq.n	8012646 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	2200      	movs	r2, #0
 801263c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012640:	711a      	strb	r2, [r3, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d006      	beq.n	801265a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2200      	movs	r2, #0
 8012650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012654:	711a      	strb	r2, [r3, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2243      	movs	r2, #67	@ 0x43
 801265e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012660:	4b02      	ldr	r3, [pc, #8]	@ (801266c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012662:	4618      	mov	r0, r3
 8012664:	3718      	adds	r7, #24
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	24000054 	.word	0x24000054

08012670 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b086      	sub	sp, #24
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012678:	2182      	movs	r1, #130	@ 0x82
 801267a:	4818      	ldr	r0, [pc, #96]	@ (80126dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801267c:	f000 fd17 	bl	80130ae <USBD_GetEpDesc>
 8012680:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012682:	2101      	movs	r1, #1
 8012684:	4815      	ldr	r0, [pc, #84]	@ (80126dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012686:	f000 fd12 	bl	80130ae <USBD_GetEpDesc>
 801268a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801268c:	2181      	movs	r1, #129	@ 0x81
 801268e:	4813      	ldr	r0, [pc, #76]	@ (80126dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012690:	f000 fd0d 	bl	80130ae <USBD_GetEpDesc>
 8012694:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2210      	movs	r2, #16
 80126a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d006      	beq.n	80126b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2200      	movs	r2, #0
 80126ac:	711a      	strb	r2, [r3, #4]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f042 0202 	orr.w	r2, r2, #2
 80126b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d006      	beq.n	80126ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	711a      	strb	r2, [r3, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f042 0202 	orr.w	r2, r2, #2
 80126c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2243      	movs	r2, #67	@ 0x43
 80126ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80126d0:	4b02      	ldr	r3, [pc, #8]	@ (80126dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3718      	adds	r7, #24
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	24000054 	.word	0x24000054

080126e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80126e8:	2182      	movs	r1, #130	@ 0x82
 80126ea:	4818      	ldr	r0, [pc, #96]	@ (801274c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80126ec:	f000 fcdf 	bl	80130ae <USBD_GetEpDesc>
 80126f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80126f2:	2101      	movs	r1, #1
 80126f4:	4815      	ldr	r0, [pc, #84]	@ (801274c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80126f6:	f000 fcda 	bl	80130ae <USBD_GetEpDesc>
 80126fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80126fc:	2181      	movs	r1, #129	@ 0x81
 80126fe:	4813      	ldr	r0, [pc, #76]	@ (801274c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012700:	f000 fcd5 	bl	80130ae <USBD_GetEpDesc>
 8012704:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d002      	beq.n	8012712 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2210      	movs	r2, #16
 8012710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d006      	beq.n	8012726 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	2200      	movs	r2, #0
 801271c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012720:	711a      	strb	r2, [r3, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d006      	beq.n	801273a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2200      	movs	r2, #0
 8012730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012734:	711a      	strb	r2, [r3, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2243      	movs	r2, #67	@ 0x43
 801273e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012740:	4b02      	ldr	r3, [pc, #8]	@ (801274c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012742:	4618      	mov	r0, r3
 8012744:	3718      	adds	r7, #24
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	24000054 	.word	0x24000054

08012750 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	220a      	movs	r2, #10
 801275c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801275e:	4b03      	ldr	r3, [pc, #12]	@ (801276c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	24000010 	.word	0x24000010

08012770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012770:	b480      	push	{r7}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d101      	bne.n	8012784 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012780:	2303      	movs	r3, #3
 8012782:	e009      	b.n	8012798 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	33b0      	adds	r3, #176	@ 0xb0
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	4413      	add	r3, r2
 8012792:	683a      	ldr	r2, [r7, #0]
 8012794:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b087      	sub	sp, #28
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	32b0      	adds	r2, #176	@ 0xb0
 80127ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d101      	bne.n	80127ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80127c6:	2303      	movs	r3, #3
 80127c8:	e008      	b.n	80127dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	68ba      	ldr	r2, [r7, #8]
 80127ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80127da:	2300      	movs	r3, #0
}
 80127dc:	4618      	mov	r0, r3
 80127de:	371c      	adds	r7, #28
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	32b0      	adds	r2, #176	@ 0xb0
 80127fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012800:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d101      	bne.n	801280c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012808:	2303      	movs	r3, #3
 801280a:	e004      	b.n	8012816 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	683a      	ldr	r2, [r7, #0]
 8012810:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
	...

08012824 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	32b0      	adds	r2, #176	@ 0xb0
 8012836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801283a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801283c:	2301      	movs	r3, #1
 801283e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012846:	2303      	movs	r3, #3
 8012848:	e025      	b.n	8012896 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012850:	2b00      	cmp	r3, #0
 8012852:	d11f      	bne.n	8012894 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2201      	movs	r2, #1
 8012858:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801285c:	4b10      	ldr	r3, [pc, #64]	@ (80128a0 <USBD_CDC_TransmitPacket+0x7c>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	f003 020f 	and.w	r2, r3, #15
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	4613      	mov	r3, r2
 801286e:	009b      	lsls	r3, r3, #2
 8012870:	4413      	add	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4403      	add	r3, r0
 8012876:	3318      	adds	r3, #24
 8012878:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801287a:	4b09      	ldr	r3, [pc, #36]	@ (80128a0 <USBD_CDC_TransmitPacket+0x7c>)
 801287c:	7819      	ldrb	r1, [r3, #0]
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f001 ffef 	bl	801486e <USBD_LL_Transmit>

    ret = USBD_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012894:	7bfb      	ldrb	r3, [r7, #15]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	24000097 	.word	0x24000097

080128a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	32b0      	adds	r2, #176	@ 0xb0
 80128b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	32b0      	adds	r2, #176	@ 0xb0
 80128c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d101      	bne.n	80128d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80128ce:	2303      	movs	r3, #3
 80128d0:	e018      	b.n	8012904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	7c1b      	ldrb	r3, [r3, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d10a      	bne.n	80128f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80128da:	4b0c      	ldr	r3, [pc, #48]	@ (801290c <USBD_CDC_ReceivePacket+0x68>)
 80128dc:	7819      	ldrb	r1, [r3, #0]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f001 ffe1 	bl	80148b0 <USBD_LL_PrepareReceive>
 80128ee:	e008      	b.n	8012902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80128f0:	4b06      	ldr	r3, [pc, #24]	@ (801290c <USBD_CDC_ReceivePacket+0x68>)
 80128f2:	7819      	ldrb	r1, [r3, #0]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128fa:	2340      	movs	r3, #64	@ 0x40
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f001 ffd7 	bl	80148b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012902:	2300      	movs	r3, #0
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	24000098 	.word	0x24000098

08012910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b086      	sub	sp, #24
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	4613      	mov	r3, r2
 801291c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012924:	2303      	movs	r3, #3
 8012926:	e01f      	b.n	8012968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2200      	movs	r2, #0
 801292c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2200      	movs	r2, #0
 8012934:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2200      	movs	r2, #0
 801293c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d003      	beq.n	801294e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	68ba      	ldr	r2, [r7, #8]
 801294a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2201      	movs	r2, #1
 8012952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	79fa      	ldrb	r2, [r7, #7]
 801295a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801295c:	68f8      	ldr	r0, [r7, #12]
 801295e:	f001 fe4b 	bl	80145f8 <USBD_LL_Init>
 8012962:	4603      	mov	r3, r0
 8012964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012966:	7dfb      	ldrb	r3, [r7, #23]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3718      	adds	r7, #24
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801297a:	2300      	movs	r3, #0
 801297c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d101      	bne.n	8012988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012984:	2303      	movs	r3, #3
 8012986:	e025      	b.n	80129d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	683a      	ldr	r2, [r7, #0]
 801298c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	32ae      	adds	r2, #174	@ 0xae
 801299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00f      	beq.n	80129c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	32ae      	adds	r2, #174	@ 0xae
 80129ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b4:	f107 020e 	add.w	r2, r7, #14
 80129b8:	4610      	mov	r0, r2
 80129ba:	4798      	blx	r3
 80129bc:	4602      	mov	r2, r0
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80129ca:	1c5a      	adds	r2, r3, #1
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80129d2:	2300      	movs	r3, #0
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f001 fe59 	bl	801469c <USBD_LL_Start>
 80129ea:	4603      	mov	r3, r0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80129fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr

08012a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b084      	sub	sp, #16
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
 8012a12:	460b      	mov	r3, r1
 8012a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a16:	2300      	movs	r3, #0
 8012a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d009      	beq.n	8012a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	78fa      	ldrb	r2, [r7, #3]
 8012a2e:	4611      	mov	r1, r2
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	4798      	blx	r3
 8012a34:	4603      	mov	r3, r0
 8012a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b084      	sub	sp, #16
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	78fa      	ldrb	r2, [r7, #3]
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	4798      	blx	r3
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012a68:	2303      	movs	r3, #3
 8012a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b084      	sub	sp, #16
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
 8012a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012a86:	6839      	ldr	r1, [r7, #0]
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f001 f936 	bl	8013cfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2201      	movs	r2, #1
 8012a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012aaa:	f003 031f 	and.w	r3, r3, #31
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d01a      	beq.n	8012ae8 <USBD_LL_SetupStage+0x72>
 8012ab2:	2b02      	cmp	r3, #2
 8012ab4:	d822      	bhi.n	8012afc <USBD_LL_SetupStage+0x86>
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d002      	beq.n	8012ac0 <USBD_LL_SetupStage+0x4a>
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d00a      	beq.n	8012ad4 <USBD_LL_SetupStage+0x5e>
 8012abe:	e01d      	b.n	8012afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 fb63 	bl	8013194 <USBD_StdDevReq>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8012ad2:	e020      	b.n	8012b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ada:	4619      	mov	r1, r3
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 fbcb 	bl	8013278 <USBD_StdItfReq>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8012ae6:	e016      	b.n	8012b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012aee:	4619      	mov	r1, r3
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f000 fc2d 	bl	8013350 <USBD_StdEPReq>
 8012af6:	4603      	mov	r3, r0
 8012af8:	73fb      	strb	r3, [r7, #15]
      break;
 8012afa:	e00c      	b.n	8012b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f001 fe26 	bl	801475c <USBD_LL_StallEP>
 8012b10:	4603      	mov	r3, r0
 8012b12:	73fb      	strb	r3, [r7, #15]
      break;
 8012b14:	bf00      	nop
  }

  return ret;
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3710      	adds	r7, #16
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b086      	sub	sp, #24
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012b32:	7afb      	ldrb	r3, [r7, #11]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d16e      	bne.n	8012c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b46:	2b03      	cmp	r3, #3
 8012b48:	f040 8098 	bne.w	8012c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	689a      	ldr	r2, [r3, #8]
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d913      	bls.n	8012b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	689a      	ldr	r2, [r3, #8]
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	1ad2      	subs	r2, r2, r3
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	68da      	ldr	r2, [r3, #12]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	bf28      	it	cs
 8012b72:	4613      	movcs	r3, r2
 8012b74:	461a      	mov	r2, r3
 8012b76:	6879      	ldr	r1, [r7, #4]
 8012b78:	68f8      	ldr	r0, [r7, #12]
 8012b7a:	f001 f9be 	bl	8013efa <USBD_CtlContinueRx>
 8012b7e:	e07d      	b.n	8012c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b86:	f003 031f 	and.w	r3, r3, #31
 8012b8a:	2b02      	cmp	r3, #2
 8012b8c:	d014      	beq.n	8012bb8 <USBD_LL_DataOutStage+0x98>
 8012b8e:	2b02      	cmp	r3, #2
 8012b90:	d81d      	bhi.n	8012bce <USBD_LL_DataOutStage+0xae>
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d002      	beq.n	8012b9c <USBD_LL_DataOutStage+0x7c>
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d003      	beq.n	8012ba2 <USBD_LL_DataOutStage+0x82>
 8012b9a:	e018      	b.n	8012bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8012ba0:	e018      	b.n	8012bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	4619      	mov	r1, r3
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	f000 fa64 	bl	801307a <USBD_CoreFindIF>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8012bb6:	e00d      	b.n	8012bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	68f8      	ldr	r0, [r7, #12]
 8012bc4:	f000 fa66 	bl	8013094 <USBD_CoreFindEP>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	75bb      	strb	r3, [r7, #22]
            break;
 8012bcc:	e002      	b.n	8012bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8012bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012bd4:	7dbb      	ldrb	r3, [r7, #22]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d119      	bne.n	8012c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	2b03      	cmp	r3, #3
 8012be4:	d113      	bne.n	8012c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012be6:	7dba      	ldrb	r2, [r7, #22]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	32ae      	adds	r2, #174	@ 0xae
 8012bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bf0:	691b      	ldr	r3, [r3, #16]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d00b      	beq.n	8012c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012bf6:	7dba      	ldrb	r2, [r7, #22]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012bfe:	7dba      	ldrb	r2, [r7, #22]
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	32ae      	adds	r2, #174	@ 0xae
 8012c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c08:	691b      	ldr	r3, [r3, #16]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f001 f984 	bl	8013f1c <USBD_CtlSendStatus>
 8012c14:	e032      	b.n	8012c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012c16:	7afb      	ldrb	r3, [r7, #11]
 8012c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	4619      	mov	r1, r3
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f000 fa37 	bl	8013094 <USBD_CoreFindEP>
 8012c26:	4603      	mov	r3, r0
 8012c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012c2a:	7dbb      	ldrb	r3, [r7, #22]
 8012c2c:	2bff      	cmp	r3, #255	@ 0xff
 8012c2e:	d025      	beq.n	8012c7c <USBD_LL_DataOutStage+0x15c>
 8012c30:	7dbb      	ldrb	r3, [r7, #22]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d122      	bne.n	8012c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	d117      	bne.n	8012c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012c42:	7dba      	ldrb	r2, [r7, #22]
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	32ae      	adds	r2, #174	@ 0xae
 8012c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c4c:	699b      	ldr	r3, [r3, #24]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00f      	beq.n	8012c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012c52:	7dba      	ldrb	r2, [r7, #22]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012c5a:	7dba      	ldrb	r2, [r7, #22]
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	32ae      	adds	r2, #174	@ 0xae
 8012c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	7afa      	ldrb	r2, [r7, #11]
 8012c68:	4611      	mov	r1, r2
 8012c6a:	68f8      	ldr	r0, [r7, #12]
 8012c6c:	4798      	blx	r3
 8012c6e:	4603      	mov	r3, r0
 8012c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012c72:	7dfb      	ldrb	r3, [r7, #23]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012c78:	7dfb      	ldrb	r3, [r7, #23]
 8012c7a:	e000      	b.n	8012c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3718      	adds	r7, #24
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}

08012c86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b086      	sub	sp, #24
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	60f8      	str	r0, [r7, #12]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	607a      	str	r2, [r7, #4]
 8012c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012c94:	7afb      	ldrb	r3, [r7, #11]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d16f      	bne.n	8012d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	3314      	adds	r3, #20
 8012c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	d15a      	bne.n	8012d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	689a      	ldr	r2, [r3, #8]
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d914      	bls.n	8012ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	689a      	ldr	r2, [r3, #8]
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	1ad2      	subs	r2, r2, r3
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	689b      	ldr	r3, [r3, #8]
 8012cc8:	461a      	mov	r2, r3
 8012cca:	6879      	ldr	r1, [r7, #4]
 8012ccc:	68f8      	ldr	r0, [r7, #12]
 8012cce:	f001 f8e6 	bl	8013e9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	68f8      	ldr	r0, [r7, #12]
 8012cda:	f001 fde9 	bl	80148b0 <USBD_LL_PrepareReceive>
 8012cde:	e03f      	b.n	8012d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	68da      	ldr	r2, [r3, #12]
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d11c      	bne.n	8012d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	685a      	ldr	r2, [r3, #4]
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d316      	bcc.n	8012d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d20f      	bcs.n	8012d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012d06:	2200      	movs	r2, #0
 8012d08:	2100      	movs	r1, #0
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f001 f8c7 	bl	8013e9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2200      	movs	r2, #0
 8012d14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d18:	2300      	movs	r3, #0
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f001 fdc6 	bl	80148b0 <USBD_LL_PrepareReceive>
 8012d24:	e01c      	b.n	8012d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b03      	cmp	r3, #3
 8012d30:	d10f      	bne.n	8012d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d009      	beq.n	8012d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2200      	movs	r2, #0
 8012d42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d52:	2180      	movs	r1, #128	@ 0x80
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f001 fd01 	bl	801475c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f001 f8f1 	bl	8013f42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d03a      	beq.n	8012de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f7ff fe42 	bl	80129f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012d78:	e032      	b.n	8012de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012d7a:	7afb      	ldrb	r3, [r7, #11]
 8012d7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	4619      	mov	r1, r3
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	f000 f985 	bl	8013094 <USBD_CoreFindEP>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012d8e:	7dfb      	ldrb	r3, [r7, #23]
 8012d90:	2bff      	cmp	r3, #255	@ 0xff
 8012d92:	d025      	beq.n	8012de0 <USBD_LL_DataInStage+0x15a>
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d122      	bne.n	8012de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	2b03      	cmp	r3, #3
 8012da4:	d11c      	bne.n	8012de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012da6:	7dfa      	ldrb	r2, [r7, #23]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	32ae      	adds	r2, #174	@ 0xae
 8012dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db0:	695b      	ldr	r3, [r3, #20]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d014      	beq.n	8012de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012db6:	7dfa      	ldrb	r2, [r7, #23]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012dbe:	7dfa      	ldrb	r2, [r7, #23]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	32ae      	adds	r2, #174	@ 0xae
 8012dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dc8:	695b      	ldr	r3, [r3, #20]
 8012dca:	7afa      	ldrb	r2, [r7, #11]
 8012dcc:	4611      	mov	r1, r2
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	4798      	blx	r3
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012dd6:	7dbb      	ldrb	r3, [r7, #22]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012ddc:	7dbb      	ldrb	r3, [r7, #22]
 8012dde:	e000      	b.n	8012de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3718      	adds	r7, #24
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}

08012dea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b084      	sub	sp, #16
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012df2:	2300      	movs	r3, #0
 8012df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d014      	beq.n	8012e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d00e      	beq.n	8012e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	6852      	ldr	r2, [r2, #4]
 8012e3e:	b2d2      	uxtb	r2, r2
 8012e40:	4611      	mov	r1, r2
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	4798      	blx	r3
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d001      	beq.n	8012e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012e4c:	2303      	movs	r3, #3
 8012e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012e50:	2340      	movs	r3, #64	@ 0x40
 8012e52:	2200      	movs	r2, #0
 8012e54:	2100      	movs	r1, #0
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f001 fc3b 	bl	80146d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2240      	movs	r2, #64	@ 0x40
 8012e68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012e6c:	2340      	movs	r3, #64	@ 0x40
 8012e6e:	2200      	movs	r2, #0
 8012e70:	2180      	movs	r1, #128	@ 0x80
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f001 fc2d 	bl	80146d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2240      	movs	r2, #64	@ 0x40
 8012e82:	621a      	str	r2, [r3, #32]

  return ret;
 8012e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012e8e:	b480      	push	{r7}
 8012e90:	b083      	sub	sp, #12
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	460b      	mov	r3, r1
 8012e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	78fa      	ldrb	r2, [r7, #3]
 8012e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b083      	sub	sp, #12
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b04      	cmp	r3, #4
 8012ec0:	d006      	beq.n	8012ed0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2204      	movs	r2, #4
 8012ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	370c      	adds	r7, #12
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee4:	4770      	bx	lr

08012ee6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012ee6:	b480      	push	{r7}
 8012ee8:	b083      	sub	sp, #12
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ef4:	b2db      	uxtb	r3, r3
 8012ef6:	2b04      	cmp	r3, #4
 8012ef8:	d106      	bne.n	8012f08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012f00:	b2da      	uxtb	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012f08:	2300      	movs	r3, #0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	370c      	adds	r7, #12
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b082      	sub	sp, #8
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	2b03      	cmp	r3, #3
 8012f28:	d110      	bne.n	8012f4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00b      	beq.n	8012f4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f3a:	69db      	ldr	r3, [r3, #28]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d005      	beq.n	8012f4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f46:	69db      	ldr	r3, [r3, #28]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012f4c:	2300      	movs	r3, #0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012f56:	b580      	push	{r7, lr}
 8012f58:	b082      	sub	sp, #8
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
 8012f5e:	460b      	mov	r3, r1
 8012f60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	32ae      	adds	r2, #174	@ 0xae
 8012f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d101      	bne.n	8012f78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012f74:	2303      	movs	r3, #3
 8012f76:	e01c      	b.n	8012fb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	2b03      	cmp	r3, #3
 8012f82:	d115      	bne.n	8012fb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	32ae      	adds	r2, #174	@ 0xae
 8012f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f92:	6a1b      	ldr	r3, [r3, #32]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00b      	beq.n	8012fb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	32ae      	adds	r2, #174	@ 0xae
 8012fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fa6:	6a1b      	ldr	r3, [r3, #32]
 8012fa8:	78fa      	ldrb	r2, [r7, #3]
 8012faa:	4611      	mov	r1, r2
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3708      	adds	r7, #8
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b082      	sub	sp, #8
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	32ae      	adds	r2, #174	@ 0xae
 8012fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d101      	bne.n	8012fdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012fd8:	2303      	movs	r3, #3
 8012fda:	e01c      	b.n	8013016 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b03      	cmp	r3, #3
 8012fe6:	d115      	bne.n	8013014 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	32ae      	adds	r2, #174	@ 0xae
 8012ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00b      	beq.n	8013014 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	32ae      	adds	r2, #174	@ 0xae
 8013006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801300c:	78fa      	ldrb	r2, [r7, #3]
 801300e:	4611      	mov	r1, r2
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801301e:	b480      	push	{r7}
 8013020:	b083      	sub	sp, #12
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	370c      	adds	r7, #12
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr

08013034 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801303c:	2300      	movs	r3, #0
 801303e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2201      	movs	r2, #1
 8013044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801304e:	2b00      	cmp	r3, #0
 8013050:	d00e      	beq.n	8013070 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	6852      	ldr	r2, [r2, #4]
 801305e:	b2d2      	uxtb	r2, r2
 8013060:	4611      	mov	r1, r2
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	4798      	blx	r3
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d001      	beq.n	8013070 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801306c:	2303      	movs	r3, #3
 801306e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013070:	7bfb      	ldrb	r3, [r7, #15]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801307a:	b480      	push	{r7}
 801307c:	b083      	sub	sp, #12
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
 8013082:	460b      	mov	r3, r1
 8013084:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013086:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013088:	4618      	mov	r0, r3
 801308a:	370c      	adds	r7, #12
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	460b      	mov	r3, r1
 801309e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80130a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	370c      	adds	r7, #12
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr

080130ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b086      	sub	sp, #24
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
 80130b6:	460b      	mov	r3, r1
 80130b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80130c2:	2300      	movs	r3, #0
 80130c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	885b      	ldrh	r3, [r3, #2]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	7812      	ldrb	r2, [r2, #0]
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d91f      	bls.n	8013114 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80130da:	e013      	b.n	8013104 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80130dc:	f107 030a 	add.w	r3, r7, #10
 80130e0:	4619      	mov	r1, r3
 80130e2:	6978      	ldr	r0, [r7, #20]
 80130e4:	f000 f81b 	bl	801311e <USBD_GetNextDesc>
 80130e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	785b      	ldrb	r3, [r3, #1]
 80130ee:	2b05      	cmp	r3, #5
 80130f0:	d108      	bne.n	8013104 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	789b      	ldrb	r3, [r3, #2]
 80130fa:	78fa      	ldrb	r2, [r7, #3]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d008      	beq.n	8013112 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013100:	2300      	movs	r3, #0
 8013102:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	885b      	ldrh	r3, [r3, #2]
 8013108:	b29a      	uxth	r2, r3
 801310a:	897b      	ldrh	r3, [r7, #10]
 801310c:	429a      	cmp	r2, r3
 801310e:	d8e5      	bhi.n	80130dc <USBD_GetEpDesc+0x2e>
 8013110:	e000      	b.n	8013114 <USBD_GetEpDesc+0x66>
          break;
 8013112:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013114:	693b      	ldr	r3, [r7, #16]
}
 8013116:	4618      	mov	r0, r3
 8013118:	3718      	adds	r7, #24
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801311e:	b480      	push	{r7}
 8013120:	b085      	sub	sp, #20
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	881b      	ldrh	r3, [r3, #0]
 8013130:	68fa      	ldr	r2, [r7, #12]
 8013132:	7812      	ldrb	r2, [r2, #0]
 8013134:	4413      	add	r3, r2
 8013136:	b29a      	uxth	r2, r3
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	461a      	mov	r2, r3
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4413      	add	r3, r2
 8013146:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013148:	68fb      	ldr	r3, [r7, #12]
}
 801314a:	4618      	mov	r0, r3
 801314c:	3714      	adds	r7, #20
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013156:	b480      	push	{r7}
 8013158:	b087      	sub	sp, #28
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	3301      	adds	r3, #1
 801316c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013174:	8a3b      	ldrh	r3, [r7, #16]
 8013176:	021b      	lsls	r3, r3, #8
 8013178:	b21a      	sxth	r2, r3
 801317a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801317e:	4313      	orrs	r3, r2
 8013180:	b21b      	sxth	r3, r3
 8013182:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013184:	89fb      	ldrh	r3, [r7, #14]
}
 8013186:	4618      	mov	r0, r3
 8013188:	371c      	adds	r7, #28
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
	...

08013194 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80131aa:	2b40      	cmp	r3, #64	@ 0x40
 80131ac:	d005      	beq.n	80131ba <USBD_StdDevReq+0x26>
 80131ae:	2b40      	cmp	r3, #64	@ 0x40
 80131b0:	d857      	bhi.n	8013262 <USBD_StdDevReq+0xce>
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d00f      	beq.n	80131d6 <USBD_StdDevReq+0x42>
 80131b6:	2b20      	cmp	r3, #32
 80131b8:	d153      	bne.n	8013262 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	32ae      	adds	r2, #174	@ 0xae
 80131c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131c8:	689b      	ldr	r3, [r3, #8]
 80131ca:	6839      	ldr	r1, [r7, #0]
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	4798      	blx	r3
 80131d0:	4603      	mov	r3, r0
 80131d2:	73fb      	strb	r3, [r7, #15]
      break;
 80131d4:	e04a      	b.n	801326c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	785b      	ldrb	r3, [r3, #1]
 80131da:	2b09      	cmp	r3, #9
 80131dc:	d83b      	bhi.n	8013256 <USBD_StdDevReq+0xc2>
 80131de:	a201      	add	r2, pc, #4	@ (adr r2, 80131e4 <USBD_StdDevReq+0x50>)
 80131e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e4:	08013239 	.word	0x08013239
 80131e8:	0801324d 	.word	0x0801324d
 80131ec:	08013257 	.word	0x08013257
 80131f0:	08013243 	.word	0x08013243
 80131f4:	08013257 	.word	0x08013257
 80131f8:	08013217 	.word	0x08013217
 80131fc:	0801320d 	.word	0x0801320d
 8013200:	08013257 	.word	0x08013257
 8013204:	0801322f 	.word	0x0801322f
 8013208:	08013221 	.word	0x08013221
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801320c:	6839      	ldr	r1, [r7, #0]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 fa3c 	bl	801368c <USBD_GetDescriptor>
          break;
 8013214:	e024      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013216:	6839      	ldr	r1, [r7, #0]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f000 fbcb 	bl	80139b4 <USBD_SetAddress>
          break;
 801321e:	e01f      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013220:	6839      	ldr	r1, [r7, #0]
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f000 fc0a 	bl	8013a3c <USBD_SetConfig>
 8013228:	4603      	mov	r3, r0
 801322a:	73fb      	strb	r3, [r7, #15]
          break;
 801322c:	e018      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801322e:	6839      	ldr	r1, [r7, #0]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 fcad 	bl	8013b90 <USBD_GetConfig>
          break;
 8013236:	e013      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013238:	6839      	ldr	r1, [r7, #0]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fcde 	bl	8013bfc <USBD_GetStatus>
          break;
 8013240:	e00e      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013242:	6839      	ldr	r1, [r7, #0]
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f000 fd0d 	bl	8013c64 <USBD_SetFeature>
          break;
 801324a:	e009      	b.n	8013260 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801324c:	6839      	ldr	r1, [r7, #0]
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 fd31 	bl	8013cb6 <USBD_ClrFeature>
          break;
 8013254:	e004      	b.n	8013260 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013256:	6839      	ldr	r1, [r7, #0]
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f000 fd88 	bl	8013d6e <USBD_CtlError>
          break;
 801325e:	bf00      	nop
      }
      break;
 8013260:	e004      	b.n	801326c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013262:	6839      	ldr	r1, [r7, #0]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f000 fd82 	bl	8013d6e <USBD_CtlError>
      break;
 801326a:	bf00      	nop
  }

  return ret;
 801326c:	7bfb      	ldrb	r3, [r7, #15]
}
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop

08013278 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801328e:	2b40      	cmp	r3, #64	@ 0x40
 8013290:	d005      	beq.n	801329e <USBD_StdItfReq+0x26>
 8013292:	2b40      	cmp	r3, #64	@ 0x40
 8013294:	d852      	bhi.n	801333c <USBD_StdItfReq+0xc4>
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <USBD_StdItfReq+0x26>
 801329a:	2b20      	cmp	r3, #32
 801329c:	d14e      	bne.n	801333c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	3b01      	subs	r3, #1
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d840      	bhi.n	801332e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	889b      	ldrh	r3, [r3, #4]
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d836      	bhi.n	8013324 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	889b      	ldrh	r3, [r3, #4]
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	4619      	mov	r1, r3
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f7ff fedb 	bl	801307a <USBD_CoreFindIF>
 80132c4:	4603      	mov	r3, r0
 80132c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80132c8:	7bbb      	ldrb	r3, [r7, #14]
 80132ca:	2bff      	cmp	r3, #255	@ 0xff
 80132cc:	d01d      	beq.n	801330a <USBD_StdItfReq+0x92>
 80132ce:	7bbb      	ldrb	r3, [r7, #14]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d11a      	bne.n	801330a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80132d4:	7bba      	ldrb	r2, [r7, #14]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	32ae      	adds	r2, #174	@ 0xae
 80132da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d00f      	beq.n	8013304 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80132e4:	7bba      	ldrb	r2, [r7, #14]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80132ec:	7bba      	ldrb	r2, [r7, #14]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	32ae      	adds	r2, #174	@ 0xae
 80132f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	4798      	blx	r3
 80132fe:	4603      	mov	r3, r0
 8013300:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013302:	e004      	b.n	801330e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013304:	2303      	movs	r3, #3
 8013306:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013308:	e001      	b.n	801330e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801330a:	2303      	movs	r3, #3
 801330c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	88db      	ldrh	r3, [r3, #6]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d110      	bne.n	8013338 <USBD_StdItfReq+0xc0>
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d10d      	bne.n	8013338 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fdfd 	bl	8013f1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013322:	e009      	b.n	8013338 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f000 fd21 	bl	8013d6e <USBD_CtlError>
          break;
 801332c:	e004      	b.n	8013338 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f000 fd1c 	bl	8013d6e <USBD_CtlError>
          break;
 8013336:	e000      	b.n	801333a <USBD_StdItfReq+0xc2>
          break;
 8013338:	bf00      	nop
      }
      break;
 801333a:	e004      	b.n	8013346 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801333c:	6839      	ldr	r1, [r7, #0]
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 fd15 	bl	8013d6e <USBD_CtlError>
      break;
 8013344:	bf00      	nop
  }

  return ret;
 8013346:	7bfb      	ldrb	r3, [r7, #15]
}
 8013348:	4618      	mov	r0, r3
 801334a:	3710      	adds	r7, #16
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}

08013350 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	889b      	ldrh	r3, [r3, #4]
 8013362:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801336c:	2b40      	cmp	r3, #64	@ 0x40
 801336e:	d007      	beq.n	8013380 <USBD_StdEPReq+0x30>
 8013370:	2b40      	cmp	r3, #64	@ 0x40
 8013372:	f200 817f 	bhi.w	8013674 <USBD_StdEPReq+0x324>
 8013376:	2b00      	cmp	r3, #0
 8013378:	d02a      	beq.n	80133d0 <USBD_StdEPReq+0x80>
 801337a:	2b20      	cmp	r3, #32
 801337c:	f040 817a 	bne.w	8013674 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013380:	7bbb      	ldrb	r3, [r7, #14]
 8013382:	4619      	mov	r1, r3
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff fe85 	bl	8013094 <USBD_CoreFindEP>
 801338a:	4603      	mov	r3, r0
 801338c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801338e:	7b7b      	ldrb	r3, [r7, #13]
 8013390:	2bff      	cmp	r3, #255	@ 0xff
 8013392:	f000 8174 	beq.w	801367e <USBD_StdEPReq+0x32e>
 8013396:	7b7b      	ldrb	r3, [r7, #13]
 8013398:	2b00      	cmp	r3, #0
 801339a:	f040 8170 	bne.w	801367e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801339e:	7b7a      	ldrb	r2, [r7, #13]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80133a6:	7b7a      	ldrb	r2, [r7, #13]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	32ae      	adds	r2, #174	@ 0xae
 80133ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 8163 	beq.w	801367e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80133b8:	7b7a      	ldrb	r2, [r7, #13]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	32ae      	adds	r2, #174	@ 0xae
 80133be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	4798      	blx	r3
 80133ca:	4603      	mov	r3, r0
 80133cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80133ce:	e156      	b.n	801367e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	785b      	ldrb	r3, [r3, #1]
 80133d4:	2b03      	cmp	r3, #3
 80133d6:	d008      	beq.n	80133ea <USBD_StdEPReq+0x9a>
 80133d8:	2b03      	cmp	r3, #3
 80133da:	f300 8145 	bgt.w	8013668 <USBD_StdEPReq+0x318>
 80133de:	2b00      	cmp	r3, #0
 80133e0:	f000 809b 	beq.w	801351a <USBD_StdEPReq+0x1ca>
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d03c      	beq.n	8013462 <USBD_StdEPReq+0x112>
 80133e8:	e13e      	b.n	8013668 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	2b02      	cmp	r3, #2
 80133f4:	d002      	beq.n	80133fc <USBD_StdEPReq+0xac>
 80133f6:	2b03      	cmp	r3, #3
 80133f8:	d016      	beq.n	8013428 <USBD_StdEPReq+0xd8>
 80133fa:	e02c      	b.n	8013456 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133fc:	7bbb      	ldrb	r3, [r7, #14]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00d      	beq.n	801341e <USBD_StdEPReq+0xce>
 8013402:	7bbb      	ldrb	r3, [r7, #14]
 8013404:	2b80      	cmp	r3, #128	@ 0x80
 8013406:	d00a      	beq.n	801341e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013408:	7bbb      	ldrb	r3, [r7, #14]
 801340a:	4619      	mov	r1, r3
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f001 f9a5 	bl	801475c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013412:	2180      	movs	r1, #128	@ 0x80
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f001 f9a1 	bl	801475c <USBD_LL_StallEP>
 801341a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801341c:	e020      	b.n	8013460 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801341e:	6839      	ldr	r1, [r7, #0]
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f000 fca4 	bl	8013d6e <USBD_CtlError>
              break;
 8013426:	e01b      	b.n	8013460 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	885b      	ldrh	r3, [r3, #2]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d10e      	bne.n	801344e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013430:	7bbb      	ldrb	r3, [r7, #14]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d00b      	beq.n	801344e <USBD_StdEPReq+0xfe>
 8013436:	7bbb      	ldrb	r3, [r7, #14]
 8013438:	2b80      	cmp	r3, #128	@ 0x80
 801343a:	d008      	beq.n	801344e <USBD_StdEPReq+0xfe>
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	88db      	ldrh	r3, [r3, #6]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d104      	bne.n	801344e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013444:	7bbb      	ldrb	r3, [r7, #14]
 8013446:	4619      	mov	r1, r3
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f001 f987 	bl	801475c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 fd64 	bl	8013f1c <USBD_CtlSendStatus>

              break;
 8013454:	e004      	b.n	8013460 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013456:	6839      	ldr	r1, [r7, #0]
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f000 fc88 	bl	8013d6e <USBD_CtlError>
              break;
 801345e:	bf00      	nop
          }
          break;
 8013460:	e107      	b.n	8013672 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013468:	b2db      	uxtb	r3, r3
 801346a:	2b02      	cmp	r3, #2
 801346c:	d002      	beq.n	8013474 <USBD_StdEPReq+0x124>
 801346e:	2b03      	cmp	r3, #3
 8013470:	d016      	beq.n	80134a0 <USBD_StdEPReq+0x150>
 8013472:	e04b      	b.n	801350c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013474:	7bbb      	ldrb	r3, [r7, #14]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d00d      	beq.n	8013496 <USBD_StdEPReq+0x146>
 801347a:	7bbb      	ldrb	r3, [r7, #14]
 801347c:	2b80      	cmp	r3, #128	@ 0x80
 801347e:	d00a      	beq.n	8013496 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013480:	7bbb      	ldrb	r3, [r7, #14]
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f001 f969 	bl	801475c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801348a:	2180      	movs	r1, #128	@ 0x80
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f001 f965 	bl	801475c <USBD_LL_StallEP>
 8013492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013494:	e040      	b.n	8013518 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013496:	6839      	ldr	r1, [r7, #0]
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fc68 	bl	8013d6e <USBD_CtlError>
              break;
 801349e:	e03b      	b.n	8013518 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	885b      	ldrh	r3, [r3, #2]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d136      	bne.n	8013516 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80134a8:	7bbb      	ldrb	r3, [r7, #14]
 80134aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d004      	beq.n	80134bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80134b2:	7bbb      	ldrb	r3, [r7, #14]
 80134b4:	4619      	mov	r1, r3
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f001 f96f 	bl	801479a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f000 fd2d 	bl	8013f1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80134c2:	7bbb      	ldrb	r3, [r7, #14]
 80134c4:	4619      	mov	r1, r3
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7ff fde4 	bl	8013094 <USBD_CoreFindEP>
 80134cc:	4603      	mov	r3, r0
 80134ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80134d0:	7b7b      	ldrb	r3, [r7, #13]
 80134d2:	2bff      	cmp	r3, #255	@ 0xff
 80134d4:	d01f      	beq.n	8013516 <USBD_StdEPReq+0x1c6>
 80134d6:	7b7b      	ldrb	r3, [r7, #13]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d11c      	bne.n	8013516 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80134dc:	7b7a      	ldrb	r2, [r7, #13]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80134e4:	7b7a      	ldrb	r2, [r7, #13]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	32ae      	adds	r2, #174	@ 0xae
 80134ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d010      	beq.n	8013516 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80134f4:	7b7a      	ldrb	r2, [r7, #13]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	32ae      	adds	r2, #174	@ 0xae
 80134fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134fe:	689b      	ldr	r3, [r3, #8]
 8013500:	6839      	ldr	r1, [r7, #0]
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	4798      	blx	r3
 8013506:	4603      	mov	r3, r0
 8013508:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801350a:	e004      	b.n	8013516 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801350c:	6839      	ldr	r1, [r7, #0]
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 fc2d 	bl	8013d6e <USBD_CtlError>
              break;
 8013514:	e000      	b.n	8013518 <USBD_StdEPReq+0x1c8>
              break;
 8013516:	bf00      	nop
          }
          break;
 8013518:	e0ab      	b.n	8013672 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b02      	cmp	r3, #2
 8013524:	d002      	beq.n	801352c <USBD_StdEPReq+0x1dc>
 8013526:	2b03      	cmp	r3, #3
 8013528:	d032      	beq.n	8013590 <USBD_StdEPReq+0x240>
 801352a:	e097      	b.n	801365c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801352c:	7bbb      	ldrb	r3, [r7, #14]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d007      	beq.n	8013542 <USBD_StdEPReq+0x1f2>
 8013532:	7bbb      	ldrb	r3, [r7, #14]
 8013534:	2b80      	cmp	r3, #128	@ 0x80
 8013536:	d004      	beq.n	8013542 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fc17 	bl	8013d6e <USBD_CtlError>
                break;
 8013540:	e091      	b.n	8013666 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013546:	2b00      	cmp	r3, #0
 8013548:	da0b      	bge.n	8013562 <USBD_StdEPReq+0x212>
 801354a:	7bbb      	ldrb	r3, [r7, #14]
 801354c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013550:	4613      	mov	r3, r2
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	4413      	add	r3, r2
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	3310      	adds	r3, #16
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	4413      	add	r3, r2
 801355e:	3304      	adds	r3, #4
 8013560:	e00b      	b.n	801357a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013562:	7bbb      	ldrb	r3, [r7, #14]
 8013564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013568:	4613      	mov	r3, r2
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	4413      	add	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	4413      	add	r3, r2
 8013578:	3304      	adds	r3, #4
 801357a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2200      	movs	r2, #0
 8013580:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	2202      	movs	r2, #2
 8013586:	4619      	mov	r1, r3
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 fc6d 	bl	8013e68 <USBD_CtlSendData>
              break;
 801358e:	e06a      	b.n	8013666 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013594:	2b00      	cmp	r3, #0
 8013596:	da11      	bge.n	80135bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013598:	7bbb      	ldrb	r3, [r7, #14]
 801359a:	f003 020f 	and.w	r2, r3, #15
 801359e:	6879      	ldr	r1, [r7, #4]
 80135a0:	4613      	mov	r3, r2
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	4413      	add	r3, r2
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	440b      	add	r3, r1
 80135aa:	3324      	adds	r3, #36	@ 0x24
 80135ac:	881b      	ldrh	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d117      	bne.n	80135e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80135b2:	6839      	ldr	r1, [r7, #0]
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fbda 	bl	8013d6e <USBD_CtlError>
                  break;
 80135ba:	e054      	b.n	8013666 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80135bc:	7bbb      	ldrb	r3, [r7, #14]
 80135be:	f003 020f 	and.w	r2, r3, #15
 80135c2:	6879      	ldr	r1, [r7, #4]
 80135c4:	4613      	mov	r3, r2
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	4413      	add	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	440b      	add	r3, r1
 80135ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80135d2:	881b      	ldrh	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d104      	bne.n	80135e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80135d8:	6839      	ldr	r1, [r7, #0]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 fbc7 	bl	8013d6e <USBD_CtlError>
                  break;
 80135e0:	e041      	b.n	8013666 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	da0b      	bge.n	8013602 <USBD_StdEPReq+0x2b2>
 80135ea:	7bbb      	ldrb	r3, [r7, #14]
 80135ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80135f0:	4613      	mov	r3, r2
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	3310      	adds	r3, #16
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4413      	add	r3, r2
 80135fe:	3304      	adds	r3, #4
 8013600:	e00b      	b.n	801361a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013602:	7bbb      	ldrb	r3, [r7, #14]
 8013604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013608:	4613      	mov	r3, r2
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	4413      	add	r3, r2
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	4413      	add	r3, r2
 8013618:	3304      	adds	r3, #4
 801361a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801361c:	7bbb      	ldrb	r3, [r7, #14]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d002      	beq.n	8013628 <USBD_StdEPReq+0x2d8>
 8013622:	7bbb      	ldrb	r3, [r7, #14]
 8013624:	2b80      	cmp	r3, #128	@ 0x80
 8013626:	d103      	bne.n	8013630 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	2200      	movs	r2, #0
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	e00e      	b.n	801364e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013630:	7bbb      	ldrb	r3, [r7, #14]
 8013632:	4619      	mov	r1, r3
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f001 f8cf 	bl	80147d8 <USBD_LL_IsStallEP>
 801363a:	4603      	mov	r3, r0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d003      	beq.n	8013648 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	2201      	movs	r2, #1
 8013644:	601a      	str	r2, [r3, #0]
 8013646:	e002      	b.n	801364e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	2200      	movs	r2, #0
 801364c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	2202      	movs	r2, #2
 8013652:	4619      	mov	r1, r3
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 fc07 	bl	8013e68 <USBD_CtlSendData>
              break;
 801365a:	e004      	b.n	8013666 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801365c:	6839      	ldr	r1, [r7, #0]
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 fb85 	bl	8013d6e <USBD_CtlError>
              break;
 8013664:	bf00      	nop
          }
          break;
 8013666:	e004      	b.n	8013672 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013668:	6839      	ldr	r1, [r7, #0]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 fb7f 	bl	8013d6e <USBD_CtlError>
          break;
 8013670:	bf00      	nop
      }
      break;
 8013672:	e005      	b.n	8013680 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 fb79 	bl	8013d6e <USBD_CtlError>
      break;
 801367c:	e000      	b.n	8013680 <USBD_StdEPReq+0x330>
      break;
 801367e:	bf00      	nop
  }

  return ret;
 8013680:	7bfb      	ldrb	r3, [r7, #15]
}
 8013682:	4618      	mov	r0, r3
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
	...

0801368c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013696:	2300      	movs	r3, #0
 8013698:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801369a:	2300      	movs	r3, #0
 801369c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801369e:	2300      	movs	r3, #0
 80136a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	885b      	ldrh	r3, [r3, #2]
 80136a6:	0a1b      	lsrs	r3, r3, #8
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	3b01      	subs	r3, #1
 80136ac:	2b0e      	cmp	r3, #14
 80136ae:	f200 8152 	bhi.w	8013956 <USBD_GetDescriptor+0x2ca>
 80136b2:	a201      	add	r2, pc, #4	@ (adr r2, 80136b8 <USBD_GetDescriptor+0x2c>)
 80136b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136b8:	08013729 	.word	0x08013729
 80136bc:	08013741 	.word	0x08013741
 80136c0:	08013781 	.word	0x08013781
 80136c4:	08013957 	.word	0x08013957
 80136c8:	08013957 	.word	0x08013957
 80136cc:	080138f7 	.word	0x080138f7
 80136d0:	08013923 	.word	0x08013923
 80136d4:	08013957 	.word	0x08013957
 80136d8:	08013957 	.word	0x08013957
 80136dc:	08013957 	.word	0x08013957
 80136e0:	08013957 	.word	0x08013957
 80136e4:	08013957 	.word	0x08013957
 80136e8:	08013957 	.word	0x08013957
 80136ec:	08013957 	.word	0x08013957
 80136f0:	080136f5 	.word	0x080136f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136fa:	69db      	ldr	r3, [r3, #28]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d00b      	beq.n	8013718 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013706:	69db      	ldr	r3, [r3, #28]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	7c12      	ldrb	r2, [r2, #16]
 801370c:	f107 0108 	add.w	r1, r7, #8
 8013710:	4610      	mov	r0, r2
 8013712:	4798      	blx	r3
 8013714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013716:	e126      	b.n	8013966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013718:	6839      	ldr	r1, [r7, #0]
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 fb27 	bl	8013d6e <USBD_CtlError>
        err++;
 8013720:	7afb      	ldrb	r3, [r7, #11]
 8013722:	3301      	adds	r3, #1
 8013724:	72fb      	strb	r3, [r7, #11]
      break;
 8013726:	e11e      	b.n	8013966 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	7c12      	ldrb	r2, [r2, #16]
 8013734:	f107 0108 	add.w	r1, r7, #8
 8013738:	4610      	mov	r0, r2
 801373a:	4798      	blx	r3
 801373c:	60f8      	str	r0, [r7, #12]
      break;
 801373e:	e112      	b.n	8013966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	7c1b      	ldrb	r3, [r3, #16]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10d      	bne.n	8013764 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801374e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013750:	f107 0208 	add.w	r2, r7, #8
 8013754:	4610      	mov	r0, r2
 8013756:	4798      	blx	r3
 8013758:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	3301      	adds	r3, #1
 801375e:	2202      	movs	r2, #2
 8013760:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013762:	e100      	b.n	8013966 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801376c:	f107 0208 	add.w	r2, r7, #8
 8013770:	4610      	mov	r0, r2
 8013772:	4798      	blx	r3
 8013774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	3301      	adds	r3, #1
 801377a:	2202      	movs	r2, #2
 801377c:	701a      	strb	r2, [r3, #0]
      break;
 801377e:	e0f2      	b.n	8013966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	885b      	ldrh	r3, [r3, #2]
 8013784:	b2db      	uxtb	r3, r3
 8013786:	2b05      	cmp	r3, #5
 8013788:	f200 80ac 	bhi.w	80138e4 <USBD_GetDescriptor+0x258>
 801378c:	a201      	add	r2, pc, #4	@ (adr r2, 8013794 <USBD_GetDescriptor+0x108>)
 801378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013792:	bf00      	nop
 8013794:	080137ad 	.word	0x080137ad
 8013798:	080137e1 	.word	0x080137e1
 801379c:	08013815 	.word	0x08013815
 80137a0:	08013849 	.word	0x08013849
 80137a4:	0801387d 	.word	0x0801387d
 80137a8:	080138b1 	.word	0x080138b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d00b      	beq.n	80137d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	7c12      	ldrb	r2, [r2, #16]
 80137c4:	f107 0108 	add.w	r1, r7, #8
 80137c8:	4610      	mov	r0, r2
 80137ca:	4798      	blx	r3
 80137cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137ce:	e091      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137d0:	6839      	ldr	r1, [r7, #0]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f000 facb 	bl	8013d6e <USBD_CtlError>
            err++;
 80137d8:	7afb      	ldrb	r3, [r7, #11]
 80137da:	3301      	adds	r3, #1
 80137dc:	72fb      	strb	r3, [r7, #11]
          break;
 80137de:	e089      	b.n	80138f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137e6:	689b      	ldr	r3, [r3, #8]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d00b      	beq.n	8013804 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137f2:	689b      	ldr	r3, [r3, #8]
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	7c12      	ldrb	r2, [r2, #16]
 80137f8:	f107 0108 	add.w	r1, r7, #8
 80137fc:	4610      	mov	r0, r2
 80137fe:	4798      	blx	r3
 8013800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013802:	e077      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013804:	6839      	ldr	r1, [r7, #0]
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f000 fab1 	bl	8013d6e <USBD_CtlError>
            err++;
 801380c:	7afb      	ldrb	r3, [r7, #11]
 801380e:	3301      	adds	r3, #1
 8013810:	72fb      	strb	r3, [r7, #11]
          break;
 8013812:	e06f      	b.n	80138f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00b      	beq.n	8013838 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	7c12      	ldrb	r2, [r2, #16]
 801382c:	f107 0108 	add.w	r1, r7, #8
 8013830:	4610      	mov	r0, r2
 8013832:	4798      	blx	r3
 8013834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013836:	e05d      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013838:	6839      	ldr	r1, [r7, #0]
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 fa97 	bl	8013d6e <USBD_CtlError>
            err++;
 8013840:	7afb      	ldrb	r3, [r7, #11]
 8013842:	3301      	adds	r3, #1
 8013844:	72fb      	strb	r3, [r7, #11]
          break;
 8013846:	e055      	b.n	80138f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00b      	beq.n	801386c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801385a:	691b      	ldr	r3, [r3, #16]
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	7c12      	ldrb	r2, [r2, #16]
 8013860:	f107 0108 	add.w	r1, r7, #8
 8013864:	4610      	mov	r0, r2
 8013866:	4798      	blx	r3
 8013868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801386a:	e043      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801386c:	6839      	ldr	r1, [r7, #0]
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 fa7d 	bl	8013d6e <USBD_CtlError>
            err++;
 8013874:	7afb      	ldrb	r3, [r7, #11]
 8013876:	3301      	adds	r3, #1
 8013878:	72fb      	strb	r3, [r7, #11]
          break;
 801387a:	e03b      	b.n	80138f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00b      	beq.n	80138a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801388e:	695b      	ldr	r3, [r3, #20]
 8013890:	687a      	ldr	r2, [r7, #4]
 8013892:	7c12      	ldrb	r2, [r2, #16]
 8013894:	f107 0108 	add.w	r1, r7, #8
 8013898:	4610      	mov	r0, r2
 801389a:	4798      	blx	r3
 801389c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801389e:	e029      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80138a0:	6839      	ldr	r1, [r7, #0]
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f000 fa63 	bl	8013d6e <USBD_CtlError>
            err++;
 80138a8:	7afb      	ldrb	r3, [r7, #11]
 80138aa:	3301      	adds	r3, #1
 80138ac:	72fb      	strb	r3, [r7, #11]
          break;
 80138ae:	e021      	b.n	80138f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138b6:	699b      	ldr	r3, [r3, #24]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00b      	beq.n	80138d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	7c12      	ldrb	r2, [r2, #16]
 80138c8:	f107 0108 	add.w	r1, r7, #8
 80138cc:	4610      	mov	r0, r2
 80138ce:	4798      	blx	r3
 80138d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80138d2:	e00f      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80138d4:	6839      	ldr	r1, [r7, #0]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 fa49 	bl	8013d6e <USBD_CtlError>
            err++;
 80138dc:	7afb      	ldrb	r3, [r7, #11]
 80138de:	3301      	adds	r3, #1
 80138e0:	72fb      	strb	r3, [r7, #11]
          break;
 80138e2:	e007      	b.n	80138f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80138e4:	6839      	ldr	r1, [r7, #0]
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f000 fa41 	bl	8013d6e <USBD_CtlError>
          err++;
 80138ec:	7afb      	ldrb	r3, [r7, #11]
 80138ee:	3301      	adds	r3, #1
 80138f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80138f2:	bf00      	nop
      }
      break;
 80138f4:	e037      	b.n	8013966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7c1b      	ldrb	r3, [r3, #16]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d109      	bne.n	8013912 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013906:	f107 0208 	add.w	r2, r7, #8
 801390a:	4610      	mov	r0, r2
 801390c:	4798      	blx	r3
 801390e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013910:	e029      	b.n	8013966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013912:	6839      	ldr	r1, [r7, #0]
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 fa2a 	bl	8013d6e <USBD_CtlError>
        err++;
 801391a:	7afb      	ldrb	r3, [r7, #11]
 801391c:	3301      	adds	r3, #1
 801391e:	72fb      	strb	r3, [r7, #11]
      break;
 8013920:	e021      	b.n	8013966 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	7c1b      	ldrb	r3, [r3, #16]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d10d      	bne.n	8013946 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013932:	f107 0208 	add.w	r2, r7, #8
 8013936:	4610      	mov	r0, r2
 8013938:	4798      	blx	r3
 801393a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	3301      	adds	r3, #1
 8013940:	2207      	movs	r2, #7
 8013942:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013944:	e00f      	b.n	8013966 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013946:	6839      	ldr	r1, [r7, #0]
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 fa10 	bl	8013d6e <USBD_CtlError>
        err++;
 801394e:	7afb      	ldrb	r3, [r7, #11]
 8013950:	3301      	adds	r3, #1
 8013952:	72fb      	strb	r3, [r7, #11]
      break;
 8013954:	e007      	b.n	8013966 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013956:	6839      	ldr	r1, [r7, #0]
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f000 fa08 	bl	8013d6e <USBD_CtlError>
      err++;
 801395e:	7afb      	ldrb	r3, [r7, #11]
 8013960:	3301      	adds	r3, #1
 8013962:	72fb      	strb	r3, [r7, #11]
      break;
 8013964:	bf00      	nop
  }

  if (err != 0U)
 8013966:	7afb      	ldrb	r3, [r7, #11]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d11e      	bne.n	80139aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	88db      	ldrh	r3, [r3, #6]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d016      	beq.n	80139a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013974:	893b      	ldrh	r3, [r7, #8]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d00e      	beq.n	8013998 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	88da      	ldrh	r2, [r3, #6]
 801397e:	893b      	ldrh	r3, [r7, #8]
 8013980:	4293      	cmp	r3, r2
 8013982:	bf28      	it	cs
 8013984:	4613      	movcs	r3, r2
 8013986:	b29b      	uxth	r3, r3
 8013988:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801398a:	893b      	ldrh	r3, [r7, #8]
 801398c:	461a      	mov	r2, r3
 801398e:	68f9      	ldr	r1, [r7, #12]
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 fa69 	bl	8013e68 <USBD_CtlSendData>
 8013996:	e009      	b.n	80139ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013998:	6839      	ldr	r1, [r7, #0]
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f000 f9e7 	bl	8013d6e <USBD_CtlError>
 80139a0:	e004      	b.n	80139ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 faba 	bl	8013f1c <USBD_CtlSendStatus>
 80139a8:	e000      	b.n	80139ac <USBD_GetDescriptor+0x320>
    return;
 80139aa:	bf00      	nop
  }
}
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop

080139b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	889b      	ldrh	r3, [r3, #4]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d131      	bne.n	8013a2a <USBD_SetAddress+0x76>
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	88db      	ldrh	r3, [r3, #6]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d12d      	bne.n	8013a2a <USBD_SetAddress+0x76>
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	885b      	ldrh	r3, [r3, #2]
 80139d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80139d4:	d829      	bhi.n	8013a2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	885b      	ldrh	r3, [r3, #2]
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139e8:	b2db      	uxtb	r3, r3
 80139ea:	2b03      	cmp	r3, #3
 80139ec:	d104      	bne.n	80139f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80139ee:	6839      	ldr	r1, [r7, #0]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 f9bc 	bl	8013d6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139f6:	e01d      	b.n	8013a34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	7bfa      	ldrb	r2, [r7, #15]
 80139fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013a00:	7bfb      	ldrb	r3, [r7, #15]
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 ff13 	bl	8014830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f000 fa86 	bl	8013f1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013a10:	7bfb      	ldrb	r3, [r7, #15]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d004      	beq.n	8013a20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2202      	movs	r2, #2
 8013a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a1e:	e009      	b.n	8013a34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2201      	movs	r2, #1
 8013a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a28:	e004      	b.n	8013a34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013a2a:	6839      	ldr	r1, [r7, #0]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 f99e 	bl	8013d6e <USBD_CtlError>
  }
}
 8013a32:	bf00      	nop
 8013a34:	bf00      	nop
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	885b      	ldrh	r3, [r3, #2]
 8013a4e:	b2da      	uxtb	r2, r3
 8013a50:	4b4e      	ldr	r3, [pc, #312]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013a54:	4b4d      	ldr	r3, [pc, #308]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d905      	bls.n	8013a68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 f985 	bl	8013d6e <USBD_CtlError>
    return USBD_FAIL;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e08c      	b.n	8013b82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b02      	cmp	r3, #2
 8013a72:	d002      	beq.n	8013a7a <USBD_SetConfig+0x3e>
 8013a74:	2b03      	cmp	r3, #3
 8013a76:	d029      	beq.n	8013acc <USBD_SetConfig+0x90>
 8013a78:	e075      	b.n	8013b66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013a7a:	4b44      	ldr	r3, [pc, #272]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d020      	beq.n	8013ac4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013a82:	4b42      	ldr	r3, [pc, #264]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	461a      	mov	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	4619      	mov	r1, r3
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7fe ffb9 	bl	8012a0a <USBD_SetClassConfig>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013a9c:	7bfb      	ldrb	r3, [r7, #15]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d008      	beq.n	8013ab4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013aa2:	6839      	ldr	r1, [r7, #0]
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 f962 	bl	8013d6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2202      	movs	r2, #2
 8013aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013ab2:	e065      	b.n	8013b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fa31 	bl	8013f1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2203      	movs	r2, #3
 8013abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013ac2:	e05d      	b.n	8013b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f000 fa29 	bl	8013f1c <USBD_CtlSendStatus>
      break;
 8013aca:	e059      	b.n	8013b80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013acc:	4b2f      	ldr	r3, [pc, #188]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d112      	bne.n	8013afa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2202      	movs	r2, #2
 8013ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013adc:	4b2b      	ldr	r3, [pc, #172]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013ae6:	4b29      	ldr	r3, [pc, #164]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	4619      	mov	r1, r3
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7fe ffa8 	bl	8012a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 fa12 	bl	8013f1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013af8:	e042      	b.n	8013b80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013afa:	4b24      	ldr	r3, [pc, #144]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013afc:	781b      	ldrb	r3, [r3, #0]
 8013afe:	461a      	mov	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d02a      	beq.n	8013b5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	4619      	mov	r1, r3
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7fe ff96 	bl	8012a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013b16:	4b1d      	ldr	r3, [pc, #116]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013b20:	4b1a      	ldr	r3, [pc, #104]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7fe ff6f 	bl	8012a0a <USBD_SetClassConfig>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013b30:	7bfb      	ldrb	r3, [r7, #15]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d00f      	beq.n	8013b56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013b36:	6839      	ldr	r1, [r7, #0]
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f000 f918 	bl	8013d6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	4619      	mov	r1, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7fe ff7b 	bl	8012a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2202      	movs	r2, #2
 8013b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013b54:	e014      	b.n	8013b80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 f9e0 	bl	8013f1c <USBD_CtlSendStatus>
      break;
 8013b5c:	e010      	b.n	8013b80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 f9dc 	bl	8013f1c <USBD_CtlSendStatus>
      break;
 8013b64:	e00c      	b.n	8013b80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 f900 	bl	8013d6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013b6e:	4b07      	ldr	r3, [pc, #28]	@ (8013b8c <USBD_SetConfig+0x150>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	4619      	mov	r1, r3
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f7fe ff64 	bl	8012a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8013b7e:	bf00      	nop
  }

  return ret;
 8013b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3710      	adds	r7, #16
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	24004f34 	.word	0x24004f34

08013b90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	88db      	ldrh	r3, [r3, #6]
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d004      	beq.n	8013bac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013ba2:	6839      	ldr	r1, [r7, #0]
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f8e2 	bl	8013d6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013baa:	e023      	b.n	8013bf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	dc02      	bgt.n	8013bbe <USBD_GetConfig+0x2e>
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	dc03      	bgt.n	8013bc4 <USBD_GetConfig+0x34>
 8013bbc:	e015      	b.n	8013bea <USBD_GetConfig+0x5a>
 8013bbe:	2b03      	cmp	r3, #3
 8013bc0:	d00b      	beq.n	8013bda <USBD_GetConfig+0x4a>
 8013bc2:	e012      	b.n	8013bea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	3308      	adds	r3, #8
 8013bce:	2201      	movs	r2, #1
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f948 	bl	8013e68 <USBD_CtlSendData>
        break;
 8013bd8:	e00c      	b.n	8013bf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	3304      	adds	r3, #4
 8013bde:	2201      	movs	r2, #1
 8013be0:	4619      	mov	r1, r3
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 f940 	bl	8013e68 <USBD_CtlSendData>
        break;
 8013be8:	e004      	b.n	8013bf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013bea:	6839      	ldr	r1, [r7, #0]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 f8be 	bl	8013d6e <USBD_CtlError>
        break;
 8013bf2:	bf00      	nop
}
 8013bf4:	bf00      	nop
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	3b01      	subs	r3, #1
 8013c10:	2b02      	cmp	r3, #2
 8013c12:	d81e      	bhi.n	8013c52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	88db      	ldrh	r3, [r3, #6]
 8013c18:	2b02      	cmp	r3, #2
 8013c1a:	d004      	beq.n	8013c26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013c1c:	6839      	ldr	r1, [r7, #0]
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 f8a5 	bl	8013d6e <USBD_CtlError>
        break;
 8013c24:	e01a      	b.n	8013c5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d005      	beq.n	8013c42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	f043 0202 	orr.w	r2, r3, #2
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	330c      	adds	r3, #12
 8013c46:	2202      	movs	r2, #2
 8013c48:	4619      	mov	r1, r3
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f000 f90c 	bl	8013e68 <USBD_CtlSendData>
      break;
 8013c50:	e004      	b.n	8013c5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f88a 	bl	8013d6e <USBD_CtlError>
      break;
 8013c5a:	bf00      	nop
  }
}
 8013c5c:	bf00      	nop
 8013c5e:	3708      	adds	r7, #8
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	885b      	ldrh	r3, [r3, #2]
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d107      	bne.n	8013c86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2201      	movs	r2, #1
 8013c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f000 f94c 	bl	8013f1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013c84:	e013      	b.n	8013cae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	885b      	ldrh	r3, [r3, #2]
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	d10b      	bne.n	8013ca6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	889b      	ldrh	r3, [r3, #4]
 8013c92:	0a1b      	lsrs	r3, r3, #8
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	b2da      	uxtb	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 f93c 	bl	8013f1c <USBD_CtlSendStatus>
}
 8013ca4:	e003      	b.n	8013cae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013ca6:	6839      	ldr	r1, [r7, #0]
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 f860 	bl	8013d6e <USBD_CtlError>
}
 8013cae:	bf00      	nop
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b082      	sub	sp, #8
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	2b02      	cmp	r3, #2
 8013ccc:	d80b      	bhi.n	8013ce6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	885b      	ldrh	r3, [r3, #2]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d10c      	bne.n	8013cf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f000 f91c 	bl	8013f1c <USBD_CtlSendStatus>
      }
      break;
 8013ce4:	e004      	b.n	8013cf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f840 	bl	8013d6e <USBD_CtlError>
      break;
 8013cee:	e000      	b.n	8013cf2 <USBD_ClrFeature+0x3c>
      break;
 8013cf0:	bf00      	nop
  }
}
 8013cf2:	bf00      	nop
 8013cf4:	3708      	adds	r7, #8
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}

08013cfa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013cfa:	b580      	push	{r7, lr}
 8013cfc:	b084      	sub	sp, #16
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
 8013d02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	781a      	ldrb	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	3301      	adds	r3, #1
 8013d14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	781a      	ldrb	r2, [r3, #0]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	3301      	adds	r3, #1
 8013d22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f7ff fa16 	bl	8013156 <SWAPBYTE>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	3301      	adds	r3, #1
 8013d36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f7ff fa09 	bl	8013156 <SWAPBYTE>
 8013d44:	4603      	mov	r3, r0
 8013d46:	461a      	mov	r2, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	3301      	adds	r3, #1
 8013d50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	3301      	adds	r3, #1
 8013d56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013d58:	68f8      	ldr	r0, [r7, #12]
 8013d5a:	f7ff f9fc 	bl	8013156 <SWAPBYTE>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	461a      	mov	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	80da      	strh	r2, [r3, #6]
}
 8013d66:	bf00      	nop
 8013d68:	3710      	adds	r7, #16
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d6e:	b580      	push	{r7, lr}
 8013d70:	b082      	sub	sp, #8
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
 8013d76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d78:	2180      	movs	r1, #128	@ 0x80
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f000 fcee 	bl	801475c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013d80:	2100      	movs	r1, #0
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f000 fcea 	bl	801475c <USBD_LL_StallEP>
}
 8013d88:	bf00      	nop
 8013d8a:	3708      	adds	r7, #8
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d042      	beq.n	8013e2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013daa:	6938      	ldr	r0, [r7, #16]
 8013dac:	f000 f842 	bl	8013e34 <USBD_GetLen>
 8013db0:	4603      	mov	r3, r0
 8013db2:	3301      	adds	r3, #1
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013dba:	d808      	bhi.n	8013dce <USBD_GetString+0x3e>
 8013dbc:	6938      	ldr	r0, [r7, #16]
 8013dbe:	f000 f839 	bl	8013e34 <USBD_GetLen>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	005b      	lsls	r3, r3, #1
 8013dca:	b29a      	uxth	r2, r3
 8013dcc:	e001      	b.n	8013dd2 <USBD_GetString+0x42>
 8013dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	4413      	add	r3, r2
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	7812      	ldrb	r2, [r2, #0]
 8013de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8013de2:	7dfb      	ldrb	r3, [r7, #23]
 8013de4:	3301      	adds	r3, #1
 8013de6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013de8:	7dfb      	ldrb	r3, [r7, #23]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	4413      	add	r3, r2
 8013dee:	2203      	movs	r2, #3
 8013df0:	701a      	strb	r2, [r3, #0]
  idx++;
 8013df2:	7dfb      	ldrb	r3, [r7, #23]
 8013df4:	3301      	adds	r3, #1
 8013df6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013df8:	e013      	b.n	8013e22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013dfa:	7dfb      	ldrb	r3, [r7, #23]
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	4413      	add	r3, r2
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	7812      	ldrb	r2, [r2, #0]
 8013e04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	613b      	str	r3, [r7, #16]
    idx++;
 8013e0c:	7dfb      	ldrb	r3, [r7, #23]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013e12:	7dfb      	ldrb	r3, [r7, #23]
 8013e14:	68ba      	ldr	r2, [r7, #8]
 8013e16:	4413      	add	r3, r2
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8013e1c:	7dfb      	ldrb	r3, [r7, #23]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d1e7      	bne.n	8013dfa <USBD_GetString+0x6a>
 8013e2a:	e000      	b.n	8013e2e <USBD_GetString+0x9e>
    return;
 8013e2c:	bf00      	nop
  }
}
 8013e2e:	3718      	adds	r7, #24
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b085      	sub	sp, #20
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013e44:	e005      	b.n	8013e52 <USBD_GetLen+0x1e>
  {
    len++;
 8013e46:	7bfb      	ldrb	r3, [r7, #15]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d1f5      	bne.n	8013e46 <USBD_GetLen+0x12>
  }

  return len;
 8013e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3714      	adds	r7, #20
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2202      	movs	r2, #2
 8013e78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	68ba      	ldr	r2, [r7, #8]
 8013e8c:	2100      	movs	r1, #0
 8013e8e:	68f8      	ldr	r0, [r7, #12]
 8013e90:	f000 fced 	bl	801486e <USBD_LL_Transmit>

  return USBD_OK;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013e9e:	b580      	push	{r7, lr}
 8013ea0:	b084      	sub	sp, #16
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	60f8      	str	r0, [r7, #12]
 8013ea6:	60b9      	str	r1, [r7, #8]
 8013ea8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	68ba      	ldr	r2, [r7, #8]
 8013eae:	2100      	movs	r1, #0
 8013eb0:	68f8      	ldr	r0, [r7, #12]
 8013eb2:	f000 fcdc 	bl	801486e <USBD_LL_Transmit>

  return USBD_OK;
 8013eb6:	2300      	movs	r3, #0
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2203      	movs	r2, #3
 8013ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	2100      	movs	r1, #0
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 fce0 	bl	80148b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ef0:	2300      	movs	r3, #0
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3710      	adds	r7, #16
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	60f8      	str	r0, [r7, #12]
 8013f02:	60b9      	str	r1, [r7, #8]
 8013f04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f000 fccf 	bl	80148b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013f12:	2300      	movs	r3, #0
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2204      	movs	r2, #4
 8013f28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	2200      	movs	r2, #0
 8013f30:	2100      	movs	r1, #0
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f000 fc9b 	bl	801486e <USBD_LL_Transmit>

  return USBD_OK;
 8013f38:	2300      	movs	r3, #0
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3708      	adds	r7, #8
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}

08013f42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013f42:	b580      	push	{r7, lr}
 8013f44:	b082      	sub	sp, #8
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2205      	movs	r2, #5
 8013f4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f52:	2300      	movs	r3, #0
 8013f54:	2200      	movs	r2, #0
 8013f56:	2100      	movs	r1, #0
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f000 fca9 	bl	80148b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013f5e:	2300      	movs	r3, #0
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	4913      	ldr	r1, [pc, #76]	@ (8013fbc <MX_USB_DEVICE_Init+0x54>)
 8013f70:	4813      	ldr	r0, [pc, #76]	@ (8013fc0 <MX_USB_DEVICE_Init+0x58>)
 8013f72:	f7fe fccd 	bl	8012910 <USBD_Init>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d001      	beq.n	8013f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013f7c:	f7ed fcaa 	bl	80018d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8013f80:	4910      	ldr	r1, [pc, #64]	@ (8013fc4 <MX_USB_DEVICE_Init+0x5c>)
 8013f82:	480f      	ldr	r0, [pc, #60]	@ (8013fc0 <MX_USB_DEVICE_Init+0x58>)
 8013f84:	f7fe fcf4 	bl	8012970 <USBD_RegisterClass>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d001      	beq.n	8013f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013f8e:	f7ed fca1 	bl	80018d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8013f92:	490d      	ldr	r1, [pc, #52]	@ (8013fc8 <MX_USB_DEVICE_Init+0x60>)
 8013f94:	480a      	ldr	r0, [pc, #40]	@ (8013fc0 <MX_USB_DEVICE_Init+0x58>)
 8013f96:	f7fe fbeb 	bl	8012770 <USBD_CDC_RegisterInterface>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d001      	beq.n	8013fa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013fa0:	f7ed fc98 	bl	80018d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8013fa4:	4806      	ldr	r0, [pc, #24]	@ (8013fc0 <MX_USB_DEVICE_Init+0x58>)
 8013fa6:	f7fe fd19 	bl	80129dc <USBD_Start>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d001      	beq.n	8013fb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013fb0:	f7ed fc90 	bl	80018d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013fb4:	f7f6 fa5c 	bl	800a470 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013fb8:	bf00      	nop
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	240000b0 	.word	0x240000b0
 8013fc0:	24004f38 	.word	0x24004f38
 8013fc4:	2400001c 	.word	0x2400001c
 8013fc8:	2400009c 	.word	0x2400009c

08013fcc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	4905      	ldr	r1, [pc, #20]	@ (8013fe8 <CDC_Init_HS+0x1c>)
 8013fd4:	4805      	ldr	r0, [pc, #20]	@ (8013fec <CDC_Init_HS+0x20>)
 8013fd6:	f7fe fbe5 	bl	80127a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8013fda:	4905      	ldr	r1, [pc, #20]	@ (8013ff0 <CDC_Init_HS+0x24>)
 8013fdc:	4803      	ldr	r0, [pc, #12]	@ (8013fec <CDC_Init_HS+0x20>)
 8013fde:	f7fe fc03 	bl	80127e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013fe2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	24005a14 	.word	0x24005a14
 8013fec:	24004f38 	.word	0x24004f38
 8013ff0:	24005214 	.word	0x24005214

08013ff4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013ff8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr

08014004 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	4603      	mov	r3, r0
 801400c:	6039      	str	r1, [r7, #0]
 801400e:	71fb      	strb	r3, [r7, #7]
 8014010:	4613      	mov	r3, r2
 8014012:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8014014:	79fb      	ldrb	r3, [r7, #7]
 8014016:	2b23      	cmp	r3, #35	@ 0x23
 8014018:	d84a      	bhi.n	80140b0 <CDC_Control_HS+0xac>
 801401a:	a201      	add	r2, pc, #4	@ (adr r2, 8014020 <CDC_Control_HS+0x1c>)
 801401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014020:	080140b1 	.word	0x080140b1
 8014024:	080140b1 	.word	0x080140b1
 8014028:	080140b1 	.word	0x080140b1
 801402c:	080140b1 	.word	0x080140b1
 8014030:	080140b1 	.word	0x080140b1
 8014034:	080140b1 	.word	0x080140b1
 8014038:	080140b1 	.word	0x080140b1
 801403c:	080140b1 	.word	0x080140b1
 8014040:	080140b1 	.word	0x080140b1
 8014044:	080140b1 	.word	0x080140b1
 8014048:	080140b1 	.word	0x080140b1
 801404c:	080140b1 	.word	0x080140b1
 8014050:	080140b1 	.word	0x080140b1
 8014054:	080140b1 	.word	0x080140b1
 8014058:	080140b1 	.word	0x080140b1
 801405c:	080140b1 	.word	0x080140b1
 8014060:	080140b1 	.word	0x080140b1
 8014064:	080140b1 	.word	0x080140b1
 8014068:	080140b1 	.word	0x080140b1
 801406c:	080140b1 	.word	0x080140b1
 8014070:	080140b1 	.word	0x080140b1
 8014074:	080140b1 	.word	0x080140b1
 8014078:	080140b1 	.word	0x080140b1
 801407c:	080140b1 	.word	0x080140b1
 8014080:	080140b1 	.word	0x080140b1
 8014084:	080140b1 	.word	0x080140b1
 8014088:	080140b1 	.word	0x080140b1
 801408c:	080140b1 	.word	0x080140b1
 8014090:	080140b1 	.word	0x080140b1
 8014094:	080140b1 	.word	0x080140b1
 8014098:	080140b1 	.word	0x080140b1
 801409c:	080140b1 	.word	0x080140b1
 80140a0:	080140b1 	.word	0x080140b1
 80140a4:	080140b1 	.word	0x080140b1
 80140a8:	080140b1 	.word	0x080140b1
 80140ac:	080140b1 	.word	0x080140b1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80140b0:	bf00      	nop
  }

  return (USBD_OK);
 80140b2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	370c      	adds	r7, #12
 80140b8:	46bd      	mov	sp, r7
 80140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140be:	4770      	bx	lr

080140c0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80140ca:	6879      	ldr	r1, [r7, #4]
 80140cc:	4808      	ldr	r0, [pc, #32]	@ (80140f0 <CDC_Receive_HS+0x30>)
 80140ce:	f7fe fb8b 	bl	80127e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80140d2:	4807      	ldr	r0, [pc, #28]	@ (80140f0 <CDC_Receive_HS+0x30>)
 80140d4:	f7fe fbe6 	bl	80128a4 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	461a      	mov	r2, r3
 80140de:	6879      	ldr	r1, [r7, #4]
 80140e0:	4804      	ldr	r0, [pc, #16]	@ (80140f4 <CDC_Receive_HS+0x34>)
 80140e2:	f7ee fe75 	bl	8002dd0 <VibeCheckShell_PutInput>

	return (USBD_OK);
 80140e6:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	24004f38 	.word	0x24004f38
 80140f4:	24000910 	.word	0x24000910

080140f8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	460b      	mov	r3, r1
 8014102:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014104:	2300      	movs	r3, #0
 8014106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014108:	4b0d      	ldr	r3, [pc, #52]	@ (8014140 <CDC_Transmit_HS+0x48>)
 801410a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801410e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801411a:	2301      	movs	r3, #1
 801411c:	e00b      	b.n	8014136 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801411e:	887b      	ldrh	r3, [r7, #2]
 8014120:	461a      	mov	r2, r3
 8014122:	6879      	ldr	r1, [r7, #4]
 8014124:	4806      	ldr	r0, [pc, #24]	@ (8014140 <CDC_Transmit_HS+0x48>)
 8014126:	f7fe fb3d 	bl	80127a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801412a:	4805      	ldr	r0, [pc, #20]	@ (8014140 <CDC_Transmit_HS+0x48>)
 801412c:	f7fe fb7a 	bl	8012824 <USBD_CDC_TransmitPacket>
 8014130:	4603      	mov	r3, r0
 8014132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8014134:	7bfb      	ldrb	r3, [r7, #15]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3710      	adds	r7, #16
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	24004f38 	.word	0x24004f38

08014144 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014144:	b480      	push	{r7}
 8014146:	b087      	sub	sp, #28
 8014148:	af00      	add	r7, sp, #0
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	4613      	mov	r3, r2
 8014150:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014152:	2300      	movs	r3, #0
 8014154:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8014156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801415a:	4618      	mov	r0, r3
 801415c:	371c      	adds	r7, #28
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
	...

08014168 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	4603      	mov	r3, r0
 8014170:	6039      	str	r1, [r7, #0]
 8014172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	2212      	movs	r2, #18
 8014178:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801417a:	4b03      	ldr	r3, [pc, #12]	@ (8014188 <USBD_HS_DeviceDescriptor+0x20>)
}
 801417c:	4618      	mov	r0, r3
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr
 8014188:	240000d0 	.word	0x240000d0

0801418c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	4603      	mov	r3, r0
 8014194:	6039      	str	r1, [r7, #0]
 8014196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	2204      	movs	r2, #4
 801419c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801419e:	4b03      	ldr	r3, [pc, #12]	@ (80141ac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr
 80141ac:	240000e4 	.word	0x240000e4

080141b0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	4603      	mov	r3, r0
 80141b8:	6039      	str	r1, [r7, #0]
 80141ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80141bc:	79fb      	ldrb	r3, [r7, #7]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d105      	bne.n	80141ce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	4907      	ldr	r1, [pc, #28]	@ (80141e4 <USBD_HS_ProductStrDescriptor+0x34>)
 80141c6:	4808      	ldr	r0, [pc, #32]	@ (80141e8 <USBD_HS_ProductStrDescriptor+0x38>)
 80141c8:	f7ff fde2 	bl	8013d90 <USBD_GetString>
 80141cc:	e004      	b.n	80141d8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	4904      	ldr	r1, [pc, #16]	@ (80141e4 <USBD_HS_ProductStrDescriptor+0x34>)
 80141d2:	4805      	ldr	r0, [pc, #20]	@ (80141e8 <USBD_HS_ProductStrDescriptor+0x38>)
 80141d4:	f7ff fddc 	bl	8013d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80141d8:	4b02      	ldr	r3, [pc, #8]	@ (80141e4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	24006214 	.word	0x24006214
 80141e8:	08019850 	.word	0x08019850

080141ec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	4603      	mov	r3, r0
 80141f4:	6039      	str	r1, [r7, #0]
 80141f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80141f8:	683a      	ldr	r2, [r7, #0]
 80141fa:	4904      	ldr	r1, [pc, #16]	@ (801420c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80141fc:	4804      	ldr	r0, [pc, #16]	@ (8014210 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80141fe:	f7ff fdc7 	bl	8013d90 <USBD_GetString>
  return USBD_StrDesc;
 8014202:	4b02      	ldr	r3, [pc, #8]	@ (801420c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8014204:	4618      	mov	r0, r3
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	24006214 	.word	0x24006214
 8014210:	0801985c 	.word	0x0801985c

08014214 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	4603      	mov	r3, r0
 801421c:	6039      	str	r1, [r7, #0]
 801421e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	221a      	movs	r2, #26
 8014224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014226:	f000 f843 	bl	80142b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801422a:	4b02      	ldr	r3, [pc, #8]	@ (8014234 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801422c:	4618      	mov	r0, r3
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	240000e8 	.word	0x240000e8

08014238 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	4603      	mov	r3, r0
 8014240:	6039      	str	r1, [r7, #0]
 8014242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014244:	79fb      	ldrb	r3, [r7, #7]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d105      	bne.n	8014256 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801424a:	683a      	ldr	r2, [r7, #0]
 801424c:	4907      	ldr	r1, [pc, #28]	@ (801426c <USBD_HS_ConfigStrDescriptor+0x34>)
 801424e:	4808      	ldr	r0, [pc, #32]	@ (8014270 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014250:	f7ff fd9e 	bl	8013d90 <USBD_GetString>
 8014254:	e004      	b.n	8014260 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	4904      	ldr	r1, [pc, #16]	@ (801426c <USBD_HS_ConfigStrDescriptor+0x34>)
 801425a:	4805      	ldr	r0, [pc, #20]	@ (8014270 <USBD_HS_ConfigStrDescriptor+0x38>)
 801425c:	f7ff fd98 	bl	8013d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014260:	4b02      	ldr	r3, [pc, #8]	@ (801426c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8014262:	4618      	mov	r0, r3
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	24006214 	.word	0x24006214
 8014270:	08019868 	.word	0x08019868

08014274 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
 801427a:	4603      	mov	r3, r0
 801427c:	6039      	str	r1, [r7, #0]
 801427e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014280:	79fb      	ldrb	r3, [r7, #7]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d105      	bne.n	8014292 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8014286:	683a      	ldr	r2, [r7, #0]
 8014288:	4907      	ldr	r1, [pc, #28]	@ (80142a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801428a:	4808      	ldr	r0, [pc, #32]	@ (80142ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 801428c:	f7ff fd80 	bl	8013d90 <USBD_GetString>
 8014290:	e004      	b.n	801429c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	4904      	ldr	r1, [pc, #16]	@ (80142a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014296:	4805      	ldr	r0, [pc, #20]	@ (80142ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014298:	f7ff fd7a 	bl	8013d90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801429c:	4b02      	ldr	r3, [pc, #8]	@ (80142a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3708      	adds	r7, #8
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	bf00      	nop
 80142a8:	24006214 	.word	0x24006214
 80142ac:	08019874 	.word	0x08019874

080142b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80142b6:	4b0f      	ldr	r3, [pc, #60]	@ (80142f4 <Get_SerialNum+0x44>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80142bc:	4b0e      	ldr	r3, [pc, #56]	@ (80142f8 <Get_SerialNum+0x48>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80142c2:	4b0e      	ldr	r3, [pc, #56]	@ (80142fc <Get_SerialNum+0x4c>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	4413      	add	r3, r2
 80142ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d009      	beq.n	80142ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80142d6:	2208      	movs	r2, #8
 80142d8:	4909      	ldr	r1, [pc, #36]	@ (8014300 <Get_SerialNum+0x50>)
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	f000 f814 	bl	8014308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80142e0:	2204      	movs	r2, #4
 80142e2:	4908      	ldr	r1, [pc, #32]	@ (8014304 <Get_SerialNum+0x54>)
 80142e4:	68b8      	ldr	r0, [r7, #8]
 80142e6:	f000 f80f 	bl	8014308 <IntToUnicode>
  }
}
 80142ea:	bf00      	nop
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	1ff1e800 	.word	0x1ff1e800
 80142f8:	1ff1e804 	.word	0x1ff1e804
 80142fc:	1ff1e808 	.word	0x1ff1e808
 8014300:	240000ea 	.word	0x240000ea
 8014304:	240000fa 	.word	0x240000fa

08014308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014308:	b480      	push	{r7}
 801430a:	b087      	sub	sp, #28
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	4613      	mov	r3, r2
 8014314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014316:	2300      	movs	r3, #0
 8014318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801431a:	2300      	movs	r3, #0
 801431c:	75fb      	strb	r3, [r7, #23]
 801431e:	e027      	b.n	8014370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	0f1b      	lsrs	r3, r3, #28
 8014324:	2b09      	cmp	r3, #9
 8014326:	d80b      	bhi.n	8014340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	0f1b      	lsrs	r3, r3, #28
 801432c:	b2da      	uxtb	r2, r3
 801432e:	7dfb      	ldrb	r3, [r7, #23]
 8014330:	005b      	lsls	r3, r3, #1
 8014332:	4619      	mov	r1, r3
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	440b      	add	r3, r1
 8014338:	3230      	adds	r2, #48	@ 0x30
 801433a:	b2d2      	uxtb	r2, r2
 801433c:	701a      	strb	r2, [r3, #0]
 801433e:	e00a      	b.n	8014356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	0f1b      	lsrs	r3, r3, #28
 8014344:	b2da      	uxtb	r2, r3
 8014346:	7dfb      	ldrb	r3, [r7, #23]
 8014348:	005b      	lsls	r3, r3, #1
 801434a:	4619      	mov	r1, r3
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	440b      	add	r3, r1
 8014350:	3237      	adds	r2, #55	@ 0x37
 8014352:	b2d2      	uxtb	r2, r2
 8014354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	011b      	lsls	r3, r3, #4
 801435a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801435c:	7dfb      	ldrb	r3, [r7, #23]
 801435e:	005b      	lsls	r3, r3, #1
 8014360:	3301      	adds	r3, #1
 8014362:	68ba      	ldr	r2, [r7, #8]
 8014364:	4413      	add	r3, r2
 8014366:	2200      	movs	r2, #0
 8014368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801436a:	7dfb      	ldrb	r3, [r7, #23]
 801436c:	3301      	adds	r3, #1
 801436e:	75fb      	strb	r3, [r7, #23]
 8014370:	7dfa      	ldrb	r2, [r7, #23]
 8014372:	79fb      	ldrb	r3, [r7, #7]
 8014374:	429a      	cmp	r2, r3
 8014376:	d3d3      	bcc.n	8014320 <IntToUnicode+0x18>
  }
}
 8014378:	bf00      	nop
 801437a:	bf00      	nop
 801437c:	371c      	adds	r7, #28
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr
	...

08014388 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b0b2      	sub	sp, #200	@ 0xc8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014390:	f107 0310 	add.w	r3, r7, #16
 8014394:	22b8      	movs	r2, #184	@ 0xb8
 8014396:	2100      	movs	r1, #0
 8014398:	4618      	mov	r0, r3
 801439a:	f001 fe1e 	bl	8015fda <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	4a1a      	ldr	r2, [pc, #104]	@ (801440c <HAL_PCD_MspInit+0x84>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d12c      	bne.n	8014402 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80143a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80143ac:	f04f 0300 	mov.w	r3, #0
 80143b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80143b4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80143b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80143bc:	f107 0310 	add.w	r3, r7, #16
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f6 ffcb 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80143cc:	f7ed fa82 	bl	80018d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80143d0:	f7f6 f84e 	bl	800a470 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80143d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014410 <HAL_PCD_MspInit+0x88>)
 80143d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80143da:	4a0d      	ldr	r2, [pc, #52]	@ (8014410 <HAL_PCD_MspInit+0x88>)
 80143dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80143e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80143e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014410 <HAL_PCD_MspInit+0x88>)
 80143e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80143ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80143ee:	60fb      	str	r3, [r7, #12]
 80143f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80143f2:	2200      	movs	r2, #0
 80143f4:	2100      	movs	r1, #0
 80143f6:	204d      	movs	r0, #77	@ 0x4d
 80143f8:	f7f1 fe1b 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80143fc:	204d      	movs	r0, #77	@ 0x4d
 80143fe:	f7f1 fe32 	bl	8006066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8014402:	bf00      	nop
 8014404:	37c8      	adds	r7, #200	@ 0xc8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	40040000 	.word	0x40040000
 8014410:	58024400 	.word	0x58024400

08014414 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014428:	4619      	mov	r1, r3
 801442a:	4610      	mov	r0, r2
 801442c:	f7fe fb23 	bl	8012a76 <USBD_LL_SetupStage>
}
 8014430:	bf00      	nop
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	460b      	mov	r3, r1
 8014442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801444a:	78fa      	ldrb	r2, [r7, #3]
 801444c:	6879      	ldr	r1, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	00db      	lsls	r3, r3, #3
 8014452:	4413      	add	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	440b      	add	r3, r1
 8014458:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	78fb      	ldrb	r3, [r7, #3]
 8014460:	4619      	mov	r1, r3
 8014462:	f7fe fb5d 	bl	8012b20 <USBD_LL_DataOutStage>
}
 8014466:	bf00      	nop
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b082      	sub	sp, #8
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	460b      	mov	r3, r1
 8014478:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014480:	78fa      	ldrb	r2, [r7, #3]
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	4613      	mov	r3, r2
 8014486:	00db      	lsls	r3, r3, #3
 8014488:	4413      	add	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	440b      	add	r3, r1
 801448e:	3320      	adds	r3, #32
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	78fb      	ldrb	r3, [r7, #3]
 8014494:	4619      	mov	r1, r3
 8014496:	f7fe fbf6 	bl	8012c86 <USBD_LL_DataInStage>
}
 801449a:	bf00      	nop
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fe fd30 	bl	8012f16 <USBD_LL_SOF>
}
 80144b6:	bf00      	nop
 80144b8:	3708      	adds	r7, #8
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}

080144be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144be:	b580      	push	{r7, lr}
 80144c0:	b084      	sub	sp, #16
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80144c6:	2301      	movs	r3, #1
 80144c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	79db      	ldrb	r3, [r3, #7]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d102      	bne.n	80144d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80144d2:	2300      	movs	r3, #0
 80144d4:	73fb      	strb	r3, [r7, #15]
 80144d6:	e008      	b.n	80144ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	79db      	ldrb	r3, [r3, #7]
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d102      	bne.n	80144e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80144e0:	2301      	movs	r3, #1
 80144e2:	73fb      	strb	r3, [r7, #15]
 80144e4:	e001      	b.n	80144ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80144e6:	f7ed f9f5 	bl	80018d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80144f0:	7bfa      	ldrb	r2, [r7, #15]
 80144f2:	4611      	mov	r1, r2
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fe fcca 	bl	8012e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014500:	4618      	mov	r0, r3
 8014502:	f7fe fc72 	bl	8012dea <USBD_LL_Reset>
}
 8014506:	bf00      	nop
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
	...

08014510 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe fcc5 	bl	8012eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	6812      	ldr	r2, [r2, #0]
 8014532:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014536:	f043 0301 	orr.w	r3, r3, #1
 801453a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	7adb      	ldrb	r3, [r3, #11]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d005      	beq.n	8014550 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014544:	4b04      	ldr	r3, [pc, #16]	@ (8014558 <HAL_PCD_SuspendCallback+0x48>)
 8014546:	691b      	ldr	r3, [r3, #16]
 8014548:	4a03      	ldr	r2, [pc, #12]	@ (8014558 <HAL_PCD_SuspendCallback+0x48>)
 801454a:	f043 0306 	orr.w	r3, r3, #6
 801454e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014550:	bf00      	nop
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	e000ed00 	.word	0xe000ed00

0801455c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801456a:	4618      	mov	r0, r3
 801456c:	f7fe fcbb 	bl	8012ee6 <USBD_LL_Resume>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801458a:	78fa      	ldrb	r2, [r7, #3]
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f7fe fd13 	bl	8012fba <USBD_LL_IsoOUTIncomplete>
}
 8014594:	bf00      	nop
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	460b      	mov	r3, r1
 80145a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80145ae:	78fa      	ldrb	r2, [r7, #3]
 80145b0:	4611      	mov	r1, r2
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fe fccf 	bl	8012f56 <USBD_LL_IsoINIncomplete>
}
 80145b8:	bf00      	nop
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fe fd25 	bl	801301e <USBD_LL_DevConnected>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fe fd22 	bl	8013034 <USBD_LL_DevDisconnected>
}
 80145f0:	bf00      	nop
 80145f2:	3708      	adds	r7, #8
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	2b01      	cmp	r3, #1
 8014606:	d140      	bne.n	801468a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8014608:	4a22      	ldr	r2, [pc, #136]	@ (8014694 <USBD_LL_Init+0x9c>)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	4a20      	ldr	r2, [pc, #128]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014614:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8014618:	4b1e      	ldr	r3, [pc, #120]	@ (8014694 <USBD_LL_Init+0x9c>)
 801461a:	4a1f      	ldr	r2, [pc, #124]	@ (8014698 <USBD_LL_Init+0xa0>)
 801461c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801461e:	4b1d      	ldr	r3, [pc, #116]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014620:	2209      	movs	r2, #9
 8014622:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8014624:	4b1b      	ldr	r3, [pc, #108]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014626:	2202      	movs	r2, #2
 8014628:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801462a:	4b1a      	ldr	r3, [pc, #104]	@ (8014694 <USBD_LL_Init+0x9c>)
 801462c:	2200      	movs	r2, #0
 801462e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8014630:	4b18      	ldr	r3, [pc, #96]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014632:	2202      	movs	r2, #2
 8014634:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8014636:	4b17      	ldr	r3, [pc, #92]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014638:	2200      	movs	r2, #0
 801463a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801463c:	4b15      	ldr	r3, [pc, #84]	@ (8014694 <USBD_LL_Init+0x9c>)
 801463e:	2200      	movs	r2, #0
 8014640:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8014642:	4b14      	ldr	r3, [pc, #80]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014644:	2200      	movs	r2, #0
 8014646:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8014648:	4b12      	ldr	r3, [pc, #72]	@ (8014694 <USBD_LL_Init+0x9c>)
 801464a:	2200      	movs	r2, #0
 801464c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801464e:	4b11      	ldr	r3, [pc, #68]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014650:	2200      	movs	r2, #0
 8014652:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8014654:	4b0f      	ldr	r3, [pc, #60]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014656:	2200      	movs	r2, #0
 8014658:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801465a:	480e      	ldr	r0, [pc, #56]	@ (8014694 <USBD_LL_Init+0x9c>)
 801465c:	f7f4 fc2f 	bl	8008ebe <HAL_PCD_Init>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d001      	beq.n	801466a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014666:	f7ed f935 	bl	80018d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801466a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801466e:	4809      	ldr	r0, [pc, #36]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014670:	f7f5 fe83 	bl	800a37a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8014674:	2280      	movs	r2, #128	@ 0x80
 8014676:	2100      	movs	r1, #0
 8014678:	4806      	ldr	r0, [pc, #24]	@ (8014694 <USBD_LL_Init+0x9c>)
 801467a:	f7f5 fe37 	bl	800a2ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801467e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8014682:	2101      	movs	r1, #1
 8014684:	4803      	ldr	r0, [pc, #12]	@ (8014694 <USBD_LL_Init+0x9c>)
 8014686:	f7f5 fe31 	bl	800a2ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801468a:	2300      	movs	r3, #0
}
 801468c:	4618      	mov	r0, r3
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	24006414 	.word	0x24006414
 8014698:	40040000 	.word	0x40040000

0801469c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146a4:	2300      	movs	r3, #0
 80146a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146a8:	2300      	movs	r3, #0
 80146aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7f4 fd0f 	bl	80090d6 <HAL_PCD_Start>
 80146b8:	4603      	mov	r3, r0
 80146ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80146bc:	7bfb      	ldrb	r3, [r7, #15]
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 f942 	bl	8014948 <USBD_Get_USB_Status>
 80146c4:	4603      	mov	r3, r0
 80146c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}

080146d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80146d2:	b580      	push	{r7, lr}
 80146d4:	b084      	sub	sp, #16
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	6078      	str	r0, [r7, #4]
 80146da:	4608      	mov	r0, r1
 80146dc:	4611      	mov	r1, r2
 80146de:	461a      	mov	r2, r3
 80146e0:	4603      	mov	r3, r0
 80146e2:	70fb      	strb	r3, [r7, #3]
 80146e4:	460b      	mov	r3, r1
 80146e6:	70bb      	strb	r3, [r7, #2]
 80146e8:	4613      	mov	r3, r2
 80146ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146ec:	2300      	movs	r3, #0
 80146ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146f0:	2300      	movs	r3, #0
 80146f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80146fa:	78bb      	ldrb	r3, [r7, #2]
 80146fc:	883a      	ldrh	r2, [r7, #0]
 80146fe:	78f9      	ldrb	r1, [r7, #3]
 8014700:	f7f5 fa10 	bl	8009b24 <HAL_PCD_EP_Open>
 8014704:	4603      	mov	r3, r0
 8014706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014708:	7bfb      	ldrb	r3, [r7, #15]
 801470a:	4618      	mov	r0, r3
 801470c:	f000 f91c 	bl	8014948 <USBD_Get_USB_Status>
 8014710:	4603      	mov	r3, r0
 8014712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014714:	7bbb      	ldrb	r3, [r7, #14]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3710      	adds	r7, #16
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b084      	sub	sp, #16
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]
 8014726:	460b      	mov	r3, r1
 8014728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801472a:	2300      	movs	r3, #0
 801472c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801472e:	2300      	movs	r3, #0
 8014730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014738:	78fa      	ldrb	r2, [r7, #3]
 801473a:	4611      	mov	r1, r2
 801473c:	4618      	mov	r0, r3
 801473e:	f7f5 fa59 	bl	8009bf4 <HAL_PCD_EP_Close>
 8014742:	4603      	mov	r3, r0
 8014744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014746:	7bfb      	ldrb	r3, [r7, #15]
 8014748:	4618      	mov	r0, r3
 801474a:	f000 f8fd 	bl	8014948 <USBD_Get_USB_Status>
 801474e:	4603      	mov	r3, r0
 8014750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014752:	7bbb      	ldrb	r3, [r7, #14]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3710      	adds	r7, #16
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b084      	sub	sp, #16
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014768:	2300      	movs	r3, #0
 801476a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801476c:	2300      	movs	r3, #0
 801476e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014776:	78fa      	ldrb	r2, [r7, #3]
 8014778:	4611      	mov	r1, r2
 801477a:	4618      	mov	r0, r3
 801477c:	f7f5 fb11 	bl	8009da2 <HAL_PCD_EP_SetStall>
 8014780:	4603      	mov	r3, r0
 8014782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014784:	7bfb      	ldrb	r3, [r7, #15]
 8014786:	4618      	mov	r0, r3
 8014788:	f000 f8de 	bl	8014948 <USBD_Get_USB_Status>
 801478c:	4603      	mov	r3, r0
 801478e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014790:	7bbb      	ldrb	r3, [r7, #14]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b084      	sub	sp, #16
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
 80147a2:	460b      	mov	r3, r1
 80147a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147a6:	2300      	movs	r3, #0
 80147a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147aa:	2300      	movs	r3, #0
 80147ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80147b4:	78fa      	ldrb	r2, [r7, #3]
 80147b6:	4611      	mov	r1, r2
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f5 fb55 	bl	8009e68 <HAL_PCD_EP_ClrStall>
 80147be:	4603      	mov	r3, r0
 80147c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80147c2:	7bfb      	ldrb	r3, [r7, #15]
 80147c4:	4618      	mov	r0, r3
 80147c6:	f000 f8bf 	bl	8014948 <USBD_Get_USB_Status>
 80147ca:	4603      	mov	r3, r0
 80147cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80147ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147d8:	b480      	push	{r7}
 80147da:	b085      	sub	sp, #20
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80147ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80147ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	da0b      	bge.n	801480c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80147f4:	78fb      	ldrb	r3, [r7, #3]
 80147f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80147fa:	68f9      	ldr	r1, [r7, #12]
 80147fc:	4613      	mov	r3, r2
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	4413      	add	r3, r2
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	440b      	add	r3, r1
 8014806:	3316      	adds	r3, #22
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	e00b      	b.n	8014824 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801480c:	78fb      	ldrb	r3, [r7, #3]
 801480e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014812:	68f9      	ldr	r1, [r7, #12]
 8014814:	4613      	mov	r3, r2
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	4413      	add	r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	440b      	add	r3, r1
 801481e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014822:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014824:	4618      	mov	r0, r3
 8014826:	3714      	adds	r7, #20
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr

08014830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	460b      	mov	r3, r1
 801483a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801483c:	2300      	movs	r3, #0
 801483e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014840:	2300      	movs	r3, #0
 8014842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801484a:	78fa      	ldrb	r2, [r7, #3]
 801484c:	4611      	mov	r1, r2
 801484e:	4618      	mov	r0, r3
 8014850:	f7f5 f944 	bl	8009adc <HAL_PCD_SetAddress>
 8014854:	4603      	mov	r3, r0
 8014856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014858:	7bfb      	ldrb	r3, [r7, #15]
 801485a:	4618      	mov	r0, r3
 801485c:	f000 f874 	bl	8014948 <USBD_Get_USB_Status>
 8014860:	4603      	mov	r3, r0
 8014862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014864:	7bbb      	ldrb	r3, [r7, #14]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801486e:	b580      	push	{r7, lr}
 8014870:	b086      	sub	sp, #24
 8014872:	af00      	add	r7, sp, #0
 8014874:	60f8      	str	r0, [r7, #12]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	603b      	str	r3, [r7, #0]
 801487a:	460b      	mov	r3, r1
 801487c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801487e:	2300      	movs	r3, #0
 8014880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801488c:	7af9      	ldrb	r1, [r7, #11]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	f7f5 fa4c 	bl	8009d2e <HAL_PCD_EP_Transmit>
 8014896:	4603      	mov	r3, r0
 8014898:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801489a:	7dfb      	ldrb	r3, [r7, #23]
 801489c:	4618      	mov	r0, r3
 801489e:	f000 f853 	bl	8014948 <USBD_Get_USB_Status>
 80148a2:	4603      	mov	r3, r0
 80148a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80148a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3718      	adds	r7, #24
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b086      	sub	sp, #24
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	607a      	str	r2, [r7, #4]
 80148ba:	603b      	str	r3, [r7, #0]
 80148bc:	460b      	mov	r3, r1
 80148be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148c0:	2300      	movs	r3, #0
 80148c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148c4:	2300      	movs	r3, #0
 80148c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80148ce:	7af9      	ldrb	r1, [r7, #11]
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	f7f5 f9d8 	bl	8009c88 <HAL_PCD_EP_Receive>
 80148d8:	4603      	mov	r3, r0
 80148da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80148dc:	7dfb      	ldrb	r3, [r7, #23]
 80148de:	4618      	mov	r0, r3
 80148e0:	f000 f832 	bl	8014948 <USBD_Get_USB_Status>
 80148e4:	4603      	mov	r3, r0
 80148e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80148e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3718      	adds	r7, #24
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b082      	sub	sp, #8
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	6078      	str	r0, [r7, #4]
 80148fa:	460b      	mov	r3, r1
 80148fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014904:	78fa      	ldrb	r2, [r7, #3]
 8014906:	4611      	mov	r1, r2
 8014908:	4618      	mov	r0, r3
 801490a:	f7f5 f9f8 	bl	8009cfe <HAL_PCD_EP_GetRxCount>
 801490e:	4603      	mov	r3, r0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014918:	b480      	push	{r7}
 801491a:	b083      	sub	sp, #12
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014920:	4b03      	ldr	r3, [pc, #12]	@ (8014930 <USBD_static_malloc+0x18>)
}
 8014922:	4618      	mov	r0, r3
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	240068f8 	.word	0x240068f8

08014934 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014934:	b480      	push	{r7}
 8014936:	b083      	sub	sp, #12
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801493c:	bf00      	nop
 801493e:	370c      	adds	r7, #12
 8014940:	46bd      	mov	sp, r7
 8014942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014946:	4770      	bx	lr

08014948 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014948:	b480      	push	{r7}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	4603      	mov	r3, r0
 8014950:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014956:	79fb      	ldrb	r3, [r7, #7]
 8014958:	2b03      	cmp	r3, #3
 801495a:	d817      	bhi.n	801498c <USBD_Get_USB_Status+0x44>
 801495c:	a201      	add	r2, pc, #4	@ (adr r2, 8014964 <USBD_Get_USB_Status+0x1c>)
 801495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014962:	bf00      	nop
 8014964:	08014975 	.word	0x08014975
 8014968:	0801497b 	.word	0x0801497b
 801496c:	08014981 	.word	0x08014981
 8014970:	08014987 	.word	0x08014987
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014974:	2300      	movs	r3, #0
 8014976:	73fb      	strb	r3, [r7, #15]
    break;
 8014978:	e00b      	b.n	8014992 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801497a:	2303      	movs	r3, #3
 801497c:	73fb      	strb	r3, [r7, #15]
    break;
 801497e:	e008      	b.n	8014992 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014980:	2301      	movs	r3, #1
 8014982:	73fb      	strb	r3, [r7, #15]
    break;
 8014984:	e005      	b.n	8014992 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014986:	2303      	movs	r3, #3
 8014988:	73fb      	strb	r3, [r7, #15]
    break;
 801498a:	e002      	b.n	8014992 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801498c:	2303      	movs	r3, #3
 801498e:	73fb      	strb	r3, [r7, #15]
    break;
 8014990:	bf00      	nop
  }
  return usb_status;
 8014992:	7bfb      	ldrb	r3, [r7, #15]
}
 8014994:	4618      	mov	r0, r3
 8014996:	3714      	adds	r7, #20
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr

080149a0 <atof>:
 80149a0:	2100      	movs	r1, #0
 80149a2:	f000 bdb3 	b.w	801550c <strtod>

080149a6 <sulp>:
 80149a6:	b570      	push	{r4, r5, r6, lr}
 80149a8:	4604      	mov	r4, r0
 80149aa:	460d      	mov	r5, r1
 80149ac:	4616      	mov	r6, r2
 80149ae:	ec45 4b10 	vmov	d0, r4, r5
 80149b2:	f003 f967 	bl	8017c84 <__ulp>
 80149b6:	b17e      	cbz	r6, 80149d8 <sulp+0x32>
 80149b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80149bc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dd09      	ble.n	80149d8 <sulp+0x32>
 80149c4:	051b      	lsls	r3, r3, #20
 80149c6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80149ca:	2000      	movs	r0, #0
 80149cc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80149d0:	ec41 0b17 	vmov	d7, r0, r1
 80149d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
 80149da:	0000      	movs	r0, r0
 80149dc:	0000      	movs	r0, r0
	...

080149e0 <_strtod_l>:
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	ed2d 8b0a 	vpush	{d8-d12}
 80149e8:	b097      	sub	sp, #92	@ 0x5c
 80149ea:	4688      	mov	r8, r1
 80149ec:	920e      	str	r2, [sp, #56]	@ 0x38
 80149ee:	2200      	movs	r2, #0
 80149f0:	9212      	str	r2, [sp, #72]	@ 0x48
 80149f2:	9005      	str	r0, [sp, #20]
 80149f4:	f04f 0a00 	mov.w	sl, #0
 80149f8:	f04f 0b00 	mov.w	fp, #0
 80149fc:	460a      	mov	r2, r1
 80149fe:	9211      	str	r2, [sp, #68]	@ 0x44
 8014a00:	7811      	ldrb	r1, [r2, #0]
 8014a02:	292b      	cmp	r1, #43	@ 0x2b
 8014a04:	d04c      	beq.n	8014aa0 <_strtod_l+0xc0>
 8014a06:	d839      	bhi.n	8014a7c <_strtod_l+0x9c>
 8014a08:	290d      	cmp	r1, #13
 8014a0a:	d833      	bhi.n	8014a74 <_strtod_l+0x94>
 8014a0c:	2908      	cmp	r1, #8
 8014a0e:	d833      	bhi.n	8014a78 <_strtod_l+0x98>
 8014a10:	2900      	cmp	r1, #0
 8014a12:	d03c      	beq.n	8014a8e <_strtod_l+0xae>
 8014a14:	2200      	movs	r2, #0
 8014a16:	9208      	str	r2, [sp, #32]
 8014a18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014a1a:	782a      	ldrb	r2, [r5, #0]
 8014a1c:	2a30      	cmp	r2, #48	@ 0x30
 8014a1e:	f040 80b5 	bne.w	8014b8c <_strtod_l+0x1ac>
 8014a22:	786a      	ldrb	r2, [r5, #1]
 8014a24:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014a28:	2a58      	cmp	r2, #88	@ 0x58
 8014a2a:	d170      	bne.n	8014b0e <_strtod_l+0x12e>
 8014a2c:	9302      	str	r3, [sp, #8]
 8014a2e:	9b08      	ldr	r3, [sp, #32]
 8014a30:	9301      	str	r3, [sp, #4]
 8014a32:	ab12      	add	r3, sp, #72	@ 0x48
 8014a34:	9300      	str	r3, [sp, #0]
 8014a36:	4a8b      	ldr	r2, [pc, #556]	@ (8014c64 <_strtod_l+0x284>)
 8014a38:	9805      	ldr	r0, [sp, #20]
 8014a3a:	ab13      	add	r3, sp, #76	@ 0x4c
 8014a3c:	a911      	add	r1, sp, #68	@ 0x44
 8014a3e:	f002 fa13 	bl	8016e68 <__gethex>
 8014a42:	f010 060f 	ands.w	r6, r0, #15
 8014a46:	4604      	mov	r4, r0
 8014a48:	d005      	beq.n	8014a56 <_strtod_l+0x76>
 8014a4a:	2e06      	cmp	r6, #6
 8014a4c:	d12a      	bne.n	8014aa4 <_strtod_l+0xc4>
 8014a4e:	3501      	adds	r5, #1
 8014a50:	2300      	movs	r3, #0
 8014a52:	9511      	str	r5, [sp, #68]	@ 0x44
 8014a54:	9308      	str	r3, [sp, #32]
 8014a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f040 852f 	bne.w	80154bc <_strtod_l+0xadc>
 8014a5e:	9b08      	ldr	r3, [sp, #32]
 8014a60:	ec4b ab10 	vmov	d0, sl, fp
 8014a64:	b1cb      	cbz	r3, 8014a9a <_strtod_l+0xba>
 8014a66:	eeb1 0b40 	vneg.f64	d0, d0
 8014a6a:	b017      	add	sp, #92	@ 0x5c
 8014a6c:	ecbd 8b0a 	vpop	{d8-d12}
 8014a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	2920      	cmp	r1, #32
 8014a76:	d1cd      	bne.n	8014a14 <_strtod_l+0x34>
 8014a78:	3201      	adds	r2, #1
 8014a7a:	e7c0      	b.n	80149fe <_strtod_l+0x1e>
 8014a7c:	292d      	cmp	r1, #45	@ 0x2d
 8014a7e:	d1c9      	bne.n	8014a14 <_strtod_l+0x34>
 8014a80:	2101      	movs	r1, #1
 8014a82:	9108      	str	r1, [sp, #32]
 8014a84:	1c51      	adds	r1, r2, #1
 8014a86:	9111      	str	r1, [sp, #68]	@ 0x44
 8014a88:	7852      	ldrb	r2, [r2, #1]
 8014a8a:	2a00      	cmp	r2, #0
 8014a8c:	d1c4      	bne.n	8014a18 <_strtod_l+0x38>
 8014a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a90:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f040 850f 	bne.w	80154b8 <_strtod_l+0xad8>
 8014a9a:	ec4b ab10 	vmov	d0, sl, fp
 8014a9e:	e7e4      	b.n	8014a6a <_strtod_l+0x8a>
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	e7ee      	b.n	8014a82 <_strtod_l+0xa2>
 8014aa4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014aa6:	b13a      	cbz	r2, 8014ab8 <_strtod_l+0xd8>
 8014aa8:	2135      	movs	r1, #53	@ 0x35
 8014aaa:	a814      	add	r0, sp, #80	@ 0x50
 8014aac:	f003 f9e1 	bl	8017e72 <__copybits>
 8014ab0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014ab2:	9805      	ldr	r0, [sp, #20]
 8014ab4:	f002 fdb2 	bl	801761c <_Bfree>
 8014ab8:	1e73      	subs	r3, r6, #1
 8014aba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014abc:	2b04      	cmp	r3, #4
 8014abe:	d806      	bhi.n	8014ace <_strtod_l+0xee>
 8014ac0:	e8df f003 	tbb	[pc, r3]
 8014ac4:	201d0314 	.word	0x201d0314
 8014ac8:	14          	.byte	0x14
 8014ac9:	00          	.byte	0x00
 8014aca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8014ace:	05e3      	lsls	r3, r4, #23
 8014ad0:	bf48      	it	mi
 8014ad2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014ada:	0d1b      	lsrs	r3, r3, #20
 8014adc:	051b      	lsls	r3, r3, #20
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1b9      	bne.n	8014a56 <_strtod_l+0x76>
 8014ae2:	f001 faeb 	bl	80160bc <__errno>
 8014ae6:	2322      	movs	r3, #34	@ 0x22
 8014ae8:	6003      	str	r3, [r0, #0]
 8014aea:	e7b4      	b.n	8014a56 <_strtod_l+0x76>
 8014aec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8014af0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014af4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014af8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014afc:	e7e7      	b.n	8014ace <_strtod_l+0xee>
 8014afe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8014c6c <_strtod_l+0x28c>
 8014b02:	e7e4      	b.n	8014ace <_strtod_l+0xee>
 8014b04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014b08:	f04f 3aff 	mov.w	sl, #4294967295
 8014b0c:	e7df      	b.n	8014ace <_strtod_l+0xee>
 8014b0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014b10:	1c5a      	adds	r2, r3, #1
 8014b12:	9211      	str	r2, [sp, #68]	@ 0x44
 8014b14:	785b      	ldrb	r3, [r3, #1]
 8014b16:	2b30      	cmp	r3, #48	@ 0x30
 8014b18:	d0f9      	beq.n	8014b0e <_strtod_l+0x12e>
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d09b      	beq.n	8014a56 <_strtod_l+0x76>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	2600      	movs	r6, #0
 8014b22:	9307      	str	r3, [sp, #28]
 8014b24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b28:	46b1      	mov	r9, r6
 8014b2a:	4635      	mov	r5, r6
 8014b2c:	220a      	movs	r2, #10
 8014b2e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014b30:	7804      	ldrb	r4, [r0, #0]
 8014b32:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8014b36:	b2d9      	uxtb	r1, r3
 8014b38:	2909      	cmp	r1, #9
 8014b3a:	d929      	bls.n	8014b90 <_strtod_l+0x1b0>
 8014b3c:	494a      	ldr	r1, [pc, #296]	@ (8014c68 <_strtod_l+0x288>)
 8014b3e:	2201      	movs	r2, #1
 8014b40:	f001 fa60 	bl	8016004 <strncmp>
 8014b44:	b378      	cbz	r0, 8014ba6 <_strtod_l+0x1c6>
 8014b46:	2000      	movs	r0, #0
 8014b48:	4622      	mov	r2, r4
 8014b4a:	462b      	mov	r3, r5
 8014b4c:	4607      	mov	r7, r0
 8014b4e:	9006      	str	r0, [sp, #24]
 8014b50:	2a65      	cmp	r2, #101	@ 0x65
 8014b52:	d001      	beq.n	8014b58 <_strtod_l+0x178>
 8014b54:	2a45      	cmp	r2, #69	@ 0x45
 8014b56:	d117      	bne.n	8014b88 <_strtod_l+0x1a8>
 8014b58:	b91b      	cbnz	r3, 8014b62 <_strtod_l+0x182>
 8014b5a:	9b07      	ldr	r3, [sp, #28]
 8014b5c:	4303      	orrs	r3, r0
 8014b5e:	d096      	beq.n	8014a8e <_strtod_l+0xae>
 8014b60:	2300      	movs	r3, #0
 8014b62:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8014b66:	f108 0201 	add.w	r2, r8, #1
 8014b6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8014b6c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014b70:	2a2b      	cmp	r2, #43	@ 0x2b
 8014b72:	d06b      	beq.n	8014c4c <_strtod_l+0x26c>
 8014b74:	2a2d      	cmp	r2, #45	@ 0x2d
 8014b76:	d071      	beq.n	8014c5c <_strtod_l+0x27c>
 8014b78:	f04f 0e00 	mov.w	lr, #0
 8014b7c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014b80:	2c09      	cmp	r4, #9
 8014b82:	d979      	bls.n	8014c78 <_strtod_l+0x298>
 8014b84:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014b88:	2400      	movs	r4, #0
 8014b8a:	e094      	b.n	8014cb6 <_strtod_l+0x2d6>
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	e7c7      	b.n	8014b20 <_strtod_l+0x140>
 8014b90:	2d08      	cmp	r5, #8
 8014b92:	f100 0001 	add.w	r0, r0, #1
 8014b96:	bfd4      	ite	le
 8014b98:	fb02 3909 	mlale	r9, r2, r9, r3
 8014b9c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8014ba0:	3501      	adds	r5, #1
 8014ba2:	9011      	str	r0, [sp, #68]	@ 0x44
 8014ba4:	e7c3      	b.n	8014b2e <_strtod_l+0x14e>
 8014ba6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014ba8:	1c5a      	adds	r2, r3, #1
 8014baa:	9211      	str	r2, [sp, #68]	@ 0x44
 8014bac:	785a      	ldrb	r2, [r3, #1]
 8014bae:	b375      	cbz	r5, 8014c0e <_strtod_l+0x22e>
 8014bb0:	4607      	mov	r7, r0
 8014bb2:	462b      	mov	r3, r5
 8014bb4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014bb8:	2909      	cmp	r1, #9
 8014bba:	d913      	bls.n	8014be4 <_strtod_l+0x204>
 8014bbc:	2101      	movs	r1, #1
 8014bbe:	9106      	str	r1, [sp, #24]
 8014bc0:	e7c6      	b.n	8014b50 <_strtod_l+0x170>
 8014bc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014bc4:	1c5a      	adds	r2, r3, #1
 8014bc6:	9211      	str	r2, [sp, #68]	@ 0x44
 8014bc8:	785a      	ldrb	r2, [r3, #1]
 8014bca:	3001      	adds	r0, #1
 8014bcc:	2a30      	cmp	r2, #48	@ 0x30
 8014bce:	d0f8      	beq.n	8014bc2 <_strtod_l+0x1e2>
 8014bd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014bd4:	2b08      	cmp	r3, #8
 8014bd6:	f200 8476 	bhi.w	80154c6 <_strtod_l+0xae6>
 8014bda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014bdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8014bde:	4607      	mov	r7, r0
 8014be0:	2000      	movs	r0, #0
 8014be2:	4603      	mov	r3, r0
 8014be4:	3a30      	subs	r2, #48	@ 0x30
 8014be6:	f100 0101 	add.w	r1, r0, #1
 8014bea:	d023      	beq.n	8014c34 <_strtod_l+0x254>
 8014bec:	440f      	add	r7, r1
 8014bee:	eb00 0c03 	add.w	ip, r0, r3
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	240a      	movs	r4, #10
 8014bf6:	4561      	cmp	r1, ip
 8014bf8:	d10b      	bne.n	8014c12 <_strtod_l+0x232>
 8014bfa:	1c5c      	adds	r4, r3, #1
 8014bfc:	4403      	add	r3, r0
 8014bfe:	2b08      	cmp	r3, #8
 8014c00:	4404      	add	r4, r0
 8014c02:	dc11      	bgt.n	8014c28 <_strtod_l+0x248>
 8014c04:	230a      	movs	r3, #10
 8014c06:	fb03 2909 	mla	r9, r3, r9, r2
 8014c0a:	2100      	movs	r1, #0
 8014c0c:	e013      	b.n	8014c36 <_strtod_l+0x256>
 8014c0e:	4628      	mov	r0, r5
 8014c10:	e7dc      	b.n	8014bcc <_strtod_l+0x1ec>
 8014c12:	2908      	cmp	r1, #8
 8014c14:	f101 0101 	add.w	r1, r1, #1
 8014c18:	dc02      	bgt.n	8014c20 <_strtod_l+0x240>
 8014c1a:	fb04 f909 	mul.w	r9, r4, r9
 8014c1e:	e7ea      	b.n	8014bf6 <_strtod_l+0x216>
 8014c20:	2910      	cmp	r1, #16
 8014c22:	bfd8      	it	le
 8014c24:	4366      	mulle	r6, r4
 8014c26:	e7e6      	b.n	8014bf6 <_strtod_l+0x216>
 8014c28:	2b0f      	cmp	r3, #15
 8014c2a:	dcee      	bgt.n	8014c0a <_strtod_l+0x22a>
 8014c2c:	230a      	movs	r3, #10
 8014c2e:	fb03 2606 	mla	r6, r3, r6, r2
 8014c32:	e7ea      	b.n	8014c0a <_strtod_l+0x22a>
 8014c34:	461c      	mov	r4, r3
 8014c36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014c38:	1c5a      	adds	r2, r3, #1
 8014c3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8014c3c:	785a      	ldrb	r2, [r3, #1]
 8014c3e:	4608      	mov	r0, r1
 8014c40:	4623      	mov	r3, r4
 8014c42:	e7b7      	b.n	8014bb4 <_strtod_l+0x1d4>
 8014c44:	2301      	movs	r3, #1
 8014c46:	2700      	movs	r7, #0
 8014c48:	9306      	str	r3, [sp, #24]
 8014c4a:	e786      	b.n	8014b5a <_strtod_l+0x17a>
 8014c4c:	f04f 0e00 	mov.w	lr, #0
 8014c50:	f108 0202 	add.w	r2, r8, #2
 8014c54:	9211      	str	r2, [sp, #68]	@ 0x44
 8014c56:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014c5a:	e78f      	b.n	8014b7c <_strtod_l+0x19c>
 8014c5c:	f04f 0e01 	mov.w	lr, #1
 8014c60:	e7f6      	b.n	8014c50 <_strtod_l+0x270>
 8014c62:	bf00      	nop
 8014c64:	080198dc 	.word	0x080198dc
 8014c68:	080198c4 	.word	0x080198c4
 8014c6c:	7ff00000 	.word	0x7ff00000
 8014c70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c72:	1c54      	adds	r4, r2, #1
 8014c74:	9411      	str	r4, [sp, #68]	@ 0x44
 8014c76:	7852      	ldrb	r2, [r2, #1]
 8014c78:	2a30      	cmp	r2, #48	@ 0x30
 8014c7a:	d0f9      	beq.n	8014c70 <_strtod_l+0x290>
 8014c7c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8014c80:	2c08      	cmp	r4, #8
 8014c82:	d881      	bhi.n	8014b88 <_strtod_l+0x1a8>
 8014c84:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8014c88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c8c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c8e:	1c51      	adds	r1, r2, #1
 8014c90:	9111      	str	r1, [sp, #68]	@ 0x44
 8014c92:	7852      	ldrb	r2, [r2, #1]
 8014c94:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014c98:	2c09      	cmp	r4, #9
 8014c9a:	d938      	bls.n	8014d0e <_strtod_l+0x32e>
 8014c9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014c9e:	1b0c      	subs	r4, r1, r4
 8014ca0:	2c08      	cmp	r4, #8
 8014ca2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8014ca6:	dc02      	bgt.n	8014cae <_strtod_l+0x2ce>
 8014ca8:	4564      	cmp	r4, ip
 8014caa:	bfa8      	it	ge
 8014cac:	4664      	movge	r4, ip
 8014cae:	f1be 0f00 	cmp.w	lr, #0
 8014cb2:	d000      	beq.n	8014cb6 <_strtod_l+0x2d6>
 8014cb4:	4264      	negs	r4, r4
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d14e      	bne.n	8014d58 <_strtod_l+0x378>
 8014cba:	9b07      	ldr	r3, [sp, #28]
 8014cbc:	4318      	orrs	r0, r3
 8014cbe:	f47f aeca 	bne.w	8014a56 <_strtod_l+0x76>
 8014cc2:	9b06      	ldr	r3, [sp, #24]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f47f aee2 	bne.w	8014a8e <_strtod_l+0xae>
 8014cca:	2a69      	cmp	r2, #105	@ 0x69
 8014ccc:	d027      	beq.n	8014d1e <_strtod_l+0x33e>
 8014cce:	dc24      	bgt.n	8014d1a <_strtod_l+0x33a>
 8014cd0:	2a49      	cmp	r2, #73	@ 0x49
 8014cd2:	d024      	beq.n	8014d1e <_strtod_l+0x33e>
 8014cd4:	2a4e      	cmp	r2, #78	@ 0x4e
 8014cd6:	f47f aeda 	bne.w	8014a8e <_strtod_l+0xae>
 8014cda:	4997      	ldr	r1, [pc, #604]	@ (8014f38 <_strtod_l+0x558>)
 8014cdc:	a811      	add	r0, sp, #68	@ 0x44
 8014cde:	f002 fae5 	bl	80172ac <__match>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	f43f aed3 	beq.w	8014a8e <_strtod_l+0xae>
 8014ce8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	2b28      	cmp	r3, #40	@ 0x28
 8014cee:	d12d      	bne.n	8014d4c <_strtod_l+0x36c>
 8014cf0:	4992      	ldr	r1, [pc, #584]	@ (8014f3c <_strtod_l+0x55c>)
 8014cf2:	aa14      	add	r2, sp, #80	@ 0x50
 8014cf4:	a811      	add	r0, sp, #68	@ 0x44
 8014cf6:	f002 faed 	bl	80172d4 <__hexnan>
 8014cfa:	2805      	cmp	r0, #5
 8014cfc:	d126      	bne.n	8014d4c <_strtod_l+0x36c>
 8014cfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014d00:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8014d04:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8014d08:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014d0c:	e6a3      	b.n	8014a56 <_strtod_l+0x76>
 8014d0e:	240a      	movs	r4, #10
 8014d10:	fb04 2c0c 	mla	ip, r4, ip, r2
 8014d14:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8014d18:	e7b8      	b.n	8014c8c <_strtod_l+0x2ac>
 8014d1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8014d1c:	e7db      	b.n	8014cd6 <_strtod_l+0x2f6>
 8014d1e:	4988      	ldr	r1, [pc, #544]	@ (8014f40 <_strtod_l+0x560>)
 8014d20:	a811      	add	r0, sp, #68	@ 0x44
 8014d22:	f002 fac3 	bl	80172ac <__match>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	f43f aeb1 	beq.w	8014a8e <_strtod_l+0xae>
 8014d2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014d2e:	4985      	ldr	r1, [pc, #532]	@ (8014f44 <_strtod_l+0x564>)
 8014d30:	3b01      	subs	r3, #1
 8014d32:	a811      	add	r0, sp, #68	@ 0x44
 8014d34:	9311      	str	r3, [sp, #68]	@ 0x44
 8014d36:	f002 fab9 	bl	80172ac <__match>
 8014d3a:	b910      	cbnz	r0, 8014d42 <_strtod_l+0x362>
 8014d3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014d3e:	3301      	adds	r3, #1
 8014d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8014d42:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8014f58 <_strtod_l+0x578>
 8014d46:	f04f 0a00 	mov.w	sl, #0
 8014d4a:	e684      	b.n	8014a56 <_strtod_l+0x76>
 8014d4c:	487e      	ldr	r0, [pc, #504]	@ (8014f48 <_strtod_l+0x568>)
 8014d4e:	f001 f9f3 	bl	8016138 <nan>
 8014d52:	ec5b ab10 	vmov	sl, fp, d0
 8014d56:	e67e      	b.n	8014a56 <_strtod_l+0x76>
 8014d58:	ee07 9a90 	vmov	s15, r9
 8014d5c:	1be2      	subs	r2, r4, r7
 8014d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d62:	2d00      	cmp	r5, #0
 8014d64:	bf08      	it	eq
 8014d66:	461d      	moveq	r5, r3
 8014d68:	2b10      	cmp	r3, #16
 8014d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	bfa8      	it	ge
 8014d70:	2210      	movge	r2, #16
 8014d72:	2b09      	cmp	r3, #9
 8014d74:	ec5b ab17 	vmov	sl, fp, d7
 8014d78:	dc15      	bgt.n	8014da6 <_strtod_l+0x3c6>
 8014d7a:	1be1      	subs	r1, r4, r7
 8014d7c:	2900      	cmp	r1, #0
 8014d7e:	f43f ae6a 	beq.w	8014a56 <_strtod_l+0x76>
 8014d82:	eba4 0107 	sub.w	r1, r4, r7
 8014d86:	dd72      	ble.n	8014e6e <_strtod_l+0x48e>
 8014d88:	2916      	cmp	r1, #22
 8014d8a:	dc59      	bgt.n	8014e40 <_strtod_l+0x460>
 8014d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8014f4c <_strtod_l+0x56c>)
 8014d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d94:	ed93 7b00 	vldr	d7, [r3]
 8014d98:	ec4b ab16 	vmov	d6, sl, fp
 8014d9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014da0:	ec5b ab17 	vmov	sl, fp, d7
 8014da4:	e657      	b.n	8014a56 <_strtod_l+0x76>
 8014da6:	4969      	ldr	r1, [pc, #420]	@ (8014f4c <_strtod_l+0x56c>)
 8014da8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014dac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8014db0:	ee06 6a90 	vmov	s13, r6
 8014db4:	2b0f      	cmp	r3, #15
 8014db6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014dba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014dbe:	ec5b ab16 	vmov	sl, fp, d6
 8014dc2:	ddda      	ble.n	8014d7a <_strtod_l+0x39a>
 8014dc4:	1a9a      	subs	r2, r3, r2
 8014dc6:	1be1      	subs	r1, r4, r7
 8014dc8:	440a      	add	r2, r1
 8014dca:	2a00      	cmp	r2, #0
 8014dcc:	f340 8094 	ble.w	8014ef8 <_strtod_l+0x518>
 8014dd0:	f012 000f 	ands.w	r0, r2, #15
 8014dd4:	d00a      	beq.n	8014dec <_strtod_l+0x40c>
 8014dd6:	495d      	ldr	r1, [pc, #372]	@ (8014f4c <_strtod_l+0x56c>)
 8014dd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014ddc:	ed91 7b00 	vldr	d7, [r1]
 8014de0:	ec4b ab16 	vmov	d6, sl, fp
 8014de4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014de8:	ec5b ab17 	vmov	sl, fp, d7
 8014dec:	f032 020f 	bics.w	r2, r2, #15
 8014df0:	d073      	beq.n	8014eda <_strtod_l+0x4fa>
 8014df2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8014df6:	dd47      	ble.n	8014e88 <_strtod_l+0x4a8>
 8014df8:	2400      	movs	r4, #0
 8014dfa:	4625      	mov	r5, r4
 8014dfc:	9407      	str	r4, [sp, #28]
 8014dfe:	4626      	mov	r6, r4
 8014e00:	9a05      	ldr	r2, [sp, #20]
 8014e02:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014f58 <_strtod_l+0x578>
 8014e06:	2322      	movs	r3, #34	@ 0x22
 8014e08:	6013      	str	r3, [r2, #0]
 8014e0a:	f04f 0a00 	mov.w	sl, #0
 8014e0e:	9b07      	ldr	r3, [sp, #28]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	f43f ae20 	beq.w	8014a56 <_strtod_l+0x76>
 8014e16:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014e18:	9805      	ldr	r0, [sp, #20]
 8014e1a:	f002 fbff 	bl	801761c <_Bfree>
 8014e1e:	9805      	ldr	r0, [sp, #20]
 8014e20:	4631      	mov	r1, r6
 8014e22:	f002 fbfb 	bl	801761c <_Bfree>
 8014e26:	9805      	ldr	r0, [sp, #20]
 8014e28:	4629      	mov	r1, r5
 8014e2a:	f002 fbf7 	bl	801761c <_Bfree>
 8014e2e:	9907      	ldr	r1, [sp, #28]
 8014e30:	9805      	ldr	r0, [sp, #20]
 8014e32:	f002 fbf3 	bl	801761c <_Bfree>
 8014e36:	9805      	ldr	r0, [sp, #20]
 8014e38:	4621      	mov	r1, r4
 8014e3a:	f002 fbef 	bl	801761c <_Bfree>
 8014e3e:	e60a      	b.n	8014a56 <_strtod_l+0x76>
 8014e40:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8014e44:	1be0      	subs	r0, r4, r7
 8014e46:	4281      	cmp	r1, r0
 8014e48:	dbbc      	blt.n	8014dc4 <_strtod_l+0x3e4>
 8014e4a:	4a40      	ldr	r2, [pc, #256]	@ (8014f4c <_strtod_l+0x56c>)
 8014e4c:	f1c3 030f 	rsb	r3, r3, #15
 8014e50:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014e54:	ed91 7b00 	vldr	d7, [r1]
 8014e58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014e5a:	ec4b ab16 	vmov	d6, sl, fp
 8014e5e:	1acb      	subs	r3, r1, r3
 8014e60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014e64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e68:	ed92 6b00 	vldr	d6, [r2]
 8014e6c:	e796      	b.n	8014d9c <_strtod_l+0x3bc>
 8014e6e:	3116      	adds	r1, #22
 8014e70:	dba8      	blt.n	8014dc4 <_strtod_l+0x3e4>
 8014e72:	4b36      	ldr	r3, [pc, #216]	@ (8014f4c <_strtod_l+0x56c>)
 8014e74:	1b3c      	subs	r4, r7, r4
 8014e76:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014e7a:	ed94 7b00 	vldr	d7, [r4]
 8014e7e:	ec4b ab16 	vmov	d6, sl, fp
 8014e82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014e86:	e78b      	b.n	8014da0 <_strtod_l+0x3c0>
 8014e88:	2000      	movs	r0, #0
 8014e8a:	ec4b ab17 	vmov	d7, sl, fp
 8014e8e:	4e30      	ldr	r6, [pc, #192]	@ (8014f50 <_strtod_l+0x570>)
 8014e90:	1112      	asrs	r2, r2, #4
 8014e92:	4601      	mov	r1, r0
 8014e94:	2a01      	cmp	r2, #1
 8014e96:	dc23      	bgt.n	8014ee0 <_strtod_l+0x500>
 8014e98:	b108      	cbz	r0, 8014e9e <_strtod_l+0x4be>
 8014e9a:	ec5b ab17 	vmov	sl, fp, d7
 8014e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8014f50 <_strtod_l+0x570>)
 8014ea0:	482c      	ldr	r0, [pc, #176]	@ (8014f54 <_strtod_l+0x574>)
 8014ea2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014ea6:	ed92 7b00 	vldr	d7, [r2]
 8014eaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014eae:	ec4b ab16 	vmov	d6, sl, fp
 8014eb2:	4a29      	ldr	r2, [pc, #164]	@ (8014f58 <_strtod_l+0x578>)
 8014eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014eb8:	ee17 1a90 	vmov	r1, s15
 8014ebc:	400a      	ands	r2, r1
 8014ebe:	4282      	cmp	r2, r0
 8014ec0:	ec5b ab17 	vmov	sl, fp, d7
 8014ec4:	d898      	bhi.n	8014df8 <_strtod_l+0x418>
 8014ec6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8014eca:	4282      	cmp	r2, r0
 8014ecc:	bf86      	itte	hi
 8014ece:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8014f5c <_strtod_l+0x57c>
 8014ed2:	f04f 3aff 	movhi.w	sl, #4294967295
 8014ed6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8014eda:	2200      	movs	r2, #0
 8014edc:	9206      	str	r2, [sp, #24]
 8014ede:	e076      	b.n	8014fce <_strtod_l+0x5ee>
 8014ee0:	f012 0f01 	tst.w	r2, #1
 8014ee4:	d004      	beq.n	8014ef0 <_strtod_l+0x510>
 8014ee6:	ed96 6b00 	vldr	d6, [r6]
 8014eea:	2001      	movs	r0, #1
 8014eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ef0:	3101      	adds	r1, #1
 8014ef2:	1052      	asrs	r2, r2, #1
 8014ef4:	3608      	adds	r6, #8
 8014ef6:	e7cd      	b.n	8014e94 <_strtod_l+0x4b4>
 8014ef8:	d0ef      	beq.n	8014eda <_strtod_l+0x4fa>
 8014efa:	4252      	negs	r2, r2
 8014efc:	f012 000f 	ands.w	r0, r2, #15
 8014f00:	d00a      	beq.n	8014f18 <_strtod_l+0x538>
 8014f02:	4912      	ldr	r1, [pc, #72]	@ (8014f4c <_strtod_l+0x56c>)
 8014f04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014f08:	ed91 7b00 	vldr	d7, [r1]
 8014f0c:	ec4b ab16 	vmov	d6, sl, fp
 8014f10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014f14:	ec5b ab17 	vmov	sl, fp, d7
 8014f18:	1112      	asrs	r2, r2, #4
 8014f1a:	d0de      	beq.n	8014eda <_strtod_l+0x4fa>
 8014f1c:	2a1f      	cmp	r2, #31
 8014f1e:	dd1f      	ble.n	8014f60 <_strtod_l+0x580>
 8014f20:	2400      	movs	r4, #0
 8014f22:	4625      	mov	r5, r4
 8014f24:	9407      	str	r4, [sp, #28]
 8014f26:	4626      	mov	r6, r4
 8014f28:	9a05      	ldr	r2, [sp, #20]
 8014f2a:	2322      	movs	r3, #34	@ 0x22
 8014f2c:	f04f 0a00 	mov.w	sl, #0
 8014f30:	f04f 0b00 	mov.w	fp, #0
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	e76a      	b.n	8014e0e <_strtod_l+0x42e>
 8014f38:	08019a26 	.word	0x08019a26
 8014f3c:	080198c8 	.word	0x080198c8
 8014f40:	08019a1e 	.word	0x08019a1e
 8014f44:	08019a58 	.word	0x08019a58
 8014f48:	08019ce4 	.word	0x08019ce4
 8014f4c:	08019bd0 	.word	0x08019bd0
 8014f50:	08019ba8 	.word	0x08019ba8
 8014f54:	7ca00000 	.word	0x7ca00000
 8014f58:	7ff00000 	.word	0x7ff00000
 8014f5c:	7fefffff 	.word	0x7fefffff
 8014f60:	f012 0110 	ands.w	r1, r2, #16
 8014f64:	bf18      	it	ne
 8014f66:	216a      	movne	r1, #106	@ 0x6a
 8014f68:	9106      	str	r1, [sp, #24]
 8014f6a:	ec4b ab17 	vmov	d7, sl, fp
 8014f6e:	49b0      	ldr	r1, [pc, #704]	@ (8015230 <_strtod_l+0x850>)
 8014f70:	2000      	movs	r0, #0
 8014f72:	07d6      	lsls	r6, r2, #31
 8014f74:	d504      	bpl.n	8014f80 <_strtod_l+0x5a0>
 8014f76:	ed91 6b00 	vldr	d6, [r1]
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f80:	1052      	asrs	r2, r2, #1
 8014f82:	f101 0108 	add.w	r1, r1, #8
 8014f86:	d1f4      	bne.n	8014f72 <_strtod_l+0x592>
 8014f88:	b108      	cbz	r0, 8014f8e <_strtod_l+0x5ae>
 8014f8a:	ec5b ab17 	vmov	sl, fp, d7
 8014f8e:	9a06      	ldr	r2, [sp, #24]
 8014f90:	b1b2      	cbz	r2, 8014fc0 <_strtod_l+0x5e0>
 8014f92:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8014f96:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8014f9a:	2a00      	cmp	r2, #0
 8014f9c:	4658      	mov	r0, fp
 8014f9e:	dd0f      	ble.n	8014fc0 <_strtod_l+0x5e0>
 8014fa0:	2a1f      	cmp	r2, #31
 8014fa2:	dd55      	ble.n	8015050 <_strtod_l+0x670>
 8014fa4:	2a34      	cmp	r2, #52	@ 0x34
 8014fa6:	bfde      	ittt	le
 8014fa8:	f04f 32ff 	movle.w	r2, #4294967295
 8014fac:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8014fb0:	408a      	lslle	r2, r1
 8014fb2:	f04f 0a00 	mov.w	sl, #0
 8014fb6:	bfcc      	ite	gt
 8014fb8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014fbc:	ea02 0b00 	andle.w	fp, r2, r0
 8014fc0:	ec4b ab17 	vmov	d7, sl, fp
 8014fc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fcc:	d0a8      	beq.n	8014f20 <_strtod_l+0x540>
 8014fce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014fd0:	9805      	ldr	r0, [sp, #20]
 8014fd2:	f8cd 9000 	str.w	r9, [sp]
 8014fd6:	462a      	mov	r2, r5
 8014fd8:	f002 fb88 	bl	80176ec <__s2b>
 8014fdc:	9007      	str	r0, [sp, #28]
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	f43f af0a 	beq.w	8014df8 <_strtod_l+0x418>
 8014fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fe6:	1b3f      	subs	r7, r7, r4
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	bfb4      	ite	lt
 8014fec:	463b      	movlt	r3, r7
 8014fee:	2300      	movge	r3, #0
 8014ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ff4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8015220 <_strtod_l+0x840>
 8014ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ffc:	2400      	movs	r4, #0
 8014ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8015000:	4625      	mov	r5, r4
 8015002:	9b07      	ldr	r3, [sp, #28]
 8015004:	9805      	ldr	r0, [sp, #20]
 8015006:	6859      	ldr	r1, [r3, #4]
 8015008:	f002 fac8 	bl	801759c <_Balloc>
 801500c:	4606      	mov	r6, r0
 801500e:	2800      	cmp	r0, #0
 8015010:	f43f aef6 	beq.w	8014e00 <_strtod_l+0x420>
 8015014:	9b07      	ldr	r3, [sp, #28]
 8015016:	691a      	ldr	r2, [r3, #16]
 8015018:	ec4b ab19 	vmov	d9, sl, fp
 801501c:	3202      	adds	r2, #2
 801501e:	f103 010c 	add.w	r1, r3, #12
 8015022:	0092      	lsls	r2, r2, #2
 8015024:	300c      	adds	r0, #12
 8015026:	f001 f876 	bl	8016116 <memcpy>
 801502a:	eeb0 0b49 	vmov.f64	d0, d9
 801502e:	9805      	ldr	r0, [sp, #20]
 8015030:	aa14      	add	r2, sp, #80	@ 0x50
 8015032:	a913      	add	r1, sp, #76	@ 0x4c
 8015034:	f002 fe96 	bl	8017d64 <__d2b>
 8015038:	9012      	str	r0, [sp, #72]	@ 0x48
 801503a:	2800      	cmp	r0, #0
 801503c:	f43f aee0 	beq.w	8014e00 <_strtod_l+0x420>
 8015040:	9805      	ldr	r0, [sp, #20]
 8015042:	2101      	movs	r1, #1
 8015044:	f002 fbe8 	bl	8017818 <__i2b>
 8015048:	4605      	mov	r5, r0
 801504a:	b940      	cbnz	r0, 801505e <_strtod_l+0x67e>
 801504c:	2500      	movs	r5, #0
 801504e:	e6d7      	b.n	8014e00 <_strtod_l+0x420>
 8015050:	f04f 31ff 	mov.w	r1, #4294967295
 8015054:	fa01 f202 	lsl.w	r2, r1, r2
 8015058:	ea02 0a0a 	and.w	sl, r2, sl
 801505c:	e7b0      	b.n	8014fc0 <_strtod_l+0x5e0>
 801505e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015060:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015062:	2f00      	cmp	r7, #0
 8015064:	bfab      	itete	ge
 8015066:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015068:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801506a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801506e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015072:	bfac      	ite	ge
 8015074:	eb07 0903 	addge.w	r9, r7, r3
 8015078:	eba3 0807 	sublt.w	r8, r3, r7
 801507c:	9b06      	ldr	r3, [sp, #24]
 801507e:	1aff      	subs	r7, r7, r3
 8015080:	4417      	add	r7, r2
 8015082:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015086:	4a6b      	ldr	r2, [pc, #428]	@ (8015234 <_strtod_l+0x854>)
 8015088:	3f01      	subs	r7, #1
 801508a:	4297      	cmp	r7, r2
 801508c:	da51      	bge.n	8015132 <_strtod_l+0x752>
 801508e:	1bd1      	subs	r1, r2, r7
 8015090:	291f      	cmp	r1, #31
 8015092:	eba3 0301 	sub.w	r3, r3, r1
 8015096:	f04f 0201 	mov.w	r2, #1
 801509a:	dc3e      	bgt.n	801511a <_strtod_l+0x73a>
 801509c:	408a      	lsls	r2, r1
 801509e:	920c      	str	r2, [sp, #48]	@ 0x30
 80150a0:	2200      	movs	r2, #0
 80150a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80150a4:	eb09 0703 	add.w	r7, r9, r3
 80150a8:	4498      	add	r8, r3
 80150aa:	9b06      	ldr	r3, [sp, #24]
 80150ac:	45b9      	cmp	r9, r7
 80150ae:	4498      	add	r8, r3
 80150b0:	464b      	mov	r3, r9
 80150b2:	bfa8      	it	ge
 80150b4:	463b      	movge	r3, r7
 80150b6:	4543      	cmp	r3, r8
 80150b8:	bfa8      	it	ge
 80150ba:	4643      	movge	r3, r8
 80150bc:	2b00      	cmp	r3, #0
 80150be:	bfc2      	ittt	gt
 80150c0:	1aff      	subgt	r7, r7, r3
 80150c2:	eba8 0803 	subgt.w	r8, r8, r3
 80150c6:	eba9 0903 	subgt.w	r9, r9, r3
 80150ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	dd16      	ble.n	80150fe <_strtod_l+0x71e>
 80150d0:	4629      	mov	r1, r5
 80150d2:	9805      	ldr	r0, [sp, #20]
 80150d4:	461a      	mov	r2, r3
 80150d6:	f002 fc5f 	bl	8017998 <__pow5mult>
 80150da:	4605      	mov	r5, r0
 80150dc:	2800      	cmp	r0, #0
 80150de:	d0b5      	beq.n	801504c <_strtod_l+0x66c>
 80150e0:	4601      	mov	r1, r0
 80150e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80150e4:	9805      	ldr	r0, [sp, #20]
 80150e6:	f002 fbad 	bl	8017844 <__multiply>
 80150ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80150ec:	2800      	cmp	r0, #0
 80150ee:	f43f ae87 	beq.w	8014e00 <_strtod_l+0x420>
 80150f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80150f4:	9805      	ldr	r0, [sp, #20]
 80150f6:	f002 fa91 	bl	801761c <_Bfree>
 80150fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80150fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80150fe:	2f00      	cmp	r7, #0
 8015100:	dc1b      	bgt.n	801513a <_strtod_l+0x75a>
 8015102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015104:	2b00      	cmp	r3, #0
 8015106:	dd21      	ble.n	801514c <_strtod_l+0x76c>
 8015108:	4631      	mov	r1, r6
 801510a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801510c:	9805      	ldr	r0, [sp, #20]
 801510e:	f002 fc43 	bl	8017998 <__pow5mult>
 8015112:	4606      	mov	r6, r0
 8015114:	b9d0      	cbnz	r0, 801514c <_strtod_l+0x76c>
 8015116:	2600      	movs	r6, #0
 8015118:	e672      	b.n	8014e00 <_strtod_l+0x420>
 801511a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801511e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015122:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8015126:	37e2      	adds	r7, #226	@ 0xe2
 8015128:	fa02 f107 	lsl.w	r1, r2, r7
 801512c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801512e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015130:	e7b8      	b.n	80150a4 <_strtod_l+0x6c4>
 8015132:	2200      	movs	r2, #0
 8015134:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015136:	2201      	movs	r2, #1
 8015138:	e7f9      	b.n	801512e <_strtod_l+0x74e>
 801513a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801513c:	9805      	ldr	r0, [sp, #20]
 801513e:	463a      	mov	r2, r7
 8015140:	f002 fc84 	bl	8017a4c <__lshift>
 8015144:	9012      	str	r0, [sp, #72]	@ 0x48
 8015146:	2800      	cmp	r0, #0
 8015148:	d1db      	bne.n	8015102 <_strtod_l+0x722>
 801514a:	e659      	b.n	8014e00 <_strtod_l+0x420>
 801514c:	f1b8 0f00 	cmp.w	r8, #0
 8015150:	dd07      	ble.n	8015162 <_strtod_l+0x782>
 8015152:	4631      	mov	r1, r6
 8015154:	9805      	ldr	r0, [sp, #20]
 8015156:	4642      	mov	r2, r8
 8015158:	f002 fc78 	bl	8017a4c <__lshift>
 801515c:	4606      	mov	r6, r0
 801515e:	2800      	cmp	r0, #0
 8015160:	d0d9      	beq.n	8015116 <_strtod_l+0x736>
 8015162:	f1b9 0f00 	cmp.w	r9, #0
 8015166:	dd08      	ble.n	801517a <_strtod_l+0x79a>
 8015168:	4629      	mov	r1, r5
 801516a:	9805      	ldr	r0, [sp, #20]
 801516c:	464a      	mov	r2, r9
 801516e:	f002 fc6d 	bl	8017a4c <__lshift>
 8015172:	4605      	mov	r5, r0
 8015174:	2800      	cmp	r0, #0
 8015176:	f43f ae43 	beq.w	8014e00 <_strtod_l+0x420>
 801517a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801517c:	9805      	ldr	r0, [sp, #20]
 801517e:	4632      	mov	r2, r6
 8015180:	f002 fcec 	bl	8017b5c <__mdiff>
 8015184:	4604      	mov	r4, r0
 8015186:	2800      	cmp	r0, #0
 8015188:	f43f ae3a 	beq.w	8014e00 <_strtod_l+0x420>
 801518c:	2300      	movs	r3, #0
 801518e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015192:	60c3      	str	r3, [r0, #12]
 8015194:	4629      	mov	r1, r5
 8015196:	f002 fcc5 	bl	8017b24 <__mcmp>
 801519a:	2800      	cmp	r0, #0
 801519c:	da4e      	bge.n	801523c <_strtod_l+0x85c>
 801519e:	ea58 080a 	orrs.w	r8, r8, sl
 80151a2:	d174      	bne.n	801528e <_strtod_l+0x8ae>
 80151a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d170      	bne.n	801528e <_strtod_l+0x8ae>
 80151ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80151b0:	0d1b      	lsrs	r3, r3, #20
 80151b2:	051b      	lsls	r3, r3, #20
 80151b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80151b8:	d969      	bls.n	801528e <_strtod_l+0x8ae>
 80151ba:	6963      	ldr	r3, [r4, #20]
 80151bc:	b913      	cbnz	r3, 80151c4 <_strtod_l+0x7e4>
 80151be:	6923      	ldr	r3, [r4, #16]
 80151c0:	2b01      	cmp	r3, #1
 80151c2:	dd64      	ble.n	801528e <_strtod_l+0x8ae>
 80151c4:	4621      	mov	r1, r4
 80151c6:	2201      	movs	r2, #1
 80151c8:	9805      	ldr	r0, [sp, #20]
 80151ca:	f002 fc3f 	bl	8017a4c <__lshift>
 80151ce:	4629      	mov	r1, r5
 80151d0:	4604      	mov	r4, r0
 80151d2:	f002 fca7 	bl	8017b24 <__mcmp>
 80151d6:	2800      	cmp	r0, #0
 80151d8:	dd59      	ble.n	801528e <_strtod_l+0x8ae>
 80151da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80151de:	9a06      	ldr	r2, [sp, #24]
 80151e0:	0d1b      	lsrs	r3, r3, #20
 80151e2:	051b      	lsls	r3, r3, #20
 80151e4:	2a00      	cmp	r2, #0
 80151e6:	d070      	beq.n	80152ca <_strtod_l+0x8ea>
 80151e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80151ec:	d86d      	bhi.n	80152ca <_strtod_l+0x8ea>
 80151ee:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80151f2:	f67f ae99 	bls.w	8014f28 <_strtod_l+0x548>
 80151f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8015228 <_strtod_l+0x848>
 80151fa:	ec4b ab16 	vmov	d6, sl, fp
 80151fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015238 <_strtod_l+0x858>)
 8015200:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015204:	ee17 2a90 	vmov	r2, s15
 8015208:	4013      	ands	r3, r2
 801520a:	ec5b ab17 	vmov	sl, fp, d7
 801520e:	2b00      	cmp	r3, #0
 8015210:	f47f ae01 	bne.w	8014e16 <_strtod_l+0x436>
 8015214:	9a05      	ldr	r2, [sp, #20]
 8015216:	2322      	movs	r3, #34	@ 0x22
 8015218:	6013      	str	r3, [r2, #0]
 801521a:	e5fc      	b.n	8014e16 <_strtod_l+0x436>
 801521c:	f3af 8000 	nop.w
 8015220:	ffc00000 	.word	0xffc00000
 8015224:	41dfffff 	.word	0x41dfffff
 8015228:	00000000 	.word	0x00000000
 801522c:	39500000 	.word	0x39500000
 8015230:	080198f0 	.word	0x080198f0
 8015234:	fffffc02 	.word	0xfffffc02
 8015238:	7ff00000 	.word	0x7ff00000
 801523c:	46d9      	mov	r9, fp
 801523e:	d15d      	bne.n	80152fc <_strtod_l+0x91c>
 8015240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015244:	f1b8 0f00 	cmp.w	r8, #0
 8015248:	d02a      	beq.n	80152a0 <_strtod_l+0x8c0>
 801524a:	4aab      	ldr	r2, [pc, #684]	@ (80154f8 <_strtod_l+0xb18>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d12a      	bne.n	80152a6 <_strtod_l+0x8c6>
 8015250:	9b06      	ldr	r3, [sp, #24]
 8015252:	4652      	mov	r2, sl
 8015254:	b1fb      	cbz	r3, 8015296 <_strtod_l+0x8b6>
 8015256:	4ba9      	ldr	r3, [pc, #676]	@ (80154fc <_strtod_l+0xb1c>)
 8015258:	ea0b 0303 	and.w	r3, fp, r3
 801525c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015260:	f04f 31ff 	mov.w	r1, #4294967295
 8015264:	d81a      	bhi.n	801529c <_strtod_l+0x8bc>
 8015266:	0d1b      	lsrs	r3, r3, #20
 8015268:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801526c:	fa01 f303 	lsl.w	r3, r1, r3
 8015270:	429a      	cmp	r2, r3
 8015272:	d118      	bne.n	80152a6 <_strtod_l+0x8c6>
 8015274:	4ba2      	ldr	r3, [pc, #648]	@ (8015500 <_strtod_l+0xb20>)
 8015276:	4599      	cmp	r9, r3
 8015278:	d102      	bne.n	8015280 <_strtod_l+0x8a0>
 801527a:	3201      	adds	r2, #1
 801527c:	f43f adc0 	beq.w	8014e00 <_strtod_l+0x420>
 8015280:	4b9e      	ldr	r3, [pc, #632]	@ (80154fc <_strtod_l+0xb1c>)
 8015282:	ea09 0303 	and.w	r3, r9, r3
 8015286:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801528a:	f04f 0a00 	mov.w	sl, #0
 801528e:	9b06      	ldr	r3, [sp, #24]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1b0      	bne.n	80151f6 <_strtod_l+0x816>
 8015294:	e5bf      	b.n	8014e16 <_strtod_l+0x436>
 8015296:	f04f 33ff 	mov.w	r3, #4294967295
 801529a:	e7e9      	b.n	8015270 <_strtod_l+0x890>
 801529c:	460b      	mov	r3, r1
 801529e:	e7e7      	b.n	8015270 <_strtod_l+0x890>
 80152a0:	ea53 030a 	orrs.w	r3, r3, sl
 80152a4:	d099      	beq.n	80151da <_strtod_l+0x7fa>
 80152a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152a8:	b1c3      	cbz	r3, 80152dc <_strtod_l+0x8fc>
 80152aa:	ea13 0f09 	tst.w	r3, r9
 80152ae:	d0ee      	beq.n	801528e <_strtod_l+0x8ae>
 80152b0:	9a06      	ldr	r2, [sp, #24]
 80152b2:	4650      	mov	r0, sl
 80152b4:	4659      	mov	r1, fp
 80152b6:	f1b8 0f00 	cmp.w	r8, #0
 80152ba:	d013      	beq.n	80152e4 <_strtod_l+0x904>
 80152bc:	f7ff fb73 	bl	80149a6 <sulp>
 80152c0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80152c4:	ec5b ab17 	vmov	sl, fp, d7
 80152c8:	e7e1      	b.n	801528e <_strtod_l+0x8ae>
 80152ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80152ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80152d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80152d6:	f04f 3aff 	mov.w	sl, #4294967295
 80152da:	e7d8      	b.n	801528e <_strtod_l+0x8ae>
 80152dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152de:	ea13 0f0a 	tst.w	r3, sl
 80152e2:	e7e4      	b.n	80152ae <_strtod_l+0x8ce>
 80152e4:	f7ff fb5f 	bl	80149a6 <sulp>
 80152e8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80152ec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80152f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f4:	ec5b ab10 	vmov	sl, fp, d0
 80152f8:	d1c9      	bne.n	801528e <_strtod_l+0x8ae>
 80152fa:	e615      	b.n	8014f28 <_strtod_l+0x548>
 80152fc:	4629      	mov	r1, r5
 80152fe:	4620      	mov	r0, r4
 8015300:	f002 fd88 	bl	8017e14 <__ratio>
 8015304:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8015308:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015310:	d85d      	bhi.n	80153ce <_strtod_l+0x9ee>
 8015312:	f1b8 0f00 	cmp.w	r8, #0
 8015316:	d164      	bne.n	80153e2 <_strtod_l+0xa02>
 8015318:	f1ba 0f00 	cmp.w	sl, #0
 801531c:	d14b      	bne.n	80153b6 <_strtod_l+0x9d6>
 801531e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015322:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015326:	2b00      	cmp	r3, #0
 8015328:	d160      	bne.n	80153ec <_strtod_l+0xa0c>
 801532a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801532e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8015332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015336:	d401      	bmi.n	801533c <_strtod_l+0x95c>
 8015338:	ee20 8b08 	vmul.f64	d8, d0, d8
 801533c:	eeb1 ab48 	vneg.f64	d10, d8
 8015340:	486e      	ldr	r0, [pc, #440]	@ (80154fc <_strtod_l+0xb1c>)
 8015342:	4970      	ldr	r1, [pc, #448]	@ (8015504 <_strtod_l+0xb24>)
 8015344:	ea09 0700 	and.w	r7, r9, r0
 8015348:	428f      	cmp	r7, r1
 801534a:	ec53 2b1a 	vmov	r2, r3, d10
 801534e:	d17d      	bne.n	801544c <_strtod_l+0xa6c>
 8015350:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8015354:	ec4b ab1c 	vmov	d12, sl, fp
 8015358:	eeb0 0b4c 	vmov.f64	d0, d12
 801535c:	f002 fc92 	bl	8017c84 <__ulp>
 8015360:	4866      	ldr	r0, [pc, #408]	@ (80154fc <_strtod_l+0xb1c>)
 8015362:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8015366:	ee1c 3a90 	vmov	r3, s25
 801536a:	4a67      	ldr	r2, [pc, #412]	@ (8015508 <_strtod_l+0xb28>)
 801536c:	ea03 0100 	and.w	r1, r3, r0
 8015370:	4291      	cmp	r1, r2
 8015372:	ec5b ab1c 	vmov	sl, fp, d12
 8015376:	d93c      	bls.n	80153f2 <_strtod_l+0xa12>
 8015378:	ee19 2a90 	vmov	r2, s19
 801537c:	4b60      	ldr	r3, [pc, #384]	@ (8015500 <_strtod_l+0xb20>)
 801537e:	429a      	cmp	r2, r3
 8015380:	d104      	bne.n	801538c <_strtod_l+0x9ac>
 8015382:	ee19 3a10 	vmov	r3, s18
 8015386:	3301      	adds	r3, #1
 8015388:	f43f ad3a 	beq.w	8014e00 <_strtod_l+0x420>
 801538c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8015500 <_strtod_l+0xb20>
 8015390:	f04f 3aff 	mov.w	sl, #4294967295
 8015394:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015396:	9805      	ldr	r0, [sp, #20]
 8015398:	f002 f940 	bl	801761c <_Bfree>
 801539c:	9805      	ldr	r0, [sp, #20]
 801539e:	4631      	mov	r1, r6
 80153a0:	f002 f93c 	bl	801761c <_Bfree>
 80153a4:	9805      	ldr	r0, [sp, #20]
 80153a6:	4629      	mov	r1, r5
 80153a8:	f002 f938 	bl	801761c <_Bfree>
 80153ac:	9805      	ldr	r0, [sp, #20]
 80153ae:	4621      	mov	r1, r4
 80153b0:	f002 f934 	bl	801761c <_Bfree>
 80153b4:	e625      	b.n	8015002 <_strtod_l+0x622>
 80153b6:	f1ba 0f01 	cmp.w	sl, #1
 80153ba:	d103      	bne.n	80153c4 <_strtod_l+0x9e4>
 80153bc:	f1bb 0f00 	cmp.w	fp, #0
 80153c0:	f43f adb2 	beq.w	8014f28 <_strtod_l+0x548>
 80153c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80153c8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80153cc:	e7b8      	b.n	8015340 <_strtod_l+0x960>
 80153ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80153d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80153d6:	f1b8 0f00 	cmp.w	r8, #0
 80153da:	d0af      	beq.n	801533c <_strtod_l+0x95c>
 80153dc:	eeb0 ab48 	vmov.f64	d10, d8
 80153e0:	e7ae      	b.n	8015340 <_strtod_l+0x960>
 80153e2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80153e6:	eeb0 8b4a 	vmov.f64	d8, d10
 80153ea:	e7a9      	b.n	8015340 <_strtod_l+0x960>
 80153ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80153f0:	e7a6      	b.n	8015340 <_strtod_l+0x960>
 80153f2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80153f6:	9b06      	ldr	r3, [sp, #24]
 80153f8:	46d9      	mov	r9, fp
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1ca      	bne.n	8015394 <_strtod_l+0x9b4>
 80153fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015402:	0d1b      	lsrs	r3, r3, #20
 8015404:	051b      	lsls	r3, r3, #20
 8015406:	429f      	cmp	r7, r3
 8015408:	d1c4      	bne.n	8015394 <_strtod_l+0x9b4>
 801540a:	ec51 0b18 	vmov	r0, r1, d8
 801540e:	f7eb f9bb 	bl	8000788 <__aeabi_d2lz>
 8015412:	f7eb f973 	bl	80006fc <__aeabi_l2d>
 8015416:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801541a:	ec41 0b17 	vmov	d7, r0, r1
 801541e:	ea49 090a 	orr.w	r9, r9, sl
 8015422:	ea59 0908 	orrs.w	r9, r9, r8
 8015426:	ee38 8b47 	vsub.f64	d8, d8, d7
 801542a:	d03c      	beq.n	80154a6 <_strtod_l+0xac6>
 801542c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80154e0 <_strtod_l+0xb00>
 8015430:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015438:	f53f aced 	bmi.w	8014e16 <_strtod_l+0x436>
 801543c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80154e8 <_strtod_l+0xb08>
 8015440:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015448:	dda4      	ble.n	8015394 <_strtod_l+0x9b4>
 801544a:	e4e4      	b.n	8014e16 <_strtod_l+0x436>
 801544c:	9906      	ldr	r1, [sp, #24]
 801544e:	b1e1      	cbz	r1, 801548a <_strtod_l+0xaaa>
 8015450:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8015454:	d819      	bhi.n	801548a <_strtod_l+0xaaa>
 8015456:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801545e:	d811      	bhi.n	8015484 <_strtod_l+0xaa4>
 8015460:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8015464:	ee18 3a10 	vmov	r3, s16
 8015468:	2b01      	cmp	r3, #1
 801546a:	bf38      	it	cc
 801546c:	2301      	movcc	r3, #1
 801546e:	ee08 3a10 	vmov	s16, r3
 8015472:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8015476:	f1b8 0f00 	cmp.w	r8, #0
 801547a:	d111      	bne.n	80154a0 <_strtod_l+0xac0>
 801547c:	eeb1 7b48 	vneg.f64	d7, d8
 8015480:	ec53 2b17 	vmov	r2, r3, d7
 8015484:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8015488:	1bcb      	subs	r3, r1, r7
 801548a:	eeb0 0b49 	vmov.f64	d0, d9
 801548e:	ec43 2b1a 	vmov	d10, r2, r3
 8015492:	f002 fbf7 	bl	8017c84 <__ulp>
 8015496:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801549a:	ec5b ab19 	vmov	sl, fp, d9
 801549e:	e7aa      	b.n	80153f6 <_strtod_l+0xa16>
 80154a0:	eeb0 7b48 	vmov.f64	d7, d8
 80154a4:	e7ec      	b.n	8015480 <_strtod_l+0xaa0>
 80154a6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80154f0 <_strtod_l+0xb10>
 80154aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80154ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154b2:	f57f af6f 	bpl.w	8015394 <_strtod_l+0x9b4>
 80154b6:	e4ae      	b.n	8014e16 <_strtod_l+0x436>
 80154b8:	2300      	movs	r3, #0
 80154ba:	9308      	str	r3, [sp, #32]
 80154bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154c0:	6013      	str	r3, [r2, #0]
 80154c2:	f7ff bacc 	b.w	8014a5e <_strtod_l+0x7e>
 80154c6:	2a65      	cmp	r2, #101	@ 0x65
 80154c8:	f43f abbc 	beq.w	8014c44 <_strtod_l+0x264>
 80154cc:	2a45      	cmp	r2, #69	@ 0x45
 80154ce:	f43f abb9 	beq.w	8014c44 <_strtod_l+0x264>
 80154d2:	2301      	movs	r3, #1
 80154d4:	9306      	str	r3, [sp, #24]
 80154d6:	f7ff bbf0 	b.w	8014cba <_strtod_l+0x2da>
 80154da:	bf00      	nop
 80154dc:	f3af 8000 	nop.w
 80154e0:	94a03595 	.word	0x94a03595
 80154e4:	3fdfffff 	.word	0x3fdfffff
 80154e8:	35afe535 	.word	0x35afe535
 80154ec:	3fe00000 	.word	0x3fe00000
 80154f0:	94a03595 	.word	0x94a03595
 80154f4:	3fcfffff 	.word	0x3fcfffff
 80154f8:	000fffff 	.word	0x000fffff
 80154fc:	7ff00000 	.word	0x7ff00000
 8015500:	7fefffff 	.word	0x7fefffff
 8015504:	7fe00000 	.word	0x7fe00000
 8015508:	7c9fffff 	.word	0x7c9fffff

0801550c <strtod>:
 801550c:	460a      	mov	r2, r1
 801550e:	4601      	mov	r1, r0
 8015510:	4802      	ldr	r0, [pc, #8]	@ (801551c <strtod+0x10>)
 8015512:	4b03      	ldr	r3, [pc, #12]	@ (8015520 <strtod+0x14>)
 8015514:	6800      	ldr	r0, [r0, #0]
 8015516:	f7ff ba63 	b.w	80149e0 <_strtod_l>
 801551a:	bf00      	nop
 801551c:	2400027c 	.word	0x2400027c
 8015520:	24000110 	.word	0x24000110

08015524 <__cvt>:
 8015524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015526:	ed2d 8b02 	vpush	{d8}
 801552a:	eeb0 8b40 	vmov.f64	d8, d0
 801552e:	b085      	sub	sp, #20
 8015530:	4617      	mov	r7, r2
 8015532:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015534:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015536:	ee18 2a90 	vmov	r2, s17
 801553a:	f025 0520 	bic.w	r5, r5, #32
 801553e:	2a00      	cmp	r2, #0
 8015540:	bfb6      	itet	lt
 8015542:	222d      	movlt	r2, #45	@ 0x2d
 8015544:	2200      	movge	r2, #0
 8015546:	eeb1 8b40 	vneglt.f64	d8, d0
 801554a:	2d46      	cmp	r5, #70	@ 0x46
 801554c:	460c      	mov	r4, r1
 801554e:	701a      	strb	r2, [r3, #0]
 8015550:	d004      	beq.n	801555c <__cvt+0x38>
 8015552:	2d45      	cmp	r5, #69	@ 0x45
 8015554:	d100      	bne.n	8015558 <__cvt+0x34>
 8015556:	3401      	adds	r4, #1
 8015558:	2102      	movs	r1, #2
 801555a:	e000      	b.n	801555e <__cvt+0x3a>
 801555c:	2103      	movs	r1, #3
 801555e:	ab03      	add	r3, sp, #12
 8015560:	9301      	str	r3, [sp, #4]
 8015562:	ab02      	add	r3, sp, #8
 8015564:	9300      	str	r3, [sp, #0]
 8015566:	4622      	mov	r2, r4
 8015568:	4633      	mov	r3, r6
 801556a:	eeb0 0b48 	vmov.f64	d0, d8
 801556e:	f000 fe73 	bl	8016258 <_dtoa_r>
 8015572:	2d47      	cmp	r5, #71	@ 0x47
 8015574:	d114      	bne.n	80155a0 <__cvt+0x7c>
 8015576:	07fb      	lsls	r3, r7, #31
 8015578:	d50a      	bpl.n	8015590 <__cvt+0x6c>
 801557a:	1902      	adds	r2, r0, r4
 801557c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015584:	bf08      	it	eq
 8015586:	9203      	streq	r2, [sp, #12]
 8015588:	2130      	movs	r1, #48	@ 0x30
 801558a:	9b03      	ldr	r3, [sp, #12]
 801558c:	4293      	cmp	r3, r2
 801558e:	d319      	bcc.n	80155c4 <__cvt+0xa0>
 8015590:	9b03      	ldr	r3, [sp, #12]
 8015592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015594:	1a1b      	subs	r3, r3, r0
 8015596:	6013      	str	r3, [r2, #0]
 8015598:	b005      	add	sp, #20
 801559a:	ecbd 8b02 	vpop	{d8}
 801559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155a0:	2d46      	cmp	r5, #70	@ 0x46
 80155a2:	eb00 0204 	add.w	r2, r0, r4
 80155a6:	d1e9      	bne.n	801557c <__cvt+0x58>
 80155a8:	7803      	ldrb	r3, [r0, #0]
 80155aa:	2b30      	cmp	r3, #48	@ 0x30
 80155ac:	d107      	bne.n	80155be <__cvt+0x9a>
 80155ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80155b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b6:	bf1c      	itt	ne
 80155b8:	f1c4 0401 	rsbne	r4, r4, #1
 80155bc:	6034      	strne	r4, [r6, #0]
 80155be:	6833      	ldr	r3, [r6, #0]
 80155c0:	441a      	add	r2, r3
 80155c2:	e7db      	b.n	801557c <__cvt+0x58>
 80155c4:	1c5c      	adds	r4, r3, #1
 80155c6:	9403      	str	r4, [sp, #12]
 80155c8:	7019      	strb	r1, [r3, #0]
 80155ca:	e7de      	b.n	801558a <__cvt+0x66>

080155cc <__exponent>:
 80155cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155ce:	2900      	cmp	r1, #0
 80155d0:	bfba      	itte	lt
 80155d2:	4249      	neglt	r1, r1
 80155d4:	232d      	movlt	r3, #45	@ 0x2d
 80155d6:	232b      	movge	r3, #43	@ 0x2b
 80155d8:	2909      	cmp	r1, #9
 80155da:	7002      	strb	r2, [r0, #0]
 80155dc:	7043      	strb	r3, [r0, #1]
 80155de:	dd29      	ble.n	8015634 <__exponent+0x68>
 80155e0:	f10d 0307 	add.w	r3, sp, #7
 80155e4:	461d      	mov	r5, r3
 80155e6:	270a      	movs	r7, #10
 80155e8:	461a      	mov	r2, r3
 80155ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80155ee:	fb07 1416 	mls	r4, r7, r6, r1
 80155f2:	3430      	adds	r4, #48	@ 0x30
 80155f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80155f8:	460c      	mov	r4, r1
 80155fa:	2c63      	cmp	r4, #99	@ 0x63
 80155fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8015600:	4631      	mov	r1, r6
 8015602:	dcf1      	bgt.n	80155e8 <__exponent+0x1c>
 8015604:	3130      	adds	r1, #48	@ 0x30
 8015606:	1e94      	subs	r4, r2, #2
 8015608:	f803 1c01 	strb.w	r1, [r3, #-1]
 801560c:	1c41      	adds	r1, r0, #1
 801560e:	4623      	mov	r3, r4
 8015610:	42ab      	cmp	r3, r5
 8015612:	d30a      	bcc.n	801562a <__exponent+0x5e>
 8015614:	f10d 0309 	add.w	r3, sp, #9
 8015618:	1a9b      	subs	r3, r3, r2
 801561a:	42ac      	cmp	r4, r5
 801561c:	bf88      	it	hi
 801561e:	2300      	movhi	r3, #0
 8015620:	3302      	adds	r3, #2
 8015622:	4403      	add	r3, r0
 8015624:	1a18      	subs	r0, r3, r0
 8015626:	b003      	add	sp, #12
 8015628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801562e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015632:	e7ed      	b.n	8015610 <__exponent+0x44>
 8015634:	2330      	movs	r3, #48	@ 0x30
 8015636:	3130      	adds	r1, #48	@ 0x30
 8015638:	7083      	strb	r3, [r0, #2]
 801563a:	70c1      	strb	r1, [r0, #3]
 801563c:	1d03      	adds	r3, r0, #4
 801563e:	e7f1      	b.n	8015624 <__exponent+0x58>

08015640 <_printf_float>:
 8015640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015644:	b08d      	sub	sp, #52	@ 0x34
 8015646:	460c      	mov	r4, r1
 8015648:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801564c:	4616      	mov	r6, r2
 801564e:	461f      	mov	r7, r3
 8015650:	4605      	mov	r5, r0
 8015652:	f000 fce9 	bl	8016028 <_localeconv_r>
 8015656:	f8d0 b000 	ldr.w	fp, [r0]
 801565a:	4658      	mov	r0, fp
 801565c:	f7ea feb8 	bl	80003d0 <strlen>
 8015660:	2300      	movs	r3, #0
 8015662:	930a      	str	r3, [sp, #40]	@ 0x28
 8015664:	f8d8 3000 	ldr.w	r3, [r8]
 8015668:	f894 9018 	ldrb.w	r9, [r4, #24]
 801566c:	6822      	ldr	r2, [r4, #0]
 801566e:	9005      	str	r0, [sp, #20]
 8015670:	3307      	adds	r3, #7
 8015672:	f023 0307 	bic.w	r3, r3, #7
 8015676:	f103 0108 	add.w	r1, r3, #8
 801567a:	f8c8 1000 	str.w	r1, [r8]
 801567e:	ed93 0b00 	vldr	d0, [r3]
 8015682:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80158e0 <_printf_float+0x2a0>
 8015686:	eeb0 7bc0 	vabs.f64	d7, d0
 801568a:	eeb4 7b46 	vcmp.f64	d7, d6
 801568e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015692:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8015696:	dd24      	ble.n	80156e2 <_printf_float+0xa2>
 8015698:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a0:	d502      	bpl.n	80156a8 <_printf_float+0x68>
 80156a2:	232d      	movs	r3, #45	@ 0x2d
 80156a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80156a8:	498f      	ldr	r1, [pc, #572]	@ (80158e8 <_printf_float+0x2a8>)
 80156aa:	4b90      	ldr	r3, [pc, #576]	@ (80158ec <_printf_float+0x2ac>)
 80156ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80156b0:	bf94      	ite	ls
 80156b2:	4688      	movls	r8, r1
 80156b4:	4698      	movhi	r8, r3
 80156b6:	f022 0204 	bic.w	r2, r2, #4
 80156ba:	2303      	movs	r3, #3
 80156bc:	6123      	str	r3, [r4, #16]
 80156be:	6022      	str	r2, [r4, #0]
 80156c0:	f04f 0a00 	mov.w	sl, #0
 80156c4:	9700      	str	r7, [sp, #0]
 80156c6:	4633      	mov	r3, r6
 80156c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80156ca:	4621      	mov	r1, r4
 80156cc:	4628      	mov	r0, r5
 80156ce:	f000 f9d1 	bl	8015a74 <_printf_common>
 80156d2:	3001      	adds	r0, #1
 80156d4:	f040 8089 	bne.w	80157ea <_printf_float+0x1aa>
 80156d8:	f04f 30ff 	mov.w	r0, #4294967295
 80156dc:	b00d      	add	sp, #52	@ 0x34
 80156de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80156e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ea:	d709      	bvc.n	8015700 <_printf_float+0xc0>
 80156ec:	ee10 3a90 	vmov	r3, s1
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	bfbc      	itt	lt
 80156f4:	232d      	movlt	r3, #45	@ 0x2d
 80156f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80156fa:	497d      	ldr	r1, [pc, #500]	@ (80158f0 <_printf_float+0x2b0>)
 80156fc:	4b7d      	ldr	r3, [pc, #500]	@ (80158f4 <_printf_float+0x2b4>)
 80156fe:	e7d5      	b.n	80156ac <_printf_float+0x6c>
 8015700:	6863      	ldr	r3, [r4, #4]
 8015702:	1c59      	adds	r1, r3, #1
 8015704:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015708:	d139      	bne.n	801577e <_printf_float+0x13e>
 801570a:	2306      	movs	r3, #6
 801570c:	6063      	str	r3, [r4, #4]
 801570e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015712:	2300      	movs	r3, #0
 8015714:	6022      	str	r2, [r4, #0]
 8015716:	9303      	str	r3, [sp, #12]
 8015718:	ab0a      	add	r3, sp, #40	@ 0x28
 801571a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801571e:	ab09      	add	r3, sp, #36	@ 0x24
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	6861      	ldr	r1, [r4, #4]
 8015724:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015728:	4628      	mov	r0, r5
 801572a:	f7ff fefb 	bl	8015524 <__cvt>
 801572e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015732:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015734:	4680      	mov	r8, r0
 8015736:	d129      	bne.n	801578c <_printf_float+0x14c>
 8015738:	1cc8      	adds	r0, r1, #3
 801573a:	db02      	blt.n	8015742 <_printf_float+0x102>
 801573c:	6863      	ldr	r3, [r4, #4]
 801573e:	4299      	cmp	r1, r3
 8015740:	dd41      	ble.n	80157c6 <_printf_float+0x186>
 8015742:	f1a9 0902 	sub.w	r9, r9, #2
 8015746:	fa5f f989 	uxtb.w	r9, r9
 801574a:	3901      	subs	r1, #1
 801574c:	464a      	mov	r2, r9
 801574e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015752:	9109      	str	r1, [sp, #36]	@ 0x24
 8015754:	f7ff ff3a 	bl	80155cc <__exponent>
 8015758:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801575a:	1813      	adds	r3, r2, r0
 801575c:	2a01      	cmp	r2, #1
 801575e:	4682      	mov	sl, r0
 8015760:	6123      	str	r3, [r4, #16]
 8015762:	dc02      	bgt.n	801576a <_printf_float+0x12a>
 8015764:	6822      	ldr	r2, [r4, #0]
 8015766:	07d2      	lsls	r2, r2, #31
 8015768:	d501      	bpl.n	801576e <_printf_float+0x12e>
 801576a:	3301      	adds	r3, #1
 801576c:	6123      	str	r3, [r4, #16]
 801576e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015772:	2b00      	cmp	r3, #0
 8015774:	d0a6      	beq.n	80156c4 <_printf_float+0x84>
 8015776:	232d      	movs	r3, #45	@ 0x2d
 8015778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801577c:	e7a2      	b.n	80156c4 <_printf_float+0x84>
 801577e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015782:	d1c4      	bne.n	801570e <_printf_float+0xce>
 8015784:	2b00      	cmp	r3, #0
 8015786:	d1c2      	bne.n	801570e <_printf_float+0xce>
 8015788:	2301      	movs	r3, #1
 801578a:	e7bf      	b.n	801570c <_printf_float+0xcc>
 801578c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015790:	d9db      	bls.n	801574a <_printf_float+0x10a>
 8015792:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8015796:	d118      	bne.n	80157ca <_printf_float+0x18a>
 8015798:	2900      	cmp	r1, #0
 801579a:	6863      	ldr	r3, [r4, #4]
 801579c:	dd0b      	ble.n	80157b6 <_printf_float+0x176>
 801579e:	6121      	str	r1, [r4, #16]
 80157a0:	b913      	cbnz	r3, 80157a8 <_printf_float+0x168>
 80157a2:	6822      	ldr	r2, [r4, #0]
 80157a4:	07d0      	lsls	r0, r2, #31
 80157a6:	d502      	bpl.n	80157ae <_printf_float+0x16e>
 80157a8:	3301      	adds	r3, #1
 80157aa:	440b      	add	r3, r1
 80157ac:	6123      	str	r3, [r4, #16]
 80157ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80157b0:	f04f 0a00 	mov.w	sl, #0
 80157b4:	e7db      	b.n	801576e <_printf_float+0x12e>
 80157b6:	b913      	cbnz	r3, 80157be <_printf_float+0x17e>
 80157b8:	6822      	ldr	r2, [r4, #0]
 80157ba:	07d2      	lsls	r2, r2, #31
 80157bc:	d501      	bpl.n	80157c2 <_printf_float+0x182>
 80157be:	3302      	adds	r3, #2
 80157c0:	e7f4      	b.n	80157ac <_printf_float+0x16c>
 80157c2:	2301      	movs	r3, #1
 80157c4:	e7f2      	b.n	80157ac <_printf_float+0x16c>
 80157c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80157ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157cc:	4299      	cmp	r1, r3
 80157ce:	db05      	blt.n	80157dc <_printf_float+0x19c>
 80157d0:	6823      	ldr	r3, [r4, #0]
 80157d2:	6121      	str	r1, [r4, #16]
 80157d4:	07d8      	lsls	r0, r3, #31
 80157d6:	d5ea      	bpl.n	80157ae <_printf_float+0x16e>
 80157d8:	1c4b      	adds	r3, r1, #1
 80157da:	e7e7      	b.n	80157ac <_printf_float+0x16c>
 80157dc:	2900      	cmp	r1, #0
 80157de:	bfd4      	ite	le
 80157e0:	f1c1 0202 	rsble	r2, r1, #2
 80157e4:	2201      	movgt	r2, #1
 80157e6:	4413      	add	r3, r2
 80157e8:	e7e0      	b.n	80157ac <_printf_float+0x16c>
 80157ea:	6823      	ldr	r3, [r4, #0]
 80157ec:	055a      	lsls	r2, r3, #21
 80157ee:	d407      	bmi.n	8015800 <_printf_float+0x1c0>
 80157f0:	6923      	ldr	r3, [r4, #16]
 80157f2:	4642      	mov	r2, r8
 80157f4:	4631      	mov	r1, r6
 80157f6:	4628      	mov	r0, r5
 80157f8:	47b8      	blx	r7
 80157fa:	3001      	adds	r0, #1
 80157fc:	d12a      	bne.n	8015854 <_printf_float+0x214>
 80157fe:	e76b      	b.n	80156d8 <_printf_float+0x98>
 8015800:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015804:	f240 80e0 	bls.w	80159c8 <_printf_float+0x388>
 8015808:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801580c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015814:	d133      	bne.n	801587e <_printf_float+0x23e>
 8015816:	4a38      	ldr	r2, [pc, #224]	@ (80158f8 <_printf_float+0x2b8>)
 8015818:	2301      	movs	r3, #1
 801581a:	4631      	mov	r1, r6
 801581c:	4628      	mov	r0, r5
 801581e:	47b8      	blx	r7
 8015820:	3001      	adds	r0, #1
 8015822:	f43f af59 	beq.w	80156d8 <_printf_float+0x98>
 8015826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801582a:	4543      	cmp	r3, r8
 801582c:	db02      	blt.n	8015834 <_printf_float+0x1f4>
 801582e:	6823      	ldr	r3, [r4, #0]
 8015830:	07d8      	lsls	r0, r3, #31
 8015832:	d50f      	bpl.n	8015854 <_printf_float+0x214>
 8015834:	9b05      	ldr	r3, [sp, #20]
 8015836:	465a      	mov	r2, fp
 8015838:	4631      	mov	r1, r6
 801583a:	4628      	mov	r0, r5
 801583c:	47b8      	blx	r7
 801583e:	3001      	adds	r0, #1
 8015840:	f43f af4a 	beq.w	80156d8 <_printf_float+0x98>
 8015844:	f04f 0900 	mov.w	r9, #0
 8015848:	f108 38ff 	add.w	r8, r8, #4294967295
 801584c:	f104 0a1a 	add.w	sl, r4, #26
 8015850:	45c8      	cmp	r8, r9
 8015852:	dc09      	bgt.n	8015868 <_printf_float+0x228>
 8015854:	6823      	ldr	r3, [r4, #0]
 8015856:	079b      	lsls	r3, r3, #30
 8015858:	f100 8107 	bmi.w	8015a6a <_printf_float+0x42a>
 801585c:	68e0      	ldr	r0, [r4, #12]
 801585e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015860:	4298      	cmp	r0, r3
 8015862:	bfb8      	it	lt
 8015864:	4618      	movlt	r0, r3
 8015866:	e739      	b.n	80156dc <_printf_float+0x9c>
 8015868:	2301      	movs	r3, #1
 801586a:	4652      	mov	r2, sl
 801586c:	4631      	mov	r1, r6
 801586e:	4628      	mov	r0, r5
 8015870:	47b8      	blx	r7
 8015872:	3001      	adds	r0, #1
 8015874:	f43f af30 	beq.w	80156d8 <_printf_float+0x98>
 8015878:	f109 0901 	add.w	r9, r9, #1
 801587c:	e7e8      	b.n	8015850 <_printf_float+0x210>
 801587e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015880:	2b00      	cmp	r3, #0
 8015882:	dc3b      	bgt.n	80158fc <_printf_float+0x2bc>
 8015884:	4a1c      	ldr	r2, [pc, #112]	@ (80158f8 <_printf_float+0x2b8>)
 8015886:	2301      	movs	r3, #1
 8015888:	4631      	mov	r1, r6
 801588a:	4628      	mov	r0, r5
 801588c:	47b8      	blx	r7
 801588e:	3001      	adds	r0, #1
 8015890:	f43f af22 	beq.w	80156d8 <_printf_float+0x98>
 8015894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015898:	ea59 0303 	orrs.w	r3, r9, r3
 801589c:	d102      	bne.n	80158a4 <_printf_float+0x264>
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	07d9      	lsls	r1, r3, #31
 80158a2:	d5d7      	bpl.n	8015854 <_printf_float+0x214>
 80158a4:	9b05      	ldr	r3, [sp, #20]
 80158a6:	465a      	mov	r2, fp
 80158a8:	4631      	mov	r1, r6
 80158aa:	4628      	mov	r0, r5
 80158ac:	47b8      	blx	r7
 80158ae:	3001      	adds	r0, #1
 80158b0:	f43f af12 	beq.w	80156d8 <_printf_float+0x98>
 80158b4:	f04f 0a00 	mov.w	sl, #0
 80158b8:	f104 0b1a 	add.w	fp, r4, #26
 80158bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158be:	425b      	negs	r3, r3
 80158c0:	4553      	cmp	r3, sl
 80158c2:	dc01      	bgt.n	80158c8 <_printf_float+0x288>
 80158c4:	464b      	mov	r3, r9
 80158c6:	e794      	b.n	80157f2 <_printf_float+0x1b2>
 80158c8:	2301      	movs	r3, #1
 80158ca:	465a      	mov	r2, fp
 80158cc:	4631      	mov	r1, r6
 80158ce:	4628      	mov	r0, r5
 80158d0:	47b8      	blx	r7
 80158d2:	3001      	adds	r0, #1
 80158d4:	f43f af00 	beq.w	80156d8 <_printf_float+0x98>
 80158d8:	f10a 0a01 	add.w	sl, sl, #1
 80158dc:	e7ee      	b.n	80158bc <_printf_float+0x27c>
 80158de:	bf00      	nop
 80158e0:	ffffffff 	.word	0xffffffff
 80158e4:	7fefffff 	.word	0x7fefffff
 80158e8:	08019a19 	.word	0x08019a19
 80158ec:	08019a1d 	.word	0x08019a1d
 80158f0:	08019a21 	.word	0x08019a21
 80158f4:	08019a25 	.word	0x08019a25
 80158f8:	08019a29 	.word	0x08019a29
 80158fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80158fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015902:	4553      	cmp	r3, sl
 8015904:	bfa8      	it	ge
 8015906:	4653      	movge	r3, sl
 8015908:	2b00      	cmp	r3, #0
 801590a:	4699      	mov	r9, r3
 801590c:	dc37      	bgt.n	801597e <_printf_float+0x33e>
 801590e:	2300      	movs	r3, #0
 8015910:	9307      	str	r3, [sp, #28]
 8015912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015916:	f104 021a 	add.w	r2, r4, #26
 801591a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801591c:	9907      	ldr	r1, [sp, #28]
 801591e:	9306      	str	r3, [sp, #24]
 8015920:	eba3 0309 	sub.w	r3, r3, r9
 8015924:	428b      	cmp	r3, r1
 8015926:	dc31      	bgt.n	801598c <_printf_float+0x34c>
 8015928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801592a:	459a      	cmp	sl, r3
 801592c:	dc3b      	bgt.n	80159a6 <_printf_float+0x366>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	07da      	lsls	r2, r3, #31
 8015932:	d438      	bmi.n	80159a6 <_printf_float+0x366>
 8015934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015936:	ebaa 0903 	sub.w	r9, sl, r3
 801593a:	9b06      	ldr	r3, [sp, #24]
 801593c:	ebaa 0303 	sub.w	r3, sl, r3
 8015940:	4599      	cmp	r9, r3
 8015942:	bfa8      	it	ge
 8015944:	4699      	movge	r9, r3
 8015946:	f1b9 0f00 	cmp.w	r9, #0
 801594a:	dc34      	bgt.n	80159b6 <_printf_float+0x376>
 801594c:	f04f 0800 	mov.w	r8, #0
 8015950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015954:	f104 0b1a 	add.w	fp, r4, #26
 8015958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801595a:	ebaa 0303 	sub.w	r3, sl, r3
 801595e:	eba3 0309 	sub.w	r3, r3, r9
 8015962:	4543      	cmp	r3, r8
 8015964:	f77f af76 	ble.w	8015854 <_printf_float+0x214>
 8015968:	2301      	movs	r3, #1
 801596a:	465a      	mov	r2, fp
 801596c:	4631      	mov	r1, r6
 801596e:	4628      	mov	r0, r5
 8015970:	47b8      	blx	r7
 8015972:	3001      	adds	r0, #1
 8015974:	f43f aeb0 	beq.w	80156d8 <_printf_float+0x98>
 8015978:	f108 0801 	add.w	r8, r8, #1
 801597c:	e7ec      	b.n	8015958 <_printf_float+0x318>
 801597e:	4642      	mov	r2, r8
 8015980:	4631      	mov	r1, r6
 8015982:	4628      	mov	r0, r5
 8015984:	47b8      	blx	r7
 8015986:	3001      	adds	r0, #1
 8015988:	d1c1      	bne.n	801590e <_printf_float+0x2ce>
 801598a:	e6a5      	b.n	80156d8 <_printf_float+0x98>
 801598c:	2301      	movs	r3, #1
 801598e:	4631      	mov	r1, r6
 8015990:	4628      	mov	r0, r5
 8015992:	9206      	str	r2, [sp, #24]
 8015994:	47b8      	blx	r7
 8015996:	3001      	adds	r0, #1
 8015998:	f43f ae9e 	beq.w	80156d8 <_printf_float+0x98>
 801599c:	9b07      	ldr	r3, [sp, #28]
 801599e:	9a06      	ldr	r2, [sp, #24]
 80159a0:	3301      	adds	r3, #1
 80159a2:	9307      	str	r3, [sp, #28]
 80159a4:	e7b9      	b.n	801591a <_printf_float+0x2da>
 80159a6:	9b05      	ldr	r3, [sp, #20]
 80159a8:	465a      	mov	r2, fp
 80159aa:	4631      	mov	r1, r6
 80159ac:	4628      	mov	r0, r5
 80159ae:	47b8      	blx	r7
 80159b0:	3001      	adds	r0, #1
 80159b2:	d1bf      	bne.n	8015934 <_printf_float+0x2f4>
 80159b4:	e690      	b.n	80156d8 <_printf_float+0x98>
 80159b6:	9a06      	ldr	r2, [sp, #24]
 80159b8:	464b      	mov	r3, r9
 80159ba:	4442      	add	r2, r8
 80159bc:	4631      	mov	r1, r6
 80159be:	4628      	mov	r0, r5
 80159c0:	47b8      	blx	r7
 80159c2:	3001      	adds	r0, #1
 80159c4:	d1c2      	bne.n	801594c <_printf_float+0x30c>
 80159c6:	e687      	b.n	80156d8 <_printf_float+0x98>
 80159c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80159cc:	f1b9 0f01 	cmp.w	r9, #1
 80159d0:	dc01      	bgt.n	80159d6 <_printf_float+0x396>
 80159d2:	07db      	lsls	r3, r3, #31
 80159d4:	d536      	bpl.n	8015a44 <_printf_float+0x404>
 80159d6:	2301      	movs	r3, #1
 80159d8:	4642      	mov	r2, r8
 80159da:	4631      	mov	r1, r6
 80159dc:	4628      	mov	r0, r5
 80159de:	47b8      	blx	r7
 80159e0:	3001      	adds	r0, #1
 80159e2:	f43f ae79 	beq.w	80156d8 <_printf_float+0x98>
 80159e6:	9b05      	ldr	r3, [sp, #20]
 80159e8:	465a      	mov	r2, fp
 80159ea:	4631      	mov	r1, r6
 80159ec:	4628      	mov	r0, r5
 80159ee:	47b8      	blx	r7
 80159f0:	3001      	adds	r0, #1
 80159f2:	f43f ae71 	beq.w	80156d8 <_printf_float+0x98>
 80159f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80159fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80159fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a02:	f109 39ff 	add.w	r9, r9, #4294967295
 8015a06:	d018      	beq.n	8015a3a <_printf_float+0x3fa>
 8015a08:	464b      	mov	r3, r9
 8015a0a:	f108 0201 	add.w	r2, r8, #1
 8015a0e:	4631      	mov	r1, r6
 8015a10:	4628      	mov	r0, r5
 8015a12:	47b8      	blx	r7
 8015a14:	3001      	adds	r0, #1
 8015a16:	d10c      	bne.n	8015a32 <_printf_float+0x3f2>
 8015a18:	e65e      	b.n	80156d8 <_printf_float+0x98>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	465a      	mov	r2, fp
 8015a1e:	4631      	mov	r1, r6
 8015a20:	4628      	mov	r0, r5
 8015a22:	47b8      	blx	r7
 8015a24:	3001      	adds	r0, #1
 8015a26:	f43f ae57 	beq.w	80156d8 <_printf_float+0x98>
 8015a2a:	f108 0801 	add.w	r8, r8, #1
 8015a2e:	45c8      	cmp	r8, r9
 8015a30:	dbf3      	blt.n	8015a1a <_printf_float+0x3da>
 8015a32:	4653      	mov	r3, sl
 8015a34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015a38:	e6dc      	b.n	80157f4 <_printf_float+0x1b4>
 8015a3a:	f04f 0800 	mov.w	r8, #0
 8015a3e:	f104 0b1a 	add.w	fp, r4, #26
 8015a42:	e7f4      	b.n	8015a2e <_printf_float+0x3ee>
 8015a44:	2301      	movs	r3, #1
 8015a46:	4642      	mov	r2, r8
 8015a48:	e7e1      	b.n	8015a0e <_printf_float+0x3ce>
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	464a      	mov	r2, r9
 8015a4e:	4631      	mov	r1, r6
 8015a50:	4628      	mov	r0, r5
 8015a52:	47b8      	blx	r7
 8015a54:	3001      	adds	r0, #1
 8015a56:	f43f ae3f 	beq.w	80156d8 <_printf_float+0x98>
 8015a5a:	f108 0801 	add.w	r8, r8, #1
 8015a5e:	68e3      	ldr	r3, [r4, #12]
 8015a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015a62:	1a5b      	subs	r3, r3, r1
 8015a64:	4543      	cmp	r3, r8
 8015a66:	dcf0      	bgt.n	8015a4a <_printf_float+0x40a>
 8015a68:	e6f8      	b.n	801585c <_printf_float+0x21c>
 8015a6a:	f04f 0800 	mov.w	r8, #0
 8015a6e:	f104 0919 	add.w	r9, r4, #25
 8015a72:	e7f4      	b.n	8015a5e <_printf_float+0x41e>

08015a74 <_printf_common>:
 8015a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a78:	4616      	mov	r6, r2
 8015a7a:	4698      	mov	r8, r3
 8015a7c:	688a      	ldr	r2, [r1, #8]
 8015a7e:	690b      	ldr	r3, [r1, #16]
 8015a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a84:	4293      	cmp	r3, r2
 8015a86:	bfb8      	it	lt
 8015a88:	4613      	movlt	r3, r2
 8015a8a:	6033      	str	r3, [r6, #0]
 8015a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a90:	4607      	mov	r7, r0
 8015a92:	460c      	mov	r4, r1
 8015a94:	b10a      	cbz	r2, 8015a9a <_printf_common+0x26>
 8015a96:	3301      	adds	r3, #1
 8015a98:	6033      	str	r3, [r6, #0]
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	0699      	lsls	r1, r3, #26
 8015a9e:	bf42      	ittt	mi
 8015aa0:	6833      	ldrmi	r3, [r6, #0]
 8015aa2:	3302      	addmi	r3, #2
 8015aa4:	6033      	strmi	r3, [r6, #0]
 8015aa6:	6825      	ldr	r5, [r4, #0]
 8015aa8:	f015 0506 	ands.w	r5, r5, #6
 8015aac:	d106      	bne.n	8015abc <_printf_common+0x48>
 8015aae:	f104 0a19 	add.w	sl, r4, #25
 8015ab2:	68e3      	ldr	r3, [r4, #12]
 8015ab4:	6832      	ldr	r2, [r6, #0]
 8015ab6:	1a9b      	subs	r3, r3, r2
 8015ab8:	42ab      	cmp	r3, r5
 8015aba:	dc26      	bgt.n	8015b0a <_printf_common+0x96>
 8015abc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015ac0:	6822      	ldr	r2, [r4, #0]
 8015ac2:	3b00      	subs	r3, #0
 8015ac4:	bf18      	it	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	0692      	lsls	r2, r2, #26
 8015aca:	d42b      	bmi.n	8015b24 <_printf_common+0xb0>
 8015acc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ad0:	4641      	mov	r1, r8
 8015ad2:	4638      	mov	r0, r7
 8015ad4:	47c8      	blx	r9
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	d01e      	beq.n	8015b18 <_printf_common+0xa4>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	6922      	ldr	r2, [r4, #16]
 8015ade:	f003 0306 	and.w	r3, r3, #6
 8015ae2:	2b04      	cmp	r3, #4
 8015ae4:	bf02      	ittt	eq
 8015ae6:	68e5      	ldreq	r5, [r4, #12]
 8015ae8:	6833      	ldreq	r3, [r6, #0]
 8015aea:	1aed      	subeq	r5, r5, r3
 8015aec:	68a3      	ldr	r3, [r4, #8]
 8015aee:	bf0c      	ite	eq
 8015af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015af4:	2500      	movne	r5, #0
 8015af6:	4293      	cmp	r3, r2
 8015af8:	bfc4      	itt	gt
 8015afa:	1a9b      	subgt	r3, r3, r2
 8015afc:	18ed      	addgt	r5, r5, r3
 8015afe:	2600      	movs	r6, #0
 8015b00:	341a      	adds	r4, #26
 8015b02:	42b5      	cmp	r5, r6
 8015b04:	d11a      	bne.n	8015b3c <_printf_common+0xc8>
 8015b06:	2000      	movs	r0, #0
 8015b08:	e008      	b.n	8015b1c <_printf_common+0xa8>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	4652      	mov	r2, sl
 8015b0e:	4641      	mov	r1, r8
 8015b10:	4638      	mov	r0, r7
 8015b12:	47c8      	blx	r9
 8015b14:	3001      	adds	r0, #1
 8015b16:	d103      	bne.n	8015b20 <_printf_common+0xac>
 8015b18:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b20:	3501      	adds	r5, #1
 8015b22:	e7c6      	b.n	8015ab2 <_printf_common+0x3e>
 8015b24:	18e1      	adds	r1, r4, r3
 8015b26:	1c5a      	adds	r2, r3, #1
 8015b28:	2030      	movs	r0, #48	@ 0x30
 8015b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015b2e:	4422      	add	r2, r4
 8015b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b38:	3302      	adds	r3, #2
 8015b3a:	e7c7      	b.n	8015acc <_printf_common+0x58>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4622      	mov	r2, r4
 8015b40:	4641      	mov	r1, r8
 8015b42:	4638      	mov	r0, r7
 8015b44:	47c8      	blx	r9
 8015b46:	3001      	adds	r0, #1
 8015b48:	d0e6      	beq.n	8015b18 <_printf_common+0xa4>
 8015b4a:	3601      	adds	r6, #1
 8015b4c:	e7d9      	b.n	8015b02 <_printf_common+0x8e>
	...

08015b50 <_printf_i>:
 8015b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b54:	7e0f      	ldrb	r7, [r1, #24]
 8015b56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b58:	2f78      	cmp	r7, #120	@ 0x78
 8015b5a:	4691      	mov	r9, r2
 8015b5c:	4680      	mov	r8, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	469a      	mov	sl, r3
 8015b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b66:	d807      	bhi.n	8015b78 <_printf_i+0x28>
 8015b68:	2f62      	cmp	r7, #98	@ 0x62
 8015b6a:	d80a      	bhi.n	8015b82 <_printf_i+0x32>
 8015b6c:	2f00      	cmp	r7, #0
 8015b6e:	f000 80d2 	beq.w	8015d16 <_printf_i+0x1c6>
 8015b72:	2f58      	cmp	r7, #88	@ 0x58
 8015b74:	f000 80b9 	beq.w	8015cea <_printf_i+0x19a>
 8015b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b80:	e03a      	b.n	8015bf8 <_printf_i+0xa8>
 8015b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b86:	2b15      	cmp	r3, #21
 8015b88:	d8f6      	bhi.n	8015b78 <_printf_i+0x28>
 8015b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8015b90 <_printf_i+0x40>)
 8015b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b90:	08015be9 	.word	0x08015be9
 8015b94:	08015bfd 	.word	0x08015bfd
 8015b98:	08015b79 	.word	0x08015b79
 8015b9c:	08015b79 	.word	0x08015b79
 8015ba0:	08015b79 	.word	0x08015b79
 8015ba4:	08015b79 	.word	0x08015b79
 8015ba8:	08015bfd 	.word	0x08015bfd
 8015bac:	08015b79 	.word	0x08015b79
 8015bb0:	08015b79 	.word	0x08015b79
 8015bb4:	08015b79 	.word	0x08015b79
 8015bb8:	08015b79 	.word	0x08015b79
 8015bbc:	08015cfd 	.word	0x08015cfd
 8015bc0:	08015c27 	.word	0x08015c27
 8015bc4:	08015cb7 	.word	0x08015cb7
 8015bc8:	08015b79 	.word	0x08015b79
 8015bcc:	08015b79 	.word	0x08015b79
 8015bd0:	08015d1f 	.word	0x08015d1f
 8015bd4:	08015b79 	.word	0x08015b79
 8015bd8:	08015c27 	.word	0x08015c27
 8015bdc:	08015b79 	.word	0x08015b79
 8015be0:	08015b79 	.word	0x08015b79
 8015be4:	08015cbf 	.word	0x08015cbf
 8015be8:	6833      	ldr	r3, [r6, #0]
 8015bea:	1d1a      	adds	r2, r3, #4
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	6032      	str	r2, [r6, #0]
 8015bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	e09d      	b.n	8015d38 <_printf_i+0x1e8>
 8015bfc:	6833      	ldr	r3, [r6, #0]
 8015bfe:	6820      	ldr	r0, [r4, #0]
 8015c00:	1d19      	adds	r1, r3, #4
 8015c02:	6031      	str	r1, [r6, #0]
 8015c04:	0606      	lsls	r6, r0, #24
 8015c06:	d501      	bpl.n	8015c0c <_printf_i+0xbc>
 8015c08:	681d      	ldr	r5, [r3, #0]
 8015c0a:	e003      	b.n	8015c14 <_printf_i+0xc4>
 8015c0c:	0645      	lsls	r5, r0, #25
 8015c0e:	d5fb      	bpl.n	8015c08 <_printf_i+0xb8>
 8015c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015c14:	2d00      	cmp	r5, #0
 8015c16:	da03      	bge.n	8015c20 <_printf_i+0xd0>
 8015c18:	232d      	movs	r3, #45	@ 0x2d
 8015c1a:	426d      	negs	r5, r5
 8015c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c20:	4859      	ldr	r0, [pc, #356]	@ (8015d88 <_printf_i+0x238>)
 8015c22:	230a      	movs	r3, #10
 8015c24:	e011      	b.n	8015c4a <_printf_i+0xfa>
 8015c26:	6821      	ldr	r1, [r4, #0]
 8015c28:	6833      	ldr	r3, [r6, #0]
 8015c2a:	0608      	lsls	r0, r1, #24
 8015c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c30:	d402      	bmi.n	8015c38 <_printf_i+0xe8>
 8015c32:	0649      	lsls	r1, r1, #25
 8015c34:	bf48      	it	mi
 8015c36:	b2ad      	uxthmi	r5, r5
 8015c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c3a:	4853      	ldr	r0, [pc, #332]	@ (8015d88 <_printf_i+0x238>)
 8015c3c:	6033      	str	r3, [r6, #0]
 8015c3e:	bf14      	ite	ne
 8015c40:	230a      	movne	r3, #10
 8015c42:	2308      	moveq	r3, #8
 8015c44:	2100      	movs	r1, #0
 8015c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c4a:	6866      	ldr	r6, [r4, #4]
 8015c4c:	60a6      	str	r6, [r4, #8]
 8015c4e:	2e00      	cmp	r6, #0
 8015c50:	bfa2      	ittt	ge
 8015c52:	6821      	ldrge	r1, [r4, #0]
 8015c54:	f021 0104 	bicge.w	r1, r1, #4
 8015c58:	6021      	strge	r1, [r4, #0]
 8015c5a:	b90d      	cbnz	r5, 8015c60 <_printf_i+0x110>
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	d04b      	beq.n	8015cf8 <_printf_i+0x1a8>
 8015c60:	4616      	mov	r6, r2
 8015c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c66:	fb03 5711 	mls	r7, r3, r1, r5
 8015c6a:	5dc7      	ldrb	r7, [r0, r7]
 8015c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c70:	462f      	mov	r7, r5
 8015c72:	42bb      	cmp	r3, r7
 8015c74:	460d      	mov	r5, r1
 8015c76:	d9f4      	bls.n	8015c62 <_printf_i+0x112>
 8015c78:	2b08      	cmp	r3, #8
 8015c7a:	d10b      	bne.n	8015c94 <_printf_i+0x144>
 8015c7c:	6823      	ldr	r3, [r4, #0]
 8015c7e:	07df      	lsls	r7, r3, #31
 8015c80:	d508      	bpl.n	8015c94 <_printf_i+0x144>
 8015c82:	6923      	ldr	r3, [r4, #16]
 8015c84:	6861      	ldr	r1, [r4, #4]
 8015c86:	4299      	cmp	r1, r3
 8015c88:	bfde      	ittt	le
 8015c8a:	2330      	movle	r3, #48	@ 0x30
 8015c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c94:	1b92      	subs	r2, r2, r6
 8015c96:	6122      	str	r2, [r4, #16]
 8015c98:	f8cd a000 	str.w	sl, [sp]
 8015c9c:	464b      	mov	r3, r9
 8015c9e:	aa03      	add	r2, sp, #12
 8015ca0:	4621      	mov	r1, r4
 8015ca2:	4640      	mov	r0, r8
 8015ca4:	f7ff fee6 	bl	8015a74 <_printf_common>
 8015ca8:	3001      	adds	r0, #1
 8015caa:	d14a      	bne.n	8015d42 <_printf_i+0x1f2>
 8015cac:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb0:	b004      	add	sp, #16
 8015cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb6:	6823      	ldr	r3, [r4, #0]
 8015cb8:	f043 0320 	orr.w	r3, r3, #32
 8015cbc:	6023      	str	r3, [r4, #0]
 8015cbe:	4833      	ldr	r0, [pc, #204]	@ (8015d8c <_printf_i+0x23c>)
 8015cc0:	2778      	movs	r7, #120	@ 0x78
 8015cc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015cc6:	6823      	ldr	r3, [r4, #0]
 8015cc8:	6831      	ldr	r1, [r6, #0]
 8015cca:	061f      	lsls	r7, r3, #24
 8015ccc:	f851 5b04 	ldr.w	r5, [r1], #4
 8015cd0:	d402      	bmi.n	8015cd8 <_printf_i+0x188>
 8015cd2:	065f      	lsls	r7, r3, #25
 8015cd4:	bf48      	it	mi
 8015cd6:	b2ad      	uxthmi	r5, r5
 8015cd8:	6031      	str	r1, [r6, #0]
 8015cda:	07d9      	lsls	r1, r3, #31
 8015cdc:	bf44      	itt	mi
 8015cde:	f043 0320 	orrmi.w	r3, r3, #32
 8015ce2:	6023      	strmi	r3, [r4, #0]
 8015ce4:	b11d      	cbz	r5, 8015cee <_printf_i+0x19e>
 8015ce6:	2310      	movs	r3, #16
 8015ce8:	e7ac      	b.n	8015c44 <_printf_i+0xf4>
 8015cea:	4827      	ldr	r0, [pc, #156]	@ (8015d88 <_printf_i+0x238>)
 8015cec:	e7e9      	b.n	8015cc2 <_printf_i+0x172>
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	f023 0320 	bic.w	r3, r3, #32
 8015cf4:	6023      	str	r3, [r4, #0]
 8015cf6:	e7f6      	b.n	8015ce6 <_printf_i+0x196>
 8015cf8:	4616      	mov	r6, r2
 8015cfa:	e7bd      	b.n	8015c78 <_printf_i+0x128>
 8015cfc:	6833      	ldr	r3, [r6, #0]
 8015cfe:	6825      	ldr	r5, [r4, #0]
 8015d00:	6961      	ldr	r1, [r4, #20]
 8015d02:	1d18      	adds	r0, r3, #4
 8015d04:	6030      	str	r0, [r6, #0]
 8015d06:	062e      	lsls	r6, r5, #24
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	d501      	bpl.n	8015d10 <_printf_i+0x1c0>
 8015d0c:	6019      	str	r1, [r3, #0]
 8015d0e:	e002      	b.n	8015d16 <_printf_i+0x1c6>
 8015d10:	0668      	lsls	r0, r5, #25
 8015d12:	d5fb      	bpl.n	8015d0c <_printf_i+0x1bc>
 8015d14:	8019      	strh	r1, [r3, #0]
 8015d16:	2300      	movs	r3, #0
 8015d18:	6123      	str	r3, [r4, #16]
 8015d1a:	4616      	mov	r6, r2
 8015d1c:	e7bc      	b.n	8015c98 <_printf_i+0x148>
 8015d1e:	6833      	ldr	r3, [r6, #0]
 8015d20:	1d1a      	adds	r2, r3, #4
 8015d22:	6032      	str	r2, [r6, #0]
 8015d24:	681e      	ldr	r6, [r3, #0]
 8015d26:	6862      	ldr	r2, [r4, #4]
 8015d28:	2100      	movs	r1, #0
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f7ea fb00 	bl	8000330 <memchr>
 8015d30:	b108      	cbz	r0, 8015d36 <_printf_i+0x1e6>
 8015d32:	1b80      	subs	r0, r0, r6
 8015d34:	6060      	str	r0, [r4, #4]
 8015d36:	6863      	ldr	r3, [r4, #4]
 8015d38:	6123      	str	r3, [r4, #16]
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d40:	e7aa      	b.n	8015c98 <_printf_i+0x148>
 8015d42:	6923      	ldr	r3, [r4, #16]
 8015d44:	4632      	mov	r2, r6
 8015d46:	4649      	mov	r1, r9
 8015d48:	4640      	mov	r0, r8
 8015d4a:	47d0      	blx	sl
 8015d4c:	3001      	adds	r0, #1
 8015d4e:	d0ad      	beq.n	8015cac <_printf_i+0x15c>
 8015d50:	6823      	ldr	r3, [r4, #0]
 8015d52:	079b      	lsls	r3, r3, #30
 8015d54:	d413      	bmi.n	8015d7e <_printf_i+0x22e>
 8015d56:	68e0      	ldr	r0, [r4, #12]
 8015d58:	9b03      	ldr	r3, [sp, #12]
 8015d5a:	4298      	cmp	r0, r3
 8015d5c:	bfb8      	it	lt
 8015d5e:	4618      	movlt	r0, r3
 8015d60:	e7a6      	b.n	8015cb0 <_printf_i+0x160>
 8015d62:	2301      	movs	r3, #1
 8015d64:	4632      	mov	r2, r6
 8015d66:	4649      	mov	r1, r9
 8015d68:	4640      	mov	r0, r8
 8015d6a:	47d0      	blx	sl
 8015d6c:	3001      	adds	r0, #1
 8015d6e:	d09d      	beq.n	8015cac <_printf_i+0x15c>
 8015d70:	3501      	adds	r5, #1
 8015d72:	68e3      	ldr	r3, [r4, #12]
 8015d74:	9903      	ldr	r1, [sp, #12]
 8015d76:	1a5b      	subs	r3, r3, r1
 8015d78:	42ab      	cmp	r3, r5
 8015d7a:	dcf2      	bgt.n	8015d62 <_printf_i+0x212>
 8015d7c:	e7eb      	b.n	8015d56 <_printf_i+0x206>
 8015d7e:	2500      	movs	r5, #0
 8015d80:	f104 0619 	add.w	r6, r4, #25
 8015d84:	e7f5      	b.n	8015d72 <_printf_i+0x222>
 8015d86:	bf00      	nop
 8015d88:	08019a2b 	.word	0x08019a2b
 8015d8c:	08019a3c 	.word	0x08019a3c

08015d90 <std>:
 8015d90:	2300      	movs	r3, #0
 8015d92:	b510      	push	{r4, lr}
 8015d94:	4604      	mov	r4, r0
 8015d96:	e9c0 3300 	strd	r3, r3, [r0]
 8015d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d9e:	6083      	str	r3, [r0, #8]
 8015da0:	8181      	strh	r1, [r0, #12]
 8015da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8015da4:	81c2      	strh	r2, [r0, #14]
 8015da6:	6183      	str	r3, [r0, #24]
 8015da8:	4619      	mov	r1, r3
 8015daa:	2208      	movs	r2, #8
 8015dac:	305c      	adds	r0, #92	@ 0x5c
 8015dae:	f000 f914 	bl	8015fda <memset>
 8015db2:	4b0d      	ldr	r3, [pc, #52]	@ (8015de8 <std+0x58>)
 8015db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8015db6:	4b0d      	ldr	r3, [pc, #52]	@ (8015dec <std+0x5c>)
 8015db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015dba:	4b0d      	ldr	r3, [pc, #52]	@ (8015df0 <std+0x60>)
 8015dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8015df4 <std+0x64>)
 8015dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8015dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8015df8 <std+0x68>)
 8015dc4:	6224      	str	r4, [r4, #32]
 8015dc6:	429c      	cmp	r4, r3
 8015dc8:	d006      	beq.n	8015dd8 <std+0x48>
 8015dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015dce:	4294      	cmp	r4, r2
 8015dd0:	d002      	beq.n	8015dd8 <std+0x48>
 8015dd2:	33d0      	adds	r3, #208	@ 0xd0
 8015dd4:	429c      	cmp	r4, r3
 8015dd6:	d105      	bne.n	8015de4 <std+0x54>
 8015dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015de0:	f000 b996 	b.w	8016110 <__retarget_lock_init_recursive>
 8015de4:	bd10      	pop	{r4, pc}
 8015de6:	bf00      	nop
 8015de8:	08015f55 	.word	0x08015f55
 8015dec:	08015f77 	.word	0x08015f77
 8015df0:	08015faf 	.word	0x08015faf
 8015df4:	08015fd3 	.word	0x08015fd3
 8015df8:	24006b18 	.word	0x24006b18

08015dfc <stdio_exit_handler>:
 8015dfc:	4a02      	ldr	r2, [pc, #8]	@ (8015e08 <stdio_exit_handler+0xc>)
 8015dfe:	4903      	ldr	r1, [pc, #12]	@ (8015e0c <stdio_exit_handler+0x10>)
 8015e00:	4803      	ldr	r0, [pc, #12]	@ (8015e10 <stdio_exit_handler+0x14>)
 8015e02:	f000 b869 	b.w	8015ed8 <_fwalk_sglue>
 8015e06:	bf00      	nop
 8015e08:	24000104 	.word	0x24000104
 8015e0c:	080182cd 	.word	0x080182cd
 8015e10:	24000280 	.word	0x24000280

08015e14 <cleanup_stdio>:
 8015e14:	6841      	ldr	r1, [r0, #4]
 8015e16:	4b0c      	ldr	r3, [pc, #48]	@ (8015e48 <cleanup_stdio+0x34>)
 8015e18:	4299      	cmp	r1, r3
 8015e1a:	b510      	push	{r4, lr}
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	d001      	beq.n	8015e24 <cleanup_stdio+0x10>
 8015e20:	f002 fa54 	bl	80182cc <_fflush_r>
 8015e24:	68a1      	ldr	r1, [r4, #8]
 8015e26:	4b09      	ldr	r3, [pc, #36]	@ (8015e4c <cleanup_stdio+0x38>)
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	d002      	beq.n	8015e32 <cleanup_stdio+0x1e>
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f002 fa4d 	bl	80182cc <_fflush_r>
 8015e32:	68e1      	ldr	r1, [r4, #12]
 8015e34:	4b06      	ldr	r3, [pc, #24]	@ (8015e50 <cleanup_stdio+0x3c>)
 8015e36:	4299      	cmp	r1, r3
 8015e38:	d004      	beq.n	8015e44 <cleanup_stdio+0x30>
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e40:	f002 ba44 	b.w	80182cc <_fflush_r>
 8015e44:	bd10      	pop	{r4, pc}
 8015e46:	bf00      	nop
 8015e48:	24006b18 	.word	0x24006b18
 8015e4c:	24006b80 	.word	0x24006b80
 8015e50:	24006be8 	.word	0x24006be8

08015e54 <global_stdio_init.part.0>:
 8015e54:	b510      	push	{r4, lr}
 8015e56:	4b0b      	ldr	r3, [pc, #44]	@ (8015e84 <global_stdio_init.part.0+0x30>)
 8015e58:	4c0b      	ldr	r4, [pc, #44]	@ (8015e88 <global_stdio_init.part.0+0x34>)
 8015e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8015e8c <global_stdio_init.part.0+0x38>)
 8015e5c:	601a      	str	r2, [r3, #0]
 8015e5e:	4620      	mov	r0, r4
 8015e60:	2200      	movs	r2, #0
 8015e62:	2104      	movs	r1, #4
 8015e64:	f7ff ff94 	bl	8015d90 <std>
 8015e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	2109      	movs	r1, #9
 8015e70:	f7ff ff8e 	bl	8015d90 <std>
 8015e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015e78:	2202      	movs	r2, #2
 8015e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e7e:	2112      	movs	r1, #18
 8015e80:	f7ff bf86 	b.w	8015d90 <std>
 8015e84:	24006c50 	.word	0x24006c50
 8015e88:	24006b18 	.word	0x24006b18
 8015e8c:	08015dfd 	.word	0x08015dfd

08015e90 <__sfp_lock_acquire>:
 8015e90:	4801      	ldr	r0, [pc, #4]	@ (8015e98 <__sfp_lock_acquire+0x8>)
 8015e92:	f000 b93e 	b.w	8016112 <__retarget_lock_acquire_recursive>
 8015e96:	bf00      	nop
 8015e98:	24006c59 	.word	0x24006c59

08015e9c <__sfp_lock_release>:
 8015e9c:	4801      	ldr	r0, [pc, #4]	@ (8015ea4 <__sfp_lock_release+0x8>)
 8015e9e:	f000 b939 	b.w	8016114 <__retarget_lock_release_recursive>
 8015ea2:	bf00      	nop
 8015ea4:	24006c59 	.word	0x24006c59

08015ea8 <__sinit>:
 8015ea8:	b510      	push	{r4, lr}
 8015eaa:	4604      	mov	r4, r0
 8015eac:	f7ff fff0 	bl	8015e90 <__sfp_lock_acquire>
 8015eb0:	6a23      	ldr	r3, [r4, #32]
 8015eb2:	b11b      	cbz	r3, 8015ebc <__sinit+0x14>
 8015eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015eb8:	f7ff bff0 	b.w	8015e9c <__sfp_lock_release>
 8015ebc:	4b04      	ldr	r3, [pc, #16]	@ (8015ed0 <__sinit+0x28>)
 8015ebe:	6223      	str	r3, [r4, #32]
 8015ec0:	4b04      	ldr	r3, [pc, #16]	@ (8015ed4 <__sinit+0x2c>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d1f5      	bne.n	8015eb4 <__sinit+0xc>
 8015ec8:	f7ff ffc4 	bl	8015e54 <global_stdio_init.part.0>
 8015ecc:	e7f2      	b.n	8015eb4 <__sinit+0xc>
 8015ece:	bf00      	nop
 8015ed0:	08015e15 	.word	0x08015e15
 8015ed4:	24006c50 	.word	0x24006c50

08015ed8 <_fwalk_sglue>:
 8015ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015edc:	4607      	mov	r7, r0
 8015ede:	4688      	mov	r8, r1
 8015ee0:	4614      	mov	r4, r2
 8015ee2:	2600      	movs	r6, #0
 8015ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8015eec:	d505      	bpl.n	8015efa <_fwalk_sglue+0x22>
 8015eee:	6824      	ldr	r4, [r4, #0]
 8015ef0:	2c00      	cmp	r4, #0
 8015ef2:	d1f7      	bne.n	8015ee4 <_fwalk_sglue+0xc>
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015efa:	89ab      	ldrh	r3, [r5, #12]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d907      	bls.n	8015f10 <_fwalk_sglue+0x38>
 8015f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f04:	3301      	adds	r3, #1
 8015f06:	d003      	beq.n	8015f10 <_fwalk_sglue+0x38>
 8015f08:	4629      	mov	r1, r5
 8015f0a:	4638      	mov	r0, r7
 8015f0c:	47c0      	blx	r8
 8015f0e:	4306      	orrs	r6, r0
 8015f10:	3568      	adds	r5, #104	@ 0x68
 8015f12:	e7e9      	b.n	8015ee8 <_fwalk_sglue+0x10>

08015f14 <siprintf>:
 8015f14:	b40e      	push	{r1, r2, r3}
 8015f16:	b500      	push	{lr}
 8015f18:	b09c      	sub	sp, #112	@ 0x70
 8015f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8015f1c:	9002      	str	r0, [sp, #8]
 8015f1e:	9006      	str	r0, [sp, #24]
 8015f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015f24:	4809      	ldr	r0, [pc, #36]	@ (8015f4c <siprintf+0x38>)
 8015f26:	9107      	str	r1, [sp, #28]
 8015f28:	9104      	str	r1, [sp, #16]
 8015f2a:	4909      	ldr	r1, [pc, #36]	@ (8015f50 <siprintf+0x3c>)
 8015f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f30:	9105      	str	r1, [sp, #20]
 8015f32:	6800      	ldr	r0, [r0, #0]
 8015f34:	9301      	str	r3, [sp, #4]
 8015f36:	a902      	add	r1, sp, #8
 8015f38:	f002 f848 	bl	8017fcc <_svfiprintf_r>
 8015f3c:	9b02      	ldr	r3, [sp, #8]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	701a      	strb	r2, [r3, #0]
 8015f42:	b01c      	add	sp, #112	@ 0x70
 8015f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f48:	b003      	add	sp, #12
 8015f4a:	4770      	bx	lr
 8015f4c:	2400027c 	.word	0x2400027c
 8015f50:	ffff0208 	.word	0xffff0208

08015f54 <__sread>:
 8015f54:	b510      	push	{r4, lr}
 8015f56:	460c      	mov	r4, r1
 8015f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f5c:	f000 f88a 	bl	8016074 <_read_r>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	bfab      	itete	ge
 8015f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015f66:	89a3      	ldrhlt	r3, [r4, #12]
 8015f68:	181b      	addge	r3, r3, r0
 8015f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015f6e:	bfac      	ite	ge
 8015f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015f72:	81a3      	strhlt	r3, [r4, #12]
 8015f74:	bd10      	pop	{r4, pc}

08015f76 <__swrite>:
 8015f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f7a:	461f      	mov	r7, r3
 8015f7c:	898b      	ldrh	r3, [r1, #12]
 8015f7e:	05db      	lsls	r3, r3, #23
 8015f80:	4605      	mov	r5, r0
 8015f82:	460c      	mov	r4, r1
 8015f84:	4616      	mov	r6, r2
 8015f86:	d505      	bpl.n	8015f94 <__swrite+0x1e>
 8015f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f8c:	2302      	movs	r3, #2
 8015f8e:	2200      	movs	r2, #0
 8015f90:	f000 f85e 	bl	8016050 <_lseek_r>
 8015f94:	89a3      	ldrh	r3, [r4, #12]
 8015f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015f9e:	81a3      	strh	r3, [r4, #12]
 8015fa0:	4632      	mov	r2, r6
 8015fa2:	463b      	mov	r3, r7
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015faa:	f000 b875 	b.w	8016098 <_write_r>

08015fae <__sseek>:
 8015fae:	b510      	push	{r4, lr}
 8015fb0:	460c      	mov	r4, r1
 8015fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb6:	f000 f84b 	bl	8016050 <_lseek_r>
 8015fba:	1c43      	adds	r3, r0, #1
 8015fbc:	89a3      	ldrh	r3, [r4, #12]
 8015fbe:	bf15      	itete	ne
 8015fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015fca:	81a3      	strheq	r3, [r4, #12]
 8015fcc:	bf18      	it	ne
 8015fce:	81a3      	strhne	r3, [r4, #12]
 8015fd0:	bd10      	pop	{r4, pc}

08015fd2 <__sclose>:
 8015fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fd6:	f000 b82b 	b.w	8016030 <_close_r>

08015fda <memset>:
 8015fda:	4402      	add	r2, r0
 8015fdc:	4603      	mov	r3, r0
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d100      	bne.n	8015fe4 <memset+0xa>
 8015fe2:	4770      	bx	lr
 8015fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8015fe8:	e7f9      	b.n	8015fde <memset+0x4>

08015fea <strchr>:
 8015fea:	b2c9      	uxtb	r1, r1
 8015fec:	4603      	mov	r3, r0
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ff4:	b112      	cbz	r2, 8015ffc <strchr+0x12>
 8015ff6:	428a      	cmp	r2, r1
 8015ff8:	d1f9      	bne.n	8015fee <strchr+0x4>
 8015ffa:	4770      	bx	lr
 8015ffc:	2900      	cmp	r1, #0
 8015ffe:	bf18      	it	ne
 8016000:	2000      	movne	r0, #0
 8016002:	4770      	bx	lr

08016004 <strncmp>:
 8016004:	b510      	push	{r4, lr}
 8016006:	b16a      	cbz	r2, 8016024 <strncmp+0x20>
 8016008:	3901      	subs	r1, #1
 801600a:	1884      	adds	r4, r0, r2
 801600c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016010:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016014:	429a      	cmp	r2, r3
 8016016:	d103      	bne.n	8016020 <strncmp+0x1c>
 8016018:	42a0      	cmp	r0, r4
 801601a:	d001      	beq.n	8016020 <strncmp+0x1c>
 801601c:	2a00      	cmp	r2, #0
 801601e:	d1f5      	bne.n	801600c <strncmp+0x8>
 8016020:	1ad0      	subs	r0, r2, r3
 8016022:	bd10      	pop	{r4, pc}
 8016024:	4610      	mov	r0, r2
 8016026:	e7fc      	b.n	8016022 <strncmp+0x1e>

08016028 <_localeconv_r>:
 8016028:	4800      	ldr	r0, [pc, #0]	@ (801602c <_localeconv_r+0x4>)
 801602a:	4770      	bx	lr
 801602c:	24000200 	.word	0x24000200

08016030 <_close_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4d06      	ldr	r5, [pc, #24]	@ (801604c <_close_r+0x1c>)
 8016034:	2300      	movs	r3, #0
 8016036:	4604      	mov	r4, r0
 8016038:	4608      	mov	r0, r1
 801603a:	602b      	str	r3, [r5, #0]
 801603c:	f7ec f958 	bl	80022f0 <_close>
 8016040:	1c43      	adds	r3, r0, #1
 8016042:	d102      	bne.n	801604a <_close_r+0x1a>
 8016044:	682b      	ldr	r3, [r5, #0]
 8016046:	b103      	cbz	r3, 801604a <_close_r+0x1a>
 8016048:	6023      	str	r3, [r4, #0]
 801604a:	bd38      	pop	{r3, r4, r5, pc}
 801604c:	24006c54 	.word	0x24006c54

08016050 <_lseek_r>:
 8016050:	b538      	push	{r3, r4, r5, lr}
 8016052:	4d07      	ldr	r5, [pc, #28]	@ (8016070 <_lseek_r+0x20>)
 8016054:	4604      	mov	r4, r0
 8016056:	4608      	mov	r0, r1
 8016058:	4611      	mov	r1, r2
 801605a:	2200      	movs	r2, #0
 801605c:	602a      	str	r2, [r5, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	f7ec f96d 	bl	800233e <_lseek>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d102      	bne.n	801606e <_lseek_r+0x1e>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	b103      	cbz	r3, 801606e <_lseek_r+0x1e>
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	24006c54 	.word	0x24006c54

08016074 <_read_r>:
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	4d07      	ldr	r5, [pc, #28]	@ (8016094 <_read_r+0x20>)
 8016078:	4604      	mov	r4, r0
 801607a:	4608      	mov	r0, r1
 801607c:	4611      	mov	r1, r2
 801607e:	2200      	movs	r2, #0
 8016080:	602a      	str	r2, [r5, #0]
 8016082:	461a      	mov	r2, r3
 8016084:	f7ec f8fb 	bl	800227e <_read>
 8016088:	1c43      	adds	r3, r0, #1
 801608a:	d102      	bne.n	8016092 <_read_r+0x1e>
 801608c:	682b      	ldr	r3, [r5, #0]
 801608e:	b103      	cbz	r3, 8016092 <_read_r+0x1e>
 8016090:	6023      	str	r3, [r4, #0]
 8016092:	bd38      	pop	{r3, r4, r5, pc}
 8016094:	24006c54 	.word	0x24006c54

08016098 <_write_r>:
 8016098:	b538      	push	{r3, r4, r5, lr}
 801609a:	4d07      	ldr	r5, [pc, #28]	@ (80160b8 <_write_r+0x20>)
 801609c:	4604      	mov	r4, r0
 801609e:	4608      	mov	r0, r1
 80160a0:	4611      	mov	r1, r2
 80160a2:	2200      	movs	r2, #0
 80160a4:	602a      	str	r2, [r5, #0]
 80160a6:	461a      	mov	r2, r3
 80160a8:	f7ec f906 	bl	80022b8 <_write>
 80160ac:	1c43      	adds	r3, r0, #1
 80160ae:	d102      	bne.n	80160b6 <_write_r+0x1e>
 80160b0:	682b      	ldr	r3, [r5, #0]
 80160b2:	b103      	cbz	r3, 80160b6 <_write_r+0x1e>
 80160b4:	6023      	str	r3, [r4, #0]
 80160b6:	bd38      	pop	{r3, r4, r5, pc}
 80160b8:	24006c54 	.word	0x24006c54

080160bc <__errno>:
 80160bc:	4b01      	ldr	r3, [pc, #4]	@ (80160c4 <__errno+0x8>)
 80160be:	6818      	ldr	r0, [r3, #0]
 80160c0:	4770      	bx	lr
 80160c2:	bf00      	nop
 80160c4:	2400027c 	.word	0x2400027c

080160c8 <__libc_init_array>:
 80160c8:	b570      	push	{r4, r5, r6, lr}
 80160ca:	4d0d      	ldr	r5, [pc, #52]	@ (8016100 <__libc_init_array+0x38>)
 80160cc:	4c0d      	ldr	r4, [pc, #52]	@ (8016104 <__libc_init_array+0x3c>)
 80160ce:	1b64      	subs	r4, r4, r5
 80160d0:	10a4      	asrs	r4, r4, #2
 80160d2:	2600      	movs	r6, #0
 80160d4:	42a6      	cmp	r6, r4
 80160d6:	d109      	bne.n	80160ec <__libc_init_array+0x24>
 80160d8:	4d0b      	ldr	r5, [pc, #44]	@ (8016108 <__libc_init_array+0x40>)
 80160da:	4c0c      	ldr	r4, [pc, #48]	@ (801610c <__libc_init_array+0x44>)
 80160dc:	f003 fb18 	bl	8019710 <_init>
 80160e0:	1b64      	subs	r4, r4, r5
 80160e2:	10a4      	asrs	r4, r4, #2
 80160e4:	2600      	movs	r6, #0
 80160e6:	42a6      	cmp	r6, r4
 80160e8:	d105      	bne.n	80160f6 <__libc_init_array+0x2e>
 80160ea:	bd70      	pop	{r4, r5, r6, pc}
 80160ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80160f0:	4798      	blx	r3
 80160f2:	3601      	adds	r6, #1
 80160f4:	e7ee      	b.n	80160d4 <__libc_init_array+0xc>
 80160f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80160fa:	4798      	blx	r3
 80160fc:	3601      	adds	r6, #1
 80160fe:	e7f2      	b.n	80160e6 <__libc_init_array+0x1e>
 8016100:	0801a008 	.word	0x0801a008
 8016104:	0801a008 	.word	0x0801a008
 8016108:	0801a008 	.word	0x0801a008
 801610c:	0801a00c 	.word	0x0801a00c

08016110 <__retarget_lock_init_recursive>:
 8016110:	4770      	bx	lr

08016112 <__retarget_lock_acquire_recursive>:
 8016112:	4770      	bx	lr

08016114 <__retarget_lock_release_recursive>:
 8016114:	4770      	bx	lr

08016116 <memcpy>:
 8016116:	440a      	add	r2, r1
 8016118:	4291      	cmp	r1, r2
 801611a:	f100 33ff 	add.w	r3, r0, #4294967295
 801611e:	d100      	bne.n	8016122 <memcpy+0xc>
 8016120:	4770      	bx	lr
 8016122:	b510      	push	{r4, lr}
 8016124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016128:	f803 4f01 	strb.w	r4, [r3, #1]!
 801612c:	4291      	cmp	r1, r2
 801612e:	d1f9      	bne.n	8016124 <memcpy+0xe>
 8016130:	bd10      	pop	{r4, pc}
 8016132:	0000      	movs	r0, r0
 8016134:	0000      	movs	r0, r0
	...

08016138 <nan>:
 8016138:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016140 <nan+0x8>
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	00000000 	.word	0x00000000
 8016144:	7ff80000 	.word	0x7ff80000

08016148 <quorem>:
 8016148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614c:	6903      	ldr	r3, [r0, #16]
 801614e:	690c      	ldr	r4, [r1, #16]
 8016150:	42a3      	cmp	r3, r4
 8016152:	4607      	mov	r7, r0
 8016154:	db7e      	blt.n	8016254 <quorem+0x10c>
 8016156:	3c01      	subs	r4, #1
 8016158:	f101 0814 	add.w	r8, r1, #20
 801615c:	00a3      	lsls	r3, r4, #2
 801615e:	f100 0514 	add.w	r5, r0, #20
 8016162:	9300      	str	r3, [sp, #0]
 8016164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016168:	9301      	str	r3, [sp, #4]
 801616a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801616e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016172:	3301      	adds	r3, #1
 8016174:	429a      	cmp	r2, r3
 8016176:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801617a:	fbb2 f6f3 	udiv	r6, r2, r3
 801617e:	d32e      	bcc.n	80161de <quorem+0x96>
 8016180:	f04f 0a00 	mov.w	sl, #0
 8016184:	46c4      	mov	ip, r8
 8016186:	46ae      	mov	lr, r5
 8016188:	46d3      	mov	fp, sl
 801618a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801618e:	b298      	uxth	r0, r3
 8016190:	fb06 a000 	mla	r0, r6, r0, sl
 8016194:	0c02      	lsrs	r2, r0, #16
 8016196:	0c1b      	lsrs	r3, r3, #16
 8016198:	fb06 2303 	mla	r3, r6, r3, r2
 801619c:	f8de 2000 	ldr.w	r2, [lr]
 80161a0:	b280      	uxth	r0, r0
 80161a2:	b292      	uxth	r2, r2
 80161a4:	1a12      	subs	r2, r2, r0
 80161a6:	445a      	add	r2, fp
 80161a8:	f8de 0000 	ldr.w	r0, [lr]
 80161ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80161b0:	b29b      	uxth	r3, r3
 80161b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80161b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80161ba:	b292      	uxth	r2, r2
 80161bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80161c0:	45e1      	cmp	r9, ip
 80161c2:	f84e 2b04 	str.w	r2, [lr], #4
 80161c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80161ca:	d2de      	bcs.n	801618a <quorem+0x42>
 80161cc:	9b00      	ldr	r3, [sp, #0]
 80161ce:	58eb      	ldr	r3, [r5, r3]
 80161d0:	b92b      	cbnz	r3, 80161de <quorem+0x96>
 80161d2:	9b01      	ldr	r3, [sp, #4]
 80161d4:	3b04      	subs	r3, #4
 80161d6:	429d      	cmp	r5, r3
 80161d8:	461a      	mov	r2, r3
 80161da:	d32f      	bcc.n	801623c <quorem+0xf4>
 80161dc:	613c      	str	r4, [r7, #16]
 80161de:	4638      	mov	r0, r7
 80161e0:	f001 fca0 	bl	8017b24 <__mcmp>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	db25      	blt.n	8016234 <quorem+0xec>
 80161e8:	4629      	mov	r1, r5
 80161ea:	2000      	movs	r0, #0
 80161ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80161f0:	f8d1 c000 	ldr.w	ip, [r1]
 80161f4:	fa1f fe82 	uxth.w	lr, r2
 80161f8:	fa1f f38c 	uxth.w	r3, ip
 80161fc:	eba3 030e 	sub.w	r3, r3, lr
 8016200:	4403      	add	r3, r0
 8016202:	0c12      	lsrs	r2, r2, #16
 8016204:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016208:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801620c:	b29b      	uxth	r3, r3
 801620e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016212:	45c1      	cmp	r9, r8
 8016214:	f841 3b04 	str.w	r3, [r1], #4
 8016218:	ea4f 4022 	mov.w	r0, r2, asr #16
 801621c:	d2e6      	bcs.n	80161ec <quorem+0xa4>
 801621e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016226:	b922      	cbnz	r2, 8016232 <quorem+0xea>
 8016228:	3b04      	subs	r3, #4
 801622a:	429d      	cmp	r5, r3
 801622c:	461a      	mov	r2, r3
 801622e:	d30b      	bcc.n	8016248 <quorem+0x100>
 8016230:	613c      	str	r4, [r7, #16]
 8016232:	3601      	adds	r6, #1
 8016234:	4630      	mov	r0, r6
 8016236:	b003      	add	sp, #12
 8016238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623c:	6812      	ldr	r2, [r2, #0]
 801623e:	3b04      	subs	r3, #4
 8016240:	2a00      	cmp	r2, #0
 8016242:	d1cb      	bne.n	80161dc <quorem+0x94>
 8016244:	3c01      	subs	r4, #1
 8016246:	e7c6      	b.n	80161d6 <quorem+0x8e>
 8016248:	6812      	ldr	r2, [r2, #0]
 801624a:	3b04      	subs	r3, #4
 801624c:	2a00      	cmp	r2, #0
 801624e:	d1ef      	bne.n	8016230 <quorem+0xe8>
 8016250:	3c01      	subs	r4, #1
 8016252:	e7ea      	b.n	801622a <quorem+0xe2>
 8016254:	2000      	movs	r0, #0
 8016256:	e7ee      	b.n	8016236 <quorem+0xee>

08016258 <_dtoa_r>:
 8016258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625c:	ed2d 8b02 	vpush	{d8}
 8016260:	69c7      	ldr	r7, [r0, #28]
 8016262:	b091      	sub	sp, #68	@ 0x44
 8016264:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016268:	ec55 4b10 	vmov	r4, r5, d0
 801626c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801626e:	9107      	str	r1, [sp, #28]
 8016270:	4681      	mov	r9, r0
 8016272:	9209      	str	r2, [sp, #36]	@ 0x24
 8016274:	930d      	str	r3, [sp, #52]	@ 0x34
 8016276:	b97f      	cbnz	r7, 8016298 <_dtoa_r+0x40>
 8016278:	2010      	movs	r0, #16
 801627a:	f001 f8c7 	bl	801740c <malloc>
 801627e:	4602      	mov	r2, r0
 8016280:	f8c9 001c 	str.w	r0, [r9, #28]
 8016284:	b920      	cbnz	r0, 8016290 <_dtoa_r+0x38>
 8016286:	4ba0      	ldr	r3, [pc, #640]	@ (8016508 <_dtoa_r+0x2b0>)
 8016288:	21ef      	movs	r1, #239	@ 0xef
 801628a:	48a0      	ldr	r0, [pc, #640]	@ (801650c <_dtoa_r+0x2b4>)
 801628c:	f002 f870 	bl	8018370 <__assert_func>
 8016290:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016294:	6007      	str	r7, [r0, #0]
 8016296:	60c7      	str	r7, [r0, #12]
 8016298:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801629c:	6819      	ldr	r1, [r3, #0]
 801629e:	b159      	cbz	r1, 80162b8 <_dtoa_r+0x60>
 80162a0:	685a      	ldr	r2, [r3, #4]
 80162a2:	604a      	str	r2, [r1, #4]
 80162a4:	2301      	movs	r3, #1
 80162a6:	4093      	lsls	r3, r2
 80162a8:	608b      	str	r3, [r1, #8]
 80162aa:	4648      	mov	r0, r9
 80162ac:	f001 f9b6 	bl	801761c <_Bfree>
 80162b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80162b4:	2200      	movs	r2, #0
 80162b6:	601a      	str	r2, [r3, #0]
 80162b8:	1e2b      	subs	r3, r5, #0
 80162ba:	bfbb      	ittet	lt
 80162bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80162c0:	9303      	strlt	r3, [sp, #12]
 80162c2:	2300      	movge	r3, #0
 80162c4:	2201      	movlt	r2, #1
 80162c6:	bfac      	ite	ge
 80162c8:	6033      	strge	r3, [r6, #0]
 80162ca:	6032      	strlt	r2, [r6, #0]
 80162cc:	4b90      	ldr	r3, [pc, #576]	@ (8016510 <_dtoa_r+0x2b8>)
 80162ce:	9e03      	ldr	r6, [sp, #12]
 80162d0:	43b3      	bics	r3, r6
 80162d2:	d110      	bne.n	80162f6 <_dtoa_r+0x9e>
 80162d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80162d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80162da:	6013      	str	r3, [r2, #0]
 80162dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80162e0:	4323      	orrs	r3, r4
 80162e2:	f000 84de 	beq.w	8016ca2 <_dtoa_r+0xa4a>
 80162e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80162e8:	4f8a      	ldr	r7, [pc, #552]	@ (8016514 <_dtoa_r+0x2bc>)
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f000 84e0 	beq.w	8016cb0 <_dtoa_r+0xa58>
 80162f0:	1cfb      	adds	r3, r7, #3
 80162f2:	f000 bcdb 	b.w	8016cac <_dtoa_r+0xa54>
 80162f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80162fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80162fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016302:	d10a      	bne.n	801631a <_dtoa_r+0xc2>
 8016304:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016306:	2301      	movs	r3, #1
 8016308:	6013      	str	r3, [r2, #0]
 801630a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801630c:	b113      	cbz	r3, 8016314 <_dtoa_r+0xbc>
 801630e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016310:	4b81      	ldr	r3, [pc, #516]	@ (8016518 <_dtoa_r+0x2c0>)
 8016312:	6013      	str	r3, [r2, #0]
 8016314:	4f81      	ldr	r7, [pc, #516]	@ (801651c <_dtoa_r+0x2c4>)
 8016316:	f000 bccb 	b.w	8016cb0 <_dtoa_r+0xa58>
 801631a:	aa0e      	add	r2, sp, #56	@ 0x38
 801631c:	a90f      	add	r1, sp, #60	@ 0x3c
 801631e:	4648      	mov	r0, r9
 8016320:	eeb0 0b48 	vmov.f64	d0, d8
 8016324:	f001 fd1e 	bl	8017d64 <__d2b>
 8016328:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801632c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801632e:	9001      	str	r0, [sp, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d045      	beq.n	80163c0 <_dtoa_r+0x168>
 8016334:	eeb0 7b48 	vmov.f64	d7, d8
 8016338:	ee18 1a90 	vmov	r1, s17
 801633c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016340:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8016344:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016348:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801634c:	2500      	movs	r5, #0
 801634e:	ee07 1a90 	vmov	s15, r1
 8016352:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016356:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80164f0 <_dtoa_r+0x298>
 801635a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801635e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80164f8 <_dtoa_r+0x2a0>
 8016362:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016366:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016500 <_dtoa_r+0x2a8>
 801636a:	ee07 3a90 	vmov	s15, r3
 801636e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016372:	eeb0 7b46 	vmov.f64	d7, d6
 8016376:	eea4 7b05 	vfma.f64	d7, d4, d5
 801637a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801637e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016386:	ee16 8a90 	vmov	r8, s13
 801638a:	d508      	bpl.n	801639e <_dtoa_r+0x146>
 801638c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016390:	eeb4 6b47 	vcmp.f64	d6, d7
 8016394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016398:	bf18      	it	ne
 801639a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801639e:	f1b8 0f16 	cmp.w	r8, #22
 80163a2:	d82b      	bhi.n	80163fc <_dtoa_r+0x1a4>
 80163a4:	495e      	ldr	r1, [pc, #376]	@ (8016520 <_dtoa_r+0x2c8>)
 80163a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80163aa:	ed91 7b00 	vldr	d7, [r1]
 80163ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80163b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b6:	d501      	bpl.n	80163bc <_dtoa_r+0x164>
 80163b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80163bc:	2100      	movs	r1, #0
 80163be:	e01e      	b.n	80163fe <_dtoa_r+0x1a6>
 80163c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163c2:	4413      	add	r3, r2
 80163c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80163c8:	2920      	cmp	r1, #32
 80163ca:	bfc1      	itttt	gt
 80163cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80163d0:	408e      	lslgt	r6, r1
 80163d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80163d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80163da:	bfd6      	itet	le
 80163dc:	f1c1 0120 	rsble	r1, r1, #32
 80163e0:	4331      	orrgt	r1, r6
 80163e2:	fa04 f101 	lslle.w	r1, r4, r1
 80163e6:	ee07 1a90 	vmov	s15, r1
 80163ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80163ee:	3b01      	subs	r3, #1
 80163f0:	ee17 1a90 	vmov	r1, s15
 80163f4:	2501      	movs	r5, #1
 80163f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80163fa:	e7a8      	b.n	801634e <_dtoa_r+0xf6>
 80163fc:	2101      	movs	r1, #1
 80163fe:	1ad2      	subs	r2, r2, r3
 8016400:	1e53      	subs	r3, r2, #1
 8016402:	9306      	str	r3, [sp, #24]
 8016404:	bf45      	ittet	mi
 8016406:	f1c2 0301 	rsbmi	r3, r2, #1
 801640a:	9305      	strmi	r3, [sp, #20]
 801640c:	2300      	movpl	r3, #0
 801640e:	2300      	movmi	r3, #0
 8016410:	bf4c      	ite	mi
 8016412:	9306      	strmi	r3, [sp, #24]
 8016414:	9305      	strpl	r3, [sp, #20]
 8016416:	f1b8 0f00 	cmp.w	r8, #0
 801641a:	910c      	str	r1, [sp, #48]	@ 0x30
 801641c:	db18      	blt.n	8016450 <_dtoa_r+0x1f8>
 801641e:	9b06      	ldr	r3, [sp, #24]
 8016420:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8016424:	4443      	add	r3, r8
 8016426:	9306      	str	r3, [sp, #24]
 8016428:	2300      	movs	r3, #0
 801642a:	9a07      	ldr	r2, [sp, #28]
 801642c:	2a09      	cmp	r2, #9
 801642e:	d849      	bhi.n	80164c4 <_dtoa_r+0x26c>
 8016430:	2a05      	cmp	r2, #5
 8016432:	bfc4      	itt	gt
 8016434:	3a04      	subgt	r2, #4
 8016436:	9207      	strgt	r2, [sp, #28]
 8016438:	9a07      	ldr	r2, [sp, #28]
 801643a:	f1a2 0202 	sub.w	r2, r2, #2
 801643e:	bfcc      	ite	gt
 8016440:	2400      	movgt	r4, #0
 8016442:	2401      	movle	r4, #1
 8016444:	2a03      	cmp	r2, #3
 8016446:	d848      	bhi.n	80164da <_dtoa_r+0x282>
 8016448:	e8df f002 	tbb	[pc, r2]
 801644c:	3a2c2e0b 	.word	0x3a2c2e0b
 8016450:	9b05      	ldr	r3, [sp, #20]
 8016452:	2200      	movs	r2, #0
 8016454:	eba3 0308 	sub.w	r3, r3, r8
 8016458:	9305      	str	r3, [sp, #20]
 801645a:	920a      	str	r2, [sp, #40]	@ 0x28
 801645c:	f1c8 0300 	rsb	r3, r8, #0
 8016460:	e7e3      	b.n	801642a <_dtoa_r+0x1d2>
 8016462:	2200      	movs	r2, #0
 8016464:	9208      	str	r2, [sp, #32]
 8016466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016468:	2a00      	cmp	r2, #0
 801646a:	dc39      	bgt.n	80164e0 <_dtoa_r+0x288>
 801646c:	f04f 0b01 	mov.w	fp, #1
 8016470:	46da      	mov	sl, fp
 8016472:	465a      	mov	r2, fp
 8016474:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016478:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801647c:	2100      	movs	r1, #0
 801647e:	2004      	movs	r0, #4
 8016480:	f100 0614 	add.w	r6, r0, #20
 8016484:	4296      	cmp	r6, r2
 8016486:	d930      	bls.n	80164ea <_dtoa_r+0x292>
 8016488:	6079      	str	r1, [r7, #4]
 801648a:	4648      	mov	r0, r9
 801648c:	9304      	str	r3, [sp, #16]
 801648e:	f001 f885 	bl	801759c <_Balloc>
 8016492:	9b04      	ldr	r3, [sp, #16]
 8016494:	4607      	mov	r7, r0
 8016496:	2800      	cmp	r0, #0
 8016498:	d146      	bne.n	8016528 <_dtoa_r+0x2d0>
 801649a:	4b22      	ldr	r3, [pc, #136]	@ (8016524 <_dtoa_r+0x2cc>)
 801649c:	4602      	mov	r2, r0
 801649e:	f240 11af 	movw	r1, #431	@ 0x1af
 80164a2:	e6f2      	b.n	801628a <_dtoa_r+0x32>
 80164a4:	2201      	movs	r2, #1
 80164a6:	e7dd      	b.n	8016464 <_dtoa_r+0x20c>
 80164a8:	2200      	movs	r2, #0
 80164aa:	9208      	str	r2, [sp, #32]
 80164ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164ae:	eb08 0b02 	add.w	fp, r8, r2
 80164b2:	f10b 0a01 	add.w	sl, fp, #1
 80164b6:	4652      	mov	r2, sl
 80164b8:	2a01      	cmp	r2, #1
 80164ba:	bfb8      	it	lt
 80164bc:	2201      	movlt	r2, #1
 80164be:	e7db      	b.n	8016478 <_dtoa_r+0x220>
 80164c0:	2201      	movs	r2, #1
 80164c2:	e7f2      	b.n	80164aa <_dtoa_r+0x252>
 80164c4:	2401      	movs	r4, #1
 80164c6:	2200      	movs	r2, #0
 80164c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80164cc:	f04f 3bff 	mov.w	fp, #4294967295
 80164d0:	2100      	movs	r1, #0
 80164d2:	46da      	mov	sl, fp
 80164d4:	2212      	movs	r2, #18
 80164d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80164d8:	e7ce      	b.n	8016478 <_dtoa_r+0x220>
 80164da:	2201      	movs	r2, #1
 80164dc:	9208      	str	r2, [sp, #32]
 80164de:	e7f5      	b.n	80164cc <_dtoa_r+0x274>
 80164e0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80164e4:	46da      	mov	sl, fp
 80164e6:	465a      	mov	r2, fp
 80164e8:	e7c6      	b.n	8016478 <_dtoa_r+0x220>
 80164ea:	3101      	adds	r1, #1
 80164ec:	0040      	lsls	r0, r0, #1
 80164ee:	e7c7      	b.n	8016480 <_dtoa_r+0x228>
 80164f0:	636f4361 	.word	0x636f4361
 80164f4:	3fd287a7 	.word	0x3fd287a7
 80164f8:	8b60c8b3 	.word	0x8b60c8b3
 80164fc:	3fc68a28 	.word	0x3fc68a28
 8016500:	509f79fb 	.word	0x509f79fb
 8016504:	3fd34413 	.word	0x3fd34413
 8016508:	08019a62 	.word	0x08019a62
 801650c:	08019a79 	.word	0x08019a79
 8016510:	7ff00000 	.word	0x7ff00000
 8016514:	08019a5e 	.word	0x08019a5e
 8016518:	08019a2a 	.word	0x08019a2a
 801651c:	08019a29 	.word	0x08019a29
 8016520:	08019bd0 	.word	0x08019bd0
 8016524:	08019ad1 	.word	0x08019ad1
 8016528:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801652c:	f1ba 0f0e 	cmp.w	sl, #14
 8016530:	6010      	str	r0, [r2, #0]
 8016532:	d86f      	bhi.n	8016614 <_dtoa_r+0x3bc>
 8016534:	2c00      	cmp	r4, #0
 8016536:	d06d      	beq.n	8016614 <_dtoa_r+0x3bc>
 8016538:	f1b8 0f00 	cmp.w	r8, #0
 801653c:	f340 80c2 	ble.w	80166c4 <_dtoa_r+0x46c>
 8016540:	4aca      	ldr	r2, [pc, #808]	@ (801686c <_dtoa_r+0x614>)
 8016542:	f008 010f 	and.w	r1, r8, #15
 8016546:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801654a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801654e:	ed92 7b00 	vldr	d7, [r2]
 8016552:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016556:	f000 80a9 	beq.w	80166ac <_dtoa_r+0x454>
 801655a:	4ac5      	ldr	r2, [pc, #788]	@ (8016870 <_dtoa_r+0x618>)
 801655c:	ed92 6b08 	vldr	d6, [r2, #32]
 8016560:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016564:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016568:	f001 010f 	and.w	r1, r1, #15
 801656c:	2203      	movs	r2, #3
 801656e:	48c0      	ldr	r0, [pc, #768]	@ (8016870 <_dtoa_r+0x618>)
 8016570:	2900      	cmp	r1, #0
 8016572:	f040 809d 	bne.w	80166b0 <_dtoa_r+0x458>
 8016576:	ed9d 6b02 	vldr	d6, [sp, #8]
 801657a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801657e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016582:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016584:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016588:	2900      	cmp	r1, #0
 801658a:	f000 80c1 	beq.w	8016710 <_dtoa_r+0x4b8>
 801658e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016592:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659a:	f140 80b9 	bpl.w	8016710 <_dtoa_r+0x4b8>
 801659e:	f1ba 0f00 	cmp.w	sl, #0
 80165a2:	f000 80b5 	beq.w	8016710 <_dtoa_r+0x4b8>
 80165a6:	f1bb 0f00 	cmp.w	fp, #0
 80165aa:	dd31      	ble.n	8016610 <_dtoa_r+0x3b8>
 80165ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80165b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80165b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80165bc:	9104      	str	r1, [sp, #16]
 80165be:	3201      	adds	r2, #1
 80165c0:	465c      	mov	r4, fp
 80165c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80165c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80165ca:	ee07 2a90 	vmov	s15, r2
 80165ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80165d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80165d6:	ee15 2a90 	vmov	r2, s11
 80165da:	ec51 0b15 	vmov	r0, r1, d5
 80165de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80165e2:	2c00      	cmp	r4, #0
 80165e4:	f040 8098 	bne.w	8016718 <_dtoa_r+0x4c0>
 80165e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80165ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80165f0:	ec41 0b17 	vmov	d7, r0, r1
 80165f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80165f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165fc:	f300 8261 	bgt.w	8016ac2 <_dtoa_r+0x86a>
 8016600:	eeb1 7b47 	vneg.f64	d7, d7
 8016604:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660c:	f100 80f5 	bmi.w	80167fa <_dtoa_r+0x5a2>
 8016610:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016614:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016616:	2a00      	cmp	r2, #0
 8016618:	f2c0 812c 	blt.w	8016874 <_dtoa_r+0x61c>
 801661c:	f1b8 0f0e 	cmp.w	r8, #14
 8016620:	f300 8128 	bgt.w	8016874 <_dtoa_r+0x61c>
 8016624:	4b91      	ldr	r3, [pc, #580]	@ (801686c <_dtoa_r+0x614>)
 8016626:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801662a:	ed93 6b00 	vldr	d6, [r3]
 801662e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016630:	2b00      	cmp	r3, #0
 8016632:	da03      	bge.n	801663c <_dtoa_r+0x3e4>
 8016634:	f1ba 0f00 	cmp.w	sl, #0
 8016638:	f340 80d2 	ble.w	80167e0 <_dtoa_r+0x588>
 801663c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016640:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016644:	463e      	mov	r6, r7
 8016646:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801664a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801664e:	ee15 3a10 	vmov	r3, s10
 8016652:	3330      	adds	r3, #48	@ 0x30
 8016654:	f806 3b01 	strb.w	r3, [r6], #1
 8016658:	1bf3      	subs	r3, r6, r7
 801665a:	459a      	cmp	sl, r3
 801665c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016660:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016664:	f040 80f8 	bne.w	8016858 <_dtoa_r+0x600>
 8016668:	ee37 7b07 	vadd.f64	d7, d7, d7
 801666c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016674:	f300 80dd 	bgt.w	8016832 <_dtoa_r+0x5da>
 8016678:	eeb4 7b46 	vcmp.f64	d7, d6
 801667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016680:	d104      	bne.n	801668c <_dtoa_r+0x434>
 8016682:	ee15 3a10 	vmov	r3, s10
 8016686:	07db      	lsls	r3, r3, #31
 8016688:	f100 80d3 	bmi.w	8016832 <_dtoa_r+0x5da>
 801668c:	9901      	ldr	r1, [sp, #4]
 801668e:	4648      	mov	r0, r9
 8016690:	f000 ffc4 	bl	801761c <_Bfree>
 8016694:	2300      	movs	r3, #0
 8016696:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016698:	7033      	strb	r3, [r6, #0]
 801669a:	f108 0301 	add.w	r3, r8, #1
 801669e:	6013      	str	r3, [r2, #0]
 80166a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	f000 8304 	beq.w	8016cb0 <_dtoa_r+0xa58>
 80166a8:	601e      	str	r6, [r3, #0]
 80166aa:	e301      	b.n	8016cb0 <_dtoa_r+0xa58>
 80166ac:	2202      	movs	r2, #2
 80166ae:	e75e      	b.n	801656e <_dtoa_r+0x316>
 80166b0:	07cc      	lsls	r4, r1, #31
 80166b2:	d504      	bpl.n	80166be <_dtoa_r+0x466>
 80166b4:	ed90 6b00 	vldr	d6, [r0]
 80166b8:	3201      	adds	r2, #1
 80166ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166be:	1049      	asrs	r1, r1, #1
 80166c0:	3008      	adds	r0, #8
 80166c2:	e755      	b.n	8016570 <_dtoa_r+0x318>
 80166c4:	d022      	beq.n	801670c <_dtoa_r+0x4b4>
 80166c6:	f1c8 0100 	rsb	r1, r8, #0
 80166ca:	4a68      	ldr	r2, [pc, #416]	@ (801686c <_dtoa_r+0x614>)
 80166cc:	f001 000f 	and.w	r0, r1, #15
 80166d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80166d4:	ed92 7b00 	vldr	d7, [r2]
 80166d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80166dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80166e0:	4863      	ldr	r0, [pc, #396]	@ (8016870 <_dtoa_r+0x618>)
 80166e2:	1109      	asrs	r1, r1, #4
 80166e4:	2400      	movs	r4, #0
 80166e6:	2202      	movs	r2, #2
 80166e8:	b929      	cbnz	r1, 80166f6 <_dtoa_r+0x49e>
 80166ea:	2c00      	cmp	r4, #0
 80166ec:	f43f af49 	beq.w	8016582 <_dtoa_r+0x32a>
 80166f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80166f4:	e745      	b.n	8016582 <_dtoa_r+0x32a>
 80166f6:	07ce      	lsls	r6, r1, #31
 80166f8:	d505      	bpl.n	8016706 <_dtoa_r+0x4ae>
 80166fa:	ed90 6b00 	vldr	d6, [r0]
 80166fe:	3201      	adds	r2, #1
 8016700:	2401      	movs	r4, #1
 8016702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016706:	1049      	asrs	r1, r1, #1
 8016708:	3008      	adds	r0, #8
 801670a:	e7ed      	b.n	80166e8 <_dtoa_r+0x490>
 801670c:	2202      	movs	r2, #2
 801670e:	e738      	b.n	8016582 <_dtoa_r+0x32a>
 8016710:	f8cd 8010 	str.w	r8, [sp, #16]
 8016714:	4654      	mov	r4, sl
 8016716:	e754      	b.n	80165c2 <_dtoa_r+0x36a>
 8016718:	4a54      	ldr	r2, [pc, #336]	@ (801686c <_dtoa_r+0x614>)
 801671a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801671e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016722:	9a08      	ldr	r2, [sp, #32]
 8016724:	ec41 0b17 	vmov	d7, r0, r1
 8016728:	443c      	add	r4, r7
 801672a:	b34a      	cbz	r2, 8016780 <_dtoa_r+0x528>
 801672c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8016730:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8016734:	463e      	mov	r6, r7
 8016736:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801673a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801673e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016742:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016746:	ee14 2a90 	vmov	r2, s9
 801674a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801674e:	3230      	adds	r2, #48	@ 0x30
 8016750:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016754:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801675c:	f806 2b01 	strb.w	r2, [r6], #1
 8016760:	d438      	bmi.n	80167d4 <_dtoa_r+0x57c>
 8016762:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016766:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	d462      	bmi.n	8016836 <_dtoa_r+0x5de>
 8016770:	42a6      	cmp	r6, r4
 8016772:	f43f af4d 	beq.w	8016610 <_dtoa_r+0x3b8>
 8016776:	ee27 7b03 	vmul.f64	d7, d7, d3
 801677a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801677e:	e7e0      	b.n	8016742 <_dtoa_r+0x4ea>
 8016780:	4621      	mov	r1, r4
 8016782:	463e      	mov	r6, r7
 8016784:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016788:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801678c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016790:	ee14 2a90 	vmov	r2, s9
 8016794:	3230      	adds	r2, #48	@ 0x30
 8016796:	f806 2b01 	strb.w	r2, [r6], #1
 801679a:	42a6      	cmp	r6, r4
 801679c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80167a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80167a4:	d119      	bne.n	80167da <_dtoa_r+0x582>
 80167a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80167aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80167ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80167b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b6:	dc3e      	bgt.n	8016836 <_dtoa_r+0x5de>
 80167b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80167bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80167c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c4:	f57f af24 	bpl.w	8016610 <_dtoa_r+0x3b8>
 80167c8:	460e      	mov	r6, r1
 80167ca:	3901      	subs	r1, #1
 80167cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80167d0:	2b30      	cmp	r3, #48	@ 0x30
 80167d2:	d0f9      	beq.n	80167c8 <_dtoa_r+0x570>
 80167d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80167d8:	e758      	b.n	801668c <_dtoa_r+0x434>
 80167da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80167de:	e7d5      	b.n	801678c <_dtoa_r+0x534>
 80167e0:	d10b      	bne.n	80167fa <_dtoa_r+0x5a2>
 80167e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80167e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80167ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80167ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80167f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f6:	f2c0 8161 	blt.w	8016abc <_dtoa_r+0x864>
 80167fa:	2400      	movs	r4, #0
 80167fc:	4625      	mov	r5, r4
 80167fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016800:	43db      	mvns	r3, r3
 8016802:	9304      	str	r3, [sp, #16]
 8016804:	463e      	mov	r6, r7
 8016806:	f04f 0800 	mov.w	r8, #0
 801680a:	4621      	mov	r1, r4
 801680c:	4648      	mov	r0, r9
 801680e:	f000 ff05 	bl	801761c <_Bfree>
 8016812:	2d00      	cmp	r5, #0
 8016814:	d0de      	beq.n	80167d4 <_dtoa_r+0x57c>
 8016816:	f1b8 0f00 	cmp.w	r8, #0
 801681a:	d005      	beq.n	8016828 <_dtoa_r+0x5d0>
 801681c:	45a8      	cmp	r8, r5
 801681e:	d003      	beq.n	8016828 <_dtoa_r+0x5d0>
 8016820:	4641      	mov	r1, r8
 8016822:	4648      	mov	r0, r9
 8016824:	f000 fefa 	bl	801761c <_Bfree>
 8016828:	4629      	mov	r1, r5
 801682a:	4648      	mov	r0, r9
 801682c:	f000 fef6 	bl	801761c <_Bfree>
 8016830:	e7d0      	b.n	80167d4 <_dtoa_r+0x57c>
 8016832:	f8cd 8010 	str.w	r8, [sp, #16]
 8016836:	4633      	mov	r3, r6
 8016838:	461e      	mov	r6, r3
 801683a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801683e:	2a39      	cmp	r2, #57	@ 0x39
 8016840:	d106      	bne.n	8016850 <_dtoa_r+0x5f8>
 8016842:	429f      	cmp	r7, r3
 8016844:	d1f8      	bne.n	8016838 <_dtoa_r+0x5e0>
 8016846:	9a04      	ldr	r2, [sp, #16]
 8016848:	3201      	adds	r2, #1
 801684a:	9204      	str	r2, [sp, #16]
 801684c:	2230      	movs	r2, #48	@ 0x30
 801684e:	703a      	strb	r2, [r7, #0]
 8016850:	781a      	ldrb	r2, [r3, #0]
 8016852:	3201      	adds	r2, #1
 8016854:	701a      	strb	r2, [r3, #0]
 8016856:	e7bd      	b.n	80167d4 <_dtoa_r+0x57c>
 8016858:	ee27 7b04 	vmul.f64	d7, d7, d4
 801685c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016864:	f47f aeef 	bne.w	8016646 <_dtoa_r+0x3ee>
 8016868:	e710      	b.n	801668c <_dtoa_r+0x434>
 801686a:	bf00      	nop
 801686c:	08019bd0 	.word	0x08019bd0
 8016870:	08019ba8 	.word	0x08019ba8
 8016874:	9908      	ldr	r1, [sp, #32]
 8016876:	2900      	cmp	r1, #0
 8016878:	f000 80e3 	beq.w	8016a42 <_dtoa_r+0x7ea>
 801687c:	9907      	ldr	r1, [sp, #28]
 801687e:	2901      	cmp	r1, #1
 8016880:	f300 80c8 	bgt.w	8016a14 <_dtoa_r+0x7bc>
 8016884:	2d00      	cmp	r5, #0
 8016886:	f000 80c1 	beq.w	8016a0c <_dtoa_r+0x7b4>
 801688a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801688e:	9e05      	ldr	r6, [sp, #20]
 8016890:	461c      	mov	r4, r3
 8016892:	9304      	str	r3, [sp, #16]
 8016894:	9b05      	ldr	r3, [sp, #20]
 8016896:	4413      	add	r3, r2
 8016898:	9305      	str	r3, [sp, #20]
 801689a:	9b06      	ldr	r3, [sp, #24]
 801689c:	2101      	movs	r1, #1
 801689e:	4413      	add	r3, r2
 80168a0:	4648      	mov	r0, r9
 80168a2:	9306      	str	r3, [sp, #24]
 80168a4:	f000 ffb8 	bl	8017818 <__i2b>
 80168a8:	9b04      	ldr	r3, [sp, #16]
 80168aa:	4605      	mov	r5, r0
 80168ac:	b166      	cbz	r6, 80168c8 <_dtoa_r+0x670>
 80168ae:	9a06      	ldr	r2, [sp, #24]
 80168b0:	2a00      	cmp	r2, #0
 80168b2:	dd09      	ble.n	80168c8 <_dtoa_r+0x670>
 80168b4:	42b2      	cmp	r2, r6
 80168b6:	9905      	ldr	r1, [sp, #20]
 80168b8:	bfa8      	it	ge
 80168ba:	4632      	movge	r2, r6
 80168bc:	1a89      	subs	r1, r1, r2
 80168be:	9105      	str	r1, [sp, #20]
 80168c0:	9906      	ldr	r1, [sp, #24]
 80168c2:	1ab6      	subs	r6, r6, r2
 80168c4:	1a8a      	subs	r2, r1, r2
 80168c6:	9206      	str	r2, [sp, #24]
 80168c8:	b1fb      	cbz	r3, 801690a <_dtoa_r+0x6b2>
 80168ca:	9a08      	ldr	r2, [sp, #32]
 80168cc:	2a00      	cmp	r2, #0
 80168ce:	f000 80bc 	beq.w	8016a4a <_dtoa_r+0x7f2>
 80168d2:	b19c      	cbz	r4, 80168fc <_dtoa_r+0x6a4>
 80168d4:	4629      	mov	r1, r5
 80168d6:	4622      	mov	r2, r4
 80168d8:	4648      	mov	r0, r9
 80168da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168dc:	f001 f85c 	bl	8017998 <__pow5mult>
 80168e0:	9a01      	ldr	r2, [sp, #4]
 80168e2:	4601      	mov	r1, r0
 80168e4:	4605      	mov	r5, r0
 80168e6:	4648      	mov	r0, r9
 80168e8:	f000 ffac 	bl	8017844 <__multiply>
 80168ec:	9901      	ldr	r1, [sp, #4]
 80168ee:	9004      	str	r0, [sp, #16]
 80168f0:	4648      	mov	r0, r9
 80168f2:	f000 fe93 	bl	801761c <_Bfree>
 80168f6:	9a04      	ldr	r2, [sp, #16]
 80168f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80168fa:	9201      	str	r2, [sp, #4]
 80168fc:	1b1a      	subs	r2, r3, r4
 80168fe:	d004      	beq.n	801690a <_dtoa_r+0x6b2>
 8016900:	9901      	ldr	r1, [sp, #4]
 8016902:	4648      	mov	r0, r9
 8016904:	f001 f848 	bl	8017998 <__pow5mult>
 8016908:	9001      	str	r0, [sp, #4]
 801690a:	2101      	movs	r1, #1
 801690c:	4648      	mov	r0, r9
 801690e:	f000 ff83 	bl	8017818 <__i2b>
 8016912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016914:	4604      	mov	r4, r0
 8016916:	2b00      	cmp	r3, #0
 8016918:	f000 81d0 	beq.w	8016cbc <_dtoa_r+0xa64>
 801691c:	461a      	mov	r2, r3
 801691e:	4601      	mov	r1, r0
 8016920:	4648      	mov	r0, r9
 8016922:	f001 f839 	bl	8017998 <__pow5mult>
 8016926:	9b07      	ldr	r3, [sp, #28]
 8016928:	2b01      	cmp	r3, #1
 801692a:	4604      	mov	r4, r0
 801692c:	f300 8095 	bgt.w	8016a5a <_dtoa_r+0x802>
 8016930:	9b02      	ldr	r3, [sp, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	f040 808b 	bne.w	8016a4e <_dtoa_r+0x7f6>
 8016938:	9b03      	ldr	r3, [sp, #12]
 801693a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801693e:	2a00      	cmp	r2, #0
 8016940:	f040 8087 	bne.w	8016a52 <_dtoa_r+0x7fa>
 8016944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016948:	0d12      	lsrs	r2, r2, #20
 801694a:	0512      	lsls	r2, r2, #20
 801694c:	2a00      	cmp	r2, #0
 801694e:	f000 8082 	beq.w	8016a56 <_dtoa_r+0x7fe>
 8016952:	9b05      	ldr	r3, [sp, #20]
 8016954:	3301      	adds	r3, #1
 8016956:	9305      	str	r3, [sp, #20]
 8016958:	9b06      	ldr	r3, [sp, #24]
 801695a:	3301      	adds	r3, #1
 801695c:	9306      	str	r3, [sp, #24]
 801695e:	2301      	movs	r3, #1
 8016960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016964:	2b00      	cmp	r3, #0
 8016966:	f000 81af 	beq.w	8016cc8 <_dtoa_r+0xa70>
 801696a:	6922      	ldr	r2, [r4, #16]
 801696c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016970:	6910      	ldr	r0, [r2, #16]
 8016972:	f000 ff05 	bl	8017780 <__hi0bits>
 8016976:	f1c0 0020 	rsb	r0, r0, #32
 801697a:	9b06      	ldr	r3, [sp, #24]
 801697c:	4418      	add	r0, r3
 801697e:	f010 001f 	ands.w	r0, r0, #31
 8016982:	d076      	beq.n	8016a72 <_dtoa_r+0x81a>
 8016984:	f1c0 0220 	rsb	r2, r0, #32
 8016988:	2a04      	cmp	r2, #4
 801698a:	dd69      	ble.n	8016a60 <_dtoa_r+0x808>
 801698c:	9b05      	ldr	r3, [sp, #20]
 801698e:	f1c0 001c 	rsb	r0, r0, #28
 8016992:	4403      	add	r3, r0
 8016994:	9305      	str	r3, [sp, #20]
 8016996:	9b06      	ldr	r3, [sp, #24]
 8016998:	4406      	add	r6, r0
 801699a:	4403      	add	r3, r0
 801699c:	9306      	str	r3, [sp, #24]
 801699e:	9b05      	ldr	r3, [sp, #20]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	dd05      	ble.n	80169b0 <_dtoa_r+0x758>
 80169a4:	9901      	ldr	r1, [sp, #4]
 80169a6:	461a      	mov	r2, r3
 80169a8:	4648      	mov	r0, r9
 80169aa:	f001 f84f 	bl	8017a4c <__lshift>
 80169ae:	9001      	str	r0, [sp, #4]
 80169b0:	9b06      	ldr	r3, [sp, #24]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	dd05      	ble.n	80169c2 <_dtoa_r+0x76a>
 80169b6:	4621      	mov	r1, r4
 80169b8:	461a      	mov	r2, r3
 80169ba:	4648      	mov	r0, r9
 80169bc:	f001 f846 	bl	8017a4c <__lshift>
 80169c0:	4604      	mov	r4, r0
 80169c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d056      	beq.n	8016a76 <_dtoa_r+0x81e>
 80169c8:	9801      	ldr	r0, [sp, #4]
 80169ca:	4621      	mov	r1, r4
 80169cc:	f001 f8aa 	bl	8017b24 <__mcmp>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	da50      	bge.n	8016a76 <_dtoa_r+0x81e>
 80169d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80169d8:	9304      	str	r3, [sp, #16]
 80169da:	9901      	ldr	r1, [sp, #4]
 80169dc:	2300      	movs	r3, #0
 80169de:	220a      	movs	r2, #10
 80169e0:	4648      	mov	r0, r9
 80169e2:	f000 fe3d 	bl	8017660 <__multadd>
 80169e6:	9b08      	ldr	r3, [sp, #32]
 80169e8:	9001      	str	r0, [sp, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f000 816e 	beq.w	8016ccc <_dtoa_r+0xa74>
 80169f0:	4629      	mov	r1, r5
 80169f2:	2300      	movs	r3, #0
 80169f4:	220a      	movs	r2, #10
 80169f6:	4648      	mov	r0, r9
 80169f8:	f000 fe32 	bl	8017660 <__multadd>
 80169fc:	f1bb 0f00 	cmp.w	fp, #0
 8016a00:	4605      	mov	r5, r0
 8016a02:	dc64      	bgt.n	8016ace <_dtoa_r+0x876>
 8016a04:	9b07      	ldr	r3, [sp, #28]
 8016a06:	2b02      	cmp	r3, #2
 8016a08:	dc3e      	bgt.n	8016a88 <_dtoa_r+0x830>
 8016a0a:	e060      	b.n	8016ace <_dtoa_r+0x876>
 8016a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016a0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016a12:	e73c      	b.n	801688e <_dtoa_r+0x636>
 8016a14:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016a18:	42a3      	cmp	r3, r4
 8016a1a:	bfbf      	itttt	lt
 8016a1c:	1ae2      	sublt	r2, r4, r3
 8016a1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016a20:	189b      	addlt	r3, r3, r2
 8016a22:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8016a24:	bfae      	itee	ge
 8016a26:	1b1c      	subge	r4, r3, r4
 8016a28:	4623      	movlt	r3, r4
 8016a2a:	2400      	movlt	r4, #0
 8016a2c:	f1ba 0f00 	cmp.w	sl, #0
 8016a30:	bfb5      	itete	lt
 8016a32:	9a05      	ldrlt	r2, [sp, #20]
 8016a34:	9e05      	ldrge	r6, [sp, #20]
 8016a36:	eba2 060a 	sublt.w	r6, r2, sl
 8016a3a:	4652      	movge	r2, sl
 8016a3c:	bfb8      	it	lt
 8016a3e:	2200      	movlt	r2, #0
 8016a40:	e727      	b.n	8016892 <_dtoa_r+0x63a>
 8016a42:	9e05      	ldr	r6, [sp, #20]
 8016a44:	9d08      	ldr	r5, [sp, #32]
 8016a46:	461c      	mov	r4, r3
 8016a48:	e730      	b.n	80168ac <_dtoa_r+0x654>
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	e758      	b.n	8016900 <_dtoa_r+0x6a8>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	e786      	b.n	8016960 <_dtoa_r+0x708>
 8016a52:	9b02      	ldr	r3, [sp, #8]
 8016a54:	e784      	b.n	8016960 <_dtoa_r+0x708>
 8016a56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016a58:	e783      	b.n	8016962 <_dtoa_r+0x70a>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016a5e:	e784      	b.n	801696a <_dtoa_r+0x712>
 8016a60:	d09d      	beq.n	801699e <_dtoa_r+0x746>
 8016a62:	9b05      	ldr	r3, [sp, #20]
 8016a64:	321c      	adds	r2, #28
 8016a66:	4413      	add	r3, r2
 8016a68:	9305      	str	r3, [sp, #20]
 8016a6a:	9b06      	ldr	r3, [sp, #24]
 8016a6c:	4416      	add	r6, r2
 8016a6e:	4413      	add	r3, r2
 8016a70:	e794      	b.n	801699c <_dtoa_r+0x744>
 8016a72:	4602      	mov	r2, r0
 8016a74:	e7f5      	b.n	8016a62 <_dtoa_r+0x80a>
 8016a76:	f1ba 0f00 	cmp.w	sl, #0
 8016a7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8016a7e:	46d3      	mov	fp, sl
 8016a80:	dc21      	bgt.n	8016ac6 <_dtoa_r+0x86e>
 8016a82:	9b07      	ldr	r3, [sp, #28]
 8016a84:	2b02      	cmp	r3, #2
 8016a86:	dd1e      	ble.n	8016ac6 <_dtoa_r+0x86e>
 8016a88:	f1bb 0f00 	cmp.w	fp, #0
 8016a8c:	f47f aeb7 	bne.w	80167fe <_dtoa_r+0x5a6>
 8016a90:	4621      	mov	r1, r4
 8016a92:	465b      	mov	r3, fp
 8016a94:	2205      	movs	r2, #5
 8016a96:	4648      	mov	r0, r9
 8016a98:	f000 fde2 	bl	8017660 <__multadd>
 8016a9c:	4601      	mov	r1, r0
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	9801      	ldr	r0, [sp, #4]
 8016aa2:	f001 f83f 	bl	8017b24 <__mcmp>
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	f77f aea9 	ble.w	80167fe <_dtoa_r+0x5a6>
 8016aac:	463e      	mov	r6, r7
 8016aae:	2331      	movs	r3, #49	@ 0x31
 8016ab0:	f806 3b01 	strb.w	r3, [r6], #1
 8016ab4:	9b04      	ldr	r3, [sp, #16]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	9304      	str	r3, [sp, #16]
 8016aba:	e6a4      	b.n	8016806 <_dtoa_r+0x5ae>
 8016abc:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ac0:	4654      	mov	r4, sl
 8016ac2:	4625      	mov	r5, r4
 8016ac4:	e7f2      	b.n	8016aac <_dtoa_r+0x854>
 8016ac6:	9b08      	ldr	r3, [sp, #32]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f000 8103 	beq.w	8016cd4 <_dtoa_r+0xa7c>
 8016ace:	2e00      	cmp	r6, #0
 8016ad0:	dd05      	ble.n	8016ade <_dtoa_r+0x886>
 8016ad2:	4629      	mov	r1, r5
 8016ad4:	4632      	mov	r2, r6
 8016ad6:	4648      	mov	r0, r9
 8016ad8:	f000 ffb8 	bl	8017a4c <__lshift>
 8016adc:	4605      	mov	r5, r0
 8016ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d058      	beq.n	8016b96 <_dtoa_r+0x93e>
 8016ae4:	6869      	ldr	r1, [r5, #4]
 8016ae6:	4648      	mov	r0, r9
 8016ae8:	f000 fd58 	bl	801759c <_Balloc>
 8016aec:	4606      	mov	r6, r0
 8016aee:	b928      	cbnz	r0, 8016afc <_dtoa_r+0x8a4>
 8016af0:	4b82      	ldr	r3, [pc, #520]	@ (8016cfc <_dtoa_r+0xaa4>)
 8016af2:	4602      	mov	r2, r0
 8016af4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016af8:	f7ff bbc7 	b.w	801628a <_dtoa_r+0x32>
 8016afc:	692a      	ldr	r2, [r5, #16]
 8016afe:	3202      	adds	r2, #2
 8016b00:	0092      	lsls	r2, r2, #2
 8016b02:	f105 010c 	add.w	r1, r5, #12
 8016b06:	300c      	adds	r0, #12
 8016b08:	f7ff fb05 	bl	8016116 <memcpy>
 8016b0c:	2201      	movs	r2, #1
 8016b0e:	4631      	mov	r1, r6
 8016b10:	4648      	mov	r0, r9
 8016b12:	f000 ff9b 	bl	8017a4c <__lshift>
 8016b16:	1c7b      	adds	r3, r7, #1
 8016b18:	9305      	str	r3, [sp, #20]
 8016b1a:	eb07 030b 	add.w	r3, r7, fp
 8016b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b20:	9b02      	ldr	r3, [sp, #8]
 8016b22:	f003 0301 	and.w	r3, r3, #1
 8016b26:	46a8      	mov	r8, r5
 8016b28:	9308      	str	r3, [sp, #32]
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	9b05      	ldr	r3, [sp, #20]
 8016b2e:	9801      	ldr	r0, [sp, #4]
 8016b30:	4621      	mov	r1, r4
 8016b32:	f103 3bff 	add.w	fp, r3, #4294967295
 8016b36:	f7ff fb07 	bl	8016148 <quorem>
 8016b3a:	4641      	mov	r1, r8
 8016b3c:	9002      	str	r0, [sp, #8]
 8016b3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016b42:	9801      	ldr	r0, [sp, #4]
 8016b44:	f000 ffee 	bl	8017b24 <__mcmp>
 8016b48:	462a      	mov	r2, r5
 8016b4a:	9006      	str	r0, [sp, #24]
 8016b4c:	4621      	mov	r1, r4
 8016b4e:	4648      	mov	r0, r9
 8016b50:	f001 f804 	bl	8017b5c <__mdiff>
 8016b54:	68c2      	ldr	r2, [r0, #12]
 8016b56:	4606      	mov	r6, r0
 8016b58:	b9fa      	cbnz	r2, 8016b9a <_dtoa_r+0x942>
 8016b5a:	4601      	mov	r1, r0
 8016b5c:	9801      	ldr	r0, [sp, #4]
 8016b5e:	f000 ffe1 	bl	8017b24 <__mcmp>
 8016b62:	4602      	mov	r2, r0
 8016b64:	4631      	mov	r1, r6
 8016b66:	4648      	mov	r0, r9
 8016b68:	920a      	str	r2, [sp, #40]	@ 0x28
 8016b6a:	f000 fd57 	bl	801761c <_Bfree>
 8016b6e:	9b07      	ldr	r3, [sp, #28]
 8016b70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016b72:	9e05      	ldr	r6, [sp, #20]
 8016b74:	ea43 0102 	orr.w	r1, r3, r2
 8016b78:	9b08      	ldr	r3, [sp, #32]
 8016b7a:	4319      	orrs	r1, r3
 8016b7c:	d10f      	bne.n	8016b9e <_dtoa_r+0x946>
 8016b7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016b82:	d028      	beq.n	8016bd6 <_dtoa_r+0x97e>
 8016b84:	9b06      	ldr	r3, [sp, #24]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	dd02      	ble.n	8016b90 <_dtoa_r+0x938>
 8016b8a:	9b02      	ldr	r3, [sp, #8]
 8016b8c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016b90:	f88b a000 	strb.w	sl, [fp]
 8016b94:	e639      	b.n	801680a <_dtoa_r+0x5b2>
 8016b96:	4628      	mov	r0, r5
 8016b98:	e7bd      	b.n	8016b16 <_dtoa_r+0x8be>
 8016b9a:	2201      	movs	r2, #1
 8016b9c:	e7e2      	b.n	8016b64 <_dtoa_r+0x90c>
 8016b9e:	9b06      	ldr	r3, [sp, #24]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	db04      	blt.n	8016bae <_dtoa_r+0x956>
 8016ba4:	9907      	ldr	r1, [sp, #28]
 8016ba6:	430b      	orrs	r3, r1
 8016ba8:	9908      	ldr	r1, [sp, #32]
 8016baa:	430b      	orrs	r3, r1
 8016bac:	d120      	bne.n	8016bf0 <_dtoa_r+0x998>
 8016bae:	2a00      	cmp	r2, #0
 8016bb0:	ddee      	ble.n	8016b90 <_dtoa_r+0x938>
 8016bb2:	9901      	ldr	r1, [sp, #4]
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	4648      	mov	r0, r9
 8016bb8:	f000 ff48 	bl	8017a4c <__lshift>
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	9001      	str	r0, [sp, #4]
 8016bc0:	f000 ffb0 	bl	8017b24 <__mcmp>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	dc03      	bgt.n	8016bd0 <_dtoa_r+0x978>
 8016bc8:	d1e2      	bne.n	8016b90 <_dtoa_r+0x938>
 8016bca:	f01a 0f01 	tst.w	sl, #1
 8016bce:	d0df      	beq.n	8016b90 <_dtoa_r+0x938>
 8016bd0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016bd4:	d1d9      	bne.n	8016b8a <_dtoa_r+0x932>
 8016bd6:	2339      	movs	r3, #57	@ 0x39
 8016bd8:	f88b 3000 	strb.w	r3, [fp]
 8016bdc:	4633      	mov	r3, r6
 8016bde:	461e      	mov	r6, r3
 8016be0:	3b01      	subs	r3, #1
 8016be2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016be6:	2a39      	cmp	r2, #57	@ 0x39
 8016be8:	d053      	beq.n	8016c92 <_dtoa_r+0xa3a>
 8016bea:	3201      	adds	r2, #1
 8016bec:	701a      	strb	r2, [r3, #0]
 8016bee:	e60c      	b.n	801680a <_dtoa_r+0x5b2>
 8016bf0:	2a00      	cmp	r2, #0
 8016bf2:	dd07      	ble.n	8016c04 <_dtoa_r+0x9ac>
 8016bf4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016bf8:	d0ed      	beq.n	8016bd6 <_dtoa_r+0x97e>
 8016bfa:	f10a 0301 	add.w	r3, sl, #1
 8016bfe:	f88b 3000 	strb.w	r3, [fp]
 8016c02:	e602      	b.n	801680a <_dtoa_r+0x5b2>
 8016c04:	9b05      	ldr	r3, [sp, #20]
 8016c06:	9a05      	ldr	r2, [sp, #20]
 8016c08:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c0e:	4293      	cmp	r3, r2
 8016c10:	d029      	beq.n	8016c66 <_dtoa_r+0xa0e>
 8016c12:	9901      	ldr	r1, [sp, #4]
 8016c14:	2300      	movs	r3, #0
 8016c16:	220a      	movs	r2, #10
 8016c18:	4648      	mov	r0, r9
 8016c1a:	f000 fd21 	bl	8017660 <__multadd>
 8016c1e:	45a8      	cmp	r8, r5
 8016c20:	9001      	str	r0, [sp, #4]
 8016c22:	f04f 0300 	mov.w	r3, #0
 8016c26:	f04f 020a 	mov.w	r2, #10
 8016c2a:	4641      	mov	r1, r8
 8016c2c:	4648      	mov	r0, r9
 8016c2e:	d107      	bne.n	8016c40 <_dtoa_r+0x9e8>
 8016c30:	f000 fd16 	bl	8017660 <__multadd>
 8016c34:	4680      	mov	r8, r0
 8016c36:	4605      	mov	r5, r0
 8016c38:	9b05      	ldr	r3, [sp, #20]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	9305      	str	r3, [sp, #20]
 8016c3e:	e775      	b.n	8016b2c <_dtoa_r+0x8d4>
 8016c40:	f000 fd0e 	bl	8017660 <__multadd>
 8016c44:	4629      	mov	r1, r5
 8016c46:	4680      	mov	r8, r0
 8016c48:	2300      	movs	r3, #0
 8016c4a:	220a      	movs	r2, #10
 8016c4c:	4648      	mov	r0, r9
 8016c4e:	f000 fd07 	bl	8017660 <__multadd>
 8016c52:	4605      	mov	r5, r0
 8016c54:	e7f0      	b.n	8016c38 <_dtoa_r+0x9e0>
 8016c56:	f1bb 0f00 	cmp.w	fp, #0
 8016c5a:	bfcc      	ite	gt
 8016c5c:	465e      	movgt	r6, fp
 8016c5e:	2601      	movle	r6, #1
 8016c60:	443e      	add	r6, r7
 8016c62:	f04f 0800 	mov.w	r8, #0
 8016c66:	9901      	ldr	r1, [sp, #4]
 8016c68:	2201      	movs	r2, #1
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	f000 feee 	bl	8017a4c <__lshift>
 8016c70:	4621      	mov	r1, r4
 8016c72:	9001      	str	r0, [sp, #4]
 8016c74:	f000 ff56 	bl	8017b24 <__mcmp>
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	dcaf      	bgt.n	8016bdc <_dtoa_r+0x984>
 8016c7c:	d102      	bne.n	8016c84 <_dtoa_r+0xa2c>
 8016c7e:	f01a 0f01 	tst.w	sl, #1
 8016c82:	d1ab      	bne.n	8016bdc <_dtoa_r+0x984>
 8016c84:	4633      	mov	r3, r6
 8016c86:	461e      	mov	r6, r3
 8016c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016c8c:	2a30      	cmp	r2, #48	@ 0x30
 8016c8e:	d0fa      	beq.n	8016c86 <_dtoa_r+0xa2e>
 8016c90:	e5bb      	b.n	801680a <_dtoa_r+0x5b2>
 8016c92:	429f      	cmp	r7, r3
 8016c94:	d1a3      	bne.n	8016bde <_dtoa_r+0x986>
 8016c96:	9b04      	ldr	r3, [sp, #16]
 8016c98:	3301      	adds	r3, #1
 8016c9a:	9304      	str	r3, [sp, #16]
 8016c9c:	2331      	movs	r3, #49	@ 0x31
 8016c9e:	703b      	strb	r3, [r7, #0]
 8016ca0:	e5b3      	b.n	801680a <_dtoa_r+0x5b2>
 8016ca2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016ca4:	4f16      	ldr	r7, [pc, #88]	@ (8016d00 <_dtoa_r+0xaa8>)
 8016ca6:	b11b      	cbz	r3, 8016cb0 <_dtoa_r+0xa58>
 8016ca8:	f107 0308 	add.w	r3, r7, #8
 8016cac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016cae:	6013      	str	r3, [r2, #0]
 8016cb0:	4638      	mov	r0, r7
 8016cb2:	b011      	add	sp, #68	@ 0x44
 8016cb4:	ecbd 8b02 	vpop	{d8}
 8016cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cbc:	9b07      	ldr	r3, [sp, #28]
 8016cbe:	2b01      	cmp	r3, #1
 8016cc0:	f77f ae36 	ble.w	8016930 <_dtoa_r+0x6d8>
 8016cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016cc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cc8:	2001      	movs	r0, #1
 8016cca:	e656      	b.n	801697a <_dtoa_r+0x722>
 8016ccc:	f1bb 0f00 	cmp.w	fp, #0
 8016cd0:	f77f aed7 	ble.w	8016a82 <_dtoa_r+0x82a>
 8016cd4:	463e      	mov	r6, r7
 8016cd6:	9801      	ldr	r0, [sp, #4]
 8016cd8:	4621      	mov	r1, r4
 8016cda:	f7ff fa35 	bl	8016148 <quorem>
 8016cde:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016ce2:	f806 ab01 	strb.w	sl, [r6], #1
 8016ce6:	1bf2      	subs	r2, r6, r7
 8016ce8:	4593      	cmp	fp, r2
 8016cea:	ddb4      	ble.n	8016c56 <_dtoa_r+0x9fe>
 8016cec:	9901      	ldr	r1, [sp, #4]
 8016cee:	2300      	movs	r3, #0
 8016cf0:	220a      	movs	r2, #10
 8016cf2:	4648      	mov	r0, r9
 8016cf4:	f000 fcb4 	bl	8017660 <__multadd>
 8016cf8:	9001      	str	r0, [sp, #4]
 8016cfa:	e7ec      	b.n	8016cd6 <_dtoa_r+0xa7e>
 8016cfc:	08019ad1 	.word	0x08019ad1
 8016d00:	08019a55 	.word	0x08019a55

08016d04 <_free_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4605      	mov	r5, r0
 8016d08:	2900      	cmp	r1, #0
 8016d0a:	d041      	beq.n	8016d90 <_free_r+0x8c>
 8016d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d10:	1f0c      	subs	r4, r1, #4
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	bfb8      	it	lt
 8016d16:	18e4      	addlt	r4, r4, r3
 8016d18:	f000 fc34 	bl	8017584 <__malloc_lock>
 8016d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8016d94 <_free_r+0x90>)
 8016d1e:	6813      	ldr	r3, [r2, #0]
 8016d20:	b933      	cbnz	r3, 8016d30 <_free_r+0x2c>
 8016d22:	6063      	str	r3, [r4, #4]
 8016d24:	6014      	str	r4, [r2, #0]
 8016d26:	4628      	mov	r0, r5
 8016d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d2c:	f000 bc30 	b.w	8017590 <__malloc_unlock>
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	d908      	bls.n	8016d46 <_free_r+0x42>
 8016d34:	6820      	ldr	r0, [r4, #0]
 8016d36:	1821      	adds	r1, r4, r0
 8016d38:	428b      	cmp	r3, r1
 8016d3a:	bf01      	itttt	eq
 8016d3c:	6819      	ldreq	r1, [r3, #0]
 8016d3e:	685b      	ldreq	r3, [r3, #4]
 8016d40:	1809      	addeq	r1, r1, r0
 8016d42:	6021      	streq	r1, [r4, #0]
 8016d44:	e7ed      	b.n	8016d22 <_free_r+0x1e>
 8016d46:	461a      	mov	r2, r3
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	b10b      	cbz	r3, 8016d50 <_free_r+0x4c>
 8016d4c:	42a3      	cmp	r3, r4
 8016d4e:	d9fa      	bls.n	8016d46 <_free_r+0x42>
 8016d50:	6811      	ldr	r1, [r2, #0]
 8016d52:	1850      	adds	r0, r2, r1
 8016d54:	42a0      	cmp	r0, r4
 8016d56:	d10b      	bne.n	8016d70 <_free_r+0x6c>
 8016d58:	6820      	ldr	r0, [r4, #0]
 8016d5a:	4401      	add	r1, r0
 8016d5c:	1850      	adds	r0, r2, r1
 8016d5e:	4283      	cmp	r3, r0
 8016d60:	6011      	str	r1, [r2, #0]
 8016d62:	d1e0      	bne.n	8016d26 <_free_r+0x22>
 8016d64:	6818      	ldr	r0, [r3, #0]
 8016d66:	685b      	ldr	r3, [r3, #4]
 8016d68:	6053      	str	r3, [r2, #4]
 8016d6a:	4408      	add	r0, r1
 8016d6c:	6010      	str	r0, [r2, #0]
 8016d6e:	e7da      	b.n	8016d26 <_free_r+0x22>
 8016d70:	d902      	bls.n	8016d78 <_free_r+0x74>
 8016d72:	230c      	movs	r3, #12
 8016d74:	602b      	str	r3, [r5, #0]
 8016d76:	e7d6      	b.n	8016d26 <_free_r+0x22>
 8016d78:	6820      	ldr	r0, [r4, #0]
 8016d7a:	1821      	adds	r1, r4, r0
 8016d7c:	428b      	cmp	r3, r1
 8016d7e:	bf04      	itt	eq
 8016d80:	6819      	ldreq	r1, [r3, #0]
 8016d82:	685b      	ldreq	r3, [r3, #4]
 8016d84:	6063      	str	r3, [r4, #4]
 8016d86:	bf04      	itt	eq
 8016d88:	1809      	addeq	r1, r1, r0
 8016d8a:	6021      	streq	r1, [r4, #0]
 8016d8c:	6054      	str	r4, [r2, #4]
 8016d8e:	e7ca      	b.n	8016d26 <_free_r+0x22>
 8016d90:	bd38      	pop	{r3, r4, r5, pc}
 8016d92:	bf00      	nop
 8016d94:	24006c60 	.word	0x24006c60

08016d98 <rshift>:
 8016d98:	6903      	ldr	r3, [r0, #16]
 8016d9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016d9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016da2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016da6:	f100 0414 	add.w	r4, r0, #20
 8016daa:	dd45      	ble.n	8016e38 <rshift+0xa0>
 8016dac:	f011 011f 	ands.w	r1, r1, #31
 8016db0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016db4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016db8:	d10c      	bne.n	8016dd4 <rshift+0x3c>
 8016dba:	f100 0710 	add.w	r7, r0, #16
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	42b1      	cmp	r1, r6
 8016dc2:	d334      	bcc.n	8016e2e <rshift+0x96>
 8016dc4:	1a9b      	subs	r3, r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	1eea      	subs	r2, r5, #3
 8016dca:	4296      	cmp	r6, r2
 8016dcc:	bf38      	it	cc
 8016dce:	2300      	movcc	r3, #0
 8016dd0:	4423      	add	r3, r4
 8016dd2:	e015      	b.n	8016e00 <rshift+0x68>
 8016dd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016dd8:	f1c1 0820 	rsb	r8, r1, #32
 8016ddc:	40cf      	lsrs	r7, r1
 8016dde:	f105 0e04 	add.w	lr, r5, #4
 8016de2:	46a1      	mov	r9, r4
 8016de4:	4576      	cmp	r6, lr
 8016de6:	46f4      	mov	ip, lr
 8016de8:	d815      	bhi.n	8016e16 <rshift+0x7e>
 8016dea:	1a9a      	subs	r2, r3, r2
 8016dec:	0092      	lsls	r2, r2, #2
 8016dee:	3a04      	subs	r2, #4
 8016df0:	3501      	adds	r5, #1
 8016df2:	42ae      	cmp	r6, r5
 8016df4:	bf38      	it	cc
 8016df6:	2200      	movcc	r2, #0
 8016df8:	18a3      	adds	r3, r4, r2
 8016dfa:	50a7      	str	r7, [r4, r2]
 8016dfc:	b107      	cbz	r7, 8016e00 <rshift+0x68>
 8016dfe:	3304      	adds	r3, #4
 8016e00:	1b1a      	subs	r2, r3, r4
 8016e02:	42a3      	cmp	r3, r4
 8016e04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016e08:	bf08      	it	eq
 8016e0a:	2300      	moveq	r3, #0
 8016e0c:	6102      	str	r2, [r0, #16]
 8016e0e:	bf08      	it	eq
 8016e10:	6143      	streq	r3, [r0, #20]
 8016e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e16:	f8dc c000 	ldr.w	ip, [ip]
 8016e1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8016e1e:	ea4c 0707 	orr.w	r7, ip, r7
 8016e22:	f849 7b04 	str.w	r7, [r9], #4
 8016e26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016e2a:	40cf      	lsrs	r7, r1
 8016e2c:	e7da      	b.n	8016de4 <rshift+0x4c>
 8016e2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016e32:	f847 cf04 	str.w	ip, [r7, #4]!
 8016e36:	e7c3      	b.n	8016dc0 <rshift+0x28>
 8016e38:	4623      	mov	r3, r4
 8016e3a:	e7e1      	b.n	8016e00 <rshift+0x68>

08016e3c <__hexdig_fun>:
 8016e3c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016e40:	2b09      	cmp	r3, #9
 8016e42:	d802      	bhi.n	8016e4a <__hexdig_fun+0xe>
 8016e44:	3820      	subs	r0, #32
 8016e46:	b2c0      	uxtb	r0, r0
 8016e48:	4770      	bx	lr
 8016e4a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016e4e:	2b05      	cmp	r3, #5
 8016e50:	d801      	bhi.n	8016e56 <__hexdig_fun+0x1a>
 8016e52:	3847      	subs	r0, #71	@ 0x47
 8016e54:	e7f7      	b.n	8016e46 <__hexdig_fun+0xa>
 8016e56:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016e5a:	2b05      	cmp	r3, #5
 8016e5c:	d801      	bhi.n	8016e62 <__hexdig_fun+0x26>
 8016e5e:	3827      	subs	r0, #39	@ 0x27
 8016e60:	e7f1      	b.n	8016e46 <__hexdig_fun+0xa>
 8016e62:	2000      	movs	r0, #0
 8016e64:	4770      	bx	lr
	...

08016e68 <__gethex>:
 8016e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e6c:	b085      	sub	sp, #20
 8016e6e:	468a      	mov	sl, r1
 8016e70:	9302      	str	r3, [sp, #8]
 8016e72:	680b      	ldr	r3, [r1, #0]
 8016e74:	9001      	str	r0, [sp, #4]
 8016e76:	4690      	mov	r8, r2
 8016e78:	1c9c      	adds	r4, r3, #2
 8016e7a:	46a1      	mov	r9, r4
 8016e7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016e80:	2830      	cmp	r0, #48	@ 0x30
 8016e82:	d0fa      	beq.n	8016e7a <__gethex+0x12>
 8016e84:	eba9 0303 	sub.w	r3, r9, r3
 8016e88:	f1a3 0b02 	sub.w	fp, r3, #2
 8016e8c:	f7ff ffd6 	bl	8016e3c <__hexdig_fun>
 8016e90:	4605      	mov	r5, r0
 8016e92:	2800      	cmp	r0, #0
 8016e94:	d168      	bne.n	8016f68 <__gethex+0x100>
 8016e96:	49a0      	ldr	r1, [pc, #640]	@ (8017118 <__gethex+0x2b0>)
 8016e98:	2201      	movs	r2, #1
 8016e9a:	4648      	mov	r0, r9
 8016e9c:	f7ff f8b2 	bl	8016004 <strncmp>
 8016ea0:	4607      	mov	r7, r0
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d167      	bne.n	8016f76 <__gethex+0x10e>
 8016ea6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016eaa:	4626      	mov	r6, r4
 8016eac:	f7ff ffc6 	bl	8016e3c <__hexdig_fun>
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	d062      	beq.n	8016f7a <__gethex+0x112>
 8016eb4:	4623      	mov	r3, r4
 8016eb6:	7818      	ldrb	r0, [r3, #0]
 8016eb8:	2830      	cmp	r0, #48	@ 0x30
 8016eba:	4699      	mov	r9, r3
 8016ebc:	f103 0301 	add.w	r3, r3, #1
 8016ec0:	d0f9      	beq.n	8016eb6 <__gethex+0x4e>
 8016ec2:	f7ff ffbb 	bl	8016e3c <__hexdig_fun>
 8016ec6:	fab0 f580 	clz	r5, r0
 8016eca:	096d      	lsrs	r5, r5, #5
 8016ecc:	f04f 0b01 	mov.w	fp, #1
 8016ed0:	464a      	mov	r2, r9
 8016ed2:	4616      	mov	r6, r2
 8016ed4:	3201      	adds	r2, #1
 8016ed6:	7830      	ldrb	r0, [r6, #0]
 8016ed8:	f7ff ffb0 	bl	8016e3c <__hexdig_fun>
 8016edc:	2800      	cmp	r0, #0
 8016ede:	d1f8      	bne.n	8016ed2 <__gethex+0x6a>
 8016ee0:	498d      	ldr	r1, [pc, #564]	@ (8017118 <__gethex+0x2b0>)
 8016ee2:	2201      	movs	r2, #1
 8016ee4:	4630      	mov	r0, r6
 8016ee6:	f7ff f88d 	bl	8016004 <strncmp>
 8016eea:	2800      	cmp	r0, #0
 8016eec:	d13f      	bne.n	8016f6e <__gethex+0x106>
 8016eee:	b944      	cbnz	r4, 8016f02 <__gethex+0x9a>
 8016ef0:	1c74      	adds	r4, r6, #1
 8016ef2:	4622      	mov	r2, r4
 8016ef4:	4616      	mov	r6, r2
 8016ef6:	3201      	adds	r2, #1
 8016ef8:	7830      	ldrb	r0, [r6, #0]
 8016efa:	f7ff ff9f 	bl	8016e3c <__hexdig_fun>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d1f8      	bne.n	8016ef4 <__gethex+0x8c>
 8016f02:	1ba4      	subs	r4, r4, r6
 8016f04:	00a7      	lsls	r7, r4, #2
 8016f06:	7833      	ldrb	r3, [r6, #0]
 8016f08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016f0c:	2b50      	cmp	r3, #80	@ 0x50
 8016f0e:	d13e      	bne.n	8016f8e <__gethex+0x126>
 8016f10:	7873      	ldrb	r3, [r6, #1]
 8016f12:	2b2b      	cmp	r3, #43	@ 0x2b
 8016f14:	d033      	beq.n	8016f7e <__gethex+0x116>
 8016f16:	2b2d      	cmp	r3, #45	@ 0x2d
 8016f18:	d034      	beq.n	8016f84 <__gethex+0x11c>
 8016f1a:	1c71      	adds	r1, r6, #1
 8016f1c:	2400      	movs	r4, #0
 8016f1e:	7808      	ldrb	r0, [r1, #0]
 8016f20:	f7ff ff8c 	bl	8016e3c <__hexdig_fun>
 8016f24:	1e43      	subs	r3, r0, #1
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	2b18      	cmp	r3, #24
 8016f2a:	d830      	bhi.n	8016f8e <__gethex+0x126>
 8016f2c:	f1a0 0210 	sub.w	r2, r0, #16
 8016f30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016f34:	f7ff ff82 	bl	8016e3c <__hexdig_fun>
 8016f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8016f3c:	fa5f fc8c 	uxtb.w	ip, ip
 8016f40:	f1bc 0f18 	cmp.w	ip, #24
 8016f44:	f04f 030a 	mov.w	r3, #10
 8016f48:	d91e      	bls.n	8016f88 <__gethex+0x120>
 8016f4a:	b104      	cbz	r4, 8016f4e <__gethex+0xe6>
 8016f4c:	4252      	negs	r2, r2
 8016f4e:	4417      	add	r7, r2
 8016f50:	f8ca 1000 	str.w	r1, [sl]
 8016f54:	b1ed      	cbz	r5, 8016f92 <__gethex+0x12a>
 8016f56:	f1bb 0f00 	cmp.w	fp, #0
 8016f5a:	bf0c      	ite	eq
 8016f5c:	2506      	moveq	r5, #6
 8016f5e:	2500      	movne	r5, #0
 8016f60:	4628      	mov	r0, r5
 8016f62:	b005      	add	sp, #20
 8016f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f68:	2500      	movs	r5, #0
 8016f6a:	462c      	mov	r4, r5
 8016f6c:	e7b0      	b.n	8016ed0 <__gethex+0x68>
 8016f6e:	2c00      	cmp	r4, #0
 8016f70:	d1c7      	bne.n	8016f02 <__gethex+0x9a>
 8016f72:	4627      	mov	r7, r4
 8016f74:	e7c7      	b.n	8016f06 <__gethex+0x9e>
 8016f76:	464e      	mov	r6, r9
 8016f78:	462f      	mov	r7, r5
 8016f7a:	2501      	movs	r5, #1
 8016f7c:	e7c3      	b.n	8016f06 <__gethex+0x9e>
 8016f7e:	2400      	movs	r4, #0
 8016f80:	1cb1      	adds	r1, r6, #2
 8016f82:	e7cc      	b.n	8016f1e <__gethex+0xb6>
 8016f84:	2401      	movs	r4, #1
 8016f86:	e7fb      	b.n	8016f80 <__gethex+0x118>
 8016f88:	fb03 0002 	mla	r0, r3, r2, r0
 8016f8c:	e7ce      	b.n	8016f2c <__gethex+0xc4>
 8016f8e:	4631      	mov	r1, r6
 8016f90:	e7de      	b.n	8016f50 <__gethex+0xe8>
 8016f92:	eba6 0309 	sub.w	r3, r6, r9
 8016f96:	3b01      	subs	r3, #1
 8016f98:	4629      	mov	r1, r5
 8016f9a:	2b07      	cmp	r3, #7
 8016f9c:	dc0a      	bgt.n	8016fb4 <__gethex+0x14c>
 8016f9e:	9801      	ldr	r0, [sp, #4]
 8016fa0:	f000 fafc 	bl	801759c <_Balloc>
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	b940      	cbnz	r0, 8016fba <__gethex+0x152>
 8016fa8:	4b5c      	ldr	r3, [pc, #368]	@ (801711c <__gethex+0x2b4>)
 8016faa:	4602      	mov	r2, r0
 8016fac:	21e4      	movs	r1, #228	@ 0xe4
 8016fae:	485c      	ldr	r0, [pc, #368]	@ (8017120 <__gethex+0x2b8>)
 8016fb0:	f001 f9de 	bl	8018370 <__assert_func>
 8016fb4:	3101      	adds	r1, #1
 8016fb6:	105b      	asrs	r3, r3, #1
 8016fb8:	e7ef      	b.n	8016f9a <__gethex+0x132>
 8016fba:	f100 0a14 	add.w	sl, r0, #20
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	4655      	mov	r5, sl
 8016fc2:	469b      	mov	fp, r3
 8016fc4:	45b1      	cmp	r9, r6
 8016fc6:	d337      	bcc.n	8017038 <__gethex+0x1d0>
 8016fc8:	f845 bb04 	str.w	fp, [r5], #4
 8016fcc:	eba5 050a 	sub.w	r5, r5, sl
 8016fd0:	10ad      	asrs	r5, r5, #2
 8016fd2:	6125      	str	r5, [r4, #16]
 8016fd4:	4658      	mov	r0, fp
 8016fd6:	f000 fbd3 	bl	8017780 <__hi0bits>
 8016fda:	016d      	lsls	r5, r5, #5
 8016fdc:	f8d8 6000 	ldr.w	r6, [r8]
 8016fe0:	1a2d      	subs	r5, r5, r0
 8016fe2:	42b5      	cmp	r5, r6
 8016fe4:	dd54      	ble.n	8017090 <__gethex+0x228>
 8016fe6:	1bad      	subs	r5, r5, r6
 8016fe8:	4629      	mov	r1, r5
 8016fea:	4620      	mov	r0, r4
 8016fec:	f000 ff64 	bl	8017eb8 <__any_on>
 8016ff0:	4681      	mov	r9, r0
 8016ff2:	b178      	cbz	r0, 8017014 <__gethex+0x1ac>
 8016ff4:	1e6b      	subs	r3, r5, #1
 8016ff6:	1159      	asrs	r1, r3, #5
 8016ff8:	f003 021f 	and.w	r2, r3, #31
 8016ffc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017000:	f04f 0901 	mov.w	r9, #1
 8017004:	fa09 f202 	lsl.w	r2, r9, r2
 8017008:	420a      	tst	r2, r1
 801700a:	d003      	beq.n	8017014 <__gethex+0x1ac>
 801700c:	454b      	cmp	r3, r9
 801700e:	dc36      	bgt.n	801707e <__gethex+0x216>
 8017010:	f04f 0902 	mov.w	r9, #2
 8017014:	4629      	mov	r1, r5
 8017016:	4620      	mov	r0, r4
 8017018:	f7ff febe 	bl	8016d98 <rshift>
 801701c:	442f      	add	r7, r5
 801701e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017022:	42bb      	cmp	r3, r7
 8017024:	da42      	bge.n	80170ac <__gethex+0x244>
 8017026:	9801      	ldr	r0, [sp, #4]
 8017028:	4621      	mov	r1, r4
 801702a:	f000 faf7 	bl	801761c <_Bfree>
 801702e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017030:	2300      	movs	r3, #0
 8017032:	6013      	str	r3, [r2, #0]
 8017034:	25a3      	movs	r5, #163	@ 0xa3
 8017036:	e793      	b.n	8016f60 <__gethex+0xf8>
 8017038:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801703c:	2a2e      	cmp	r2, #46	@ 0x2e
 801703e:	d012      	beq.n	8017066 <__gethex+0x1fe>
 8017040:	2b20      	cmp	r3, #32
 8017042:	d104      	bne.n	801704e <__gethex+0x1e6>
 8017044:	f845 bb04 	str.w	fp, [r5], #4
 8017048:	f04f 0b00 	mov.w	fp, #0
 801704c:	465b      	mov	r3, fp
 801704e:	7830      	ldrb	r0, [r6, #0]
 8017050:	9303      	str	r3, [sp, #12]
 8017052:	f7ff fef3 	bl	8016e3c <__hexdig_fun>
 8017056:	9b03      	ldr	r3, [sp, #12]
 8017058:	f000 000f 	and.w	r0, r0, #15
 801705c:	4098      	lsls	r0, r3
 801705e:	ea4b 0b00 	orr.w	fp, fp, r0
 8017062:	3304      	adds	r3, #4
 8017064:	e7ae      	b.n	8016fc4 <__gethex+0x15c>
 8017066:	45b1      	cmp	r9, r6
 8017068:	d8ea      	bhi.n	8017040 <__gethex+0x1d8>
 801706a:	492b      	ldr	r1, [pc, #172]	@ (8017118 <__gethex+0x2b0>)
 801706c:	9303      	str	r3, [sp, #12]
 801706e:	2201      	movs	r2, #1
 8017070:	4630      	mov	r0, r6
 8017072:	f7fe ffc7 	bl	8016004 <strncmp>
 8017076:	9b03      	ldr	r3, [sp, #12]
 8017078:	2800      	cmp	r0, #0
 801707a:	d1e1      	bne.n	8017040 <__gethex+0x1d8>
 801707c:	e7a2      	b.n	8016fc4 <__gethex+0x15c>
 801707e:	1ea9      	subs	r1, r5, #2
 8017080:	4620      	mov	r0, r4
 8017082:	f000 ff19 	bl	8017eb8 <__any_on>
 8017086:	2800      	cmp	r0, #0
 8017088:	d0c2      	beq.n	8017010 <__gethex+0x1a8>
 801708a:	f04f 0903 	mov.w	r9, #3
 801708e:	e7c1      	b.n	8017014 <__gethex+0x1ac>
 8017090:	da09      	bge.n	80170a6 <__gethex+0x23e>
 8017092:	1b75      	subs	r5, r6, r5
 8017094:	4621      	mov	r1, r4
 8017096:	9801      	ldr	r0, [sp, #4]
 8017098:	462a      	mov	r2, r5
 801709a:	f000 fcd7 	bl	8017a4c <__lshift>
 801709e:	1b7f      	subs	r7, r7, r5
 80170a0:	4604      	mov	r4, r0
 80170a2:	f100 0a14 	add.w	sl, r0, #20
 80170a6:	f04f 0900 	mov.w	r9, #0
 80170aa:	e7b8      	b.n	801701e <__gethex+0x1b6>
 80170ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80170b0:	42bd      	cmp	r5, r7
 80170b2:	dd6f      	ble.n	8017194 <__gethex+0x32c>
 80170b4:	1bed      	subs	r5, r5, r7
 80170b6:	42ae      	cmp	r6, r5
 80170b8:	dc34      	bgt.n	8017124 <__gethex+0x2bc>
 80170ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80170be:	2b02      	cmp	r3, #2
 80170c0:	d022      	beq.n	8017108 <__gethex+0x2a0>
 80170c2:	2b03      	cmp	r3, #3
 80170c4:	d024      	beq.n	8017110 <__gethex+0x2a8>
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d115      	bne.n	80170f6 <__gethex+0x28e>
 80170ca:	42ae      	cmp	r6, r5
 80170cc:	d113      	bne.n	80170f6 <__gethex+0x28e>
 80170ce:	2e01      	cmp	r6, #1
 80170d0:	d10b      	bne.n	80170ea <__gethex+0x282>
 80170d2:	9a02      	ldr	r2, [sp, #8]
 80170d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80170d8:	6013      	str	r3, [r2, #0]
 80170da:	2301      	movs	r3, #1
 80170dc:	6123      	str	r3, [r4, #16]
 80170de:	f8ca 3000 	str.w	r3, [sl]
 80170e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170e4:	2562      	movs	r5, #98	@ 0x62
 80170e6:	601c      	str	r4, [r3, #0]
 80170e8:	e73a      	b.n	8016f60 <__gethex+0xf8>
 80170ea:	1e71      	subs	r1, r6, #1
 80170ec:	4620      	mov	r0, r4
 80170ee:	f000 fee3 	bl	8017eb8 <__any_on>
 80170f2:	2800      	cmp	r0, #0
 80170f4:	d1ed      	bne.n	80170d2 <__gethex+0x26a>
 80170f6:	9801      	ldr	r0, [sp, #4]
 80170f8:	4621      	mov	r1, r4
 80170fa:	f000 fa8f 	bl	801761c <_Bfree>
 80170fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017100:	2300      	movs	r3, #0
 8017102:	6013      	str	r3, [r2, #0]
 8017104:	2550      	movs	r5, #80	@ 0x50
 8017106:	e72b      	b.n	8016f60 <__gethex+0xf8>
 8017108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801710a:	2b00      	cmp	r3, #0
 801710c:	d1f3      	bne.n	80170f6 <__gethex+0x28e>
 801710e:	e7e0      	b.n	80170d2 <__gethex+0x26a>
 8017110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017112:	2b00      	cmp	r3, #0
 8017114:	d1dd      	bne.n	80170d2 <__gethex+0x26a>
 8017116:	e7ee      	b.n	80170f6 <__gethex+0x28e>
 8017118:	080198c4 	.word	0x080198c4
 801711c:	08019ad1 	.word	0x08019ad1
 8017120:	08019ae2 	.word	0x08019ae2
 8017124:	1e6f      	subs	r7, r5, #1
 8017126:	f1b9 0f00 	cmp.w	r9, #0
 801712a:	d130      	bne.n	801718e <__gethex+0x326>
 801712c:	b127      	cbz	r7, 8017138 <__gethex+0x2d0>
 801712e:	4639      	mov	r1, r7
 8017130:	4620      	mov	r0, r4
 8017132:	f000 fec1 	bl	8017eb8 <__any_on>
 8017136:	4681      	mov	r9, r0
 8017138:	117a      	asrs	r2, r7, #5
 801713a:	2301      	movs	r3, #1
 801713c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017140:	f007 071f 	and.w	r7, r7, #31
 8017144:	40bb      	lsls	r3, r7
 8017146:	4213      	tst	r3, r2
 8017148:	4629      	mov	r1, r5
 801714a:	4620      	mov	r0, r4
 801714c:	bf18      	it	ne
 801714e:	f049 0902 	orrne.w	r9, r9, #2
 8017152:	f7ff fe21 	bl	8016d98 <rshift>
 8017156:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801715a:	1b76      	subs	r6, r6, r5
 801715c:	2502      	movs	r5, #2
 801715e:	f1b9 0f00 	cmp.w	r9, #0
 8017162:	d047      	beq.n	80171f4 <__gethex+0x38c>
 8017164:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017168:	2b02      	cmp	r3, #2
 801716a:	d015      	beq.n	8017198 <__gethex+0x330>
 801716c:	2b03      	cmp	r3, #3
 801716e:	d017      	beq.n	80171a0 <__gethex+0x338>
 8017170:	2b01      	cmp	r3, #1
 8017172:	d109      	bne.n	8017188 <__gethex+0x320>
 8017174:	f019 0f02 	tst.w	r9, #2
 8017178:	d006      	beq.n	8017188 <__gethex+0x320>
 801717a:	f8da 3000 	ldr.w	r3, [sl]
 801717e:	ea49 0903 	orr.w	r9, r9, r3
 8017182:	f019 0f01 	tst.w	r9, #1
 8017186:	d10e      	bne.n	80171a6 <__gethex+0x33e>
 8017188:	f045 0510 	orr.w	r5, r5, #16
 801718c:	e032      	b.n	80171f4 <__gethex+0x38c>
 801718e:	f04f 0901 	mov.w	r9, #1
 8017192:	e7d1      	b.n	8017138 <__gethex+0x2d0>
 8017194:	2501      	movs	r5, #1
 8017196:	e7e2      	b.n	801715e <__gethex+0x2f6>
 8017198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801719a:	f1c3 0301 	rsb	r3, r3, #1
 801719e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80171a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d0f0      	beq.n	8017188 <__gethex+0x320>
 80171a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80171aa:	f104 0314 	add.w	r3, r4, #20
 80171ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80171b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80171b6:	f04f 0c00 	mov.w	ip, #0
 80171ba:	4618      	mov	r0, r3
 80171bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80171c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80171c4:	d01b      	beq.n	80171fe <__gethex+0x396>
 80171c6:	3201      	adds	r2, #1
 80171c8:	6002      	str	r2, [r0, #0]
 80171ca:	2d02      	cmp	r5, #2
 80171cc:	f104 0314 	add.w	r3, r4, #20
 80171d0:	d13c      	bne.n	801724c <__gethex+0x3e4>
 80171d2:	f8d8 2000 	ldr.w	r2, [r8]
 80171d6:	3a01      	subs	r2, #1
 80171d8:	42b2      	cmp	r2, r6
 80171da:	d109      	bne.n	80171f0 <__gethex+0x388>
 80171dc:	1171      	asrs	r1, r6, #5
 80171de:	2201      	movs	r2, #1
 80171e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80171e4:	f006 061f 	and.w	r6, r6, #31
 80171e8:	fa02 f606 	lsl.w	r6, r2, r6
 80171ec:	421e      	tst	r6, r3
 80171ee:	d13a      	bne.n	8017266 <__gethex+0x3fe>
 80171f0:	f045 0520 	orr.w	r5, r5, #32
 80171f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171f6:	601c      	str	r4, [r3, #0]
 80171f8:	9b02      	ldr	r3, [sp, #8]
 80171fa:	601f      	str	r7, [r3, #0]
 80171fc:	e6b0      	b.n	8016f60 <__gethex+0xf8>
 80171fe:	4299      	cmp	r1, r3
 8017200:	f843 cc04 	str.w	ip, [r3, #-4]
 8017204:	d8d9      	bhi.n	80171ba <__gethex+0x352>
 8017206:	68a3      	ldr	r3, [r4, #8]
 8017208:	459b      	cmp	fp, r3
 801720a:	db17      	blt.n	801723c <__gethex+0x3d4>
 801720c:	6861      	ldr	r1, [r4, #4]
 801720e:	9801      	ldr	r0, [sp, #4]
 8017210:	3101      	adds	r1, #1
 8017212:	f000 f9c3 	bl	801759c <_Balloc>
 8017216:	4681      	mov	r9, r0
 8017218:	b918      	cbnz	r0, 8017222 <__gethex+0x3ba>
 801721a:	4b1a      	ldr	r3, [pc, #104]	@ (8017284 <__gethex+0x41c>)
 801721c:	4602      	mov	r2, r0
 801721e:	2184      	movs	r1, #132	@ 0x84
 8017220:	e6c5      	b.n	8016fae <__gethex+0x146>
 8017222:	6922      	ldr	r2, [r4, #16]
 8017224:	3202      	adds	r2, #2
 8017226:	f104 010c 	add.w	r1, r4, #12
 801722a:	0092      	lsls	r2, r2, #2
 801722c:	300c      	adds	r0, #12
 801722e:	f7fe ff72 	bl	8016116 <memcpy>
 8017232:	4621      	mov	r1, r4
 8017234:	9801      	ldr	r0, [sp, #4]
 8017236:	f000 f9f1 	bl	801761c <_Bfree>
 801723a:	464c      	mov	r4, r9
 801723c:	6923      	ldr	r3, [r4, #16]
 801723e:	1c5a      	adds	r2, r3, #1
 8017240:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017244:	6122      	str	r2, [r4, #16]
 8017246:	2201      	movs	r2, #1
 8017248:	615a      	str	r2, [r3, #20]
 801724a:	e7be      	b.n	80171ca <__gethex+0x362>
 801724c:	6922      	ldr	r2, [r4, #16]
 801724e:	455a      	cmp	r2, fp
 8017250:	dd0b      	ble.n	801726a <__gethex+0x402>
 8017252:	2101      	movs	r1, #1
 8017254:	4620      	mov	r0, r4
 8017256:	f7ff fd9f 	bl	8016d98 <rshift>
 801725a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801725e:	3701      	adds	r7, #1
 8017260:	42bb      	cmp	r3, r7
 8017262:	f6ff aee0 	blt.w	8017026 <__gethex+0x1be>
 8017266:	2501      	movs	r5, #1
 8017268:	e7c2      	b.n	80171f0 <__gethex+0x388>
 801726a:	f016 061f 	ands.w	r6, r6, #31
 801726e:	d0fa      	beq.n	8017266 <__gethex+0x3fe>
 8017270:	4453      	add	r3, sl
 8017272:	f1c6 0620 	rsb	r6, r6, #32
 8017276:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801727a:	f000 fa81 	bl	8017780 <__hi0bits>
 801727e:	42b0      	cmp	r0, r6
 8017280:	dbe7      	blt.n	8017252 <__gethex+0x3ea>
 8017282:	e7f0      	b.n	8017266 <__gethex+0x3fe>
 8017284:	08019ad1 	.word	0x08019ad1

08017288 <L_shift>:
 8017288:	f1c2 0208 	rsb	r2, r2, #8
 801728c:	0092      	lsls	r2, r2, #2
 801728e:	b570      	push	{r4, r5, r6, lr}
 8017290:	f1c2 0620 	rsb	r6, r2, #32
 8017294:	6843      	ldr	r3, [r0, #4]
 8017296:	6804      	ldr	r4, [r0, #0]
 8017298:	fa03 f506 	lsl.w	r5, r3, r6
 801729c:	432c      	orrs	r4, r5
 801729e:	40d3      	lsrs	r3, r2
 80172a0:	6004      	str	r4, [r0, #0]
 80172a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80172a6:	4288      	cmp	r0, r1
 80172a8:	d3f4      	bcc.n	8017294 <L_shift+0xc>
 80172aa:	bd70      	pop	{r4, r5, r6, pc}

080172ac <__match>:
 80172ac:	b530      	push	{r4, r5, lr}
 80172ae:	6803      	ldr	r3, [r0, #0]
 80172b0:	3301      	adds	r3, #1
 80172b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172b6:	b914      	cbnz	r4, 80172be <__match+0x12>
 80172b8:	6003      	str	r3, [r0, #0]
 80172ba:	2001      	movs	r0, #1
 80172bc:	bd30      	pop	{r4, r5, pc}
 80172be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80172c6:	2d19      	cmp	r5, #25
 80172c8:	bf98      	it	ls
 80172ca:	3220      	addls	r2, #32
 80172cc:	42a2      	cmp	r2, r4
 80172ce:	d0f0      	beq.n	80172b2 <__match+0x6>
 80172d0:	2000      	movs	r0, #0
 80172d2:	e7f3      	b.n	80172bc <__match+0x10>

080172d4 <__hexnan>:
 80172d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d8:	680b      	ldr	r3, [r1, #0]
 80172da:	6801      	ldr	r1, [r0, #0]
 80172dc:	115e      	asrs	r6, r3, #5
 80172de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80172e2:	f013 031f 	ands.w	r3, r3, #31
 80172e6:	b087      	sub	sp, #28
 80172e8:	bf18      	it	ne
 80172ea:	3604      	addne	r6, #4
 80172ec:	2500      	movs	r5, #0
 80172ee:	1f37      	subs	r7, r6, #4
 80172f0:	4682      	mov	sl, r0
 80172f2:	4690      	mov	r8, r2
 80172f4:	9301      	str	r3, [sp, #4]
 80172f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80172fa:	46b9      	mov	r9, r7
 80172fc:	463c      	mov	r4, r7
 80172fe:	9502      	str	r5, [sp, #8]
 8017300:	46ab      	mov	fp, r5
 8017302:	784a      	ldrb	r2, [r1, #1]
 8017304:	1c4b      	adds	r3, r1, #1
 8017306:	9303      	str	r3, [sp, #12]
 8017308:	b342      	cbz	r2, 801735c <__hexnan+0x88>
 801730a:	4610      	mov	r0, r2
 801730c:	9105      	str	r1, [sp, #20]
 801730e:	9204      	str	r2, [sp, #16]
 8017310:	f7ff fd94 	bl	8016e3c <__hexdig_fun>
 8017314:	2800      	cmp	r0, #0
 8017316:	d151      	bne.n	80173bc <__hexnan+0xe8>
 8017318:	9a04      	ldr	r2, [sp, #16]
 801731a:	9905      	ldr	r1, [sp, #20]
 801731c:	2a20      	cmp	r2, #32
 801731e:	d818      	bhi.n	8017352 <__hexnan+0x7e>
 8017320:	9b02      	ldr	r3, [sp, #8]
 8017322:	459b      	cmp	fp, r3
 8017324:	dd13      	ble.n	801734e <__hexnan+0x7a>
 8017326:	454c      	cmp	r4, r9
 8017328:	d206      	bcs.n	8017338 <__hexnan+0x64>
 801732a:	2d07      	cmp	r5, #7
 801732c:	dc04      	bgt.n	8017338 <__hexnan+0x64>
 801732e:	462a      	mov	r2, r5
 8017330:	4649      	mov	r1, r9
 8017332:	4620      	mov	r0, r4
 8017334:	f7ff ffa8 	bl	8017288 <L_shift>
 8017338:	4544      	cmp	r4, r8
 801733a:	d952      	bls.n	80173e2 <__hexnan+0x10e>
 801733c:	2300      	movs	r3, #0
 801733e:	f1a4 0904 	sub.w	r9, r4, #4
 8017342:	f844 3c04 	str.w	r3, [r4, #-4]
 8017346:	f8cd b008 	str.w	fp, [sp, #8]
 801734a:	464c      	mov	r4, r9
 801734c:	461d      	mov	r5, r3
 801734e:	9903      	ldr	r1, [sp, #12]
 8017350:	e7d7      	b.n	8017302 <__hexnan+0x2e>
 8017352:	2a29      	cmp	r2, #41	@ 0x29
 8017354:	d157      	bne.n	8017406 <__hexnan+0x132>
 8017356:	3102      	adds	r1, #2
 8017358:	f8ca 1000 	str.w	r1, [sl]
 801735c:	f1bb 0f00 	cmp.w	fp, #0
 8017360:	d051      	beq.n	8017406 <__hexnan+0x132>
 8017362:	454c      	cmp	r4, r9
 8017364:	d206      	bcs.n	8017374 <__hexnan+0xa0>
 8017366:	2d07      	cmp	r5, #7
 8017368:	dc04      	bgt.n	8017374 <__hexnan+0xa0>
 801736a:	462a      	mov	r2, r5
 801736c:	4649      	mov	r1, r9
 801736e:	4620      	mov	r0, r4
 8017370:	f7ff ff8a 	bl	8017288 <L_shift>
 8017374:	4544      	cmp	r4, r8
 8017376:	d936      	bls.n	80173e6 <__hexnan+0x112>
 8017378:	f1a8 0204 	sub.w	r2, r8, #4
 801737c:	4623      	mov	r3, r4
 801737e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017382:	f842 1f04 	str.w	r1, [r2, #4]!
 8017386:	429f      	cmp	r7, r3
 8017388:	d2f9      	bcs.n	801737e <__hexnan+0xaa>
 801738a:	1b3b      	subs	r3, r7, r4
 801738c:	f023 0303 	bic.w	r3, r3, #3
 8017390:	3304      	adds	r3, #4
 8017392:	3401      	adds	r4, #1
 8017394:	3e03      	subs	r6, #3
 8017396:	42b4      	cmp	r4, r6
 8017398:	bf88      	it	hi
 801739a:	2304      	movhi	r3, #4
 801739c:	4443      	add	r3, r8
 801739e:	2200      	movs	r2, #0
 80173a0:	f843 2b04 	str.w	r2, [r3], #4
 80173a4:	429f      	cmp	r7, r3
 80173a6:	d2fb      	bcs.n	80173a0 <__hexnan+0xcc>
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	b91b      	cbnz	r3, 80173b4 <__hexnan+0xe0>
 80173ac:	4547      	cmp	r7, r8
 80173ae:	d128      	bne.n	8017402 <__hexnan+0x12e>
 80173b0:	2301      	movs	r3, #1
 80173b2:	603b      	str	r3, [r7, #0]
 80173b4:	2005      	movs	r0, #5
 80173b6:	b007      	add	sp, #28
 80173b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173bc:	3501      	adds	r5, #1
 80173be:	2d08      	cmp	r5, #8
 80173c0:	f10b 0b01 	add.w	fp, fp, #1
 80173c4:	dd06      	ble.n	80173d4 <__hexnan+0x100>
 80173c6:	4544      	cmp	r4, r8
 80173c8:	d9c1      	bls.n	801734e <__hexnan+0x7a>
 80173ca:	2300      	movs	r3, #0
 80173cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80173d0:	2501      	movs	r5, #1
 80173d2:	3c04      	subs	r4, #4
 80173d4:	6822      	ldr	r2, [r4, #0]
 80173d6:	f000 000f 	and.w	r0, r0, #15
 80173da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80173de:	6020      	str	r0, [r4, #0]
 80173e0:	e7b5      	b.n	801734e <__hexnan+0x7a>
 80173e2:	2508      	movs	r5, #8
 80173e4:	e7b3      	b.n	801734e <__hexnan+0x7a>
 80173e6:	9b01      	ldr	r3, [sp, #4]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d0dd      	beq.n	80173a8 <__hexnan+0xd4>
 80173ec:	f1c3 0320 	rsb	r3, r3, #32
 80173f0:	f04f 32ff 	mov.w	r2, #4294967295
 80173f4:	40da      	lsrs	r2, r3
 80173f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80173fa:	4013      	ands	r3, r2
 80173fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8017400:	e7d2      	b.n	80173a8 <__hexnan+0xd4>
 8017402:	3f04      	subs	r7, #4
 8017404:	e7d0      	b.n	80173a8 <__hexnan+0xd4>
 8017406:	2004      	movs	r0, #4
 8017408:	e7d5      	b.n	80173b6 <__hexnan+0xe2>
	...

0801740c <malloc>:
 801740c:	4b02      	ldr	r3, [pc, #8]	@ (8017418 <malloc+0xc>)
 801740e:	4601      	mov	r1, r0
 8017410:	6818      	ldr	r0, [r3, #0]
 8017412:	f000 b825 	b.w	8017460 <_malloc_r>
 8017416:	bf00      	nop
 8017418:	2400027c 	.word	0x2400027c

0801741c <sbrk_aligned>:
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	4e0f      	ldr	r6, [pc, #60]	@ (801745c <sbrk_aligned+0x40>)
 8017420:	460c      	mov	r4, r1
 8017422:	6831      	ldr	r1, [r6, #0]
 8017424:	4605      	mov	r5, r0
 8017426:	b911      	cbnz	r1, 801742e <sbrk_aligned+0x12>
 8017428:	f000 ff92 	bl	8018350 <_sbrk_r>
 801742c:	6030      	str	r0, [r6, #0]
 801742e:	4621      	mov	r1, r4
 8017430:	4628      	mov	r0, r5
 8017432:	f000 ff8d 	bl	8018350 <_sbrk_r>
 8017436:	1c43      	adds	r3, r0, #1
 8017438:	d103      	bne.n	8017442 <sbrk_aligned+0x26>
 801743a:	f04f 34ff 	mov.w	r4, #4294967295
 801743e:	4620      	mov	r0, r4
 8017440:	bd70      	pop	{r4, r5, r6, pc}
 8017442:	1cc4      	adds	r4, r0, #3
 8017444:	f024 0403 	bic.w	r4, r4, #3
 8017448:	42a0      	cmp	r0, r4
 801744a:	d0f8      	beq.n	801743e <sbrk_aligned+0x22>
 801744c:	1a21      	subs	r1, r4, r0
 801744e:	4628      	mov	r0, r5
 8017450:	f000 ff7e 	bl	8018350 <_sbrk_r>
 8017454:	3001      	adds	r0, #1
 8017456:	d1f2      	bne.n	801743e <sbrk_aligned+0x22>
 8017458:	e7ef      	b.n	801743a <sbrk_aligned+0x1e>
 801745a:	bf00      	nop
 801745c:	24006c5c 	.word	0x24006c5c

08017460 <_malloc_r>:
 8017460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017464:	1ccd      	adds	r5, r1, #3
 8017466:	f025 0503 	bic.w	r5, r5, #3
 801746a:	3508      	adds	r5, #8
 801746c:	2d0c      	cmp	r5, #12
 801746e:	bf38      	it	cc
 8017470:	250c      	movcc	r5, #12
 8017472:	2d00      	cmp	r5, #0
 8017474:	4606      	mov	r6, r0
 8017476:	db01      	blt.n	801747c <_malloc_r+0x1c>
 8017478:	42a9      	cmp	r1, r5
 801747a:	d904      	bls.n	8017486 <_malloc_r+0x26>
 801747c:	230c      	movs	r3, #12
 801747e:	6033      	str	r3, [r6, #0]
 8017480:	2000      	movs	r0, #0
 8017482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801755c <_malloc_r+0xfc>
 801748a:	f000 f87b 	bl	8017584 <__malloc_lock>
 801748e:	f8d8 3000 	ldr.w	r3, [r8]
 8017492:	461c      	mov	r4, r3
 8017494:	bb44      	cbnz	r4, 80174e8 <_malloc_r+0x88>
 8017496:	4629      	mov	r1, r5
 8017498:	4630      	mov	r0, r6
 801749a:	f7ff ffbf 	bl	801741c <sbrk_aligned>
 801749e:	1c43      	adds	r3, r0, #1
 80174a0:	4604      	mov	r4, r0
 80174a2:	d158      	bne.n	8017556 <_malloc_r+0xf6>
 80174a4:	f8d8 4000 	ldr.w	r4, [r8]
 80174a8:	4627      	mov	r7, r4
 80174aa:	2f00      	cmp	r7, #0
 80174ac:	d143      	bne.n	8017536 <_malloc_r+0xd6>
 80174ae:	2c00      	cmp	r4, #0
 80174b0:	d04b      	beq.n	801754a <_malloc_r+0xea>
 80174b2:	6823      	ldr	r3, [r4, #0]
 80174b4:	4639      	mov	r1, r7
 80174b6:	4630      	mov	r0, r6
 80174b8:	eb04 0903 	add.w	r9, r4, r3
 80174bc:	f000 ff48 	bl	8018350 <_sbrk_r>
 80174c0:	4581      	cmp	r9, r0
 80174c2:	d142      	bne.n	801754a <_malloc_r+0xea>
 80174c4:	6821      	ldr	r1, [r4, #0]
 80174c6:	1a6d      	subs	r5, r5, r1
 80174c8:	4629      	mov	r1, r5
 80174ca:	4630      	mov	r0, r6
 80174cc:	f7ff ffa6 	bl	801741c <sbrk_aligned>
 80174d0:	3001      	adds	r0, #1
 80174d2:	d03a      	beq.n	801754a <_malloc_r+0xea>
 80174d4:	6823      	ldr	r3, [r4, #0]
 80174d6:	442b      	add	r3, r5
 80174d8:	6023      	str	r3, [r4, #0]
 80174da:	f8d8 3000 	ldr.w	r3, [r8]
 80174de:	685a      	ldr	r2, [r3, #4]
 80174e0:	bb62      	cbnz	r2, 801753c <_malloc_r+0xdc>
 80174e2:	f8c8 7000 	str.w	r7, [r8]
 80174e6:	e00f      	b.n	8017508 <_malloc_r+0xa8>
 80174e8:	6822      	ldr	r2, [r4, #0]
 80174ea:	1b52      	subs	r2, r2, r5
 80174ec:	d420      	bmi.n	8017530 <_malloc_r+0xd0>
 80174ee:	2a0b      	cmp	r2, #11
 80174f0:	d917      	bls.n	8017522 <_malloc_r+0xc2>
 80174f2:	1961      	adds	r1, r4, r5
 80174f4:	42a3      	cmp	r3, r4
 80174f6:	6025      	str	r5, [r4, #0]
 80174f8:	bf18      	it	ne
 80174fa:	6059      	strne	r1, [r3, #4]
 80174fc:	6863      	ldr	r3, [r4, #4]
 80174fe:	bf08      	it	eq
 8017500:	f8c8 1000 	streq.w	r1, [r8]
 8017504:	5162      	str	r2, [r4, r5]
 8017506:	604b      	str	r3, [r1, #4]
 8017508:	4630      	mov	r0, r6
 801750a:	f000 f841 	bl	8017590 <__malloc_unlock>
 801750e:	f104 000b 	add.w	r0, r4, #11
 8017512:	1d23      	adds	r3, r4, #4
 8017514:	f020 0007 	bic.w	r0, r0, #7
 8017518:	1ac2      	subs	r2, r0, r3
 801751a:	bf1c      	itt	ne
 801751c:	1a1b      	subne	r3, r3, r0
 801751e:	50a3      	strne	r3, [r4, r2]
 8017520:	e7af      	b.n	8017482 <_malloc_r+0x22>
 8017522:	6862      	ldr	r2, [r4, #4]
 8017524:	42a3      	cmp	r3, r4
 8017526:	bf0c      	ite	eq
 8017528:	f8c8 2000 	streq.w	r2, [r8]
 801752c:	605a      	strne	r2, [r3, #4]
 801752e:	e7eb      	b.n	8017508 <_malloc_r+0xa8>
 8017530:	4623      	mov	r3, r4
 8017532:	6864      	ldr	r4, [r4, #4]
 8017534:	e7ae      	b.n	8017494 <_malloc_r+0x34>
 8017536:	463c      	mov	r4, r7
 8017538:	687f      	ldr	r7, [r7, #4]
 801753a:	e7b6      	b.n	80174aa <_malloc_r+0x4a>
 801753c:	461a      	mov	r2, r3
 801753e:	685b      	ldr	r3, [r3, #4]
 8017540:	42a3      	cmp	r3, r4
 8017542:	d1fb      	bne.n	801753c <_malloc_r+0xdc>
 8017544:	2300      	movs	r3, #0
 8017546:	6053      	str	r3, [r2, #4]
 8017548:	e7de      	b.n	8017508 <_malloc_r+0xa8>
 801754a:	230c      	movs	r3, #12
 801754c:	6033      	str	r3, [r6, #0]
 801754e:	4630      	mov	r0, r6
 8017550:	f000 f81e 	bl	8017590 <__malloc_unlock>
 8017554:	e794      	b.n	8017480 <_malloc_r+0x20>
 8017556:	6005      	str	r5, [r0, #0]
 8017558:	e7d6      	b.n	8017508 <_malloc_r+0xa8>
 801755a:	bf00      	nop
 801755c:	24006c60 	.word	0x24006c60

08017560 <__ascii_mbtowc>:
 8017560:	b082      	sub	sp, #8
 8017562:	b901      	cbnz	r1, 8017566 <__ascii_mbtowc+0x6>
 8017564:	a901      	add	r1, sp, #4
 8017566:	b142      	cbz	r2, 801757a <__ascii_mbtowc+0x1a>
 8017568:	b14b      	cbz	r3, 801757e <__ascii_mbtowc+0x1e>
 801756a:	7813      	ldrb	r3, [r2, #0]
 801756c:	600b      	str	r3, [r1, #0]
 801756e:	7812      	ldrb	r2, [r2, #0]
 8017570:	1e10      	subs	r0, r2, #0
 8017572:	bf18      	it	ne
 8017574:	2001      	movne	r0, #1
 8017576:	b002      	add	sp, #8
 8017578:	4770      	bx	lr
 801757a:	4610      	mov	r0, r2
 801757c:	e7fb      	b.n	8017576 <__ascii_mbtowc+0x16>
 801757e:	f06f 0001 	mvn.w	r0, #1
 8017582:	e7f8      	b.n	8017576 <__ascii_mbtowc+0x16>

08017584 <__malloc_lock>:
 8017584:	4801      	ldr	r0, [pc, #4]	@ (801758c <__malloc_lock+0x8>)
 8017586:	f7fe bdc4 	b.w	8016112 <__retarget_lock_acquire_recursive>
 801758a:	bf00      	nop
 801758c:	24006c58 	.word	0x24006c58

08017590 <__malloc_unlock>:
 8017590:	4801      	ldr	r0, [pc, #4]	@ (8017598 <__malloc_unlock+0x8>)
 8017592:	f7fe bdbf 	b.w	8016114 <__retarget_lock_release_recursive>
 8017596:	bf00      	nop
 8017598:	24006c58 	.word	0x24006c58

0801759c <_Balloc>:
 801759c:	b570      	push	{r4, r5, r6, lr}
 801759e:	69c6      	ldr	r6, [r0, #28]
 80175a0:	4604      	mov	r4, r0
 80175a2:	460d      	mov	r5, r1
 80175a4:	b976      	cbnz	r6, 80175c4 <_Balloc+0x28>
 80175a6:	2010      	movs	r0, #16
 80175a8:	f7ff ff30 	bl	801740c <malloc>
 80175ac:	4602      	mov	r2, r0
 80175ae:	61e0      	str	r0, [r4, #28]
 80175b0:	b920      	cbnz	r0, 80175bc <_Balloc+0x20>
 80175b2:	4b18      	ldr	r3, [pc, #96]	@ (8017614 <_Balloc+0x78>)
 80175b4:	4818      	ldr	r0, [pc, #96]	@ (8017618 <_Balloc+0x7c>)
 80175b6:	216b      	movs	r1, #107	@ 0x6b
 80175b8:	f000 feda 	bl	8018370 <__assert_func>
 80175bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80175c0:	6006      	str	r6, [r0, #0]
 80175c2:	60c6      	str	r6, [r0, #12]
 80175c4:	69e6      	ldr	r6, [r4, #28]
 80175c6:	68f3      	ldr	r3, [r6, #12]
 80175c8:	b183      	cbz	r3, 80175ec <_Balloc+0x50>
 80175ca:	69e3      	ldr	r3, [r4, #28]
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80175d2:	b9b8      	cbnz	r0, 8017604 <_Balloc+0x68>
 80175d4:	2101      	movs	r1, #1
 80175d6:	fa01 f605 	lsl.w	r6, r1, r5
 80175da:	1d72      	adds	r2, r6, #5
 80175dc:	0092      	lsls	r2, r2, #2
 80175de:	4620      	mov	r0, r4
 80175e0:	f000 fee4 	bl	80183ac <_calloc_r>
 80175e4:	b160      	cbz	r0, 8017600 <_Balloc+0x64>
 80175e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80175ea:	e00e      	b.n	801760a <_Balloc+0x6e>
 80175ec:	2221      	movs	r2, #33	@ 0x21
 80175ee:	2104      	movs	r1, #4
 80175f0:	4620      	mov	r0, r4
 80175f2:	f000 fedb 	bl	80183ac <_calloc_r>
 80175f6:	69e3      	ldr	r3, [r4, #28]
 80175f8:	60f0      	str	r0, [r6, #12]
 80175fa:	68db      	ldr	r3, [r3, #12]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d1e4      	bne.n	80175ca <_Balloc+0x2e>
 8017600:	2000      	movs	r0, #0
 8017602:	bd70      	pop	{r4, r5, r6, pc}
 8017604:	6802      	ldr	r2, [r0, #0]
 8017606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801760a:	2300      	movs	r3, #0
 801760c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017610:	e7f7      	b.n	8017602 <_Balloc+0x66>
 8017612:	bf00      	nop
 8017614:	08019a62 	.word	0x08019a62
 8017618:	08019b42 	.word	0x08019b42

0801761c <_Bfree>:
 801761c:	b570      	push	{r4, r5, r6, lr}
 801761e:	69c6      	ldr	r6, [r0, #28]
 8017620:	4605      	mov	r5, r0
 8017622:	460c      	mov	r4, r1
 8017624:	b976      	cbnz	r6, 8017644 <_Bfree+0x28>
 8017626:	2010      	movs	r0, #16
 8017628:	f7ff fef0 	bl	801740c <malloc>
 801762c:	4602      	mov	r2, r0
 801762e:	61e8      	str	r0, [r5, #28]
 8017630:	b920      	cbnz	r0, 801763c <_Bfree+0x20>
 8017632:	4b09      	ldr	r3, [pc, #36]	@ (8017658 <_Bfree+0x3c>)
 8017634:	4809      	ldr	r0, [pc, #36]	@ (801765c <_Bfree+0x40>)
 8017636:	218f      	movs	r1, #143	@ 0x8f
 8017638:	f000 fe9a 	bl	8018370 <__assert_func>
 801763c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017640:	6006      	str	r6, [r0, #0]
 8017642:	60c6      	str	r6, [r0, #12]
 8017644:	b13c      	cbz	r4, 8017656 <_Bfree+0x3a>
 8017646:	69eb      	ldr	r3, [r5, #28]
 8017648:	6862      	ldr	r2, [r4, #4]
 801764a:	68db      	ldr	r3, [r3, #12]
 801764c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017650:	6021      	str	r1, [r4, #0]
 8017652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017656:	bd70      	pop	{r4, r5, r6, pc}
 8017658:	08019a62 	.word	0x08019a62
 801765c:	08019b42 	.word	0x08019b42

08017660 <__multadd>:
 8017660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017664:	690d      	ldr	r5, [r1, #16]
 8017666:	4607      	mov	r7, r0
 8017668:	460c      	mov	r4, r1
 801766a:	461e      	mov	r6, r3
 801766c:	f101 0c14 	add.w	ip, r1, #20
 8017670:	2000      	movs	r0, #0
 8017672:	f8dc 3000 	ldr.w	r3, [ip]
 8017676:	b299      	uxth	r1, r3
 8017678:	fb02 6101 	mla	r1, r2, r1, r6
 801767c:	0c1e      	lsrs	r6, r3, #16
 801767e:	0c0b      	lsrs	r3, r1, #16
 8017680:	fb02 3306 	mla	r3, r2, r6, r3
 8017684:	b289      	uxth	r1, r1
 8017686:	3001      	adds	r0, #1
 8017688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801768c:	4285      	cmp	r5, r0
 801768e:	f84c 1b04 	str.w	r1, [ip], #4
 8017692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017696:	dcec      	bgt.n	8017672 <__multadd+0x12>
 8017698:	b30e      	cbz	r6, 80176de <__multadd+0x7e>
 801769a:	68a3      	ldr	r3, [r4, #8]
 801769c:	42ab      	cmp	r3, r5
 801769e:	dc19      	bgt.n	80176d4 <__multadd+0x74>
 80176a0:	6861      	ldr	r1, [r4, #4]
 80176a2:	4638      	mov	r0, r7
 80176a4:	3101      	adds	r1, #1
 80176a6:	f7ff ff79 	bl	801759c <_Balloc>
 80176aa:	4680      	mov	r8, r0
 80176ac:	b928      	cbnz	r0, 80176ba <__multadd+0x5a>
 80176ae:	4602      	mov	r2, r0
 80176b0:	4b0c      	ldr	r3, [pc, #48]	@ (80176e4 <__multadd+0x84>)
 80176b2:	480d      	ldr	r0, [pc, #52]	@ (80176e8 <__multadd+0x88>)
 80176b4:	21ba      	movs	r1, #186	@ 0xba
 80176b6:	f000 fe5b 	bl	8018370 <__assert_func>
 80176ba:	6922      	ldr	r2, [r4, #16]
 80176bc:	3202      	adds	r2, #2
 80176be:	f104 010c 	add.w	r1, r4, #12
 80176c2:	0092      	lsls	r2, r2, #2
 80176c4:	300c      	adds	r0, #12
 80176c6:	f7fe fd26 	bl	8016116 <memcpy>
 80176ca:	4621      	mov	r1, r4
 80176cc:	4638      	mov	r0, r7
 80176ce:	f7ff ffa5 	bl	801761c <_Bfree>
 80176d2:	4644      	mov	r4, r8
 80176d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80176d8:	3501      	adds	r5, #1
 80176da:	615e      	str	r6, [r3, #20]
 80176dc:	6125      	str	r5, [r4, #16]
 80176de:	4620      	mov	r0, r4
 80176e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176e4:	08019ad1 	.word	0x08019ad1
 80176e8:	08019b42 	.word	0x08019b42

080176ec <__s2b>:
 80176ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176f0:	460c      	mov	r4, r1
 80176f2:	4615      	mov	r5, r2
 80176f4:	461f      	mov	r7, r3
 80176f6:	2209      	movs	r2, #9
 80176f8:	3308      	adds	r3, #8
 80176fa:	4606      	mov	r6, r0
 80176fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8017700:	2100      	movs	r1, #0
 8017702:	2201      	movs	r2, #1
 8017704:	429a      	cmp	r2, r3
 8017706:	db09      	blt.n	801771c <__s2b+0x30>
 8017708:	4630      	mov	r0, r6
 801770a:	f7ff ff47 	bl	801759c <_Balloc>
 801770e:	b940      	cbnz	r0, 8017722 <__s2b+0x36>
 8017710:	4602      	mov	r2, r0
 8017712:	4b19      	ldr	r3, [pc, #100]	@ (8017778 <__s2b+0x8c>)
 8017714:	4819      	ldr	r0, [pc, #100]	@ (801777c <__s2b+0x90>)
 8017716:	21d3      	movs	r1, #211	@ 0xd3
 8017718:	f000 fe2a 	bl	8018370 <__assert_func>
 801771c:	0052      	lsls	r2, r2, #1
 801771e:	3101      	adds	r1, #1
 8017720:	e7f0      	b.n	8017704 <__s2b+0x18>
 8017722:	9b08      	ldr	r3, [sp, #32]
 8017724:	6143      	str	r3, [r0, #20]
 8017726:	2d09      	cmp	r5, #9
 8017728:	f04f 0301 	mov.w	r3, #1
 801772c:	6103      	str	r3, [r0, #16]
 801772e:	dd16      	ble.n	801775e <__s2b+0x72>
 8017730:	f104 0909 	add.w	r9, r4, #9
 8017734:	46c8      	mov	r8, r9
 8017736:	442c      	add	r4, r5
 8017738:	f818 3b01 	ldrb.w	r3, [r8], #1
 801773c:	4601      	mov	r1, r0
 801773e:	3b30      	subs	r3, #48	@ 0x30
 8017740:	220a      	movs	r2, #10
 8017742:	4630      	mov	r0, r6
 8017744:	f7ff ff8c 	bl	8017660 <__multadd>
 8017748:	45a0      	cmp	r8, r4
 801774a:	d1f5      	bne.n	8017738 <__s2b+0x4c>
 801774c:	f1a5 0408 	sub.w	r4, r5, #8
 8017750:	444c      	add	r4, r9
 8017752:	1b2d      	subs	r5, r5, r4
 8017754:	1963      	adds	r3, r4, r5
 8017756:	42bb      	cmp	r3, r7
 8017758:	db04      	blt.n	8017764 <__s2b+0x78>
 801775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801775e:	340a      	adds	r4, #10
 8017760:	2509      	movs	r5, #9
 8017762:	e7f6      	b.n	8017752 <__s2b+0x66>
 8017764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017768:	4601      	mov	r1, r0
 801776a:	3b30      	subs	r3, #48	@ 0x30
 801776c:	220a      	movs	r2, #10
 801776e:	4630      	mov	r0, r6
 8017770:	f7ff ff76 	bl	8017660 <__multadd>
 8017774:	e7ee      	b.n	8017754 <__s2b+0x68>
 8017776:	bf00      	nop
 8017778:	08019ad1 	.word	0x08019ad1
 801777c:	08019b42 	.word	0x08019b42

08017780 <__hi0bits>:
 8017780:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017784:	4603      	mov	r3, r0
 8017786:	bf36      	itet	cc
 8017788:	0403      	lslcc	r3, r0, #16
 801778a:	2000      	movcs	r0, #0
 801778c:	2010      	movcc	r0, #16
 801778e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017792:	bf3c      	itt	cc
 8017794:	021b      	lslcc	r3, r3, #8
 8017796:	3008      	addcc	r0, #8
 8017798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801779c:	bf3c      	itt	cc
 801779e:	011b      	lslcc	r3, r3, #4
 80177a0:	3004      	addcc	r0, #4
 80177a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80177a6:	bf3c      	itt	cc
 80177a8:	009b      	lslcc	r3, r3, #2
 80177aa:	3002      	addcc	r0, #2
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	db05      	blt.n	80177bc <__hi0bits+0x3c>
 80177b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80177b4:	f100 0001 	add.w	r0, r0, #1
 80177b8:	bf08      	it	eq
 80177ba:	2020      	moveq	r0, #32
 80177bc:	4770      	bx	lr

080177be <__lo0bits>:
 80177be:	6803      	ldr	r3, [r0, #0]
 80177c0:	4602      	mov	r2, r0
 80177c2:	f013 0007 	ands.w	r0, r3, #7
 80177c6:	d00b      	beq.n	80177e0 <__lo0bits+0x22>
 80177c8:	07d9      	lsls	r1, r3, #31
 80177ca:	d421      	bmi.n	8017810 <__lo0bits+0x52>
 80177cc:	0798      	lsls	r0, r3, #30
 80177ce:	bf49      	itett	mi
 80177d0:	085b      	lsrmi	r3, r3, #1
 80177d2:	089b      	lsrpl	r3, r3, #2
 80177d4:	2001      	movmi	r0, #1
 80177d6:	6013      	strmi	r3, [r2, #0]
 80177d8:	bf5c      	itt	pl
 80177da:	6013      	strpl	r3, [r2, #0]
 80177dc:	2002      	movpl	r0, #2
 80177de:	4770      	bx	lr
 80177e0:	b299      	uxth	r1, r3
 80177e2:	b909      	cbnz	r1, 80177e8 <__lo0bits+0x2a>
 80177e4:	0c1b      	lsrs	r3, r3, #16
 80177e6:	2010      	movs	r0, #16
 80177e8:	b2d9      	uxtb	r1, r3
 80177ea:	b909      	cbnz	r1, 80177f0 <__lo0bits+0x32>
 80177ec:	3008      	adds	r0, #8
 80177ee:	0a1b      	lsrs	r3, r3, #8
 80177f0:	0719      	lsls	r1, r3, #28
 80177f2:	bf04      	itt	eq
 80177f4:	091b      	lsreq	r3, r3, #4
 80177f6:	3004      	addeq	r0, #4
 80177f8:	0799      	lsls	r1, r3, #30
 80177fa:	bf04      	itt	eq
 80177fc:	089b      	lsreq	r3, r3, #2
 80177fe:	3002      	addeq	r0, #2
 8017800:	07d9      	lsls	r1, r3, #31
 8017802:	d403      	bmi.n	801780c <__lo0bits+0x4e>
 8017804:	085b      	lsrs	r3, r3, #1
 8017806:	f100 0001 	add.w	r0, r0, #1
 801780a:	d003      	beq.n	8017814 <__lo0bits+0x56>
 801780c:	6013      	str	r3, [r2, #0]
 801780e:	4770      	bx	lr
 8017810:	2000      	movs	r0, #0
 8017812:	4770      	bx	lr
 8017814:	2020      	movs	r0, #32
 8017816:	4770      	bx	lr

08017818 <__i2b>:
 8017818:	b510      	push	{r4, lr}
 801781a:	460c      	mov	r4, r1
 801781c:	2101      	movs	r1, #1
 801781e:	f7ff febd 	bl	801759c <_Balloc>
 8017822:	4602      	mov	r2, r0
 8017824:	b928      	cbnz	r0, 8017832 <__i2b+0x1a>
 8017826:	4b05      	ldr	r3, [pc, #20]	@ (801783c <__i2b+0x24>)
 8017828:	4805      	ldr	r0, [pc, #20]	@ (8017840 <__i2b+0x28>)
 801782a:	f240 1145 	movw	r1, #325	@ 0x145
 801782e:	f000 fd9f 	bl	8018370 <__assert_func>
 8017832:	2301      	movs	r3, #1
 8017834:	6144      	str	r4, [r0, #20]
 8017836:	6103      	str	r3, [r0, #16]
 8017838:	bd10      	pop	{r4, pc}
 801783a:	bf00      	nop
 801783c:	08019ad1 	.word	0x08019ad1
 8017840:	08019b42 	.word	0x08019b42

08017844 <__multiply>:
 8017844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017848:	4614      	mov	r4, r2
 801784a:	690a      	ldr	r2, [r1, #16]
 801784c:	6923      	ldr	r3, [r4, #16]
 801784e:	429a      	cmp	r2, r3
 8017850:	bfa8      	it	ge
 8017852:	4623      	movge	r3, r4
 8017854:	460f      	mov	r7, r1
 8017856:	bfa4      	itt	ge
 8017858:	460c      	movge	r4, r1
 801785a:	461f      	movge	r7, r3
 801785c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017860:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017864:	68a3      	ldr	r3, [r4, #8]
 8017866:	6861      	ldr	r1, [r4, #4]
 8017868:	eb0a 0609 	add.w	r6, sl, r9
 801786c:	42b3      	cmp	r3, r6
 801786e:	b085      	sub	sp, #20
 8017870:	bfb8      	it	lt
 8017872:	3101      	addlt	r1, #1
 8017874:	f7ff fe92 	bl	801759c <_Balloc>
 8017878:	b930      	cbnz	r0, 8017888 <__multiply+0x44>
 801787a:	4602      	mov	r2, r0
 801787c:	4b44      	ldr	r3, [pc, #272]	@ (8017990 <__multiply+0x14c>)
 801787e:	4845      	ldr	r0, [pc, #276]	@ (8017994 <__multiply+0x150>)
 8017880:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017884:	f000 fd74 	bl	8018370 <__assert_func>
 8017888:	f100 0514 	add.w	r5, r0, #20
 801788c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017890:	462b      	mov	r3, r5
 8017892:	2200      	movs	r2, #0
 8017894:	4543      	cmp	r3, r8
 8017896:	d321      	bcc.n	80178dc <__multiply+0x98>
 8017898:	f107 0114 	add.w	r1, r7, #20
 801789c:	f104 0214 	add.w	r2, r4, #20
 80178a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80178a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80178a8:	9302      	str	r3, [sp, #8]
 80178aa:	1b13      	subs	r3, r2, r4
 80178ac:	3b15      	subs	r3, #21
 80178ae:	f023 0303 	bic.w	r3, r3, #3
 80178b2:	3304      	adds	r3, #4
 80178b4:	f104 0715 	add.w	r7, r4, #21
 80178b8:	42ba      	cmp	r2, r7
 80178ba:	bf38      	it	cc
 80178bc:	2304      	movcc	r3, #4
 80178be:	9301      	str	r3, [sp, #4]
 80178c0:	9b02      	ldr	r3, [sp, #8]
 80178c2:	9103      	str	r1, [sp, #12]
 80178c4:	428b      	cmp	r3, r1
 80178c6:	d80c      	bhi.n	80178e2 <__multiply+0x9e>
 80178c8:	2e00      	cmp	r6, #0
 80178ca:	dd03      	ble.n	80178d4 <__multiply+0x90>
 80178cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d05b      	beq.n	801798c <__multiply+0x148>
 80178d4:	6106      	str	r6, [r0, #16]
 80178d6:	b005      	add	sp, #20
 80178d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178dc:	f843 2b04 	str.w	r2, [r3], #4
 80178e0:	e7d8      	b.n	8017894 <__multiply+0x50>
 80178e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80178e6:	f1ba 0f00 	cmp.w	sl, #0
 80178ea:	d024      	beq.n	8017936 <__multiply+0xf2>
 80178ec:	f104 0e14 	add.w	lr, r4, #20
 80178f0:	46a9      	mov	r9, r5
 80178f2:	f04f 0c00 	mov.w	ip, #0
 80178f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178fa:	f8d9 3000 	ldr.w	r3, [r9]
 80178fe:	fa1f fb87 	uxth.w	fp, r7
 8017902:	b29b      	uxth	r3, r3
 8017904:	fb0a 330b 	mla	r3, sl, fp, r3
 8017908:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801790c:	f8d9 7000 	ldr.w	r7, [r9]
 8017910:	4463      	add	r3, ip
 8017912:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017916:	fb0a c70b 	mla	r7, sl, fp, ip
 801791a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801791e:	b29b      	uxth	r3, r3
 8017920:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017924:	4572      	cmp	r2, lr
 8017926:	f849 3b04 	str.w	r3, [r9], #4
 801792a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801792e:	d8e2      	bhi.n	80178f6 <__multiply+0xb2>
 8017930:	9b01      	ldr	r3, [sp, #4]
 8017932:	f845 c003 	str.w	ip, [r5, r3]
 8017936:	9b03      	ldr	r3, [sp, #12]
 8017938:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801793c:	3104      	adds	r1, #4
 801793e:	f1b9 0f00 	cmp.w	r9, #0
 8017942:	d021      	beq.n	8017988 <__multiply+0x144>
 8017944:	682b      	ldr	r3, [r5, #0]
 8017946:	f104 0c14 	add.w	ip, r4, #20
 801794a:	46ae      	mov	lr, r5
 801794c:	f04f 0a00 	mov.w	sl, #0
 8017950:	f8bc b000 	ldrh.w	fp, [ip]
 8017954:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017958:	fb09 770b 	mla	r7, r9, fp, r7
 801795c:	4457      	add	r7, sl
 801795e:	b29b      	uxth	r3, r3
 8017960:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017964:	f84e 3b04 	str.w	r3, [lr], #4
 8017968:	f85c 3b04 	ldr.w	r3, [ip], #4
 801796c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017970:	f8be 3000 	ldrh.w	r3, [lr]
 8017974:	fb09 330a 	mla	r3, r9, sl, r3
 8017978:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801797c:	4562      	cmp	r2, ip
 801797e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017982:	d8e5      	bhi.n	8017950 <__multiply+0x10c>
 8017984:	9f01      	ldr	r7, [sp, #4]
 8017986:	51eb      	str	r3, [r5, r7]
 8017988:	3504      	adds	r5, #4
 801798a:	e799      	b.n	80178c0 <__multiply+0x7c>
 801798c:	3e01      	subs	r6, #1
 801798e:	e79b      	b.n	80178c8 <__multiply+0x84>
 8017990:	08019ad1 	.word	0x08019ad1
 8017994:	08019b42 	.word	0x08019b42

08017998 <__pow5mult>:
 8017998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801799c:	4615      	mov	r5, r2
 801799e:	f012 0203 	ands.w	r2, r2, #3
 80179a2:	4607      	mov	r7, r0
 80179a4:	460e      	mov	r6, r1
 80179a6:	d007      	beq.n	80179b8 <__pow5mult+0x20>
 80179a8:	4c25      	ldr	r4, [pc, #148]	@ (8017a40 <__pow5mult+0xa8>)
 80179aa:	3a01      	subs	r2, #1
 80179ac:	2300      	movs	r3, #0
 80179ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80179b2:	f7ff fe55 	bl	8017660 <__multadd>
 80179b6:	4606      	mov	r6, r0
 80179b8:	10ad      	asrs	r5, r5, #2
 80179ba:	d03d      	beq.n	8017a38 <__pow5mult+0xa0>
 80179bc:	69fc      	ldr	r4, [r7, #28]
 80179be:	b97c      	cbnz	r4, 80179e0 <__pow5mult+0x48>
 80179c0:	2010      	movs	r0, #16
 80179c2:	f7ff fd23 	bl	801740c <malloc>
 80179c6:	4602      	mov	r2, r0
 80179c8:	61f8      	str	r0, [r7, #28]
 80179ca:	b928      	cbnz	r0, 80179d8 <__pow5mult+0x40>
 80179cc:	4b1d      	ldr	r3, [pc, #116]	@ (8017a44 <__pow5mult+0xac>)
 80179ce:	481e      	ldr	r0, [pc, #120]	@ (8017a48 <__pow5mult+0xb0>)
 80179d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80179d4:	f000 fccc 	bl	8018370 <__assert_func>
 80179d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80179dc:	6004      	str	r4, [r0, #0]
 80179de:	60c4      	str	r4, [r0, #12]
 80179e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80179e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80179e8:	b94c      	cbnz	r4, 80179fe <__pow5mult+0x66>
 80179ea:	f240 2171 	movw	r1, #625	@ 0x271
 80179ee:	4638      	mov	r0, r7
 80179f0:	f7ff ff12 	bl	8017818 <__i2b>
 80179f4:	2300      	movs	r3, #0
 80179f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80179fa:	4604      	mov	r4, r0
 80179fc:	6003      	str	r3, [r0, #0]
 80179fe:	f04f 0900 	mov.w	r9, #0
 8017a02:	07eb      	lsls	r3, r5, #31
 8017a04:	d50a      	bpl.n	8017a1c <__pow5mult+0x84>
 8017a06:	4631      	mov	r1, r6
 8017a08:	4622      	mov	r2, r4
 8017a0a:	4638      	mov	r0, r7
 8017a0c:	f7ff ff1a 	bl	8017844 <__multiply>
 8017a10:	4631      	mov	r1, r6
 8017a12:	4680      	mov	r8, r0
 8017a14:	4638      	mov	r0, r7
 8017a16:	f7ff fe01 	bl	801761c <_Bfree>
 8017a1a:	4646      	mov	r6, r8
 8017a1c:	106d      	asrs	r5, r5, #1
 8017a1e:	d00b      	beq.n	8017a38 <__pow5mult+0xa0>
 8017a20:	6820      	ldr	r0, [r4, #0]
 8017a22:	b938      	cbnz	r0, 8017a34 <__pow5mult+0x9c>
 8017a24:	4622      	mov	r2, r4
 8017a26:	4621      	mov	r1, r4
 8017a28:	4638      	mov	r0, r7
 8017a2a:	f7ff ff0b 	bl	8017844 <__multiply>
 8017a2e:	6020      	str	r0, [r4, #0]
 8017a30:	f8c0 9000 	str.w	r9, [r0]
 8017a34:	4604      	mov	r4, r0
 8017a36:	e7e4      	b.n	8017a02 <__pow5mult+0x6a>
 8017a38:	4630      	mov	r0, r6
 8017a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a3e:	bf00      	nop
 8017a40:	08019b9c 	.word	0x08019b9c
 8017a44:	08019a62 	.word	0x08019a62
 8017a48:	08019b42 	.word	0x08019b42

08017a4c <__lshift>:
 8017a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a50:	460c      	mov	r4, r1
 8017a52:	6849      	ldr	r1, [r1, #4]
 8017a54:	6923      	ldr	r3, [r4, #16]
 8017a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017a5a:	68a3      	ldr	r3, [r4, #8]
 8017a5c:	4607      	mov	r7, r0
 8017a5e:	4691      	mov	r9, r2
 8017a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017a64:	f108 0601 	add.w	r6, r8, #1
 8017a68:	42b3      	cmp	r3, r6
 8017a6a:	db0b      	blt.n	8017a84 <__lshift+0x38>
 8017a6c:	4638      	mov	r0, r7
 8017a6e:	f7ff fd95 	bl	801759c <_Balloc>
 8017a72:	4605      	mov	r5, r0
 8017a74:	b948      	cbnz	r0, 8017a8a <__lshift+0x3e>
 8017a76:	4602      	mov	r2, r0
 8017a78:	4b28      	ldr	r3, [pc, #160]	@ (8017b1c <__lshift+0xd0>)
 8017a7a:	4829      	ldr	r0, [pc, #164]	@ (8017b20 <__lshift+0xd4>)
 8017a7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017a80:	f000 fc76 	bl	8018370 <__assert_func>
 8017a84:	3101      	adds	r1, #1
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	e7ee      	b.n	8017a68 <__lshift+0x1c>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	f100 0114 	add.w	r1, r0, #20
 8017a90:	f100 0210 	add.w	r2, r0, #16
 8017a94:	4618      	mov	r0, r3
 8017a96:	4553      	cmp	r3, sl
 8017a98:	db33      	blt.n	8017b02 <__lshift+0xb6>
 8017a9a:	6920      	ldr	r0, [r4, #16]
 8017a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017aa0:	f104 0314 	add.w	r3, r4, #20
 8017aa4:	f019 091f 	ands.w	r9, r9, #31
 8017aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ab0:	d02b      	beq.n	8017b0a <__lshift+0xbe>
 8017ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8017ab6:	468a      	mov	sl, r1
 8017ab8:	2200      	movs	r2, #0
 8017aba:	6818      	ldr	r0, [r3, #0]
 8017abc:	fa00 f009 	lsl.w	r0, r0, r9
 8017ac0:	4310      	orrs	r0, r2
 8017ac2:	f84a 0b04 	str.w	r0, [sl], #4
 8017ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017aca:	459c      	cmp	ip, r3
 8017acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8017ad0:	d8f3      	bhi.n	8017aba <__lshift+0x6e>
 8017ad2:	ebac 0304 	sub.w	r3, ip, r4
 8017ad6:	3b15      	subs	r3, #21
 8017ad8:	f023 0303 	bic.w	r3, r3, #3
 8017adc:	3304      	adds	r3, #4
 8017ade:	f104 0015 	add.w	r0, r4, #21
 8017ae2:	4584      	cmp	ip, r0
 8017ae4:	bf38      	it	cc
 8017ae6:	2304      	movcc	r3, #4
 8017ae8:	50ca      	str	r2, [r1, r3]
 8017aea:	b10a      	cbz	r2, 8017af0 <__lshift+0xa4>
 8017aec:	f108 0602 	add.w	r6, r8, #2
 8017af0:	3e01      	subs	r6, #1
 8017af2:	4638      	mov	r0, r7
 8017af4:	612e      	str	r6, [r5, #16]
 8017af6:	4621      	mov	r1, r4
 8017af8:	f7ff fd90 	bl	801761c <_Bfree>
 8017afc:	4628      	mov	r0, r5
 8017afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8017b06:	3301      	adds	r3, #1
 8017b08:	e7c5      	b.n	8017a96 <__lshift+0x4a>
 8017b0a:	3904      	subs	r1, #4
 8017b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8017b14:	459c      	cmp	ip, r3
 8017b16:	d8f9      	bhi.n	8017b0c <__lshift+0xc0>
 8017b18:	e7ea      	b.n	8017af0 <__lshift+0xa4>
 8017b1a:	bf00      	nop
 8017b1c:	08019ad1 	.word	0x08019ad1
 8017b20:	08019b42 	.word	0x08019b42

08017b24 <__mcmp>:
 8017b24:	690a      	ldr	r2, [r1, #16]
 8017b26:	4603      	mov	r3, r0
 8017b28:	6900      	ldr	r0, [r0, #16]
 8017b2a:	1a80      	subs	r0, r0, r2
 8017b2c:	b530      	push	{r4, r5, lr}
 8017b2e:	d10e      	bne.n	8017b4e <__mcmp+0x2a>
 8017b30:	3314      	adds	r3, #20
 8017b32:	3114      	adds	r1, #20
 8017b34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017b38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017b3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017b40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017b44:	4295      	cmp	r5, r2
 8017b46:	d003      	beq.n	8017b50 <__mcmp+0x2c>
 8017b48:	d205      	bcs.n	8017b56 <__mcmp+0x32>
 8017b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b4e:	bd30      	pop	{r4, r5, pc}
 8017b50:	42a3      	cmp	r3, r4
 8017b52:	d3f3      	bcc.n	8017b3c <__mcmp+0x18>
 8017b54:	e7fb      	b.n	8017b4e <__mcmp+0x2a>
 8017b56:	2001      	movs	r0, #1
 8017b58:	e7f9      	b.n	8017b4e <__mcmp+0x2a>
	...

08017b5c <__mdiff>:
 8017b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b60:	4689      	mov	r9, r1
 8017b62:	4606      	mov	r6, r0
 8017b64:	4611      	mov	r1, r2
 8017b66:	4648      	mov	r0, r9
 8017b68:	4614      	mov	r4, r2
 8017b6a:	f7ff ffdb 	bl	8017b24 <__mcmp>
 8017b6e:	1e05      	subs	r5, r0, #0
 8017b70:	d112      	bne.n	8017b98 <__mdiff+0x3c>
 8017b72:	4629      	mov	r1, r5
 8017b74:	4630      	mov	r0, r6
 8017b76:	f7ff fd11 	bl	801759c <_Balloc>
 8017b7a:	4602      	mov	r2, r0
 8017b7c:	b928      	cbnz	r0, 8017b8a <__mdiff+0x2e>
 8017b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8017c7c <__mdiff+0x120>)
 8017b80:	f240 2137 	movw	r1, #567	@ 0x237
 8017b84:	483e      	ldr	r0, [pc, #248]	@ (8017c80 <__mdiff+0x124>)
 8017b86:	f000 fbf3 	bl	8018370 <__assert_func>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017b90:	4610      	mov	r0, r2
 8017b92:	b003      	add	sp, #12
 8017b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b98:	bfbc      	itt	lt
 8017b9a:	464b      	movlt	r3, r9
 8017b9c:	46a1      	movlt	r9, r4
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017ba4:	bfba      	itte	lt
 8017ba6:	461c      	movlt	r4, r3
 8017ba8:	2501      	movlt	r5, #1
 8017baa:	2500      	movge	r5, #0
 8017bac:	f7ff fcf6 	bl	801759c <_Balloc>
 8017bb0:	4602      	mov	r2, r0
 8017bb2:	b918      	cbnz	r0, 8017bbc <__mdiff+0x60>
 8017bb4:	4b31      	ldr	r3, [pc, #196]	@ (8017c7c <__mdiff+0x120>)
 8017bb6:	f240 2145 	movw	r1, #581	@ 0x245
 8017bba:	e7e3      	b.n	8017b84 <__mdiff+0x28>
 8017bbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017bc0:	6926      	ldr	r6, [r4, #16]
 8017bc2:	60c5      	str	r5, [r0, #12]
 8017bc4:	f109 0310 	add.w	r3, r9, #16
 8017bc8:	f109 0514 	add.w	r5, r9, #20
 8017bcc:	f104 0e14 	add.w	lr, r4, #20
 8017bd0:	f100 0b14 	add.w	fp, r0, #20
 8017bd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017bd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017bdc:	9301      	str	r3, [sp, #4]
 8017bde:	46d9      	mov	r9, fp
 8017be0:	f04f 0c00 	mov.w	ip, #0
 8017be4:	9b01      	ldr	r3, [sp, #4]
 8017be6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017bea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017bee:	9301      	str	r3, [sp, #4]
 8017bf0:	fa1f f38a 	uxth.w	r3, sl
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	b283      	uxth	r3, r0
 8017bf8:	1acb      	subs	r3, r1, r3
 8017bfa:	0c00      	lsrs	r0, r0, #16
 8017bfc:	4463      	add	r3, ip
 8017bfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017c02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017c0c:	4576      	cmp	r6, lr
 8017c0e:	f849 3b04 	str.w	r3, [r9], #4
 8017c12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017c16:	d8e5      	bhi.n	8017be4 <__mdiff+0x88>
 8017c18:	1b33      	subs	r3, r6, r4
 8017c1a:	3b15      	subs	r3, #21
 8017c1c:	f023 0303 	bic.w	r3, r3, #3
 8017c20:	3415      	adds	r4, #21
 8017c22:	3304      	adds	r3, #4
 8017c24:	42a6      	cmp	r6, r4
 8017c26:	bf38      	it	cc
 8017c28:	2304      	movcc	r3, #4
 8017c2a:	441d      	add	r5, r3
 8017c2c:	445b      	add	r3, fp
 8017c2e:	461e      	mov	r6, r3
 8017c30:	462c      	mov	r4, r5
 8017c32:	4544      	cmp	r4, r8
 8017c34:	d30e      	bcc.n	8017c54 <__mdiff+0xf8>
 8017c36:	f108 0103 	add.w	r1, r8, #3
 8017c3a:	1b49      	subs	r1, r1, r5
 8017c3c:	f021 0103 	bic.w	r1, r1, #3
 8017c40:	3d03      	subs	r5, #3
 8017c42:	45a8      	cmp	r8, r5
 8017c44:	bf38      	it	cc
 8017c46:	2100      	movcc	r1, #0
 8017c48:	440b      	add	r3, r1
 8017c4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c4e:	b191      	cbz	r1, 8017c76 <__mdiff+0x11a>
 8017c50:	6117      	str	r7, [r2, #16]
 8017c52:	e79d      	b.n	8017b90 <__mdiff+0x34>
 8017c54:	f854 1b04 	ldr.w	r1, [r4], #4
 8017c58:	46e6      	mov	lr, ip
 8017c5a:	0c08      	lsrs	r0, r1, #16
 8017c5c:	fa1c fc81 	uxtah	ip, ip, r1
 8017c60:	4471      	add	r1, lr
 8017c62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017c66:	b289      	uxth	r1, r1
 8017c68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017c6c:	f846 1b04 	str.w	r1, [r6], #4
 8017c70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017c74:	e7dd      	b.n	8017c32 <__mdiff+0xd6>
 8017c76:	3f01      	subs	r7, #1
 8017c78:	e7e7      	b.n	8017c4a <__mdiff+0xee>
 8017c7a:	bf00      	nop
 8017c7c:	08019ad1 	.word	0x08019ad1
 8017c80:	08019b42 	.word	0x08019b42

08017c84 <__ulp>:
 8017c84:	b082      	sub	sp, #8
 8017c86:	ed8d 0b00 	vstr	d0, [sp]
 8017c8a:	9a01      	ldr	r2, [sp, #4]
 8017c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8017ccc <__ulp+0x48>)
 8017c8e:	4013      	ands	r3, r2
 8017c90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	dc08      	bgt.n	8017caa <__ulp+0x26>
 8017c98:	425b      	negs	r3, r3
 8017c9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017c9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017ca2:	da04      	bge.n	8017cae <__ulp+0x2a>
 8017ca4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017ca8:	4113      	asrs	r3, r2
 8017caa:	2200      	movs	r2, #0
 8017cac:	e008      	b.n	8017cc0 <__ulp+0x3c>
 8017cae:	f1a2 0314 	sub.w	r3, r2, #20
 8017cb2:	2b1e      	cmp	r3, #30
 8017cb4:	bfda      	itte	le
 8017cb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017cba:	40da      	lsrle	r2, r3
 8017cbc:	2201      	movgt	r2, #1
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	4610      	mov	r0, r2
 8017cc4:	ec41 0b10 	vmov	d0, r0, r1
 8017cc8:	b002      	add	sp, #8
 8017cca:	4770      	bx	lr
 8017ccc:	7ff00000 	.word	0x7ff00000

08017cd0 <__b2d>:
 8017cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd4:	6906      	ldr	r6, [r0, #16]
 8017cd6:	f100 0814 	add.w	r8, r0, #20
 8017cda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017cde:	1f37      	subs	r7, r6, #4
 8017ce0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017ce4:	4610      	mov	r0, r2
 8017ce6:	f7ff fd4b 	bl	8017780 <__hi0bits>
 8017cea:	f1c0 0320 	rsb	r3, r0, #32
 8017cee:	280a      	cmp	r0, #10
 8017cf0:	600b      	str	r3, [r1, #0]
 8017cf2:	491b      	ldr	r1, [pc, #108]	@ (8017d60 <__b2d+0x90>)
 8017cf4:	dc15      	bgt.n	8017d22 <__b2d+0x52>
 8017cf6:	f1c0 0c0b 	rsb	ip, r0, #11
 8017cfa:	fa22 f30c 	lsr.w	r3, r2, ip
 8017cfe:	45b8      	cmp	r8, r7
 8017d00:	ea43 0501 	orr.w	r5, r3, r1
 8017d04:	bf34      	ite	cc
 8017d06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017d0a:	2300      	movcs	r3, #0
 8017d0c:	3015      	adds	r0, #21
 8017d0e:	fa02 f000 	lsl.w	r0, r2, r0
 8017d12:	fa23 f30c 	lsr.w	r3, r3, ip
 8017d16:	4303      	orrs	r3, r0
 8017d18:	461c      	mov	r4, r3
 8017d1a:	ec45 4b10 	vmov	d0, r4, r5
 8017d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d22:	45b8      	cmp	r8, r7
 8017d24:	bf3a      	itte	cc
 8017d26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017d2a:	f1a6 0708 	subcc.w	r7, r6, #8
 8017d2e:	2300      	movcs	r3, #0
 8017d30:	380b      	subs	r0, #11
 8017d32:	d012      	beq.n	8017d5a <__b2d+0x8a>
 8017d34:	f1c0 0120 	rsb	r1, r0, #32
 8017d38:	fa23 f401 	lsr.w	r4, r3, r1
 8017d3c:	4082      	lsls	r2, r0
 8017d3e:	4322      	orrs	r2, r4
 8017d40:	4547      	cmp	r7, r8
 8017d42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017d46:	bf8c      	ite	hi
 8017d48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017d4c:	2200      	movls	r2, #0
 8017d4e:	4083      	lsls	r3, r0
 8017d50:	40ca      	lsrs	r2, r1
 8017d52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017d56:	4313      	orrs	r3, r2
 8017d58:	e7de      	b.n	8017d18 <__b2d+0x48>
 8017d5a:	ea42 0501 	orr.w	r5, r2, r1
 8017d5e:	e7db      	b.n	8017d18 <__b2d+0x48>
 8017d60:	3ff00000 	.word	0x3ff00000

08017d64 <__d2b>:
 8017d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d68:	460f      	mov	r7, r1
 8017d6a:	2101      	movs	r1, #1
 8017d6c:	ec59 8b10 	vmov	r8, r9, d0
 8017d70:	4616      	mov	r6, r2
 8017d72:	f7ff fc13 	bl	801759c <_Balloc>
 8017d76:	4604      	mov	r4, r0
 8017d78:	b930      	cbnz	r0, 8017d88 <__d2b+0x24>
 8017d7a:	4602      	mov	r2, r0
 8017d7c:	4b23      	ldr	r3, [pc, #140]	@ (8017e0c <__d2b+0xa8>)
 8017d7e:	4824      	ldr	r0, [pc, #144]	@ (8017e10 <__d2b+0xac>)
 8017d80:	f240 310f 	movw	r1, #783	@ 0x30f
 8017d84:	f000 faf4 	bl	8018370 <__assert_func>
 8017d88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017d8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d90:	b10d      	cbz	r5, 8017d96 <__d2b+0x32>
 8017d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017d96:	9301      	str	r3, [sp, #4]
 8017d98:	f1b8 0300 	subs.w	r3, r8, #0
 8017d9c:	d023      	beq.n	8017de6 <__d2b+0x82>
 8017d9e:	4668      	mov	r0, sp
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	f7ff fd0c 	bl	80177be <__lo0bits>
 8017da6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017daa:	b1d0      	cbz	r0, 8017de2 <__d2b+0x7e>
 8017dac:	f1c0 0320 	rsb	r3, r0, #32
 8017db0:	fa02 f303 	lsl.w	r3, r2, r3
 8017db4:	430b      	orrs	r3, r1
 8017db6:	40c2      	lsrs	r2, r0
 8017db8:	6163      	str	r3, [r4, #20]
 8017dba:	9201      	str	r2, [sp, #4]
 8017dbc:	9b01      	ldr	r3, [sp, #4]
 8017dbe:	61a3      	str	r3, [r4, #24]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	bf0c      	ite	eq
 8017dc4:	2201      	moveq	r2, #1
 8017dc6:	2202      	movne	r2, #2
 8017dc8:	6122      	str	r2, [r4, #16]
 8017dca:	b1a5      	cbz	r5, 8017df6 <__d2b+0x92>
 8017dcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017dd0:	4405      	add	r5, r0
 8017dd2:	603d      	str	r5, [r7, #0]
 8017dd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017dd8:	6030      	str	r0, [r6, #0]
 8017dda:	4620      	mov	r0, r4
 8017ddc:	b003      	add	sp, #12
 8017dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017de2:	6161      	str	r1, [r4, #20]
 8017de4:	e7ea      	b.n	8017dbc <__d2b+0x58>
 8017de6:	a801      	add	r0, sp, #4
 8017de8:	f7ff fce9 	bl	80177be <__lo0bits>
 8017dec:	9b01      	ldr	r3, [sp, #4]
 8017dee:	6163      	str	r3, [r4, #20]
 8017df0:	3020      	adds	r0, #32
 8017df2:	2201      	movs	r2, #1
 8017df4:	e7e8      	b.n	8017dc8 <__d2b+0x64>
 8017df6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017dfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017dfe:	6038      	str	r0, [r7, #0]
 8017e00:	6918      	ldr	r0, [r3, #16]
 8017e02:	f7ff fcbd 	bl	8017780 <__hi0bits>
 8017e06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017e0a:	e7e5      	b.n	8017dd8 <__d2b+0x74>
 8017e0c:	08019ad1 	.word	0x08019ad1
 8017e10:	08019b42 	.word	0x08019b42

08017e14 <__ratio>:
 8017e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e18:	4688      	mov	r8, r1
 8017e1a:	4669      	mov	r1, sp
 8017e1c:	4681      	mov	r9, r0
 8017e1e:	f7ff ff57 	bl	8017cd0 <__b2d>
 8017e22:	a901      	add	r1, sp, #4
 8017e24:	4640      	mov	r0, r8
 8017e26:	ec55 4b10 	vmov	r4, r5, d0
 8017e2a:	f7ff ff51 	bl	8017cd0 <__b2d>
 8017e2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017e32:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017e36:	1ad2      	subs	r2, r2, r3
 8017e38:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017e3c:	1a5b      	subs	r3, r3, r1
 8017e3e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017e42:	ec57 6b10 	vmov	r6, r7, d0
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	bfd6      	itet	le
 8017e4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017e4e:	462a      	movgt	r2, r5
 8017e50:	463a      	movle	r2, r7
 8017e52:	46ab      	mov	fp, r5
 8017e54:	46a2      	mov	sl, r4
 8017e56:	bfce      	itee	gt
 8017e58:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017e5c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017e60:	ee00 3a90 	vmovle	s1, r3
 8017e64:	ec4b ab17 	vmov	d7, sl, fp
 8017e68:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017e6c:	b003      	add	sp, #12
 8017e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e72 <__copybits>:
 8017e72:	3901      	subs	r1, #1
 8017e74:	b570      	push	{r4, r5, r6, lr}
 8017e76:	1149      	asrs	r1, r1, #5
 8017e78:	6914      	ldr	r4, [r2, #16]
 8017e7a:	3101      	adds	r1, #1
 8017e7c:	f102 0314 	add.w	r3, r2, #20
 8017e80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017e84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017e88:	1f05      	subs	r5, r0, #4
 8017e8a:	42a3      	cmp	r3, r4
 8017e8c:	d30c      	bcc.n	8017ea8 <__copybits+0x36>
 8017e8e:	1aa3      	subs	r3, r4, r2
 8017e90:	3b11      	subs	r3, #17
 8017e92:	f023 0303 	bic.w	r3, r3, #3
 8017e96:	3211      	adds	r2, #17
 8017e98:	42a2      	cmp	r2, r4
 8017e9a:	bf88      	it	hi
 8017e9c:	2300      	movhi	r3, #0
 8017e9e:	4418      	add	r0, r3
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	4288      	cmp	r0, r1
 8017ea4:	d305      	bcc.n	8017eb2 <__copybits+0x40>
 8017ea6:	bd70      	pop	{r4, r5, r6, pc}
 8017ea8:	f853 6b04 	ldr.w	r6, [r3], #4
 8017eac:	f845 6f04 	str.w	r6, [r5, #4]!
 8017eb0:	e7eb      	b.n	8017e8a <__copybits+0x18>
 8017eb2:	f840 3b04 	str.w	r3, [r0], #4
 8017eb6:	e7f4      	b.n	8017ea2 <__copybits+0x30>

08017eb8 <__any_on>:
 8017eb8:	f100 0214 	add.w	r2, r0, #20
 8017ebc:	6900      	ldr	r0, [r0, #16]
 8017ebe:	114b      	asrs	r3, r1, #5
 8017ec0:	4298      	cmp	r0, r3
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	db11      	blt.n	8017eea <__any_on+0x32>
 8017ec6:	dd0a      	ble.n	8017ede <__any_on+0x26>
 8017ec8:	f011 011f 	ands.w	r1, r1, #31
 8017ecc:	d007      	beq.n	8017ede <__any_on+0x26>
 8017ece:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ed2:	fa24 f001 	lsr.w	r0, r4, r1
 8017ed6:	fa00 f101 	lsl.w	r1, r0, r1
 8017eda:	428c      	cmp	r4, r1
 8017edc:	d10b      	bne.n	8017ef6 <__any_on+0x3e>
 8017ede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	d803      	bhi.n	8017eee <__any_on+0x36>
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	bd10      	pop	{r4, pc}
 8017eea:	4603      	mov	r3, r0
 8017eec:	e7f7      	b.n	8017ede <__any_on+0x26>
 8017eee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017ef2:	2900      	cmp	r1, #0
 8017ef4:	d0f5      	beq.n	8017ee2 <__any_on+0x2a>
 8017ef6:	2001      	movs	r0, #1
 8017ef8:	e7f6      	b.n	8017ee8 <__any_on+0x30>

08017efa <__ascii_wctomb>:
 8017efa:	4603      	mov	r3, r0
 8017efc:	4608      	mov	r0, r1
 8017efe:	b141      	cbz	r1, 8017f12 <__ascii_wctomb+0x18>
 8017f00:	2aff      	cmp	r2, #255	@ 0xff
 8017f02:	d904      	bls.n	8017f0e <__ascii_wctomb+0x14>
 8017f04:	228a      	movs	r2, #138	@ 0x8a
 8017f06:	601a      	str	r2, [r3, #0]
 8017f08:	f04f 30ff 	mov.w	r0, #4294967295
 8017f0c:	4770      	bx	lr
 8017f0e:	700a      	strb	r2, [r1, #0]
 8017f10:	2001      	movs	r0, #1
 8017f12:	4770      	bx	lr

08017f14 <__ssputs_r>:
 8017f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f18:	688e      	ldr	r6, [r1, #8]
 8017f1a:	461f      	mov	r7, r3
 8017f1c:	42be      	cmp	r6, r7
 8017f1e:	680b      	ldr	r3, [r1, #0]
 8017f20:	4682      	mov	sl, r0
 8017f22:	460c      	mov	r4, r1
 8017f24:	4690      	mov	r8, r2
 8017f26:	d82d      	bhi.n	8017f84 <__ssputs_r+0x70>
 8017f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017f30:	d026      	beq.n	8017f80 <__ssputs_r+0x6c>
 8017f32:	6965      	ldr	r5, [r4, #20]
 8017f34:	6909      	ldr	r1, [r1, #16]
 8017f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f3a:	eba3 0901 	sub.w	r9, r3, r1
 8017f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f42:	1c7b      	adds	r3, r7, #1
 8017f44:	444b      	add	r3, r9
 8017f46:	106d      	asrs	r5, r5, #1
 8017f48:	429d      	cmp	r5, r3
 8017f4a:	bf38      	it	cc
 8017f4c:	461d      	movcc	r5, r3
 8017f4e:	0553      	lsls	r3, r2, #21
 8017f50:	d527      	bpl.n	8017fa2 <__ssputs_r+0x8e>
 8017f52:	4629      	mov	r1, r5
 8017f54:	f7ff fa84 	bl	8017460 <_malloc_r>
 8017f58:	4606      	mov	r6, r0
 8017f5a:	b360      	cbz	r0, 8017fb6 <__ssputs_r+0xa2>
 8017f5c:	6921      	ldr	r1, [r4, #16]
 8017f5e:	464a      	mov	r2, r9
 8017f60:	f7fe f8d9 	bl	8016116 <memcpy>
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f6e:	81a3      	strh	r3, [r4, #12]
 8017f70:	6126      	str	r6, [r4, #16]
 8017f72:	6165      	str	r5, [r4, #20]
 8017f74:	444e      	add	r6, r9
 8017f76:	eba5 0509 	sub.w	r5, r5, r9
 8017f7a:	6026      	str	r6, [r4, #0]
 8017f7c:	60a5      	str	r5, [r4, #8]
 8017f7e:	463e      	mov	r6, r7
 8017f80:	42be      	cmp	r6, r7
 8017f82:	d900      	bls.n	8017f86 <__ssputs_r+0x72>
 8017f84:	463e      	mov	r6, r7
 8017f86:	6820      	ldr	r0, [r4, #0]
 8017f88:	4632      	mov	r2, r6
 8017f8a:	4641      	mov	r1, r8
 8017f8c:	f000 f9c6 	bl	801831c <memmove>
 8017f90:	68a3      	ldr	r3, [r4, #8]
 8017f92:	1b9b      	subs	r3, r3, r6
 8017f94:	60a3      	str	r3, [r4, #8]
 8017f96:	6823      	ldr	r3, [r4, #0]
 8017f98:	4433      	add	r3, r6
 8017f9a:	6023      	str	r3, [r4, #0]
 8017f9c:	2000      	movs	r0, #0
 8017f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa2:	462a      	mov	r2, r5
 8017fa4:	f000 fa16 	bl	80183d4 <_realloc_r>
 8017fa8:	4606      	mov	r6, r0
 8017faa:	2800      	cmp	r0, #0
 8017fac:	d1e0      	bne.n	8017f70 <__ssputs_r+0x5c>
 8017fae:	6921      	ldr	r1, [r4, #16]
 8017fb0:	4650      	mov	r0, sl
 8017fb2:	f7fe fea7 	bl	8016d04 <_free_r>
 8017fb6:	230c      	movs	r3, #12
 8017fb8:	f8ca 3000 	str.w	r3, [sl]
 8017fbc:	89a3      	ldrh	r3, [r4, #12]
 8017fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fc2:	81a3      	strh	r3, [r4, #12]
 8017fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8017fc8:	e7e9      	b.n	8017f9e <__ssputs_r+0x8a>
	...

08017fcc <_svfiprintf_r>:
 8017fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd0:	4698      	mov	r8, r3
 8017fd2:	898b      	ldrh	r3, [r1, #12]
 8017fd4:	061b      	lsls	r3, r3, #24
 8017fd6:	b09d      	sub	sp, #116	@ 0x74
 8017fd8:	4607      	mov	r7, r0
 8017fda:	460d      	mov	r5, r1
 8017fdc:	4614      	mov	r4, r2
 8017fde:	d510      	bpl.n	8018002 <_svfiprintf_r+0x36>
 8017fe0:	690b      	ldr	r3, [r1, #16]
 8017fe2:	b973      	cbnz	r3, 8018002 <_svfiprintf_r+0x36>
 8017fe4:	2140      	movs	r1, #64	@ 0x40
 8017fe6:	f7ff fa3b 	bl	8017460 <_malloc_r>
 8017fea:	6028      	str	r0, [r5, #0]
 8017fec:	6128      	str	r0, [r5, #16]
 8017fee:	b930      	cbnz	r0, 8017ffe <_svfiprintf_r+0x32>
 8017ff0:	230c      	movs	r3, #12
 8017ff2:	603b      	str	r3, [r7, #0]
 8017ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ff8:	b01d      	add	sp, #116	@ 0x74
 8017ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffe:	2340      	movs	r3, #64	@ 0x40
 8018000:	616b      	str	r3, [r5, #20]
 8018002:	2300      	movs	r3, #0
 8018004:	9309      	str	r3, [sp, #36]	@ 0x24
 8018006:	2320      	movs	r3, #32
 8018008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801800c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018010:	2330      	movs	r3, #48	@ 0x30
 8018012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80181b0 <_svfiprintf_r+0x1e4>
 8018016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801801a:	f04f 0901 	mov.w	r9, #1
 801801e:	4623      	mov	r3, r4
 8018020:	469a      	mov	sl, r3
 8018022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018026:	b10a      	cbz	r2, 801802c <_svfiprintf_r+0x60>
 8018028:	2a25      	cmp	r2, #37	@ 0x25
 801802a:	d1f9      	bne.n	8018020 <_svfiprintf_r+0x54>
 801802c:	ebba 0b04 	subs.w	fp, sl, r4
 8018030:	d00b      	beq.n	801804a <_svfiprintf_r+0x7e>
 8018032:	465b      	mov	r3, fp
 8018034:	4622      	mov	r2, r4
 8018036:	4629      	mov	r1, r5
 8018038:	4638      	mov	r0, r7
 801803a:	f7ff ff6b 	bl	8017f14 <__ssputs_r>
 801803e:	3001      	adds	r0, #1
 8018040:	f000 80a7 	beq.w	8018192 <_svfiprintf_r+0x1c6>
 8018044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018046:	445a      	add	r2, fp
 8018048:	9209      	str	r2, [sp, #36]	@ 0x24
 801804a:	f89a 3000 	ldrb.w	r3, [sl]
 801804e:	2b00      	cmp	r3, #0
 8018050:	f000 809f 	beq.w	8018192 <_svfiprintf_r+0x1c6>
 8018054:	2300      	movs	r3, #0
 8018056:	f04f 32ff 	mov.w	r2, #4294967295
 801805a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801805e:	f10a 0a01 	add.w	sl, sl, #1
 8018062:	9304      	str	r3, [sp, #16]
 8018064:	9307      	str	r3, [sp, #28]
 8018066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801806a:	931a      	str	r3, [sp, #104]	@ 0x68
 801806c:	4654      	mov	r4, sl
 801806e:	2205      	movs	r2, #5
 8018070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018074:	484e      	ldr	r0, [pc, #312]	@ (80181b0 <_svfiprintf_r+0x1e4>)
 8018076:	f7e8 f95b 	bl	8000330 <memchr>
 801807a:	9a04      	ldr	r2, [sp, #16]
 801807c:	b9d8      	cbnz	r0, 80180b6 <_svfiprintf_r+0xea>
 801807e:	06d0      	lsls	r0, r2, #27
 8018080:	bf44      	itt	mi
 8018082:	2320      	movmi	r3, #32
 8018084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018088:	0711      	lsls	r1, r2, #28
 801808a:	bf44      	itt	mi
 801808c:	232b      	movmi	r3, #43	@ 0x2b
 801808e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018092:	f89a 3000 	ldrb.w	r3, [sl]
 8018096:	2b2a      	cmp	r3, #42	@ 0x2a
 8018098:	d015      	beq.n	80180c6 <_svfiprintf_r+0xfa>
 801809a:	9a07      	ldr	r2, [sp, #28]
 801809c:	4654      	mov	r4, sl
 801809e:	2000      	movs	r0, #0
 80180a0:	f04f 0c0a 	mov.w	ip, #10
 80180a4:	4621      	mov	r1, r4
 80180a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180aa:	3b30      	subs	r3, #48	@ 0x30
 80180ac:	2b09      	cmp	r3, #9
 80180ae:	d94b      	bls.n	8018148 <_svfiprintf_r+0x17c>
 80180b0:	b1b0      	cbz	r0, 80180e0 <_svfiprintf_r+0x114>
 80180b2:	9207      	str	r2, [sp, #28]
 80180b4:	e014      	b.n	80180e0 <_svfiprintf_r+0x114>
 80180b6:	eba0 0308 	sub.w	r3, r0, r8
 80180ba:	fa09 f303 	lsl.w	r3, r9, r3
 80180be:	4313      	orrs	r3, r2
 80180c0:	9304      	str	r3, [sp, #16]
 80180c2:	46a2      	mov	sl, r4
 80180c4:	e7d2      	b.n	801806c <_svfiprintf_r+0xa0>
 80180c6:	9b03      	ldr	r3, [sp, #12]
 80180c8:	1d19      	adds	r1, r3, #4
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	9103      	str	r1, [sp, #12]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	bfbb      	ittet	lt
 80180d2:	425b      	neglt	r3, r3
 80180d4:	f042 0202 	orrlt.w	r2, r2, #2
 80180d8:	9307      	strge	r3, [sp, #28]
 80180da:	9307      	strlt	r3, [sp, #28]
 80180dc:	bfb8      	it	lt
 80180de:	9204      	strlt	r2, [sp, #16]
 80180e0:	7823      	ldrb	r3, [r4, #0]
 80180e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80180e4:	d10a      	bne.n	80180fc <_svfiprintf_r+0x130>
 80180e6:	7863      	ldrb	r3, [r4, #1]
 80180e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80180ea:	d132      	bne.n	8018152 <_svfiprintf_r+0x186>
 80180ec:	9b03      	ldr	r3, [sp, #12]
 80180ee:	1d1a      	adds	r2, r3, #4
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	9203      	str	r2, [sp, #12]
 80180f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180f8:	3402      	adds	r4, #2
 80180fa:	9305      	str	r3, [sp, #20]
 80180fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80181c0 <_svfiprintf_r+0x1f4>
 8018100:	7821      	ldrb	r1, [r4, #0]
 8018102:	2203      	movs	r2, #3
 8018104:	4650      	mov	r0, sl
 8018106:	f7e8 f913 	bl	8000330 <memchr>
 801810a:	b138      	cbz	r0, 801811c <_svfiprintf_r+0x150>
 801810c:	9b04      	ldr	r3, [sp, #16]
 801810e:	eba0 000a 	sub.w	r0, r0, sl
 8018112:	2240      	movs	r2, #64	@ 0x40
 8018114:	4082      	lsls	r2, r0
 8018116:	4313      	orrs	r3, r2
 8018118:	3401      	adds	r4, #1
 801811a:	9304      	str	r3, [sp, #16]
 801811c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018120:	4824      	ldr	r0, [pc, #144]	@ (80181b4 <_svfiprintf_r+0x1e8>)
 8018122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018126:	2206      	movs	r2, #6
 8018128:	f7e8 f902 	bl	8000330 <memchr>
 801812c:	2800      	cmp	r0, #0
 801812e:	d036      	beq.n	801819e <_svfiprintf_r+0x1d2>
 8018130:	4b21      	ldr	r3, [pc, #132]	@ (80181b8 <_svfiprintf_r+0x1ec>)
 8018132:	bb1b      	cbnz	r3, 801817c <_svfiprintf_r+0x1b0>
 8018134:	9b03      	ldr	r3, [sp, #12]
 8018136:	3307      	adds	r3, #7
 8018138:	f023 0307 	bic.w	r3, r3, #7
 801813c:	3308      	adds	r3, #8
 801813e:	9303      	str	r3, [sp, #12]
 8018140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018142:	4433      	add	r3, r6
 8018144:	9309      	str	r3, [sp, #36]	@ 0x24
 8018146:	e76a      	b.n	801801e <_svfiprintf_r+0x52>
 8018148:	fb0c 3202 	mla	r2, ip, r2, r3
 801814c:	460c      	mov	r4, r1
 801814e:	2001      	movs	r0, #1
 8018150:	e7a8      	b.n	80180a4 <_svfiprintf_r+0xd8>
 8018152:	2300      	movs	r3, #0
 8018154:	3401      	adds	r4, #1
 8018156:	9305      	str	r3, [sp, #20]
 8018158:	4619      	mov	r1, r3
 801815a:	f04f 0c0a 	mov.w	ip, #10
 801815e:	4620      	mov	r0, r4
 8018160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018164:	3a30      	subs	r2, #48	@ 0x30
 8018166:	2a09      	cmp	r2, #9
 8018168:	d903      	bls.n	8018172 <_svfiprintf_r+0x1a6>
 801816a:	2b00      	cmp	r3, #0
 801816c:	d0c6      	beq.n	80180fc <_svfiprintf_r+0x130>
 801816e:	9105      	str	r1, [sp, #20]
 8018170:	e7c4      	b.n	80180fc <_svfiprintf_r+0x130>
 8018172:	fb0c 2101 	mla	r1, ip, r1, r2
 8018176:	4604      	mov	r4, r0
 8018178:	2301      	movs	r3, #1
 801817a:	e7f0      	b.n	801815e <_svfiprintf_r+0x192>
 801817c:	ab03      	add	r3, sp, #12
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	462a      	mov	r2, r5
 8018182:	4b0e      	ldr	r3, [pc, #56]	@ (80181bc <_svfiprintf_r+0x1f0>)
 8018184:	a904      	add	r1, sp, #16
 8018186:	4638      	mov	r0, r7
 8018188:	f7fd fa5a 	bl	8015640 <_printf_float>
 801818c:	1c42      	adds	r2, r0, #1
 801818e:	4606      	mov	r6, r0
 8018190:	d1d6      	bne.n	8018140 <_svfiprintf_r+0x174>
 8018192:	89ab      	ldrh	r3, [r5, #12]
 8018194:	065b      	lsls	r3, r3, #25
 8018196:	f53f af2d 	bmi.w	8017ff4 <_svfiprintf_r+0x28>
 801819a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801819c:	e72c      	b.n	8017ff8 <_svfiprintf_r+0x2c>
 801819e:	ab03      	add	r3, sp, #12
 80181a0:	9300      	str	r3, [sp, #0]
 80181a2:	462a      	mov	r2, r5
 80181a4:	4b05      	ldr	r3, [pc, #20]	@ (80181bc <_svfiprintf_r+0x1f0>)
 80181a6:	a904      	add	r1, sp, #16
 80181a8:	4638      	mov	r0, r7
 80181aa:	f7fd fcd1 	bl	8015b50 <_printf_i>
 80181ae:	e7ed      	b.n	801818c <_svfiprintf_r+0x1c0>
 80181b0:	08019c98 	.word	0x08019c98
 80181b4:	08019ca2 	.word	0x08019ca2
 80181b8:	08015641 	.word	0x08015641
 80181bc:	08017f15 	.word	0x08017f15
 80181c0:	08019c9e 	.word	0x08019c9e

080181c4 <__sflush_r>:
 80181c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	0716      	lsls	r6, r2, #28
 80181ce:	4605      	mov	r5, r0
 80181d0:	460c      	mov	r4, r1
 80181d2:	d454      	bmi.n	801827e <__sflush_r+0xba>
 80181d4:	684b      	ldr	r3, [r1, #4]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	dc02      	bgt.n	80181e0 <__sflush_r+0x1c>
 80181da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80181dc:	2b00      	cmp	r3, #0
 80181de:	dd48      	ble.n	8018272 <__sflush_r+0xae>
 80181e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181e2:	2e00      	cmp	r6, #0
 80181e4:	d045      	beq.n	8018272 <__sflush_r+0xae>
 80181e6:	2300      	movs	r3, #0
 80181e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80181ec:	682f      	ldr	r7, [r5, #0]
 80181ee:	6a21      	ldr	r1, [r4, #32]
 80181f0:	602b      	str	r3, [r5, #0]
 80181f2:	d030      	beq.n	8018256 <__sflush_r+0x92>
 80181f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80181f6:	89a3      	ldrh	r3, [r4, #12]
 80181f8:	0759      	lsls	r1, r3, #29
 80181fa:	d505      	bpl.n	8018208 <__sflush_r+0x44>
 80181fc:	6863      	ldr	r3, [r4, #4]
 80181fe:	1ad2      	subs	r2, r2, r3
 8018200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018202:	b10b      	cbz	r3, 8018208 <__sflush_r+0x44>
 8018204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018206:	1ad2      	subs	r2, r2, r3
 8018208:	2300      	movs	r3, #0
 801820a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801820c:	6a21      	ldr	r1, [r4, #32]
 801820e:	4628      	mov	r0, r5
 8018210:	47b0      	blx	r6
 8018212:	1c43      	adds	r3, r0, #1
 8018214:	89a3      	ldrh	r3, [r4, #12]
 8018216:	d106      	bne.n	8018226 <__sflush_r+0x62>
 8018218:	6829      	ldr	r1, [r5, #0]
 801821a:	291d      	cmp	r1, #29
 801821c:	d82b      	bhi.n	8018276 <__sflush_r+0xb2>
 801821e:	4a2a      	ldr	r2, [pc, #168]	@ (80182c8 <__sflush_r+0x104>)
 8018220:	410a      	asrs	r2, r1
 8018222:	07d6      	lsls	r6, r2, #31
 8018224:	d427      	bmi.n	8018276 <__sflush_r+0xb2>
 8018226:	2200      	movs	r2, #0
 8018228:	6062      	str	r2, [r4, #4]
 801822a:	04d9      	lsls	r1, r3, #19
 801822c:	6922      	ldr	r2, [r4, #16]
 801822e:	6022      	str	r2, [r4, #0]
 8018230:	d504      	bpl.n	801823c <__sflush_r+0x78>
 8018232:	1c42      	adds	r2, r0, #1
 8018234:	d101      	bne.n	801823a <__sflush_r+0x76>
 8018236:	682b      	ldr	r3, [r5, #0]
 8018238:	b903      	cbnz	r3, 801823c <__sflush_r+0x78>
 801823a:	6560      	str	r0, [r4, #84]	@ 0x54
 801823c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801823e:	602f      	str	r7, [r5, #0]
 8018240:	b1b9      	cbz	r1, 8018272 <__sflush_r+0xae>
 8018242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018246:	4299      	cmp	r1, r3
 8018248:	d002      	beq.n	8018250 <__sflush_r+0x8c>
 801824a:	4628      	mov	r0, r5
 801824c:	f7fe fd5a 	bl	8016d04 <_free_r>
 8018250:	2300      	movs	r3, #0
 8018252:	6363      	str	r3, [r4, #52]	@ 0x34
 8018254:	e00d      	b.n	8018272 <__sflush_r+0xae>
 8018256:	2301      	movs	r3, #1
 8018258:	4628      	mov	r0, r5
 801825a:	47b0      	blx	r6
 801825c:	4602      	mov	r2, r0
 801825e:	1c50      	adds	r0, r2, #1
 8018260:	d1c9      	bne.n	80181f6 <__sflush_r+0x32>
 8018262:	682b      	ldr	r3, [r5, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d0c6      	beq.n	80181f6 <__sflush_r+0x32>
 8018268:	2b1d      	cmp	r3, #29
 801826a:	d001      	beq.n	8018270 <__sflush_r+0xac>
 801826c:	2b16      	cmp	r3, #22
 801826e:	d11e      	bne.n	80182ae <__sflush_r+0xea>
 8018270:	602f      	str	r7, [r5, #0]
 8018272:	2000      	movs	r0, #0
 8018274:	e022      	b.n	80182bc <__sflush_r+0xf8>
 8018276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801827a:	b21b      	sxth	r3, r3
 801827c:	e01b      	b.n	80182b6 <__sflush_r+0xf2>
 801827e:	690f      	ldr	r7, [r1, #16]
 8018280:	2f00      	cmp	r7, #0
 8018282:	d0f6      	beq.n	8018272 <__sflush_r+0xae>
 8018284:	0793      	lsls	r3, r2, #30
 8018286:	680e      	ldr	r6, [r1, #0]
 8018288:	bf08      	it	eq
 801828a:	694b      	ldreq	r3, [r1, #20]
 801828c:	600f      	str	r7, [r1, #0]
 801828e:	bf18      	it	ne
 8018290:	2300      	movne	r3, #0
 8018292:	eba6 0807 	sub.w	r8, r6, r7
 8018296:	608b      	str	r3, [r1, #8]
 8018298:	f1b8 0f00 	cmp.w	r8, #0
 801829c:	dde9      	ble.n	8018272 <__sflush_r+0xae>
 801829e:	6a21      	ldr	r1, [r4, #32]
 80182a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80182a2:	4643      	mov	r3, r8
 80182a4:	463a      	mov	r2, r7
 80182a6:	4628      	mov	r0, r5
 80182a8:	47b0      	blx	r6
 80182aa:	2800      	cmp	r0, #0
 80182ac:	dc08      	bgt.n	80182c0 <__sflush_r+0xfc>
 80182ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182b6:	81a3      	strh	r3, [r4, #12]
 80182b8:	f04f 30ff 	mov.w	r0, #4294967295
 80182bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c0:	4407      	add	r7, r0
 80182c2:	eba8 0800 	sub.w	r8, r8, r0
 80182c6:	e7e7      	b.n	8018298 <__sflush_r+0xd4>
 80182c8:	dfbffffe 	.word	0xdfbffffe

080182cc <_fflush_r>:
 80182cc:	b538      	push	{r3, r4, r5, lr}
 80182ce:	690b      	ldr	r3, [r1, #16]
 80182d0:	4605      	mov	r5, r0
 80182d2:	460c      	mov	r4, r1
 80182d4:	b913      	cbnz	r3, 80182dc <_fflush_r+0x10>
 80182d6:	2500      	movs	r5, #0
 80182d8:	4628      	mov	r0, r5
 80182da:	bd38      	pop	{r3, r4, r5, pc}
 80182dc:	b118      	cbz	r0, 80182e6 <_fflush_r+0x1a>
 80182de:	6a03      	ldr	r3, [r0, #32]
 80182e0:	b90b      	cbnz	r3, 80182e6 <_fflush_r+0x1a>
 80182e2:	f7fd fde1 	bl	8015ea8 <__sinit>
 80182e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d0f3      	beq.n	80182d6 <_fflush_r+0xa>
 80182ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80182f0:	07d0      	lsls	r0, r2, #31
 80182f2:	d404      	bmi.n	80182fe <_fflush_r+0x32>
 80182f4:	0599      	lsls	r1, r3, #22
 80182f6:	d402      	bmi.n	80182fe <_fflush_r+0x32>
 80182f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182fa:	f7fd ff0a 	bl	8016112 <__retarget_lock_acquire_recursive>
 80182fe:	4628      	mov	r0, r5
 8018300:	4621      	mov	r1, r4
 8018302:	f7ff ff5f 	bl	80181c4 <__sflush_r>
 8018306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018308:	07da      	lsls	r2, r3, #31
 801830a:	4605      	mov	r5, r0
 801830c:	d4e4      	bmi.n	80182d8 <_fflush_r+0xc>
 801830e:	89a3      	ldrh	r3, [r4, #12]
 8018310:	059b      	lsls	r3, r3, #22
 8018312:	d4e1      	bmi.n	80182d8 <_fflush_r+0xc>
 8018314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018316:	f7fd fefd 	bl	8016114 <__retarget_lock_release_recursive>
 801831a:	e7dd      	b.n	80182d8 <_fflush_r+0xc>

0801831c <memmove>:
 801831c:	4288      	cmp	r0, r1
 801831e:	b510      	push	{r4, lr}
 8018320:	eb01 0402 	add.w	r4, r1, r2
 8018324:	d902      	bls.n	801832c <memmove+0x10>
 8018326:	4284      	cmp	r4, r0
 8018328:	4623      	mov	r3, r4
 801832a:	d807      	bhi.n	801833c <memmove+0x20>
 801832c:	1e43      	subs	r3, r0, #1
 801832e:	42a1      	cmp	r1, r4
 8018330:	d008      	beq.n	8018344 <memmove+0x28>
 8018332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018336:	f803 2f01 	strb.w	r2, [r3, #1]!
 801833a:	e7f8      	b.n	801832e <memmove+0x12>
 801833c:	4402      	add	r2, r0
 801833e:	4601      	mov	r1, r0
 8018340:	428a      	cmp	r2, r1
 8018342:	d100      	bne.n	8018346 <memmove+0x2a>
 8018344:	bd10      	pop	{r4, pc}
 8018346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801834a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801834e:	e7f7      	b.n	8018340 <memmove+0x24>

08018350 <_sbrk_r>:
 8018350:	b538      	push	{r3, r4, r5, lr}
 8018352:	4d06      	ldr	r5, [pc, #24]	@ (801836c <_sbrk_r+0x1c>)
 8018354:	2300      	movs	r3, #0
 8018356:	4604      	mov	r4, r0
 8018358:	4608      	mov	r0, r1
 801835a:	602b      	str	r3, [r5, #0]
 801835c:	f7e9 fffc 	bl	8002358 <_sbrk>
 8018360:	1c43      	adds	r3, r0, #1
 8018362:	d102      	bne.n	801836a <_sbrk_r+0x1a>
 8018364:	682b      	ldr	r3, [r5, #0]
 8018366:	b103      	cbz	r3, 801836a <_sbrk_r+0x1a>
 8018368:	6023      	str	r3, [r4, #0]
 801836a:	bd38      	pop	{r3, r4, r5, pc}
 801836c:	24006c54 	.word	0x24006c54

08018370 <__assert_func>:
 8018370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018372:	4614      	mov	r4, r2
 8018374:	461a      	mov	r2, r3
 8018376:	4b09      	ldr	r3, [pc, #36]	@ (801839c <__assert_func+0x2c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	4605      	mov	r5, r0
 801837c:	68d8      	ldr	r0, [r3, #12]
 801837e:	b954      	cbnz	r4, 8018396 <__assert_func+0x26>
 8018380:	4b07      	ldr	r3, [pc, #28]	@ (80183a0 <__assert_func+0x30>)
 8018382:	461c      	mov	r4, r3
 8018384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018388:	9100      	str	r1, [sp, #0]
 801838a:	462b      	mov	r3, r5
 801838c:	4905      	ldr	r1, [pc, #20]	@ (80183a4 <__assert_func+0x34>)
 801838e:	f000 f84f 	bl	8018430 <fiprintf>
 8018392:	f000 f85f 	bl	8018454 <abort>
 8018396:	4b04      	ldr	r3, [pc, #16]	@ (80183a8 <__assert_func+0x38>)
 8018398:	e7f4      	b.n	8018384 <__assert_func+0x14>
 801839a:	bf00      	nop
 801839c:	2400027c 	.word	0x2400027c
 80183a0:	08019ce4 	.word	0x08019ce4
 80183a4:	08019cb6 	.word	0x08019cb6
 80183a8:	08019ca9 	.word	0x08019ca9

080183ac <_calloc_r>:
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	fba1 5402 	umull	r5, r4, r1, r2
 80183b2:	b93c      	cbnz	r4, 80183c4 <_calloc_r+0x18>
 80183b4:	4629      	mov	r1, r5
 80183b6:	f7ff f853 	bl	8017460 <_malloc_r>
 80183ba:	4606      	mov	r6, r0
 80183bc:	b928      	cbnz	r0, 80183ca <_calloc_r+0x1e>
 80183be:	2600      	movs	r6, #0
 80183c0:	4630      	mov	r0, r6
 80183c2:	bd70      	pop	{r4, r5, r6, pc}
 80183c4:	220c      	movs	r2, #12
 80183c6:	6002      	str	r2, [r0, #0]
 80183c8:	e7f9      	b.n	80183be <_calloc_r+0x12>
 80183ca:	462a      	mov	r2, r5
 80183cc:	4621      	mov	r1, r4
 80183ce:	f7fd fe04 	bl	8015fda <memset>
 80183d2:	e7f5      	b.n	80183c0 <_calloc_r+0x14>

080183d4 <_realloc_r>:
 80183d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d8:	4680      	mov	r8, r0
 80183da:	4615      	mov	r5, r2
 80183dc:	460c      	mov	r4, r1
 80183de:	b921      	cbnz	r1, 80183ea <_realloc_r+0x16>
 80183e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183e4:	4611      	mov	r1, r2
 80183e6:	f7ff b83b 	b.w	8017460 <_malloc_r>
 80183ea:	b92a      	cbnz	r2, 80183f8 <_realloc_r+0x24>
 80183ec:	f7fe fc8a 	bl	8016d04 <_free_r>
 80183f0:	2400      	movs	r4, #0
 80183f2:	4620      	mov	r0, r4
 80183f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f8:	f000 f833 	bl	8018462 <_malloc_usable_size_r>
 80183fc:	4285      	cmp	r5, r0
 80183fe:	4606      	mov	r6, r0
 8018400:	d802      	bhi.n	8018408 <_realloc_r+0x34>
 8018402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018406:	d8f4      	bhi.n	80183f2 <_realloc_r+0x1e>
 8018408:	4629      	mov	r1, r5
 801840a:	4640      	mov	r0, r8
 801840c:	f7ff f828 	bl	8017460 <_malloc_r>
 8018410:	4607      	mov	r7, r0
 8018412:	2800      	cmp	r0, #0
 8018414:	d0ec      	beq.n	80183f0 <_realloc_r+0x1c>
 8018416:	42b5      	cmp	r5, r6
 8018418:	462a      	mov	r2, r5
 801841a:	4621      	mov	r1, r4
 801841c:	bf28      	it	cs
 801841e:	4632      	movcs	r2, r6
 8018420:	f7fd fe79 	bl	8016116 <memcpy>
 8018424:	4621      	mov	r1, r4
 8018426:	4640      	mov	r0, r8
 8018428:	f7fe fc6c 	bl	8016d04 <_free_r>
 801842c:	463c      	mov	r4, r7
 801842e:	e7e0      	b.n	80183f2 <_realloc_r+0x1e>

08018430 <fiprintf>:
 8018430:	b40e      	push	{r1, r2, r3}
 8018432:	b503      	push	{r0, r1, lr}
 8018434:	4601      	mov	r1, r0
 8018436:	ab03      	add	r3, sp, #12
 8018438:	4805      	ldr	r0, [pc, #20]	@ (8018450 <fiprintf+0x20>)
 801843a:	f853 2b04 	ldr.w	r2, [r3], #4
 801843e:	6800      	ldr	r0, [r0, #0]
 8018440:	9301      	str	r3, [sp, #4]
 8018442:	f000 f83f 	bl	80184c4 <_vfiprintf_r>
 8018446:	b002      	add	sp, #8
 8018448:	f85d eb04 	ldr.w	lr, [sp], #4
 801844c:	b003      	add	sp, #12
 801844e:	4770      	bx	lr
 8018450:	2400027c 	.word	0x2400027c

08018454 <abort>:
 8018454:	b508      	push	{r3, lr}
 8018456:	2006      	movs	r0, #6
 8018458:	f000 fa08 	bl	801886c <raise>
 801845c:	2001      	movs	r0, #1
 801845e:	f7e9 ff03 	bl	8002268 <_exit>

08018462 <_malloc_usable_size_r>:
 8018462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018466:	1f18      	subs	r0, r3, #4
 8018468:	2b00      	cmp	r3, #0
 801846a:	bfbc      	itt	lt
 801846c:	580b      	ldrlt	r3, [r1, r0]
 801846e:	18c0      	addlt	r0, r0, r3
 8018470:	4770      	bx	lr

08018472 <__sfputc_r>:
 8018472:	6893      	ldr	r3, [r2, #8]
 8018474:	3b01      	subs	r3, #1
 8018476:	2b00      	cmp	r3, #0
 8018478:	b410      	push	{r4}
 801847a:	6093      	str	r3, [r2, #8]
 801847c:	da08      	bge.n	8018490 <__sfputc_r+0x1e>
 801847e:	6994      	ldr	r4, [r2, #24]
 8018480:	42a3      	cmp	r3, r4
 8018482:	db01      	blt.n	8018488 <__sfputc_r+0x16>
 8018484:	290a      	cmp	r1, #10
 8018486:	d103      	bne.n	8018490 <__sfputc_r+0x1e>
 8018488:	f85d 4b04 	ldr.w	r4, [sp], #4
 801848c:	f000 b932 	b.w	80186f4 <__swbuf_r>
 8018490:	6813      	ldr	r3, [r2, #0]
 8018492:	1c58      	adds	r0, r3, #1
 8018494:	6010      	str	r0, [r2, #0]
 8018496:	7019      	strb	r1, [r3, #0]
 8018498:	4608      	mov	r0, r1
 801849a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801849e:	4770      	bx	lr

080184a0 <__sfputs_r>:
 80184a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184a2:	4606      	mov	r6, r0
 80184a4:	460f      	mov	r7, r1
 80184a6:	4614      	mov	r4, r2
 80184a8:	18d5      	adds	r5, r2, r3
 80184aa:	42ac      	cmp	r4, r5
 80184ac:	d101      	bne.n	80184b2 <__sfputs_r+0x12>
 80184ae:	2000      	movs	r0, #0
 80184b0:	e007      	b.n	80184c2 <__sfputs_r+0x22>
 80184b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184b6:	463a      	mov	r2, r7
 80184b8:	4630      	mov	r0, r6
 80184ba:	f7ff ffda 	bl	8018472 <__sfputc_r>
 80184be:	1c43      	adds	r3, r0, #1
 80184c0:	d1f3      	bne.n	80184aa <__sfputs_r+0xa>
 80184c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080184c4 <_vfiprintf_r>:
 80184c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c8:	460d      	mov	r5, r1
 80184ca:	b09d      	sub	sp, #116	@ 0x74
 80184cc:	4614      	mov	r4, r2
 80184ce:	4698      	mov	r8, r3
 80184d0:	4606      	mov	r6, r0
 80184d2:	b118      	cbz	r0, 80184dc <_vfiprintf_r+0x18>
 80184d4:	6a03      	ldr	r3, [r0, #32]
 80184d6:	b90b      	cbnz	r3, 80184dc <_vfiprintf_r+0x18>
 80184d8:	f7fd fce6 	bl	8015ea8 <__sinit>
 80184dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184de:	07d9      	lsls	r1, r3, #31
 80184e0:	d405      	bmi.n	80184ee <_vfiprintf_r+0x2a>
 80184e2:	89ab      	ldrh	r3, [r5, #12]
 80184e4:	059a      	lsls	r2, r3, #22
 80184e6:	d402      	bmi.n	80184ee <_vfiprintf_r+0x2a>
 80184e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80184ea:	f7fd fe12 	bl	8016112 <__retarget_lock_acquire_recursive>
 80184ee:	89ab      	ldrh	r3, [r5, #12]
 80184f0:	071b      	lsls	r3, r3, #28
 80184f2:	d501      	bpl.n	80184f8 <_vfiprintf_r+0x34>
 80184f4:	692b      	ldr	r3, [r5, #16]
 80184f6:	b99b      	cbnz	r3, 8018520 <_vfiprintf_r+0x5c>
 80184f8:	4629      	mov	r1, r5
 80184fa:	4630      	mov	r0, r6
 80184fc:	f000 f938 	bl	8018770 <__swsetup_r>
 8018500:	b170      	cbz	r0, 8018520 <_vfiprintf_r+0x5c>
 8018502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018504:	07dc      	lsls	r4, r3, #31
 8018506:	d504      	bpl.n	8018512 <_vfiprintf_r+0x4e>
 8018508:	f04f 30ff 	mov.w	r0, #4294967295
 801850c:	b01d      	add	sp, #116	@ 0x74
 801850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018512:	89ab      	ldrh	r3, [r5, #12]
 8018514:	0598      	lsls	r0, r3, #22
 8018516:	d4f7      	bmi.n	8018508 <_vfiprintf_r+0x44>
 8018518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801851a:	f7fd fdfb 	bl	8016114 <__retarget_lock_release_recursive>
 801851e:	e7f3      	b.n	8018508 <_vfiprintf_r+0x44>
 8018520:	2300      	movs	r3, #0
 8018522:	9309      	str	r3, [sp, #36]	@ 0x24
 8018524:	2320      	movs	r3, #32
 8018526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801852a:	f8cd 800c 	str.w	r8, [sp, #12]
 801852e:	2330      	movs	r3, #48	@ 0x30
 8018530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80186e0 <_vfiprintf_r+0x21c>
 8018534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018538:	f04f 0901 	mov.w	r9, #1
 801853c:	4623      	mov	r3, r4
 801853e:	469a      	mov	sl, r3
 8018540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018544:	b10a      	cbz	r2, 801854a <_vfiprintf_r+0x86>
 8018546:	2a25      	cmp	r2, #37	@ 0x25
 8018548:	d1f9      	bne.n	801853e <_vfiprintf_r+0x7a>
 801854a:	ebba 0b04 	subs.w	fp, sl, r4
 801854e:	d00b      	beq.n	8018568 <_vfiprintf_r+0xa4>
 8018550:	465b      	mov	r3, fp
 8018552:	4622      	mov	r2, r4
 8018554:	4629      	mov	r1, r5
 8018556:	4630      	mov	r0, r6
 8018558:	f7ff ffa2 	bl	80184a0 <__sfputs_r>
 801855c:	3001      	adds	r0, #1
 801855e:	f000 80a7 	beq.w	80186b0 <_vfiprintf_r+0x1ec>
 8018562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018564:	445a      	add	r2, fp
 8018566:	9209      	str	r2, [sp, #36]	@ 0x24
 8018568:	f89a 3000 	ldrb.w	r3, [sl]
 801856c:	2b00      	cmp	r3, #0
 801856e:	f000 809f 	beq.w	80186b0 <_vfiprintf_r+0x1ec>
 8018572:	2300      	movs	r3, #0
 8018574:	f04f 32ff 	mov.w	r2, #4294967295
 8018578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801857c:	f10a 0a01 	add.w	sl, sl, #1
 8018580:	9304      	str	r3, [sp, #16]
 8018582:	9307      	str	r3, [sp, #28]
 8018584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018588:	931a      	str	r3, [sp, #104]	@ 0x68
 801858a:	4654      	mov	r4, sl
 801858c:	2205      	movs	r2, #5
 801858e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018592:	4853      	ldr	r0, [pc, #332]	@ (80186e0 <_vfiprintf_r+0x21c>)
 8018594:	f7e7 fecc 	bl	8000330 <memchr>
 8018598:	9a04      	ldr	r2, [sp, #16]
 801859a:	b9d8      	cbnz	r0, 80185d4 <_vfiprintf_r+0x110>
 801859c:	06d1      	lsls	r1, r2, #27
 801859e:	bf44      	itt	mi
 80185a0:	2320      	movmi	r3, #32
 80185a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185a6:	0713      	lsls	r3, r2, #28
 80185a8:	bf44      	itt	mi
 80185aa:	232b      	movmi	r3, #43	@ 0x2b
 80185ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80185b0:	f89a 3000 	ldrb.w	r3, [sl]
 80185b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80185b6:	d015      	beq.n	80185e4 <_vfiprintf_r+0x120>
 80185b8:	9a07      	ldr	r2, [sp, #28]
 80185ba:	4654      	mov	r4, sl
 80185bc:	2000      	movs	r0, #0
 80185be:	f04f 0c0a 	mov.w	ip, #10
 80185c2:	4621      	mov	r1, r4
 80185c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185c8:	3b30      	subs	r3, #48	@ 0x30
 80185ca:	2b09      	cmp	r3, #9
 80185cc:	d94b      	bls.n	8018666 <_vfiprintf_r+0x1a2>
 80185ce:	b1b0      	cbz	r0, 80185fe <_vfiprintf_r+0x13a>
 80185d0:	9207      	str	r2, [sp, #28]
 80185d2:	e014      	b.n	80185fe <_vfiprintf_r+0x13a>
 80185d4:	eba0 0308 	sub.w	r3, r0, r8
 80185d8:	fa09 f303 	lsl.w	r3, r9, r3
 80185dc:	4313      	orrs	r3, r2
 80185de:	9304      	str	r3, [sp, #16]
 80185e0:	46a2      	mov	sl, r4
 80185e2:	e7d2      	b.n	801858a <_vfiprintf_r+0xc6>
 80185e4:	9b03      	ldr	r3, [sp, #12]
 80185e6:	1d19      	adds	r1, r3, #4
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	9103      	str	r1, [sp, #12]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	bfbb      	ittet	lt
 80185f0:	425b      	neglt	r3, r3
 80185f2:	f042 0202 	orrlt.w	r2, r2, #2
 80185f6:	9307      	strge	r3, [sp, #28]
 80185f8:	9307      	strlt	r3, [sp, #28]
 80185fa:	bfb8      	it	lt
 80185fc:	9204      	strlt	r2, [sp, #16]
 80185fe:	7823      	ldrb	r3, [r4, #0]
 8018600:	2b2e      	cmp	r3, #46	@ 0x2e
 8018602:	d10a      	bne.n	801861a <_vfiprintf_r+0x156>
 8018604:	7863      	ldrb	r3, [r4, #1]
 8018606:	2b2a      	cmp	r3, #42	@ 0x2a
 8018608:	d132      	bne.n	8018670 <_vfiprintf_r+0x1ac>
 801860a:	9b03      	ldr	r3, [sp, #12]
 801860c:	1d1a      	adds	r2, r3, #4
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	9203      	str	r2, [sp, #12]
 8018612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018616:	3402      	adds	r4, #2
 8018618:	9305      	str	r3, [sp, #20]
 801861a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80186f0 <_vfiprintf_r+0x22c>
 801861e:	7821      	ldrb	r1, [r4, #0]
 8018620:	2203      	movs	r2, #3
 8018622:	4650      	mov	r0, sl
 8018624:	f7e7 fe84 	bl	8000330 <memchr>
 8018628:	b138      	cbz	r0, 801863a <_vfiprintf_r+0x176>
 801862a:	9b04      	ldr	r3, [sp, #16]
 801862c:	eba0 000a 	sub.w	r0, r0, sl
 8018630:	2240      	movs	r2, #64	@ 0x40
 8018632:	4082      	lsls	r2, r0
 8018634:	4313      	orrs	r3, r2
 8018636:	3401      	adds	r4, #1
 8018638:	9304      	str	r3, [sp, #16]
 801863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801863e:	4829      	ldr	r0, [pc, #164]	@ (80186e4 <_vfiprintf_r+0x220>)
 8018640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018644:	2206      	movs	r2, #6
 8018646:	f7e7 fe73 	bl	8000330 <memchr>
 801864a:	2800      	cmp	r0, #0
 801864c:	d03f      	beq.n	80186ce <_vfiprintf_r+0x20a>
 801864e:	4b26      	ldr	r3, [pc, #152]	@ (80186e8 <_vfiprintf_r+0x224>)
 8018650:	bb1b      	cbnz	r3, 801869a <_vfiprintf_r+0x1d6>
 8018652:	9b03      	ldr	r3, [sp, #12]
 8018654:	3307      	adds	r3, #7
 8018656:	f023 0307 	bic.w	r3, r3, #7
 801865a:	3308      	adds	r3, #8
 801865c:	9303      	str	r3, [sp, #12]
 801865e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018660:	443b      	add	r3, r7
 8018662:	9309      	str	r3, [sp, #36]	@ 0x24
 8018664:	e76a      	b.n	801853c <_vfiprintf_r+0x78>
 8018666:	fb0c 3202 	mla	r2, ip, r2, r3
 801866a:	460c      	mov	r4, r1
 801866c:	2001      	movs	r0, #1
 801866e:	e7a8      	b.n	80185c2 <_vfiprintf_r+0xfe>
 8018670:	2300      	movs	r3, #0
 8018672:	3401      	adds	r4, #1
 8018674:	9305      	str	r3, [sp, #20]
 8018676:	4619      	mov	r1, r3
 8018678:	f04f 0c0a 	mov.w	ip, #10
 801867c:	4620      	mov	r0, r4
 801867e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018682:	3a30      	subs	r2, #48	@ 0x30
 8018684:	2a09      	cmp	r2, #9
 8018686:	d903      	bls.n	8018690 <_vfiprintf_r+0x1cc>
 8018688:	2b00      	cmp	r3, #0
 801868a:	d0c6      	beq.n	801861a <_vfiprintf_r+0x156>
 801868c:	9105      	str	r1, [sp, #20]
 801868e:	e7c4      	b.n	801861a <_vfiprintf_r+0x156>
 8018690:	fb0c 2101 	mla	r1, ip, r1, r2
 8018694:	4604      	mov	r4, r0
 8018696:	2301      	movs	r3, #1
 8018698:	e7f0      	b.n	801867c <_vfiprintf_r+0x1b8>
 801869a:	ab03      	add	r3, sp, #12
 801869c:	9300      	str	r3, [sp, #0]
 801869e:	462a      	mov	r2, r5
 80186a0:	4b12      	ldr	r3, [pc, #72]	@ (80186ec <_vfiprintf_r+0x228>)
 80186a2:	a904      	add	r1, sp, #16
 80186a4:	4630      	mov	r0, r6
 80186a6:	f7fc ffcb 	bl	8015640 <_printf_float>
 80186aa:	4607      	mov	r7, r0
 80186ac:	1c78      	adds	r0, r7, #1
 80186ae:	d1d6      	bne.n	801865e <_vfiprintf_r+0x19a>
 80186b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80186b2:	07d9      	lsls	r1, r3, #31
 80186b4:	d405      	bmi.n	80186c2 <_vfiprintf_r+0x1fe>
 80186b6:	89ab      	ldrh	r3, [r5, #12]
 80186b8:	059a      	lsls	r2, r3, #22
 80186ba:	d402      	bmi.n	80186c2 <_vfiprintf_r+0x1fe>
 80186bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80186be:	f7fd fd29 	bl	8016114 <__retarget_lock_release_recursive>
 80186c2:	89ab      	ldrh	r3, [r5, #12]
 80186c4:	065b      	lsls	r3, r3, #25
 80186c6:	f53f af1f 	bmi.w	8018508 <_vfiprintf_r+0x44>
 80186ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80186cc:	e71e      	b.n	801850c <_vfiprintf_r+0x48>
 80186ce:	ab03      	add	r3, sp, #12
 80186d0:	9300      	str	r3, [sp, #0]
 80186d2:	462a      	mov	r2, r5
 80186d4:	4b05      	ldr	r3, [pc, #20]	@ (80186ec <_vfiprintf_r+0x228>)
 80186d6:	a904      	add	r1, sp, #16
 80186d8:	4630      	mov	r0, r6
 80186da:	f7fd fa39 	bl	8015b50 <_printf_i>
 80186de:	e7e4      	b.n	80186aa <_vfiprintf_r+0x1e6>
 80186e0:	08019c98 	.word	0x08019c98
 80186e4:	08019ca2 	.word	0x08019ca2
 80186e8:	08015641 	.word	0x08015641
 80186ec:	080184a1 	.word	0x080184a1
 80186f0:	08019c9e 	.word	0x08019c9e

080186f4 <__swbuf_r>:
 80186f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186f6:	460e      	mov	r6, r1
 80186f8:	4614      	mov	r4, r2
 80186fa:	4605      	mov	r5, r0
 80186fc:	b118      	cbz	r0, 8018706 <__swbuf_r+0x12>
 80186fe:	6a03      	ldr	r3, [r0, #32]
 8018700:	b90b      	cbnz	r3, 8018706 <__swbuf_r+0x12>
 8018702:	f7fd fbd1 	bl	8015ea8 <__sinit>
 8018706:	69a3      	ldr	r3, [r4, #24]
 8018708:	60a3      	str	r3, [r4, #8]
 801870a:	89a3      	ldrh	r3, [r4, #12]
 801870c:	071a      	lsls	r2, r3, #28
 801870e:	d501      	bpl.n	8018714 <__swbuf_r+0x20>
 8018710:	6923      	ldr	r3, [r4, #16]
 8018712:	b943      	cbnz	r3, 8018726 <__swbuf_r+0x32>
 8018714:	4621      	mov	r1, r4
 8018716:	4628      	mov	r0, r5
 8018718:	f000 f82a 	bl	8018770 <__swsetup_r>
 801871c:	b118      	cbz	r0, 8018726 <__swbuf_r+0x32>
 801871e:	f04f 37ff 	mov.w	r7, #4294967295
 8018722:	4638      	mov	r0, r7
 8018724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018726:	6823      	ldr	r3, [r4, #0]
 8018728:	6922      	ldr	r2, [r4, #16]
 801872a:	1a98      	subs	r0, r3, r2
 801872c:	6963      	ldr	r3, [r4, #20]
 801872e:	b2f6      	uxtb	r6, r6
 8018730:	4283      	cmp	r3, r0
 8018732:	4637      	mov	r7, r6
 8018734:	dc05      	bgt.n	8018742 <__swbuf_r+0x4e>
 8018736:	4621      	mov	r1, r4
 8018738:	4628      	mov	r0, r5
 801873a:	f7ff fdc7 	bl	80182cc <_fflush_r>
 801873e:	2800      	cmp	r0, #0
 8018740:	d1ed      	bne.n	801871e <__swbuf_r+0x2a>
 8018742:	68a3      	ldr	r3, [r4, #8]
 8018744:	3b01      	subs	r3, #1
 8018746:	60a3      	str	r3, [r4, #8]
 8018748:	6823      	ldr	r3, [r4, #0]
 801874a:	1c5a      	adds	r2, r3, #1
 801874c:	6022      	str	r2, [r4, #0]
 801874e:	701e      	strb	r6, [r3, #0]
 8018750:	6962      	ldr	r2, [r4, #20]
 8018752:	1c43      	adds	r3, r0, #1
 8018754:	429a      	cmp	r2, r3
 8018756:	d004      	beq.n	8018762 <__swbuf_r+0x6e>
 8018758:	89a3      	ldrh	r3, [r4, #12]
 801875a:	07db      	lsls	r3, r3, #31
 801875c:	d5e1      	bpl.n	8018722 <__swbuf_r+0x2e>
 801875e:	2e0a      	cmp	r6, #10
 8018760:	d1df      	bne.n	8018722 <__swbuf_r+0x2e>
 8018762:	4621      	mov	r1, r4
 8018764:	4628      	mov	r0, r5
 8018766:	f7ff fdb1 	bl	80182cc <_fflush_r>
 801876a:	2800      	cmp	r0, #0
 801876c:	d0d9      	beq.n	8018722 <__swbuf_r+0x2e>
 801876e:	e7d6      	b.n	801871e <__swbuf_r+0x2a>

08018770 <__swsetup_r>:
 8018770:	b538      	push	{r3, r4, r5, lr}
 8018772:	4b29      	ldr	r3, [pc, #164]	@ (8018818 <__swsetup_r+0xa8>)
 8018774:	4605      	mov	r5, r0
 8018776:	6818      	ldr	r0, [r3, #0]
 8018778:	460c      	mov	r4, r1
 801877a:	b118      	cbz	r0, 8018784 <__swsetup_r+0x14>
 801877c:	6a03      	ldr	r3, [r0, #32]
 801877e:	b90b      	cbnz	r3, 8018784 <__swsetup_r+0x14>
 8018780:	f7fd fb92 	bl	8015ea8 <__sinit>
 8018784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018788:	0719      	lsls	r1, r3, #28
 801878a:	d422      	bmi.n	80187d2 <__swsetup_r+0x62>
 801878c:	06da      	lsls	r2, r3, #27
 801878e:	d407      	bmi.n	80187a0 <__swsetup_r+0x30>
 8018790:	2209      	movs	r2, #9
 8018792:	602a      	str	r2, [r5, #0]
 8018794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018798:	81a3      	strh	r3, [r4, #12]
 801879a:	f04f 30ff 	mov.w	r0, #4294967295
 801879e:	e033      	b.n	8018808 <__swsetup_r+0x98>
 80187a0:	0758      	lsls	r0, r3, #29
 80187a2:	d512      	bpl.n	80187ca <__swsetup_r+0x5a>
 80187a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187a6:	b141      	cbz	r1, 80187ba <__swsetup_r+0x4a>
 80187a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187ac:	4299      	cmp	r1, r3
 80187ae:	d002      	beq.n	80187b6 <__swsetup_r+0x46>
 80187b0:	4628      	mov	r0, r5
 80187b2:	f7fe faa7 	bl	8016d04 <_free_r>
 80187b6:	2300      	movs	r3, #0
 80187b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80187ba:	89a3      	ldrh	r3, [r4, #12]
 80187bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187c0:	81a3      	strh	r3, [r4, #12]
 80187c2:	2300      	movs	r3, #0
 80187c4:	6063      	str	r3, [r4, #4]
 80187c6:	6923      	ldr	r3, [r4, #16]
 80187c8:	6023      	str	r3, [r4, #0]
 80187ca:	89a3      	ldrh	r3, [r4, #12]
 80187cc:	f043 0308 	orr.w	r3, r3, #8
 80187d0:	81a3      	strh	r3, [r4, #12]
 80187d2:	6923      	ldr	r3, [r4, #16]
 80187d4:	b94b      	cbnz	r3, 80187ea <__swsetup_r+0x7a>
 80187d6:	89a3      	ldrh	r3, [r4, #12]
 80187d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187e0:	d003      	beq.n	80187ea <__swsetup_r+0x7a>
 80187e2:	4621      	mov	r1, r4
 80187e4:	4628      	mov	r0, r5
 80187e6:	f000 f883 	bl	80188f0 <__smakebuf_r>
 80187ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187ee:	f013 0201 	ands.w	r2, r3, #1
 80187f2:	d00a      	beq.n	801880a <__swsetup_r+0x9a>
 80187f4:	2200      	movs	r2, #0
 80187f6:	60a2      	str	r2, [r4, #8]
 80187f8:	6962      	ldr	r2, [r4, #20]
 80187fa:	4252      	negs	r2, r2
 80187fc:	61a2      	str	r2, [r4, #24]
 80187fe:	6922      	ldr	r2, [r4, #16]
 8018800:	b942      	cbnz	r2, 8018814 <__swsetup_r+0xa4>
 8018802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018806:	d1c5      	bne.n	8018794 <__swsetup_r+0x24>
 8018808:	bd38      	pop	{r3, r4, r5, pc}
 801880a:	0799      	lsls	r1, r3, #30
 801880c:	bf58      	it	pl
 801880e:	6962      	ldrpl	r2, [r4, #20]
 8018810:	60a2      	str	r2, [r4, #8]
 8018812:	e7f4      	b.n	80187fe <__swsetup_r+0x8e>
 8018814:	2000      	movs	r0, #0
 8018816:	e7f7      	b.n	8018808 <__swsetup_r+0x98>
 8018818:	2400027c 	.word	0x2400027c

0801881c <_raise_r>:
 801881c:	291f      	cmp	r1, #31
 801881e:	b538      	push	{r3, r4, r5, lr}
 8018820:	4605      	mov	r5, r0
 8018822:	460c      	mov	r4, r1
 8018824:	d904      	bls.n	8018830 <_raise_r+0x14>
 8018826:	2316      	movs	r3, #22
 8018828:	6003      	str	r3, [r0, #0]
 801882a:	f04f 30ff 	mov.w	r0, #4294967295
 801882e:	bd38      	pop	{r3, r4, r5, pc}
 8018830:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018832:	b112      	cbz	r2, 801883a <_raise_r+0x1e>
 8018834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018838:	b94b      	cbnz	r3, 801884e <_raise_r+0x32>
 801883a:	4628      	mov	r0, r5
 801883c:	f000 f830 	bl	80188a0 <_getpid_r>
 8018840:	4622      	mov	r2, r4
 8018842:	4601      	mov	r1, r0
 8018844:	4628      	mov	r0, r5
 8018846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801884a:	f000 b817 	b.w	801887c <_kill_r>
 801884e:	2b01      	cmp	r3, #1
 8018850:	d00a      	beq.n	8018868 <_raise_r+0x4c>
 8018852:	1c59      	adds	r1, r3, #1
 8018854:	d103      	bne.n	801885e <_raise_r+0x42>
 8018856:	2316      	movs	r3, #22
 8018858:	6003      	str	r3, [r0, #0]
 801885a:	2001      	movs	r0, #1
 801885c:	e7e7      	b.n	801882e <_raise_r+0x12>
 801885e:	2100      	movs	r1, #0
 8018860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018864:	4620      	mov	r0, r4
 8018866:	4798      	blx	r3
 8018868:	2000      	movs	r0, #0
 801886a:	e7e0      	b.n	801882e <_raise_r+0x12>

0801886c <raise>:
 801886c:	4b02      	ldr	r3, [pc, #8]	@ (8018878 <raise+0xc>)
 801886e:	4601      	mov	r1, r0
 8018870:	6818      	ldr	r0, [r3, #0]
 8018872:	f7ff bfd3 	b.w	801881c <_raise_r>
 8018876:	bf00      	nop
 8018878:	2400027c 	.word	0x2400027c

0801887c <_kill_r>:
 801887c:	b538      	push	{r3, r4, r5, lr}
 801887e:	4d07      	ldr	r5, [pc, #28]	@ (801889c <_kill_r+0x20>)
 8018880:	2300      	movs	r3, #0
 8018882:	4604      	mov	r4, r0
 8018884:	4608      	mov	r0, r1
 8018886:	4611      	mov	r1, r2
 8018888:	602b      	str	r3, [r5, #0]
 801888a:	f7e9 fcdd 	bl	8002248 <_kill>
 801888e:	1c43      	adds	r3, r0, #1
 8018890:	d102      	bne.n	8018898 <_kill_r+0x1c>
 8018892:	682b      	ldr	r3, [r5, #0]
 8018894:	b103      	cbz	r3, 8018898 <_kill_r+0x1c>
 8018896:	6023      	str	r3, [r4, #0]
 8018898:	bd38      	pop	{r3, r4, r5, pc}
 801889a:	bf00      	nop
 801889c:	24006c54 	.word	0x24006c54

080188a0 <_getpid_r>:
 80188a0:	f7e9 bcca 	b.w	8002238 <_getpid>

080188a4 <__swhatbuf_r>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	460c      	mov	r4, r1
 80188a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ac:	2900      	cmp	r1, #0
 80188ae:	b096      	sub	sp, #88	@ 0x58
 80188b0:	4615      	mov	r5, r2
 80188b2:	461e      	mov	r6, r3
 80188b4:	da0d      	bge.n	80188d2 <__swhatbuf_r+0x2e>
 80188b6:	89a3      	ldrh	r3, [r4, #12]
 80188b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80188bc:	f04f 0100 	mov.w	r1, #0
 80188c0:	bf14      	ite	ne
 80188c2:	2340      	movne	r3, #64	@ 0x40
 80188c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80188c8:	2000      	movs	r0, #0
 80188ca:	6031      	str	r1, [r6, #0]
 80188cc:	602b      	str	r3, [r5, #0]
 80188ce:	b016      	add	sp, #88	@ 0x58
 80188d0:	bd70      	pop	{r4, r5, r6, pc}
 80188d2:	466a      	mov	r2, sp
 80188d4:	f000 f848 	bl	8018968 <_fstat_r>
 80188d8:	2800      	cmp	r0, #0
 80188da:	dbec      	blt.n	80188b6 <__swhatbuf_r+0x12>
 80188dc:	9901      	ldr	r1, [sp, #4]
 80188de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80188e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80188e6:	4259      	negs	r1, r3
 80188e8:	4159      	adcs	r1, r3
 80188ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80188ee:	e7eb      	b.n	80188c8 <__swhatbuf_r+0x24>

080188f0 <__smakebuf_r>:
 80188f0:	898b      	ldrh	r3, [r1, #12]
 80188f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188f4:	079d      	lsls	r5, r3, #30
 80188f6:	4606      	mov	r6, r0
 80188f8:	460c      	mov	r4, r1
 80188fa:	d507      	bpl.n	801890c <__smakebuf_r+0x1c>
 80188fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	6123      	str	r3, [r4, #16]
 8018904:	2301      	movs	r3, #1
 8018906:	6163      	str	r3, [r4, #20]
 8018908:	b003      	add	sp, #12
 801890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801890c:	ab01      	add	r3, sp, #4
 801890e:	466a      	mov	r2, sp
 8018910:	f7ff ffc8 	bl	80188a4 <__swhatbuf_r>
 8018914:	9f00      	ldr	r7, [sp, #0]
 8018916:	4605      	mov	r5, r0
 8018918:	4639      	mov	r1, r7
 801891a:	4630      	mov	r0, r6
 801891c:	f7fe fda0 	bl	8017460 <_malloc_r>
 8018920:	b948      	cbnz	r0, 8018936 <__smakebuf_r+0x46>
 8018922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018926:	059a      	lsls	r2, r3, #22
 8018928:	d4ee      	bmi.n	8018908 <__smakebuf_r+0x18>
 801892a:	f023 0303 	bic.w	r3, r3, #3
 801892e:	f043 0302 	orr.w	r3, r3, #2
 8018932:	81a3      	strh	r3, [r4, #12]
 8018934:	e7e2      	b.n	80188fc <__smakebuf_r+0xc>
 8018936:	89a3      	ldrh	r3, [r4, #12]
 8018938:	6020      	str	r0, [r4, #0]
 801893a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801893e:	81a3      	strh	r3, [r4, #12]
 8018940:	9b01      	ldr	r3, [sp, #4]
 8018942:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018946:	b15b      	cbz	r3, 8018960 <__smakebuf_r+0x70>
 8018948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801894c:	4630      	mov	r0, r6
 801894e:	f000 f81d 	bl	801898c <_isatty_r>
 8018952:	b128      	cbz	r0, 8018960 <__smakebuf_r+0x70>
 8018954:	89a3      	ldrh	r3, [r4, #12]
 8018956:	f023 0303 	bic.w	r3, r3, #3
 801895a:	f043 0301 	orr.w	r3, r3, #1
 801895e:	81a3      	strh	r3, [r4, #12]
 8018960:	89a3      	ldrh	r3, [r4, #12]
 8018962:	431d      	orrs	r5, r3
 8018964:	81a5      	strh	r5, [r4, #12]
 8018966:	e7cf      	b.n	8018908 <__smakebuf_r+0x18>

08018968 <_fstat_r>:
 8018968:	b538      	push	{r3, r4, r5, lr}
 801896a:	4d07      	ldr	r5, [pc, #28]	@ (8018988 <_fstat_r+0x20>)
 801896c:	2300      	movs	r3, #0
 801896e:	4604      	mov	r4, r0
 8018970:	4608      	mov	r0, r1
 8018972:	4611      	mov	r1, r2
 8018974:	602b      	str	r3, [r5, #0]
 8018976:	f7e9 fcc7 	bl	8002308 <_fstat>
 801897a:	1c43      	adds	r3, r0, #1
 801897c:	d102      	bne.n	8018984 <_fstat_r+0x1c>
 801897e:	682b      	ldr	r3, [r5, #0]
 8018980:	b103      	cbz	r3, 8018984 <_fstat_r+0x1c>
 8018982:	6023      	str	r3, [r4, #0]
 8018984:	bd38      	pop	{r3, r4, r5, pc}
 8018986:	bf00      	nop
 8018988:	24006c54 	.word	0x24006c54

0801898c <_isatty_r>:
 801898c:	b538      	push	{r3, r4, r5, lr}
 801898e:	4d06      	ldr	r5, [pc, #24]	@ (80189a8 <_isatty_r+0x1c>)
 8018990:	2300      	movs	r3, #0
 8018992:	4604      	mov	r4, r0
 8018994:	4608      	mov	r0, r1
 8018996:	602b      	str	r3, [r5, #0]
 8018998:	f7e9 fcc6 	bl	8002328 <_isatty>
 801899c:	1c43      	adds	r3, r0, #1
 801899e:	d102      	bne.n	80189a6 <_isatty_r+0x1a>
 80189a0:	682b      	ldr	r3, [r5, #0]
 80189a2:	b103      	cbz	r3, 80189a6 <_isatty_r+0x1a>
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	bd38      	pop	{r3, r4, r5, pc}
 80189a8:	24006c54 	.word	0x24006c54
 80189ac:	00000000 	.word	0x00000000

080189b0 <sin>:
 80189b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80189b2:	eeb0 7b40 	vmov.f64	d7, d0
 80189b6:	ee17 3a90 	vmov	r3, s15
 80189ba:	4a21      	ldr	r2, [pc, #132]	@ (8018a40 <sin+0x90>)
 80189bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d807      	bhi.n	80189d4 <sin+0x24>
 80189c4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8018a38 <sin+0x88>
 80189c8:	2000      	movs	r0, #0
 80189ca:	b005      	add	sp, #20
 80189cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80189d0:	f000 b986 	b.w	8018ce0 <__kernel_sin>
 80189d4:	4a1b      	ldr	r2, [pc, #108]	@ (8018a44 <sin+0x94>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d904      	bls.n	80189e4 <sin+0x34>
 80189da:	ee30 0b40 	vsub.f64	d0, d0, d0
 80189de:	b005      	add	sp, #20
 80189e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80189e4:	4668      	mov	r0, sp
 80189e6:	f000 f9d3 	bl	8018d90 <__ieee754_rem_pio2>
 80189ea:	f000 0003 	and.w	r0, r0, #3
 80189ee:	2801      	cmp	r0, #1
 80189f0:	d00a      	beq.n	8018a08 <sin+0x58>
 80189f2:	2802      	cmp	r0, #2
 80189f4:	d00f      	beq.n	8018a16 <sin+0x66>
 80189f6:	b9c0      	cbnz	r0, 8018a2a <sin+0x7a>
 80189f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80189fc:	ed9d 0b00 	vldr	d0, [sp]
 8018a00:	2001      	movs	r0, #1
 8018a02:	f000 f96d 	bl	8018ce0 <__kernel_sin>
 8018a06:	e7ea      	b.n	80189de <sin+0x2e>
 8018a08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018a0c:	ed9d 0b00 	vldr	d0, [sp]
 8018a10:	f000 f8fe 	bl	8018c10 <__kernel_cos>
 8018a14:	e7e3      	b.n	80189de <sin+0x2e>
 8018a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018a1a:	ed9d 0b00 	vldr	d0, [sp]
 8018a1e:	2001      	movs	r0, #1
 8018a20:	f000 f95e 	bl	8018ce0 <__kernel_sin>
 8018a24:	eeb1 0b40 	vneg.f64	d0, d0
 8018a28:	e7d9      	b.n	80189de <sin+0x2e>
 8018a2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018a2e:	ed9d 0b00 	vldr	d0, [sp]
 8018a32:	f000 f8ed 	bl	8018c10 <__kernel_cos>
 8018a36:	e7f5      	b.n	8018a24 <sin+0x74>
	...
 8018a40:	3fe921fb 	.word	0x3fe921fb
 8018a44:	7fefffff 	.word	0x7fefffff

08018a48 <sinf_poly>:
 8018a48:	07cb      	lsls	r3, r1, #31
 8018a4a:	d412      	bmi.n	8018a72 <sinf_poly+0x2a>
 8018a4c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8018a50:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8018a54:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8018a58:	eea6 7b01 	vfma.f64	d7, d6, d1
 8018a5c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8018a60:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018a64:	eea6 0b05 	vfma.f64	d0, d6, d5
 8018a68:	eea7 0b01 	vfma.f64	d0, d7, d1
 8018a6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018a70:	4770      	bx	lr
 8018a72:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8018a76:	ee21 5b01 	vmul.f64	d5, d1, d1
 8018a7a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8018a7e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8018a82:	eea1 7b06 	vfma.f64	d7, d1, d6
 8018a86:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8018a8a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8018a8e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8018a92:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018a96:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018a9a:	e7e5      	b.n	8018a68 <sinf_poly+0x20>
 8018a9c:	0000      	movs	r0, r0
	...

08018aa0 <sinf>:
 8018aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018aa2:	ee10 4a10 	vmov	r4, s0
 8018aa6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018aaa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8018aae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018ab2:	eef0 7a40 	vmov.f32	s15, s0
 8018ab6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8018aba:	d218      	bcs.n	8018aee <sinf+0x4e>
 8018abc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018ac0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8018ac4:	d20a      	bcs.n	8018adc <sinf+0x3c>
 8018ac6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8018aca:	d103      	bne.n	8018ad4 <sinf+0x34>
 8018acc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8018ad0:	ed8d 1a01 	vstr	s2, [sp, #4]
 8018ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8018ad8:	b003      	add	sp, #12
 8018ada:	bd30      	pop	{r4, r5, pc}
 8018adc:	483a      	ldr	r0, [pc, #232]	@ (8018bc8 <sinf+0x128>)
 8018ade:	eeb0 0b46 	vmov.f64	d0, d6
 8018ae2:	2100      	movs	r1, #0
 8018ae4:	b003      	add	sp, #12
 8018ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018aea:	f7ff bfad 	b.w	8018a48 <sinf_poly>
 8018aee:	f240 422e 	movw	r2, #1070	@ 0x42e
 8018af2:	4293      	cmp	r3, r2
 8018af4:	d824      	bhi.n	8018b40 <sinf+0xa0>
 8018af6:	4b34      	ldr	r3, [pc, #208]	@ (8018bc8 <sinf+0x128>)
 8018af8:	ed93 7b08 	vldr	d7, [r3, #32]
 8018afc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018b00:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018b04:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018b08:	ee17 1a90 	vmov	r1, s15
 8018b0c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8018b10:	1609      	asrs	r1, r1, #24
 8018b12:	ee07 1a90 	vmov	s15, r1
 8018b16:	f001 0203 	and.w	r2, r1, #3
 8018b1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018b1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018b22:	ed92 0b00 	vldr	d0, [r2]
 8018b26:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8018b2a:	f011 0f02 	tst.w	r1, #2
 8018b2e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8018b32:	bf08      	it	eq
 8018b34:	4618      	moveq	r0, r3
 8018b36:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018b3a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8018b3e:	e7d1      	b.n	8018ae4 <sinf+0x44>
 8018b40:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8018b44:	d237      	bcs.n	8018bb6 <sinf+0x116>
 8018b46:	4921      	ldr	r1, [pc, #132]	@ (8018bcc <sinf+0x12c>)
 8018b48:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8018b4c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8018b50:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8018b54:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8018b58:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018b5c:	6a10      	ldr	r0, [r2, #32]
 8018b5e:	6912      	ldr	r2, [r2, #16]
 8018b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018b64:	40ab      	lsls	r3, r5
 8018b66:	fba0 5003 	umull	r5, r0, r0, r3
 8018b6a:	4359      	muls	r1, r3
 8018b6c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8018b70:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8018b74:	0f9d      	lsrs	r5, r3, #30
 8018b76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018b7a:	1ac9      	subs	r1, r1, r3
 8018b7c:	f7e7 fdbe 	bl	80006fc <__aeabi_l2d>
 8018b80:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8018b84:	4b10      	ldr	r3, [pc, #64]	@ (8018bc8 <sinf+0x128>)
 8018b86:	f004 0203 	and.w	r2, r4, #3
 8018b8a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018b8e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8018bc0 <sinf+0x120>
 8018b92:	ed92 0b00 	vldr	d0, [r2]
 8018b96:	ec41 0b17 	vmov	d7, r0, r1
 8018b9a:	f014 0f02 	tst.w	r4, #2
 8018b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ba2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018ba6:	4629      	mov	r1, r5
 8018ba8:	bf08      	it	eq
 8018baa:	4618      	moveq	r0, r3
 8018bac:	ee27 1b07 	vmul.f64	d1, d7, d7
 8018bb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018bb4:	e796      	b.n	8018ae4 <sinf+0x44>
 8018bb6:	b003      	add	sp, #12
 8018bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bbc:	f000 b816 	b.w	8018bec <__math_invalidf>
 8018bc0:	54442d18 	.word	0x54442d18
 8018bc4:	3c1921fb 	.word	0x3c1921fb
 8018bc8:	08019d48 	.word	0x08019d48
 8018bcc:	08019ce8 	.word	0x08019ce8

08018bd0 <with_errnof>:
 8018bd0:	b510      	push	{r4, lr}
 8018bd2:	ed2d 8b02 	vpush	{d8}
 8018bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8018bda:	4604      	mov	r4, r0
 8018bdc:	f7fd fa6e 	bl	80160bc <__errno>
 8018be0:	eeb0 0a48 	vmov.f32	s0, s16
 8018be4:	ecbd 8b02 	vpop	{d8}
 8018be8:	6004      	str	r4, [r0, #0]
 8018bea:	bd10      	pop	{r4, pc}

08018bec <__math_invalidf>:
 8018bec:	eef0 7a40 	vmov.f32	s15, s0
 8018bf0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018bf4:	eef4 7a67 	vcmp.f32	s15, s15
 8018bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bfc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8018c00:	d602      	bvs.n	8018c08 <__math_invalidf+0x1c>
 8018c02:	2021      	movs	r0, #33	@ 0x21
 8018c04:	f7ff bfe4 	b.w	8018bd0 <with_errnof>
 8018c08:	4770      	bx	lr
 8018c0a:	0000      	movs	r0, r0
 8018c0c:	0000      	movs	r0, r0
	...

08018c10 <__kernel_cos>:
 8018c10:	eeb0 5b40 	vmov.f64	d5, d0
 8018c14:	ee15 1a90 	vmov	r1, s11
 8018c18:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8018c1c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8018c20:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8018c24:	d204      	bcs.n	8018c30 <__kernel_cos+0x20>
 8018c26:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8018c2a:	ee17 3a90 	vmov	r3, s15
 8018c2e:	b343      	cbz	r3, 8018c82 <__kernel_cos+0x72>
 8018c30:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018c34:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8018c38:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8018ca8 <__kernel_cos+0x98>
 8018c3c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018cb0 <__kernel_cos+0xa0>
 8018c40:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018c44:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018cb8 <__kernel_cos+0xa8>
 8018c48:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018c4c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018cc0 <__kernel_cos+0xb0>
 8018c50:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018c54:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018cc8 <__kernel_cos+0xb8>
 8018c58:	4b1f      	ldr	r3, [pc, #124]	@ (8018cd8 <__kernel_cos+0xc8>)
 8018c5a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018c5e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018cd0 <__kernel_cos+0xc0>
 8018c62:	4299      	cmp	r1, r3
 8018c64:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018c68:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8018c6c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8018c70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018c74:	eea6 1b04 	vfma.f64	d1, d6, d4
 8018c78:	d804      	bhi.n	8018c84 <__kernel_cos+0x74>
 8018c7a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018c7e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018c82:	4770      	bx	lr
 8018c84:	4b15      	ldr	r3, [pc, #84]	@ (8018cdc <__kernel_cos+0xcc>)
 8018c86:	4299      	cmp	r1, r3
 8018c88:	d809      	bhi.n	8018c9e <__kernel_cos+0x8e>
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8018c90:	ec43 2b16 	vmov	d6, r2, r3
 8018c94:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018c98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018c9c:	e7ed      	b.n	8018c7a <__kernel_cos+0x6a>
 8018c9e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8018ca2:	e7f7      	b.n	8018c94 <__kernel_cos+0x84>
 8018ca4:	f3af 8000 	nop.w
 8018ca8:	be8838d4 	.word	0xbe8838d4
 8018cac:	bda8fae9 	.word	0xbda8fae9
 8018cb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8018cb4:	3e21ee9e 	.word	0x3e21ee9e
 8018cb8:	809c52ad 	.word	0x809c52ad
 8018cbc:	be927e4f 	.word	0xbe927e4f
 8018cc0:	19cb1590 	.word	0x19cb1590
 8018cc4:	3efa01a0 	.word	0x3efa01a0
 8018cc8:	16c15177 	.word	0x16c15177
 8018ccc:	bf56c16c 	.word	0xbf56c16c
 8018cd0:	5555554c 	.word	0x5555554c
 8018cd4:	3fa55555 	.word	0x3fa55555
 8018cd8:	3fd33332 	.word	0x3fd33332
 8018cdc:	3fe90000 	.word	0x3fe90000

08018ce0 <__kernel_sin>:
 8018ce0:	ee10 3a90 	vmov	r3, s1
 8018ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ce8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8018cec:	d204      	bcs.n	8018cf8 <__kernel_sin+0x18>
 8018cee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018cf2:	ee17 3a90 	vmov	r3, s15
 8018cf6:	b35b      	cbz	r3, 8018d50 <__kernel_sin+0x70>
 8018cf8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018cfc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8018d00:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8018d58 <__kernel_sin+0x78>
 8018d04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018d60 <__kernel_sin+0x80>
 8018d08:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018d0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8018d68 <__kernel_sin+0x88>
 8018d10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018d14:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018d70 <__kernel_sin+0x90>
 8018d18:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018d1c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8018d78 <__kernel_sin+0x98>
 8018d20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018d24:	b930      	cbnz	r0, 8018d34 <__kernel_sin+0x54>
 8018d26:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8018d80 <__kernel_sin+0xa0>
 8018d2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018d2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8018d32:	4770      	bx	lr
 8018d34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8018d38:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8018d3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8018d40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8018d44:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8018d88 <__kernel_sin+0xa8>
 8018d48:	eea5 1b07 	vfma.f64	d1, d5, d7
 8018d4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	f3af 8000 	nop.w
 8018d58:	5acfd57c 	.word	0x5acfd57c
 8018d5c:	3de5d93a 	.word	0x3de5d93a
 8018d60:	8a2b9ceb 	.word	0x8a2b9ceb
 8018d64:	be5ae5e6 	.word	0xbe5ae5e6
 8018d68:	57b1fe7d 	.word	0x57b1fe7d
 8018d6c:	3ec71de3 	.word	0x3ec71de3
 8018d70:	19c161d5 	.word	0x19c161d5
 8018d74:	bf2a01a0 	.word	0xbf2a01a0
 8018d78:	1110f8a6 	.word	0x1110f8a6
 8018d7c:	3f811111 	.word	0x3f811111
 8018d80:	55555549 	.word	0x55555549
 8018d84:	bfc55555 	.word	0xbfc55555
 8018d88:	55555549 	.word	0x55555549
 8018d8c:	3fc55555 	.word	0x3fc55555

08018d90 <__ieee754_rem_pio2>:
 8018d90:	b570      	push	{r4, r5, r6, lr}
 8018d92:	eeb0 7b40 	vmov.f64	d7, d0
 8018d96:	ee17 5a90 	vmov	r5, s15
 8018d9a:	4b99      	ldr	r3, [pc, #612]	@ (8019000 <__ieee754_rem_pio2+0x270>)
 8018d9c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8018da0:	429e      	cmp	r6, r3
 8018da2:	b088      	sub	sp, #32
 8018da4:	4604      	mov	r4, r0
 8018da6:	d807      	bhi.n	8018db8 <__ieee754_rem_pio2+0x28>
 8018da8:	2200      	movs	r2, #0
 8018daa:	2300      	movs	r3, #0
 8018dac:	ed84 0b00 	vstr	d0, [r4]
 8018db0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018db4:	2000      	movs	r0, #0
 8018db6:	e01b      	b.n	8018df0 <__ieee754_rem_pio2+0x60>
 8018db8:	4b92      	ldr	r3, [pc, #584]	@ (8019004 <__ieee754_rem_pio2+0x274>)
 8018dba:	429e      	cmp	r6, r3
 8018dbc:	d83b      	bhi.n	8018e36 <__ieee754_rem_pio2+0xa6>
 8018dbe:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8018dc2:	2d00      	cmp	r5, #0
 8018dc4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8018fc0 <__ieee754_rem_pio2+0x230>
 8018dc8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8018dcc:	dd19      	ble.n	8018e02 <__ieee754_rem_pio2+0x72>
 8018dce:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018dd2:	429e      	cmp	r6, r3
 8018dd4:	d00e      	beq.n	8018df4 <__ieee754_rem_pio2+0x64>
 8018dd6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8018fc8 <__ieee754_rem_pio2+0x238>
 8018dda:	ee37 6b45 	vsub.f64	d6, d7, d5
 8018dde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018de2:	ed84 6b00 	vstr	d6, [r4]
 8018de6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018dea:	ed84 7b02 	vstr	d7, [r4, #8]
 8018dee:	2001      	movs	r0, #1
 8018df0:	b008      	add	sp, #32
 8018df2:	bd70      	pop	{r4, r5, r6, pc}
 8018df4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8018fd0 <__ieee754_rem_pio2+0x240>
 8018df8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8018fd8 <__ieee754_rem_pio2+0x248>
 8018dfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e00:	e7eb      	b.n	8018dda <__ieee754_rem_pio2+0x4a>
 8018e02:	429e      	cmp	r6, r3
 8018e04:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018e08:	d00e      	beq.n	8018e28 <__ieee754_rem_pio2+0x98>
 8018e0a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8018fc8 <__ieee754_rem_pio2+0x238>
 8018e0e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018e12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e16:	ed84 6b00 	vstr	d6, [r4]
 8018e1a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8018e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e22:	ed84 7b02 	vstr	d7, [r4, #8]
 8018e26:	e7e3      	b.n	8018df0 <__ieee754_rem_pio2+0x60>
 8018e28:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8018fd0 <__ieee754_rem_pio2+0x240>
 8018e2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8018fd8 <__ieee754_rem_pio2+0x248>
 8018e30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018e34:	e7eb      	b.n	8018e0e <__ieee754_rem_pio2+0x7e>
 8018e36:	4b74      	ldr	r3, [pc, #464]	@ (8019008 <__ieee754_rem_pio2+0x278>)
 8018e38:	429e      	cmp	r6, r3
 8018e3a:	d870      	bhi.n	8018f1e <__ieee754_rem_pio2+0x18e>
 8018e3c:	f000 f8ec 	bl	8019018 <fabs>
 8018e40:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8018e44:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8018fe0 <__ieee754_rem_pio2+0x250>
 8018e48:	eea0 7b06 	vfma.f64	d7, d0, d6
 8018e4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018e50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018e54:	ee17 0a90 	vmov	r0, s15
 8018e58:	eeb1 4b45 	vneg.f64	d4, d5
 8018e5c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8018fc0 <__ieee754_rem_pio2+0x230>
 8018e60:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018e64:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8018fc8 <__ieee754_rem_pio2+0x238>
 8018e68:	281f      	cmp	r0, #31
 8018e6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8018e6e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018e72:	dc05      	bgt.n	8018e80 <__ieee754_rem_pio2+0xf0>
 8018e74:	4b65      	ldr	r3, [pc, #404]	@ (801900c <__ieee754_rem_pio2+0x27c>)
 8018e76:	1e42      	subs	r2, r0, #1
 8018e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e7c:	42b3      	cmp	r3, r6
 8018e7e:	d109      	bne.n	8018e94 <__ieee754_rem_pio2+0x104>
 8018e80:	ee16 3a90 	vmov	r3, s13
 8018e84:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018e88:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8018e8c:	2b10      	cmp	r3, #16
 8018e8e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8018e92:	dc02      	bgt.n	8018e9a <__ieee754_rem_pio2+0x10a>
 8018e94:	ed84 6b00 	vstr	d6, [r4]
 8018e98:	e01a      	b.n	8018ed0 <__ieee754_rem_pio2+0x140>
 8018e9a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8018fd0 <__ieee754_rem_pio2+0x240>
 8018e9e:	eeb0 6b40 	vmov.f64	d6, d0
 8018ea2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8018ea6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018eaa:	eea4 7b03 	vfma.f64	d7, d4, d3
 8018eae:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8018fd8 <__ieee754_rem_pio2+0x248>
 8018eb2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8018eb6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8018eba:	ee13 3a90 	vmov	r3, s7
 8018ebe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018ec2:	1ad3      	subs	r3, r2, r3
 8018ec4:	2b31      	cmp	r3, #49	@ 0x31
 8018ec6:	dc17      	bgt.n	8018ef8 <__ieee754_rem_pio2+0x168>
 8018ec8:	eeb0 0b46 	vmov.f64	d0, d6
 8018ecc:	ed84 3b00 	vstr	d3, [r4]
 8018ed0:	ed94 6b00 	vldr	d6, [r4]
 8018ed4:	2d00      	cmp	r5, #0
 8018ed6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018eda:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018ede:	ed84 0b02 	vstr	d0, [r4, #8]
 8018ee2:	da85      	bge.n	8018df0 <__ieee754_rem_pio2+0x60>
 8018ee4:	eeb1 6b46 	vneg.f64	d6, d6
 8018ee8:	eeb1 0b40 	vneg.f64	d0, d0
 8018eec:	ed84 6b00 	vstr	d6, [r4]
 8018ef0:	ed84 0b02 	vstr	d0, [r4, #8]
 8018ef4:	4240      	negs	r0, r0
 8018ef6:	e77b      	b.n	8018df0 <__ieee754_rem_pio2+0x60>
 8018ef8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8018fe8 <__ieee754_rem_pio2+0x258>
 8018efc:	eeb0 0b46 	vmov.f64	d0, d6
 8018f00:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018f04:	ee36 6b40 	vsub.f64	d6, d6, d0
 8018f08:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018f0c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8018ff0 <__ieee754_rem_pio2+0x260>
 8018f10:	eeb0 7b46 	vmov.f64	d7, d6
 8018f14:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8018f18:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018f1c:	e7ba      	b.n	8018e94 <__ieee754_rem_pio2+0x104>
 8018f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8019010 <__ieee754_rem_pio2+0x280>)
 8018f20:	429e      	cmp	r6, r3
 8018f22:	d906      	bls.n	8018f32 <__ieee754_rem_pio2+0x1a2>
 8018f24:	ee30 7b40 	vsub.f64	d7, d0, d0
 8018f28:	ed80 7b02 	vstr	d7, [r0, #8]
 8018f2c:	ed80 7b00 	vstr	d7, [r0]
 8018f30:	e740      	b.n	8018db4 <__ieee754_rem_pio2+0x24>
 8018f32:	ee10 3a10 	vmov	r3, s0
 8018f36:	1532      	asrs	r2, r6, #20
 8018f38:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8018f42:	ec41 0b17 	vmov	d7, r0, r1
 8018f46:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018f4a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8018ff8 <__ieee754_rem_pio2+0x268>
 8018f4e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018f52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018f56:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018f5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018f5e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018f62:	a808      	add	r0, sp, #32
 8018f64:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018f68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018f6c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018f70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018f74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018f78:	2103      	movs	r1, #3
 8018f7a:	ed30 7b02 	vldmdb	r0!, {d7}
 8018f7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f86:	460b      	mov	r3, r1
 8018f88:	f101 31ff 	add.w	r1, r1, #4294967295
 8018f8c:	d0f5      	beq.n	8018f7a <__ieee754_rem_pio2+0x1ea>
 8018f8e:	4921      	ldr	r1, [pc, #132]	@ (8019014 <__ieee754_rem_pio2+0x284>)
 8018f90:	9101      	str	r1, [sp, #4]
 8018f92:	2102      	movs	r1, #2
 8018f94:	9100      	str	r1, [sp, #0]
 8018f96:	a802      	add	r0, sp, #8
 8018f98:	4621      	mov	r1, r4
 8018f9a:	f000 f845 	bl	8019028 <__kernel_rem_pio2>
 8018f9e:	2d00      	cmp	r5, #0
 8018fa0:	f6bf af26 	bge.w	8018df0 <__ieee754_rem_pio2+0x60>
 8018fa4:	ed94 7b00 	vldr	d7, [r4]
 8018fa8:	eeb1 7b47 	vneg.f64	d7, d7
 8018fac:	ed84 7b00 	vstr	d7, [r4]
 8018fb0:	ed94 7b02 	vldr	d7, [r4, #8]
 8018fb4:	eeb1 7b47 	vneg.f64	d7, d7
 8018fb8:	ed84 7b02 	vstr	d7, [r4, #8]
 8018fbc:	e79a      	b.n	8018ef4 <__ieee754_rem_pio2+0x164>
 8018fbe:	bf00      	nop
 8018fc0:	54400000 	.word	0x54400000
 8018fc4:	3ff921fb 	.word	0x3ff921fb
 8018fc8:	1a626331 	.word	0x1a626331
 8018fcc:	3dd0b461 	.word	0x3dd0b461
 8018fd0:	1a600000 	.word	0x1a600000
 8018fd4:	3dd0b461 	.word	0x3dd0b461
 8018fd8:	2e037073 	.word	0x2e037073
 8018fdc:	3ba3198a 	.word	0x3ba3198a
 8018fe0:	6dc9c883 	.word	0x6dc9c883
 8018fe4:	3fe45f30 	.word	0x3fe45f30
 8018fe8:	2e000000 	.word	0x2e000000
 8018fec:	3ba3198a 	.word	0x3ba3198a
 8018ff0:	252049c1 	.word	0x252049c1
 8018ff4:	397b839a 	.word	0x397b839a
 8018ff8:	00000000 	.word	0x00000000
 8018ffc:	41700000 	.word	0x41700000
 8019000:	3fe921fb 	.word	0x3fe921fb
 8019004:	4002d97b 	.word	0x4002d97b
 8019008:	413921fb 	.word	0x413921fb
 801900c:	08019e28 	.word	0x08019e28
 8019010:	7fefffff 	.word	0x7fefffff
 8019014:	08019ea8 	.word	0x08019ea8

08019018 <fabs>:
 8019018:	ec51 0b10 	vmov	r0, r1, d0
 801901c:	4602      	mov	r2, r0
 801901e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019022:	ec43 2b10 	vmov	d0, r2, r3
 8019026:	4770      	bx	lr

08019028 <__kernel_rem_pio2>:
 8019028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902c:	ed2d 8b06 	vpush	{d8-d10}
 8019030:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8019034:	469b      	mov	fp, r3
 8019036:	9001      	str	r0, [sp, #4]
 8019038:	4bbb      	ldr	r3, [pc, #748]	@ (8019328 <__kernel_rem_pio2+0x300>)
 801903a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801903c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8019040:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8019044:	f112 0f14 	cmn.w	r2, #20
 8019048:	bfa8      	it	ge
 801904a:	1ed3      	subge	r3, r2, #3
 801904c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8019050:	bfb8      	it	lt
 8019052:	2300      	movlt	r3, #0
 8019054:	f06f 0517 	mvn.w	r5, #23
 8019058:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8019310 <__kernel_rem_pio2+0x2e8>
 801905c:	bfa4      	itt	ge
 801905e:	2018      	movge	r0, #24
 8019060:	fb93 f3f0 	sdivge	r3, r3, r0
 8019064:	fb03 5505 	mla	r5, r3, r5, r5
 8019068:	eba3 040a 	sub.w	r4, r3, sl
 801906c:	4415      	add	r5, r2
 801906e:	460f      	mov	r7, r1
 8019070:	eb09 060a 	add.w	r6, r9, sl
 8019074:	a81a      	add	r0, sp, #104	@ 0x68
 8019076:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801907a:	2200      	movs	r2, #0
 801907c:	42b2      	cmp	r2, r6
 801907e:	dd0e      	ble.n	801909e <__kernel_rem_pio2+0x76>
 8019080:	aa1a      	add	r2, sp, #104	@ 0x68
 8019082:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8019086:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801908a:	2600      	movs	r6, #0
 801908c:	454e      	cmp	r6, r9
 801908e:	dc25      	bgt.n	80190dc <__kernel_rem_pio2+0xb4>
 8019090:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8019310 <__kernel_rem_pio2+0x2e8>
 8019094:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019098:	4614      	mov	r4, r2
 801909a:	2000      	movs	r0, #0
 801909c:	e015      	b.n	80190ca <__kernel_rem_pio2+0xa2>
 801909e:	42d4      	cmn	r4, r2
 80190a0:	d409      	bmi.n	80190b6 <__kernel_rem_pio2+0x8e>
 80190a2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80190a6:	ee07 1a90 	vmov	s15, r1
 80190aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80190ae:	eca0 7b02 	vstmia	r0!, {d7}
 80190b2:	3201      	adds	r2, #1
 80190b4:	e7e2      	b.n	801907c <__kernel_rem_pio2+0x54>
 80190b6:	eeb0 7b46 	vmov.f64	d7, d6
 80190ba:	e7f8      	b.n	80190ae <__kernel_rem_pio2+0x86>
 80190bc:	ecbc 5b02 	vldmia	ip!, {d5}
 80190c0:	ed94 6b00 	vldr	d6, [r4]
 80190c4:	3001      	adds	r0, #1
 80190c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80190ca:	4550      	cmp	r0, sl
 80190cc:	f1a4 0408 	sub.w	r4, r4, #8
 80190d0:	ddf4      	ble.n	80190bc <__kernel_rem_pio2+0x94>
 80190d2:	ecae 7b02 	vstmia	lr!, {d7}
 80190d6:	3601      	adds	r6, #1
 80190d8:	3208      	adds	r2, #8
 80190da:	e7d7      	b.n	801908c <__kernel_rem_pio2+0x64>
 80190dc:	aa06      	add	r2, sp, #24
 80190de:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8019318 <__kernel_rem_pio2+0x2f0>
 80190e2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8019320 <__kernel_rem_pio2+0x2f8>
 80190e6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80190ea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80190ee:	9203      	str	r2, [sp, #12]
 80190f0:	9302      	str	r3, [sp, #8]
 80190f2:	464c      	mov	r4, r9
 80190f4:	00e3      	lsls	r3, r4, #3
 80190f6:	9304      	str	r3, [sp, #16]
 80190f8:	ab92      	add	r3, sp, #584	@ 0x248
 80190fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80190fe:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8019102:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8019104:	ab06      	add	r3, sp, #24
 8019106:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801910a:	461e      	mov	r6, r3
 801910c:	4620      	mov	r0, r4
 801910e:	2800      	cmp	r0, #0
 8019110:	f1a2 0208 	sub.w	r2, r2, #8
 8019114:	dc4a      	bgt.n	80191ac <__kernel_rem_pio2+0x184>
 8019116:	4628      	mov	r0, r5
 8019118:	9305      	str	r3, [sp, #20]
 801911a:	f000 fa01 	bl	8019520 <scalbn>
 801911e:	eeb0 8b40 	vmov.f64	d8, d0
 8019122:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8019126:	ee28 0b00 	vmul.f64	d0, d8, d0
 801912a:	f000 fa79 	bl	8019620 <floor>
 801912e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8019132:	eea0 8b47 	vfms.f64	d8, d0, d7
 8019136:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801913a:	2d00      	cmp	r5, #0
 801913c:	ee17 8a90 	vmov	r8, s15
 8019140:	9b05      	ldr	r3, [sp, #20]
 8019142:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019146:	ee38 8b47 	vsub.f64	d8, d8, d7
 801914a:	dd41      	ble.n	80191d0 <__kernel_rem_pio2+0x1a8>
 801914c:	1e60      	subs	r0, r4, #1
 801914e:	aa06      	add	r2, sp, #24
 8019150:	f1c5 0c18 	rsb	ip, r5, #24
 8019154:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8019158:	fa46 f20c 	asr.w	r2, r6, ip
 801915c:	4490      	add	r8, r2
 801915e:	fa02 f20c 	lsl.w	r2, r2, ip
 8019162:	1ab6      	subs	r6, r6, r2
 8019164:	aa06      	add	r2, sp, #24
 8019166:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801916a:	f1c5 0217 	rsb	r2, r5, #23
 801916e:	4116      	asrs	r6, r2
 8019170:	2e00      	cmp	r6, #0
 8019172:	dd3c      	ble.n	80191ee <__kernel_rem_pio2+0x1c6>
 8019174:	f04f 0c00 	mov.w	ip, #0
 8019178:	f108 0801 	add.w	r8, r8, #1
 801917c:	4660      	mov	r0, ip
 801917e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8019182:	4564      	cmp	r4, ip
 8019184:	dc66      	bgt.n	8019254 <__kernel_rem_pio2+0x22c>
 8019186:	2d00      	cmp	r5, #0
 8019188:	dd03      	ble.n	8019192 <__kernel_rem_pio2+0x16a>
 801918a:	2d01      	cmp	r5, #1
 801918c:	d072      	beq.n	8019274 <__kernel_rem_pio2+0x24c>
 801918e:	2d02      	cmp	r5, #2
 8019190:	d07a      	beq.n	8019288 <__kernel_rem_pio2+0x260>
 8019192:	2e02      	cmp	r6, #2
 8019194:	d12b      	bne.n	80191ee <__kernel_rem_pio2+0x1c6>
 8019196:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801919a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801919e:	b330      	cbz	r0, 80191ee <__kernel_rem_pio2+0x1c6>
 80191a0:	4628      	mov	r0, r5
 80191a2:	f000 f9bd 	bl	8019520 <scalbn>
 80191a6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80191aa:	e020      	b.n	80191ee <__kernel_rem_pio2+0x1c6>
 80191ac:	ee20 7b09 	vmul.f64	d7, d0, d9
 80191b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80191b4:	3801      	subs	r0, #1
 80191b6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80191ba:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80191be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80191c2:	eca6 0a01 	vstmia	r6!, {s0}
 80191c6:	ed92 0b00 	vldr	d0, [r2]
 80191ca:	ee37 0b00 	vadd.f64	d0, d7, d0
 80191ce:	e79e      	b.n	801910e <__kernel_rem_pio2+0xe6>
 80191d0:	d105      	bne.n	80191de <__kernel_rem_pio2+0x1b6>
 80191d2:	1e62      	subs	r2, r4, #1
 80191d4:	a906      	add	r1, sp, #24
 80191d6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80191da:	15f6      	asrs	r6, r6, #23
 80191dc:	e7c8      	b.n	8019170 <__kernel_rem_pio2+0x148>
 80191de:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80191e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80191e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ea:	da31      	bge.n	8019250 <__kernel_rem_pio2+0x228>
 80191ec:	2600      	movs	r6, #0
 80191ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80191f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f6:	f040 809b 	bne.w	8019330 <__kernel_rem_pio2+0x308>
 80191fa:	1e62      	subs	r2, r4, #1
 80191fc:	2000      	movs	r0, #0
 80191fe:	454a      	cmp	r2, r9
 8019200:	da49      	bge.n	8019296 <__kernel_rem_pio2+0x26e>
 8019202:	2800      	cmp	r0, #0
 8019204:	d062      	beq.n	80192cc <__kernel_rem_pio2+0x2a4>
 8019206:	3c01      	subs	r4, #1
 8019208:	ab06      	add	r3, sp, #24
 801920a:	3d18      	subs	r5, #24
 801920c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d0f8      	beq.n	8019206 <__kernel_rem_pio2+0x1de>
 8019214:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8019218:	4628      	mov	r0, r5
 801921a:	f000 f981 	bl	8019520 <scalbn>
 801921e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8019318 <__kernel_rem_pio2+0x2f0>
 8019222:	1c62      	adds	r2, r4, #1
 8019224:	a96a      	add	r1, sp, #424	@ 0x1a8
 8019226:	00d3      	lsls	r3, r2, #3
 8019228:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801922c:	4622      	mov	r2, r4
 801922e:	2a00      	cmp	r2, #0
 8019230:	f280 80a8 	bge.w	8019384 <__kernel_rem_pio2+0x35c>
 8019234:	4622      	mov	r2, r4
 8019236:	2a00      	cmp	r2, #0
 8019238:	f2c0 80c6 	blt.w	80193c8 <__kernel_rem_pio2+0x3a0>
 801923c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801923e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8019242:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8019310 <__kernel_rem_pio2+0x2e8>
 8019246:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801932c <__kernel_rem_pio2+0x304>
 801924a:	2000      	movs	r0, #0
 801924c:	1aa1      	subs	r1, r4, r2
 801924e:	e0b0      	b.n	80193b2 <__kernel_rem_pio2+0x38a>
 8019250:	2602      	movs	r6, #2
 8019252:	e78f      	b.n	8019174 <__kernel_rem_pio2+0x14c>
 8019254:	f853 2b04 	ldr.w	r2, [r3], #4
 8019258:	b948      	cbnz	r0, 801926e <__kernel_rem_pio2+0x246>
 801925a:	b122      	cbz	r2, 8019266 <__kernel_rem_pio2+0x23e>
 801925c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8019260:	f843 2c04 	str.w	r2, [r3, #-4]
 8019264:	2201      	movs	r2, #1
 8019266:	f10c 0c01 	add.w	ip, ip, #1
 801926a:	4610      	mov	r0, r2
 801926c:	e789      	b.n	8019182 <__kernel_rem_pio2+0x15a>
 801926e:	ebae 0202 	sub.w	r2, lr, r2
 8019272:	e7f5      	b.n	8019260 <__kernel_rem_pio2+0x238>
 8019274:	1e62      	subs	r2, r4, #1
 8019276:	ab06      	add	r3, sp, #24
 8019278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801927c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019280:	a906      	add	r1, sp, #24
 8019282:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8019286:	e784      	b.n	8019192 <__kernel_rem_pio2+0x16a>
 8019288:	1e62      	subs	r2, r4, #1
 801928a:	ab06      	add	r3, sp, #24
 801928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019290:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019294:	e7f4      	b.n	8019280 <__kernel_rem_pio2+0x258>
 8019296:	ab06      	add	r3, sp, #24
 8019298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801929c:	3a01      	subs	r2, #1
 801929e:	4318      	orrs	r0, r3
 80192a0:	e7ad      	b.n	80191fe <__kernel_rem_pio2+0x1d6>
 80192a2:	3301      	adds	r3, #1
 80192a4:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80192a8:	2800      	cmp	r0, #0
 80192aa:	d0fa      	beq.n	80192a2 <__kernel_rem_pio2+0x27a>
 80192ac:	9a04      	ldr	r2, [sp, #16]
 80192ae:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80192b2:	446a      	add	r2, sp
 80192b4:	eb04 000b 	add.w	r0, r4, fp
 80192b8:	a91a      	add	r1, sp, #104	@ 0x68
 80192ba:	1c66      	adds	r6, r4, #1
 80192bc:	3a98      	subs	r2, #152	@ 0x98
 80192be:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80192c2:	4423      	add	r3, r4
 80192c4:	42b3      	cmp	r3, r6
 80192c6:	da04      	bge.n	80192d2 <__kernel_rem_pio2+0x2aa>
 80192c8:	461c      	mov	r4, r3
 80192ca:	e713      	b.n	80190f4 <__kernel_rem_pio2+0xcc>
 80192cc:	9a03      	ldr	r2, [sp, #12]
 80192ce:	2301      	movs	r3, #1
 80192d0:	e7e8      	b.n	80192a4 <__kernel_rem_pio2+0x27c>
 80192d2:	9902      	ldr	r1, [sp, #8]
 80192d4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80192d8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80192dc:	9104      	str	r1, [sp, #16]
 80192de:	ee07 1a90 	vmov	s15, r1
 80192e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80192e6:	2400      	movs	r4, #0
 80192e8:	eca0 7b02 	vstmia	r0!, {d7}
 80192ec:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019310 <__kernel_rem_pio2+0x2e8>
 80192f0:	4686      	mov	lr, r0
 80192f2:	4554      	cmp	r4, sl
 80192f4:	dd03      	ble.n	80192fe <__kernel_rem_pio2+0x2d6>
 80192f6:	eca2 7b02 	vstmia	r2!, {d7}
 80192fa:	3601      	adds	r6, #1
 80192fc:	e7e2      	b.n	80192c4 <__kernel_rem_pio2+0x29c>
 80192fe:	ecbc 5b02 	vldmia	ip!, {d5}
 8019302:	ed3e 6b02 	vldmdb	lr!, {d6}
 8019306:	3401      	adds	r4, #1
 8019308:	eea5 7b06 	vfma.f64	d7, d5, d6
 801930c:	e7f1      	b.n	80192f2 <__kernel_rem_pio2+0x2ca>
 801930e:	bf00      	nop
	...
 801931c:	3e700000 	.word	0x3e700000
 8019320:	00000000 	.word	0x00000000
 8019324:	41700000 	.word	0x41700000
 8019328:	08019ff0 	.word	0x08019ff0
 801932c:	08019fb0 	.word	0x08019fb0
 8019330:	4268      	negs	r0, r5
 8019332:	eeb0 0b48 	vmov.f64	d0, d8
 8019336:	f000 f8f3 	bl	8019520 <scalbn>
 801933a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8019508 <__kernel_rem_pio2+0x4e0>
 801933e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8019342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019346:	db17      	blt.n	8019378 <__kernel_rem_pio2+0x350>
 8019348:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8019510 <__kernel_rem_pio2+0x4e8>
 801934c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019350:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8019354:	aa06      	add	r2, sp, #24
 8019356:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801935a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801935e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8019362:	3518      	adds	r5, #24
 8019364:	ee10 3a10 	vmov	r3, s0
 8019368:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801936c:	ee17 3a10 	vmov	r3, s14
 8019370:	3401      	adds	r4, #1
 8019372:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019376:	e74d      	b.n	8019214 <__kernel_rem_pio2+0x1ec>
 8019378:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801937c:	aa06      	add	r2, sp, #24
 801937e:	ee10 3a10 	vmov	r3, s0
 8019382:	e7f6      	b.n	8019372 <__kernel_rem_pio2+0x34a>
 8019384:	a806      	add	r0, sp, #24
 8019386:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801938a:	9001      	str	r0, [sp, #4]
 801938c:	ee07 0a90 	vmov	s15, r0
 8019390:	3a01      	subs	r2, #1
 8019392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019396:	ee27 7b00 	vmul.f64	d7, d7, d0
 801939a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801939e:	ed21 7b02 	vstmdb	r1!, {d7}
 80193a2:	e744      	b.n	801922e <__kernel_rem_pio2+0x206>
 80193a4:	ecbc 5b02 	vldmia	ip!, {d5}
 80193a8:	ecb5 6b02 	vldmia	r5!, {d6}
 80193ac:	3001      	adds	r0, #1
 80193ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80193b2:	4548      	cmp	r0, r9
 80193b4:	dc01      	bgt.n	80193ba <__kernel_rem_pio2+0x392>
 80193b6:	4281      	cmp	r1, r0
 80193b8:	daf4      	bge.n	80193a4 <__kernel_rem_pio2+0x37c>
 80193ba:	a842      	add	r0, sp, #264	@ 0x108
 80193bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80193c0:	ed81 7b00 	vstr	d7, [r1]
 80193c4:	3a01      	subs	r2, #1
 80193c6:	e736      	b.n	8019236 <__kernel_rem_pio2+0x20e>
 80193c8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80193ca:	2a02      	cmp	r2, #2
 80193cc:	dc0a      	bgt.n	80193e4 <__kernel_rem_pio2+0x3bc>
 80193ce:	2a00      	cmp	r2, #0
 80193d0:	dc2d      	bgt.n	801942e <__kernel_rem_pio2+0x406>
 80193d2:	d046      	beq.n	8019462 <__kernel_rem_pio2+0x43a>
 80193d4:	f008 0007 	and.w	r0, r8, #7
 80193d8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80193dc:	ecbd 8b06 	vpop	{d8-d10}
 80193e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193e4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80193e6:	2a03      	cmp	r2, #3
 80193e8:	d1f4      	bne.n	80193d4 <__kernel_rem_pio2+0x3ac>
 80193ea:	a942      	add	r1, sp, #264	@ 0x108
 80193ec:	f1a3 0208 	sub.w	r2, r3, #8
 80193f0:	440a      	add	r2, r1
 80193f2:	4611      	mov	r1, r2
 80193f4:	4620      	mov	r0, r4
 80193f6:	2800      	cmp	r0, #0
 80193f8:	f1a1 0108 	sub.w	r1, r1, #8
 80193fc:	dc52      	bgt.n	80194a4 <__kernel_rem_pio2+0x47c>
 80193fe:	4621      	mov	r1, r4
 8019400:	2901      	cmp	r1, #1
 8019402:	f1a2 0208 	sub.w	r2, r2, #8
 8019406:	dc5d      	bgt.n	80194c4 <__kernel_rem_pio2+0x49c>
 8019408:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8019518 <__kernel_rem_pio2+0x4f0>
 801940c:	aa42      	add	r2, sp, #264	@ 0x108
 801940e:	4413      	add	r3, r2
 8019410:	2c01      	cmp	r4, #1
 8019412:	dc67      	bgt.n	80194e4 <__kernel_rem_pio2+0x4bc>
 8019414:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8019418:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801941c:	2e00      	cmp	r6, #0
 801941e:	d167      	bne.n	80194f0 <__kernel_rem_pio2+0x4c8>
 8019420:	ed87 5b00 	vstr	d5, [r7]
 8019424:	ed87 6b02 	vstr	d6, [r7, #8]
 8019428:	ed87 7b04 	vstr	d7, [r7, #16]
 801942c:	e7d2      	b.n	80193d4 <__kernel_rem_pio2+0x3ac>
 801942e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8019518 <__kernel_rem_pio2+0x4f0>
 8019432:	aa42      	add	r2, sp, #264	@ 0x108
 8019434:	4413      	add	r3, r2
 8019436:	4622      	mov	r2, r4
 8019438:	2a00      	cmp	r2, #0
 801943a:	da24      	bge.n	8019486 <__kernel_rem_pio2+0x45e>
 801943c:	b34e      	cbz	r6, 8019492 <__kernel_rem_pio2+0x46a>
 801943e:	eeb1 7b46 	vneg.f64	d7, d6
 8019442:	ed87 7b00 	vstr	d7, [r7]
 8019446:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801944a:	aa44      	add	r2, sp, #272	@ 0x110
 801944c:	2301      	movs	r3, #1
 801944e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019452:	429c      	cmp	r4, r3
 8019454:	da20      	bge.n	8019498 <__kernel_rem_pio2+0x470>
 8019456:	b10e      	cbz	r6, 801945c <__kernel_rem_pio2+0x434>
 8019458:	eeb1 7b47 	vneg.f64	d7, d7
 801945c:	ed87 7b02 	vstr	d7, [r7, #8]
 8019460:	e7b8      	b.n	80193d4 <__kernel_rem_pio2+0x3ac>
 8019462:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8019518 <__kernel_rem_pio2+0x4f0>
 8019466:	aa42      	add	r2, sp, #264	@ 0x108
 8019468:	4413      	add	r3, r2
 801946a:	2c00      	cmp	r4, #0
 801946c:	da05      	bge.n	801947a <__kernel_rem_pio2+0x452>
 801946e:	b10e      	cbz	r6, 8019474 <__kernel_rem_pio2+0x44c>
 8019470:	eeb1 7b47 	vneg.f64	d7, d7
 8019474:	ed87 7b00 	vstr	d7, [r7]
 8019478:	e7ac      	b.n	80193d4 <__kernel_rem_pio2+0x3ac>
 801947a:	ed33 6b02 	vldmdb	r3!, {d6}
 801947e:	3c01      	subs	r4, #1
 8019480:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019484:	e7f1      	b.n	801946a <__kernel_rem_pio2+0x442>
 8019486:	ed33 7b02 	vldmdb	r3!, {d7}
 801948a:	3a01      	subs	r2, #1
 801948c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8019490:	e7d2      	b.n	8019438 <__kernel_rem_pio2+0x410>
 8019492:	eeb0 7b46 	vmov.f64	d7, d6
 8019496:	e7d4      	b.n	8019442 <__kernel_rem_pio2+0x41a>
 8019498:	ecb2 6b02 	vldmia	r2!, {d6}
 801949c:	3301      	adds	r3, #1
 801949e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80194a2:	e7d6      	b.n	8019452 <__kernel_rem_pio2+0x42a>
 80194a4:	ed91 7b00 	vldr	d7, [r1]
 80194a8:	ed91 5b02 	vldr	d5, [r1, #8]
 80194ac:	3801      	subs	r0, #1
 80194ae:	ee37 6b05 	vadd.f64	d6, d7, d5
 80194b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80194b6:	ed81 6b00 	vstr	d6, [r1]
 80194ba:	ee37 7b05 	vadd.f64	d7, d7, d5
 80194be:	ed81 7b02 	vstr	d7, [r1, #8]
 80194c2:	e798      	b.n	80193f6 <__kernel_rem_pio2+0x3ce>
 80194c4:	ed92 7b00 	vldr	d7, [r2]
 80194c8:	ed92 5b02 	vldr	d5, [r2, #8]
 80194cc:	3901      	subs	r1, #1
 80194ce:	ee37 6b05 	vadd.f64	d6, d7, d5
 80194d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80194d6:	ed82 6b00 	vstr	d6, [r2]
 80194da:	ee37 7b05 	vadd.f64	d7, d7, d5
 80194de:	ed82 7b02 	vstr	d7, [r2, #8]
 80194e2:	e78d      	b.n	8019400 <__kernel_rem_pio2+0x3d8>
 80194e4:	ed33 6b02 	vldmdb	r3!, {d6}
 80194e8:	3c01      	subs	r4, #1
 80194ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80194ee:	e78f      	b.n	8019410 <__kernel_rem_pio2+0x3e8>
 80194f0:	eeb1 5b45 	vneg.f64	d5, d5
 80194f4:	eeb1 6b46 	vneg.f64	d6, d6
 80194f8:	ed87 5b00 	vstr	d5, [r7]
 80194fc:	eeb1 7b47 	vneg.f64	d7, d7
 8019500:	ed87 6b02 	vstr	d6, [r7, #8]
 8019504:	e790      	b.n	8019428 <__kernel_rem_pio2+0x400>
 8019506:	bf00      	nop
 8019508:	00000000 	.word	0x00000000
 801950c:	41700000 	.word	0x41700000
 8019510:	00000000 	.word	0x00000000
 8019514:	3e700000 	.word	0x3e700000
	...

08019520 <scalbn>:
 8019520:	ee10 1a90 	vmov	r1, s1
 8019524:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019528:	b98b      	cbnz	r3, 801954e <scalbn+0x2e>
 801952a:	ee10 3a10 	vmov	r3, s0
 801952e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8019532:	4319      	orrs	r1, r3
 8019534:	d00a      	beq.n	801954c <scalbn+0x2c>
 8019536:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80195e8 <scalbn+0xc8>
 801953a:	4b37      	ldr	r3, [pc, #220]	@ (8019618 <scalbn+0xf8>)
 801953c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019540:	4298      	cmp	r0, r3
 8019542:	da0b      	bge.n	801955c <scalbn+0x3c>
 8019544:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80195f0 <scalbn+0xd0>
 8019548:	ee20 0b07 	vmul.f64	d0, d0, d7
 801954c:	4770      	bx	lr
 801954e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8019552:	4293      	cmp	r3, r2
 8019554:	d107      	bne.n	8019566 <scalbn+0x46>
 8019556:	ee30 0b00 	vadd.f64	d0, d0, d0
 801955a:	4770      	bx	lr
 801955c:	ee10 1a90 	vmov	r1, s1
 8019560:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019564:	3b36      	subs	r3, #54	@ 0x36
 8019566:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801956a:	4290      	cmp	r0, r2
 801956c:	dd0d      	ble.n	801958a <scalbn+0x6a>
 801956e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80195f8 <scalbn+0xd8>
 8019572:	ee10 3a90 	vmov	r3, s1
 8019576:	eeb0 6b47 	vmov.f64	d6, d7
 801957a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8019600 <scalbn+0xe0>
 801957e:	2b00      	cmp	r3, #0
 8019580:	fe27 7b05 	vselge.f64	d7, d7, d5
 8019584:	ee27 0b06 	vmul.f64	d0, d7, d6
 8019588:	4770      	bx	lr
 801958a:	4418      	add	r0, r3
 801958c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8019590:	4298      	cmp	r0, r3
 8019592:	dcec      	bgt.n	801956e <scalbn+0x4e>
 8019594:	2800      	cmp	r0, #0
 8019596:	dd0a      	ble.n	80195ae <scalbn+0x8e>
 8019598:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801959c:	ec53 2b10 	vmov	r2, r3, d0
 80195a0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80195a4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80195a8:	ec43 2b10 	vmov	d0, r2, r3
 80195ac:	4770      	bx	lr
 80195ae:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80195b2:	da09      	bge.n	80195c8 <scalbn+0xa8>
 80195b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80195f0 <scalbn+0xd0>
 80195b8:	ee10 3a90 	vmov	r3, s1
 80195bc:	eeb0 6b47 	vmov.f64	d6, d7
 80195c0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8019608 <scalbn+0xe8>
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	e7db      	b.n	8019580 <scalbn+0x60>
 80195c8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80195cc:	ec53 2b10 	vmov	r2, r3, d0
 80195d0:	3036      	adds	r0, #54	@ 0x36
 80195d2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80195d6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80195da:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8019610 <scalbn+0xf0>
 80195de:	ec43 2b10 	vmov	d0, r2, r3
 80195e2:	e7b1      	b.n	8019548 <scalbn+0x28>
 80195e4:	f3af 8000 	nop.w
 80195e8:	00000000 	.word	0x00000000
 80195ec:	43500000 	.word	0x43500000
 80195f0:	c2f8f359 	.word	0xc2f8f359
 80195f4:	01a56e1f 	.word	0x01a56e1f
 80195f8:	8800759c 	.word	0x8800759c
 80195fc:	7e37e43c 	.word	0x7e37e43c
 8019600:	8800759c 	.word	0x8800759c
 8019604:	fe37e43c 	.word	0xfe37e43c
 8019608:	c2f8f359 	.word	0xc2f8f359
 801960c:	81a56e1f 	.word	0x81a56e1f
 8019610:	00000000 	.word	0x00000000
 8019614:	3c900000 	.word	0x3c900000
 8019618:	ffff3cb0 	.word	0xffff3cb0
 801961c:	00000000 	.word	0x00000000

08019620 <floor>:
 8019620:	ee10 3a90 	vmov	r3, s1
 8019624:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8019628:	ee10 2a10 	vmov	r2, s0
 801962c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8019630:	2913      	cmp	r1, #19
 8019632:	b530      	push	{r4, r5, lr}
 8019634:	4615      	mov	r5, r2
 8019636:	dc33      	bgt.n	80196a0 <floor+0x80>
 8019638:	2900      	cmp	r1, #0
 801963a:	da18      	bge.n	801966e <floor+0x4e>
 801963c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8019700 <floor+0xe0>
 8019640:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019644:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801964c:	dd0a      	ble.n	8019664 <floor+0x44>
 801964e:	2b00      	cmp	r3, #0
 8019650:	da50      	bge.n	80196f4 <floor+0xd4>
 8019652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019656:	4313      	orrs	r3, r2
 8019658:	2200      	movs	r2, #0
 801965a:	4293      	cmp	r3, r2
 801965c:	4b2a      	ldr	r3, [pc, #168]	@ (8019708 <floor+0xe8>)
 801965e:	bf08      	it	eq
 8019660:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019664:	4619      	mov	r1, r3
 8019666:	4610      	mov	r0, r2
 8019668:	ec41 0b10 	vmov	d0, r0, r1
 801966c:	e01f      	b.n	80196ae <floor+0x8e>
 801966e:	4827      	ldr	r0, [pc, #156]	@ (801970c <floor+0xec>)
 8019670:	4108      	asrs	r0, r1
 8019672:	ea03 0400 	and.w	r4, r3, r0
 8019676:	4314      	orrs	r4, r2
 8019678:	d019      	beq.n	80196ae <floor+0x8e>
 801967a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8019700 <floor+0xe0>
 801967e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019682:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968a:	ddeb      	ble.n	8019664 <floor+0x44>
 801968c:	2b00      	cmp	r3, #0
 801968e:	bfbe      	ittt	lt
 8019690:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8019694:	410a      	asrlt	r2, r1
 8019696:	189b      	addlt	r3, r3, r2
 8019698:	ea23 0300 	bic.w	r3, r3, r0
 801969c:	2200      	movs	r2, #0
 801969e:	e7e1      	b.n	8019664 <floor+0x44>
 80196a0:	2933      	cmp	r1, #51	@ 0x33
 80196a2:	dd05      	ble.n	80196b0 <floor+0x90>
 80196a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80196a8:	d101      	bne.n	80196ae <floor+0x8e>
 80196aa:	ee30 0b00 	vadd.f64	d0, d0, d0
 80196ae:	bd30      	pop	{r4, r5, pc}
 80196b0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80196b4:	f04f 30ff 	mov.w	r0, #4294967295
 80196b8:	40e0      	lsrs	r0, r4
 80196ba:	4210      	tst	r0, r2
 80196bc:	d0f7      	beq.n	80196ae <floor+0x8e>
 80196be:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019700 <floor+0xe0>
 80196c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80196c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80196ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ce:	ddc9      	ble.n	8019664 <floor+0x44>
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	da02      	bge.n	80196da <floor+0xba>
 80196d4:	2914      	cmp	r1, #20
 80196d6:	d103      	bne.n	80196e0 <floor+0xc0>
 80196d8:	3301      	adds	r3, #1
 80196da:	ea22 0200 	bic.w	r2, r2, r0
 80196de:	e7c1      	b.n	8019664 <floor+0x44>
 80196e0:	2401      	movs	r4, #1
 80196e2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80196e6:	fa04 f101 	lsl.w	r1, r4, r1
 80196ea:	440a      	add	r2, r1
 80196ec:	42aa      	cmp	r2, r5
 80196ee:	bf38      	it	cc
 80196f0:	191b      	addcc	r3, r3, r4
 80196f2:	e7f2      	b.n	80196da <floor+0xba>
 80196f4:	2200      	movs	r2, #0
 80196f6:	4613      	mov	r3, r2
 80196f8:	e7b4      	b.n	8019664 <floor+0x44>
 80196fa:	bf00      	nop
 80196fc:	f3af 8000 	nop.w
 8019700:	8800759c 	.word	0x8800759c
 8019704:	7e37e43c 	.word	0x7e37e43c
 8019708:	bff00000 	.word	0xbff00000
 801970c:	000fffff 	.word	0x000fffff

08019710 <_init>:
 8019710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019712:	bf00      	nop
 8019714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019716:	bc08      	pop	{r3}
 8019718:	469e      	mov	lr, r3
 801971a:	4770      	bx	lr

0801971c <_fini>:
 801971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801971e:	bf00      	nop
 8019720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019722:	bc08      	pop	{r3}
 8019724:	469e      	mov	lr, r3
 8019726:	4770      	bx	lr
