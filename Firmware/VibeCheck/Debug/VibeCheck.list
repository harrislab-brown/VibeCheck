
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dd4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080170a8  080170a8  000180a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017728  08017728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017730  08017730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017734  08017734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08017738  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000048ec  240002cc  08017a04  000192cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004bb8  08017a04  00019bb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000305d2  00000000  00000000  000192fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e97  00000000  00000000  000498cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024c0  00000000  00000000  0004f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c9b  00000000  00000000  00051c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a0a8  00000000  00000000  000538c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037e77  00000000  00000000  0005d96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170f99  00000000  00000000  000957e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020677b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b1b8  00000000  00000000  002067c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00211978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801708c 	.word	0x0801708c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801708c 	.word	0x0801708c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 fc88 	bl	80033d6 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002cbc 	.word	0x24002cbc

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad8:	f000 fe98 	bl	800180c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f002 fe36 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f82e 	bl	8000b40 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f000 f89c 	bl	8000c20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fd86 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fd64 	bl	80015b8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000af0:	f000 f9ac 	bl	8000e4c <MX_DAC1_Init>
  MX_I2C2_Init();
 8000af4:	f000 f9dc 	bl	8000eb0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000af8:	f000 fa1a 	bl	8000f30 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000afc:	f000 fa6e 	bl	8000fdc <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b00:	f000 fac2 	bl	8001088 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b04:	f000 fc46 	bl	8001394 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b08:	f000 fbb6 	bl	8001278 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b0c:	f000 fd08 	bl	8001520 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b10:	f000 fb10 	bl	8001134 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b14:	f000 fb62 	bl	80011dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b18:	f000 f8b2 	bl	8000c80 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b1c:	f000 f92c 	bl	8000d78 <MX_ADC2_Init>
  MX_UART7_Init();
 8000b20:	f000 fcb0 	bl	8001484 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b24:	f011 fcb2 	bl	801248c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3);
 8000b28:	4903      	ldr	r1, [pc, #12]	@ (8000b38 <main+0x64>)
 8000b2a:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <main+0x68>)
 8000b2c:	f001 fc4c 	bl	80023c8 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <main+0x68>)
 8000b32:	f001 fcd3 	bl	80024dc <VibeCheck_Loop>
 8000b36:	e7fb      	b.n	8000b30 <main+0x5c>
 8000b38:	240006d8 	.word	0x240006d8
 8000b3c:	24000898 	.word	0x24000898

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	224c      	movs	r2, #76	@ 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f013 fcd3 	bl	80144fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f013 fccd 	bl	80144fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f007 ff5b 	bl	8008a1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b82:	bf00      	nop
 8000b84:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <SystemClock_Config+0xdc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b90:	d1f8      	bne.n	8000b84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b92:	2321      	movs	r3, #33	@ 0x21
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bac:	2328      	movs	r3, #40	@ 0x28
 8000bae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 ff6f 	bl	8008ab0 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd8:	f000 fe44 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	233f      	movs	r3, #63	@ 0x3f
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2303      	movs	r3, #3
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be8:	2308      	movs	r3, #8
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bec:	2340      	movs	r3, #64	@ 0x40
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bf0:	2340      	movs	r3, #64	@ 0x40
 8000bf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2103      	movs	r1, #3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f008 fb2e 	bl	8009264 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c0e:	f000 fe29 	bl	8001864 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3770      	adds	r7, #112	@ 0x70
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024800 	.word	0x58024800

08000c20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0ae      	sub	sp, #184	@ 0xb8
 8000c24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	22b8      	movs	r2, #184	@ 0xb8
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f013 fc64 	bl	80144fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c42:	2310      	movs	r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c52:	23c0      	movs	r3, #192	@ 0xc0
 8000c54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f008 fe88 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c72:	f000 fdf7 	bl	8001864 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	37b8      	adds	r7, #184	@ 0xb8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2224      	movs	r2, #36	@ 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f013 fc2e 	bl	80144fa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b32      	ldr	r3, [pc, #200]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ca0:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <MX_ADC1_Init+0xec>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ca4:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ca6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d06:	f003 f81d 	bl	8003d44 <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d10:	f000 fda8 	bl	8001864 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d20:	f004 f85c 	bl	8004ddc <HAL_ADCEx_MultiModeConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d2a:	f000 fd9b 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_ADC1_Init+0xf0>)
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d32:	2306      	movs	r3, #6
 8000d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_ADC1_Init+0xf4>)
 8000d3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_ADC1_Init+0xe8>)
 8000d52:	f003 f9ff 	bl	8004154 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d5c:	f000 fd82 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240002e8 	.word	0x240002e8
 8000d6c:	40022000 	.word	0x40022000
 8000d70:	10c00010 	.word	0x10c00010
 8000d74:	47ff0000 	.word	0x47ff0000

08000d78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2224      	movs	r2, #36	@ 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f013 fbb8 	bl	80144fa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <MX_ADC2_Init+0xc8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d92:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d98:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000df2:	f002 ffa7 	bl	8003d44 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dfc:	f000 fd32 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_ADC2_Init+0xcc>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_ADC2_Init+0xd0>)
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000e24:	f003 f996 	bl	8004154 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e2e:	f000 fd19 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000358 	.word	0x24000358
 8000e40:	40022100 	.word	0x40022100
 8000e44:	0c900008 	.word	0x0c900008
 8000e48:	47ff0000 	.word	0x47ff0000

08000e4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2224      	movs	r2, #36	@ 0x24
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f013 fb4e 	bl	80144fa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <MX_DAC1_Init+0x60>)
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e64:	4810      	ldr	r0, [pc, #64]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e66:	f004 fa23 	bl	80052b0 <HAL_DAC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e70:	f000 fcf8 	bl	8001864 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e90:	f004 fa30 	bl	80052f4 <HAL_DAC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 fce3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	@ 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	240003c8 	.word	0x240003c8
 8000eac:	40007400 	.word	0x40007400

08000eb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <MX_I2C2_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <MX_I2C2_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eec:	f006 f9c4 	bl	8007278 <HAL_I2C_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ef6:	f000 fcb5 	bl	8001864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000efe:	f006 fa57 	bl	80073b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f000 fcac 	bl	8001864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000f10:	f006 fa99 	bl	8007446 <HAL_I2CEx_ConfigDigitalFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 fca3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000454 	.word	0x24000454
 8000f28:	40005800 	.word	0x40005800
 8000f2c:	307075b1 	.word	0x307075b1

08000f30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_SPI2_Init+0xa4>)
 8000fc0:	f00b f8c2 	bl	800c148 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000fca:	f000 fc4b 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240004a8 	.word	0x240004a8
 8000fd8:	40003800 	.word	0x40003800

08000fdc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000fe2:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <MX_SPI3_Init+0xa8>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000fe8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001008:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800100c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI3_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_SPI3_Init+0xa4>)
 800106c:	f00b f86c 	bl	800c148 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001076:	f000 fbf5 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000530 	.word	0x24000530
 8001084:	40003c00 	.word	0x40003c00

08001088 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_SPI4_Init+0xa4>)
 800108e:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <MX_SPI4_Init+0xa8>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001094:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001098:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_SPI4_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_SPI4_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_SPI4_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_SPI4_Init+0xa4>)
 8001118:	f00b f816 	bl	800c148 <HAL_SPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001122:	f000 fb9f 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	240005b8 	.word	0x240005b8
 8001130:	40013400 	.word	0x40013400

08001134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001154:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <MX_TIM1_Init+0xa4>)
 8001156:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800117e:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 8001180:	f00b f921 	bl	800c3c6 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800118a:	f000 fb6b 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 800119c:	f00b fe20 	bl	800cde0 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011a6:	f000 fb5d 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011aa:	2320      	movs	r3, #32
 80011ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_TIM1_Init+0xa0>)
 80011bc:	f00c fb7c 	bl	800d8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011c6:	f000 fb4d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000640 	.word	0x24000640
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_TIM2_Init+0x98>)
 80011fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_TIM2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_TIM2_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001224:	f00b f8cf 	bl	800c3c6 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800122e:	f000 fb19 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001240:	f00b fdce 	bl	800cde0 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800124a:	f000 fb0b 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800124e:	2320      	movs	r3, #32
 8001250:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_TIM2_Init+0x98>)
 800125c:	f00c fb2c 	bl	800d8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001266:	f000 fafd 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2400068c 	.word	0x2400068c

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	@ 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <MX_TIM3_Init+0x114>)
 80012ac:	4a38      	ldr	r2, [pc, #224]	@ (8001390 <MX_TIM3_Init+0x118>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <MX_TIM3_Init+0x114>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <MX_TIM3_Init+0x114>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_TIM3_Init+0x114>)
 80012be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b31      	ldr	r3, [pc, #196]	@ (800138c <MX_TIM3_Init+0x114>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_TIM3_Init+0x114>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d0:	482e      	ldr	r0, [pc, #184]	@ (800138c <MX_TIM3_Init+0x114>)
 80012d2:	f00b f878 	bl	800c3c6 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012dc:	f000 fac2 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4827      	ldr	r0, [pc, #156]	@ (800138c <MX_TIM3_Init+0x114>)
 80012ee:	f00b fd77 	bl	800cde0 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012f8:	f000 fab4 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012fc:	4823      	ldr	r0, [pc, #140]	@ (800138c <MX_TIM3_Init+0x114>)
 80012fe:	f00b f93f 	bl	800c580 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001308:	f000 faac 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	481c      	ldr	r0, [pc, #112]	@ (800138c <MX_TIM3_Init+0x114>)
 800131c:	f00c facc 	bl	800d8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fa9d 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	@ 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <MX_TIM3_Init+0x114>)
 8001342:	f00b fc39 	bl	800cbb8 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800134c:	f000 fa8a 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2204      	movs	r2, #4
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM3_Init+0x114>)
 8001358:	f00b fc2e 	bl	800cbb8 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001362:	f000 fa7f 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2208      	movs	r2, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM3_Init+0x114>)
 800136e:	f00b fc23 	bl	800cbb8 <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001378:	f000 fa74 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM3_Init+0x114>)
 800137e:	f000 fd77 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	@ 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240006d8 	.word	0x240006d8
 8001390:	40000400 	.word	0x40000400

08001394 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	@ 0x38
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001480 <MX_TIM4_Init+0xec>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ec:	4823      	ldr	r0, [pc, #140]	@ (800147c <MX_TIM4_Init+0xe8>)
 80013ee:	f00a ffea 	bl	800c3c6 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013f8:	f000 fa34 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	4619      	mov	r1, r3
 8001408:	481c      	ldr	r0, [pc, #112]	@ (800147c <MX_TIM4_Init+0xe8>)
 800140a:	f00b fce9 	bl	800cde0 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001414:	f000 fa26 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001418:	4818      	ldr	r0, [pc, #96]	@ (800147c <MX_TIM4_Init+0xe8>)
 800141a:	f00b f8b1 	bl	800c580 <HAL_TIM_PWM_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001424:	f000 fa1e 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4811      	ldr	r0, [pc, #68]	@ (800147c <MX_TIM4_Init+0xe8>)
 8001438:	f00c fa3e 	bl	800d8b8 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001442:	f000 fa0f 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	@ 0x60
 8001448:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	@ (800147c <MX_TIM4_Init+0xe8>)
 800145e:	f00b fbab 	bl	800cbb8 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001468:	f000 f9fc 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <MX_TIM4_Init+0xe8>)
 800146e:	f000 fcff 	bl	8001e70 <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24000724 	.word	0x24000724
 8001480:	40000800 	.word	0x40000800

08001484 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001488:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <MX_UART7_Init+0x94>)
 800148a:	4a24      	ldr	r2, [pc, #144]	@ (800151c <MX_UART7_Init+0x98>)
 800148c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_UART7_Init+0x94>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <MX_UART7_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <MX_UART7_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <MX_UART7_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <MX_UART7_Init+0x94>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_UART7_Init+0x94>)
 80014b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014b4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_UART7_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_UART7_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_UART7_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_UART7_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_UART7_Init+0x94>)
 80014d0:	f00c faac 	bl	800da2c <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80014da:	f000 f9c3 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_UART7_Init+0x94>)
 80014e2:	f00d fbb8 	bl	800ec56 <HAL_UARTEx_SetTxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80014ec:	f000 f9ba 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <MX_UART7_Init+0x94>)
 80014f4:	f00d fbed 	bl	800ecd2 <HAL_UARTEx_SetRxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f000 f9b1 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_UART7_Init+0x94>)
 8001504:	f00d fb6e 	bl	800ebe4 <HAL_UARTEx_DisableFifoMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 f9a9 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000770 	.word	0x24000770
 800151c:	40007800 	.word	0x40007800

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <MX_USART1_UART_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800156a:	f00c fa5f 	bl	800da2c <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 f976 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800157c:	f00d fb6b 	bl	800ec56 <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 f96d 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800158e:	f00d fba0 	bl	800ecd2 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 f964 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800159e:	f00d fb21 	bl	800ebe4 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 f95c 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000804 	.word	0x24000804
 80015b4:	40011000 	.word	0x40011000

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	200b      	movs	r0, #11
 80015e2:	f003 fdb8 	bl	8005156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015e6:	200b      	movs	r0, #11
 80015e8:	f003 fdcf 	bl	800518a <HAL_NVIC_EnableIRQ>

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	58024400 	.word	0x58024400

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	@ 0x30
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a77      	ldr	r2, [pc, #476]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	4b71      	ldr	r3, [pc, #452]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	4a70      	ldr	r2, [pc, #448]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163c:	4b6d      	ldr	r3, [pc, #436]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001650:	4a68      	ldr	r2, [pc, #416]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165a:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b62      	ldr	r3, [pc, #392]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a61      	ldr	r2, [pc, #388]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b5e      	ldr	r3, [pc, #376]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168c:	4a59      	ldr	r2, [pc, #356]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001696:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <MX_GPIO_Init+0x1fc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2110      	movs	r1, #16
 80016c6:	484c      	ldr	r0, [pc, #304]	@ (80017f8 <MX_GPIO_Init+0x200>)
 80016c8:	f005 fdbc 	bl	8007244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2104      	movs	r1, #4
 80016d0:	484a      	ldr	r0, [pc, #296]	@ (80017fc <MX_GPIO_Init+0x204>)
 80016d2:	f005 fdb7 	bl	8007244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	210b      	movs	r1, #11
 80016da:	4849      	ldr	r0, [pc, #292]	@ (8001800 <MX_GPIO_Init+0x208>)
 80016dc:	f005 fdb2 	bl	8007244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80016e6:	4847      	ldr	r0, [pc, #284]	@ (8001804 <MX_GPIO_Init+0x20c>)
 80016e8:	f005 fdac 	bl	8007244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	4845      	ldr	r0, [pc, #276]	@ (8001808 <MX_GPIO_Init+0x210>)
 80016f2:	f005 fda7 	bl	8007244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	483b      	ldr	r0, [pc, #236]	@ (80017f8 <MX_GPIO_Init+0x200>)
 800170a:	f005 fbf3 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800170e:	2310      	movs	r3, #16
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <MX_GPIO_Init+0x200>)
 8001726:	f005 fbe5 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800172a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	482f      	ldr	r0, [pc, #188]	@ (80017fc <MX_GPIO_Init+0x204>)
 8001740:	f005 fbd8 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001744:	2304      	movs	r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4828      	ldr	r0, [pc, #160]	@ (80017fc <MX_GPIO_Init+0x204>)
 800175c:	f005 fbca 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001760:	230b      	movs	r3, #11
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4822      	ldr	r0, [pc, #136]	@ (8001800 <MX_GPIO_Init+0x208>)
 8001778:	f005 fbbc 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 800177c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	481b      	ldr	r0, [pc, #108]	@ (8001800 <MX_GPIO_Init+0x208>)
 8001792:	f005 fbaf 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001796:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4815      	ldr	r0, [pc, #84]	@ (8001804 <MX_GPIO_Init+0x20c>)
 80017b0:	f005 fba0 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 80017b4:	f240 3306 	movw	r3, #774	@ 0x306
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	480f      	ldr	r0, [pc, #60]	@ (8001808 <MX_GPIO_Init+0x210>)
 80017ca:	f005 fb93 	bl	8006ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <MX_GPIO_Init+0x210>)
 80017e6:	f005 fb85 	bl	8006ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	@ 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58021000 	.word	0x58021000
 80017fc:	58020800 	.word	0x58020800
 8001800:	58020000 	.word	0x58020000
 8001804:	58020400 	.word	0x58020400
 8001808:	58020c00 	.word	0x58020c00

0800180c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800181e:	f003 fccf 	bl	80051c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001822:	2301      	movs	r3, #1
 8001824:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001826:	2300      	movs	r3, #0
 8001828:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800182e:	231f      	movs	r3, #31
 8001830:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001832:	2387      	movs	r3, #135	@ 0x87
 8001834:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001836:	2300      	movs	r3, #0
 8001838:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800183a:	2300      	movs	r3, #0
 800183c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001842:	2301      	movs	r3, #1
 8001844:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800184e:	463b      	mov	r3, r7
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fced 	bl	8005230 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001856:	2004      	movs	r0, #4
 8001858:	f003 fcca 	bl	80051f0 <HAL_MPU_Enable>

}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_MspInit+0x30>)
 8001878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_MspInit+0x30>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_MspInit+0x30>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	58024400 	.word	0x58024400

080018a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	@ 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <HAL_ADC_MspInit+0x104>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d133      	bne.n	800192e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018c6:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018d0:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10e      	bne.n	80018f6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018de:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fc:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001914:	2330      	movs	r3, #48	@ 0x30
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4823      	ldr	r0, [pc, #140]	@ (80019b4 <HAL_ADC_MspInit+0x110>)
 8001928:	f005 fae4 	bl	8006ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800192c:	e037      	b.n	800199e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <HAL_ADC_MspInit+0x114>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d132      	bne.n	800199e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 8001940:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_ADC_MspInit+0x108>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10e      	bne.n	8001968 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800194c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001950:	4a17      	ldr	r2, [pc, #92]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800195c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_ADC_MspInit+0x10c>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <HAL_ADC_MspInit+0x118>)
 800199a:	f005 faab 	bl	8006ef4 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	3730      	adds	r7, #48	@ 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	24002e7c 	.word	0x24002e7c
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020800 	.word	0x58020800
 80019b8:	40022100 	.word	0x40022100
 80019bc:	58020000 	.word	0x58020000

080019c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a30      	ldr	r2, [pc, #192]	@ (8001aa0 <HAL_DAC_MspInit+0xe0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d159      	bne.n	8001a96 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e8:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019f2:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a06:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_DAC_MspInit+0xe4>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481d      	ldr	r0, [pc, #116]	@ (8001aa8 <HAL_DAC_MspInit+0xe8>)
 8001a32:	f005 fa5f 	bl	8006ef4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a38:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_DAC_MspInit+0xf0>)
 8001a3a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a3e:	2243      	movs	r2, #67	@ 0x43
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a44:	2240      	movs	r2, #64	@ 0x40
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a7c:	f003 fd7c 	bl	8005578 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001a86:	f7ff feed 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	4a06      	ldr	r2, [pc, #24]	@ (8001aac <HAL_DAC_MspInit+0xec>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	@ 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40007400 	.word	0x40007400
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	58020000 	.word	0x58020000
 8001aac:	240003dc 	.word	0x240003dc
 8001ab0:	40020010 	.word	0x40020010

08001ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b8      	sub	sp, #224	@ 0xe0
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	22b8      	movs	r2, #184	@ 0xb8
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f012 fd10 	bl	80144fa <memset>
  if(hi2c->Instance==I2C2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <HAL_I2C_MspInit+0xc8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d146      	bne.n	8001b72 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ae4:	f04f 0208 	mov.w	r2, #8
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 ff3e 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b06:	f7ff fead 	bl	8001864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b10:	4a1b      	ldr	r2, [pc, #108]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HAL_I2C_MspInit+0xd0>)
 8001b50:	f005 f9d0 	bl	8006ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_I2C_MspInit+0xcc>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b72:	bf00      	nop
 8001b74:	37e0      	adds	r7, #224	@ 0xe0
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40005800 	.word	0x40005800
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58020400 	.word	0x58020400

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	22b8      	movs	r2, #184	@ 0xb8
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f012 fca6 	bl	80144fa <memset>
  if(hspi->Instance==SPI2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	@ (8001d7c <HAL_SPI_MspInit+0x1f4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d146      	bne.n	8001c46 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 fed5 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001bd8:	f7ff fe44 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bdc:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be2:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bec:	4b64      	ldr	r3, [pc, #400]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001c18:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c32:	2305      	movs	r3, #5
 8001c34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4851      	ldr	r0, [pc, #324]	@ (8001d84 <HAL_SPI_MspInit+0x1fc>)
 8001c40:	f005 f958 	bl	8006ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c44:	e096      	b.n	8001d74 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001d88 <HAL_SPI_MspInit+0x200>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d146      	bne.n	8001cde <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fe89 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001c70:	f7ff fdf8 	bl	8001864 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c74:	4b42      	ldr	r3, [pc, #264]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c7a:	4a41      	ldr	r2, [pc, #260]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	4a39      	ldr	r2, [pc, #228]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cb0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cca:	2306      	movs	r3, #6
 8001ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482d      	ldr	r0, [pc, #180]	@ (8001d8c <HAL_SPI_MspInit+0x204>)
 8001cd8:	f005 f90c 	bl	8006ef4 <HAL_GPIO_Init>
}
 8001cdc:	e04a      	b.n	8001d74 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_SPI_MspInit+0x208>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d145      	bne.n	8001d74 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f007 fe3c 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001d0a:	f7ff fdab 	bl	8001864 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d32:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_SPI_MspInit+0x1f8>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d4a:	2364      	movs	r3, #100	@ 0x64
 8001d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d62:	2305      	movs	r3, #5
 8001d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <HAL_SPI_MspInit+0x20c>)
 8001d70:	f005 f8c0 	bl	8006ef4 <HAL_GPIO_Init>
}
 8001d74:	bf00      	nop
 8001d76:	37f0      	adds	r7, #240	@ 0xf0
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40003800 	.word	0x40003800
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020400 	.word	0x58020400
 8001d88:	40003c00 	.word	0x40003c00
 8001d8c:	58020800 	.word	0x58020800
 8001d90:	40013400 	.word	0x40013400
 8001d94:	58021000 	.word	0x58021000

08001d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e60 <HAL_TIM_Base_MspInit+0xc8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10f      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dc8:	e045      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd2:	d10f      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dda:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	e030      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_TIM_Base_MspInit+0xd0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d117      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	201d      	movs	r0, #29
 8001e22:	f003 f998 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e26:	201d      	movs	r0, #29
 8001e28:	f003 f9af 	bl	800518a <HAL_NVIC_EnableIRQ>
}
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a0e      	ldr	r2, [pc, #56]	@ (8001e6c <HAL_TIM_Base_MspInit+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	58024400 	.word	0x58024400
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800

08001e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_TIM_MspPostInit+0xb8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d120      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001eb0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4818      	ldr	r0, [pc, #96]	@ (8001f30 <HAL_TIM_MspPostInit+0xc0>)
 8001ece:	f005 f811 	bl	8006ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ed2:	e024      	b.n	8001f1e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_TIM_MspPostInit+0xc4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11f      	bne.n	8001f1e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee4:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_TIM_MspPostInit+0xbc>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <HAL_TIM_MspPostInit+0xc8>)
 8001f1a:	f004 ffeb 	bl	8006ef4 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020800 	.word	0x58020800
 8001f34:	40000800 	.word	0x40000800
 8001f38:	58020c00 	.word	0x58020c00

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	22b8      	movs	r2, #184	@ 0xb8
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f012 facc 	bl	80144fa <memset>
  if(huart->Instance==UART7)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_UART_MspInit+0x160>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d147      	bne.n	8001ffc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001f6c:	f04f 0202 	mov.w	r2, #2
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 fcfa 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f8e:	f7ff fc69 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f98:	4a41      	ldr	r2, [pc, #260]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001fce:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	482b      	ldr	r0, [pc, #172]	@ (80020a4 <HAL_UART_MspInit+0x168>)
 8001ff6:	f004 ff7d 	bl	8006ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ffa:	e04a      	b.n	8002092 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <HAL_UART_MspInit+0x16c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d145      	bne.n	8002092 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002006:	f04f 0201 	mov.w	r2, #1
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f007 fcad 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002028:	f7ff fc1c 	bl	8001864 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800202c:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800202e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_UART_MspInit+0x164>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002068:	23c0      	movs	r3, #192	@ 0xc0
 800206a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002080:	2307      	movs	r3, #7
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <HAL_UART_MspInit+0x170>)
 800208e:	f004 ff31 	bl	8006ef4 <HAL_GPIO_Init>
}
 8002092:	bf00      	nop
 8002094:	37e8      	adds	r7, #232	@ 0xe8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40007800 	.word	0x40007800
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58021000 	.word	0x58021000
 80020a8:	40011000 	.word	0x40011000
 80020ac:	58020400 	.word	0x58020400

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <NMI_Handler+0x4>

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <MemManage_Handler+0x4>

080020c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f001 fb93 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Stream0_IRQHandler+0x10>)
 8002116:	f003 fd87 	bl	8005c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240003dc 	.word	0x240003dc

08002124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <TIM3_IRQHandler+0x10>)
 800212a:	f00a fc3d 	bl	800c9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	240006d8 	.word	0x240006d8

08002138 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <OTG_HS_IRQHandler+0x10>)
 800213e:	f005 fb0f 	bl	8007760 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24004368 	.word	0x24004368

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f012 fa39 	bl	80145dc <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
  while (1) {}    /* Make sure we hang here */
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <_exit+0x12>

08002192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e009      	b.n	80021f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf1      	blt.n	80021de <_write+0x12>
  }
  return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_close>:

int _close(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222c:	605a      	str	r2, [r3, #4]
  return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_isatty>:

int _isatty(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	4a14      	ldr	r2, [pc, #80]	@ (80022c8 <_sbrk+0x5c>)
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <_sbrk+0x60>)
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <_sbrk+0x64>)
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <_sbrk+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800229c:	f012 f99e 	bl	80145dc <__errno>
 80022a0:	4603      	mov	r3, r0
 80022a2:	220c      	movs	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e009      	b.n	80022c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <_sbrk+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	24050000 	.word	0x24050000
 80022cc:	00000400 	.word	0x00000400
 80022d0:	24002e80 	.word	0x24002e80
 80022d4:	24004bb8 	.word	0x24004bb8

080022d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <SystemInit+0xd0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <SystemInit+0xd0>)
 80022e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <SystemInit+0xd4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d807      	bhi.n	8002308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <SystemInit+0xd4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 030f 	bic.w	r3, r3, #15
 8002300:	4a2a      	ldr	r2, [pc, #168]	@ (80023ac <SystemInit+0xd4>)
 8002302:	f043 0307 	orr.w	r3, r3, #7
 8002306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <SystemInit+0xd8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <SystemInit+0xd8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <SystemInit+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <SystemInit+0xd8>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4924      	ldr	r1, [pc, #144]	@ (80023b0 <SystemInit+0xd8>)
 8002320:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <SystemInit+0xdc>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <SystemInit+0xd4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <SystemInit+0xd4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 030f 	bic.w	r3, r3, #15
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <SystemInit+0xd4>)
 800233c:	f043 0307 	orr.w	r3, r3, #7
 8002340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <SystemInit+0xd8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <SystemInit+0xd8>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <SystemInit+0xd8>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <SystemInit+0xd8>)
 8002356:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <SystemInit+0xe0>)
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <SystemInit+0xd8>)
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <SystemInit+0xe4>)
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <SystemInit+0xd8>)
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <SystemInit+0xe8>)
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <SystemInit+0xd8>)
 8002368:	2200      	movs	r2, #0
 800236a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <SystemInit+0xd8>)
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <SystemInit+0xe8>)
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002372:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <SystemInit+0xd8>)
 8002374:	2200      	movs	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002378:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <SystemInit+0xd8>)
 800237a:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <SystemInit+0xe8>)
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800237e:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <SystemInit+0xd8>)
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <SystemInit+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <SystemInit+0xd8>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <SystemInit+0xd8>)
 8002392:	2200      	movs	r2, #0
 8002394:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <SystemInit+0xec>)
 8002398:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800239c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00
 80023ac:	52002000 	.word	0x52002000
 80023b0:	58024400 	.word	0x58024400
 80023b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80023b8:	02020200 	.word	0x02020200
 80023bc:	01ff0000 	.word	0x01ff0000
 80023c0:	01010280 	.word	0x01010280
 80023c4:	52004000 	.word	0x52004000

080023c8 <VibeCheck_Init>:


#include "vibecheck.h"

void VibeCheck_Init(VibeCheck* vc, TIM_HandleTypeDef* htim_strobe)
{
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	b0b9      	sub	sp, #228	@ 0xe4
 80023cc:	af10      	add	r7, sp, #64	@ 0x40
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fab9 	bl	800294c <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80023da:	4a3b      	ldr	r2, [pc, #236]	@ (80024c8 <VibeCheck_Init+0x100>)
 80023dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023e0:	6810      	ldr	r0, [r2, #0]
 80023e2:	6018      	str	r0, [r3, #0]
 80023e4:	8891      	ldrh	r1, [r2, #4]
 80023e6:	7992      	ldrb	r2, [r2, #6]
 80023e8:	8099      	strh	r1, [r3, #4]
 80023ea:	719a      	strb	r2, [r3, #6]
 80023ec:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 80023f0:	2239      	movs	r2, #57	@ 0x39
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f012 f880 	bl	80144fa <memset>
 80023fa:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <VibeCheck_Init+0x104>)
 80023fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002406:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 800240c:	687e      	ldr	r6, [r7, #4]
 800240e:	466d      	mov	r5, sp
 8002410:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8002414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002424:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002428:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	4630      	mov	r0, r6
 8002430:	f000 fbba 	bl	8002ba8 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_InputHandler accel_cmd = {
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <VibeCheck_Init+0x108>)
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	6810      	ldr	r0, [r2, #0]
 800243c:	6018      	str	r0, [r3, #0]
 800243e:	8892      	ldrh	r2, [r2, #4]
 8002440:	809a      	strh	r2, [r3, #4]
 8002442:	f107 0316 	add.w	r3, r7, #22
 8002446:	223a      	movs	r2, #58	@ 0x3a
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f012 f855 	bl	80144fa <memset>
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <VibeCheck_Init+0x10c>)
 8002452:	653b      	str	r3, [r7, #80]	@ 0x50
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	f242 4344 	movw	r3, #9284	@ 0x2444
 800245a:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 800245c:	657b      	str	r3, [r7, #84]	@ 0x54
	};

	VibeCheckShell_OutputHandler accel_sender = {
 800245e:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <VibeCheck_Init+0x110>)
 8002460:	60bb      	str	r3, [r7, #8]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002468:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 800246a:	60fb      	str	r3, [r7, #12]
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 800246c:	687e      	ldr	r6, [r7, #4]
 800246e:	466d      	mov	r5, sp
 8002470:	f107 041c 	add.w	r4, r7, #28
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248e:	4630      	mov	r0, r6
 8002490:	f000 fb8a 	bl	8002ba8 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800249e:	f000 fbb5 	bl	8002c0c <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	f242 4324 	movw	r3, #9252	@ 0x2424
 80024a8:	4413      	add	r3, r2
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fde5 	bl	800307c <VibeCheckStrobe_Init>
	VibeCheckAccel_Init(&vc->accel);
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	f242 4344 	movw	r3, #9284	@ 0x2444
 80024b8:	4413      	add	r3, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f835 	bl	800252a <VibeCheckAccel_Init>
}
 80024c0:	bf00      	nop
 80024c2:	37a4      	adds	r7, #164	@ 0xa4
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c8:	080170a8 	.word	0x080170a8
 80024cc:	08003425 	.word	0x08003425
 80024d0:	080170b0 	.word	0x080170b0
 80024d4:	080027c1 	.word	0x080027c1
 80024d8:	08002879 	.word	0x08002879

080024dc <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	VibeCheckAccel_Update(&vc->accel);
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	f242 4344 	movw	r3, #9284	@ 0x2444
 80024ea:	4413      	add	r3, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f837 	bl	8002560 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fa63 	bl	80029c0 <VibeCheckShell_Update>
 80024fa:	4603      	mov	r3, r0
 80024fc:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f107 020c 	add.w	r2, r7, #12
 8002504:	f107 0110 	add.w	r1, r7, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fbf5 	bl	8002cf8 <VibeCheckShell_GetOutput>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <VibeCheck_Loop+0x46>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	b292      	uxth	r2, r2
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f010 f87d 	bl	801261c <CDC_Transmit_HS>
	}
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8002568:	f001 f976 	bl	8003858 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b0a      	cmp	r3, #10
 800257a:	d95e      	bls.n	800263a <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d055      	beq.n	8002632 <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002590:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002644 <VibeCheckAccel_Update+0xe4>
 8002594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	f014 fcc0 	bl	8016f20 <sinf>
 80025a0:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002644 <VibeCheckAccel_Update+0xe4>
 80025b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002648 <VibeCheckAccel_Update+0xe8>
 80025ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f014 fcad 	bl	8016f20 <sinf>
 80025c6:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002644 <VibeCheckAccel_Update+0xe4>
 80025d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800264c <VibeCheckAccel_Update+0xec>
 80025e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	f014 fc9a 	bl	8016f20 <sinf>
 80025ec:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 80025f0:	ed97 1a02 	vldr	s2, [r7, #8]
 80025f4:	edd7 0a03 	vldr	s1, [r7, #12]
 80025f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	2101      	movs	r1, #1
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f825 	bl	8002650 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 8002606:	ed97 1a03 	vldr	s2, [r7, #12]
 800260a:	edd7 0a04 	vldr	s1, [r7, #16]
 800260e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	2102      	movs	r1, #2
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f81a 	bl	8002650 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 800261c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002620:	edd7 0a02 	vldr	s1, [r7, #8]
 8002624:	ed97 0a03 	vldr	s0, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	2103      	movs	r1, #3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f80f 	bl	8002650 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40c90fd0 	.word	0x40c90fd0
 8002648:	3f860a8b 	.word	0x3f860a8b
 800264c:	40060a8b 	.word	0x40060a8b

08002650 <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6178      	str	r0, [r7, #20]
 8002658:	460b      	mov	r3, r1
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002660:	edc7 0a01 	vstr	s1, [r7, #4]
 8002664:	ed87 1a00 	vstr	s2, [r7]
 8002668:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	7cfa      	ldrb	r2, [r7, #19]
 800267e:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3308      	adds	r3, #8
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	330c      	adds	r3, #12
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3310      	adds	r3, #16
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d104      	bne.n	8002702 <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 8002700:	e00c      	b.n	800271c <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002708:	2b14      	cmp	r3, #20
 800270a:	d107      	bne.n	800271c <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2201      	movs	r2, #1
 8002718:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00f      	beq.n	8002794 <VibeCheckAccel_GetDataReady+0x34>
	{
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800277a:	2b09      	cmp	r3, #9
 800277c:	d805      	bhi.n	800278a <VibeCheckAccel_GetDataReady+0x2a>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e002      	b.n	8002790 <VibeCheckAccel_GetDataReady+0x30>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <VibeCheckAccel_GetDataReady+0x36>
	}
	return 0;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <VibeCheckAccel_ResetDataReady>:

void VibeCheckAccel_ResetDataReady(VibeCheckAccel* accel)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	accel->data_ready = 0;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b094      	sub	sp, #80	@ 0x50
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	4619      	mov	r1, r3
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f000 fb0a 	bl	8002df0 <VibeCheckShell_GetNextString>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03c      	beq.n	800285c <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4920      	ldr	r1, [pc, #128]	@ (8002868 <VibeCheckAccelCMD_Execute+0xa8>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fd91 	bl	8000310 <strcmp>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d133      	bne.n	800285c <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2240      	movs	r2, #64	@ 0x40
 80027fa:	4619      	mov	r1, r3
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	f000 faf7 	bl	8002df0 <VibeCheckShell_GetNextString>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d029      	beq.n	800285c <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4917      	ldr	r1, [pc, #92]	@ (800286c <VibeCheckAccelCMD_Execute+0xac>)
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fd7e 	bl	8000310 <strcmp>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 800281a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800281c:	f7ff ff84 	bl	8002728 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002820:	4913      	ldr	r1, [pc, #76]	@ (8002870 <VibeCheckAccelCMD_Execute+0xb0>)
 8002822:	6838      	ldr	r0, [r7, #0]
 8002824:	f000 fb9e 	bl	8002f64 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002828:	6838      	ldr	r0, [r7, #0]
 800282a:	f000 fc19 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800282e:	2301      	movs	r3, #1
 8002830:	e015      	b.n	800285e <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	490f      	ldr	r1, [pc, #60]	@ (8002874 <VibeCheckAccelCMD_Execute+0xb4>)
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fd69 	bl	8000310 <strcmp>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8002844:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002846:	f7ff ff7d 	bl	8002744 <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 800284a:	4909      	ldr	r1, [pc, #36]	@ (8002870 <VibeCheckAccelCMD_Execute+0xb0>)
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f000 fb89 	bl	8002f64 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f000 fc04 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3750      	adds	r7, #80	@ 0x50
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	080170b8 	.word	0x080170b8
 800286c:	080170c4 	.word	0x080170c4
 8002870:	080170cc 	.word	0x080170cc
 8002874:	080170d0 	.word	0x080170d0

08002878 <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	4619      	mov	r1, r3
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f7ff ff67 	bl	8002760 <VibeCheckAccel_GetDataReady>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d051      	beq.n	800293c <VibeCheckAccelSender_Execute+0xc4>
	{
		VibeCheckAccel_ResetDataReady(accel);
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f7ff ff82 	bl	80027a2 <VibeCheckAccel_ResetDataReady>

		VibeCheckShell_PutOutputString(shell, "data");
 800289e:	492a      	ldr	r1, [pc, #168]	@ (8002948 <VibeCheckAccelSender_Execute+0xd0>)
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f000 fb5f 	bl	8002f64 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f000 fbcc 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 80028ac:	210a      	movs	r1, #10
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f000 fb92 	bl	8002fd8 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 80028b8:	e038      	b.n	800292c <VibeCheckAccelSender_Execute+0xb4>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 80028ba:	6838      	ldr	r0, [r7, #0]
 80028bc:	f000 fbc2 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f000 fb86 	bl	8002fd8 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f000 fbb9 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	6838      	ldr	r0, [r7, #0]
 80028da:	f000 fb7d 	bl	8002fd8 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f000 fbb0 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	f000 fb8a 	bl	8003008 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f000 fba5 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f000 fb7f 	bl	8003008 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	f000 fb9a 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	edd3 7a04 	vldr	s15, [r3, #16]
 8002916:	eeb0 0a67 	vmov.f32	s0, s15
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f000 fb74 	bl	8003008 <VibeCheckShell_PutOutputFloat>

			data++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3314      	adds	r3, #20
 8002924:	60fb      	str	r3, [r7, #12]
			data_written++;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b09      	cmp	r3, #9
 8002930:	d9c3      	bls.n	80028ba <VibeCheckAccelSender_Execute+0x42>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	f000 fb94 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <VibeCheckAccelSender_Execute+0xc6>
	}
	else
	{
		return 0;
 800293c:	2300      	movs	r3, #0
	}
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	080170d8 	.word	0x080170d8

0800294c <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002986:	461a      	mov	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002992:	461a      	mov	r2, r3
 8002994:	2300      	movs	r3, #0
 8002996:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800299e:	461a      	mov	r2, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029ac:	461a      	mov	r2, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b099      	sub	sp, #100	@ 0x64
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 80029c8:	2300      	movs	r3, #0
 80029ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d6:	d302      	bcc.n	80029de <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8092 	beq.w	8002b0e <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 80029f0:	e08d      	b.n	8002b0e <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9f8 	bl	8002df0 <VibeCheckShell_GetNextString>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04d      	beq.n	8002aa2 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0a:	e041      	b.n	8002a90 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8002a0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	3304      	adds	r3, #4
 8002a22:	f107 020c 	add.w	r2, r7, #12
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fc71 	bl	8000310 <strcmp>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11e      	bne.n	8002a72 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	18ca      	adds	r2, r1, r3
 8002a42:	f241 035c 	movw	r3, #4188	@ 0x105c
 8002a46:	4413      	add	r3, r2
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	47a0      	blx	r4
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11f      	bne.n	8002aaa <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8002a70:	e01b      	b.n	8002aaa <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a78:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d102      	bne.n	8002a8a <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a96:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002a9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3b5      	bcc.n	8002a0c <VibeCheckShell_Update+0x4c>
 8002aa0:	e004      	b.n	8002aac <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002aa8:	e000      	b.n	8002aac <VibeCheckShell_Update+0xec>
					break;
 8002aaa:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002ac0:	1e5a      	subs	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae0:	d103      	bne.n	8002aea <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002aea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002aee:	4619      	mov	r1, r3
 8002af0:	482c      	ldr	r0, [pc, #176]	@ (8002ba4 <VibeCheckShell_Update+0x1e4>)
 8002af2:	f011 fd0a 	bl	801450a <strchr>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d100      	bne.n	8002afe <VibeCheckShell_Update+0x13e>
		{
 8002afc:	e7d6      	b.n	8002aac <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8002afe:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af6c 	bne.w	80029f2 <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b1e:	e018      	b.n	8002b52 <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b24:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8002b28:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b30:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4790      	blx	r2
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b4e:	3301      	adds	r3, #1
 8002b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b58:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3de      	bcc.n	8002b20 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6e:	d302      	bcc.n	8002b76 <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8002b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002b80:	f362 0307 	bfi	r3, r2, #0, #8
 8002b84:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8002b88:	f362 230f 	bfi	r3, r2, #8, #8
 8002b8c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002b90:	f362 4317 	bfi	r3, r2, #16, #8
 8002b94:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002b98:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3764      	adds	r7, #100	@ 0x64
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	080170e0 	.word	0x080170e0

08002ba8 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8002ba8:	b084      	sub	sp, #16
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	f107 0014 	add.w	r0, r7, #20
 8002bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bc0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002bc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bc6:	d81a      	bhi.n	8002bfe <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bd2:	1c53      	adds	r3, r2, #1
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002bda:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	18ca      	adds	r2, r1, r3
 8002bea:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	f107 0114 	add.w	r1, r7, #20
 8002bf6:	2248      	movs	r2, #72	@ 0x48
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f011 fd1c 	bl	8014636 <memcpy>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c08:	b004      	add	sp, #16
 8002c0a:	4770      	bx	lr

08002c0c <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c20:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002c24:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c26:	d814      	bhi.n	8002c52 <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c2e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002c3a:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	1d3a      	adds	r2, r7, #4
 8002c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c4e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e035      	b.n	8002cde <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d036      	beq.n	8002ce8 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	7811      	ldrb	r1, [r2, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c9a:	d103      	bne.n	8002ca4 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480e      	ldr	r0, [pc, #56]	@ (8002cf4 <VibeCheckShell_PutInput+0x94>)
 8002cba:	f011 fc26 	bl	801450a <strchr>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3c5      	bcc.n	8002c72 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8002ce6:	e000      	b.n	8002cea <VibeCheckShell_PutInput+0x8a>
			break;
 8002ce8:	bf00      	nop
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	080170e0 	.word	0x080170e0

08002cf8 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d101      	bne.n	8002d1c <VibeCheckShell_GetOutput+0x24>
		return 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e062      	b.n	8002de2 <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d930      	bls.n	8002d92 <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	441a      	add	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	1ad2      	subs	r2, r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d68:	6959      	ldr	r1, [r3, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	1acb      	subs	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d7c:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d8c:	6153      	str	r3, [r2, #20]
		return 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e027      	b.n	8002de2 <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	441a      	add	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd2:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6153      	str	r3, [r2, #20]
		return 1;
 8002de0:	2301      	movs	r3, #1
	}

}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e057      	b.n	8002eb2 <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	4619      	mov	r1, r3
 8002e12:	482c      	ldr	r0, [pc, #176]	@ (8002ec4 <VibeCheckShell_GetNextString+0xd4>)
 8002e14:	f011 fb79 	bl	801450a <strchr>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
				return 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e046      	b.n	8002ebc <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e044      	b.n	8002ebc <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e58:	d103      	bne.n	8002e62 <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	4619      	mov	r1, r3
 8002e66:	4818      	ldr	r0, [pc, #96]	@ (8002ec8 <VibeCheckShell_GetNextString+0xd8>)
 8002e68:	f011 fb4f 	bl	801450a <strchr>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01c      	beq.n	8002eb2 <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
					return 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e01c      	b.n	8002ebc <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	74bb      	strb	r3, [r7, #18]
 8002e86:	7cbb      	ldrb	r3, [r7, #18]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <VibeCheckShell_GetNextString+0xdc>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d103      	bne.n	8002ea0 <VibeCheckShell_GetNextString+0xb0>
 8002e98:	7cbb      	ldrb	r3, [r7, #18]
 8002e9a:	f103 0220 	add.w	r2, r3, #32
 8002e9e:	e000      	b.n	8002ea2 <VibeCheckShell_GetNextString+0xb2>
 8002ea0:	7cba      	ldrb	r2, [r7, #18]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1c59      	adds	r1, r3, #1
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
				i++;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3a3      	bcc.n	8002e02 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	080170e0 	.word	0x080170e0
 8002ec8:	080170e4 	.word	0x080170e4
 8002ecc:	08017218 	.word	0x08017218

08002ed0 <VibeCheckShell_GetNextFloat>:
	return 0;
}


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b099      	sub	sp, #100	@ 0x64
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff84 	bl	8002df0 <VibeCheckShell_GetNextString>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d033      	beq.n	8002f56 <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 8002eee:	4b1c      	ldr	r3, [pc, #112]	@ (8002f60 <VibeCheckShell_GetNextFloat+0x90>)
 8002ef0:	f107 040c 	add.w	r4, r7, #12
 8002ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ef6:	c407      	stmia	r4!, {r0, r1, r2}
 8002ef8:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002efe:	e013      	b.n	8002f28 <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 8002f00:	f107 021c 	add.w	r2, r7, #28
 8002f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f011 faf9 	bl	801450a <strchr>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e01a      	b.n	8002f58 <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 8002f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f24:	3301      	adds	r3, #1
 8002f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fa4f 	bl	80003d0 <strlen>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d3e2      	bcc.n	8002f00 <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00f ffc0 	bl	8012ec4 <atof>
 8002f44:	eeb0 7b40 	vmov.f64	d7, d0
 8002f48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3764      	adds	r7, #100	@ 0x64
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	080170f4 	.word	0x080170f4

08002f64 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	while (*str)
 8002f6e:	e027      	b.n	8002fc0 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	1c53      	adds	r3, r2, #1
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8002f86:	6101      	str	r1, [r0, #16]
 8002f88:	7811      	ldrb	r1, [r2, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	460a      	mov	r2, r1
 8002f90:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fa4:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb2:	d105      	bne.n	8002fc0 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6113      	str	r3, [r2, #16]
	while (*str)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1d3      	bne.n	8002f70 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b092      	sub	sp, #72	@ 0x48
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4906      	ldr	r1, [pc, #24]	@ (8003004 <VibeCheckShell_PutOutputInt+0x2c>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f011 fa22 	bl	8014434 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffb4 	bl	8002f64 <VibeCheckShell_PutOutputString>
}
 8002ffc:	bf00      	nop
 8002ffe:	3748      	adds	r7, #72	@ 0x48
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	08017104 	.word	0x08017104

08003008 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	@ 0x48
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8003014:	edd7 7a00 	vldr	s15, [r7]
 8003018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800301c:	f107 0008 	add.w	r0, r7, #8
 8003020:	ec53 2b17 	vmov	r2, r3, d7
 8003024:	4906      	ldr	r1, [pc, #24]	@ (8003040 <VibeCheckShell_PutOutputFloat+0x38>)
 8003026:	f011 fa05 	bl	8014434 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff97 	bl	8002f64 <VibeCheckShell_PutOutputString>
}
 8003036:	bf00      	nop
 8003038:	3748      	adds	r7, #72	@ 0x48
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	08017108 	.word	0x08017108

08003044 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 800304c:	4903      	ldr	r1, [pc, #12]	@ (800305c <VibeCheckShell_PutOutputSeparator+0x18>)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff88 	bl	8002f64 <VibeCheckShell_PutOutputString>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	0801710c 	.word	0x0801710c

08003060 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <VibeCheckShell_PutOutputDelimiter+0x18>)
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff7a 	bl	8002f64 <VibeCheckShell_PutOutputString>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	080170e0 	.word	0x080170e0

0800307c <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003092:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800309a:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f640 125f 	movw	r2, #2399	@ 0x95f
 80030ae:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80030b6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f84a 	bl	8003154 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f928 	bl	8003320 <VibeCheckStrobe_SetExposure>

}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f009 f9c5 	bl	800c474 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f009 faa7 	bl	800c644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2104      	movs	r1, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f009 faa1 	bl	800c644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2108      	movs	r1, #8
 8003108:	4618      	mov	r0, r3
 800310a:	f009 fa9b 	bl	800c644 <HAL_TIM_PWM_Start>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f009 f9a6 	bl	800c474 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f009 fba4 	bl	800c87c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2104      	movs	r1, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f009 fb9e 	bl	800c87c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2108      	movs	r1, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f009 fb98 	bl	800c87c <HAL_TIM_PWM_Stop>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8003160:	edd7 7a00 	vldr	s15, [r7]
 8003164:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	d502      	bpl.n	8003178 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003172:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003176:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8003178:	edd7 7a00 	vldr	s15, [r7]
 800317c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80031e8 <VibeCheckStrobe_SetFrequency+0x94>
 8003180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	dd01      	ble.n	800318e <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 800318a:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <VibeCheckStrobe_SetFrequency+0x98>)
 800318c:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 800318e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80031f0 <VibeCheckStrobe_SetFrequency+0x9c>
 8003192:	ed97 7a00 	vldr	s14, [r7]
 8003196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800319a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800319e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a6:	ee17 2a90 	vmov	r2, s15
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031c2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80031f0 <VibeCheckStrobe_SetFrequency+0x9c>
 80031c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6912      	ldr	r2, [r2, #16]
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	447a0000 	.word	0x447a0000
 80031ec:	447a0000 	.word	0x447a0000
 80031f0:	47c35000 	.word	0x47c35000

080031f4 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	ee07 3a90 	vmov	s15, r3
}
 8003204:	eeb0 0a67 	vmov.f32	s0, s15
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80032ec <VibeCheckStrobe_SetPhase+0xd8>
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d501      	bpl.n	8003236 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8003232:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <VibeCheckStrobe_SetPhase+0xdc>)
 8003234:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8003236:	edd7 7a00 	vldr	s15, [r7]
 800323a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80032f4 <VibeCheckStrobe_SetPhase+0xe0>
 800323e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	dd01      	ble.n	800324c <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <VibeCheckStrobe_SetPhase+0xe4>)
 800324a:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003252:	ed97 7a00 	vldr	s14, [r7]
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 800325e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003262:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032fc <VibeCheckStrobe_SetPhase+0xe8>
 8003266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d029      	beq.n	80032de <VibeCheckStrobe_SetPhase+0xca>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d125      	bne.n	80032de <VibeCheckStrobe_SetPhase+0xca>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d121      	bne.n	80032de <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	ed93 7a03 	vldr	s14, [r3, #12]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032ba:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80032fc <VibeCheckStrobe_SetPhase+0xe8>
 80032be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	619a      	str	r2, [r3, #24]
	}
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	c3340000 	.word	0xc3340000
 80032f0:	c3340000 	.word	0xc3340000
 80032f4:	43340000 	.word	0x43340000
 80032f8:	43340000 	.word	0x43340000
 80032fc:	43b40000 	.word	0x43b40000

08003300 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	ee07 3a90 	vmov	s15, r3
}
 8003310:	eeb0 0a67 	vmov.f32	s0, s15
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 800332c:	edd7 7a00 	vldr	s15, [r7]
 8003330:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80033ac <VibeCheckStrobe_SetExposure+0x8c>
 8003334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003338:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80033b0 <VibeCheckStrobe_SetExposure+0x90>
 800333c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003344:	ee17 3a90 	vmov	r3, s15
 8003348:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d904      	bls.n	8003362 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	ee07 3a90 	vmov	s15, r3
 8003368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800336c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80033b0 <VibeCheckStrobe_SetExposure+0x90>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80033b4 <VibeCheckStrobe_SetExposure+0x94>
 8003378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	3a83126f 	.word	0x3a83126f
 80033b0:	47c35000 	.word	0x47c35000
 80033b4:	447a0000 	.word	0x447a0000

080033b8 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	ee07 3a90 	vmov	s15, r3
}
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6912      	ldr	r2, [r2, #16]
 80033f0:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6952      	ldr	r2, [r2, #20]
 800340a:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
	}
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <VibeCheckStrobeCMD_Execute>:
>>strobe get exposure

*/

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b094      	sub	sp, #80	@ 0x50
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	2240      	movs	r2, #64	@ 0x40
 8003438:	4619      	mov	r1, r3
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f7ff fcd8 	bl	8002df0 <VibeCheckShell_GetNextString>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d04d      	beq.n	80034e2 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4928      	ldr	r1, [pc, #160]	@ (80034ec <VibeCheckStrobeCMD_Execute+0xc8>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fc ff5f 	bl	8000310 <strcmp>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8003458:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800345a:	f7ff fe3d 	bl	80030d8 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 800345e:	4924      	ldr	r1, [pc, #144]	@ (80034f0 <VibeCheckStrobeCMD_Execute+0xcc>)
 8003460:	6838      	ldr	r0, [r7, #0]
 8003462:	f7ff fd7f 	bl	8002f64 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	f7ff fdfa 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800346c:	2301      	movs	r3, #1
 800346e:	e039      	b.n	80034e4 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	491f      	ldr	r1, [pc, #124]	@ (80034f4 <VibeCheckStrobeCMD_Execute+0xd0>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc ff4a 	bl	8000310 <strcmp>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8003482:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003484:	f7ff fe47 	bl	8003116 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003488:	4919      	ldr	r1, [pc, #100]	@ (80034f0 <VibeCheckStrobeCMD_Execute+0xcc>)
 800348a:	6838      	ldr	r0, [r7, #0]
 800348c:	f7ff fd6a 	bl	8002f64 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003490:	6838      	ldr	r0, [r7, #0]
 8003492:	f7ff fde5 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003496:	2301      	movs	r3, #1
 8003498:	e024      	b.n	80034e4 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4916      	ldr	r1, [pc, #88]	@ (80034f8 <VibeCheckStrobeCMD_Execute+0xd4>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fc ff35 	bl	8000310 <strcmp>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80034b0:	f000 f826 	bl	8003500 <VibeCheckStrobeCMD_Set>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d013      	beq.n	80034e2 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e012      	b.n	80034e4 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	490e      	ldr	r1, [pc, #56]	@ (80034fc <VibeCheckStrobeCMD_Execute+0xd8>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fc ff23 	bl	8000310 <strcmp>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80034d4:	f000 f896 	bl	8003604 <VibeCheckStrobeCMD_Get>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3750      	adds	r7, #80	@ 0x50
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	08017110 	.word	0x08017110
 80034f0:	08017118 	.word	0x08017118
 80034f4:	0801711c 	.word	0x0801711c
 80034f8:	08017124 	.word	0x08017124
 80034fc:	08017128 	.word	0x08017128

08003500 <VibeCheckStrobeCMD_Set>:

uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b096      	sub	sp, #88	@ 0x58
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800350a:	f107 0318 	add.w	r3, r7, #24
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	4619      	mov	r1, r3
 8003512:	6838      	ldr	r0, [r7, #0]
 8003514:	f7ff fc6c 	bl	8002df0 <VibeCheckShell_GetNextString>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d065      	beq.n	80035ea <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 800351e:	f107 0318 	add.w	r3, r7, #24
 8003522:	4934      	ldr	r1, [pc, #208]	@ (80035f4 <VibeCheckStrobeCMD_Set+0xf4>)
 8003524:	4618      	mov	r0, r3
 8003526:	f7fc fef3 	bl	8000310 <strcmp>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d118      	bne.n	8003562 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f7ff fcca 	bl	8002ed0 <VibeCheckShell_GetNextFloat>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d053      	beq.n	80035ea <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8003542:	edd7 7a05 	vldr	s15, [r7, #20]
 8003546:	eeb0 0a67 	vmov.f32	s0, s15
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fe02 	bl	8003154 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003550:	4929      	ldr	r1, [pc, #164]	@ (80035f8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f7ff fd06 	bl	8002f64 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003558:	6838      	ldr	r0, [r7, #0]
 800355a:	f7ff fd81 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800355e:	2301      	movs	r3, #1
 8003560:	e044      	b.n	80035ec <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8003562:	f107 0318 	add.w	r3, r7, #24
 8003566:	4925      	ldr	r1, [pc, #148]	@ (80035fc <VibeCheckStrobeCMD_Set+0xfc>)
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc fed1 	bl	8000310 <strcmp>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4619      	mov	r1, r3
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	f7ff fca8 	bl	8002ed0 <VibeCheckShell_GetNextFloat>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d031      	beq.n	80035ea <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8003586:	edd7 7a04 	vldr	s15, [r7, #16]
 800358a:	eeb0 0a67 	vmov.f32	s0, s15
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fe40 	bl	8003214 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003594:	4918      	ldr	r1, [pc, #96]	@ (80035f8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f7ff fce4 	bl	8002f64 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f7ff fd5f 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 80035a6:	f107 0318 	add.w	r3, r7, #24
 80035aa:	4915      	ldr	r1, [pc, #84]	@ (8003600 <VibeCheckStrobeCMD_Set+0x100>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc feaf 	bl	8000310 <strcmp>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d118      	bne.n	80035ea <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80035b8:	f107 030c 	add.w	r3, r7, #12
 80035bc:	4619      	mov	r1, r3
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	f7ff fc86 	bl	8002ed0 <VibeCheckShell_GetNextFloat>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00f      	beq.n	80035ea <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 80035ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80035ce:	eeb0 0a67 	vmov.f32	s0, s15
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fea4 	bl	8003320 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 80035d8:	4907      	ldr	r1, [pc, #28]	@ (80035f8 <VibeCheckStrobeCMD_Set+0xf8>)
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f7ff fcc2 	bl	8002f64 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80035e0:	6838      	ldr	r0, [r7, #0]
 80035e2:	f7ff fd3d 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3758      	adds	r7, #88	@ 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0801712c 	.word	0x0801712c
 80035f8:	08017118 	.word	0x08017118
 80035fc:	08017138 	.word	0x08017138
 8003600:	08017140 	.word	0x08017140

08003604 <VibeCheckStrobeCMD_Get>:

uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b092      	sub	sp, #72	@ 0x48
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	4619      	mov	r1, r3
 8003616:	6838      	ldr	r0, [r7, #0]
 8003618:	f7ff fbea 	bl	8002df0 <VibeCheckShell_GetNextString>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d05c      	beq.n	80036dc <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4930      	ldr	r1, [pc, #192]	@ (80036e8 <VibeCheckStrobeCMD_Get+0xe4>)
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc fe71 	bl	8000310 <strcmp>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003634:	492d      	ldr	r1, [pc, #180]	@ (80036ec <VibeCheckStrobeCMD_Get+0xe8>)
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f7ff fc94 	bl	8002f64 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f7ff fd01 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fdd6 	bl	80031f4 <VibeCheckStrobe_GetFrequency>
 8003648:	eef0 7a40 	vmov.f32	s15, s0
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f7ff fcd9 	bl	8003008 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f7ff fd02 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800365c:	2301      	movs	r3, #1
 800365e:	e03e      	b.n	80036de <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	4922      	ldr	r1, [pc, #136]	@ (80036f0 <VibeCheckStrobeCMD_Get+0xec>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc fe52 	bl	8000310 <strcmp>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d115      	bne.n	800369e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003672:	491e      	ldr	r1, [pc, #120]	@ (80036ec <VibeCheckStrobeCMD_Get+0xe8>)
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f7ff fc75 	bl	8002f64 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800367a:	6838      	ldr	r0, [r7, #0]
 800367c:	f7ff fce2 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fe3d 	bl	8003300 <VibeCheckStrobe_GetPhase>
 8003686:	eef0 7a40 	vmov.f32	s15, s0
 800368a:	eeb0 0a67 	vmov.f32	s0, s15
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	f7ff fcba 	bl	8003008 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f7ff fce3 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800369a:	2301      	movs	r3, #1
 800369c:	e01f      	b.n	80036de <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4914      	ldr	r1, [pc, #80]	@ (80036f4 <VibeCheckStrobeCMD_Get+0xf0>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc fe33 	bl	8000310 <strcmp>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d115      	bne.n	80036dc <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80036b0:	490e      	ldr	r1, [pc, #56]	@ (80036ec <VibeCheckStrobeCMD_Get+0xe8>)
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f7ff fc56 	bl	8002f64 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f7ff fcc3 	bl	8003044 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe7a 	bl	80033b8 <VibeCheckStrobe_GetExposure>
 80036c4:	eef0 7a40 	vmov.f32	s15, s0
 80036c8:	eeb0 0a67 	vmov.f32	s0, s15
 80036cc:	6838      	ldr	r0, [r7, #0]
 80036ce:	f7ff fc9b 	bl	8003008 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80036d2:	6838      	ldr	r0, [r7, #0]
 80036d4:	f7ff fcc4 	bl	8003060 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3748      	adds	r7, #72	@ 0x48
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	0801712c 	.word	0x0801712c
 80036ec:	08017118 	.word	0x08017118
 80036f0:	08017138 	.word	0x08017138
 80036f4:	08017140 	.word	0x08017140

080036f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036fc:	f7fe fdec 	bl	80022d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	@ (8003734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	@ (8003738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	@ (8003744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003726:	f010 ff5f 	bl	80145e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372a:	f7fd f9d3 	bl	8000ad4 <main>
  bx  lr
 800372e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003730:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003734:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003738:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 800373c:	08017738 	.word	0x08017738
  ldr r2, =_sbss
 8003740:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8003744:	24004bb8 	.word	0x24004bb8

08003748 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC3_IRQHandler>
	...

0800374c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003752:	2003      	movs	r0, #3
 8003754:	f001 fcf4 	bl	8005140 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003758:	f005 ff3a 	bl	80095d0 <HAL_RCC_GetSysClockFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <HAL_Init+0x68>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4913      	ldr	r1, [pc, #76]	@ (80037b8 <HAL_Init+0x6c>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003776:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <HAL_Init+0x68>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	4a0e      	ldr	r2, [pc, #56]	@ (80037b8 <HAL_Init+0x6c>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
 800378c:	4a0b      	ldr	r2, [pc, #44]	@ (80037bc <HAL_Init+0x70>)
 800378e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003790:	4a0b      	ldr	r2, [pc, #44]	@ (80037c0 <HAL_Init+0x74>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003796:	200f      	movs	r0, #15
 8003798:	f000 f814 	bl	80037c4 <HAL_InitTick>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e002      	b.n	80037ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037a6:	f7fe f863 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	58024400 	.word	0x58024400
 80037b8:	08017180 	.word	0x08017180
 80037bc:	24000004 	.word	0x24000004
 80037c0:	24000000 	.word	0x24000000

080037c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037cc:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_InitTick+0x60>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e021      	b.n	800381c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037d8:	4b13      	ldr	r3, [pc, #76]	@ (8003828 <HAL_InitTick+0x64>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_InitTick+0x60>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fcd9 	bl	80051a6 <HAL_SYSTICK_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00e      	b.n	800381c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d80a      	bhi.n	800381a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	2200      	movs	r2, #0
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f001 fca3 	bl	8005156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4a06      	ldr	r2, [pc, #24]	@ (800382c <HAL_InitTick+0x68>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	2400000c 	.word	0x2400000c
 8003828:	24000000 	.word	0x24000000
 800382c:	24000008 	.word	0x24000008

08003830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x20>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_IncTick+0x24>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_IncTick+0x24>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2400000c 	.word	0x2400000c
 8003854:	24002e84 	.word	0x24002e84

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <HAL_GetTick+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	24002e84 	.word	0x24002e84

08003870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff ffee 	bl	8003858 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d005      	beq.n	8003896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_Delay+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003896:	bf00      	nop
 8003898:	f7ff ffde 	bl	8003858 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d8f7      	bhi.n	8003898 <HAL_Delay+0x28>
  {
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2400000c 	.word	0x2400000c

080038b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3360      	adds	r3, #96	@ 0x60
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a10      	ldr	r2, [pc, #64]	@ (8003980 <LL_ADC_SetOffset+0x60>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10b      	bne.n	800395c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800395a:	e00b      	b.n	8003974 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	58026000 	.word	0x58026000

08003984 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3360      	adds	r3, #96	@ 0x60
 8003992:	461a      	mov	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	611a      	str	r2, [r3, #16]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a24 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3360      	adds	r3, #96	@ 0x60
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	601a      	str	r2, [r3, #0]
  }
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58026000 	.word	0x58026000

08003a28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	@ (8003a68 <LL_ADC_SetOffsetSaturation+0x40>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10e      	bne.n	8003a5a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3360      	adds	r3, #96	@ 0x60
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	58026000 	.word	0x58026000

08003a6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <LL_ADC_SetOffsetSign+0x40>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10e      	bne.n	8003a9e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3360      	adds	r3, #96	@ 0x60
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	58026000 	.word	0x58026000

08003ab0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3360      	adds	r3, #96	@ 0x60
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	@ (8003b00 <LL_ADC_SetOffsetState+0x50>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003ae2:	e007      	b.n	8003af4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	58026000 	.word	0x58026000

08003b04 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3330      	adds	r3, #48	@ 0x30
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	211f      	movs	r1, #31
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0e9b      	lsrs	r3, r3, #26
 8003b3c:	f003 011f 	and.w	r1, r3, #31
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0e5b      	lsrs	r3, r3, #25
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	0d1b      	lsrs	r3, r3, #20
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2107      	movs	r1, #7
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	401a      	ands	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d115      	bne.n	8003bf4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0318 	and.w	r3, r3, #24
 8003bde:	4914      	ldr	r1, [pc, #80]	@ (8003c30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003be0:	40d9      	lsrs	r1, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	400b      	ands	r3, r1
 8003be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003bf2:	e014      	b.n	8003c1e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0318 	and.w	r3, r3, #24
 8003c0a:	4909      	ldr	r1, [pc, #36]	@ (8003c30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c0c:	40d9      	lsrs	r1, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	400b      	ands	r3, r1
 8003c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58026000 	.word	0x58026000
 8003c30:	000fffff 	.word	0x000fffff

08003c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6093      	str	r3, [r2, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	5fffffc0 	.word	0x5fffffc0

08003c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6c:	d101      	bne.n	8003c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	6fffffc0 	.word	0x6fffffc0

08003ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <LL_ADC_IsEnabled+0x18>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <LL_ADC_IsEnabled+0x1a>
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d101      	bne.n	8003d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d101      	bne.n	8003d34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1ee      	b.n	800413c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd fd99 	bl	80018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff67 	bl	8003c58 <LL_ADC_IsDeepPowerDownEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff4d 	bl	8003c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff82 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d114      	bne.n	8003dd4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ff66 	bl	8003c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff0 <HAL_ADC_Init+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	4a8e      	ldr	r2, [pc, #568]	@ (8003ff4 <HAL_ADC_Init+0x2b0>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dc6:	e002      	b.n	8003dce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f9      	bne.n	8003dc8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff65 	bl	8003ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff76 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 8188 	bne.w	800412a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8184 	bne.w	800412a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e26:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff4a 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d136      	bne.n	8003eb0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff8 <HAL_ADC_Init+0x2b4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_ADC_Init+0x112>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6a      	ldr	r2, [pc, #424]	@ (8003ffc <HAL_ADC_Init+0x2b8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10e      	bne.n	8003e74 <HAL_ADC_Init+0x130>
 8003e56:	4868      	ldr	r0, [pc, #416]	@ (8003ff8 <HAL_ADC_Init+0x2b4>)
 8003e58:	f7ff ff3a 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4867      	ldr	r0, [pc, #412]	@ (8003ffc <HAL_ADC_Init+0x2b8>)
 8003e60:	f7ff ff36 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <HAL_ADC_Init+0x142>
 8003e74:	4862      	ldr	r0, [pc, #392]	@ (8004000 <HAL_ADC_Init+0x2bc>)
 8003e76:	f7ff ff2b 	bl	8003cd0 <LL_ADC_IsEnabled>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ff8 <HAL_ADC_Init+0x2b4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADC_Init+0x15a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a58      	ldr	r2, [pc, #352]	@ (8003ffc <HAL_ADC_Init+0x2b8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_Init+0x15e>
 8003e9e:	4a59      	ldr	r2, [pc, #356]	@ (8004004 <HAL_ADC_Init+0x2c0>)
 8003ea0:	e000      	b.n	8003ea4 <HAL_ADC_Init+0x160>
 8003ea2:	4a59      	ldr	r2, [pc, #356]	@ (8004008 <HAL_ADC_Init+0x2c4>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7ff fd04 	bl	80038b8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	@ (8004000 <HAL_ADC_Init+0x2bc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d129      	bne.n	8003f0e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7e5b      	ldrb	r3, [r3, #25]
 8003ebe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ec4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003eca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d013      	beq.n	8003efc <HAL_ADC_Init+0x1b8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d00d      	beq.n	8003ef8 <HAL_ADC_Init+0x1b4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b1c      	cmp	r3, #28
 8003ee2:	d007      	beq.n	8003ef4 <HAL_ADC_Init+0x1b0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b18      	cmp	r3, #24
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADC_Init+0x1ac>
 8003eec:	2318      	movs	r3, #24
 8003eee:	e006      	b.n	8003efe <HAL_ADC_Init+0x1ba>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e004      	b.n	8003efe <HAL_ADC_Init+0x1ba>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	e002      	b.n	8003efe <HAL_ADC_Init+0x1ba>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	e000      	b.n	8003efe <HAL_ADC_Init+0x1ba>
 8003efc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003efe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	e00e      	b.n	8003f2c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7e5b      	ldrb	r3, [r3, #25]
 8003f12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	045b      	lsls	r3, r3, #17
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <HAL_ADC_Init+0x2bc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d115      	bne.n	8003f96 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b26      	ldr	r3, [pc, #152]	@ (800400c <HAL_ADC_Init+0x2c8>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	69b9      	ldr	r1, [r7, #24]
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	611a      	str	r2, [r3, #16]
 8003f94:	e009      	b.n	8003faa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004010 <HAL_ADC_Init+0x2cc>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fea1 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 8003fb4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff feae 	bl	8003d1c <LL_ADC_INJ_IsConversionOngoing>
 8003fc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 808e 	bne.w	80040e6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 808a 	bne.w	80040e6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <HAL_ADC_Init+0x2bc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d11b      	bne.n	8004014 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7e1b      	ldrb	r3, [r3, #24]
 8003fe0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fe8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e018      	b.n	8004022 <HAL_ADC_Init+0x2de>
 8003ff0:	24000000 	.word	0x24000000
 8003ff4:	053e2d63 	.word	0x053e2d63
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40022100 	.word	0x40022100
 8004000:	58026000 	.word	0x58026000
 8004004:	40022300 	.word	0x40022300
 8004008:	58026300 	.word	0x58026300
 800400c:	fff04007 	.word	0xfff04007
 8004010:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7e1b      	ldrb	r3, [r3, #24]
 8004018:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <HAL_ADC_Init+0x400>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	430b      	orrs	r3, r1
 8004034:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403c:	2b01      	cmp	r3, #1
 800403e:	d137      	bne.n	80040b0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3f      	ldr	r2, [pc, #252]	@ (8004148 <HAL_ADC_Init+0x404>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d116      	bne.n	800407e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	4b3d      	ldr	r3, [pc, #244]	@ (800414c <HAL_ADC_Init+0x408>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004062:	4311      	orrs	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800406e:	430a      	orrs	r2, r1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	611a      	str	r2, [r3, #16]
 800407c:	e020      	b.n	80040c0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_ADC_Init+0x40c>)
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800408c:	3a01      	subs	r2, #1
 800408e:	0411      	lsls	r1, r2, #16
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004094:	4311      	orrs	r1, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80040a0:	430a      	orrs	r2, r1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e007      	b.n	80040c0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_ADC_Init+0x404>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d002      	beq.n	80040e6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fd67 	bl	8004bb4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d10c      	bne.n	8004108 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	f023 010f 	bic.w	r1, r3, #15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
 8004106:	e007      	b.n	8004118 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 020f 	bic.w	r2, r2, #15
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411c:	f023 0303 	bic.w	r3, r3, #3
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	661a      	str	r2, [r3, #96]	@ 0x60
 8004128:	e007      	b.n	800413a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412e:	f043 0210 	orr.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800413a:	7ffb      	ldrb	r3, [r7, #31]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3724      	adds	r7, #36	@ 0x24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}
 8004144:	ffffbffc 	.word	0xffffbffc
 8004148:	58026000 	.word	0x58026000
 800414c:	fc00f81f 	.word	0xfc00f81f
 8004150:	fc00f81e 	.word	0xfc00f81e

08004154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b0b9      	sub	sp, #228	@ 0xe4
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800416e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4aab      	ldr	r2, [pc, #684]	@ (8004424 <HAL_ADC_ConfigChannel+0x2d0>)
 8004176:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x34>
 8004182:	2302      	movs	r3, #2
 8004184:	f000 bcfe 	b.w	8004b84 <HAL_ADC_ConfigChannel+0xa30>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fdae 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 84e2 	bne.w	8004b66 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db38      	blt.n	800421c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a9e      	ldr	r2, [pc, #632]	@ (8004428 <HAL_ADC_ConfigChannel+0x2d4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d033      	beq.n	800421c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x7e>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2201      	movs	r2, #1
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	e01d      	b.n	800420e <HAL_ADC_ConfigChannel+0xba>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80041f6:	2320      	movs	r3, #32
 80041f8:	e004      	b.n	8004204 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80041fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2201      	movs	r2, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	69d1      	ldr	r1, [r2, #28]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f7ff fc6b 	bl	8003b04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fd5f 	bl	8003cf6 <LL_ADC_REG_IsConversionOngoing>
 8004238:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fd6b 	bl	8003d1c <LL_ADC_INJ_IsConversionOngoing>
 8004246:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800424a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 8270 	bne.w	8004734 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 826b 	bne.w	8004734 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	461a      	mov	r2, r3
 800426c:	f7ff fc76 	bl	8003b5c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6c      	ldr	r2, [pc, #432]	@ (8004428 <HAL_ADC_ConfigChannel+0x2d4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10d      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004294:	e032      	b.n	80042fc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004296:	4b65      	ldr	r3, [pc, #404]	@ (800442c <HAL_ADC_ConfigChannel+0x2d8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800429e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042a2:	d10b      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x168>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	e01d      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x1a4>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x18e>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	e00a      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x1a4>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d048      	beq.n	8004396 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004314:	f7ff fb04 	bl	8003920 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a42      	ldr	r2, [pc, #264]	@ (8004428 <HAL_ADC_ConfigChannel+0x2d4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d119      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6919      	ldr	r1, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	461a      	mov	r2, r3
 8004330:	f7ff fb9c 	bl	8003a6c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6919      	ldr	r1, [r3, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_ADC_ConfigChannel+0x1f8>
 8004346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800434a:	e000      	b.n	800434e <HAL_ADC_ConfigChannel+0x1fa>
 800434c:	2300      	movs	r3, #0
 800434e:	461a      	mov	r2, r3
 8004350:	f7ff fb6a 	bl	8003a28 <LL_ADC_SetOffsetSaturation>
 8004354:	e1ee      	b.n	8004734 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <HAL_ADC_ConfigChannel+0x21a>
 8004368:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800436c:	e000      	b.n	8004370 <HAL_ADC_ConfigChannel+0x21c>
 800436e:	2300      	movs	r3, #0
 8004370:	461a      	mov	r2, r3
 8004372:	f7ff fb37 	bl	80039e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	7e1b      	ldrb	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d102      	bne.n	800438c <HAL_ADC_ConfigChannel+0x238>
 8004386:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800438a:	e000      	b.n	800438e <HAL_ADC_ConfigChannel+0x23a>
 800438c:	2300      	movs	r3, #0
 800438e:	461a      	mov	r2, r3
 8004390:	f7ff fb0e 	bl	80039b0 <LL_ADC_SetDataRightShift>
 8004394:	e1ce      	b.n	8004734 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a23      	ldr	r2, [pc, #140]	@ (8004428 <HAL_ADC_ConfigChannel+0x2d4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	f040 8181 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff faeb 	bl	8003984 <LL_ADC_GetOffsetChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x27a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fae0 	bl	8003984 <LL_ADC_GetOffsetChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	0e9b      	lsrs	r3, r3, #26
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	e01e      	b.n	800440c <HAL_ADC_ConfigChannel+0x2b8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fad5 	bl	8003984 <LL_ADC_GetOffsetChannel>
 80043da:	4603      	mov	r3, r0
 80043dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80043ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80043f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80043fc:	2320      	movs	r3, #32
 80043fe:	e004      	b.n	800440a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x2dc>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	e01e      	b.n	8004462 <HAL_ADC_ConfigChannel+0x30e>
 8004424:	47ff0000 	.word	0x47ff0000
 8004428:	58026000 	.word	0x58026000
 800442c:	5c001000 	.word	0x5c001000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800444c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	429a      	cmp	r2, r3
 8004464:	d106      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fb1e 	bl	8003ab0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fa82 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x34c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fa77 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	f003 021f 	and.w	r2, r3, #31
 800449e:	e01e      	b.n	80044de <HAL_ADC_ConfigChannel+0x38a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fa6c 	bl	8003984 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80044ce:	2320      	movs	r3, #32
 80044d0:	e004      	b.n	80044dc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80044d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x3a2>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0e9b      	lsrs	r3, r3, #26
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	e018      	b.n	8004528 <HAL_ADC_ConfigChannel+0x3d4>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800450e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e004      	b.n	8004528 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800451e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	429a      	cmp	r2, r3
 800452a:	d106      	bne.n	800453a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fabb 	bl	8003ab0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fa1f 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x412>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fa14 	bl	8003984 <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	0e9b      	lsrs	r3, r3, #26
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	e01e      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x450>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fa09 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e004      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x468>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0e9b      	lsrs	r3, r3, #26
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	e014      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x492>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80045d8:	2320      	movs	r3, #32
 80045da:	e004      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80045dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d106      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fa5c 	bl	8003ab0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2103      	movs	r1, #3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff f9c0 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004604:	4603      	mov	r3, r0
 8004606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x4d0>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2103      	movs	r1, #3
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff f9b5 	bl	8003984 <LL_ADC_GetOffsetChannel>
 800461a:	4603      	mov	r3, r0
 800461c:	0e9b      	lsrs	r3, r3, #26
 800461e:	f003 021f 	and.w	r2, r3, #31
 8004622:	e017      	b.n	8004654 <HAL_ADC_ConfigChannel+0x500>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2103      	movs	r1, #3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f9aa 	bl	8003984 <LL_ADC_GetOffsetChannel>
 8004630:	4603      	mov	r3, r0
 8004632:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800463c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004646:	2320      	movs	r3, #32
 8004648:	e003      	b.n	8004652 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800464a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800464c:	fab3 f383 	clz	r3, r3
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <HAL_ADC_ConfigChannel+0x518>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e9b      	lsrs	r3, r3, #26
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	e011      	b.n	8004690 <HAL_ADC_ConfigChannel+0x53c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800467a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800467e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004684:	2320      	movs	r3, #32
 8004686:	e003      	b.n	8004690 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	429a      	cmp	r2, r3
 8004692:	d14f      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	2103      	movs	r1, #3
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fa07 	bl	8003ab0 <LL_ADC_SetOffsetState>
 80046a2:	e047      	b.n	8004734 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d107      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800470e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004716:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004732:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fac9 	bl	8003cd0 <LL_ADC_IsEnabled>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 8219 	bne.w	8004b78 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f7ff fa2e 	bl	8003bb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4aa1      	ldr	r2, [pc, #644]	@ (80049e4 <HAL_ADC_ConfigChannel+0x890>)
 800475e:	4293      	cmp	r3, r2
 8004760:	f040 812e 	bne.w	80049c0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_ADC_ConfigChannel+0x638>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	0e9b      	lsrs	r3, r3, #26
 800477a:	3301      	adds	r3, #1
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2b09      	cmp	r3, #9
 8004782:	bf94      	ite	ls
 8004784:	2301      	movls	r3, #1
 8004786:	2300      	movhi	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e019      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x66c>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800479a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800479e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e003      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80047a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	bf94      	ite	ls
 80047ba:	2301      	movls	r3, #1
 80047bc:	2300      	movhi	r3, #0
 80047be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d079      	beq.n	80048b8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x68c>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0e9b      	lsrs	r3, r3, #26
 80047d6:	3301      	adds	r3, #1
 80047d8:	069b      	lsls	r3, r3, #26
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047de:	e015      	b.n	800480c <HAL_ADC_ConfigChannel+0x6b8>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80047ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80047f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	e003      	b.n	8004804 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_ADC_ConfigChannel+0x6d8>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	3301      	adds	r3, #1
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	e017      	b.n	800485c <HAL_ADC_ConfigChannel+0x708>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800483a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004844:	2320      	movs	r3, #32
 8004846:	e003      	b.n	8004850 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2101      	movs	r1, #1
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x72e>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	3301      	adds	r3, #1
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	e018      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x760>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800489a:	2320      	movs	r3, #32
 800489c:	e003      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b4:	430b      	orrs	r3, r1
 80048b6:	e07e      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x780>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	3301      	adds	r3, #1
 80048cc:	069b      	lsls	r3, r3, #26
 80048ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048d2:	e015      	b.n	8004900 <HAL_ADC_ConfigChannel+0x7ac>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80048ec:	2320      	movs	r3, #32
 80048ee:	e003      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	069b      	lsls	r3, r3, #26
 80048fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x7cc>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	3301      	adds	r3, #1
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	e017      	b.n	8004950 <HAL_ADC_ConfigChannel+0x7fc>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	61bb      	str	r3, [r7, #24]
  return result;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e003      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	ea42 0103 	orr.w	r1, r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_ADC_ConfigChannel+0x828>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	3301      	adds	r3, #1
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	3b1e      	subs	r3, #30
 8004974:	051b      	lsls	r3, r3, #20
 8004976:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800497a:	e01b      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x860>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	60fb      	str	r3, [r7, #12]
  return result;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e003      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f003 021f 	and.w	r2, r3, #31
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	3b1e      	subs	r3, #30
 80049ae:	051b      	lsls	r3, r3, #20
 80049b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b4:	430b      	orrs	r3, r1
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	6892      	ldr	r2, [r2, #8]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f7ff f8ce 	bl	8003b5c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f280 80d7 	bge.w	8004b78 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a06      	ldr	r2, [pc, #24]	@ (80049e8 <HAL_ADC_ConfigChannel+0x894>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_ADC_ConfigChannel+0x88a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <HAL_ADC_ConfigChannel+0x898>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10a      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x8a0>
 80049de:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <HAL_ADC_ConfigChannel+0x89c>)
 80049e0:	e009      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x8a2>
 80049e2:	bf00      	nop
 80049e4:	47ff0000 	.word	0x47ff0000
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40022100 	.word	0x40022100
 80049f0:	40022300 	.word	0x40022300
 80049f4:	4b65      	ldr	r3, [pc, #404]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa38>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe ff84 	bl	8003904 <LL_ADC_GetCommonPathInternalCh>
 80049fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a62      	ldr	r2, [pc, #392]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_ADC_ConfigChannel+0x8c0>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a61      	ldr	r2, [pc, #388]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa40>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d10e      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x8de>
 8004a14:	485e      	ldr	r0, [pc, #376]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a16:	f7ff f95b 	bl	8003cd0 <LL_ADC_IsEnabled>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	485d      	ldr	r0, [pc, #372]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa40>)
 8004a1e:	f7ff f957 	bl	8003cd0 <LL_ADC_IsEnabled>
 8004a22:	4603      	mov	r3, r0
 8004a24:	4323      	orrs	r3, r4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e008      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x8f0>
 8004a32:	4859      	ldr	r0, [pc, #356]	@ (8004b98 <HAL_ADC_ConfigChannel+0xa44>)
 8004a34:	f7ff f94c 	bl	8003cd0 <LL_ADC_IsEnabled>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8084 	beq.w	8004b52 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a53      	ldr	r2, [pc, #332]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa48>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d132      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x966>
 8004a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d12c      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a4c      	ldr	r2, [pc, #304]	@ (8004b98 <HAL_ADC_ConfigChannel+0xa44>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f040 8086 	bne.w	8004b78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a47      	ldr	r2, [pc, #284]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_ADC_ConfigChannel+0x92c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa40>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x930>
 8004a80:	4a47      	ldr	r2, [pc, #284]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a82:	e000      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x932>
 8004a84:	4a41      	ldr	r2, [pc, #260]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa38>)
 8004a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe ff24 	bl	80038de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a96:	4b43      	ldr	r3, [pc, #268]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa50>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xa54>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004aaa:	e002      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f9      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab8:	e05e      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	@ (8004bac <HAL_ADC_ConfigChannel+0xa58>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d120      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x9b2>
 8004ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11a      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a30      	ldr	r2, [pc, #192]	@ (8004b98 <HAL_ADC_ConfigChannel+0xa44>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d14e      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2c      	ldr	r2, [pc, #176]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_ADC_ConfigChannel+0x99a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa40>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x99e>
 8004aee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004af0:	e000      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x9a0>
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa38>)
 8004af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7fe feed 	bl	80038de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b04:	e038      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a29      	ldr	r2, [pc, #164]	@ (8004bb0 <HAL_ADC_ConfigChannel+0xa5c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d133      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
 8004b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d12d      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_ADC_ConfigChannel+0xa44>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d128      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_ADC_ConfigChannel+0x9e6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa40>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x9ea>
 8004b3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b3c:	e000      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x9ec>
 8004b3e:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa38>)
 8004b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe fec7 	bl	80038de <LL_ADC_SetCommonPathInternalCh>
 8004b50:	e012      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b56:	f043 0220 	orr.w	r2, r3, #32
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004b64:	e008      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	37e4      	adds	r7, #228	@ 0xe4
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd90      	pop	{r4, r7, pc}
 8004b8c:	58026300 	.word	0x58026300
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40022100 	.word	0x40022100
 8004b98:	58026000 	.word	0x58026000
 8004b9c:	c7520000 	.word	0xc7520000
 8004ba0:	40022300 	.word	0x40022300
 8004ba4:	24000000 	.word	0x24000000
 8004ba8:	053e2d63 	.word	0x053e2d63
 8004bac:	c3210000 	.word	0xc3210000
 8004bb0:	cb840000 	.word	0xcb840000

08004bb4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6c      	ldr	r2, [pc, #432]	@ (8004d74 <ADC_ConfigureBoostMode+0x1c0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <ADC_ConfigureBoostMode+0x1c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6b      	ldr	r2, [pc, #428]	@ (8004d78 <ADC_ConfigureBoostMode+0x1c4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d109      	bne.n	8004be4 <ADC_ConfigureBoostMode+0x30>
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d7c <ADC_ConfigureBoostMode+0x1c8>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <ADC_ConfigureBoostMode+0x42>
 8004be4:	4b66      	ldr	r3, [pc, #408]	@ (8004d80 <ADC_ConfigureBoostMode+0x1cc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01c      	beq.n	8004c34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004bfa:	f004 fe63 	bl	80098c4 <HAL_RCC_GetHCLKFreq>
 8004bfe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c08:	d010      	beq.n	8004c2c <ADC_ConfigureBoostMode+0x78>
 8004c0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c0e:	d873      	bhi.n	8004cf8 <ADC_ConfigureBoostMode+0x144>
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c14:	d002      	beq.n	8004c1c <ADC_ConfigureBoostMode+0x68>
 8004c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c1a:	d16d      	bne.n	8004cf8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	60fb      	str	r3, [r7, #12]
        break;
 8004c2a:	e068      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	60fb      	str	r3, [r7, #12]
        break;
 8004c32:	e064      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c34:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	f006 f83e 	bl	800acbc <HAL_RCCEx_GetPeriphCLKFreq>
 8004c40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c4a:	d051      	beq.n	8004cf0 <ADC_ConfigureBoostMode+0x13c>
 8004c4c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004c50:	d854      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c52:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c56:	d047      	beq.n	8004ce8 <ADC_ConfigureBoostMode+0x134>
 8004c58:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004c5c:	d84e      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c5e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c62:	d03d      	beq.n	8004ce0 <ADC_ConfigureBoostMode+0x12c>
 8004c64:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004c68:	d848      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c6e:	d033      	beq.n	8004cd8 <ADC_ConfigureBoostMode+0x124>
 8004c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c74:	d842      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c76:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c7a:	d029      	beq.n	8004cd0 <ADC_ConfigureBoostMode+0x11c>
 8004c7c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c80:	d83c      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c86:	d01a      	beq.n	8004cbe <ADC_ConfigureBoostMode+0x10a>
 8004c88:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c8c:	d836      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c8e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c92:	d014      	beq.n	8004cbe <ADC_ConfigureBoostMode+0x10a>
 8004c94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c98:	d830      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c9e:	d00e      	beq.n	8004cbe <ADC_ConfigureBoostMode+0x10a>
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca4:	d82a      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004ca6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004caa:	d008      	beq.n	8004cbe <ADC_ConfigureBoostMode+0x10a>
 8004cac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cb0:	d824      	bhi.n	8004cfc <ADC_ConfigureBoostMode+0x148>
 8004cb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cb6:	d002      	beq.n	8004cbe <ADC_ConfigureBoostMode+0x10a>
 8004cb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cbc:	d11e      	bne.n	8004cfc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	0c9b      	lsrs	r3, r3, #18
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
        break;
 8004cce:	e016      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]
        break;
 8004cd6:	e012      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	60fb      	str	r3, [r7, #12]
        break;
 8004cde:	e00e      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	60fb      	str	r3, [r7, #12]
        break;
 8004ce6:	e00a      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	60fb      	str	r3, [r7, #12]
        break;
 8004cee:	e006      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	60fb      	str	r3, [r7, #12]
        break;
 8004cf6:	e002      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004cfc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <ADC_ConfigureBoostMode+0x1d0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d808      	bhi.n	8004d1e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d1a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d1c:	e025      	b.n	8004d6a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <ADC_ConfigureBoostMode+0x1d4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d80a      	bhi.n	8004d3c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d38:	609a      	str	r2, [r3, #8]
}
 8004d3a:	e016      	b.n	8004d6a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <ADC_ConfigureBoostMode+0x1d8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d80a      	bhi.n	8004d5a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	e007      	b.n	8004d6a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d68:	609a      	str	r2, [r3, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000
 8004d78:	40022100 	.word	0x40022100
 8004d7c:	40022300 	.word	0x40022300
 8004d80:	58026300 	.word	0x58026300
 8004d84:	005f5e10 	.word	0x005f5e10
 8004d88:	00bebc20 	.word	0x00bebc20
 8004d8c:	017d7840 	.word	0x017d7840

08004d90 <LL_ADC_IsEnabled>:
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <LL_ADC_IsEnabled+0x18>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <LL_ADC_IsEnabled+0x1a>
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d101      	bne.n	8004dce <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b0a3      	sub	sp, #140	@ 0x8c
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e0c1      	b.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d102      	bne.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e14:	4b5d      	ldr	r3, [pc, #372]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e001      	b.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0a0      	b.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff ffb9 	bl	8004db6 <LL_ADC_REG_IsConversionOngoing>
 8004e44:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ffb2 	bl	8004db6 <LL_ADC_REG_IsConversionOngoing>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 8081 	bne.w	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d17c      	bne.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a48      	ldr	r2, [pc, #288]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a46      	ldr	r2, [pc, #280]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004e76:	4b46      	ldr	r3, [pc, #280]	@ (8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e78:	e000      	b.n	8004e7c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004e7a:	4b46      	ldr	r3, [pc, #280]	@ (8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d039      	beq.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a39      	ldr	r2, [pc, #228]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10e      	bne.n	8004eca <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004eac:	4836      	ldr	r0, [pc, #216]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004eae:	f7ff ff6f 	bl	8004d90 <LL_ADC_IsEnabled>
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4835      	ldr	r0, [pc, #212]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eb6:	f7ff ff6b 	bl	8004d90 <LL_ADC_IsEnabled>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4323      	orrs	r3, r4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e008      	b.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004eca:	4833      	ldr	r0, [pc, #204]	@ (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ecc:	f7ff ff60 	bl	8004d90 <LL_ADC_IsEnabled>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d047      	beq.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	6811      	ldr	r1, [r2, #0]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ef6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef8:	e03a      	b.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004efa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d10e      	bne.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004f1a:	481b      	ldr	r0, [pc, #108]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f1c:	f7ff ff38 	bl	8004d90 <LL_ADC_IsEnabled>
 8004f20:	4604      	mov	r4, r0
 8004f22:	481a      	ldr	r0, [pc, #104]	@ (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f24:	f7ff ff34 	bl	8004d90 <LL_ADC_IsEnabled>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4323      	orrs	r3, r4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e008      	b.n	8004f4a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004f38:	4817      	ldr	r0, [pc, #92]	@ (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f3a:	f7ff ff29 	bl	8004d90 <LL_ADC_IsEnabled>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	4b12      	ldr	r3, [pc, #72]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f5a:	e009      	b.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004f6e:	e000      	b.n	8004f72 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	378c      	adds	r7, #140	@ 0x8c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd90      	pop	{r4, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40022100 	.word	0x40022100
 8004f90:	40022300 	.word	0x40022300
 8004f94:	58026300 	.word	0x58026300
 8004f98:	58026000 	.word	0x58026000
 8004f9c:	fffff0e0 	.word	0xfffff0e0

08004fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fce:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	60d3      	str	r3, [r2, #12]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00
 8004fe4:	05fa0000 	.word	0x05fa0000

08004fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fec:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <__NVIC_GetPriorityGrouping+0x18>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	f003 0307 	and.w	r3, r3, #7
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800500e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db0b      	blt.n	800502e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4907      	ldr	r1, [pc, #28]	@ (800503c <__NVIC_EnableIRQ+0x38>)
 800501e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2001      	movs	r0, #1
 8005026:	fa00 f202 	lsl.w	r2, r0, r2
 800502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e100 	.word	0xe000e100

08005040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800504c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db0a      	blt.n	800506a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	490c      	ldr	r1, [pc, #48]	@ (800508c <__NVIC_SetPriority+0x4c>)
 800505a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	440b      	add	r3, r1
 8005064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005068:	e00a      	b.n	8005080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4908      	ldr	r1, [pc, #32]	@ (8005090 <__NVIC_SetPriority+0x50>)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3b04      	subs	r3, #4
 8005078:	0112      	lsls	r2, r2, #4
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	440b      	add	r3, r1
 800507e:	761a      	strb	r2, [r3, #24]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000e100 	.word	0xe000e100
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	@ 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f1c3 0307 	rsb	r3, r3, #7
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	bf28      	it	cs
 80050b2:	2304      	movcs	r3, #4
 80050b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d902      	bls.n	80050c4 <NVIC_EncodePriority+0x30>
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3b03      	subs	r3, #3
 80050c2:	e000      	b.n	80050c6 <NVIC_EncodePriority+0x32>
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c8:	f04f 32ff 	mov.w	r2, #4294967295
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	401a      	ands	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050dc:	f04f 31ff 	mov.w	r1, #4294967295
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	43d9      	mvns	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ec:	4313      	orrs	r3, r2
         );
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3724      	adds	r7, #36	@ 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3b01      	subs	r3, #1
 8005108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800510c:	d301      	bcc.n	8005112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800510e:	2301      	movs	r3, #1
 8005110:	e00f      	b.n	8005132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005112:	4a0a      	ldr	r2, [pc, #40]	@ (800513c <SysTick_Config+0x40>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800511a:	210f      	movs	r1, #15
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	f7ff ff8e 	bl	8005040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <SysTick_Config+0x40>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800512a:	4b04      	ldr	r3, [pc, #16]	@ (800513c <SysTick_Config+0x40>)
 800512c:	2207      	movs	r2, #7
 800512e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000e010 	.word	0xe000e010

08005140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff29 	bl	8004fa0 <__NVIC_SetPriorityGrouping>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005164:	f7ff ff40 	bl	8004fe8 <__NVIC_GetPriorityGrouping>
 8005168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	6978      	ldr	r0, [r7, #20]
 8005170:	f7ff ff90 	bl	8005094 <NVIC_EncodePriority>
 8005174:	4602      	mov	r2, r0
 8005176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff5f 	bl	8005040 <__NVIC_SetPriority>
}
 8005182:	bf00      	nop
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff33 	bl	8005004 <__NVIC_EnableIRQ>
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ffa4 	bl	80050fc <SysTick_Config>
 80051b4:	4603      	mov	r3, r0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80051c4:	f3bf 8f5f 	dmb	sy
}
 80051c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80051ca:	4b07      	ldr	r3, [pc, #28]	@ (80051e8 <HAL_MPU_Disable+0x28>)
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	4a06      	ldr	r2, [pc, #24]	@ (80051e8 <HAL_MPU_Disable+0x28>)
 80051d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80051d6:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <HAL_MPU_Disable+0x2c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	605a      	str	r2, [r3, #4]
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000ed00 	.word	0xe000ed00
 80051ec:	e000ed90 	.word	0xe000ed90

080051f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80051f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <HAL_MPU_Enable+0x38>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005202:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <HAL_MPU_Enable+0x3c>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	4a09      	ldr	r2, [pc, #36]	@ (800522c <HAL_MPU_Enable+0x3c>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800520c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800520e:	f3bf 8f4f 	dsb	sy
}
 8005212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005214:	f3bf 8f6f 	isb	sy
}
 8005218:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	e000ed90 	.word	0xe000ed90
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	785a      	ldrb	r2, [r3, #1]
 800523c:	4b1b      	ldr	r3, [pc, #108]	@ (80052ac <HAL_MPU_ConfigRegion+0x7c>)
 800523e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <HAL_MPU_ConfigRegion+0x7c>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	4a19      	ldr	r2, [pc, #100]	@ (80052ac <HAL_MPU_ConfigRegion+0x7c>)
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800524c:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_MPU_ConfigRegion+0x7c>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7b1b      	ldrb	r3, [r3, #12]
 8005258:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7adb      	ldrb	r3, [r3, #11]
 800525e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	7a9b      	ldrb	r3, [r3, #10]
 8005266:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7b5b      	ldrb	r3, [r3, #13]
 800526e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	7b9b      	ldrb	r3, [r3, #14]
 8005276:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	7bdb      	ldrb	r3, [r3, #15]
 800527e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7a5b      	ldrb	r3, [r3, #9]
 8005286:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7a1b      	ldrb	r3, [r3, #8]
 800528e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005290:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005298:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800529a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800529c:	6113      	str	r3, [r2, #16]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000ed90 	.word	0xe000ed90

080052b0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e014      	b.n	80052ec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fb74 	bl	80019c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_DAC_ConfigChannel+0x1e>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e12a      	b.n	800556c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	795b      	ldrb	r3, [r3, #5]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_DAC_ConfigChannel+0x2e>
 800531e:	2302      	movs	r3, #2
 8005320:	e124      	b.n	800556c <HAL_DAC_ConfigChannel+0x278>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2202      	movs	r2, #2
 800532c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d17a      	bne.n	800542c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005336:	f7fe fa8f 	bl	8003858 <HAL_GetTick>
 800533a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d13d      	bne.n	80053be <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005342:	e018      	b.n	8005376 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005344:	f7fe fa88 	bl	8003858 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d911      	bls.n	8005376 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005358:	4b86      	ldr	r3, [pc, #536]	@ (8005574 <HAL_DAC_ConfigChannel+0x280>)
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f043 0208 	orr.w	r2, r3, #8
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2203      	movs	r2, #3
 8005370:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0fa      	b.n	800556c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537c:	4b7d      	ldr	r3, [pc, #500]	@ (8005574 <HAL_DAC_ConfigChannel+0x280>)
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1df      	bne.n	8005344 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	6992      	ldr	r2, [r2, #24]
 800538c:	641a      	str	r2, [r3, #64]	@ 0x40
 800538e:	e020      	b.n	80053d2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005390:	f7fe fa62 	bl	8003858 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d90f      	bls.n	80053be <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da0a      	bge.n	80053be <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f043 0208 	orr.w	r2, r3, #8
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2203      	movs	r2, #3
 80053b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0d6      	b.n	800556c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dbe3      	blt.n	8005390 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	6992      	ldr	r2, [r2, #24]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	ea02 0103 	and.w	r1, r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	21ff      	movs	r1, #255	@ 0xff
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	ea02 0103 	and.w	r1, r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	409a      	lsls	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d11d      	bne.n	8005470 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	221f      	movs	r2, #31
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2207      	movs	r2, #7
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d102      	bne.n	800549a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005494:	2300      	movs	r3, #0
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
 8005498:	e00f      	b.n	80054ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d102      	bne.n	80054a8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80054a2:	2301      	movs	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a6:	e008      	b.n	80054ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80054b0:	2301      	movs	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	e001      	b.n	80054ba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43da      	mvns	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	400a      	ands	r2, r1
 8005500:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	22c0      	movs	r2, #192	@ 0xc0
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	400a      	ands	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005568:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800556c:	4618      	mov	r0, r3
 800556e:	3728      	adds	r7, #40	@ 0x28
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20008000 	.word	0x20008000

08005578 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7fe f96a 	bl	8003858 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e312      	b.n	8005bb6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a66      	ldr	r2, [pc, #408]	@ (8005730 <HAL_DMA_Init+0x1b8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a65      	ldr	r2, [pc, #404]	@ (8005734 <HAL_DMA_Init+0x1bc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a63      	ldr	r2, [pc, #396]	@ (8005738 <HAL_DMA_Init+0x1c0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a62      	ldr	r2, [pc, #392]	@ (800573c <HAL_DMA_Init+0x1c4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a60      	ldr	r2, [pc, #384]	@ (8005740 <HAL_DMA_Init+0x1c8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005744 <HAL_DMA_Init+0x1cc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005748 <HAL_DMA_Init+0x1d0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5c      	ldr	r2, [pc, #368]	@ (800574c <HAL_DMA_Init+0x1d4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005750 <HAL_DMA_Init+0x1d8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a59      	ldr	r2, [pc, #356]	@ (8005754 <HAL_DMA_Init+0x1dc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a57      	ldr	r2, [pc, #348]	@ (8005758 <HAL_DMA_Init+0x1e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a56      	ldr	r2, [pc, #344]	@ (800575c <HAL_DMA_Init+0x1e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a54      	ldr	r2, [pc, #336]	@ (8005760 <HAL_DMA_Init+0x1e8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a53      	ldr	r2, [pc, #332]	@ (8005764 <HAL_DMA_Init+0x1ec>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a51      	ldr	r2, [pc, #324]	@ (8005768 <HAL_DMA_Init+0x1f0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_DMA_Init+0xb8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a50      	ldr	r2, [pc, #320]	@ (800576c <HAL_DMA_Init+0x1f4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_DMA_Init+0xbc>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_DMA_Init+0xbe>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 813c 	beq.w	80058b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a37      	ldr	r2, [pc, #220]	@ (8005730 <HAL_DMA_Init+0x1b8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d04a      	beq.n	80056ec <HAL_DMA_Init+0x174>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a36      	ldr	r2, [pc, #216]	@ (8005734 <HAL_DMA_Init+0x1bc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d045      	beq.n	80056ec <HAL_DMA_Init+0x174>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a34      	ldr	r2, [pc, #208]	@ (8005738 <HAL_DMA_Init+0x1c0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d040      	beq.n	80056ec <HAL_DMA_Init+0x174>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a33      	ldr	r2, [pc, #204]	@ (800573c <HAL_DMA_Init+0x1c4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d03b      	beq.n	80056ec <HAL_DMA_Init+0x174>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a31      	ldr	r2, [pc, #196]	@ (8005740 <HAL_DMA_Init+0x1c8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d036      	beq.n	80056ec <HAL_DMA_Init+0x174>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a30      	ldr	r2, [pc, #192]	@ (8005744 <HAL_DMA_Init+0x1cc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d031      	beq.n	80056ec <HAL_DMA_Init+0x174>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2e      	ldr	r2, [pc, #184]	@ (8005748 <HAL_DMA_Init+0x1d0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02c      	beq.n	80056ec <HAL_DMA_Init+0x174>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <HAL_DMA_Init+0x1d4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d027      	beq.n	80056ec <HAL_DMA_Init+0x174>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005750 <HAL_DMA_Init+0x1d8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005754 <HAL_DMA_Init+0x1dc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d01d      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a28      	ldr	r2, [pc, #160]	@ (8005758 <HAL_DMA_Init+0x1e0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a27      	ldr	r2, [pc, #156]	@ (800575c <HAL_DMA_Init+0x1e4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <HAL_DMA_Init+0x1e8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a24      	ldr	r2, [pc, #144]	@ (8005764 <HAL_DMA_Init+0x1ec>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <HAL_DMA_Init+0x1f0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_DMA_Init+0x174>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	@ (800576c <HAL_DMA_Init+0x1f4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <HAL_DMA_Init+0x186>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e007      	b.n	800570e <HAL_DMA_Init+0x196>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800570e:	e02f      	b.n	8005770 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005710:	f7fe f8a2 	bl	8003858 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b05      	cmp	r3, #5
 800571c:	d928      	bls.n	8005770 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2203      	movs	r2, #3
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e242      	b.n	8005bb6 <HAL_DMA_Init+0x63e>
 8005730:	40020010 	.word	0x40020010
 8005734:	40020028 	.word	0x40020028
 8005738:	40020040 	.word	0x40020040
 800573c:	40020058 	.word	0x40020058
 8005740:	40020070 	.word	0x40020070
 8005744:	40020088 	.word	0x40020088
 8005748:	400200a0 	.word	0x400200a0
 800574c:	400200b8 	.word	0x400200b8
 8005750:	40020410 	.word	0x40020410
 8005754:	40020428 	.word	0x40020428
 8005758:	40020440 	.word	0x40020440
 800575c:	40020458 	.word	0x40020458
 8005760:	40020470 	.word	0x40020470
 8005764:	40020488 	.word	0x40020488
 8005768:	400204a0 	.word	0x400204a0
 800576c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1c8      	bne.n	8005710 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4b83      	ldr	r3, [pc, #524]	@ (8005998 <HAL_DMA_Init+0x420>)
 800578a:	4013      	ands	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005796:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d107      	bne.n	80057d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057cc:	4313      	orrs	r3, r2
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b28      	cmp	r3, #40	@ 0x28
 80057da:	d903      	bls.n	80057e4 <HAL_DMA_Init+0x26c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80057e2:	d91f      	bls.n	8005824 <HAL_DMA_Init+0x2ac>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ea:	d903      	bls.n	80057f4 <HAL_DMA_Init+0x27c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b42      	cmp	r3, #66	@ 0x42
 80057f2:	d917      	bls.n	8005824 <HAL_DMA_Init+0x2ac>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b46      	cmp	r3, #70	@ 0x46
 80057fa:	d903      	bls.n	8005804 <HAL_DMA_Init+0x28c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b48      	cmp	r3, #72	@ 0x48
 8005802:	d90f      	bls.n	8005824 <HAL_DMA_Init+0x2ac>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b4e      	cmp	r3, #78	@ 0x4e
 800580a:	d903      	bls.n	8005814 <HAL_DMA_Init+0x29c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b52      	cmp	r3, #82	@ 0x52
 8005812:	d907      	bls.n	8005824 <HAL_DMA_Init+0x2ac>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b73      	cmp	r3, #115	@ 0x73
 800581a:	d905      	bls.n	8005828 <HAL_DMA_Init+0x2b0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b77      	cmp	r3, #119	@ 0x77
 8005822:	d801      	bhi.n	8005828 <HAL_DMA_Init+0x2b0>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_DMA_Init+0x2b2>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005834:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0307 	bic.w	r3, r3, #7
 800584c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2b04      	cmp	r3, #4
 800585e:	d117      	bne.n	8005890 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 f9b4 	bl	8006be0 <DMA_CheckFifoParam>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2240      	movs	r2, #64	@ 0x40
 8005882:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e192      	b.n	8005bb6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 f8ef 	bl	8006a7c <DMA_CalcBaseAndBitshift>
 800589e:	4603      	mov	r3, r0
 80058a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	223f      	movs	r2, #63	@ 0x3f
 80058ac:	409a      	lsls	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	609a      	str	r2, [r3, #8]
 80058b2:	e0c8      	b.n	8005a46 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a38      	ldr	r2, [pc, #224]	@ (800599c <HAL_DMA_Init+0x424>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d022      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a37      	ldr	r2, [pc, #220]	@ (80059a0 <HAL_DMA_Init+0x428>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d01d      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a35      	ldr	r2, [pc, #212]	@ (80059a4 <HAL_DMA_Init+0x42c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a34      	ldr	r2, [pc, #208]	@ (80059a8 <HAL_DMA_Init+0x430>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <HAL_DMA_Init+0x434>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <HAL_DMA_Init+0x438>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	@ (80059b4 <HAL_DMA_Init+0x43c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_DMA_Init+0x38c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2e      	ldr	r2, [pc, #184]	@ (80059b8 <HAL_DMA_Init+0x440>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_DMA_Init+0x390>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_DMA_Init+0x392>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8092 	beq.w	8005a34 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_DMA_Init+0x424>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d021      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a20      	ldr	r2, [pc, #128]	@ (80059a0 <HAL_DMA_Init+0x428>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01c      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_DMA_Init+0x42c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1d      	ldr	r2, [pc, #116]	@ (80059a8 <HAL_DMA_Init+0x430>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d012      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_DMA_Init+0x434>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00d      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <HAL_DMA_Init+0x438>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d008      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a18      	ldr	r2, [pc, #96]	@ (80059b4 <HAL_DMA_Init+0x43c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <HAL_DMA_Init+0x3e6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a17      	ldr	r2, [pc, #92]	@ (80059b8 <HAL_DMA_Init+0x440>)
 800595c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4b10      	ldr	r3, [pc, #64]	@ (80059bc <HAL_DMA_Init+0x444>)
 800597a:	4013      	ands	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d01c      	beq.n	80059c0 <HAL_DMA_Init+0x448>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b80      	cmp	r3, #128	@ 0x80
 800598c:	d102      	bne.n	8005994 <HAL_DMA_Init+0x41c>
 800598e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005992:	e016      	b.n	80059c2 <HAL_DMA_Init+0x44a>
 8005994:	2300      	movs	r3, #0
 8005996:	e014      	b.n	80059c2 <HAL_DMA_Init+0x44a>
 8005998:	fe10803f 	.word	0xfe10803f
 800599c:	58025408 	.word	0x58025408
 80059a0:	5802541c 	.word	0x5802541c
 80059a4:	58025430 	.word	0x58025430
 80059a8:	58025444 	.word	0x58025444
 80059ac:	58025458 	.word	0x58025458
 80059b0:	5802546c 	.word	0x5802546c
 80059b4:	58025480 	.word	0x58025480
 80059b8:	58025494 	.word	0x58025494
 80059bc:	fffe000f 	.word	0xfffe000f
 80059c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc0 <HAL_DMA_Init+0x648>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc4 <HAL_DMA_Init+0x64c>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	009a      	lsls	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f82f 	bl	8006a7c <DMA_CalcBaseAndBitshift>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	e008      	b.n	8005a46 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2240      	movs	r2, #64	@ 0x40
 8005a38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0b7      	b.n	8005bb6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a5f      	ldr	r2, [pc, #380]	@ (8005bc8 <HAL_DMA_Init+0x650>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d072      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a5d      	ldr	r2, [pc, #372]	@ (8005bcc <HAL_DMA_Init+0x654>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d06d      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8005bd0 <HAL_DMA_Init+0x658>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d068      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd4 <HAL_DMA_Init+0x65c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d063      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a59      	ldr	r2, [pc, #356]	@ (8005bd8 <HAL_DMA_Init+0x660>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d05e      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a57      	ldr	r2, [pc, #348]	@ (8005bdc <HAL_DMA_Init+0x664>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d059      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a56      	ldr	r2, [pc, #344]	@ (8005be0 <HAL_DMA_Init+0x668>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d054      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a54      	ldr	r2, [pc, #336]	@ (8005be4 <HAL_DMA_Init+0x66c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04f      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a53      	ldr	r2, [pc, #332]	@ (8005be8 <HAL_DMA_Init+0x670>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a51      	ldr	r2, [pc, #324]	@ (8005bec <HAL_DMA_Init+0x674>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a50      	ldr	r2, [pc, #320]	@ (8005bf0 <HAL_DMA_Init+0x678>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8005bf4 <HAL_DMA_Init+0x67c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8005bf8 <HAL_DMA_Init+0x680>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a4b      	ldr	r2, [pc, #300]	@ (8005bfc <HAL_DMA_Init+0x684>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8005c00 <HAL_DMA_Init+0x688>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a48      	ldr	r2, [pc, #288]	@ (8005c04 <HAL_DMA_Init+0x68c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a47      	ldr	r2, [pc, #284]	@ (8005c08 <HAL_DMA_Init+0x690>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a45      	ldr	r2, [pc, #276]	@ (8005c0c <HAL_DMA_Init+0x694>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a44      	ldr	r2, [pc, #272]	@ (8005c10 <HAL_DMA_Init+0x698>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a42      	ldr	r2, [pc, #264]	@ (8005c14 <HAL_DMA_Init+0x69c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a41      	ldr	r2, [pc, #260]	@ (8005c18 <HAL_DMA_Init+0x6a0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c1c <HAL_DMA_Init+0x6a4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	@ (8005c20 <HAL_DMA_Init+0x6a8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMA_Init+0x5be>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3c      	ldr	r2, [pc, #240]	@ (8005c24 <HAL_DMA_Init+0x6ac>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_DMA_Init+0x5c2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_DMA_Init+0x5c4>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d032      	beq.n	8005ba6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f8c9 	bl	8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b80      	cmp	r3, #128	@ 0x80
 8005b4c:	d102      	bne.n	8005b54 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_DMA_Init+0x61c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d80c      	bhi.n	8005b94 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 f946 	bl	8006e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e008      	b.n	8005ba6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	a7fdabf8 	.word	0xa7fdabf8
 8005bc4:	cccccccd 	.word	0xcccccccd
 8005bc8:	40020010 	.word	0x40020010
 8005bcc:	40020028 	.word	0x40020028
 8005bd0:	40020040 	.word	0x40020040
 8005bd4:	40020058 	.word	0x40020058
 8005bd8:	40020070 	.word	0x40020070
 8005bdc:	40020088 	.word	0x40020088
 8005be0:	400200a0 	.word	0x400200a0
 8005be4:	400200b8 	.word	0x400200b8
 8005be8:	40020410 	.word	0x40020410
 8005bec:	40020428 	.word	0x40020428
 8005bf0:	40020440 	.word	0x40020440
 8005bf4:	40020458 	.word	0x40020458
 8005bf8:	40020470 	.word	0x40020470
 8005bfc:	40020488 	.word	0x40020488
 8005c00:	400204a0 	.word	0x400204a0
 8005c04:	400204b8 	.word	0x400204b8
 8005c08:	58025408 	.word	0x58025408
 8005c0c:	5802541c 	.word	0x5802541c
 8005c10:	58025430 	.word	0x58025430
 8005c14:	58025444 	.word	0x58025444
 8005c18:	58025458 	.word	0x58025458
 8005c1c:	5802546c 	.word	0x5802546c
 8005c20:	58025480 	.word	0x58025480
 8005c24:	58025494 	.word	0x58025494

08005c28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	@ 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c34:	4b67      	ldr	r3, [pc, #412]	@ (8005dd4 <HAL_DMA_IRQHandler+0x1ac>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a67      	ldr	r2, [pc, #412]	@ (8005dd8 <HAL_DMA_IRQHandler+0x1b0>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0a9b      	lsrs	r3, r3, #10
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8005ddc <HAL_DMA_IRQHandler+0x1b4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d04a      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5d      	ldr	r2, [pc, #372]	@ (8005de0 <HAL_DMA_IRQHandler+0x1b8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d045      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5c      	ldr	r2, [pc, #368]	@ (8005de4 <HAL_DMA_IRQHandler+0x1bc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d040      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8005de8 <HAL_DMA_IRQHandler+0x1c0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d03b      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a59      	ldr	r2, [pc, #356]	@ (8005dec <HAL_DMA_IRQHandler+0x1c4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d036      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a57      	ldr	r2, [pc, #348]	@ (8005df0 <HAL_DMA_IRQHandler+0x1c8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d031      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a56      	ldr	r2, [pc, #344]	@ (8005df4 <HAL_DMA_IRQHandler+0x1cc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a54      	ldr	r2, [pc, #336]	@ (8005df8 <HAL_DMA_IRQHandler+0x1d0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d027      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a53      	ldr	r2, [pc, #332]	@ (8005dfc <HAL_DMA_IRQHandler+0x1d4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a51      	ldr	r2, [pc, #324]	@ (8005e00 <HAL_DMA_IRQHandler+0x1d8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01d      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a50      	ldr	r2, [pc, #320]	@ (8005e04 <HAL_DMA_IRQHandler+0x1dc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8005e08 <HAL_DMA_IRQHandler+0x1e0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8005e0c <HAL_DMA_IRQHandler+0x1e4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8005e10 <HAL_DMA_IRQHandler+0x1e8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a4a      	ldr	r2, [pc, #296]	@ (8005e14 <HAL_DMA_IRQHandler+0x1ec>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xd2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a48      	ldr	r2, [pc, #288]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d101      	bne.n	8005cfe <HAL_DMA_IRQHandler+0xd6>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <HAL_DMA_IRQHandler+0xd8>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 842b 	beq.w	800655c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2208      	movs	r2, #8
 8005d10:	409a      	lsls	r2, r3
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80a2 	beq.w	8005e60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2e      	ldr	r2, [pc, #184]	@ (8005ddc <HAL_DMA_IRQHandler+0x1b4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04a      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005de0 <HAL_DMA_IRQHandler+0x1b8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d045      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	@ (8005de4 <HAL_DMA_IRQHandler+0x1bc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d040      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <HAL_DMA_IRQHandler+0x1c0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d03b      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a28      	ldr	r2, [pc, #160]	@ (8005dec <HAL_DMA_IRQHandler+0x1c4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d036      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a27      	ldr	r2, [pc, #156]	@ (8005df0 <HAL_DMA_IRQHandler+0x1c8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d031      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a25      	ldr	r2, [pc, #148]	@ (8005df4 <HAL_DMA_IRQHandler+0x1cc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02c      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a24      	ldr	r2, [pc, #144]	@ (8005df8 <HAL_DMA_IRQHandler+0x1d0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d027      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a22      	ldr	r2, [pc, #136]	@ (8005dfc <HAL_DMA_IRQHandler+0x1d4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d022      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	@ (8005e00 <HAL_DMA_IRQHandler+0x1d8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01d      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <HAL_DMA_IRQHandler+0x1dc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e08 <HAL_DMA_IRQHandler+0x1e0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d013      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	@ (8005e0c <HAL_DMA_IRQHandler+0x1e4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <HAL_DMA_IRQHandler+0x1e8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a19      	ldr	r2, [pc, #100]	@ (8005e14 <HAL_DMA_IRQHandler+0x1ec>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x194>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d12f      	bne.n	8005e1c <HAL_DMA_IRQHandler+0x1f4>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf14      	ite	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	2300      	moveq	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	e02e      	b.n	8005e30 <HAL_DMA_IRQHandler+0x208>
 8005dd2:	bf00      	nop
 8005dd4:	24000000 	.word	0x24000000
 8005dd8:	1b4e81b5 	.word	0x1b4e81b5
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0204 	bic.w	r2, r2, #4
 8005e42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e58:	f043 0201 	orr.w	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d06e      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a69      	ldr	r2, [pc, #420]	@ (8006020 <HAL_DMA_IRQHandler+0x3f8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d04a      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a67      	ldr	r2, [pc, #412]	@ (8006024 <HAL_DMA_IRQHandler+0x3fc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d045      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a66      	ldr	r2, [pc, #408]	@ (8006028 <HAL_DMA_IRQHandler+0x400>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d040      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a64      	ldr	r2, [pc, #400]	@ (800602c <HAL_DMA_IRQHandler+0x404>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d03b      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a63      	ldr	r2, [pc, #396]	@ (8006030 <HAL_DMA_IRQHandler+0x408>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d036      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a61      	ldr	r2, [pc, #388]	@ (8006034 <HAL_DMA_IRQHandler+0x40c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d031      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a60      	ldr	r2, [pc, #384]	@ (8006038 <HAL_DMA_IRQHandler+0x410>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d02c      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800603c <HAL_DMA_IRQHandler+0x414>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d027      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a5d      	ldr	r2, [pc, #372]	@ (8006040 <HAL_DMA_IRQHandler+0x418>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8006044 <HAL_DMA_IRQHandler+0x41c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01d      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a5a      	ldr	r2, [pc, #360]	@ (8006048 <HAL_DMA_IRQHandler+0x420>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a58      	ldr	r2, [pc, #352]	@ (800604c <HAL_DMA_IRQHandler+0x424>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a57      	ldr	r2, [pc, #348]	@ (8006050 <HAL_DMA_IRQHandler+0x428>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a55      	ldr	r2, [pc, #340]	@ (8006054 <HAL_DMA_IRQHandler+0x42c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a54      	ldr	r2, [pc, #336]	@ (8006058 <HAL_DMA_IRQHandler+0x430>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x2ee>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a52      	ldr	r2, [pc, #328]	@ (800605c <HAL_DMA_IRQHandler+0x434>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d10a      	bne.n	8005f2c <HAL_DMA_IRQHandler+0x304>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e003      	b.n	8005f34 <HAL_DMA_IRQHandler+0x30c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2201      	movs	r2, #1
 8005f42:	409a      	lsls	r2, r3
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0202 	orr.w	r2, r3, #2
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 808f 	beq.w	8006088 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8006020 <HAL_DMA_IRQHandler+0x3f8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04a      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2a      	ldr	r2, [pc, #168]	@ (8006024 <HAL_DMA_IRQHandler+0x3fc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d045      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a29      	ldr	r2, [pc, #164]	@ (8006028 <HAL_DMA_IRQHandler+0x400>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d040      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a27      	ldr	r2, [pc, #156]	@ (800602c <HAL_DMA_IRQHandler+0x404>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d03b      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <HAL_DMA_IRQHandler+0x408>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d036      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <HAL_DMA_IRQHandler+0x40c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d031      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <HAL_DMA_IRQHandler+0x410>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d02c      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a21      	ldr	r2, [pc, #132]	@ (800603c <HAL_DMA_IRQHandler+0x414>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d027      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a20      	ldr	r2, [pc, #128]	@ (8006040 <HAL_DMA_IRQHandler+0x418>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d022      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006044 <HAL_DMA_IRQHandler+0x41c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01d      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <HAL_DMA_IRQHandler+0x420>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d018      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800604c <HAL_DMA_IRQHandler+0x424>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8006050 <HAL_DMA_IRQHandler+0x428>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00e      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <HAL_DMA_IRQHandler+0x42c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a17      	ldr	r2, [pc, #92]	@ (8006058 <HAL_DMA_IRQHandler+0x430>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_DMA_IRQHandler+0x3e2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a15      	ldr	r2, [pc, #84]	@ (800605c <HAL_DMA_IRQHandler+0x434>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d12a      	bne.n	8006060 <HAL_DMA_IRQHandler+0x438>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf14      	ite	ne
 8006018:	2301      	movne	r3, #1
 800601a:	2300      	moveq	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	e023      	b.n	8006068 <HAL_DMA_IRQHandler+0x440>
 8006020:	40020010 	.word	0x40020010
 8006024:	40020028 	.word	0x40020028
 8006028:	40020040 	.word	0x40020040
 800602c:	40020058 	.word	0x40020058
 8006030:	40020070 	.word	0x40020070
 8006034:	40020088 	.word	0x40020088
 8006038:	400200a0 	.word	0x400200a0
 800603c:	400200b8 	.word	0x400200b8
 8006040:	40020410 	.word	0x40020410
 8006044:	40020428 	.word	0x40020428
 8006048:	40020440 	.word	0x40020440
 800604c:	40020458 	.word	0x40020458
 8006050:	40020470 	.word	0x40020470
 8006054:	40020488 	.word	0x40020488
 8006058:	400204a0 	.word	0x400204a0
 800605c:	400204b8 	.word	0x400204b8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2204      	movs	r2, #4
 8006076:	409a      	lsls	r2, r3
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f043 0204 	orr.w	r2, r3, #4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2210      	movs	r2, #16
 8006092:	409a      	lsls	r2, r3
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a6 	beq.w	80061ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a85      	ldr	r2, [pc, #532]	@ (80062b8 <HAL_DMA_IRQHandler+0x690>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04a      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a83      	ldr	r2, [pc, #524]	@ (80062bc <HAL_DMA_IRQHandler+0x694>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d045      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a82      	ldr	r2, [pc, #520]	@ (80062c0 <HAL_DMA_IRQHandler+0x698>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d040      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a80      	ldr	r2, [pc, #512]	@ (80062c4 <HAL_DMA_IRQHandler+0x69c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7f      	ldr	r2, [pc, #508]	@ (80062c8 <HAL_DMA_IRQHandler+0x6a0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d036      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a7d      	ldr	r2, [pc, #500]	@ (80062cc <HAL_DMA_IRQHandler+0x6a4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a7c      	ldr	r2, [pc, #496]	@ (80062d0 <HAL_DMA_IRQHandler+0x6a8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02c      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a7a      	ldr	r2, [pc, #488]	@ (80062d4 <HAL_DMA_IRQHandler+0x6ac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a79      	ldr	r2, [pc, #484]	@ (80062d8 <HAL_DMA_IRQHandler+0x6b0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a77      	ldr	r2, [pc, #476]	@ (80062dc <HAL_DMA_IRQHandler+0x6b4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a76      	ldr	r2, [pc, #472]	@ (80062e0 <HAL_DMA_IRQHandler+0x6b8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a74      	ldr	r2, [pc, #464]	@ (80062e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a73      	ldr	r2, [pc, #460]	@ (80062e8 <HAL_DMA_IRQHandler+0x6c0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a71      	ldr	r2, [pc, #452]	@ (80062ec <HAL_DMA_IRQHandler+0x6c4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a70      	ldr	r2, [pc, #448]	@ (80062f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_DMA_IRQHandler+0x516>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a6e      	ldr	r2, [pc, #440]	@ (80062f4 <HAL_DMA_IRQHandler+0x6cc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10a      	bne.n	8006154 <HAL_DMA_IRQHandler+0x52c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e009      	b.n	8006168 <HAL_DMA_IRQHandler+0x540>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03e      	beq.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2210      	movs	r2, #16
 8006176:	409a      	lsls	r2, r3
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d024      	beq.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	e01f      	b.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
 80061ba:	e016      	b.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0208 	bic.w	r2, r2, #8
 80061d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2220      	movs	r2, #32
 80061f4:	409a      	lsls	r2, r3
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 8110 	beq.w	8006420 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a2c      	ldr	r2, [pc, #176]	@ (80062b8 <HAL_DMA_IRQHandler+0x690>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d04a      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2b      	ldr	r2, [pc, #172]	@ (80062bc <HAL_DMA_IRQHandler+0x694>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d045      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a29      	ldr	r2, [pc, #164]	@ (80062c0 <HAL_DMA_IRQHandler+0x698>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d040      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a28      	ldr	r2, [pc, #160]	@ (80062c4 <HAL_DMA_IRQHandler+0x69c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d03b      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a26      	ldr	r2, [pc, #152]	@ (80062c8 <HAL_DMA_IRQHandler+0x6a0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_DMA_IRQHandler+0x6a4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d031      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a23      	ldr	r2, [pc, #140]	@ (80062d0 <HAL_DMA_IRQHandler+0x6a8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02c      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_DMA_IRQHandler+0x6ac>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d027      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a20      	ldr	r2, [pc, #128]	@ (80062d8 <HAL_DMA_IRQHandler+0x6b0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_DMA_IRQHandler+0x6b4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01d      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <HAL_DMA_IRQHandler+0x6b8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1a      	ldr	r2, [pc, #104]	@ (80062e8 <HAL_DMA_IRQHandler+0x6c0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a19      	ldr	r2, [pc, #100]	@ (80062ec <HAL_DMA_IRQHandler+0x6c4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x678>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <HAL_DMA_IRQHandler+0x6cc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d12b      	bne.n	80062f8 <HAL_DMA_IRQHandler+0x6d0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	2300      	moveq	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e02a      	b.n	800630c <HAL_DMA_IRQHandler+0x6e4>
 80062b6:	bf00      	nop
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8087 	beq.w	8006420 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2220      	movs	r2, #32
 800631c:	409a      	lsls	r2, r3
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b04      	cmp	r3, #4
 800632c:	d139      	bne.n	80063a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0216 	bic.w	r2, r2, #22
 800633c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800634c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_DMA_IRQHandler+0x736>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0208 	bic.w	r2, r2, #8
 800636c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	223f      	movs	r2, #63	@ 0x3f
 8006378:	409a      	lsls	r2, r3
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 834a 	beq.w	8006a2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
          }
          return;
 80063a0:	e344      	b.n	8006a2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d018      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02c      	beq.n	8006420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	e027      	b.n	8006420 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	e01e      	b.n	8006420 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0210 	bic.w	r2, r2, #16
 80063fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8306 	beq.w	8006a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8088 	beq.w	8006548 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2204      	movs	r2, #4
 800643c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a7a      	ldr	r2, [pc, #488]	@ (8006630 <HAL_DMA_IRQHandler+0xa08>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d04a      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a79      	ldr	r2, [pc, #484]	@ (8006634 <HAL_DMA_IRQHandler+0xa0c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d045      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a77      	ldr	r2, [pc, #476]	@ (8006638 <HAL_DMA_IRQHandler+0xa10>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d040      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a76      	ldr	r2, [pc, #472]	@ (800663c <HAL_DMA_IRQHandler+0xa14>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d03b      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a74      	ldr	r2, [pc, #464]	@ (8006640 <HAL_DMA_IRQHandler+0xa18>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d036      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a73      	ldr	r2, [pc, #460]	@ (8006644 <HAL_DMA_IRQHandler+0xa1c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d031      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a71      	ldr	r2, [pc, #452]	@ (8006648 <HAL_DMA_IRQHandler+0xa20>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d02c      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a70      	ldr	r2, [pc, #448]	@ (800664c <HAL_DMA_IRQHandler+0xa24>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d027      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a6e      	ldr	r2, [pc, #440]	@ (8006650 <HAL_DMA_IRQHandler+0xa28>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a6d      	ldr	r2, [pc, #436]	@ (8006654 <HAL_DMA_IRQHandler+0xa2c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d01d      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006658 <HAL_DMA_IRQHandler+0xa30>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6a      	ldr	r2, [pc, #424]	@ (800665c <HAL_DMA_IRQHandler+0xa34>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a68      	ldr	r2, [pc, #416]	@ (8006660 <HAL_DMA_IRQHandler+0xa38>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a67      	ldr	r2, [pc, #412]	@ (8006664 <HAL_DMA_IRQHandler+0xa3c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a65      	ldr	r2, [pc, #404]	@ (8006668 <HAL_DMA_IRQHandler+0xa40>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x8b8>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a64      	ldr	r2, [pc, #400]	@ (800666c <HAL_DMA_IRQHandler+0xa44>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <HAL_DMA_IRQHandler+0x8ca>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e007      	b.n	8006502 <HAL_DMA_IRQHandler+0x8da>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800650a:	429a      	cmp	r2, r3
 800650c:	d307      	bcc.n	800651e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f2      	bne.n	8006502 <HAL_DMA_IRQHandler+0x8da>
 800651c:	e000      	b.n	8006520 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800651e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2203      	movs	r2, #3
 8006532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006536:	e003      	b.n	8006540 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8272 	beq.w	8006a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	e26c      	b.n	8006a36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a43      	ldr	r2, [pc, #268]	@ (8006670 <HAL_DMA_IRQHandler+0xa48>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a42      	ldr	r2, [pc, #264]	@ (8006674 <HAL_DMA_IRQHandler+0xa4c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01d      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a40      	ldr	r2, [pc, #256]	@ (8006678 <HAL_DMA_IRQHandler+0xa50>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a3f      	ldr	r2, [pc, #252]	@ (800667c <HAL_DMA_IRQHandler+0xa54>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a3d      	ldr	r2, [pc, #244]	@ (8006680 <HAL_DMA_IRQHandler+0xa58>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a3c      	ldr	r2, [pc, #240]	@ (8006684 <HAL_DMA_IRQHandler+0xa5c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3a      	ldr	r2, [pc, #232]	@ (8006688 <HAL_DMA_IRQHandler+0xa60>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_DMA_IRQHandler+0x984>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a39      	ldr	r2, [pc, #228]	@ (800668c <HAL_DMA_IRQHandler+0xa64>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <HAL_DMA_IRQHandler+0x988>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <HAL_DMA_IRQHandler+0x98a>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 823f 	beq.w	8006a36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2204      	movs	r2, #4
 80065ca:	409a      	lsls	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80cd 	beq.w	8006770 <HAL_DMA_IRQHandler+0xb48>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80c7 	beq.w	8006770 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2204      	movs	r2, #4
 80065ec:	409a      	lsls	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d049      	beq.n	8006690 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8210 	beq.w	8006a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006618:	e20a      	b.n	8006a30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8206 	beq.w	8006a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800662c:	e200      	b.n	8006a30 <HAL_DMA_IRQHandler+0xe08>
 800662e:	bf00      	nop
 8006630:	40020010 	.word	0x40020010
 8006634:	40020028 	.word	0x40020028
 8006638:	40020040 	.word	0x40020040
 800663c:	40020058 	.word	0x40020058
 8006640:	40020070 	.word	0x40020070
 8006644:	40020088 	.word	0x40020088
 8006648:	400200a0 	.word	0x400200a0
 800664c:	400200b8 	.word	0x400200b8
 8006650:	40020410 	.word	0x40020410
 8006654:	40020428 	.word	0x40020428
 8006658:	40020440 	.word	0x40020440
 800665c:	40020458 	.word	0x40020458
 8006660:	40020470 	.word	0x40020470
 8006664:	40020488 	.word	0x40020488
 8006668:	400204a0 	.word	0x400204a0
 800666c:	400204b8 	.word	0x400204b8
 8006670:	58025408 	.word	0x58025408
 8006674:	5802541c 	.word	0x5802541c
 8006678:	58025430 	.word	0x58025430
 800667c:	58025444 	.word	0x58025444
 8006680:	58025458 	.word	0x58025458
 8006684:	5802546c 	.word	0x5802546c
 8006688:	58025480 	.word	0x58025480
 800668c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d160      	bne.n	800675c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a7f      	ldr	r2, [pc, #508]	@ (800689c <HAL_DMA_IRQHandler+0xc74>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d04a      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a7d      	ldr	r2, [pc, #500]	@ (80068a0 <HAL_DMA_IRQHandler+0xc78>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d045      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7c      	ldr	r2, [pc, #496]	@ (80068a4 <HAL_DMA_IRQHandler+0xc7c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d040      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a7a      	ldr	r2, [pc, #488]	@ (80068a8 <HAL_DMA_IRQHandler+0xc80>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d03b      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a79      	ldr	r2, [pc, #484]	@ (80068ac <HAL_DMA_IRQHandler+0xc84>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d036      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a77      	ldr	r2, [pc, #476]	@ (80068b0 <HAL_DMA_IRQHandler+0xc88>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d031      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a76      	ldr	r2, [pc, #472]	@ (80068b4 <HAL_DMA_IRQHandler+0xc8c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d02c      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a74      	ldr	r2, [pc, #464]	@ (80068b8 <HAL_DMA_IRQHandler+0xc90>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d027      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a73      	ldr	r2, [pc, #460]	@ (80068bc <HAL_DMA_IRQHandler+0xc94>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d022      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a71      	ldr	r2, [pc, #452]	@ (80068c0 <HAL_DMA_IRQHandler+0xc98>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01d      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a70      	ldr	r2, [pc, #448]	@ (80068c4 <HAL_DMA_IRQHandler+0xc9c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d018      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a6e      	ldr	r2, [pc, #440]	@ (80068c8 <HAL_DMA_IRQHandler+0xca0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6d      	ldr	r2, [pc, #436]	@ (80068cc <HAL_DMA_IRQHandler+0xca4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6b      	ldr	r2, [pc, #428]	@ (80068d0 <HAL_DMA_IRQHandler+0xca8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a6a      	ldr	r2, [pc, #424]	@ (80068d4 <HAL_DMA_IRQHandler+0xcac>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_DMA_IRQHandler+0xb12>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a68      	ldr	r2, [pc, #416]	@ (80068d8 <HAL_DMA_IRQHandler+0xcb0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d108      	bne.n	800674c <HAL_DMA_IRQHandler+0xb24>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0208 	bic.w	r2, r2, #8
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e007      	b.n	800675c <HAL_DMA_IRQHandler+0xb34>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8165 	beq.w	8006a30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800676e:	e15f      	b.n	8006a30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2202      	movs	r2, #2
 800677a:	409a      	lsls	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80c5 	beq.w	8006910 <HAL_DMA_IRQHandler+0xce8>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80bf 	beq.w	8006910 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2202      	movs	r2, #2
 800679c:	409a      	lsls	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d018      	beq.n	80067de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 813a 	beq.w	8006a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067c8:	e134      	b.n	8006a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8130 	beq.w	8006a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067dc:	e12a      	b.n	8006a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8089 	bne.w	80068fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a2b      	ldr	r2, [pc, #172]	@ (800689c <HAL_DMA_IRQHandler+0xc74>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04a      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a29      	ldr	r2, [pc, #164]	@ (80068a0 <HAL_DMA_IRQHandler+0xc78>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d045      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a28      	ldr	r2, [pc, #160]	@ (80068a4 <HAL_DMA_IRQHandler+0xc7c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a26      	ldr	r2, [pc, #152]	@ (80068a8 <HAL_DMA_IRQHandler+0xc80>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d03b      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a25      	ldr	r2, [pc, #148]	@ (80068ac <HAL_DMA_IRQHandler+0xc84>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d036      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a23      	ldr	r2, [pc, #140]	@ (80068b0 <HAL_DMA_IRQHandler+0xc88>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d031      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a22      	ldr	r2, [pc, #136]	@ (80068b4 <HAL_DMA_IRQHandler+0xc8c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d02c      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a20      	ldr	r2, [pc, #128]	@ (80068b8 <HAL_DMA_IRQHandler+0xc90>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d027      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1f      	ldr	r2, [pc, #124]	@ (80068bc <HAL_DMA_IRQHandler+0xc94>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <HAL_DMA_IRQHandler+0xc98>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1c      	ldr	r2, [pc, #112]	@ (80068c4 <HAL_DMA_IRQHandler+0xc9c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1a      	ldr	r2, [pc, #104]	@ (80068c8 <HAL_DMA_IRQHandler+0xca0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a19      	ldr	r2, [pc, #100]	@ (80068cc <HAL_DMA_IRQHandler+0xca4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a17      	ldr	r2, [pc, #92]	@ (80068d0 <HAL_DMA_IRQHandler+0xca8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <HAL_DMA_IRQHandler+0xcac>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_DMA_IRQHandler+0xc62>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a14      	ldr	r2, [pc, #80]	@ (80068d8 <HAL_DMA_IRQHandler+0xcb0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d128      	bne.n	80068dc <HAL_DMA_IRQHandler+0xcb4>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0214 	bic.w	r2, r2, #20
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e027      	b.n	80068ec <HAL_DMA_IRQHandler+0xcc4>
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 020a 	bic.w	r2, r2, #10
 80068ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8097 	beq.w	8006a34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800690e:	e091      	b.n	8006a34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2208      	movs	r2, #8
 800691a:	409a      	lsls	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8088 	beq.w	8006a36 <HAL_DMA_IRQHandler+0xe0e>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8082 	beq.w	8006a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a41      	ldr	r2, [pc, #260]	@ (8006a3c <HAL_DMA_IRQHandler+0xe14>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d04a      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a3f      	ldr	r2, [pc, #252]	@ (8006a40 <HAL_DMA_IRQHandler+0xe18>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d045      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3e      	ldr	r2, [pc, #248]	@ (8006a44 <HAL_DMA_IRQHandler+0xe1c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d040      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3c      	ldr	r2, [pc, #240]	@ (8006a48 <HAL_DMA_IRQHandler+0xe20>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d03b      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a3b      	ldr	r2, [pc, #236]	@ (8006a4c <HAL_DMA_IRQHandler+0xe24>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d036      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a39      	ldr	r2, [pc, #228]	@ (8006a50 <HAL_DMA_IRQHandler+0xe28>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d031      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a38      	ldr	r2, [pc, #224]	@ (8006a54 <HAL_DMA_IRQHandler+0xe2c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d02c      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a36      	ldr	r2, [pc, #216]	@ (8006a58 <HAL_DMA_IRQHandler+0xe30>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d027      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a35      	ldr	r2, [pc, #212]	@ (8006a5c <HAL_DMA_IRQHandler+0xe34>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d022      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a33      	ldr	r2, [pc, #204]	@ (8006a60 <HAL_DMA_IRQHandler+0xe38>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01d      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a32      	ldr	r2, [pc, #200]	@ (8006a64 <HAL_DMA_IRQHandler+0xe3c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a30      	ldr	r2, [pc, #192]	@ (8006a68 <HAL_DMA_IRQHandler+0xe40>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2f      	ldr	r2, [pc, #188]	@ (8006a6c <HAL_DMA_IRQHandler+0xe44>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006a70 <HAL_DMA_IRQHandler+0xe48>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a74 <HAL_DMA_IRQHandler+0xe4c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xdaa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006a78 <HAL_DMA_IRQHandler+0xe50>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d108      	bne.n	80069e4 <HAL_DMA_IRQHandler+0xdbc>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 021c 	bic.w	r2, r2, #28
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e007      	b.n	80069f4 <HAL_DMA_IRQHandler+0xdcc>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 020e 	bic.w	r2, r2, #14
 80069f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2201      	movs	r2, #1
 80069fe:	409a      	lsls	r2, r3
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
 8006a2a:	e004      	b.n	8006a36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006a2c:	bf00      	nop
 8006a2e:	e002      	b.n	8006a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a30:	bf00      	nop
 8006a32:	e000      	b.n	8006a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a36:	3728      	adds	r7, #40	@ 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8

08006a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a42      	ldr	r2, [pc, #264]	@ (8006b94 <DMA_CalcBaseAndBitshift+0x118>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d04a      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a41      	ldr	r2, [pc, #260]	@ (8006b98 <DMA_CalcBaseAndBitshift+0x11c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d045      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b9c <DMA_CalcBaseAndBitshift+0x120>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d040      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8006ba0 <DMA_CalcBaseAndBitshift+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d03b      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba4 <DMA_CalcBaseAndBitshift+0x128>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d036      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3b      	ldr	r2, [pc, #236]	@ (8006ba8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d031      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a39      	ldr	r2, [pc, #228]	@ (8006bac <DMA_CalcBaseAndBitshift+0x130>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d02c      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a38      	ldr	r2, [pc, #224]	@ (8006bb0 <DMA_CalcBaseAndBitshift+0x134>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d027      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a36      	ldr	r2, [pc, #216]	@ (8006bb4 <DMA_CalcBaseAndBitshift+0x138>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d022      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a35      	ldr	r2, [pc, #212]	@ (8006bb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01d      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a33      	ldr	r2, [pc, #204]	@ (8006bbc <DMA_CalcBaseAndBitshift+0x140>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d018      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a32      	ldr	r2, [pc, #200]	@ (8006bc0 <DMA_CalcBaseAndBitshift+0x144>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a30      	ldr	r2, [pc, #192]	@ (8006bc4 <DMA_CalcBaseAndBitshift+0x148>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00e      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d009      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2d      	ldr	r2, [pc, #180]	@ (8006bcc <DMA_CalcBaseAndBitshift+0x150>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd0 <DMA_CalcBaseAndBitshift+0x154>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d101      	bne.n	8006b28 <DMA_CalcBaseAndBitshift+0xac>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <DMA_CalcBaseAndBitshift+0xae>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d024      	beq.n	8006b78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	3b10      	subs	r3, #16
 8006b36:	4a27      	ldr	r2, [pc, #156]	@ (8006bd4 <DMA_CalcBaseAndBitshift+0x158>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	4a24      	ldr	r2, [pc, #144]	@ (8006bd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b48:	5cd3      	ldrb	r3, [r2, r3]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d908      	bls.n	8006b68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bdc <DMA_CalcBaseAndBitshift+0x160>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b66:	e00d      	b.n	8006b84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bdc <DMA_CalcBaseAndBitshift+0x160>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b76:	e005      	b.n	8006b84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40020010 	.word	0x40020010
 8006b98:	40020028 	.word	0x40020028
 8006b9c:	40020040 	.word	0x40020040
 8006ba0:	40020058 	.word	0x40020058
 8006ba4:	40020070 	.word	0x40020070
 8006ba8:	40020088 	.word	0x40020088
 8006bac:	400200a0 	.word	0x400200a0
 8006bb0:	400200b8 	.word	0x400200b8
 8006bb4:	40020410 	.word	0x40020410
 8006bb8:	40020428 	.word	0x40020428
 8006bbc:	40020440 	.word	0x40020440
 8006bc0:	40020458 	.word	0x40020458
 8006bc4:	40020470 	.word	0x40020470
 8006bc8:	40020488 	.word	0x40020488
 8006bcc:	400204a0 	.word	0x400204a0
 8006bd0:	400204b8 	.word	0x400204b8
 8006bd4:	aaaaaaab 	.word	0xaaaaaaab
 8006bd8:	08017190 	.word	0x08017190
 8006bdc:	fffffc00 	.word	0xfffffc00

08006be0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d120      	bne.n	8006c36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d858      	bhi.n	8006cae <DMA_CheckFifoParam+0xce>
 8006bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006c04 <DMA_CheckFifoParam+0x24>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c27 	.word	0x08006c27
 8006c0c:	08006c15 	.word	0x08006c15
 8006c10:	08006caf 	.word	0x08006caf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d048      	beq.n	8006cb2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c24:	e045      	b.n	8006cb2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c2e:	d142      	bne.n	8006cb6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c34:	e03f      	b.n	8006cb6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3e:	d123      	bne.n	8006c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d838      	bhi.n	8006cba <DMA_CheckFifoParam+0xda>
 8006c48:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <DMA_CheckFifoParam+0x70>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c67 	.word	0x08006c67
 8006c58:	08006c61 	.word	0x08006c61
 8006c5c:	08006c79 	.word	0x08006c79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
        break;
 8006c64:	e030      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d025      	beq.n	8006cbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c76:	e022      	b.n	8006cbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c80:	d11f      	bne.n	8006cc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c86:	e01c      	b.n	8006cc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d902      	bls.n	8006c96 <DMA_CheckFifoParam+0xb6>
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d003      	beq.n	8006c9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c94:	e018      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
        break;
 8006c9a:	e015      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
    break;
 8006cac:	e00b      	b.n	8006cc6 <DMA_CheckFifoParam+0xe6>
        break;
 8006cae:	bf00      	nop
 8006cb0:	e00a      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cb2:	bf00      	nop
 8006cb4:	e008      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cb6:	bf00      	nop
 8006cb8:	e006      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e004      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <DMA_CheckFifoParam+0xe8>
    break;
 8006cc6:	bf00      	nop
    }
  }

  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop

08006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a38      	ldr	r2, [pc, #224]	@ (8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d022      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a36      	ldr	r2, [pc, #216]	@ (8006dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01d      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	@ (8006dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d018      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a33      	ldr	r2, [pc, #204]	@ (8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a32      	ldr	r2, [pc, #200]	@ (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00e      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a30      	ldr	r2, [pc, #192]	@ (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d009      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	@ (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d004      	beq.n	8006d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2d      	ldr	r2, [pc, #180]	@ (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01a      	beq.n	8006d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	3b08      	subs	r3, #8
 8006d48:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4b26      	ldr	r3, [pc, #152]	@ (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a24      	ldr	r2, [pc, #144]	@ (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d74:	e024      	b.n	8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	3b10      	subs	r3, #16
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d806      	bhi.n	8006d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	@ (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d902      	bls.n	8006d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4b18      	ldr	r3, [pc, #96]	@ (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a16      	ldr	r2, [pc, #88]	@ (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006db0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	2201      	movs	r2, #1
 8006dba:	409a      	lsls	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	58025408 	.word	0x58025408
 8006dd0:	5802541c 	.word	0x5802541c
 8006dd4:	58025430 	.word	0x58025430
 8006dd8:	58025444 	.word	0x58025444
 8006ddc:	58025458 	.word	0x58025458
 8006de0:	5802546c 	.word	0x5802546c
 8006de4:	58025480 	.word	0x58025480
 8006de8:	58025494 	.word	0x58025494
 8006dec:	cccccccd 	.word	0xcccccccd
 8006df0:	16009600 	.word	0x16009600
 8006df4:	58025880 	.word	0x58025880
 8006df8:	aaaaaaab 	.word	0xaaaaaaab
 8006dfc:	400204b8 	.word	0x400204b8
 8006e00:	4002040f 	.word	0x4002040f
 8006e04:	10008200 	.word	0x10008200
 8006e08:	40020880 	.word	0x40020880

08006e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04a      	beq.n	8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d847      	bhi.n	8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a25      	ldr	r2, [pc, #148]	@ (8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a24      	ldr	r2, [pc, #144]	@ (8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a22      	ldr	r2, [pc, #136]	@ (8006ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	@ (8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1c      	ldr	r2, [pc, #112]	@ (8006edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a15      	ldr	r2, [pc, #84]	@ (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e94:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e96:	e009      	b.n	8006eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4b14      	ldr	r3, [pc, #80]	@ (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a11      	ldr	r2, [pc, #68]	@ (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006eaa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	58025408 	.word	0x58025408
 8006ec8:	5802541c 	.word	0x5802541c
 8006ecc:	58025430 	.word	0x58025430
 8006ed0:	58025444 	.word	0x58025444
 8006ed4:	58025458 	.word	0x58025458
 8006ed8:	5802546c 	.word	0x5802546c
 8006edc:	58025480 	.word	0x58025480
 8006ee0:	58025494 	.word	0x58025494
 8006ee4:	1600963f 	.word	0x1600963f
 8006ee8:	58025940 	.word	0x58025940
 8006eec:	1000823f 	.word	0x1000823f
 8006ef0:	40020940 	.word	0x40020940

08006ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b089      	sub	sp, #36	@ 0x24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f02:	4b86      	ldr	r3, [pc, #536]	@ (800711c <HAL_GPIO_Init+0x228>)
 8006f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f06:	e18c      	b.n	8007222 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	fa01 f303 	lsl.w	r3, r1, r3
 8006f14:	4013      	ands	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 817e 	beq.w	800721c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d005      	beq.n	8006f38 <HAL_GPIO_Init+0x44>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d130      	bne.n	8006f9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	2203      	movs	r2, #3
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f6e:	2201      	movs	r2, #1
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43db      	mvns	r3, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	091b      	lsrs	r3, r3, #4
 8006f84:	f003 0201 	and.w	r2, r3, #1
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d017      	beq.n	8006fd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d123      	bne.n	800702a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	08da      	lsrs	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3208      	adds	r2, #8
 8006fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	220f      	movs	r2, #15
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43db      	mvns	r3, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4013      	ands	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	08da      	lsrs	r2, r3, #3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3208      	adds	r2, #8
 8007024:	69b9      	ldr	r1, [r7, #24]
 8007026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2203      	movs	r2, #3
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	4013      	ands	r3, r2
 8007040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 0203 	and.w	r2, r3, #3
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4313      	orrs	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80d8 	beq.w	800721c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800706c:	4b2c      	ldr	r3, [pc, #176]	@ (8007120 <HAL_GPIO_Init+0x22c>)
 800706e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007072:	4a2b      	ldr	r2, [pc, #172]	@ (8007120 <HAL_GPIO_Init+0x22c>)
 8007074:	f043 0302 	orr.w	r3, r3, #2
 8007078:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800707c:	4b28      	ldr	r3, [pc, #160]	@ (8007120 <HAL_GPIO_Init+0x22c>)
 800707e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800708a:	4a26      	ldr	r2, [pc, #152]	@ (8007124 <HAL_GPIO_Init+0x230>)
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	089b      	lsrs	r3, r3, #2
 8007090:	3302      	adds	r3, #2
 8007092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	220f      	movs	r2, #15
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4013      	ands	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007128 <HAL_GPIO_Init+0x234>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d04a      	beq.n	800714c <HAL_GPIO_Init+0x258>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1c      	ldr	r2, [pc, #112]	@ (800712c <HAL_GPIO_Init+0x238>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d02b      	beq.n	8007116 <HAL_GPIO_Init+0x222>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007130 <HAL_GPIO_Init+0x23c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d025      	beq.n	8007112 <HAL_GPIO_Init+0x21e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007134 <HAL_GPIO_Init+0x240>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01f      	beq.n	800710e <HAL_GPIO_Init+0x21a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a19      	ldr	r2, [pc, #100]	@ (8007138 <HAL_GPIO_Init+0x244>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d019      	beq.n	800710a <HAL_GPIO_Init+0x216>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a18      	ldr	r2, [pc, #96]	@ (800713c <HAL_GPIO_Init+0x248>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_GPIO_Init+0x212>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a17      	ldr	r2, [pc, #92]	@ (8007140 <HAL_GPIO_Init+0x24c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00d      	beq.n	8007102 <HAL_GPIO_Init+0x20e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a16      	ldr	r2, [pc, #88]	@ (8007144 <HAL_GPIO_Init+0x250>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <HAL_GPIO_Init+0x20a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_GPIO_Init+0x254>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d101      	bne.n	80070fa <HAL_GPIO_Init+0x206>
 80070f6:	2309      	movs	r3, #9
 80070f8:	e029      	b.n	800714e <HAL_GPIO_Init+0x25a>
 80070fa:	230a      	movs	r3, #10
 80070fc:	e027      	b.n	800714e <HAL_GPIO_Init+0x25a>
 80070fe:	2307      	movs	r3, #7
 8007100:	e025      	b.n	800714e <HAL_GPIO_Init+0x25a>
 8007102:	2306      	movs	r3, #6
 8007104:	e023      	b.n	800714e <HAL_GPIO_Init+0x25a>
 8007106:	2305      	movs	r3, #5
 8007108:	e021      	b.n	800714e <HAL_GPIO_Init+0x25a>
 800710a:	2304      	movs	r3, #4
 800710c:	e01f      	b.n	800714e <HAL_GPIO_Init+0x25a>
 800710e:	2303      	movs	r3, #3
 8007110:	e01d      	b.n	800714e <HAL_GPIO_Init+0x25a>
 8007112:	2302      	movs	r3, #2
 8007114:	e01b      	b.n	800714e <HAL_GPIO_Init+0x25a>
 8007116:	2301      	movs	r3, #1
 8007118:	e019      	b.n	800714e <HAL_GPIO_Init+0x25a>
 800711a:	bf00      	nop
 800711c:	58000080 	.word	0x58000080
 8007120:	58024400 	.word	0x58024400
 8007124:	58000400 	.word	0x58000400
 8007128:	58020000 	.word	0x58020000
 800712c:	58020400 	.word	0x58020400
 8007130:	58020800 	.word	0x58020800
 8007134:	58020c00 	.word	0x58020c00
 8007138:	58021000 	.word	0x58021000
 800713c:	58021400 	.word	0x58021400
 8007140:	58021800 	.word	0x58021800
 8007144:	58021c00 	.word	0x58021c00
 8007148:	58022400 	.word	0x58022400
 800714c:	2300      	movs	r3, #0
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	f002 0203 	and.w	r2, r2, #3
 8007154:	0092      	lsls	r2, r2, #2
 8007156:	4093      	lsls	r3, r2
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4313      	orrs	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800715e:	4938      	ldr	r1, [pc, #224]	@ (8007240 <HAL_GPIO_Init+0x34c>)
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	089b      	lsrs	r3, r3, #2
 8007164:	3302      	adds	r3, #2
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800716c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	43db      	mvns	r3, r3
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4013      	ands	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4013      	ands	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	43db      	mvns	r3, r3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	4013      	ands	r3, r2
 8007200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f ae6b 	bne.w	8006f08 <HAL_GPIO_Init+0x14>
  }
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	3724      	adds	r7, #36	@ 0x24
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	58000400 	.word	0x58000400

08007244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	807b      	strh	r3, [r7, #2]
 8007250:	4613      	mov	r3, r2
 8007252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007254:	787b      	ldrb	r3, [r7, #1]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800725a:	887a      	ldrh	r2, [r7, #2]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007260:	e003      	b.n	800726a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007262:	887b      	ldrh	r3, [r7, #2]
 8007264:	041a      	lsls	r2, r3, #16
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	619a      	str	r2, [r3, #24]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e08b      	b.n	80073a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fa fc08 	bl	8001ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2224      	movs	r2, #36	@ 0x24
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80072c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d107      	bne.n	80072f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	e006      	b.n	8007300 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80072fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d108      	bne.n	800731a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007316:	605a      	str	r2, [r3, #4]
 8007318:	e007      	b.n	800732a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6859      	ldr	r1, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b1d      	ldr	r3, [pc, #116]	@ (80073ac <HAL_I2C_Init+0x134>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69d9      	ldr	r1, [r3, #28]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	02008000 	.word	0x02008000

080073b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d138      	bne.n	8007438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e032      	b.n	800743a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2224      	movs	r2, #36	@ 0x24
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	e000      	b.n	800743a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007438:	2302      	movs	r3, #2
  }
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b20      	cmp	r3, #32
 800745a:	d139      	bne.n	80074d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007466:	2302      	movs	r3, #2
 8007468:	e033      	b.n	80074d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	@ 0x24
 8007476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af02      	add	r7, sp, #8
 80074e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0fe      	b.n	80076ee <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f00b f9d1 	bl	80128ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2203      	movs	r2, #3
 800750e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f007 fd8d 	bl	800f036 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	7c1a      	ldrb	r2, [r3, #16]
 8007524:	f88d 2000 	strb.w	r2, [sp]
 8007528:	3304      	adds	r3, #4
 800752a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800752c:	f007 fc5e 	bl	800edec <USB_CoreInit>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e0d5      	b.n	80076ee <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f007 fd85 	bl	800f058 <USB_SetCurrentMode>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0c6      	b.n	80076ee <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e04a      	b.n	80075fc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007566:	7bfa      	ldrb	r2, [r7, #15]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	3315      	adds	r3, #21
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3314      	adds	r3, #20
 800758a:	7bfa      	ldrb	r2, [r7, #15]
 800758c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800758e:	7bfa      	ldrb	r2, [r7, #15]
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	b298      	uxth	r0, r3
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	332e      	adds	r3, #46	@ 0x2e
 80075a2:	4602      	mov	r2, r0
 80075a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	3318      	adds	r3, #24
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	331c      	adds	r3, #28
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	3320      	adds	r3, #32
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075e2:	7bfa      	ldrb	r2, [r7, #15]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3324      	adds	r3, #36	@ 0x24
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	3301      	adds	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	791b      	ldrb	r3, [r3, #4]
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	429a      	cmp	r2, r3
 8007604:	d3af      	bcc.n	8007566 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
 800760a:	e044      	b.n	8007696 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007622:	7bfa      	ldrb	r2, [r7, #15]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007634:	7bfa      	ldrb	r2, [r7, #15]
 8007636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007638:	7bfa      	ldrb	r2, [r7, #15]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800764e:	7bfa      	ldrb	r2, [r7, #15]
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007664:	7bfa      	ldrb	r2, [r7, #15]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4613      	mov	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800767a:	7bfa      	ldrb	r2, [r7, #15]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	3301      	adds	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	791b      	ldrb	r3, [r3, #4]
 800769a:	7bfa      	ldrb	r2, [r7, #15]
 800769c:	429a      	cmp	r2, r3
 800769e:	d3b5      	bcc.n	800760c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7c1a      	ldrb	r2, [r3, #16]
 80076a8:	f88d 2000 	strb.w	r2, [sp]
 80076ac:	3304      	adds	r3, #4
 80076ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076b0:	f007 fd1e 	bl	800f0f0 <USB_DevInit>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e013      	b.n	80076ee <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7b1b      	ldrb	r3, [r3, #12]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d102      	bne.n	80076e2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f96d 	bl	80089bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f008 fd5d 	bl	80101a6 <USB_DevDisconnect>

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_PCD_Start+0x1c>
 800770e:	2302      	movs	r3, #2
 8007710:	e022      	b.n	8007758 <HAL_PCD_Start+0x62>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800772a:	2b01      	cmp	r3, #1
 800772c:	d105      	bne.n	800773a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f007 fc68 	bl	800f014 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f008 fd0b 	bl	8010164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b08d      	sub	sp, #52	@ 0x34
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f008 fdc9 	bl	801030e <USB_GetMode>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 84b9 	bne.w	80080f6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f008 fd2d 	bl	80101e8 <USB_ReadInterrupts>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 84af 	beq.w	80080f4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f008 fd1a 	bl	80101e8 <USB_ReadInterrupts>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d107      	bne.n	80077ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f002 0202 	and.w	r2, r2, #2
 80077cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f008 fd08 	bl	80101e8 <USB_ReadInterrupts>
 80077d8:	4603      	mov	r3, r0
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d161      	bne.n	80078a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0210 	bic.w	r2, r2, #16
 80077f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	3304      	adds	r3, #4
 8007810:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	0c5b      	lsrs	r3, r3, #17
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	2b02      	cmp	r3, #2
 800781c:	d124      	bne.n	8007868 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007824:	4013      	ands	r3, r2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d035      	beq.n	8007896 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	6a38      	ldr	r0, [r7, #32]
 800783e:	f008 fb3f 	bl	800fec0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800784e:	441a      	add	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007860:	441a      	add	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	615a      	str	r2, [r3, #20]
 8007866:	e016      	b.n	8007896 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	0c5b      	lsrs	r3, r3, #17
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	2b06      	cmp	r3, #6
 8007872:	d110      	bne.n	8007896 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800787a:	2208      	movs	r2, #8
 800787c:	4619      	mov	r1, r3
 800787e:	6a38      	ldr	r0, [r7, #32]
 8007880:	f008 fb1e 	bl	800fec0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007890:	441a      	add	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699a      	ldr	r2, [r3, #24]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0210 	orr.w	r2, r2, #16
 80078a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f008 fc9c 	bl	80101e8 <USB_ReadInterrupts>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078ba:	f040 80a7 	bne.w	8007a0c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f008 fca1 	bl	801020e <USB_ReadDevAllOutEpInterrupt>
 80078cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80078ce:	e099      	b.n	8007a04 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 808e 	beq.w	80079f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f008 fcc5 	bl	8010276 <USB_ReadDevOutEPInterrupt>
 80078ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	461a      	mov	r2, r3
 8007906:	2301      	movs	r3, #1
 8007908:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800790a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fecf 	bl	80086b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00c      	beq.n	8007936 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007928:	461a      	mov	r2, r3
 800792a:	2308      	movs	r3, #8
 800792c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800792e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 ffa5 	bl	8008880 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d008      	beq.n	8007952 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794c:	461a      	mov	r2, r3
 800794e:	2310      	movs	r3, #16
 8007950:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d030      	beq.n	80079be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	2b80      	cmp	r3, #128	@ 0x80
 8007966:	d109      	bne.n	800797c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800797a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800797c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800797e:	4613      	mov	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	3304      	adds	r3, #4
 8007990:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d108      	bne.n	80079ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2200      	movs	r2, #0
 800799e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f00b f878 	bl	8012a9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b8:	461a      	mov	r2, r3
 80079ba:	2302      	movs	r3, #2
 80079bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d4:	461a      	mov	r2, r3
 80079d6:	2320      	movs	r3, #32
 80079d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80079f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	3301      	adds	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f47f af62 	bne.w	80078d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f008 fbe9 	bl	80101e8 <USB_ReadInterrupts>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a20:	f040 80db 	bne.w	8007bda <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f008 fc0a 	bl	8010242 <USB_ReadDevAllInEpInterrupt>
 8007a2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007a34:	e0cd      	b.n	8007bd2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80c2 	beq.w	8007bc6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f008 fc30 	bl	80102b2 <USB_ReadDevInEPInterrupt>
 8007a52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d057      	beq.n	8007b0e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	2201      	movs	r2, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a7e:	4013      	ands	r3, r2
 8007a80:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2301      	movs	r3, #1
 8007a92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	799b      	ldrb	r3, [r3, #6]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d132      	bne.n	8007b02 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3320      	adds	r3, #32
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4403      	add	r3, r0
 8007abc:	331c      	adds	r3, #28
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4419      	add	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4403      	add	r3, r0
 8007ad0:	3320      	adds	r3, #32
 8007ad2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d113      	bne.n	8007b02 <HAL_PCD_IRQHandler+0x3a2>
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3324      	adds	r3, #36	@ 0x24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007afa:	461a      	mov	r2, r3
 8007afc:	2101      	movs	r1, #1
 8007afe:	f008 fc39 	bl	8010374 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f00a ff42 	bl	8012992 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b24:	461a      	mov	r2, r3
 8007b26:	2308      	movs	r3, #8
 8007b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b40:	461a      	mov	r2, r3
 8007b42:	2310      	movs	r3, #16
 8007b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2340      	movs	r3, #64	@ 0x40
 8007b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d023      	beq.n	8007bb4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6e:	6a38      	ldr	r0, [r7, #32]
 8007b70:	f007 fc1c 	bl	800f3ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b76:	4613      	mov	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	3310      	adds	r3, #16
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	4413      	add	r3, r2
 8007b84:	3304      	adds	r3, #4
 8007b86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	78db      	ldrb	r3, [r3, #3]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d108      	bne.n	8007ba2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2200      	movs	r2, #0
 8007b94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f00a ff8f 	bl	8012ac0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fce8 	bl	8008596 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	3301      	adds	r3, #1
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f af2e 	bne.w	8007a36 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f008 fb02 	bl	80101e8 <USB_ReadInterrupts>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bee:	d122      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d108      	bne.n	8007c20 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fef3 	bl	8008a04 <HAL_PCDEx_LPM_Callback>
 8007c1e:	e002      	b.n	8007c26 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f00a ff2d 	bl	8012a80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695a      	ldr	r2, [r3, #20]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f008 fad4 	bl	80101e8 <USB_ReadInterrupts>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c4a:	d112      	bne.n	8007c72 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d102      	bne.n	8007c62 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f00a fee9 	bl	8012a34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f008 fab6 	bl	80101e8 <USB_ReadInterrupts>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c86:	d121      	bne.n	8007ccc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007c96:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d111      	bne.n	8007cc6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	f003 020f 	and.w	r2, r3, #15
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fea0 	bl	8008a04 <HAL_PCDEx_LPM_Callback>
 8007cc4:	e002      	b.n	8007ccc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f00a feb4 	bl	8012a34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f008 fa89 	bl	80101e8 <USB_ReadInterrupts>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce0:	f040 80b7 	bne.w	8007e52 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2110      	movs	r1, #16
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f007 fb54 	bl	800f3ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d04:	2300      	movs	r3, #0
 8007d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d08:	e046      	b.n	8007d98 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	461a      	mov	r2, r3
 8007d18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d62:	0151      	lsls	r1, r2, #5
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	440a      	add	r2, r1
 8007d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	3301      	adds	r3, #1
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	791b      	ldrb	r3, [r3, #4]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d3b2      	bcc.n	8007d0a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007db6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	7bdb      	ldrb	r3, [r3, #15]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d016      	beq.n	8007dee <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd0:	f043 030b 	orr.w	r3, r3, #11
 8007dd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007de6:	f043 030b 	orr.w	r3, r3, #11
 8007dea:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dec:	e015      	b.n	8007e1a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007e02:	4313      	orrs	r3, r2
 8007e04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e14:	f043 030b 	orr.w	r3, r3, #11
 8007e18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e28:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f008 fa99 	bl	8010374 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f008 f9c6 	bl	80101e8 <USB_ReadInterrupts>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e66:	d123      	bne.n	8007eb0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f008 fa5d 	bl	801032c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f007 fb11 	bl	800f49e <USB_GetDevSpeed>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681c      	ldr	r4, [r3, #0]
 8007e88:	f001 fd1c 	bl	80098c4 <HAL_RCC_GetHCLKFreq>
 8007e8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e92:	461a      	mov	r2, r3
 8007e94:	4620      	mov	r0, r4
 8007e96:	f007 f81b 	bl	800eed0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f00a fda1 	bl	80129e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	695a      	ldr	r2, [r3, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f008 f997 	bl	80101e8 <USB_ReadInterrupts>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d10a      	bne.n	8007eda <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f00a fd7e 	bl	80129c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f002 0208 	and.w	r2, r2, #8
 8007ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f008 f982 	bl	80101e8 <USB_ReadInterrupts>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eea:	2b80      	cmp	r3, #128	@ 0x80
 8007eec:	d123      	bne.n	8007f36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007efa:	2301      	movs	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007efe:	e014      	b.n	8007f2a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f04:	4613      	mov	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d105      	bne.n	8007f24 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb08 	bl	8008534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	3301      	adds	r3, #1
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	791b      	ldrb	r3, [r3, #4]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d3e4      	bcc.n	8007f00 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f008 f954 	bl	80101e8 <USB_ReadInterrupts>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f4a:	d13c      	bne.n	8007fc6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f50:	e02b      	b.n	8007faa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3318      	adds	r3, #24
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d115      	bne.n	8007fa4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da12      	bge.n	8007fa4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3317      	adds	r3, #23
 8007f8e:	2201      	movs	r2, #1
 8007f90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fac8 	bl	8008534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d3cd      	bcc.n	8007f52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f008 f90c 	bl	80101e8 <USB_ReadInterrupts>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fda:	d156      	bne.n	800808a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fdc:	2301      	movs	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe0:	e045      	b.n	800806e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12e      	bne.n	8008068 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800800a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800800c:	2b00      	cmp	r3, #0
 800800e:	da2b      	bge.n	8008068 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800801c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008020:	429a      	cmp	r2, r3
 8008022:	d121      	bne.n	8008068 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008028:	4613      	mov	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008036:	2201      	movs	r2, #1
 8008038:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008060:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008064:	6053      	str	r3, [r2, #4]
            break;
 8008066:	e008      	b.n	800807a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806a:	3301      	adds	r3, #1
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	461a      	mov	r2, r3
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	4293      	cmp	r3, r2
 8008078:	d3b3      	bcc.n	8007fe2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f008 f8aa 	bl	80101e8 <USB_ReadInterrupts>
 8008094:	4603      	mov	r3, r0
 8008096:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800809a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809e:	d10a      	bne.n	80080b6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f00a fd1f 	bl	8012ae4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695a      	ldr	r2, [r3, #20]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f008 f894 	bl	80101e8 <USB_ReadInterrupts>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d115      	bne.n	80080f6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f00a fd0f 	bl	8012b00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
 80080f2:	e000      	b.n	80080f6 <HAL_PCD_IRQHandler+0x996>
      return;
 80080f4:	bf00      	nop
    }
  }
}
 80080f6:	3734      	adds	r7, #52	@ 0x34
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}

080080fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_PCD_SetAddress+0x1a>
 8008112:	2302      	movs	r3, #2
 8008114:	e012      	b.n	800813c <HAL_PCD_SetAddress+0x40>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f007 fff3 	bl	8010118 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4603      	mov	r3, r0
 8008154:	70fb      	strb	r3, [r7, #3]
 8008156:	460b      	mov	r3, r1
 8008158:	803b      	strh	r3, [r7, #0]
 800815a:	4613      	mov	r3, r2
 800815c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008166:	2b00      	cmp	r3, #0
 8008168:	da0f      	bge.n	800818a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	f003 020f 	and.w	r2, r3, #15
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	3310      	adds	r3, #16
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4413      	add	r3, r2
 800817e:	3304      	adds	r3, #4
 8008180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	705a      	strb	r2, [r3, #1]
 8008188:	e00f      	b.n	80081aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	4613      	mov	r3, r2
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	3304      	adds	r3, #4
 80081a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80081b6:	883a      	ldrh	r2, [r7, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	78ba      	ldrb	r2, [r7, #2]
 80081c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081d4:	78bb      	ldrb	r3, [r7, #2]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d102      	bne.n	80081e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_PCD_EP_Open+0xaa>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e00e      	b.n	800820c <HAL_PCD_EP_Open+0xc8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f007 f973 	bl	800f4e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800820a:	7afb      	ldrb	r3, [r7, #11]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008224:	2b00      	cmp	r3, #0
 8008226:	da0f      	bge.n	8008248 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	f003 020f 	and.w	r2, r3, #15
 800822e:	4613      	mov	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	3310      	adds	r3, #16
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	3304      	adds	r3, #4
 800823e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	705a      	strb	r2, [r3, #1]
 8008246:	e00f      	b.n	8008268 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	f003 020f 	and.w	r2, r3, #15
 800824e:	4613      	mov	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	3304      	adds	r3, #4
 8008260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_PCD_EP_Close+0x6e>
 800827e:	2302      	movs	r3, #2
 8008280:	e00e      	b.n	80082a0 <HAL_PCD_EP_Close+0x8c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	4618      	mov	r0, r3
 8008292:	f007 f9b1 	bl	800f5f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	607a      	str	r2, [r7, #4]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	460b      	mov	r3, r1
 80082b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	f003 020f 	and.w	r2, r3, #15
 80082be:	4613      	mov	r3, r2
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	3304      	adds	r3, #4
 80082d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2200      	movs	r2, #0
 80082e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2200      	movs	r2, #0
 80082e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	799b      	ldrb	r3, [r3, #6]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d102      	bne.n	8008304 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	799b      	ldrb	r3, [r3, #6]
 800830c:	461a      	mov	r2, r3
 800830e:	6979      	ldr	r1, [r7, #20]
 8008310:	f007 fa4e 	bl	800f7b0 <USB_EPStartXfer>

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	f003 020f 	and.w	r2, r3, #15
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008340:	681b      	ldr	r3, [r3, #0]
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	460b      	mov	r3, r1
 800835c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	f003 020f 	and.w	r2, r3, #15
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	3310      	adds	r3, #16
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2201      	movs	r2, #1
 800838c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	b2da      	uxtb	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	799b      	ldrb	r3, [r3, #6]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d102      	bne.n	80083a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	799b      	ldrb	r3, [r3, #6]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6979      	ldr	r1, [r7, #20]
 80083b4:	f007 f9fc 	bl	800f7b0 <USB_EPStartXfer>

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7912      	ldrb	r2, [r2, #4]
 80083d8:	4293      	cmp	r3, r2
 80083da:	d901      	bls.n	80083e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e04f      	b.n	8008480 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da0f      	bge.n	8008408 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	3310      	adds	r3, #16
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	3304      	adds	r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	705a      	strb	r2, [r3, #1]
 8008406:	e00d      	b.n	8008424 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	3304      	adds	r3, #4
 800841c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	b2da      	uxtb	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_PCD_EP_SetStall+0x82>
 8008440:	2302      	movs	r3, #2
 8008442:	e01d      	b.n	8008480 <HAL_PCD_EP_SetStall+0xbe>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68f9      	ldr	r1, [r7, #12]
 8008452:	4618      	mov	r0, r3
 8008454:	f007 fd8c 	bl	800ff70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7999      	ldrb	r1, [r3, #6]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008470:	461a      	mov	r2, r3
 8008472:	f007 ff7f 	bl	8010374 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	7912      	ldrb	r2, [r2, #4]
 800849e:	4293      	cmp	r3, r2
 80084a0:	d901      	bls.n	80084a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e042      	b.n	800852c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da0f      	bge.n	80084ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	4613      	mov	r3, r2
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	3310      	adds	r3, #16
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	3304      	adds	r3, #4
 80084c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	705a      	strb	r2, [r3, #1]
 80084cc:	e00f      	b.n	80084ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	f003 020f 	and.w	r2, r3, #15
 80084d4:	4613      	mov	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_PCD_EP_ClrStall+0x86>
 800850a:	2302      	movs	r3, #2
 800850c:	e00e      	b.n	800852c <HAL_PCD_EP_ClrStall+0xa4>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	4618      	mov	r0, r3
 800851e:	f007 fd95 	bl	801004c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da0c      	bge.n	8008562 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	4613      	mov	r3, r2
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	3310      	adds	r3, #16
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	4413      	add	r3, r2
 800855c:	3304      	adds	r3, #4
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e00c      	b.n	800857c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	4613      	mov	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	3304      	adds	r3, #4
 800857a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68f9      	ldr	r1, [r7, #12]
 8008582:	4618      	mov	r0, r3
 8008584:	f007 fbb4 	bl	800fcf0 <USB_EPStopXfer>
 8008588:	4603      	mov	r3, r0
 800858a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800858c:	7afb      	ldrb	r3, [r7, #11]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b08a      	sub	sp, #40	@ 0x28
 800859a:	af02      	add	r7, sp, #8
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	3310      	adds	r3, #16
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4413      	add	r3, r2
 80085ba:	3304      	adds	r3, #4
 80085bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	695a      	ldr	r2, [r3, #20]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d901      	bls.n	80085ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e06b      	b.n	80086a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d902      	bls.n	80085ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	3303      	adds	r3, #3
 80085ee:	089b      	lsrs	r3, r3, #2
 80085f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085f2:	e02a      	b.n	800864a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	429a      	cmp	r2, r3
 8008608:	d902      	bls.n	8008610 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3303      	adds	r3, #3
 8008614:	089b      	lsrs	r3, r3, #2
 8008616:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68d9      	ldr	r1, [r3, #12]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	b2da      	uxtb	r2, r3
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4603      	mov	r3, r0
 800862c:	6978      	ldr	r0, [r7, #20]
 800862e:	f007 fc09 	bl	800fe44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	441a      	add	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	429a      	cmp	r2, r3
 800865e:	d809      	bhi.n	8008674 <PCD_WriteEmptyTxFifo+0xde>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008668:	429a      	cmp	r2, r3
 800866a:	d203      	bcs.n	8008674 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1bf      	bne.n	80085f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	691a      	ldr	r2, [r3, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	429a      	cmp	r2, r3
 800867e:	d811      	bhi.n	80086a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	2201      	movs	r2, #1
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	43db      	mvns	r3, r3
 800869a:	6939      	ldr	r1, [r7, #16]
 800869c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086a0:	4013      	ands	r3, r2
 80086a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	333c      	adds	r3, #60	@ 0x3c
 80086c8:	3304      	adds	r3, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	799b      	ldrb	r3, [r3, #6]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d17b      	bne.n	80087de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d015      	beq.n	800871c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	4a61      	ldr	r2, [pc, #388]	@ (8008878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	f240 80b9 	bls.w	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80b3 	beq.w	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	461a      	mov	r2, r3
 8008714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008718:	6093      	str	r3, [r2, #8]
 800871a:	e0a7      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008732:	461a      	mov	r2, r3
 8008734:	2320      	movs	r3, #32
 8008736:	6093      	str	r3, [r2, #8]
 8008738:	e098      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8093 	bne.w	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	4a4b      	ldr	r2, [pc, #300]	@ (8008878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d90f      	bls.n	800876e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008764:	461a      	mov	r2, r3
 8008766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800876a:	6093      	str	r3, [r2, #8]
 800876c:	e07e      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4613      	mov	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1a      	ldr	r2, [r3, #32]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	0159      	lsls	r1, r3, #5
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	440b      	add	r3, r1
 8008790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d114      	bne.n	80087d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087b8:	461a      	mov	r2, r3
 80087ba:	2101      	movs	r1, #1
 80087bc:	f007 fdda 	bl	8010374 <USB_EP0_OutStart>
 80087c0:	e006      	b.n	80087d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	441a      	add	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f00a f8c0 	bl	801295c <HAL_PCD_DataOutStageCallback>
 80087dc:	e046      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4a26      	ldr	r2, [pc, #152]	@ (800887c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d124      	bne.n	8008830 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fc:	461a      	mov	r2, r3
 80087fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008802:	6093      	str	r3, [r2, #8]
 8008804:	e032      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881c:	461a      	mov	r2, r3
 800881e:	2320      	movs	r3, #32
 8008820:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f00a f897 	bl	801295c <HAL_PCD_DataOutStageCallback>
 800882e:	e01d      	b.n	800886c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d114      	bne.n	8008860 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d108      	bne.n	8008860 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008858:	461a      	mov	r2, r3
 800885a:	2100      	movs	r1, #0
 800885c:	f007 fd8a 	bl	8010374 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f00a f878 	bl	801295c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	4f54300a 	.word	0x4f54300a
 800887c:	4f54310a 	.word	0x4f54310a

08008880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	333c      	adds	r3, #60	@ 0x3c
 8008898:	3304      	adds	r3, #4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4a15      	ldr	r2, [pc, #84]	@ (8008908 <PCD_EP_OutSetupPacket_int+0x88>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d90e      	bls.n	80088d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d009      	beq.n	80088d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088cc:	461a      	mov	r2, r3
 80088ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f00a f82f 	bl	8012938 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008908 <PCD_EP_OutSetupPacket_int+0x88>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d90c      	bls.n	80088fc <PCD_EP_OutSetupPacket_int+0x7c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	799b      	ldrb	r3, [r3, #6]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d108      	bne.n	80088fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088f4:	461a      	mov	r2, r3
 80088f6:	2101      	movs	r1, #1
 80088f8:	f007 fd3c 	bl	8010374 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	4f54300a 	.word	0x4f54300a

0800890c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
 8008918:	4613      	mov	r3, r2
 800891a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d107      	bne.n	800893a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800892a:	883b      	ldrh	r3, [r7, #0]
 800892c:	0419      	lsls	r1, r3, #16
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	430a      	orrs	r2, r1
 8008936:	629a      	str	r2, [r3, #40]	@ 0x28
 8008938:	e028      	b.n	800898c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	e00d      	b.n	800896a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	3340      	adds	r3, #64	@ 0x40
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	0c1b      	lsrs	r3, r3, #16
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	3301      	adds	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	7bfa      	ldrb	r2, [r7, #15]
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	3b01      	subs	r3, #1
 8008970:	429a      	cmp	r2, r3
 8008972:	d3ec      	bcc.n	800894e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008974:	883b      	ldrh	r3, [r7, #0]
 8008976:	0418      	lsls	r0, r3, #16
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6819      	ldr	r1, [r3, #0]
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	3b01      	subs	r3, #1
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	4302      	orrs	r2, r0
 8008984:	3340      	adds	r3, #64	@ 0x40
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	887a      	ldrh	r2, [r7, #2]
 80089ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089ea:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <HAL_PCDEx_ActivateLPM+0x44>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	10000003 	.word	0x10000003

08008a04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a24:	4b19      	ldr	r3, [pc, #100]	@ (8008a8c <HAL_PWREx_ConfigSupply+0x70>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d00a      	beq.n	8008a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a30:	4b16      	ldr	r3, [pc, #88]	@ (8008a8c <HAL_PWREx_ConfigSupply+0x70>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d001      	beq.n	8008a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e01f      	b.n	8008a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e01d      	b.n	8008a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a46:	4b11      	ldr	r3, [pc, #68]	@ (8008a8c <HAL_PWREx_ConfigSupply+0x70>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f023 0207 	bic.w	r2, r3, #7
 8008a4e:	490f      	ldr	r1, [pc, #60]	@ (8008a8c <HAL_PWREx_ConfigSupply+0x70>)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a56:	f7fa feff 	bl	8003858 <HAL_GetTick>
 8008a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a5c:	e009      	b.n	8008a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a5e:	f7fa fefb 	bl	8003858 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a6c:	d901      	bls.n	8008a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e007      	b.n	8008a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a72:	4b06      	ldr	r3, [pc, #24]	@ (8008a8c <HAL_PWREx_ConfigSupply+0x70>)
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a7e:	d1ee      	bne.n	8008a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	58024800 	.word	0x58024800

08008a90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008a94:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4a04      	ldr	r2, [pc, #16]	@ (8008aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a9e:	60d3      	str	r3, [r2, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	58024800 	.word	0x58024800

08008ab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	@ 0x30
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e3c8      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8087 	beq.w	8008bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ad0:	4b88      	ldr	r3, [pc, #544]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ada:	4b86      	ldr	r3, [pc, #536]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d007      	beq.n	8008af6 <HAL_RCC_OscConfig+0x46>
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	2b18      	cmp	r3, #24
 8008aea:	d110      	bne.n	8008b0e <HAL_RCC_OscConfig+0x5e>
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d10b      	bne.n	8008b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d06c      	beq.n	8008bdc <HAL_RCC_OscConfig+0x12c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d168      	bne.n	8008bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e3a2      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b16:	d106      	bne.n	8008b26 <HAL_RCC_OscConfig+0x76>
 8008b18:	4b76      	ldr	r3, [pc, #472]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a75      	ldr	r2, [pc, #468]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	e02e      	b.n	8008b84 <HAL_RCC_OscConfig+0xd4>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10c      	bne.n	8008b48 <HAL_RCC_OscConfig+0x98>
 8008b2e:	4b71      	ldr	r3, [pc, #452]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a70      	ldr	r2, [pc, #448]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	4b6e      	ldr	r3, [pc, #440]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	e01d      	b.n	8008b84 <HAL_RCC_OscConfig+0xd4>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b50:	d10c      	bne.n	8008b6c <HAL_RCC_OscConfig+0xbc>
 8008b52:	4b68      	ldr	r3, [pc, #416]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a67      	ldr	r2, [pc, #412]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	4b65      	ldr	r3, [pc, #404]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a64      	ldr	r2, [pc, #400]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	e00b      	b.n	8008b84 <HAL_RCC_OscConfig+0xd4>
 8008b6c:	4b61      	ldr	r3, [pc, #388]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a60      	ldr	r2, [pc, #384]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	4b5e      	ldr	r3, [pc, #376]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d013      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8c:	f7fa fe64 	bl	8003858 <HAL_GetTick>
 8008b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b94:	f7fa fe60 	bl	8003858 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b64      	cmp	r3, #100	@ 0x64
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e356      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ba6:	4b53      	ldr	r3, [pc, #332]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <HAL_RCC_OscConfig+0xe4>
 8008bb2:	e014      	b.n	8008bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb4:	f7fa fe50 	bl	8003858 <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bbc:	f7fa fe4c 	bl	8003858 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b64      	cmp	r3, #100	@ 0x64
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e342      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bce:	4b49      	ldr	r3, [pc, #292]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x10c>
 8008bda:	e000      	b.n	8008bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 808c 	beq.w	8008d04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bec:	4b41      	ldr	r3, [pc, #260]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <HAL_RCC_OscConfig+0x162>
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	2b18      	cmp	r3, #24
 8008c06:	d137      	bne.n	8008c78 <HAL_RCC_OscConfig+0x1c8>
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d132      	bne.n	8008c78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c12:	4b38      	ldr	r3, [pc, #224]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_RCC_OscConfig+0x17a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e314      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c2a:	4b32      	ldr	r3, [pc, #200]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f023 0219 	bic.w	r2, r3, #25
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	492f      	ldr	r1, [pc, #188]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3c:	f7fa fe0c 	bl	8003858 <HAL_GetTick>
 8008c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c44:	f7fa fe08 	bl	8003858 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e2fe      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c56:	4b27      	ldr	r3, [pc, #156]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f0      	beq.n	8008c44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c62:	4b24      	ldr	r3, [pc, #144]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	061b      	lsls	r3, r3, #24
 8008c70:	4920      	ldr	r1, [pc, #128]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c76:	e045      	b.n	8008d04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d026      	beq.n	8008cce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c80:	4b1c      	ldr	r3, [pc, #112]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f023 0219 	bic.w	r2, r3, #25
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	4919      	ldr	r1, [pc, #100]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c92:	f7fa fde1 	bl	8003858 <HAL_GetTick>
 8008c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c98:	e008      	b.n	8008cac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c9a:	f7fa fddd 	bl	8003858 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e2d3      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cac:	4b11      	ldr	r3, [pc, #68]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0f0      	beq.n	8008c9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	490b      	ldr	r1, [pc, #44]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	604b      	str	r3, [r1, #4]
 8008ccc:	e01a      	b.n	8008d04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cce:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a08      	ldr	r2, [pc, #32]	@ (8008cf4 <HAL_RCC_OscConfig+0x244>)
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cda:	f7fa fdbd 	bl	8003858 <HAL_GetTick>
 8008cde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ce0:	e00a      	b.n	8008cf8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ce2:	f7fa fdb9 	bl	8003858 <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d903      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e2af      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
 8008cf4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cf8:	4b96      	ldr	r3, [pc, #600]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1ee      	bne.n	8008ce2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d06a      	beq.n	8008de6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d10:	4b90      	ldr	r3, [pc, #576]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d1a:	4b8e      	ldr	r3, [pc, #568]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d007      	beq.n	8008d36 <HAL_RCC_OscConfig+0x286>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b18      	cmp	r3, #24
 8008d2a:	d11b      	bne.n	8008d64 <HAL_RCC_OscConfig+0x2b4>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d116      	bne.n	8008d64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d36:	4b87      	ldr	r3, [pc, #540]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_RCC_OscConfig+0x29e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	2b80      	cmp	r3, #128	@ 0x80
 8008d48:	d001      	beq.n	8008d4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e282      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d4e:	4b81      	ldr	r3, [pc, #516]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	061b      	lsls	r3, r3, #24
 8008d5c:	497d      	ldr	r1, [pc, #500]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d62:	e040      	b.n	8008de6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d023      	beq.n	8008db4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d6c:	4b79      	ldr	r3, [pc, #484]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a78      	ldr	r2, [pc, #480]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7fa fd6e 	bl	8003858 <HAL_GetTick>
 8008d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d80:	f7fa fd6a 	bl	8003858 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e260      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d92:	4b70      	ldr	r3, [pc, #448]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0f0      	beq.n	8008d80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	061b      	lsls	r3, r3, #24
 8008dac:	4969      	ldr	r1, [pc, #420]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60cb      	str	r3, [r1, #12]
 8008db2:	e018      	b.n	8008de6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008db4:	4b67      	ldr	r3, [pc, #412]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a66      	ldr	r2, [pc, #408]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fa fd4a 	bl	8003858 <HAL_GetTick>
 8008dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008dc8:	f7fa fd46 	bl	8003858 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e23c      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dda:	4b5e      	ldr	r3, [pc, #376]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d036      	beq.n	8008e60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d019      	beq.n	8008e2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dfa:	4b56      	ldr	r3, [pc, #344]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfe:	4a55      	ldr	r2, [pc, #340]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e00:	f043 0301 	orr.w	r3, r3, #1
 8008e04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e06:	f7fa fd27 	bl	8003858 <HAL_GetTick>
 8008e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e0c:	e008      	b.n	8008e20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e0e:	f7fa fd23 	bl	8003858 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e219      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e20:	4b4c      	ldr	r3, [pc, #304]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0f0      	beq.n	8008e0e <HAL_RCC_OscConfig+0x35e>
 8008e2c:	e018      	b.n	8008e60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e2e:	4b49      	ldr	r3, [pc, #292]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e32:	4a48      	ldr	r2, [pc, #288]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3a:	f7fa fd0d 	bl	8003858 <HAL_GetTick>
 8008e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e42:	f7fa fd09 	bl	8003858 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e1ff      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e54:	4b3f      	ldr	r3, [pc, #252]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1f0      	bne.n	8008e42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d036      	beq.n	8008eda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d019      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e74:	4b37      	ldr	r3, [pc, #220]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a36      	ldr	r2, [pc, #216]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e80:	f7fa fcea 	bl	8003858 <HAL_GetTick>
 8008e84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e88:	f7fa fce6 	bl	8003858 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e1dc      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f0      	beq.n	8008e88 <HAL_RCC_OscConfig+0x3d8>
 8008ea6:	e018      	b.n	8008eda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a29      	ldr	r2, [pc, #164]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008eae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008eb4:	f7fa fcd0 	bl	8003858 <HAL_GetTick>
 8008eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ebc:	f7fa fccc 	bl	8003858 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e1c2      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ece:	4b21      	ldr	r3, [pc, #132]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f0      	bne.n	8008ebc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 8086 	beq.w	8008ff4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f58 <HAL_RCC_OscConfig+0x4a8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1a      	ldr	r2, [pc, #104]	@ (8008f58 <HAL_RCC_OscConfig+0x4a8>)
 8008eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ef4:	f7fa fcb0 	bl	8003858 <HAL_GetTick>
 8008ef8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008efc:	f7fa fcac 	bl	8003858 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b64      	cmp	r3, #100	@ 0x64
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e1a2      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f0e:	4b12      	ldr	r3, [pc, #72]	@ (8008f58 <HAL_RCC_OscConfig+0x4a8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0f0      	beq.n	8008efc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d106      	bne.n	8008f30 <HAL_RCC_OscConfig+0x480>
 8008f22:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f26:	4a0b      	ldr	r2, [pc, #44]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f28:	f043 0301 	orr.w	r3, r3, #1
 8008f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f2e:	e032      	b.n	8008f96 <HAL_RCC_OscConfig+0x4e6>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d111      	bne.n	8008f5c <HAL_RCC_OscConfig+0x4ac>
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3c:	4a05      	ldr	r2, [pc, #20]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f44:	4b03      	ldr	r3, [pc, #12]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f48:	4a02      	ldr	r2, [pc, #8]	@ (8008f54 <HAL_RCC_OscConfig+0x4a4>)
 8008f4a:	f023 0304 	bic.w	r3, r3, #4
 8008f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f50:	e021      	b.n	8008f96 <HAL_RCC_OscConfig+0x4e6>
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
 8008f58:	58024800 	.word	0x58024800
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b05      	cmp	r3, #5
 8008f62:	d10c      	bne.n	8008f7e <HAL_RCC_OscConfig+0x4ce>
 8008f64:	4b83      	ldr	r3, [pc, #524]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f68:	4a82      	ldr	r2, [pc, #520]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f6a:	f043 0304 	orr.w	r3, r3, #4
 8008f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f70:	4b80      	ldr	r3, [pc, #512]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f74:	4a7f      	ldr	r2, [pc, #508]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f7c:	e00b      	b.n	8008f96 <HAL_RCC_OscConfig+0x4e6>
 8008f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f82:	4a7c      	ldr	r2, [pc, #496]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f8e:	4a79      	ldr	r2, [pc, #484]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008f90:	f023 0304 	bic.w	r3, r3, #4
 8008f94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d015      	beq.n	8008fca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f9e:	f7fa fc5b 	bl	8003858 <HAL_GetTick>
 8008fa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fa4:	e00a      	b.n	8008fbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fa6:	f7fa fc57 	bl	8003858 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e14b      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0ee      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x4f6>
 8008fc8:	e014      	b.n	8008ff4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fca:	f7fa fc45 	bl	8003858 <HAL_GetTick>
 8008fce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fd0:	e00a      	b.n	8008fe8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fd2:	f7fa fc41 	bl	8003858 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e135      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fe8:	4b62      	ldr	r3, [pc, #392]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8008fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1ee      	bne.n	8008fd2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 812a 	beq.w	8009252 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009006:	2b18      	cmp	r3, #24
 8009008:	f000 80ba 	beq.w	8009180 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	2b02      	cmp	r3, #2
 8009012:	f040 8095 	bne.w	8009140 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009016:	4b57      	ldr	r3, [pc, #348]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a56      	ldr	r2, [pc, #344]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800901c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009022:	f7fa fc19 	bl	8003858 <HAL_GetTick>
 8009026:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009028:	e008      	b.n	800903c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800902a:	f7fa fc15 	bl	8003858 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d901      	bls.n	800903c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e10b      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800903c:	4b4d      	ldr	r3, [pc, #308]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f0      	bne.n	800902a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009048:	4b4a      	ldr	r3, [pc, #296]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800904a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800904c:	4b4a      	ldr	r3, [pc, #296]	@ (8009178 <HAL_RCC_OscConfig+0x6c8>)
 800904e:	4013      	ands	r3, r2
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009058:	0112      	lsls	r2, r2, #4
 800905a:	430a      	orrs	r2, r1
 800905c:	4945      	ldr	r1, [pc, #276]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800905e:	4313      	orrs	r3, r2
 8009060:	628b      	str	r3, [r1, #40]	@ 0x28
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009066:	3b01      	subs	r3, #1
 8009068:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009070:	3b01      	subs	r3, #1
 8009072:	025b      	lsls	r3, r3, #9
 8009074:	b29b      	uxth	r3, r3
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	3b01      	subs	r3, #1
 800907e:	041b      	lsls	r3, r3, #16
 8009080:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908a:	3b01      	subs	r3, #1
 800908c:	061b      	lsls	r3, r3, #24
 800908e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009092:	4938      	ldr	r1, [pc, #224]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009094:	4313      	orrs	r3, r2
 8009096:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009098:	4b36      	ldr	r3, [pc, #216]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800909a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909c:	4a35      	ldr	r2, [pc, #212]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800909e:	f023 0301 	bic.w	r3, r3, #1
 80090a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090a4:	4b33      	ldr	r3, [pc, #204]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a8:	4b34      	ldr	r3, [pc, #208]	@ (800917c <HAL_RCC_OscConfig+0x6cc>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80090b0:	00d2      	lsls	r2, r2, #3
 80090b2:	4930      	ldr	r1, [pc, #192]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090bc:	f023 020c 	bic.w	r2, r3, #12
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c4:	492b      	ldr	r1, [pc, #172]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	f023 0202 	bic.w	r2, r3, #2
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d6:	4927      	ldr	r1, [pc, #156]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090dc:	4b25      	ldr	r3, [pc, #148]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	4a24      	ldr	r2, [pc, #144]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e8:	4b22      	ldr	r3, [pc, #136]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	4a21      	ldr	r2, [pc, #132]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 80090fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009100:	4b1c      	ldr	r3, [pc, #112]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009104:	4a1b      	ldr	r2, [pc, #108]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800910c:	4b19      	ldr	r3, [pc, #100]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a18      	ldr	r2, [pc, #96]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fa fb9e 	bl	8003858 <HAL_GetTick>
 800911c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009120:	f7fa fb9a 	bl	8003858 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e090      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009132:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0f0      	beq.n	8009120 <HAL_RCC_OscConfig+0x670>
 800913e:	e088      	b.n	8009252 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009140:	4b0c      	ldr	r3, [pc, #48]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a0b      	ldr	r2, [pc, #44]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800914a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914c:	f7fa fb84 	bl	8003858 <HAL_GetTick>
 8009150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009154:	f7fa fb80 	bl	8003858 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e076      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009166:	4b03      	ldr	r3, [pc, #12]	@ (8009174 <HAL_RCC_OscConfig+0x6c4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1f0      	bne.n	8009154 <HAL_RCC_OscConfig+0x6a4>
 8009172:	e06e      	b.n	8009252 <HAL_RCC_OscConfig+0x7a2>
 8009174:	58024400 	.word	0x58024400
 8009178:	fffffc0c 	.word	0xfffffc0c
 800917c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009180:	4b36      	ldr	r3, [pc, #216]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009184:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009186:	4b35      	ldr	r3, [pc, #212]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	2b01      	cmp	r3, #1
 8009192:	d031      	beq.n	80091f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f003 0203 	and.w	r2, r3, #3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800919e:	429a      	cmp	r2, r3
 80091a0:	d12a      	bne.n	80091f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	091b      	lsrs	r3, r3, #4
 80091a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d122      	bne.n	80091f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091be:	429a      	cmp	r2, r3
 80091c0:	d11a      	bne.n	80091f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	0a5b      	lsrs	r3, r3, #9
 80091c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d111      	bne.n	80091f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	0c1b      	lsrs	r3, r3, #16
 80091d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d108      	bne.n	80091f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	0e1b      	lsrs	r3, r3, #24
 80091ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e02b      	b.n	8009254 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80091fc:	4b17      	ldr	r3, [pc, #92]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 80091fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009206:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	d01f      	beq.n	8009252 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009212:	4b12      	ldr	r3, [pc, #72]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009216:	4a11      	ldr	r2, [pc, #68]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800921e:	f7fa fb1b 	bl	8003858 <HAL_GetTick>
 8009222:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009224:	bf00      	nop
 8009226:	f7fa fb17 	bl	8003858 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	4293      	cmp	r3, r2
 8009230:	d0f9      	beq.n	8009226 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009232:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009236:	4b0a      	ldr	r3, [pc, #40]	@ (8009260 <HAL_RCC_OscConfig+0x7b0>)
 8009238:	4013      	ands	r3, r2
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800923e:	00d2      	lsls	r2, r2, #3
 8009240:	4906      	ldr	r1, [pc, #24]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009242:	4313      	orrs	r3, r2
 8009244:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009246:	4b05      	ldr	r3, [pc, #20]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 8009248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924a:	4a04      	ldr	r2, [pc, #16]	@ (800925c <HAL_RCC_OscConfig+0x7ac>)
 800924c:	f043 0301 	orr.w	r3, r3, #1
 8009250:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3730      	adds	r7, #48	@ 0x30
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	58024400 	.word	0x58024400
 8009260:	ffff0007 	.word	0xffff0007

08009264 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e19c      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009278:	4b8a      	ldr	r3, [pc, #552]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d910      	bls.n	80092a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009286:	4b87      	ldr	r3, [pc, #540]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f023 020f 	bic.w	r2, r3, #15
 800928e:	4985      	ldr	r1, [pc, #532]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	4313      	orrs	r3, r2
 8009294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009296:	4b83      	ldr	r3, [pc, #524]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d001      	beq.n	80092a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e184      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d010      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691a      	ldr	r2, [r3, #16]
 80092b8:	4b7b      	ldr	r3, [pc, #492]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d908      	bls.n	80092d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092c4:	4b78      	ldr	r3, [pc, #480]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4975      	ldr	r1, [pc, #468]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d010      	beq.n	8009304 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	4b70      	ldr	r3, [pc, #448]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d908      	bls.n	8009304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092f2:	4b6d      	ldr	r3, [pc, #436]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	496a      	ldr	r1, [pc, #424]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009300:	4313      	orrs	r3, r2
 8009302:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0310 	and.w	r3, r3, #16
 800930c:	2b00      	cmp	r3, #0
 800930e:	d010      	beq.n	8009332 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	4b64      	ldr	r3, [pc, #400]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800931c:	429a      	cmp	r2, r3
 800931e:	d908      	bls.n	8009332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009320:	4b61      	ldr	r3, [pc, #388]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	495e      	ldr	r1, [pc, #376]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 800932e:	4313      	orrs	r3, r2
 8009330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	4b59      	ldr	r3, [pc, #356]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800934a:	429a      	cmp	r2, r3
 800934c:	d908      	bls.n	8009360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800934e:	4b56      	ldr	r3, [pc, #344]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	4953      	ldr	r1, [pc, #332]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 800935c:	4313      	orrs	r3, r2
 800935e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d010      	beq.n	800938e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	4b4d      	ldr	r3, [pc, #308]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	429a      	cmp	r2, r3
 800937a:	d908      	bls.n	800938e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800937c:	4b4a      	ldr	r3, [pc, #296]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f023 020f 	bic.w	r2, r3, #15
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	4947      	ldr	r1, [pc, #284]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 800938a:	4313      	orrs	r3, r2
 800938c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d055      	beq.n	8009446 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800939a:	4b43      	ldr	r3, [pc, #268]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	4940      	ldr	r1, [pc, #256]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d107      	bne.n	80093c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093b4:	4b3c      	ldr	r3, [pc, #240]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d121      	bne.n	8009404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0f6      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d107      	bne.n	80093dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093cc:	4b36      	ldr	r3, [pc, #216]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d115      	bne.n	8009404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e0ea      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d107      	bne.n	80093f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093e4:	4b30      	ldr	r3, [pc, #192]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d109      	bne.n	8009404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e0de      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093f4:	4b2c      	ldr	r3, [pc, #176]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0d6      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009404:	4b28      	ldr	r3, [pc, #160]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f023 0207 	bic.w	r2, r3, #7
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4925      	ldr	r1, [pc, #148]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009412:	4313      	orrs	r3, r2
 8009414:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009416:	f7fa fa1f 	bl	8003858 <HAL_GetTick>
 800941a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800941c:	e00a      	b.n	8009434 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800941e:	f7fa fa1b 	bl	8003858 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800942c:	4293      	cmp	r3, r2
 800942e:	d901      	bls.n	8009434 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e0be      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009434:	4b1c      	ldr	r3, [pc, #112]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	429a      	cmp	r2, r3
 8009444:	d1eb      	bne.n	800941e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d010      	beq.n	8009474 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	429a      	cmp	r2, r3
 8009460:	d208      	bcs.n	8009474 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009462:	4b11      	ldr	r3, [pc, #68]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f023 020f 	bic.w	r2, r3, #15
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	490e      	ldr	r1, [pc, #56]	@ (80094a8 <HAL_RCC_ClockConfig+0x244>)
 8009470:	4313      	orrs	r3, r2
 8009472:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009474:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d214      	bcs.n	80094ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009482:	4b08      	ldr	r3, [pc, #32]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f023 020f 	bic.w	r2, r3, #15
 800948a:	4906      	ldr	r1, [pc, #24]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	4313      	orrs	r3, r2
 8009490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009492:	4b04      	ldr	r3, [pc, #16]	@ (80094a4 <HAL_RCC_ClockConfig+0x240>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d005      	beq.n	80094ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e086      	b.n	80095b2 <HAL_RCC_ClockConfig+0x34e>
 80094a4:	52002000 	.word	0x52002000
 80094a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d010      	beq.n	80094da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	4b3f      	ldr	r3, [pc, #252]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d208      	bcs.n	80094da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094c8:	4b3c      	ldr	r3, [pc, #240]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	4939      	ldr	r1, [pc, #228]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d010      	beq.n	8009508 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695a      	ldr	r2, [r3, #20]
 80094ea:	4b34      	ldr	r3, [pc, #208]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d208      	bcs.n	8009508 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094f6:	4b31      	ldr	r3, [pc, #196]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	492e      	ldr	r1, [pc, #184]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009504:	4313      	orrs	r3, r2
 8009506:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	4b28      	ldr	r3, [pc, #160]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009520:	429a      	cmp	r2, r3
 8009522:	d208      	bcs.n	8009536 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009524:	4b25      	ldr	r3, [pc, #148]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	4922      	ldr	r1, [pc, #136]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009532:	4313      	orrs	r3, r2
 8009534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d010      	beq.n	8009564 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	4b1d      	ldr	r3, [pc, #116]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800954e:	429a      	cmp	r2, r3
 8009550:	d208      	bcs.n	8009564 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009552:	4b1a      	ldr	r3, [pc, #104]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	4917      	ldr	r1, [pc, #92]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009560:	4313      	orrs	r3, r2
 8009562:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009564:	f000 f834 	bl	80095d0 <HAL_RCC_GetSysClockFreq>
 8009568:	4602      	mov	r2, r0
 800956a:	4b14      	ldr	r3, [pc, #80]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	4912      	ldr	r1, [pc, #72]	@ (80095c0 <HAL_RCC_ClockConfig+0x35c>)
 8009576:	5ccb      	ldrb	r3, [r1, r3]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009582:	4b0e      	ldr	r3, [pc, #56]	@ (80095bc <HAL_RCC_ClockConfig+0x358>)
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	4a0d      	ldr	r2, [pc, #52]	@ (80095c0 <HAL_RCC_ClockConfig+0x35c>)
 800958c:	5cd3      	ldrb	r3, [r2, r3]
 800958e:	f003 031f 	and.w	r3, r3, #31
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	4a0a      	ldr	r2, [pc, #40]	@ (80095c4 <HAL_RCC_ClockConfig+0x360>)
 800959a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800959c:	4a0a      	ldr	r2, [pc, #40]	@ (80095c8 <HAL_RCC_ClockConfig+0x364>)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80095a2:	4b0a      	ldr	r3, [pc, #40]	@ (80095cc <HAL_RCC_ClockConfig+0x368>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fa f90c 	bl	80037c4 <HAL_InitTick>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	58024400 	.word	0x58024400
 80095c0:	08017180 	.word	0x08017180
 80095c4:	24000004 	.word	0x24000004
 80095c8:	24000000 	.word	0x24000000
 80095cc:	24000008 	.word	0x24000008

080095d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b089      	sub	sp, #36	@ 0x24
 80095d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095d6:	4bb3      	ldr	r3, [pc, #716]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095de:	2b18      	cmp	r3, #24
 80095e0:	f200 8155 	bhi.w	800988e <HAL_RCC_GetSysClockFreq+0x2be>
 80095e4:	a201      	add	r2, pc, #4	@ (adr r2, 80095ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009651 	.word	0x08009651
 80095f0:	0800988f 	.word	0x0800988f
 80095f4:	0800988f 	.word	0x0800988f
 80095f8:	0800988f 	.word	0x0800988f
 80095fc:	0800988f 	.word	0x0800988f
 8009600:	0800988f 	.word	0x0800988f
 8009604:	0800988f 	.word	0x0800988f
 8009608:	0800988f 	.word	0x0800988f
 800960c:	08009677 	.word	0x08009677
 8009610:	0800988f 	.word	0x0800988f
 8009614:	0800988f 	.word	0x0800988f
 8009618:	0800988f 	.word	0x0800988f
 800961c:	0800988f 	.word	0x0800988f
 8009620:	0800988f 	.word	0x0800988f
 8009624:	0800988f 	.word	0x0800988f
 8009628:	0800988f 	.word	0x0800988f
 800962c:	0800967d 	.word	0x0800967d
 8009630:	0800988f 	.word	0x0800988f
 8009634:	0800988f 	.word	0x0800988f
 8009638:	0800988f 	.word	0x0800988f
 800963c:	0800988f 	.word	0x0800988f
 8009640:	0800988f 	.word	0x0800988f
 8009644:	0800988f 	.word	0x0800988f
 8009648:	0800988f 	.word	0x0800988f
 800964c:	08009683 	.word	0x08009683
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009650:	4b94      	ldr	r3, [pc, #592]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800965c:	4b91      	ldr	r3, [pc, #580]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	08db      	lsrs	r3, r3, #3
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	4a90      	ldr	r2, [pc, #576]	@ (80098a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009668:	fa22 f303 	lsr.w	r3, r2, r3
 800966c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800966e:	e111      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009670:	4b8d      	ldr	r3, [pc, #564]	@ (80098a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009672:	61bb      	str	r3, [r7, #24]
      break;
 8009674:	e10e      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009676:	4b8d      	ldr	r3, [pc, #564]	@ (80098ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009678:	61bb      	str	r3, [r7, #24]
      break;
 800967a:	e10b      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800967c:	4b8c      	ldr	r3, [pc, #560]	@ (80098b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800967e:	61bb      	str	r3, [r7, #24]
      break;
 8009680:	e108      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009682:	4b88      	ldr	r3, [pc, #544]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800968c:	4b85      	ldr	r3, [pc, #532]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009690:	091b      	lsrs	r3, r3, #4
 8009692:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009696:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009698:	4b82      	ldr	r3, [pc, #520]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80096a2:	4b80      	ldr	r3, [pc, #512]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a6:	08db      	lsrs	r3, r3, #3
 80096a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	fb02 f303 	mul.w	r3, r2, r3
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 80e1 	beq.w	8009888 <HAL_RCC_GetSysClockFreq+0x2b8>
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	f000 8083 	beq.w	80097d4 <HAL_RCC_GetSysClockFreq+0x204>
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f200 80a1 	bhi.w	8009818 <HAL_RCC_GetSysClockFreq+0x248>
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <HAL_RCC_GetSysClockFreq+0x114>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d056      	beq.n	8009790 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096e2:	e099      	b.n	8009818 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e4:	4b6f      	ldr	r3, [pc, #444]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d02d      	beq.n	800974c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096f0:	4b6c      	ldr	r3, [pc, #432]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	08db      	lsrs	r3, r3, #3
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	4a6b      	ldr	r2, [pc, #428]	@ (80098a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009700:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	ee07 3a90 	vmov	s15, r3
 8009708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971a:	4b62      	ldr	r3, [pc, #392]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972a:	ed97 6a02 	vldr	s12, [r7, #8]
 800972e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800974a:	e087      	b.n	800985c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80098b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800975a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975e:	4b51      	ldr	r3, [pc, #324]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009772:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800978e:	e065      	b.n	800985c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80098bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800979e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a2:	4b40      	ldr	r3, [pc, #256]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80097b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097d2:	e043      	b.n	800985c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80098c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e6:	4b2f      	ldr	r3, [pc, #188]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80097fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800980a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800980e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009816:	e021      	b.n	800985c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80098bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982a:	4b1e      	ldr	r3, [pc, #120]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800982c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983a:	ed97 6a02 	vldr	s12, [r7, #8]
 800983e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800984e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800985a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800985c:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009860:	0a5b      	lsrs	r3, r3, #9
 8009862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009866:	3301      	adds	r3, #1
 8009868:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009874:	edd7 6a07 	vldr	s13, [r7, #28]
 8009878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009880:	ee17 3a90 	vmov	r3, s15
 8009884:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009886:	e005      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	61bb      	str	r3, [r7, #24]
      break;
 800988c:	e002      	b.n	8009894 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800988e:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009890:	61bb      	str	r3, [r7, #24]
      break;
 8009892:	bf00      	nop
  }

  return sysclockfreq;
 8009894:	69bb      	ldr	r3, [r7, #24]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3724      	adds	r7, #36	@ 0x24
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	58024400 	.word	0x58024400
 80098a8:	03d09000 	.word	0x03d09000
 80098ac:	003d0900 	.word	0x003d0900
 80098b0:	016e3600 	.word	0x016e3600
 80098b4:	46000000 	.word	0x46000000
 80098b8:	4c742400 	.word	0x4c742400
 80098bc:	4a742400 	.word	0x4a742400
 80098c0:	4bb71b00 	.word	0x4bb71b00

080098c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098ca:	f7ff fe81 	bl	80095d0 <HAL_RCC_GetSysClockFreq>
 80098ce:	4602      	mov	r2, r0
 80098d0:	4b10      	ldr	r3, [pc, #64]	@ (8009914 <HAL_RCC_GetHCLKFreq+0x50>)
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	490f      	ldr	r1, [pc, #60]	@ (8009918 <HAL_RCC_GetHCLKFreq+0x54>)
 80098dc:	5ccb      	ldrb	r3, [r1, r3]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <HAL_RCC_GetHCLKFreq+0x50>)
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	4a09      	ldr	r2, [pc, #36]	@ (8009918 <HAL_RCC_GetHCLKFreq+0x54>)
 80098f2:	5cd3      	ldrb	r3, [r2, r3]
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	fa22 f303 	lsr.w	r3, r2, r3
 80098fe:	4a07      	ldr	r2, [pc, #28]	@ (800991c <HAL_RCC_GetHCLKFreq+0x58>)
 8009900:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009902:	4a07      	ldr	r2, [pc, #28]	@ (8009920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009908:	4b04      	ldr	r3, [pc, #16]	@ (800991c <HAL_RCC_GetHCLKFreq+0x58>)
 800990a:	681b      	ldr	r3, [r3, #0]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	58024400 	.word	0x58024400
 8009918:	08017180 	.word	0x08017180
 800991c:	24000004 	.word	0x24000004
 8009920:	24000000 	.word	0x24000000

08009924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009928:	f7ff ffcc 	bl	80098c4 <HAL_RCC_GetHCLKFreq>
 800992c:	4602      	mov	r2, r0
 800992e:	4b06      	ldr	r3, [pc, #24]	@ (8009948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	091b      	lsrs	r3, r3, #4
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	4904      	ldr	r1, [pc, #16]	@ (800994c <HAL_RCC_GetPCLK1Freq+0x28>)
 800993a:	5ccb      	ldrb	r3, [r1, r3]
 800993c:	f003 031f 	and.w	r3, r3, #31
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009944:	4618      	mov	r0, r3
 8009946:	bd80      	pop	{r7, pc}
 8009948:	58024400 	.word	0x58024400
 800994c:	08017180 	.word	0x08017180

08009950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009954:	f7ff ffb6 	bl	80098c4 <HAL_RCC_GetHCLKFreq>
 8009958:	4602      	mov	r2, r0
 800995a:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	4904      	ldr	r1, [pc, #16]	@ (8009978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009966:	5ccb      	ldrb	r3, [r1, r3]
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009970:	4618      	mov	r0, r3
 8009972:	bd80      	pop	{r7, pc}
 8009974:	58024400 	.word	0x58024400
 8009978:	08017180 	.word	0x08017180

0800997c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800997c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009980:	b0c6      	sub	sp, #280	@ 0x118
 8009982:	af00      	add	r7, sp, #0
 8009984:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80099a0:	2500      	movs	r5, #0
 80099a2:	ea54 0305 	orrs.w	r3, r4, r5
 80099a6:	d049      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099b2:	d02f      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80099b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099b8:	d828      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80099ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099be:	d01a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80099c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099c4:	d822      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80099ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ce:	d007      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80099d0:	e01c      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d2:	4bab      	ldr	r3, [pc, #684]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d6:	4aaa      	ldr	r2, [pc, #680]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80099de:	e01a      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e4:	3308      	adds	r3, #8
 80099e6:	2102      	movs	r1, #2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 fa49 	bl	800be80 <RCCEx_PLL2_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80099f4:	e00f      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fa:	3328      	adds	r3, #40	@ 0x28
 80099fc:	2102      	movs	r1, #2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 faf0 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a0a:	e004      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a12:	e000      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a1e:	4b98      	ldr	r3, [pc, #608]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a2c:	4a94      	ldr	r2, [pc, #592]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a32:	e003      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009a48:	f04f 0900 	mov.w	r9, #0
 8009a4c:	ea58 0309 	orrs.w	r3, r8, r9
 8009a50:	d047      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d82a      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a79 	.word	0x08009a79
 8009a68:	08009a87 	.word	0x08009a87
 8009a6c:	08009a9d 	.word	0x08009a9d
 8009a70:	08009abb 	.word	0x08009abb
 8009a74:	08009abb 	.word	0x08009abb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4b81      	ldr	r3, [pc, #516]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7c:	4a80      	ldr	r2, [pc, #512]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a84:	e01a      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 f9f6 	bl	800be80 <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a9a:	e00f      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa0:	3328      	adds	r3, #40	@ 0x28
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f002 fa9d 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ab0:	e004      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ab8:	e000      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	f023 0107 	bic.w	r1, r3, #7
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ad8:	e003      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ade:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009aee:	f04f 0b00 	mov.w	fp, #0
 8009af2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009af6:	d05b      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009b04:	d03b      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009b06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009b0a:	d834      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b10:	d037      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009b12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b16:	d82e      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b1c:	d033      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009b1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b22:	d828      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b28:	d01a      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b2e:	d822      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b38:	d007      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009b3a:	e01c      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3c:	4b50      	ldr	r3, [pc, #320]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	4a4f      	ldr	r2, [pc, #316]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b48:	e01e      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4e:	3308      	adds	r3, #8
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 f994 	bl	800be80 <RCCEx_PLL2_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b5e:	e013      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	3328      	adds	r3, #40	@ 0x28
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f002 fa3b 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b74:	e008      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b7c:	e004      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b7e:	bf00      	nop
 8009b80:	e002      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b90:	4b3b      	ldr	r3, [pc, #236]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b94:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ba0:	4a37      	ldr	r2, [pc, #220]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ba6:	e003      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009bc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	d05d      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009bd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009bdc:	d03b      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009bde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009be2:	d834      	bhi.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009be4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009be8:	d037      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009bea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bee:	d82e      	bhi.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bf4:	d033      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009bf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bfa:	d828      	bhi.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c00:	d01a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c06:	d822      	bhi.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c10:	d007      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009c12:	e01c      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c14:	4b1a      	ldr	r3, [pc, #104]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	4a19      	ldr	r2, [pc, #100]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c20:	e01e      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c26:	3308      	adds	r3, #8
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 f928 	bl	800be80 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c36:	e013      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3c:	3328      	adds	r3, #40	@ 0x28
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f002 f9cf 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c4c:	e008      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c54:	e004      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c56:	bf00      	nop
 8009c58:	e002      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c5a:	bf00      	nop
 8009c5c:	e000      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10d      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c78:	4a01      	ldr	r2, [pc, #4]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c7e:	e005      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009c98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ca2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	d03a      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb2:	2b30      	cmp	r3, #48	@ 0x30
 8009cb4:	d01f      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009cb6:	2b30      	cmp	r3, #48	@ 0x30
 8009cb8:	d819      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d00c      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d815      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d019      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009cc6:	2b10      	cmp	r3, #16
 8009cc8:	d111      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cca:	4baa      	ldr	r3, [pc, #680]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cce:	4aa9      	ldr	r2, [pc, #676]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009cd6:	e011      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cdc:	3308      	adds	r3, #8
 8009cde:	2102      	movs	r1, #2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f002 f8cd 	bl	800be80 <RCCEx_PLL2_Config>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009cec:	e006      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cf4:	e002      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009cf6:	bf00      	nop
 8009cf8:	e000      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009d04:	4b9b      	ldr	r3, [pc, #620]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d12:	4a98      	ldr	r2, [pc, #608]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d18:	e003      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	d051      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d4c:	d035      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d52:	d82e      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d58:	d031      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d5e:	d828      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d64:	d01a      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d6a:	d822      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d74:	d007      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009d76:	e01c      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d78:	4b7e      	ldr	r3, [pc, #504]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	4a7d      	ldr	r2, [pc, #500]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d84:	e01c      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 f876 	bl	800be80 <RCCEx_PLL2_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d9a:	e011      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da0:	3328      	adds	r3, #40	@ 0x28
 8009da2:	2100      	movs	r1, #0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f002 f91d 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009db0:	e006      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009db8:	e002      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009dba:	bf00      	nop
 8009dbc:	e000      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dd6:	4a67      	ldr	r2, [pc, #412]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ddc:	e003      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009de2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009df6:	2300      	movs	r3, #0
 8009df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009dfc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d053      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e10:	d033      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e16:	d82c      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e1c:	d02f      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e22:	d826      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e28:	d02b      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e2e:	d820      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e34:	d012      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e3a:	d81a      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d022      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e44:	d115      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 f816 	bl	800be80 <RCCEx_PLL2_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e5a:	e015      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e60:	3328      	adds	r3, #40	@ 0x28
 8009e62:	2101      	movs	r1, #1
 8009e64:	4618      	mov	r0, r3
 8009e66:	f002 f8bd 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e70:	e00a      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e78:	e006      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e7a:	bf00      	nop
 8009e7c:	e004      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e7e:	bf00      	nop
 8009e80:	e002      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e82:	bf00      	nop
 8009e84:	e000      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e90:	4b38      	ldr	r3, [pc, #224]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9e:	4a35      	ldr	r2, [pc, #212]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009ec4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d058      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eda:	d033      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee0:	d82c      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d02f      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eec:	d826      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef2:	d02b      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009ef4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef8:	d820      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009efe:	d012      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f04:	d81a      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d022      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f0e:	d115      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f14:	3308      	adds	r3, #8
 8009f16:	2101      	movs	r1, #1
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 ffb1 	bl	800be80 <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f24:	e015      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2a:	3328      	adds	r3, #40	@ 0x28
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f002 f858 	bl	800bfe4 <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f3a:	e00a      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f42:	e006      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f44:	bf00      	nop
 8009f46:	e004      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f48:	bf00      	nop
 8009f4a:	e002      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10e      	bne.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f5a:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f6a:	4a02      	ldr	r2, [pc, #8]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f70:	e006      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009f72:	bf00      	nop
 8009f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f90:	2300      	movs	r3, #0
 8009f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	d037      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009faa:	d00e      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb0:	d816      	bhi.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d018      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fba:	d111      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fbc:	4bc4      	ldr	r3, [pc, #784]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc0:	4ac3      	ldr	r2, [pc, #780]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fc8:	e00f      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fce:	3308      	adds	r3, #8
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f001 ff54 	bl	800be80 <RCCEx_PLL2_Config>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fde:	e004      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fe6:	e000      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ff2:	4bb7      	ldr	r3, [pc, #732]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a000:	4ab3      	ldr	r2, [pc, #716]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a002:	430b      	orrs	r3, r1
 800a004:	6513      	str	r3, [r2, #80]	@ 0x50
 800a006:	e003      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a00c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a01c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a020:	2300      	movs	r3, #0
 800a022:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a026:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a02a:	460b      	mov	r3, r1
 800a02c:	4313      	orrs	r3, r2
 800a02e:	d039      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a036:	2b03      	cmp	r3, #3
 800a038:	d81c      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a03a:	a201      	add	r2, pc, #4	@ (adr r2, 800a040 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a040:	0800a07d 	.word	0x0800a07d
 800a044:	0800a051 	.word	0x0800a051
 800a048:	0800a05f 	.word	0x0800a05f
 800a04c:	0800a07d 	.word	0x0800a07d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a050:	4b9f      	ldr	r3, [pc, #636]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a054:	4a9e      	ldr	r2, [pc, #632]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a05a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a05c:	e00f      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a062:	3308      	adds	r3, #8
 800a064:	2102      	movs	r1, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 ff0a 	bl	800be80 <RCCEx_PLL2_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a072:	e004      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a07a:	e000      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a086:	4b92      	ldr	r3, [pc, #584]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a08a:	f023 0103 	bic.w	r1, r3, #3
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a094:	4a8e      	ldr	r2, [pc, #568]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a096:	430b      	orrs	r3, r1
 800a098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a09a:	e003      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a0b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	f000 8099 	beq.w	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0c6:	4b83      	ldr	r3, [pc, #524]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a82      	ldr	r2, [pc, #520]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0d2:	f7f9 fbc1 	bl	8003858 <HAL_GetTick>
 800a0d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0da:	e00b      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0dc:	f7f9 fbbc 	bl	8003858 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b64      	cmp	r3, #100	@ 0x64
 800a0ea:	d903      	bls.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0f2:	e005      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0f4:	4b77      	ldr	r3, [pc, #476]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0ed      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a104:	2b00      	cmp	r3, #0
 800a106:	d173      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a108:	4b71      	ldr	r3, [pc, #452]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a10a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a114:	4053      	eors	r3, r2
 800a116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d015      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a11e:	4b6c      	ldr	r3, [pc, #432]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a126:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a12a:	4b69      	ldr	r3, [pc, #420]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a12e:	4a68      	ldr	r2, [pc, #416]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a134:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a136:	4b66      	ldr	r3, [pc, #408]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a13a:	4a65      	ldr	r2, [pc, #404]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a13c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a140:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a142:	4a63      	ldr	r2, [pc, #396]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a148:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a156:	d118      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a158:	f7f9 fb7e 	bl	8003858 <HAL_GetTick>
 800a15c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a160:	e00d      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a162:	f7f9 fb79 	bl	8003858 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a16c:	1ad2      	subs	r2, r2, r3
 800a16e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a172:	429a      	cmp	r2, r3
 800a174:	d903      	bls.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a17c:	e005      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a17e:	4b54      	ldr	r3, [pc, #336]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0eb      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a18a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d129      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a19a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a19e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1a2:	d10e      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a1a4:	4b4a      	ldr	r3, [pc, #296]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1b4:	091a      	lsrs	r2, r3, #4
 800a1b6:	4b48      	ldr	r3, [pc, #288]	@ (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	4a45      	ldr	r2, [pc, #276]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	6113      	str	r3, [r2, #16]
 800a1c0:	e005      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a1c2:	4b43      	ldr	r3, [pc, #268]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	4a42      	ldr	r2, [pc, #264]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1cc:	6113      	str	r3, [r2, #16]
 800a1ce:	4b40      	ldr	r3, [pc, #256]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1de:	4a3c      	ldr	r2, [pc, #240]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1e4:	e008      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a1ee:	e003      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f002 0301 	and.w	r3, r2, #1
 800a204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a208:	2300      	movs	r3, #0
 800a20a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a20e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a212:	460b      	mov	r3, r1
 800a214:	4313      	orrs	r3, r2
 800a216:	f000 808f 	beq.w	800a338 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a220:	2b28      	cmp	r3, #40	@ 0x28
 800a222:	d871      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a224:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a311 	.word	0x0800a311
 800a230:	0800a309 	.word	0x0800a309
 800a234:	0800a309 	.word	0x0800a309
 800a238:	0800a309 	.word	0x0800a309
 800a23c:	0800a309 	.word	0x0800a309
 800a240:	0800a309 	.word	0x0800a309
 800a244:	0800a309 	.word	0x0800a309
 800a248:	0800a309 	.word	0x0800a309
 800a24c:	0800a2dd 	.word	0x0800a2dd
 800a250:	0800a309 	.word	0x0800a309
 800a254:	0800a309 	.word	0x0800a309
 800a258:	0800a309 	.word	0x0800a309
 800a25c:	0800a309 	.word	0x0800a309
 800a260:	0800a309 	.word	0x0800a309
 800a264:	0800a309 	.word	0x0800a309
 800a268:	0800a309 	.word	0x0800a309
 800a26c:	0800a2f3 	.word	0x0800a2f3
 800a270:	0800a309 	.word	0x0800a309
 800a274:	0800a309 	.word	0x0800a309
 800a278:	0800a309 	.word	0x0800a309
 800a27c:	0800a309 	.word	0x0800a309
 800a280:	0800a309 	.word	0x0800a309
 800a284:	0800a309 	.word	0x0800a309
 800a288:	0800a309 	.word	0x0800a309
 800a28c:	0800a311 	.word	0x0800a311
 800a290:	0800a309 	.word	0x0800a309
 800a294:	0800a309 	.word	0x0800a309
 800a298:	0800a309 	.word	0x0800a309
 800a29c:	0800a309 	.word	0x0800a309
 800a2a0:	0800a309 	.word	0x0800a309
 800a2a4:	0800a309 	.word	0x0800a309
 800a2a8:	0800a309 	.word	0x0800a309
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a309 	.word	0x0800a309
 800a2b4:	0800a309 	.word	0x0800a309
 800a2b8:	0800a309 	.word	0x0800a309
 800a2bc:	0800a309 	.word	0x0800a309
 800a2c0:	0800a309 	.word	0x0800a309
 800a2c4:	0800a309 	.word	0x0800a309
 800a2c8:	0800a309 	.word	0x0800a309
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	58024800 	.word	0x58024800
 800a2d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fdcb 	bl	800be80 <RCCEx_PLL2_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2f0:	e00f      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f6:	3328      	adds	r3, #40	@ 0x28
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 fe72 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a306:	e004      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a30e:	e000      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a312:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a31a:	4bbf      	ldr	r3, [pc, #764]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a328:	4abb      	ldr	r2, [pc, #748]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a32a:	430b      	orrs	r3, r1
 800a32c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a32e:	e003      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f002 0302 	and.w	r3, r2, #2
 800a344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a348:	2300      	movs	r3, #0
 800a34a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a34e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a352:	460b      	mov	r3, r1
 800a354:	4313      	orrs	r3, r2
 800a356:	d041      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a35e:	2b05      	cmp	r3, #5
 800a360:	d824      	bhi.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a362:	a201      	add	r2, pc, #4	@ (adr r2, 800a368 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a3b5 	.word	0x0800a3b5
 800a36c:	0800a381 	.word	0x0800a381
 800a370:	0800a397 	.word	0x0800a397
 800a374:	0800a3b5 	.word	0x0800a3b5
 800a378:	0800a3b5 	.word	0x0800a3b5
 800a37c:	0800a3b5 	.word	0x0800a3b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a384:	3308      	adds	r3, #8
 800a386:	2101      	movs	r1, #1
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 fd79 	bl	800be80 <RCCEx_PLL2_Config>
 800a38e:	4603      	mov	r3, r0
 800a390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a394:	e00f      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39a:	3328      	adds	r3, #40	@ 0x28
 800a39c:	2101      	movs	r1, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 fe20 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a3aa:	e004      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3b2:	e000      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3be:	4b96      	ldr	r3, [pc, #600]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c2:	f023 0107 	bic.w	r1, r3, #7
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3cc:	4a92      	ldr	r2, [pc, #584]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f002 0304 	and.w	r3, r2, #4
 800a3e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	d044      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a404:	2b05      	cmp	r3, #5
 800a406:	d825      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a408:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a45d 	.word	0x0800a45d
 800a414:	0800a429 	.word	0x0800a429
 800a418:	0800a43f 	.word	0x0800a43f
 800a41c:	0800a45d 	.word	0x0800a45d
 800a420:	0800a45d 	.word	0x0800a45d
 800a424:	0800a45d 	.word	0x0800a45d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42c:	3308      	adds	r3, #8
 800a42e:	2101      	movs	r1, #1
 800a430:	4618      	mov	r0, r3
 800a432:	f001 fd25 	bl	800be80 <RCCEx_PLL2_Config>
 800a436:	4603      	mov	r3, r0
 800a438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a43c:	e00f      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a442:	3328      	adds	r3, #40	@ 0x28
 800a444:	2101      	movs	r1, #1
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fdcc 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a452:	e004      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a45a:	e000      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a45e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a466:	4b6c      	ldr	r3, [pc, #432]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46a:	f023 0107 	bic.w	r1, r3, #7
 800a46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a476:	4a68      	ldr	r2, [pc, #416]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a478:	430b      	orrs	r3, r1
 800a47a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a47c:	e003      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a482:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	f002 0320 	and.w	r3, r2, #32
 800a492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a496:	2300      	movs	r3, #0
 800a498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a49c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	d055      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4b2:	d033      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a4b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4b8:	d82c      	bhi.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4be:	d02f      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4c4:	d826      	bhi.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4ca:	d02b      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a4cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4d0:	d820      	bhi.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d6:	d012      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a4d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4dc:	d81a      	bhi.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d022      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a4e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4e6:	d115      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 fcc5 	bl	800be80 <RCCEx_PLL2_Config>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4fc:	e015      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a502:	3328      	adds	r3, #40	@ 0x28
 800a504:	2102      	movs	r1, #2
 800a506:	4618      	mov	r0, r3
 800a508:	f001 fd6c 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a512:	e00a      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a51a:	e006      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a51c:	bf00      	nop
 800a51e:	e004      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a520:	bf00      	nop
 800a522:	e002      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a524:	bf00      	nop
 800a526:	e000      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a52a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10b      	bne.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a532:	4b39      	ldr	r3, [pc, #228]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a536:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a542:	4a35      	ldr	r2, [pc, #212]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a544:	430b      	orrs	r3, r1
 800a546:	6553      	str	r3, [r2, #84]	@ 0x54
 800a548:	e003      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a54a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a54e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a55e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a562:	2300      	movs	r3, #0
 800a564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a568:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a56c:	460b      	mov	r3, r1
 800a56e:	4313      	orrs	r3, r2
 800a570:	d058      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a57a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a57e:	d033      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a580:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a584:	d82c      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a58a:	d02f      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a58c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a590:	d826      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a596:	d02b      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a59c:	d820      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a59e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5a2:	d012      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a5a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5a8:	d81a      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d022      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a5ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5b2:	d115      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 fc5f 	bl	800be80 <RCCEx_PLL2_Config>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5c8:	e015      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ce:	3328      	adds	r3, #40	@ 0x28
 800a5d0:	2102      	movs	r1, #2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 fd06 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5de:	e00a      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5e6:	e006      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5e8:	bf00      	nop
 800a5ea:	e004      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5ec:	bf00      	nop
 800a5ee:	e002      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5f0:	bf00      	nop
 800a5f2:	e000      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10e      	bne.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5fe:	4b06      	ldr	r3, [pc, #24]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a602:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a60e:	4a02      	ldr	r2, [pc, #8]	@ (800a618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a610:	430b      	orrs	r3, r1
 800a612:	6593      	str	r3, [r2, #88]	@ 0x58
 800a614:	e006      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a616:	bf00      	nop
 800a618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a634:	2300      	movs	r3, #0
 800a636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a63a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a63e:	460b      	mov	r3, r1
 800a640:	4313      	orrs	r3, r2
 800a642:	d055      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a648:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a64c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a650:	d033      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a652:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a656:	d82c      	bhi.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a65c:	d02f      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a65e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a662:	d826      	bhi.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a664:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a668:	d02b      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a66a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a66e:	d820      	bhi.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a674:	d012      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a67a:	d81a      	bhi.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d022      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a684:	d115      	bne.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a68a:	3308      	adds	r3, #8
 800a68c:	2100      	movs	r1, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f001 fbf6 	bl	800be80 <RCCEx_PLL2_Config>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a69a:	e015      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a0:	3328      	adds	r3, #40	@ 0x28
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 fc9d 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a6b0:	e00a      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6b8:	e006      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6ba:	bf00      	nop
 800a6bc:	e004      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6be:	bf00      	nop
 800a6c0:	e002      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6c2:	bf00      	nop
 800a6c4:	e000      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10b      	bne.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6d0:	4ba0      	ldr	r3, [pc, #640]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6e0:	4a9c      	ldr	r2, [pc, #624]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6e6:	e003      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f002 0308 	and.w	r3, r2, #8
 800a6fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a700:	2300      	movs	r3, #0
 800a702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a706:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a70a:	460b      	mov	r3, r1
 800a70c:	4313      	orrs	r3, r2
 800a70e:	d01e      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a71c:	d10c      	bne.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a722:	3328      	adds	r3, #40	@ 0x28
 800a724:	2102      	movs	r1, #2
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fc5c 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a738:	4b86      	ldr	r3, [pc, #536]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a73a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a73c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a748:	4a82      	ldr	r2, [pc, #520]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a74a:	430b      	orrs	r3, r1
 800a74c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f002 0310 	and.w	r3, r2, #16
 800a75a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a75e:	2300      	movs	r3, #0
 800a760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a764:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a768:	460b      	mov	r3, r1
 800a76a:	4313      	orrs	r3, r2
 800a76c:	d01e      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a77a:	d10c      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a780:	3328      	adds	r3, #40	@ 0x28
 800a782:	2102      	movs	r1, #2
 800a784:	4618      	mov	r0, r3
 800a786:	f001 fc2d 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a796:	4b6f      	ldr	r3, [pc, #444]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a6:	4a6b      	ldr	r2, [pc, #428]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a7b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	d03e      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7d4:	d022      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a7d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7da:	d81b      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a7e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7e4:	d00b      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a7e6:	e015      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 fb45 	bl	800be80 <RCCEx_PLL2_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a7fc:	e00f      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a802:	3328      	adds	r3, #40	@ 0x28
 800a804:	2102      	movs	r1, #2
 800a806:	4618      	mov	r0, r3
 800a808:	f001 fbec 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a812:	e004      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a81a:	e000      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a81e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a826:	4b4b      	ldr	r3, [pc, #300]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a82a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a836:	4a47      	ldr	r2, [pc, #284]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a838:	430b      	orrs	r3, r1
 800a83a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a83c:	e003      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a852:	673b      	str	r3, [r7, #112]	@ 0x70
 800a854:	2300      	movs	r3, #0
 800a856:	677b      	str	r3, [r7, #116]	@ 0x74
 800a858:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a85c:	460b      	mov	r3, r1
 800a85e:	4313      	orrs	r3, r2
 800a860:	d03b      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a86a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a86e:	d01f      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a870:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a874:	d818      	bhi.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a87a:	d003      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a87c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a880:	d007      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a882:	e011      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a884:	4b33      	ldr	r3, [pc, #204]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	4a32      	ldr	r2, [pc, #200]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a88a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a88e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a890:	e00f      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a896:	3328      	adds	r3, #40	@ 0x28
 800a898:	2101      	movs	r1, #1
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fba2 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a8a6:	e004      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8ae:	e000      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a8b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8ba:	4b26      	ldr	r3, [pc, #152]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8ca:	4a22      	ldr	r2, [pc, #136]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8d0:	e003      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a8e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	d034      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a904:	d007      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a906:	e011      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a908:	4b12      	ldr	r3, [pc, #72]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90c:	4a11      	ldr	r2, [pc, #68]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a90e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a914:	e00e      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91a:	3308      	adds	r3, #8
 800a91c:	2102      	movs	r1, #2
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 faae 	bl	800be80 <RCCEx_PLL2_Config>
 800a924:	4603      	mov	r3, r0
 800a926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a92a:	e003      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10d      	bne.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a93e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a940:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a94a:	4a02      	ldr	r2, [pc, #8]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a94c:	430b      	orrs	r3, r1
 800a94e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a950:	e006      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a952:	bf00      	nop
 800a954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a95c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a96c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a96e:	2300      	movs	r3, #0
 800a970:	667b      	str	r3, [r7, #100]	@ 0x64
 800a972:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a976:	460b      	mov	r3, r1
 800a978:	4313      	orrs	r3, r2
 800a97a:	d00c      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	3328      	adds	r3, #40	@ 0x28
 800a982:	2102      	movs	r1, #2
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fb2d 	bl	800bfe4 <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a9a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d036      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9bc:	d018      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a9be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9c2:	d811      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a9c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c8:	d014      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a9ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ce:	d80b      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d011      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a9d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9d8:	d106      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9da:	4bb7      	ldr	r3, [pc, #732]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	4ab6      	ldr	r2, [pc, #728]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a9e6:	e008      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9ee:	e004      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9f0:	bf00      	nop
 800a9f2:	e002      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa02:	4bad      	ldr	r3, [pc, #692]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa10:	4aa9      	ldr	r2, [pc, #676]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa12:	430b      	orrs	r3, r1
 800aa14:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa16:	e003      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aa2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa2e:	2300      	movs	r3, #0
 800aa30:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aa36:	460b      	mov	r3, r1
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	d009      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa3c:	4b9e      	ldr	r3, [pc, #632]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa4a:	4a9b      	ldr	r2, [pc, #620]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aa5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa5e:	2300      	movs	r3, #0
 800aa60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aa66:	460b      	mov	r3, r1
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa6c:	4b92      	ldr	r3, [pc, #584]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa70:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa7a:	4a8f      	ldr	r2, [pc, #572]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aa8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa8e:	2300      	movs	r3, #0
 800aa90:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aa96:	460b      	mov	r3, r1
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	d00e      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa9c:	4b86      	ldr	r3, [pc, #536]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	4a85      	ldr	r2, [pc, #532]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aaa2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aaa6:	6113      	str	r3, [r2, #16]
 800aaa8:	4b83      	ldr	r3, [pc, #524]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aaaa:	6919      	ldr	r1, [r3, #16]
 800aaac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aab4:	4a80      	ldr	r2, [pc, #512]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aab6:	430b      	orrs	r3, r1
 800aab8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aac8:	2300      	movs	r3, #0
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aacc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aad0:	460b      	mov	r3, r1
 800aad2:	4313      	orrs	r3, r2
 800aad4:	d009      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aad6:	4b78      	ldr	r3, [pc, #480]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aada:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae4:	4a74      	ldr	r2, [pc, #464]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aae6:	430b      	orrs	r3, r1
 800aae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aaf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaf8:	2300      	movs	r3, #0
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aafc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ab00:	460b      	mov	r3, r1
 800ab02:	4313      	orrs	r3, r2
 800ab04:	d00a      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab06:	4b6c      	ldr	r3, [pc, #432]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab0a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab16:	4a68      	ldr	r2, [pc, #416]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	2100      	movs	r1, #0
 800ab26:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ab32:	460b      	mov	r3, r1
 800ab34:	4313      	orrs	r3, r2
 800ab36:	d011      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	2100      	movs	r1, #0
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 f99d 	bl	800be80 <RCCEx_PLL2_Config>
 800ab46:	4603      	mov	r3, r0
 800ab48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	2100      	movs	r1, #0
 800ab66:	6239      	str	r1, [r7, #32]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab72:	460b      	mov	r3, r1
 800ab74:	4313      	orrs	r3, r2
 800ab76:	d011      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 f97d 	bl	800be80 <RCCEx_PLL2_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	2100      	movs	r1, #0
 800aba6:	61b9      	str	r1, [r7, #24]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800abb2:	460b      	mov	r3, r1
 800abb4:	4313      	orrs	r3, r2
 800abb6:	d011      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abbc:	3308      	adds	r3, #8
 800abbe:	2102      	movs	r1, #2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f001 f95d 	bl	800be80 <RCCEx_PLL2_Config>
 800abc6:	4603      	mov	r3, r0
 800abc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800abcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	2100      	movs	r1, #0
 800abe6:	6139      	str	r1, [r7, #16]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800abf2:	460b      	mov	r3, r1
 800abf4:	4313      	orrs	r3, r2
 800abf6:	d011      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfc:	3328      	adds	r3, #40	@ 0x28
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 f9ef 	bl	800bfe4 <RCCEx_PLL3_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ac0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	2100      	movs	r1, #0
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ac32:	460b      	mov	r3, r1
 800ac34:	4313      	orrs	r3, r2
 800ac36:	d011      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3c:	3328      	adds	r3, #40	@ 0x28
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 f9cf 	bl	800bfe4 <RCCEx_PLL3_Config>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	2100      	movs	r1, #0
 800ac66:	6039      	str	r1, [r7, #0]
 800ac68:	f003 0320 	and.w	r3, r3, #32
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac72:	460b      	mov	r3, r1
 800ac74:	4313      	orrs	r3, r2
 800ac76:	d011      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7c:	3328      	adds	r3, #40	@ 0x28
 800ac7e:	2102      	movs	r1, #2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 f9af 	bl	800bfe4 <RCCEx_PLL3_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ac8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ac9c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
}
 800acaa:	4618      	mov	r0, r3
 800acac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800acb0:	46bd      	mov	sp, r7
 800acb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb6:	bf00      	nop
 800acb8:	58024400 	.word	0x58024400

0800acbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b090      	sub	sp, #64	@ 0x40
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800acc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800acce:	430b      	orrs	r3, r1
 800acd0:	f040 8094 	bne.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800acd4:	4b9b      	ldr	r3, [pc, #620]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800acde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	f200 8087 	bhi.w	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ace6:	a201      	add	r2, pc, #4	@ (adr r2, 800acec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ace8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acec:	0800ad01 	.word	0x0800ad01
 800acf0:	0800ad29 	.word	0x0800ad29
 800acf4:	0800ad51 	.word	0x0800ad51
 800acf8:	0800aded 	.word	0x0800aded
 800acfc:	0800ad79 	.word	0x0800ad79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad00:	4b90      	ldr	r3, [pc, #576]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad0c:	d108      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 ff62 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1c:	f000 bc93 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad24:	f000 bc8f 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad28:	4b86      	ldr	r3, [pc, #536]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad34:	d108      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad36:	f107 0318 	add.w	r3, r7, #24
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fca6 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad44:	f000 bc7f 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4c:	f000 bc7b 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad50:	4b7c      	ldr	r3, [pc, #496]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad5c:	d108      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5e:	f107 030c 	add.w	r3, r7, #12
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fde6 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad6c:	f000 bc6b 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad74:	f000 bc67 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad78:	4b72      	ldr	r3, [pc, #456]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad82:	4b70      	ldr	r3, [pc, #448]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d10c      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d109      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad94:	4b6b      	ldr	r3, [pc, #428]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	08db      	lsrs	r3, r3, #3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	4a6a      	ldr	r2, [pc, #424]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ada6:	e01f      	b.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ada8:	4b66      	ldr	r3, [pc, #408]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adb4:	d106      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800adb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adbc:	d102      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adbe:	4b63      	ldr	r3, [pc, #396]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800adc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adc2:	e011      	b.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adc4:	4b5f      	ldr	r3, [pc, #380]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800add0:	d106      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800add2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add8:	d102      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adda:	4b5d      	ldr	r3, [pc, #372]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800addc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adde:	e003      	b.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ade4:	f000 bc2f 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ade8:	f000 bc2d 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adec:	4b59      	ldr	r3, [pc, #356]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf0:	f000 bc29 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf8:	f000 bc25 	b.w	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800adfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ae04:	430b      	orrs	r3, r1
 800ae06:	f040 80a7 	bne.w	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ae0a:	4b4e      	ldr	r3, [pc, #312]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ae12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae1a:	d054      	beq.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae22:	f200 808b 	bhi.w	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae2c:	f000 8083 	beq.w	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae36:	f200 8081 	bhi.w	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae40:	d02f      	beq.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae48:	d878      	bhi.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae56:	d012      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ae58:	e070      	b.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae5a:	4b3a      	ldr	r3, [pc, #232]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae66:	d107      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 feb5 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae76:	e3e6      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7c:	e3e3      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae7e:	4b31      	ldr	r3, [pc, #196]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae8a:	d107      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8c:	f107 0318 	add.w	r3, r7, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fbfb 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9a:	e3d4      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea0:	e3d1      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aea2:	4b28      	ldr	r3, [pc, #160]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aeaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeae:	d107      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeb0:	f107 030c 	add.w	r3, r7, #12
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fd3d 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aebe:	e3c2      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec4:	e3bf      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aec6:	4b1f      	ldr	r3, [pc, #124]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aed0:	4b1c      	ldr	r3, [pc, #112]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d10c      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800aedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aee2:	4b18      	ldr	r3, [pc, #96]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	08db      	lsrs	r3, r3, #3
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	4a16      	ldr	r2, [pc, #88]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aeee:	fa22 f303 	lsr.w	r3, r2, r3
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aef4:	e01e      	b.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aef6:	4b13      	ldr	r3, [pc, #76]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aefe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af02:	d106      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800af04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af0a:	d102      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af0c:	4b0f      	ldr	r3, [pc, #60]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af10:	e010      	b.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af12:	4b0c      	ldr	r3, [pc, #48]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af1e:	d106      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800af20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af26:	d102      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af28:	4b09      	ldr	r3, [pc, #36]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af2c:	e002      	b.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af32:	e388      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af34:	e387      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af36:	4b07      	ldr	r3, [pc, #28]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3a:	e384      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af40:	e381      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
 800af48:	03d09000 	.word	0x03d09000
 800af4c:	003d0900 	.word	0x003d0900
 800af50:	016e3600 	.word	0x016e3600
 800af54:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af5c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800af60:	430b      	orrs	r3, r1
 800af62:	f040 809c 	bne.w	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800af66:	4b9e      	ldr	r3, [pc, #632]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af6a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800af6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af76:	d054      	beq.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af7e:	f200 808b 	bhi.w	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af88:	f000 8083 	beq.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af92:	f200 8081 	bhi.w	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af9c:	d02f      	beq.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afa4:	d878      	bhi.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d004      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800afac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afb2:	d012      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800afb4:	e070      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afb6:	4b8a      	ldr	r3, [pc, #552]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afc2:	d107      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fe07 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd2:	e338      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd8:	e335      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afda:	4b81      	ldr	r3, [pc, #516]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afe6:	d107      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe8:	f107 0318 	add.w	r3, r7, #24
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fb4d 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff6:	e326      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800affc:	e323      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800affe:	4b78      	ldr	r3, [pc, #480]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b00a:	d107      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fc8f 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01a:	e314      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b020:	e311      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b022:	4b6f      	ldr	r3, [pc, #444]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b026:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b02c:	4b6c      	ldr	r3, [pc, #432]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b04      	cmp	r3, #4
 800b036:	d10c      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b03e:	4b68      	ldr	r3, [pc, #416]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	08db      	lsrs	r3, r3, #3
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	4a66      	ldr	r2, [pc, #408]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b04a:	fa22 f303 	lsr.w	r3, r2, r3
 800b04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b050:	e01e      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b052:	4b63      	ldr	r3, [pc, #396]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b05a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05e:	d106      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b066:	d102      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b068:	4b5f      	ldr	r3, [pc, #380]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b06c:	e010      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b06e:	4b5c      	ldr	r3, [pc, #368]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b07a:	d106      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b082:	d102      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b084:	4b59      	ldr	r3, [pc, #356]	@ (800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b088:	e002      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b08e:	e2da      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b090:	e2d9      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b092:	4b57      	ldr	r3, [pc, #348]	@ (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b096:	e2d6      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b09c:	e2d3      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b09e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	f040 80a7 	bne.w	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b0ac:	4b4c      	ldr	r3, [pc, #304]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b0b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0bc:	d055      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0c4:	f200 8096 	bhi.w	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0ce:	f000 8084 	beq.w	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0d8:	f200 808c 	bhi.w	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0e2:	d030      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0ea:	f200 8083 	bhi.w	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0fa:	d012      	beq.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b0fc:	e07a      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0fe:	4b38      	ldr	r3, [pc, #224]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b10a:	d107      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b10c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fd63 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b11a:	e294      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b120:	e291      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b122:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b12a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b12e:	d107      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b130:	f107 0318 	add.w	r3, r7, #24
 800b134:	4618      	mov	r0, r3
 800b136:	f000 faa9 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b13e:	e282      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b144:	e27f      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b146:	4b26      	ldr	r3, [pc, #152]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b14e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b152:	d107      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fbeb 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b162:	e270      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b168:	e26d      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b16a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b16e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b174:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d10c      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b186:	4b16      	ldr	r3, [pc, #88]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	08db      	lsrs	r3, r3, #3
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	4a14      	ldr	r2, [pc, #80]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b192:	fa22 f303 	lsr.w	r3, r2, r3
 800b196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b198:	e01e      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b19a:	4b11      	ldr	r3, [pc, #68]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1a6:	d106      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ae:	d102      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1b4:	e010      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1c2:	d106      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1ca:	d102      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1cc:	4b07      	ldr	r3, [pc, #28]	@ (800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1d0:	e002      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1d6:	e236      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1d8:	e235      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1da:	4b05      	ldr	r3, [pc, #20]	@ (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1de:	e232      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1e0:	58024400 	.word	0x58024400
 800b1e4:	03d09000 	.word	0x03d09000
 800b1e8:	003d0900 	.word	0x003d0900
 800b1ec:	016e3600 	.word	0x016e3600
 800b1f0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f8:	e225      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b202:	430b      	orrs	r3, r1
 800b204:	f040 8085 	bne.w	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b208:	4b9c      	ldr	r3, [pc, #624]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b20c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b210:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b218:	d06b      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b220:	d874      	bhi.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b228:	d056      	beq.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b230:	d86c      	bhi.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b238:	d03b      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b240:	d864      	bhi.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b248:	d021      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b250:	d85c      	bhi.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d004      	beq.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b25e:	d004      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b260:	e054      	b.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b262:	f7fe fb5f 	bl	8009924 <HAL_RCC_GetPCLK1Freq>
 800b266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b268:	e1ed      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b26a:	4b84      	ldr	r3, [pc, #528]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b276:	d107      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b278:	f107 0318 	add.w	r3, r7, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fa05 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b286:	e1de      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28c:	e1db      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28e:	4b7b      	ldr	r3, [pc, #492]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b29a:	d107      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fb47 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2aa:	e1cc      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e1c9      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2b2:	4b72      	ldr	r3, [pc, #456]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	d109      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2be:	4b6f      	ldr	r3, [pc, #444]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	08db      	lsrs	r3, r3, #3
 800b2c4:	f003 0303 	and.w	r3, r3, #3
 800b2c8:	4a6d      	ldr	r2, [pc, #436]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d0:	e1b9      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d6:	e1b6      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b2d8:	4b68      	ldr	r3, [pc, #416]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e4:	d102      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b2e6:	4b67      	ldr	r3, [pc, #412]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ea:	e1ac      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e1a9      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2f2:	4b62      	ldr	r3, [pc, #392]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2fe:	d102      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b300:	4b61      	ldr	r3, [pc, #388]	@ (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b304:	e19f      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b30a:	e19c      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b310:	e199      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b316:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b31a:	430b      	orrs	r3, r1
 800b31c:	d173      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b31e:	4b57      	ldr	r3, [pc, #348]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b326:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b32e:	d02f      	beq.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b336:	d863      	bhi.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b344:	d012      	beq.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b346:	e05b      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b348:	4b4c      	ldr	r3, [pc, #304]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b354:	d107      	bne.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b356:	f107 0318 	add.w	r3, r7, #24
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f996 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b364:	e16f      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36a:	e16c      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b36c:	4b43      	ldr	r3, [pc, #268]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b378:	d107      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37a:	f107 030c 	add.w	r3, r7, #12
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fad8 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b388:	e15d      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38e:	e15a      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b390:	4b3a      	ldr	r3, [pc, #232]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b394:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b39a:	4b38      	ldr	r3, [pc, #224]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0304 	and.w	r3, r3, #4
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	d10c      	bne.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d109      	bne.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ac:	4b33      	ldr	r3, [pc, #204]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	08db      	lsrs	r3, r3, #3
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	4a32      	ldr	r2, [pc, #200]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3be:	e01e      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3c0:	4b2e      	ldr	r3, [pc, #184]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3cc:	d106      	bne.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3d4:	d102      	bne.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3da:	e010      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3dc:	4b27      	ldr	r3, [pc, #156]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3e8:	d106      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f0:	d102      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f2:	4b25      	ldr	r3, [pc, #148]	@ (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f6:	e002      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3fc:	e123      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3fe:	e122      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b404:	e11f      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b40e:	430b      	orrs	r3, r1
 800b410:	d13c      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b412:	4b1a      	ldr	r3, [pc, #104]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b41a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b428:	d012      	beq.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b42a:	e023      	b.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b42c:	4b13      	ldr	r3, [pc, #76]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b438:	d107      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b43a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fbcc 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b448:	e0fd      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44e:	e0fa      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b450:	4b0a      	ldr	r3, [pc, #40]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45c:	d107      	bne.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45e:	f107 0318 	add.w	r3, r7, #24
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f912 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46c:	e0eb      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b472:	e0e8      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b478:	e0e5      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b47a:	bf00      	nop
 800b47c:	58024400 	.word	0x58024400
 800b480:	03d09000 	.word	0x03d09000
 800b484:	003d0900 	.word	0x003d0900
 800b488:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b490:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b494:	430b      	orrs	r3, r1
 800b496:	f040 8085 	bne.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b49a:	4b6d      	ldr	r3, [pc, #436]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b49c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b4a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4aa:	d06b      	beq.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4b2:	d874      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ba:	d056      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c2:	d86c      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4ca:	d03b      	beq.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4d2:	d864      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4da:	d021      	beq.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4e2:	d85c      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4f0:	d004      	beq.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b4f2:	e054      	b.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4f4:	f000 f8b4 	bl	800b660 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4fa:	e0a4      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4fc:	4b54      	ldr	r3, [pc, #336]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b508:	d107      	bne.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b50a:	f107 0318 	add.w	r3, r7, #24
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f8bc 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b518:	e095      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b51e:	e092      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b520:	4b4b      	ldr	r3, [pc, #300]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b52c:	d107      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b52e:	f107 030c 	add.w	r3, r7, #12
 800b532:	4618      	mov	r0, r3
 800b534:	f000 f9fe 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53c:	e083      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b542:	e080      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b544:	4b42      	ldr	r3, [pc, #264]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d109      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b550:	4b3f      	ldr	r3, [pc, #252]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	08db      	lsrs	r3, r3, #3
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	4a3e      	ldr	r2, [pc, #248]	@ (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b55c:	fa22 f303 	lsr.w	r3, r2, r3
 800b560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b562:	e070      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b568:	e06d      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b56a:	4b39      	ldr	r3, [pc, #228]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b576:	d102      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b578:	4b37      	ldr	r3, [pc, #220]	@ (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57c:	e063      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b582:	e060      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b584:	4b32      	ldr	r3, [pc, #200]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b58c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b590:	d102      	bne.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b592:	4b32      	ldr	r3, [pc, #200]	@ (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b596:	e056      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b59c:	e053      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a2:	e050      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b5a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	d148      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b5b0:	4b27      	ldr	r3, [pc, #156]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5c0:	d02a      	beq.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5c8:	d838      	bhi.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d004      	beq.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5d6:	d00d      	beq.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b5d8:	e030      	b.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5da:	4b1d      	ldr	r3, [pc, #116]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5e6:	d102      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ec:	e02b      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f2:	e028      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5f4:	4b16      	ldr	r3, [pc, #88]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b600:	d107      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b606:	4618      	mov	r0, r3
 800b608:	f000 fae8 	bl	800bbdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b610:	e019      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b616:	e016      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b618:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b624:	d107      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b626:	f107 0318 	add.w	r3, r7, #24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 f82e 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b634:	e007      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63a:	e004      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b640:	e001      	b.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3740      	adds	r7, #64	@ 0x40
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	58024400 	.word	0x58024400
 800b654:	03d09000 	.word	0x03d09000
 800b658:	003d0900 	.word	0x003d0900
 800b65c:	016e3600 	.word	0x016e3600

0800b660 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b664:	f7fe f92e 	bl	80098c4 <HAL_RCC_GetHCLKFreq>
 800b668:	4602      	mov	r2, r0
 800b66a:	4b06      	ldr	r3, [pc, #24]	@ (800b684 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	091b      	lsrs	r3, r3, #4
 800b670:	f003 0307 	and.w	r3, r3, #7
 800b674:	4904      	ldr	r1, [pc, #16]	@ (800b688 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b676:	5ccb      	ldrb	r3, [r1, r3]
 800b678:	f003 031f 	and.w	r3, r3, #31
 800b67c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b680:	4618      	mov	r0, r3
 800b682:	bd80      	pop	{r7, pc}
 800b684:	58024400 	.word	0x58024400
 800b688:	08017180 	.word	0x08017180

0800b68c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b089      	sub	sp, #36	@ 0x24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b694:	4ba1      	ldr	r3, [pc, #644]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b698:	f003 0303 	and.w	r3, r3, #3
 800b69c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b69e:	4b9f      	ldr	r3, [pc, #636]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a2:	0b1b      	lsrs	r3, r3, #12
 800b6a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6aa:	4b9c      	ldr	r3, [pc, #624]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ae:	091b      	lsrs	r3, r3, #4
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b6b6:	4b99      	ldr	r3, [pc, #612]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ba:	08db      	lsrs	r3, r3, #3
 800b6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	fb02 f303 	mul.w	r3, r2, r3
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 8111 	beq.w	800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	f000 8083 	beq.w	800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	f200 80a1 	bhi.w	800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d003      	beq.n	800b6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d056      	beq.n	800b7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6f6:	e099      	b.n	800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f8:	4b88      	ldr	r3, [pc, #544]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d02d      	beq.n	800b760 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b704:	4b85      	ldr	r3, [pc, #532]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	08db      	lsrs	r3, r3, #3
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	4a84      	ldr	r2, [pc, #528]	@ (800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
 800b714:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	ee07 3a90 	vmov	s15, r3
 800b71c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	ee07 3a90 	vmov	s15, r3
 800b726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b72e:	4b7b      	ldr	r3, [pc, #492]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b742:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b74e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b75a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b75e:	e087      	b.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b928 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b772:	4b6a      	ldr	r3, [pc, #424]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b782:	ed97 6a03 	vldr	s12, [r7, #12]
 800b786:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b79e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7a2:	e065      	b.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b6:	4b59      	ldr	r3, [pc, #356]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7e6:	e043      	b.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	ee07 3a90 	vmov	s15, r3
 800b7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7fa:	4b48      	ldr	r3, [pc, #288]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b802:	ee07 3a90 	vmov	s15, r3
 800b806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b80a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b80e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b82a:	e021      	b.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	ee07 3a90 	vmov	s15, r3
 800b832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b836:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83e:	4b37      	ldr	r3, [pc, #220]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b852:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b86a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b86e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b870:	4b2a      	ldr	r3, [pc, #168]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b874:	0a5b      	lsrs	r3, r3, #9
 800b876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b88a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b88e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b896:	ee17 2a90 	vmov	r2, s15
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b89e:	4b1f      	ldr	r3, [pc, #124]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8a8:	ee07 3a90 	vmov	s15, r3
 800b8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c4:	ee17 2a90 	vmov	r2, s15
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b8cc:	4b13      	ldr	r3, [pc, #76]	@ (800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8d0:	0e1b      	lsrs	r3, r3, #24
 800b8d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d6:	ee07 3a90 	vmov	s15, r3
 800b8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f2:	ee17 2a90 	vmov	r2, s15
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8fa:	e008      	b.n	800b90e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	609a      	str	r2, [r3, #8]
}
 800b90e:	bf00      	nop
 800b910:	3724      	adds	r7, #36	@ 0x24
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	58024400 	.word	0x58024400
 800b920:	03d09000 	.word	0x03d09000
 800b924:	46000000 	.word	0x46000000
 800b928:	4c742400 	.word	0x4c742400
 800b92c:	4a742400 	.word	0x4a742400
 800b930:	4bb71b00 	.word	0x4bb71b00

0800b934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b934:	b480      	push	{r7}
 800b936:	b089      	sub	sp, #36	@ 0x24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b93c:	4ba1      	ldr	r3, [pc, #644]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b940:	f003 0303 	and.w	r3, r3, #3
 800b944:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b946:	4b9f      	ldr	r3, [pc, #636]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94a:	0d1b      	lsrs	r3, r3, #20
 800b94c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b950:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b952:	4b9c      	ldr	r3, [pc, #624]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b95e:	4b99      	ldr	r3, [pc, #612]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b962:	08db      	lsrs	r3, r3, #3
 800b964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	fb02 f303 	mul.w	r3, r2, r3
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 8111 	beq.w	800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	2b02      	cmp	r3, #2
 800b986:	f000 8083 	beq.w	800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	f200 80a1 	bhi.w	800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d056      	beq.n	800ba4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b99e:	e099      	b.n	800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9a0:	4b88      	ldr	r3, [pc, #544]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0320 	and.w	r3, r3, #32
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d02d      	beq.n	800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9ac:	4b85      	ldr	r3, [pc, #532]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	08db      	lsrs	r3, r3, #3
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	4a84      	ldr	r2, [pc, #528]	@ (800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	ee07 3a90 	vmov	s15, r3
 800b9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	ee07 3a90 	vmov	s15, r3
 800b9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9d6:	4b7b      	ldr	r3, [pc, #492]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba06:	e087      	b.n	800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	ee07 3a90 	vmov	s15, r3
 800ba0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba1a:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba4a:	e065      	b.n	800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba5e:	4b59      	ldr	r3, [pc, #356]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba8e:	e043      	b.n	800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baa2:	4b48      	ldr	r3, [pc, #288]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baaa:	ee07 3a90 	vmov	s15, r3
 800baae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bab6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800babe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bad2:	e021      	b.n	800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bade:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bae6:	4b37      	ldr	r3, [pc, #220]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bafa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bb18:	4b2a      	ldr	r3, [pc, #168]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1c:	0a5b      	lsrs	r3, r3, #9
 800bb1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb32:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb3e:	ee17 2a90 	vmov	r2, s15
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb46:	4b1f      	ldr	r3, [pc, #124]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4a:	0c1b      	lsrs	r3, r3, #16
 800bb4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb50:	ee07 3a90 	vmov	s15, r3
 800bb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb60:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb6c:	ee17 2a90 	vmov	r2, s15
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb74:	4b13      	ldr	r3, [pc, #76]	@ (800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb78:	0e1b      	lsrs	r3, r3, #24
 800bb7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb9a:	ee17 2a90 	vmov	r2, s15
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bba2:	e008      	b.n	800bbb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	609a      	str	r2, [r3, #8]
}
 800bbb6:	bf00      	nop
 800bbb8:	3724      	adds	r7, #36	@ 0x24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	03d09000 	.word	0x03d09000
 800bbcc:	46000000 	.word	0x46000000
 800bbd0:	4c742400 	.word	0x4c742400
 800bbd4:	4a742400 	.word	0x4a742400
 800bbd8:	4bb71b00 	.word	0x4bb71b00

0800bbdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b089      	sub	sp, #36	@ 0x24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbe4:	4ba0      	ldr	r3, [pc, #640]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bbee:	4b9e      	ldr	r3, [pc, #632]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf2:	091b      	lsrs	r3, r3, #4
 800bbf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbf8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bbfa:	4b9b      	ldr	r3, [pc, #620]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bc04:	4b98      	ldr	r3, [pc, #608]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc08:	08db      	lsrs	r3, r3, #3
 800bc0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	fb02 f303 	mul.w	r3, r2, r3
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 8111 	beq.w	800be4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	f000 8083 	beq.w	800bd36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	f200 80a1 	bhi.w	800bd7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d056      	beq.n	800bcf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc44:	e099      	b.n	800bd7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc46:	4b88      	ldr	r3, [pc, #544]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0320 	and.w	r3, r3, #32
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d02d      	beq.n	800bcae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc52:	4b85      	ldr	r3, [pc, #532]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	08db      	lsrs	r3, r3, #3
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	4a83      	ldr	r2, [pc, #524]	@ (800be6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	ee07 3a90 	vmov	s15, r3
 800bc74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc7c:	4b7a      	ldr	r3, [pc, #488]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcac:	e087      	b.n	800bdbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	ee07 3a90 	vmov	s15, r3
 800bcb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcc0:	4b69      	ldr	r3, [pc, #420]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcd4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bce0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcf0:	e065      	b.n	800bdbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	ee07 3a90 	vmov	s15, r3
 800bcf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcfc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd04:	4b58      	ldr	r3, [pc, #352]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd0c:	ee07 3a90 	vmov	s15, r3
 800bd10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd14:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd34:	e043      	b.n	800bdbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd48:	4b47      	ldr	r3, [pc, #284]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd58:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd78:	e021      	b.n	800bdbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8c:	4b36      	ldr	r3, [pc, #216]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bda4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bda8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bdbe:	4b2a      	ldr	r3, [pc, #168]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc2:	0a5b      	lsrs	r3, r3, #9
 800bdc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde4:	ee17 2a90 	vmov	r2, s15
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bdec:	4b1e      	ldr	r3, [pc, #120]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf0:	0c1b      	lsrs	r3, r3, #16
 800bdf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be06:	edd7 6a07 	vldr	s13, [r7, #28]
 800be0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be12:	ee17 2a90 	vmov	r2, s15
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800be1a:	4b13      	ldr	r3, [pc, #76]	@ (800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1e:	0e1b      	lsrs	r3, r3, #24
 800be20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be24:	ee07 3a90 	vmov	s15, r3
 800be28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be34:	edd7 6a07 	vldr	s13, [r7, #28]
 800be38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be40:	ee17 2a90 	vmov	r2, s15
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be48:	e008      	b.n	800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	609a      	str	r2, [r3, #8]
}
 800be5c:	bf00      	nop
 800be5e:	3724      	adds	r7, #36	@ 0x24
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	58024400 	.word	0x58024400
 800be6c:	03d09000 	.word	0x03d09000
 800be70:	46000000 	.word	0x46000000
 800be74:	4c742400 	.word	0x4c742400
 800be78:	4a742400 	.word	0x4a742400
 800be7c:	4bb71b00 	.word	0x4bb71b00

0800be80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be8e:	4b53      	ldr	r3, [pc, #332]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800be90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	2b03      	cmp	r3, #3
 800be98:	d101      	bne.n	800be9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e099      	b.n	800bfd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be9e:	4b4f      	ldr	r3, [pc, #316]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a4e      	ldr	r2, [pc, #312]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bea4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beaa:	f7f7 fcd5 	bl	8003858 <HAL_GetTick>
 800beae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb0:	e008      	b.n	800bec4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800beb2:	f7f7 fcd1 	bl	8003858 <HAL_GetTick>
 800beb6:	4602      	mov	r2, r0
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d901      	bls.n	800bec4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e086      	b.n	800bfd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bec4:	4b45      	ldr	r3, [pc, #276]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1f0      	bne.n	800beb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bed0:	4b42      	ldr	r3, [pc, #264]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	031b      	lsls	r3, r3, #12
 800bede:	493f      	ldr	r1, [pc, #252]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bee0:	4313      	orrs	r3, r2
 800bee2:	628b      	str	r3, [r1, #40]	@ 0x28
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	3b01      	subs	r3, #1
 800beea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	025b      	lsls	r3, r3, #9
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	431a      	orrs	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	3b01      	subs	r3, #1
 800bf00:	041b      	lsls	r3, r3, #16
 800bf02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf06:	431a      	orrs	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	061b      	lsls	r3, r3, #24
 800bf10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf14:	4931      	ldr	r1, [pc, #196]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf1a:	4b30      	ldr	r3, [pc, #192]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	492d      	ldr	r1, [pc, #180]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf2c:	4b2b      	ldr	r3, [pc, #172]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf30:	f023 0220 	bic.w	r2, r3, #32
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	4928      	ldr	r1, [pc, #160]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf3e:	4b27      	ldr	r3, [pc, #156]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf42:	4a26      	ldr	r2, [pc, #152]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf44:	f023 0310 	bic.w	r3, r3, #16
 800bf48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf4a:	4b24      	ldr	r3, [pc, #144]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf4e:	4b24      	ldr	r3, [pc, #144]	@ (800bfe0 <RCCEx_PLL2_Config+0x160>)
 800bf50:	4013      	ands	r3, r2
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	69d2      	ldr	r2, [r2, #28]
 800bf56:	00d2      	lsls	r2, r2, #3
 800bf58:	4920      	ldr	r1, [pc, #128]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf5e:	4b1f      	ldr	r3, [pc, #124]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf62:	4a1e      	ldr	r2, [pc, #120]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf64:	f043 0310 	orr.w	r3, r3, #16
 800bf68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d106      	bne.n	800bf7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf70:	4b1a      	ldr	r3, [pc, #104]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf74:	4a19      	ldr	r2, [pc, #100]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf7c:	e00f      	b.n	800bf9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d106      	bne.n	800bf92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf84:	4b15      	ldr	r3, [pc, #84]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	4a14      	ldr	r2, [pc, #80]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf90:	e005      	b.n	800bf9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf92:	4b12      	ldr	r3, [pc, #72]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf96:	4a11      	ldr	r2, [pc, #68]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bf98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a0e      	ldr	r2, [pc, #56]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bfa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bfa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfaa:	f7f7 fc55 	bl	8003858 <HAL_GetTick>
 800bfae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfb0:	e008      	b.n	800bfc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bfb2:	f7f7 fc51 	bl	8003858 <HAL_GetTick>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d901      	bls.n	800bfc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e006      	b.n	800bfd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfc4:	4b05      	ldr	r3, [pc, #20]	@ (800bfdc <RCCEx_PLL2_Config+0x15c>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0f0      	beq.n	800bfb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	58024400 	.word	0x58024400
 800bfe0:	ffff0007 	.word	0xffff0007

0800bfe4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bff2:	4b53      	ldr	r3, [pc, #332]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800bff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bff6:	f003 0303 	and.w	r3, r3, #3
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d101      	bne.n	800c002 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	e099      	b.n	800c136 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c002:	4b4f      	ldr	r3, [pc, #316]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a4e      	ldr	r2, [pc, #312]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c00e:	f7f7 fc23 	bl	8003858 <HAL_GetTick>
 800c012:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c014:	e008      	b.n	800c028 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c016:	f7f7 fc1f 	bl	8003858 <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	2b02      	cmp	r3, #2
 800c022:	d901      	bls.n	800c028 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e086      	b.n	800c136 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c028:	4b45      	ldr	r3, [pc, #276]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f0      	bne.n	800c016 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c034:	4b42      	ldr	r3, [pc, #264]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c038:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	051b      	lsls	r3, r3, #20
 800c042:	493f      	ldr	r1, [pc, #252]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c044:	4313      	orrs	r3, r2
 800c046:	628b      	str	r3, [r1, #40]	@ 0x28
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	3b01      	subs	r3, #1
 800c058:	025b      	lsls	r3, r3, #9
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	431a      	orrs	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	3b01      	subs	r3, #1
 800c064:	041b      	lsls	r3, r3, #16
 800c066:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c06a:	431a      	orrs	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	3b01      	subs	r3, #1
 800c072:	061b      	lsls	r3, r3, #24
 800c074:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c078:	4931      	ldr	r1, [pc, #196]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c07a:	4313      	orrs	r3, r2
 800c07c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c07e:	4b30      	ldr	r3, [pc, #192]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c082:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	492d      	ldr	r1, [pc, #180]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c08c:	4313      	orrs	r3, r2
 800c08e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c090:	4b2b      	ldr	r3, [pc, #172]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c094:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	4928      	ldr	r1, [pc, #160]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0a2:	4b27      	ldr	r3, [pc, #156]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a6:	4a26      	ldr	r2, [pc, #152]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0ae:	4b24      	ldr	r3, [pc, #144]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0b2:	4b24      	ldr	r3, [pc, #144]	@ (800c144 <RCCEx_PLL3_Config+0x160>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	69d2      	ldr	r2, [r2, #28]
 800c0ba:	00d2      	lsls	r2, r2, #3
 800c0bc:	4920      	ldr	r1, [pc, #128]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d8:	4a19      	ldr	r2, [pc, #100]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c0de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c0e0:	e00f      	b.n	800c102 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d106      	bne.n	800c0f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0e8:	4b15      	ldr	r3, [pc, #84]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ec:	4a14      	ldr	r2, [pc, #80]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c0f4:	e005      	b.n	800c102 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0f6:	4b12      	ldr	r3, [pc, #72]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0fa:	4a11      	ldr	r2, [pc, #68]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c0fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c100:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c102:	4b0f      	ldr	r3, [pc, #60]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a0e      	ldr	r2, [pc, #56]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c10e:	f7f7 fba3 	bl	8003858 <HAL_GetTick>
 800c112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c114:	e008      	b.n	800c128 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c116:	f7f7 fb9f 	bl	8003858 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	2b02      	cmp	r3, #2
 800c122:	d901      	bls.n	800c128 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e006      	b.n	800c136 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c128:	4b05      	ldr	r3, [pc, #20]	@ (800c140 <RCCEx_PLL3_Config+0x15c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0f0      	beq.n	800c116 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	58024400 	.word	0x58024400
 800c144:	ffff0007 	.word	0xffff0007

0800c148 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e10f      	b.n	800c37a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a87      	ldr	r2, [pc, #540]	@ (800c384 <HAL_SPI_Init+0x23c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d00f      	beq.n	800c18a <HAL_SPI_Init+0x42>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a86      	ldr	r2, [pc, #536]	@ (800c388 <HAL_SPI_Init+0x240>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d00a      	beq.n	800c18a <HAL_SPI_Init+0x42>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a84      	ldr	r2, [pc, #528]	@ (800c38c <HAL_SPI_Init+0x244>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d005      	beq.n	800c18a <HAL_SPI_Init+0x42>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	2b0f      	cmp	r3, #15
 800c184:	d901      	bls.n	800c18a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e0f7      	b.n	800c37a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f900 	bl	800c390 <SPI_GetPacketSize>
 800c190:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a7b      	ldr	r2, [pc, #492]	@ (800c384 <HAL_SPI_Init+0x23c>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00c      	beq.n	800c1b6 <HAL_SPI_Init+0x6e>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a79      	ldr	r2, [pc, #484]	@ (800c388 <HAL_SPI_Init+0x240>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d007      	beq.n	800c1b6 <HAL_SPI_Init+0x6e>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a78      	ldr	r2, [pc, #480]	@ (800c38c <HAL_SPI_Init+0x244>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d002      	beq.n	800c1b6 <HAL_SPI_Init+0x6e>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b08      	cmp	r3, #8
 800c1b4:	d811      	bhi.n	800c1da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ba:	4a72      	ldr	r2, [pc, #456]	@ (800c384 <HAL_SPI_Init+0x23c>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d009      	beq.n	800c1d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a70      	ldr	r2, [pc, #448]	@ (800c388 <HAL_SPI_Init+0x240>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d004      	beq.n	800c1d4 <HAL_SPI_Init+0x8c>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a6f      	ldr	r2, [pc, #444]	@ (800c38c <HAL_SPI_Init+0x244>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d104      	bne.n	800c1de <HAL_SPI_Init+0x96>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b10      	cmp	r3, #16
 800c1d8:	d901      	bls.n	800c1de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e0cd      	b.n	800c37a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7f5 fcc8 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f022 0201 	bic.w	r2, r2, #1
 800c20e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c21a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c224:	d119      	bne.n	800c25a <HAL_SPI_Init+0x112>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c22e:	d103      	bne.n	800c238 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c234:	2b00      	cmp	r3, #0
 800c236:	d008      	beq.n	800c24a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10c      	bne.n	800c25a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c248:	d107      	bne.n	800c25a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c258:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00f      	beq.n	800c286 <HAL_SPI_Init+0x13e>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	2b06      	cmp	r3, #6
 800c26c:	d90b      	bls.n	800c286 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	430a      	orrs	r2, r1
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	e007      	b.n	800c296 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c294:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	69da      	ldr	r2, [r3, #28]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a8:	ea42 0103 	orr.w	r1, r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f6:	ea42 0103 	orr.w	r1, r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d113      	bne.n	800c336 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c320:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c334:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f022 0201 	bic.w	r2, r2, #1
 800c344:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00a      	beq.n	800c368 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	430a      	orrs	r2, r1
 800c366:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	40013000 	.word	0x40013000
 800c388:	40003800 	.word	0x40003800
 800c38c:	40003c00 	.word	0x40003c00

0800c390 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c39c:	095b      	lsrs	r3, r3, #5
 800c39e:	3301      	adds	r3, #1
 800c3a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	3307      	adds	r3, #7
 800c3ae:	08db      	lsrs	r3, r3, #3
 800c3b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e049      	b.n	800c46c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d106      	bne.n	800c3f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7f5 fcd3 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2202      	movs	r2, #2
 800c3f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3304      	adds	r3, #4
 800c402:	4619      	mov	r1, r3
 800c404:	4610      	mov	r0, r2
 800c406:	f000 fe0b 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b01      	cmp	r3, #1
 800c486:	d001      	beq.n	800c48c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e05e      	b.n	800c54a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0201 	orr.w	r2, r2, #1
 800c4a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a2b      	ldr	r2, [pc, #172]	@ (800c558 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d02c      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b6:	d027      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a27      	ldr	r2, [pc, #156]	@ (800c55c <HAL_TIM_Base_Start_IT+0xe8>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d022      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a26      	ldr	r2, [pc, #152]	@ (800c560 <HAL_TIM_Base_Start_IT+0xec>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d01d      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a24      	ldr	r2, [pc, #144]	@ (800c564 <HAL_TIM_Base_Start_IT+0xf0>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d018      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a23      	ldr	r2, [pc, #140]	@ (800c568 <HAL_TIM_Base_Start_IT+0xf4>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d013      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a21      	ldr	r2, [pc, #132]	@ (800c56c <HAL_TIM_Base_Start_IT+0xf8>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d00e      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a20      	ldr	r2, [pc, #128]	@ (800c570 <HAL_TIM_Base_Start_IT+0xfc>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d009      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a1e      	ldr	r2, [pc, #120]	@ (800c574 <HAL_TIM_Base_Start_IT+0x100>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d004      	beq.n	800c508 <HAL_TIM_Base_Start_IT+0x94>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a1d      	ldr	r2, [pc, #116]	@ (800c578 <HAL_TIM_Base_Start_IT+0x104>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d115      	bne.n	800c534 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	689a      	ldr	r2, [r3, #8]
 800c50e:	4b1b      	ldr	r3, [pc, #108]	@ (800c57c <HAL_TIM_Base_Start_IT+0x108>)
 800c510:	4013      	ands	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2b06      	cmp	r3, #6
 800c518:	d015      	beq.n	800c546 <HAL_TIM_Base_Start_IT+0xd2>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c520:	d011      	beq.n	800c546 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f042 0201 	orr.w	r2, r2, #1
 800c530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c532:	e008      	b.n	800c546 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0201 	orr.w	r2, r2, #1
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	e000      	b.n	800c548 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	40010000 	.word	0x40010000
 800c55c:	40000400 	.word	0x40000400
 800c560:	40000800 	.word	0x40000800
 800c564:	40000c00 	.word	0x40000c00
 800c568:	40010400 	.word	0x40010400
 800c56c:	40001800 	.word	0x40001800
 800c570:	40014000 	.word	0x40014000
 800c574:	4000e000 	.word	0x4000e000
 800c578:	4000e400 	.word	0x4000e400
 800c57c:	00010007 	.word	0x00010007

0800c580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e049      	b.n	800c626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f841 	bl	800c62e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	f000 fd2e 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
	...

0800c644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d109      	bne.n	800c668 <HAL_TIM_PWM_Start+0x24>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	e03c      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d109      	bne.n	800c682 <HAL_TIM_PWM_Start+0x3e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b01      	cmp	r3, #1
 800c678:	bf14      	ite	ne
 800c67a:	2301      	movne	r3, #1
 800c67c:	2300      	moveq	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	e02f      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b08      	cmp	r3, #8
 800c686:	d109      	bne.n	800c69c <HAL_TIM_PWM_Start+0x58>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b01      	cmp	r3, #1
 800c692:	bf14      	ite	ne
 800c694:	2301      	movne	r3, #1
 800c696:	2300      	moveq	r3, #0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	e022      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	d109      	bne.n	800c6b6 <HAL_TIM_PWM_Start+0x72>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	bf14      	ite	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	2300      	moveq	r3, #0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	e015      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b10      	cmp	r3, #16
 800c6ba:	d109      	bne.n	800c6d0 <HAL_TIM_PWM_Start+0x8c>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	bf14      	ite	ne
 800c6c8:	2301      	movne	r3, #1
 800c6ca:	2300      	moveq	r3, #0
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	e008      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	bf14      	ite	ne
 800c6dc:	2301      	movne	r3, #1
 800c6de:	2300      	moveq	r3, #0
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e0ab      	b.n	800c842 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d104      	bne.n	800c6fa <HAL_TIM_PWM_Start+0xb6>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6f8:	e023      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d104      	bne.n	800c70a <HAL_TIM_PWM_Start+0xc6>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c708:	e01b      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d104      	bne.n	800c71a <HAL_TIM_PWM_Start+0xd6>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c718:	e013      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b0c      	cmp	r3, #12
 800c71e:	d104      	bne.n	800c72a <HAL_TIM_PWM_Start+0xe6>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c728:	e00b      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b10      	cmp	r3, #16
 800c72e:	d104      	bne.n	800c73a <HAL_TIM_PWM_Start+0xf6>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c738:	e003      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2202      	movs	r2, #2
 800c73e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2201      	movs	r2, #1
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f001 f88e 	bl	800d86c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a3d      	ldr	r2, [pc, #244]	@ (800c84c <HAL_TIM_PWM_Start+0x208>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d013      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a3c      	ldr	r2, [pc, #240]	@ (800c850 <HAL_TIM_PWM_Start+0x20c>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d00e      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a3a      	ldr	r2, [pc, #232]	@ (800c854 <HAL_TIM_PWM_Start+0x210>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d009      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a39      	ldr	r2, [pc, #228]	@ (800c858 <HAL_TIM_PWM_Start+0x214>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d004      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a37      	ldr	r2, [pc, #220]	@ (800c85c <HAL_TIM_PWM_Start+0x218>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d101      	bne.n	800c786 <HAL_TIM_PWM_Start+0x142>
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <HAL_TIM_PWM_Start+0x144>
 800c786:	2300      	movs	r3, #0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d007      	beq.n	800c79c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c79a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c84c <HAL_TIM_PWM_Start+0x208>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d02c      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7ae:	d027      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a2a      	ldr	r2, [pc, #168]	@ (800c860 <HAL_TIM_PWM_Start+0x21c>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d022      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a29      	ldr	r2, [pc, #164]	@ (800c864 <HAL_TIM_PWM_Start+0x220>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d01d      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a27      	ldr	r2, [pc, #156]	@ (800c868 <HAL_TIM_PWM_Start+0x224>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d018      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c850 <HAL_TIM_PWM_Start+0x20c>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d013      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a23      	ldr	r2, [pc, #140]	@ (800c86c <HAL_TIM_PWM_Start+0x228>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d00e      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a1b      	ldr	r2, [pc, #108]	@ (800c854 <HAL_TIM_PWM_Start+0x210>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d009      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800c870 <HAL_TIM_PWM_Start+0x22c>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d004      	beq.n	800c800 <HAL_TIM_PWM_Start+0x1bc>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c874 <HAL_TIM_PWM_Start+0x230>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d115      	bne.n	800c82c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689a      	ldr	r2, [r3, #8]
 800c806:	4b1c      	ldr	r3, [pc, #112]	@ (800c878 <HAL_TIM_PWM_Start+0x234>)
 800c808:	4013      	ands	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b06      	cmp	r3, #6
 800c810:	d015      	beq.n	800c83e <HAL_TIM_PWM_Start+0x1fa>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c818:	d011      	beq.n	800c83e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f042 0201 	orr.w	r2, r2, #1
 800c828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c82a:	e008      	b.n	800c83e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0201 	orr.w	r2, r2, #1
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	e000      	b.n	800c840 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c83e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40010000 	.word	0x40010000
 800c850:	40010400 	.word	0x40010400
 800c854:	40014000 	.word	0x40014000
 800c858:	40014400 	.word	0x40014400
 800c85c:	40014800 	.word	0x40014800
 800c860:	40000400 	.word	0x40000400
 800c864:	40000800 	.word	0x40000800
 800c868:	40000c00 	.word	0x40000c00
 800c86c:	40001800 	.word	0x40001800
 800c870:	4000e000 	.word	0x4000e000
 800c874:	4000e400 	.word	0x4000e400
 800c878:	00010007 	.word	0x00010007

0800c87c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2200      	movs	r2, #0
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 ffec 	bl	800d86c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a3e      	ldr	r2, [pc, #248]	@ (800c994 <HAL_TIM_PWM_Stop+0x118>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d013      	beq.n	800c8c6 <HAL_TIM_PWM_Stop+0x4a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a3d      	ldr	r2, [pc, #244]	@ (800c998 <HAL_TIM_PWM_Stop+0x11c>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00e      	beq.n	800c8c6 <HAL_TIM_PWM_Stop+0x4a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a3b      	ldr	r2, [pc, #236]	@ (800c99c <HAL_TIM_PWM_Stop+0x120>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d009      	beq.n	800c8c6 <HAL_TIM_PWM_Stop+0x4a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a3a      	ldr	r2, [pc, #232]	@ (800c9a0 <HAL_TIM_PWM_Stop+0x124>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d004      	beq.n	800c8c6 <HAL_TIM_PWM_Stop+0x4a>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a38      	ldr	r2, [pc, #224]	@ (800c9a4 <HAL_TIM_PWM_Stop+0x128>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d101      	bne.n	800c8ca <HAL_TIM_PWM_Stop+0x4e>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e000      	b.n	800c8cc <HAL_TIM_PWM_Stop+0x50>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d017      	beq.n	800c900 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6a1a      	ldr	r2, [r3, #32]
 800c8d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10f      	bne.n	800c900 <HAL_TIM_PWM_Stop+0x84>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6a1a      	ldr	r2, [r3, #32]
 800c8e6:	f240 4344 	movw	r3, #1092	@ 0x444
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d107      	bne.n	800c900 <HAL_TIM_PWM_Stop+0x84>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c8fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10f      	bne.n	800c930 <HAL_TIM_PWM_Stop+0xb4>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6a1a      	ldr	r2, [r3, #32]
 800c916:	f240 4344 	movw	r3, #1092	@ 0x444
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <HAL_TIM_PWM_Stop+0xb4>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 0201 	bic.w	r2, r2, #1
 800c92e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d104      	bne.n	800c940 <HAL_TIM_PWM_Stop+0xc4>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c93e:	e023      	b.n	800c988 <HAL_TIM_PWM_Stop+0x10c>
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b04      	cmp	r3, #4
 800c944:	d104      	bne.n	800c950 <HAL_TIM_PWM_Stop+0xd4>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c94e:	e01b      	b.n	800c988 <HAL_TIM_PWM_Stop+0x10c>
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b08      	cmp	r3, #8
 800c954:	d104      	bne.n	800c960 <HAL_TIM_PWM_Stop+0xe4>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c95e:	e013      	b.n	800c988 <HAL_TIM_PWM_Stop+0x10c>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	2b0c      	cmp	r3, #12
 800c964:	d104      	bne.n	800c970 <HAL_TIM_PWM_Stop+0xf4>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c96e:	e00b      	b.n	800c988 <HAL_TIM_PWM_Stop+0x10c>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b10      	cmp	r3, #16
 800c974:	d104      	bne.n	800c980 <HAL_TIM_PWM_Stop+0x104>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c97e:	e003      	b.n	800c988 <HAL_TIM_PWM_Stop+0x10c>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	40010000 	.word	0x40010000
 800c998:	40010400 	.word	0x40010400
 800c99c:	40014000 	.word	0x40014000
 800c9a0:	40014400 	.word	0x40014400
 800c9a4:	40014800 	.word	0x40014800

0800c9a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d020      	beq.n	800ca0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f003 0302 	and.w	r3, r3, #2
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d01b      	beq.n	800ca0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f06f 0202 	mvn.w	r2, #2
 800c9dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	f003 0303 	and.w	r3, r3, #3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 faf6 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800c9f8:	e005      	b.n	800ca06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fae8 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 faf9 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	f003 0304 	and.w	r3, r3, #4
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d020      	beq.n	800ca58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d01b      	beq.n	800ca58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f06f 0204 	mvn.w	r2, #4
 800ca28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fad0 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800ca44:	e005      	b.n	800ca52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fac2 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fad3 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f003 0308 	and.w	r3, r3, #8
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d020      	beq.n	800caa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01b      	beq.n	800caa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f06f 0208 	mvn.w	r2, #8
 800ca74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2204      	movs	r2, #4
 800ca7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	f003 0303 	and.w	r3, r3, #3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 faaa 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800ca90:	e005      	b.n	800ca9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fa9c 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 faad 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f003 0310 	and.w	r3, r3, #16
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d020      	beq.n	800caf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01b      	beq.n	800caf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f06f 0210 	mvn.w	r2, #16
 800cac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2208      	movs	r2, #8
 800cac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d003      	beq.n	800cade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa84 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800cadc:	e005      	b.n	800caea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa76 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fa87 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00c      	beq.n	800cb14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d007      	beq.n	800cb14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f06f 0201 	mvn.w	r2, #1
 800cb0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7f3 ffd2 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d104      	bne.n	800cb28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d007      	beq.n	800cb42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cb3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 ff61 	bl	800da04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d007      	beq.n	800cb66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cb5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 ff59 	bl	800da18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00c      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d007      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cb82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fa41 	bl	800d00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f003 0320 	and.w	r3, r3, #32
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00c      	beq.n	800cbae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f06f 0220 	mvn.w	r2, #32
 800cba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 ff21 	bl	800d9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbae:	bf00      	nop
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d101      	bne.n	800cbd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	e0ff      	b.n	800cdd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b14      	cmp	r3, #20
 800cbe2:	f200 80f0 	bhi.w	800cdc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cc41 	.word	0x0800cc41
 800cbf0:	0800cdc7 	.word	0x0800cdc7
 800cbf4:	0800cdc7 	.word	0x0800cdc7
 800cbf8:	0800cdc7 	.word	0x0800cdc7
 800cbfc:	0800cc81 	.word	0x0800cc81
 800cc00:	0800cdc7 	.word	0x0800cdc7
 800cc04:	0800cdc7 	.word	0x0800cdc7
 800cc08:	0800cdc7 	.word	0x0800cdc7
 800cc0c:	0800ccc3 	.word	0x0800ccc3
 800cc10:	0800cdc7 	.word	0x0800cdc7
 800cc14:	0800cdc7 	.word	0x0800cdc7
 800cc18:	0800cdc7 	.word	0x0800cdc7
 800cc1c:	0800cd03 	.word	0x0800cd03
 800cc20:	0800cdc7 	.word	0x0800cdc7
 800cc24:	0800cdc7 	.word	0x0800cdc7
 800cc28:	0800cdc7 	.word	0x0800cdc7
 800cc2c:	0800cd45 	.word	0x0800cd45
 800cc30:	0800cdc7 	.word	0x0800cdc7
 800cc34:	0800cdc7 	.word	0x0800cdc7
 800cc38:	0800cdc7 	.word	0x0800cdc7
 800cc3c:	0800cd85 	.word	0x0800cd85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa9c 	bl	800d184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0208 	orr.w	r2, r2, #8
 800cc5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699a      	ldr	r2, [r3, #24]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 0204 	bic.w	r2, r2, #4
 800cc6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6999      	ldr	r1, [r3, #24]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	430a      	orrs	r2, r1
 800cc7c:	619a      	str	r2, [r3, #24]
      break;
 800cc7e:	e0a5      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fb0c 	bl	800d2a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ccaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6999      	ldr	r1, [r3, #24]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	021a      	lsls	r2, r3, #8
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	619a      	str	r2, [r3, #24]
      break;
 800ccc0:	e084      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fb75 	bl	800d3b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f042 0208 	orr.w	r2, r2, #8
 800ccdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0204 	bic.w	r2, r2, #4
 800ccec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	69d9      	ldr	r1, [r3, #28]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	430a      	orrs	r2, r1
 800ccfe:	61da      	str	r2, [r3, #28]
      break;
 800cd00:	e064      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fbdd 	bl	800d4c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69da      	ldr	r2, [r3, #28]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	69da      	ldr	r2, [r3, #28]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	69d9      	ldr	r1, [r3, #28]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	021a      	lsls	r2, r3, #8
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	61da      	str	r2, [r3, #28]
      break;
 800cd42:	e043      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 fc26 	bl	800d59c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0208 	orr.w	r2, r2, #8
 800cd5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0204 	bic.w	r2, r2, #4
 800cd6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	691a      	ldr	r2, [r3, #16]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cd82:	e023      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 fc6a 	bl	800d664 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	021a      	lsls	r2, r3, #8
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cdc4:	e002      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	75fb      	strb	r3, [r7, #23]
      break;
 800cdca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop

0800cde0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d101      	bne.n	800cdfc <HAL_TIM_ConfigClockSource+0x1c>
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	e0dc      	b.n	800cfb6 <HAL_TIM_ConfigClockSource+0x1d6>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	4b6a      	ldr	r3, [pc, #424]	@ (800cfc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a64      	ldr	r2, [pc, #400]	@ (800cfc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	f000 80a9 	beq.w	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ce38:	4a62      	ldr	r2, [pc, #392]	@ (800cfc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	f200 80ae 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce40:	4a61      	ldr	r2, [pc, #388]	@ (800cfc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	f000 80a1 	beq.w	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ce48:	4a5f      	ldr	r2, [pc, #380]	@ (800cfc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	f200 80a6 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce50:	4a5e      	ldr	r2, [pc, #376]	@ (800cfcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	f000 8099 	beq.w	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ce58:	4a5c      	ldr	r2, [pc, #368]	@ (800cfcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	f200 809e 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ce64:	f000 8091 	beq.w	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ce68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ce6c:	f200 8096 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce74:	f000 8089 	beq.w	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ce78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce7c:	f200 808e 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce84:	d03e      	beq.n	800cf04 <HAL_TIM_ConfigClockSource+0x124>
 800ce86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce8a:	f200 8087 	bhi.w	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce92:	f000 8086 	beq.w	800cfa2 <HAL_TIM_ConfigClockSource+0x1c2>
 800ce96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce9a:	d87f      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ce9c:	2b70      	cmp	r3, #112	@ 0x70
 800ce9e:	d01a      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0xf6>
 800cea0:	2b70      	cmp	r3, #112	@ 0x70
 800cea2:	d87b      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cea4:	2b60      	cmp	r3, #96	@ 0x60
 800cea6:	d050      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x16a>
 800cea8:	2b60      	cmp	r3, #96	@ 0x60
 800ceaa:	d877      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ceac:	2b50      	cmp	r3, #80	@ 0x50
 800ceae:	d03c      	beq.n	800cf2a <HAL_TIM_ConfigClockSource+0x14a>
 800ceb0:	2b50      	cmp	r3, #80	@ 0x50
 800ceb2:	d873      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800ceb4:	2b40      	cmp	r3, #64	@ 0x40
 800ceb6:	d058      	beq.n	800cf6a <HAL_TIM_ConfigClockSource+0x18a>
 800ceb8:	2b40      	cmp	r3, #64	@ 0x40
 800ceba:	d86f      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cebc:	2b30      	cmp	r3, #48	@ 0x30
 800cebe:	d064      	beq.n	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cec0:	2b30      	cmp	r3, #48	@ 0x30
 800cec2:	d86b      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cec4:	2b20      	cmp	r3, #32
 800cec6:	d060      	beq.n	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800cec8:	2b20      	cmp	r3, #32
 800ceca:	d867      	bhi.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d05c      	beq.n	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ced0:	2b10      	cmp	r3, #16
 800ced2:	d05a      	beq.n	800cf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800ced4:	e062      	b.n	800cf9c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cee6:	f000 fca1 	bl	800d82c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	609a      	str	r2, [r3, #8]
      break;
 800cf02:	e04f      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf14:	f000 fc8a 	bl	800d82c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	689a      	ldr	r2, [r3, #8]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf26:	609a      	str	r2, [r3, #8]
      break;
 800cf28:	e03c      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf36:	461a      	mov	r2, r3
 800cf38:	f000 fbfa 	bl	800d730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2150      	movs	r1, #80	@ 0x50
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fc54 	bl	800d7f0 <TIM_ITRx_SetConfig>
      break;
 800cf48:	e02c      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf56:	461a      	mov	r2, r3
 800cf58:	f000 fc19 	bl	800d78e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2160      	movs	r1, #96	@ 0x60
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 fc44 	bl	800d7f0 <TIM_ITRx_SetConfig>
      break;
 800cf68:	e01c      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf76:	461a      	mov	r2, r3
 800cf78:	f000 fbda 	bl	800d730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2140      	movs	r1, #64	@ 0x40
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fc34 	bl	800d7f0 <TIM_ITRx_SetConfig>
      break;
 800cf88:	e00c      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4619      	mov	r1, r3
 800cf94:	4610      	mov	r0, r2
 800cf96:	f000 fc2b 	bl	800d7f0 <TIM_ITRx_SetConfig>
      break;
 800cf9a:	e003      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa0:	e000      	b.n	800cfa4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cfa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	ffceff88 	.word	0xffceff88
 800cfc4:	00100040 	.word	0x00100040
 800cfc8:	00100030 	.word	0x00100030
 800cfcc:	00100020 	.word	0x00100020

0800cfd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a4a      	ldr	r2, [pc, #296]	@ (800d15c <TIM_Base_SetConfig+0x13c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d013      	beq.n	800d060 <TIM_Base_SetConfig+0x40>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03e:	d00f      	beq.n	800d060 <TIM_Base_SetConfig+0x40>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a47      	ldr	r2, [pc, #284]	@ (800d160 <TIM_Base_SetConfig+0x140>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00b      	beq.n	800d060 <TIM_Base_SetConfig+0x40>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a46      	ldr	r2, [pc, #280]	@ (800d164 <TIM_Base_SetConfig+0x144>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d007      	beq.n	800d060 <TIM_Base_SetConfig+0x40>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a45      	ldr	r2, [pc, #276]	@ (800d168 <TIM_Base_SetConfig+0x148>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d003      	beq.n	800d060 <TIM_Base_SetConfig+0x40>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a44      	ldr	r2, [pc, #272]	@ (800d16c <TIM_Base_SetConfig+0x14c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d108      	bne.n	800d072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4313      	orrs	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a39      	ldr	r2, [pc, #228]	@ (800d15c <TIM_Base_SetConfig+0x13c>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d027      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d080:	d023      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a36      	ldr	r2, [pc, #216]	@ (800d160 <TIM_Base_SetConfig+0x140>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d01f      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a35      	ldr	r2, [pc, #212]	@ (800d164 <TIM_Base_SetConfig+0x144>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d01b      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a34      	ldr	r2, [pc, #208]	@ (800d168 <TIM_Base_SetConfig+0x148>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d017      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a33      	ldr	r2, [pc, #204]	@ (800d16c <TIM_Base_SetConfig+0x14c>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a32      	ldr	r2, [pc, #200]	@ (800d170 <TIM_Base_SetConfig+0x150>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a31      	ldr	r2, [pc, #196]	@ (800d174 <TIM_Base_SetConfig+0x154>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a30      	ldr	r2, [pc, #192]	@ (800d178 <TIM_Base_SetConfig+0x158>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a2f      	ldr	r2, [pc, #188]	@ (800d17c <TIM_Base_SetConfig+0x15c>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a2e      	ldr	r2, [pc, #184]	@ (800d180 <TIM_Base_SetConfig+0x160>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d108      	bne.n	800d0dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	689a      	ldr	r2, [r3, #8]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a16      	ldr	r2, [pc, #88]	@ (800d15c <TIM_Base_SetConfig+0x13c>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d00f      	beq.n	800d128 <TIM_Base_SetConfig+0x108>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a18      	ldr	r2, [pc, #96]	@ (800d16c <TIM_Base_SetConfig+0x14c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d00b      	beq.n	800d128 <TIM_Base_SetConfig+0x108>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a17      	ldr	r2, [pc, #92]	@ (800d170 <TIM_Base_SetConfig+0x150>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d007      	beq.n	800d128 <TIM_Base_SetConfig+0x108>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a16      	ldr	r2, [pc, #88]	@ (800d174 <TIM_Base_SetConfig+0x154>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d003      	beq.n	800d128 <TIM_Base_SetConfig+0x108>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a15      	ldr	r2, [pc, #84]	@ (800d178 <TIM_Base_SetConfig+0x158>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d103      	bne.n	800d130 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	691a      	ldr	r2, [r3, #16]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d105      	bne.n	800d14e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	f023 0201 	bic.w	r2, r3, #1
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	611a      	str	r2, [r3, #16]
  }
}
 800d14e:	bf00      	nop
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	40010000 	.word	0x40010000
 800d160:	40000400 	.word	0x40000400
 800d164:	40000800 	.word	0x40000800
 800d168:	40000c00 	.word	0x40000c00
 800d16c:	40010400 	.word	0x40010400
 800d170:	40014000 	.word	0x40014000
 800d174:	40014400 	.word	0x40014400
 800d178:	40014800 	.word	0x40014800
 800d17c:	4000e000 	.word	0x4000e000
 800d180:	4000e400 	.word	0x4000e400

0800d184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d184:	b480      	push	{r7}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a1b      	ldr	r3, [r3, #32]
 800d198:	f023 0201 	bic.w	r2, r3, #1
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	4b37      	ldr	r3, [pc, #220]	@ (800d28c <TIM_OC1_SetConfig+0x108>)
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f023 0303 	bic.w	r3, r3, #3
 800d1ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f023 0302 	bic.w	r3, r3, #2
 800d1cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a2d      	ldr	r2, [pc, #180]	@ (800d290 <TIM_OC1_SetConfig+0x10c>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00f      	beq.n	800d200 <TIM_OC1_SetConfig+0x7c>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a2c      	ldr	r2, [pc, #176]	@ (800d294 <TIM_OC1_SetConfig+0x110>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00b      	beq.n	800d200 <TIM_OC1_SetConfig+0x7c>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a2b      	ldr	r2, [pc, #172]	@ (800d298 <TIM_OC1_SetConfig+0x114>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d007      	beq.n	800d200 <TIM_OC1_SetConfig+0x7c>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a2a      	ldr	r2, [pc, #168]	@ (800d29c <TIM_OC1_SetConfig+0x118>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d003      	beq.n	800d200 <TIM_OC1_SetConfig+0x7c>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a29      	ldr	r2, [pc, #164]	@ (800d2a0 <TIM_OC1_SetConfig+0x11c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d10c      	bne.n	800d21a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0308 	bic.w	r3, r3, #8
 800d206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	4313      	orrs	r3, r2
 800d210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f023 0304 	bic.w	r3, r3, #4
 800d218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a1c      	ldr	r2, [pc, #112]	@ (800d290 <TIM_OC1_SetConfig+0x10c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00f      	beq.n	800d242 <TIM_OC1_SetConfig+0xbe>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a1b      	ldr	r2, [pc, #108]	@ (800d294 <TIM_OC1_SetConfig+0x110>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d00b      	beq.n	800d242 <TIM_OC1_SetConfig+0xbe>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a1a      	ldr	r2, [pc, #104]	@ (800d298 <TIM_OC1_SetConfig+0x114>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d007      	beq.n	800d242 <TIM_OC1_SetConfig+0xbe>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a19      	ldr	r2, [pc, #100]	@ (800d29c <TIM_OC1_SetConfig+0x118>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d003      	beq.n	800d242 <TIM_OC1_SetConfig+0xbe>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a18      	ldr	r2, [pc, #96]	@ (800d2a0 <TIM_OC1_SetConfig+0x11c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d111      	bne.n	800d266 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	4313      	orrs	r3, r2
 800d25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	4313      	orrs	r3, r2
 800d264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	621a      	str	r2, [r3, #32]
}
 800d280:	bf00      	nop
 800d282:	371c      	adds	r7, #28
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	fffeff8f 	.word	0xfffeff8f
 800d290:	40010000 	.word	0x40010000
 800d294:	40010400 	.word	0x40010400
 800d298:	40014000 	.word	0x40014000
 800d29c:	40014400 	.word	0x40014400
 800d2a0:	40014800 	.word	0x40014800

0800d2a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	f023 0210 	bic.w	r2, r3, #16
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	4b34      	ldr	r3, [pc, #208]	@ (800d3a0 <TIM_OC2_SetConfig+0xfc>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	021b      	lsls	r3, r3, #8
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f023 0320 	bic.w	r3, r3, #32
 800d2ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	011b      	lsls	r3, r3, #4
 800d2f6:	697a      	ldr	r2, [r7, #20]
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a29      	ldr	r2, [pc, #164]	@ (800d3a4 <TIM_OC2_SetConfig+0x100>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d003      	beq.n	800d30c <TIM_OC2_SetConfig+0x68>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a28      	ldr	r2, [pc, #160]	@ (800d3a8 <TIM_OC2_SetConfig+0x104>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d10d      	bne.n	800d328 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a1e      	ldr	r2, [pc, #120]	@ (800d3a4 <TIM_OC2_SetConfig+0x100>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d00f      	beq.n	800d350 <TIM_OC2_SetConfig+0xac>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a1d      	ldr	r2, [pc, #116]	@ (800d3a8 <TIM_OC2_SetConfig+0x104>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d00b      	beq.n	800d350 <TIM_OC2_SetConfig+0xac>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a1c      	ldr	r2, [pc, #112]	@ (800d3ac <TIM_OC2_SetConfig+0x108>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d007      	beq.n	800d350 <TIM_OC2_SetConfig+0xac>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a1b      	ldr	r2, [pc, #108]	@ (800d3b0 <TIM_OC2_SetConfig+0x10c>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d003      	beq.n	800d350 <TIM_OC2_SetConfig+0xac>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a1a      	ldr	r2, [pc, #104]	@ (800d3b4 <TIM_OC2_SetConfig+0x110>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d113      	bne.n	800d378 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d35e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	4313      	orrs	r3, r2
 800d36a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	693a      	ldr	r2, [r7, #16]
 800d374:	4313      	orrs	r3, r2
 800d376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685a      	ldr	r2, [r3, #4]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	621a      	str	r2, [r3, #32]
}
 800d392:	bf00      	nop
 800d394:	371c      	adds	r7, #28
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	feff8fff 	.word	0xfeff8fff
 800d3a4:	40010000 	.word	0x40010000
 800d3a8:	40010400 	.word	0x40010400
 800d3ac:	40014000 	.word	0x40014000
 800d3b0:	40014400 	.word	0x40014400
 800d3b4:	40014800 	.word	0x40014800

0800d3b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a1b      	ldr	r3, [r3, #32]
 800d3cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4b33      	ldr	r3, [pc, #204]	@ (800d4b0 <TIM_OC3_SetConfig+0xf8>)
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f023 0303 	bic.w	r3, r3, #3
 800d3ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	021b      	lsls	r3, r3, #8
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a28      	ldr	r2, [pc, #160]	@ (800d4b4 <TIM_OC3_SetConfig+0xfc>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d003      	beq.n	800d41e <TIM_OC3_SetConfig+0x66>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a27      	ldr	r2, [pc, #156]	@ (800d4b8 <TIM_OC3_SetConfig+0x100>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d10d      	bne.n	800d43a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	4313      	orrs	r3, r2
 800d430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b4 <TIM_OC3_SetConfig+0xfc>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d00f      	beq.n	800d462 <TIM_OC3_SetConfig+0xaa>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a1c      	ldr	r2, [pc, #112]	@ (800d4b8 <TIM_OC3_SetConfig+0x100>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d00b      	beq.n	800d462 <TIM_OC3_SetConfig+0xaa>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a1b      	ldr	r2, [pc, #108]	@ (800d4bc <TIM_OC3_SetConfig+0x104>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d007      	beq.n	800d462 <TIM_OC3_SetConfig+0xaa>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a1a      	ldr	r2, [pc, #104]	@ (800d4c0 <TIM_OC3_SetConfig+0x108>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d003      	beq.n	800d462 <TIM_OC3_SetConfig+0xaa>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a19      	ldr	r2, [pc, #100]	@ (800d4c4 <TIM_OC3_SetConfig+0x10c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d113      	bne.n	800d48a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	4313      	orrs	r3, r2
 800d488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	621a      	str	r2, [r3, #32]
}
 800d4a4:	bf00      	nop
 800d4a6:	371c      	adds	r7, #28
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	fffeff8f 	.word	0xfffeff8f
 800d4b4:	40010000 	.word	0x40010000
 800d4b8:	40010400 	.word	0x40010400
 800d4bc:	40014000 	.word	0x40014000
 800d4c0:	40014400 	.word	0x40014400
 800d4c4:	40014800 	.word	0x40014800

0800d4c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a1b      	ldr	r3, [r3, #32]
 800d4dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	69db      	ldr	r3, [r3, #28]
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	4b24      	ldr	r3, [pc, #144]	@ (800d584 <TIM_OC4_SetConfig+0xbc>)
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	021b      	lsls	r3, r3, #8
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	4313      	orrs	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	031b      	lsls	r3, r3, #12
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a19      	ldr	r2, [pc, #100]	@ (800d588 <TIM_OC4_SetConfig+0xc0>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d00f      	beq.n	800d548 <TIM_OC4_SetConfig+0x80>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a18      	ldr	r2, [pc, #96]	@ (800d58c <TIM_OC4_SetConfig+0xc4>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d00b      	beq.n	800d548 <TIM_OC4_SetConfig+0x80>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a17      	ldr	r2, [pc, #92]	@ (800d590 <TIM_OC4_SetConfig+0xc8>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d007      	beq.n	800d548 <TIM_OC4_SetConfig+0x80>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a16      	ldr	r2, [pc, #88]	@ (800d594 <TIM_OC4_SetConfig+0xcc>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d003      	beq.n	800d548 <TIM_OC4_SetConfig+0x80>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a15      	ldr	r2, [pc, #84]	@ (800d598 <TIM_OC4_SetConfig+0xd0>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d109      	bne.n	800d55c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d54e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	019b      	lsls	r3, r3, #6
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	4313      	orrs	r3, r2
 800d55a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	697a      	ldr	r2, [r7, #20]
 800d560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	621a      	str	r2, [r3, #32]
}
 800d576:	bf00      	nop
 800d578:	371c      	adds	r7, #28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	feff8fff 	.word	0xfeff8fff
 800d588:	40010000 	.word	0x40010000
 800d58c:	40010400 	.word	0x40010400
 800d590:	40014000 	.word	0x40014000
 800d594:	40014400 	.word	0x40014400
 800d598:	40014800 	.word	0x40014800

0800d59c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b087      	sub	sp, #28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	4b21      	ldr	r3, [pc, #132]	@ (800d64c <TIM_OC5_SetConfig+0xb0>)
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d5dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	041b      	lsls	r3, r3, #16
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a18      	ldr	r2, [pc, #96]	@ (800d650 <TIM_OC5_SetConfig+0xb4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d00f      	beq.n	800d612 <TIM_OC5_SetConfig+0x76>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a17      	ldr	r2, [pc, #92]	@ (800d654 <TIM_OC5_SetConfig+0xb8>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d00b      	beq.n	800d612 <TIM_OC5_SetConfig+0x76>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a16      	ldr	r2, [pc, #88]	@ (800d658 <TIM_OC5_SetConfig+0xbc>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d007      	beq.n	800d612 <TIM_OC5_SetConfig+0x76>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a15      	ldr	r2, [pc, #84]	@ (800d65c <TIM_OC5_SetConfig+0xc0>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d003      	beq.n	800d612 <TIM_OC5_SetConfig+0x76>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a14      	ldr	r2, [pc, #80]	@ (800d660 <TIM_OC5_SetConfig+0xc4>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d109      	bne.n	800d626 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d618:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	4313      	orrs	r3, r2
 800d624:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	621a      	str	r2, [r3, #32]
}
 800d640:	bf00      	nop
 800d642:	371c      	adds	r7, #28
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	fffeff8f 	.word	0xfffeff8f
 800d650:	40010000 	.word	0x40010000
 800d654:	40010400 	.word	0x40010400
 800d658:	40014000 	.word	0x40014000
 800d65c:	40014400 	.word	0x40014400
 800d660:	40014800 	.word	0x40014800

0800d664 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4b22      	ldr	r3, [pc, #136]	@ (800d718 <TIM_OC6_SetConfig+0xb4>)
 800d690:	4013      	ands	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d6a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	051b      	lsls	r3, r3, #20
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a19      	ldr	r2, [pc, #100]	@ (800d71c <TIM_OC6_SetConfig+0xb8>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d00f      	beq.n	800d6dc <TIM_OC6_SetConfig+0x78>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a18      	ldr	r2, [pc, #96]	@ (800d720 <TIM_OC6_SetConfig+0xbc>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d00b      	beq.n	800d6dc <TIM_OC6_SetConfig+0x78>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a17      	ldr	r2, [pc, #92]	@ (800d724 <TIM_OC6_SetConfig+0xc0>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d007      	beq.n	800d6dc <TIM_OC6_SetConfig+0x78>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a16      	ldr	r2, [pc, #88]	@ (800d728 <TIM_OC6_SetConfig+0xc4>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d003      	beq.n	800d6dc <TIM_OC6_SetConfig+0x78>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a15      	ldr	r2, [pc, #84]	@ (800d72c <TIM_OC6_SetConfig+0xc8>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d109      	bne.n	800d6f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	029b      	lsls	r3, r3, #10
 800d6ea:	697a      	ldr	r2, [r7, #20]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	621a      	str	r2, [r3, #32]
}
 800d70a:	bf00      	nop
 800d70c:	371c      	adds	r7, #28
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	feff8fff 	.word	0xfeff8fff
 800d71c:	40010000 	.word	0x40010000
 800d720:	40010400 	.word	0x40010400
 800d724:	40014000 	.word	0x40014000
 800d728:	40014400 	.word	0x40014400
 800d72c:	40014800 	.word	0x40014800

0800d730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d730:	b480      	push	{r7}
 800d732:	b087      	sub	sp, #28
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	f023 0201 	bic.w	r2, r3, #1
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d75a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	011b      	lsls	r3, r3, #4
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	4313      	orrs	r3, r2
 800d764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f023 030a 	bic.w	r3, r3, #10
 800d76c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	4313      	orrs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	621a      	str	r2, [r3, #32]
}
 800d782:	bf00      	nop
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d78e:	b480      	push	{r7}
 800d790:	b087      	sub	sp, #28
 800d792:	af00      	add	r7, sp, #0
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1b      	ldr	r3, [r3, #32]
 800d7a4:	f023 0210 	bic.w	r2, r3, #16
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d7b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	031b      	lsls	r3, r3, #12
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d7ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	011b      	lsls	r3, r3, #4
 800d7d0:	697a      	ldr	r2, [r7, #20]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	621a      	str	r2, [r3, #32]
}
 800d7e2:	bf00      	nop
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
	...

0800d7f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	4b09      	ldr	r3, [pc, #36]	@ (800d828 <TIM_ITRx_SetConfig+0x38>)
 800d804:	4013      	ands	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	f043 0307 	orr.w	r3, r3, #7
 800d812:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	609a      	str	r2, [r3, #8]
}
 800d81a:	bf00      	nop
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	ffcfff8f 	.word	0xffcfff8f

0800d82c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b087      	sub	sp, #28
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	021a      	lsls	r2, r3, #8
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	431a      	orrs	r2, r3
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	4313      	orrs	r3, r2
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	4313      	orrs	r3, r2
 800d858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	609a      	str	r2, [r3, #8]
}
 800d860:	bf00      	nop
 800d862:	371c      	adds	r7, #28
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b087      	sub	sp, #28
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f003 031f 	and.w	r3, r3, #31
 800d87e:	2201      	movs	r2, #1
 800d880:	fa02 f303 	lsl.w	r3, r2, r3
 800d884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	43db      	mvns	r3, r3
 800d88e:	401a      	ands	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6a1a      	ldr	r2, [r3, #32]
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f003 031f 	and.w	r3, r3, #31
 800d89e:	6879      	ldr	r1, [r7, #4]
 800d8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	621a      	str	r2, [r3, #32]
}
 800d8aa:	bf00      	nop
 800d8ac:	371c      	adds	r7, #28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
	...

0800d8b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d101      	bne.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8cc:	2302      	movs	r3, #2
 800d8ce:	e077      	b.n	800d9c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2202      	movs	r2, #2
 800d8dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a35      	ldr	r2, [pc, #212]	@ (800d9cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d004      	beq.n	800d904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a34      	ldr	r2, [pc, #208]	@ (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d108      	bne.n	800d916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d90a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	4313      	orrs	r3, r2
 800d914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d91c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	4313      	orrs	r3, r2
 800d926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a25      	ldr	r2, [pc, #148]	@ (800d9cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d02c      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d942:	d027      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a22      	ldr	r2, [pc, #136]	@ (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d022      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a21      	ldr	r2, [pc, #132]	@ (800d9d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d01d      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a1f      	ldr	r2, [pc, #124]	@ (800d9dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d018      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a1a      	ldr	r2, [pc, #104]	@ (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d013      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a1b      	ldr	r2, [pc, #108]	@ (800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d00e      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a1a      	ldr	r2, [pc, #104]	@ (800d9e4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d009      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a18      	ldr	r2, [pc, #96]	@ (800d9e8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d004      	beq.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a17      	ldr	r2, [pc, #92]	@ (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d10c      	bne.n	800d9ae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d99a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3714      	adds	r7, #20
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400
 800d9d4:	40000400 	.word	0x40000400
 800d9d8:	40000800 	.word	0x40000800
 800d9dc:	40000c00 	.word	0x40000c00
 800d9e0:	40001800 	.word	0x40001800
 800d9e4:	40014000 	.word	0x40014000
 800d9e8:	4000e000 	.word	0x4000e000
 800d9ec:	4000e400 	.word	0x4000e400

0800d9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e042      	b.n	800dac4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7f4 fa73 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2224      	movs	r2, #36	@ 0x24
 800da5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f022 0201 	bic.w	r2, r2, #1
 800da6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fe94 	bl	800e7a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f825 	bl	800dacc <UART_SetConfig>
 800da82:	4603      	mov	r3, r0
 800da84:	2b01      	cmp	r3, #1
 800da86:	d101      	bne.n	800da8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e01b      	b.n	800dac4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800da9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	689a      	ldr	r2, [r3, #8]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800daaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f042 0201 	orr.w	r2, r2, #1
 800daba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 ff13 	bl	800e8e8 <UART_CheckIdleState>
 800dac2:	4603      	mov	r3, r0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dacc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dad0:	b092      	sub	sp, #72	@ 0x48
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dad6:	2300      	movs	r3, #0
 800dad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	689a      	ldr	r2, [r3, #8]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	431a      	orrs	r2, r3
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	431a      	orrs	r2, r3
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	4bbe      	ldr	r3, [pc, #760]	@ (800ddf4 <UART_SetConfig+0x328>)
 800dafc:	4013      	ands	r3, r2
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	6812      	ldr	r2, [r2, #0]
 800db02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db04:	430b      	orrs	r3, r1
 800db06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4ab3      	ldr	r2, [pc, #716]	@ (800ddf8 <UART_SetConfig+0x32c>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d004      	beq.n	800db38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db34:	4313      	orrs	r3, r2
 800db36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	4baf      	ldr	r3, [pc, #700]	@ (800ddfc <UART_SetConfig+0x330>)
 800db40:	4013      	ands	r3, r2
 800db42:	697a      	ldr	r2, [r7, #20]
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db48:	430b      	orrs	r3, r1
 800db4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db52:	f023 010f 	bic.w	r1, r3, #15
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	430a      	orrs	r2, r1
 800db60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4aa6      	ldr	r2, [pc, #664]	@ (800de00 <UART_SetConfig+0x334>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d177      	bne.n	800dc5c <UART_SetConfig+0x190>
 800db6c:	4ba5      	ldr	r3, [pc, #660]	@ (800de04 <UART_SetConfig+0x338>)
 800db6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db74:	2b28      	cmp	r3, #40	@ 0x28
 800db76:	d86d      	bhi.n	800dc54 <UART_SetConfig+0x188>
 800db78:	a201      	add	r2, pc, #4	@ (adr r2, 800db80 <UART_SetConfig+0xb4>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800dc25 	.word	0x0800dc25
 800db84:	0800dc55 	.word	0x0800dc55
 800db88:	0800dc55 	.word	0x0800dc55
 800db8c:	0800dc55 	.word	0x0800dc55
 800db90:	0800dc55 	.word	0x0800dc55
 800db94:	0800dc55 	.word	0x0800dc55
 800db98:	0800dc55 	.word	0x0800dc55
 800db9c:	0800dc55 	.word	0x0800dc55
 800dba0:	0800dc2d 	.word	0x0800dc2d
 800dba4:	0800dc55 	.word	0x0800dc55
 800dba8:	0800dc55 	.word	0x0800dc55
 800dbac:	0800dc55 	.word	0x0800dc55
 800dbb0:	0800dc55 	.word	0x0800dc55
 800dbb4:	0800dc55 	.word	0x0800dc55
 800dbb8:	0800dc55 	.word	0x0800dc55
 800dbbc:	0800dc55 	.word	0x0800dc55
 800dbc0:	0800dc35 	.word	0x0800dc35
 800dbc4:	0800dc55 	.word	0x0800dc55
 800dbc8:	0800dc55 	.word	0x0800dc55
 800dbcc:	0800dc55 	.word	0x0800dc55
 800dbd0:	0800dc55 	.word	0x0800dc55
 800dbd4:	0800dc55 	.word	0x0800dc55
 800dbd8:	0800dc55 	.word	0x0800dc55
 800dbdc:	0800dc55 	.word	0x0800dc55
 800dbe0:	0800dc3d 	.word	0x0800dc3d
 800dbe4:	0800dc55 	.word	0x0800dc55
 800dbe8:	0800dc55 	.word	0x0800dc55
 800dbec:	0800dc55 	.word	0x0800dc55
 800dbf0:	0800dc55 	.word	0x0800dc55
 800dbf4:	0800dc55 	.word	0x0800dc55
 800dbf8:	0800dc55 	.word	0x0800dc55
 800dbfc:	0800dc55 	.word	0x0800dc55
 800dc00:	0800dc45 	.word	0x0800dc45
 800dc04:	0800dc55 	.word	0x0800dc55
 800dc08:	0800dc55 	.word	0x0800dc55
 800dc0c:	0800dc55 	.word	0x0800dc55
 800dc10:	0800dc55 	.word	0x0800dc55
 800dc14:	0800dc55 	.word	0x0800dc55
 800dc18:	0800dc55 	.word	0x0800dc55
 800dc1c:	0800dc55 	.word	0x0800dc55
 800dc20:	0800dc4d 	.word	0x0800dc4d
 800dc24:	2301      	movs	r3, #1
 800dc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2a:	e326      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc2c:	2304      	movs	r3, #4
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc32:	e322      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc34:	2308      	movs	r3, #8
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3a:	e31e      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc3c:	2310      	movs	r3, #16
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc42:	e31a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc44:	2320      	movs	r3, #32
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4a:	e316      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc4c:	2340      	movs	r3, #64	@ 0x40
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc52:	e312      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc54:	2380      	movs	r3, #128	@ 0x80
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e30e      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a69      	ldr	r2, [pc, #420]	@ (800de08 <UART_SetConfig+0x33c>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d130      	bne.n	800dcc8 <UART_SetConfig+0x1fc>
 800dc66:	4b67      	ldr	r3, [pc, #412]	@ (800de04 <UART_SetConfig+0x338>)
 800dc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc6a:	f003 0307 	and.w	r3, r3, #7
 800dc6e:	2b05      	cmp	r3, #5
 800dc70:	d826      	bhi.n	800dcc0 <UART_SetConfig+0x1f4>
 800dc72:	a201      	add	r2, pc, #4	@ (adr r2, 800dc78 <UART_SetConfig+0x1ac>)
 800dc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc78:	0800dc91 	.word	0x0800dc91
 800dc7c:	0800dc99 	.word	0x0800dc99
 800dc80:	0800dca1 	.word	0x0800dca1
 800dc84:	0800dca9 	.word	0x0800dca9
 800dc88:	0800dcb1 	.word	0x0800dcb1
 800dc8c:	0800dcb9 	.word	0x0800dcb9
 800dc90:	2300      	movs	r3, #0
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc96:	e2f0      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dc98:	2304      	movs	r3, #4
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9e:	e2ec      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dca0:	2308      	movs	r3, #8
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca6:	e2e8      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dca8:	2310      	movs	r3, #16
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcae:	e2e4      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb6:	e2e0      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dcb8:	2340      	movs	r3, #64	@ 0x40
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e2dc      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dcc0:	2380      	movs	r3, #128	@ 0x80
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e2d8      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a4f      	ldr	r2, [pc, #316]	@ (800de0c <UART_SetConfig+0x340>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d130      	bne.n	800dd34 <UART_SetConfig+0x268>
 800dcd2:	4b4c      	ldr	r3, [pc, #304]	@ (800de04 <UART_SetConfig+0x338>)
 800dcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcd6:	f003 0307 	and.w	r3, r3, #7
 800dcda:	2b05      	cmp	r3, #5
 800dcdc:	d826      	bhi.n	800dd2c <UART_SetConfig+0x260>
 800dcde:	a201      	add	r2, pc, #4	@ (adr r2, 800dce4 <UART_SetConfig+0x218>)
 800dce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce4:	0800dcfd 	.word	0x0800dcfd
 800dce8:	0800dd05 	.word	0x0800dd05
 800dcec:	0800dd0d 	.word	0x0800dd0d
 800dcf0:	0800dd15 	.word	0x0800dd15
 800dcf4:	0800dd1d 	.word	0x0800dd1d
 800dcf8:	0800dd25 	.word	0x0800dd25
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd02:	e2ba      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd04:	2304      	movs	r3, #4
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0a:	e2b6      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd0c:	2308      	movs	r3, #8
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd12:	e2b2      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd14:	2310      	movs	r3, #16
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1a:	e2ae      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd1c:	2320      	movs	r3, #32
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd22:	e2aa      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd24:	2340      	movs	r3, #64	@ 0x40
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e2a6      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd2c:	2380      	movs	r3, #128	@ 0x80
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e2a2      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a35      	ldr	r2, [pc, #212]	@ (800de10 <UART_SetConfig+0x344>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d130      	bne.n	800dda0 <UART_SetConfig+0x2d4>
 800dd3e:	4b31      	ldr	r3, [pc, #196]	@ (800de04 <UART_SetConfig+0x338>)
 800dd40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd42:	f003 0307 	and.w	r3, r3, #7
 800dd46:	2b05      	cmp	r3, #5
 800dd48:	d826      	bhi.n	800dd98 <UART_SetConfig+0x2cc>
 800dd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd50 <UART_SetConfig+0x284>)
 800dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd50:	0800dd69 	.word	0x0800dd69
 800dd54:	0800dd71 	.word	0x0800dd71
 800dd58:	0800dd79 	.word	0x0800dd79
 800dd5c:	0800dd81 	.word	0x0800dd81
 800dd60:	0800dd89 	.word	0x0800dd89
 800dd64:	0800dd91 	.word	0x0800dd91
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd6e:	e284      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd70:	2304      	movs	r3, #4
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd76:	e280      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd78:	2308      	movs	r3, #8
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd7e:	e27c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd80:	2310      	movs	r3, #16
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd86:	e278      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd88:	2320      	movs	r3, #32
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8e:	e274      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd90:	2340      	movs	r3, #64	@ 0x40
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e270      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dd98:	2380      	movs	r3, #128	@ 0x80
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e26c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a1b      	ldr	r2, [pc, #108]	@ (800de14 <UART_SetConfig+0x348>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d142      	bne.n	800de30 <UART_SetConfig+0x364>
 800ddaa:	4b16      	ldr	r3, [pc, #88]	@ (800de04 <UART_SetConfig+0x338>)
 800ddac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddae:	f003 0307 	and.w	r3, r3, #7
 800ddb2:	2b05      	cmp	r3, #5
 800ddb4:	d838      	bhi.n	800de28 <UART_SetConfig+0x35c>
 800ddb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddbc <UART_SetConfig+0x2f0>)
 800ddb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbc:	0800ddd5 	.word	0x0800ddd5
 800ddc0:	0800dddd 	.word	0x0800dddd
 800ddc4:	0800dde5 	.word	0x0800dde5
 800ddc8:	0800dded 	.word	0x0800dded
 800ddcc:	0800de19 	.word	0x0800de19
 800ddd0:	0800de21 	.word	0x0800de21
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddda:	e24e      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dddc:	2304      	movs	r3, #4
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dde2:	e24a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dde4:	2308      	movs	r3, #8
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddea:	e246      	b.n	800e27a <UART_SetConfig+0x7ae>
 800ddec:	2310      	movs	r3, #16
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddf2:	e242      	b.n	800e27a <UART_SetConfig+0x7ae>
 800ddf4:	cfff69f3 	.word	0xcfff69f3
 800ddf8:	58000c00 	.word	0x58000c00
 800ddfc:	11fff4ff 	.word	0x11fff4ff
 800de00:	40011000 	.word	0x40011000
 800de04:	58024400 	.word	0x58024400
 800de08:	40004400 	.word	0x40004400
 800de0c:	40004800 	.word	0x40004800
 800de10:	40004c00 	.word	0x40004c00
 800de14:	40005000 	.word	0x40005000
 800de18:	2320      	movs	r3, #32
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1e:	e22c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800de20:	2340      	movs	r3, #64	@ 0x40
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de26:	e228      	b.n	800e27a <UART_SetConfig+0x7ae>
 800de28:	2380      	movs	r3, #128	@ 0x80
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2e:	e224      	b.n	800e27a <UART_SetConfig+0x7ae>
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4ab1      	ldr	r2, [pc, #708]	@ (800e0fc <UART_SetConfig+0x630>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d176      	bne.n	800df28 <UART_SetConfig+0x45c>
 800de3a:	4bb1      	ldr	r3, [pc, #708]	@ (800e100 <UART_SetConfig+0x634>)
 800de3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de42:	2b28      	cmp	r3, #40	@ 0x28
 800de44:	d86c      	bhi.n	800df20 <UART_SetConfig+0x454>
 800de46:	a201      	add	r2, pc, #4	@ (adr r2, 800de4c <UART_SetConfig+0x380>)
 800de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4c:	0800def1 	.word	0x0800def1
 800de50:	0800df21 	.word	0x0800df21
 800de54:	0800df21 	.word	0x0800df21
 800de58:	0800df21 	.word	0x0800df21
 800de5c:	0800df21 	.word	0x0800df21
 800de60:	0800df21 	.word	0x0800df21
 800de64:	0800df21 	.word	0x0800df21
 800de68:	0800df21 	.word	0x0800df21
 800de6c:	0800def9 	.word	0x0800def9
 800de70:	0800df21 	.word	0x0800df21
 800de74:	0800df21 	.word	0x0800df21
 800de78:	0800df21 	.word	0x0800df21
 800de7c:	0800df21 	.word	0x0800df21
 800de80:	0800df21 	.word	0x0800df21
 800de84:	0800df21 	.word	0x0800df21
 800de88:	0800df21 	.word	0x0800df21
 800de8c:	0800df01 	.word	0x0800df01
 800de90:	0800df21 	.word	0x0800df21
 800de94:	0800df21 	.word	0x0800df21
 800de98:	0800df21 	.word	0x0800df21
 800de9c:	0800df21 	.word	0x0800df21
 800dea0:	0800df21 	.word	0x0800df21
 800dea4:	0800df21 	.word	0x0800df21
 800dea8:	0800df21 	.word	0x0800df21
 800deac:	0800df09 	.word	0x0800df09
 800deb0:	0800df21 	.word	0x0800df21
 800deb4:	0800df21 	.word	0x0800df21
 800deb8:	0800df21 	.word	0x0800df21
 800debc:	0800df21 	.word	0x0800df21
 800dec0:	0800df21 	.word	0x0800df21
 800dec4:	0800df21 	.word	0x0800df21
 800dec8:	0800df21 	.word	0x0800df21
 800decc:	0800df11 	.word	0x0800df11
 800ded0:	0800df21 	.word	0x0800df21
 800ded4:	0800df21 	.word	0x0800df21
 800ded8:	0800df21 	.word	0x0800df21
 800dedc:	0800df21 	.word	0x0800df21
 800dee0:	0800df21 	.word	0x0800df21
 800dee4:	0800df21 	.word	0x0800df21
 800dee8:	0800df21 	.word	0x0800df21
 800deec:	0800df19 	.word	0x0800df19
 800def0:	2301      	movs	r3, #1
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def6:	e1c0      	b.n	800e27a <UART_SetConfig+0x7ae>
 800def8:	2304      	movs	r3, #4
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defe:	e1bc      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df00:	2308      	movs	r3, #8
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df06:	e1b8      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df08:	2310      	movs	r3, #16
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e1b4      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df10:	2320      	movs	r3, #32
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df16:	e1b0      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df18:	2340      	movs	r3, #64	@ 0x40
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1e:	e1ac      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df20:	2380      	movs	r3, #128	@ 0x80
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df26:	e1a8      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a75      	ldr	r2, [pc, #468]	@ (800e104 <UART_SetConfig+0x638>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d130      	bne.n	800df94 <UART_SetConfig+0x4c8>
 800df32:	4b73      	ldr	r3, [pc, #460]	@ (800e100 <UART_SetConfig+0x634>)
 800df34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df36:	f003 0307 	and.w	r3, r3, #7
 800df3a:	2b05      	cmp	r3, #5
 800df3c:	d826      	bhi.n	800df8c <UART_SetConfig+0x4c0>
 800df3e:	a201      	add	r2, pc, #4	@ (adr r2, 800df44 <UART_SetConfig+0x478>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800df5d 	.word	0x0800df5d
 800df48:	0800df65 	.word	0x0800df65
 800df4c:	0800df6d 	.word	0x0800df6d
 800df50:	0800df75 	.word	0x0800df75
 800df54:	0800df7d 	.word	0x0800df7d
 800df58:	0800df85 	.word	0x0800df85
 800df5c:	2300      	movs	r3, #0
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df62:	e18a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df64:	2304      	movs	r3, #4
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6a:	e186      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df6c:	2308      	movs	r3, #8
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df72:	e182      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df74:	2310      	movs	r3, #16
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7a:	e17e      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df7c:	2320      	movs	r3, #32
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df82:	e17a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df84:	2340      	movs	r3, #64	@ 0x40
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8a:	e176      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df8c:	2380      	movs	r3, #128	@ 0x80
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df92:	e172      	b.n	800e27a <UART_SetConfig+0x7ae>
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a5b      	ldr	r2, [pc, #364]	@ (800e108 <UART_SetConfig+0x63c>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d130      	bne.n	800e000 <UART_SetConfig+0x534>
 800df9e:	4b58      	ldr	r3, [pc, #352]	@ (800e100 <UART_SetConfig+0x634>)
 800dfa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	2b05      	cmp	r3, #5
 800dfa8:	d826      	bhi.n	800dff8 <UART_SetConfig+0x52c>
 800dfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb0 <UART_SetConfig+0x4e4>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800dfc9 	.word	0x0800dfc9
 800dfb4:	0800dfd1 	.word	0x0800dfd1
 800dfb8:	0800dfd9 	.word	0x0800dfd9
 800dfbc:	0800dfe1 	.word	0x0800dfe1
 800dfc0:	0800dfe9 	.word	0x0800dfe9
 800dfc4:	0800dff1 	.word	0x0800dff1
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfce:	e154      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dfd0:	2304      	movs	r3, #4
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfd6:	e150      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dfd8:	2308      	movs	r3, #8
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfde:	e14c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dfe0:	2310      	movs	r3, #16
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe6:	e148      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dfe8:	2320      	movs	r3, #32
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfee:	e144      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dff0:	2340      	movs	r3, #64	@ 0x40
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff6:	e140      	b.n	800e27a <UART_SetConfig+0x7ae>
 800dff8:	2380      	movs	r3, #128	@ 0x80
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e13c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a41      	ldr	r2, [pc, #260]	@ (800e10c <UART_SetConfig+0x640>)
 800e006:	4293      	cmp	r3, r2
 800e008:	f040 8082 	bne.w	800e110 <UART_SetConfig+0x644>
 800e00c:	4b3c      	ldr	r3, [pc, #240]	@ (800e100 <UART_SetConfig+0x634>)
 800e00e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e014:	2b28      	cmp	r3, #40	@ 0x28
 800e016:	d86d      	bhi.n	800e0f4 <UART_SetConfig+0x628>
 800e018:	a201      	add	r2, pc, #4	@ (adr r2, 800e020 <UART_SetConfig+0x554>)
 800e01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01e:	bf00      	nop
 800e020:	0800e0c5 	.word	0x0800e0c5
 800e024:	0800e0f5 	.word	0x0800e0f5
 800e028:	0800e0f5 	.word	0x0800e0f5
 800e02c:	0800e0f5 	.word	0x0800e0f5
 800e030:	0800e0f5 	.word	0x0800e0f5
 800e034:	0800e0f5 	.word	0x0800e0f5
 800e038:	0800e0f5 	.word	0x0800e0f5
 800e03c:	0800e0f5 	.word	0x0800e0f5
 800e040:	0800e0cd 	.word	0x0800e0cd
 800e044:	0800e0f5 	.word	0x0800e0f5
 800e048:	0800e0f5 	.word	0x0800e0f5
 800e04c:	0800e0f5 	.word	0x0800e0f5
 800e050:	0800e0f5 	.word	0x0800e0f5
 800e054:	0800e0f5 	.word	0x0800e0f5
 800e058:	0800e0f5 	.word	0x0800e0f5
 800e05c:	0800e0f5 	.word	0x0800e0f5
 800e060:	0800e0d5 	.word	0x0800e0d5
 800e064:	0800e0f5 	.word	0x0800e0f5
 800e068:	0800e0f5 	.word	0x0800e0f5
 800e06c:	0800e0f5 	.word	0x0800e0f5
 800e070:	0800e0f5 	.word	0x0800e0f5
 800e074:	0800e0f5 	.word	0x0800e0f5
 800e078:	0800e0f5 	.word	0x0800e0f5
 800e07c:	0800e0f5 	.word	0x0800e0f5
 800e080:	0800e0dd 	.word	0x0800e0dd
 800e084:	0800e0f5 	.word	0x0800e0f5
 800e088:	0800e0f5 	.word	0x0800e0f5
 800e08c:	0800e0f5 	.word	0x0800e0f5
 800e090:	0800e0f5 	.word	0x0800e0f5
 800e094:	0800e0f5 	.word	0x0800e0f5
 800e098:	0800e0f5 	.word	0x0800e0f5
 800e09c:	0800e0f5 	.word	0x0800e0f5
 800e0a0:	0800e0e5 	.word	0x0800e0e5
 800e0a4:	0800e0f5 	.word	0x0800e0f5
 800e0a8:	0800e0f5 	.word	0x0800e0f5
 800e0ac:	0800e0f5 	.word	0x0800e0f5
 800e0b0:	0800e0f5 	.word	0x0800e0f5
 800e0b4:	0800e0f5 	.word	0x0800e0f5
 800e0b8:	0800e0f5 	.word	0x0800e0f5
 800e0bc:	0800e0f5 	.word	0x0800e0f5
 800e0c0:	0800e0ed 	.word	0x0800e0ed
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ca:	e0d6      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0cc:	2304      	movs	r3, #4
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d2:	e0d2      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0d4:	2308      	movs	r3, #8
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0da:	e0ce      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0dc:	2310      	movs	r3, #16
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e2:	e0ca      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0e4:	2320      	movs	r3, #32
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ea:	e0c6      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0ec:	2340      	movs	r3, #64	@ 0x40
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0f2:	e0c2      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0f4:	2380      	movs	r3, #128	@ 0x80
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0fa:	e0be      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e0fc:	40011400 	.word	0x40011400
 800e100:	58024400 	.word	0x58024400
 800e104:	40007800 	.word	0x40007800
 800e108:	40007c00 	.word	0x40007c00
 800e10c:	40011800 	.word	0x40011800
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4aad      	ldr	r2, [pc, #692]	@ (800e3cc <UART_SetConfig+0x900>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d176      	bne.n	800e208 <UART_SetConfig+0x73c>
 800e11a:	4bad      	ldr	r3, [pc, #692]	@ (800e3d0 <UART_SetConfig+0x904>)
 800e11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e11e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e122:	2b28      	cmp	r3, #40	@ 0x28
 800e124:	d86c      	bhi.n	800e200 <UART_SetConfig+0x734>
 800e126:	a201      	add	r2, pc, #4	@ (adr r2, 800e12c <UART_SetConfig+0x660>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e1d1 	.word	0x0800e1d1
 800e130:	0800e201 	.word	0x0800e201
 800e134:	0800e201 	.word	0x0800e201
 800e138:	0800e201 	.word	0x0800e201
 800e13c:	0800e201 	.word	0x0800e201
 800e140:	0800e201 	.word	0x0800e201
 800e144:	0800e201 	.word	0x0800e201
 800e148:	0800e201 	.word	0x0800e201
 800e14c:	0800e1d9 	.word	0x0800e1d9
 800e150:	0800e201 	.word	0x0800e201
 800e154:	0800e201 	.word	0x0800e201
 800e158:	0800e201 	.word	0x0800e201
 800e15c:	0800e201 	.word	0x0800e201
 800e160:	0800e201 	.word	0x0800e201
 800e164:	0800e201 	.word	0x0800e201
 800e168:	0800e201 	.word	0x0800e201
 800e16c:	0800e1e1 	.word	0x0800e1e1
 800e170:	0800e201 	.word	0x0800e201
 800e174:	0800e201 	.word	0x0800e201
 800e178:	0800e201 	.word	0x0800e201
 800e17c:	0800e201 	.word	0x0800e201
 800e180:	0800e201 	.word	0x0800e201
 800e184:	0800e201 	.word	0x0800e201
 800e188:	0800e201 	.word	0x0800e201
 800e18c:	0800e1e9 	.word	0x0800e1e9
 800e190:	0800e201 	.word	0x0800e201
 800e194:	0800e201 	.word	0x0800e201
 800e198:	0800e201 	.word	0x0800e201
 800e19c:	0800e201 	.word	0x0800e201
 800e1a0:	0800e201 	.word	0x0800e201
 800e1a4:	0800e201 	.word	0x0800e201
 800e1a8:	0800e201 	.word	0x0800e201
 800e1ac:	0800e1f1 	.word	0x0800e1f1
 800e1b0:	0800e201 	.word	0x0800e201
 800e1b4:	0800e201 	.word	0x0800e201
 800e1b8:	0800e201 	.word	0x0800e201
 800e1bc:	0800e201 	.word	0x0800e201
 800e1c0:	0800e201 	.word	0x0800e201
 800e1c4:	0800e201 	.word	0x0800e201
 800e1c8:	0800e201 	.word	0x0800e201
 800e1cc:	0800e1f9 	.word	0x0800e1f9
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1d6:	e050      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e1d8:	2304      	movs	r3, #4
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1de:	e04c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1e6:	e048      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e1e8:	2310      	movs	r3, #16
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1ee:	e044      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e1f0:	2320      	movs	r3, #32
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1f6:	e040      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e1f8:	2340      	movs	r3, #64	@ 0x40
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1fe:	e03c      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e200:	2380      	movs	r3, #128	@ 0x80
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e206:	e038      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a71      	ldr	r2, [pc, #452]	@ (800e3d4 <UART_SetConfig+0x908>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d130      	bne.n	800e274 <UART_SetConfig+0x7a8>
 800e212:	4b6f      	ldr	r3, [pc, #444]	@ (800e3d0 <UART_SetConfig+0x904>)
 800e214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	2b05      	cmp	r3, #5
 800e21c:	d826      	bhi.n	800e26c <UART_SetConfig+0x7a0>
 800e21e:	a201      	add	r2, pc, #4	@ (adr r2, 800e224 <UART_SetConfig+0x758>)
 800e220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e224:	0800e23d 	.word	0x0800e23d
 800e228:	0800e245 	.word	0x0800e245
 800e22c:	0800e24d 	.word	0x0800e24d
 800e230:	0800e255 	.word	0x0800e255
 800e234:	0800e25d 	.word	0x0800e25d
 800e238:	0800e265 	.word	0x0800e265
 800e23c:	2302      	movs	r3, #2
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e242:	e01a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e244:	2304      	movs	r3, #4
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e24a:	e016      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e24c:	2308      	movs	r3, #8
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e252:	e012      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e254:	2310      	movs	r3, #16
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e25a:	e00e      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e25c:	2320      	movs	r3, #32
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e262:	e00a      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e264:	2340      	movs	r3, #64	@ 0x40
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e26a:	e006      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e26c:	2380      	movs	r3, #128	@ 0x80
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e272:	e002      	b.n	800e27a <UART_SetConfig+0x7ae>
 800e274:	2380      	movs	r3, #128	@ 0x80
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a55      	ldr	r2, [pc, #340]	@ (800e3d4 <UART_SetConfig+0x908>)
 800e280:	4293      	cmp	r3, r2
 800e282:	f040 80f8 	bne.w	800e476 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e286:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e28a:	2b20      	cmp	r3, #32
 800e28c:	dc46      	bgt.n	800e31c <UART_SetConfig+0x850>
 800e28e:	2b02      	cmp	r3, #2
 800e290:	db75      	blt.n	800e37e <UART_SetConfig+0x8b2>
 800e292:	3b02      	subs	r3, #2
 800e294:	2b1e      	cmp	r3, #30
 800e296:	d872      	bhi.n	800e37e <UART_SetConfig+0x8b2>
 800e298:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a0 <UART_SetConfig+0x7d4>)
 800e29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29e:	bf00      	nop
 800e2a0:	0800e323 	.word	0x0800e323
 800e2a4:	0800e37f 	.word	0x0800e37f
 800e2a8:	0800e32b 	.word	0x0800e32b
 800e2ac:	0800e37f 	.word	0x0800e37f
 800e2b0:	0800e37f 	.word	0x0800e37f
 800e2b4:	0800e37f 	.word	0x0800e37f
 800e2b8:	0800e33b 	.word	0x0800e33b
 800e2bc:	0800e37f 	.word	0x0800e37f
 800e2c0:	0800e37f 	.word	0x0800e37f
 800e2c4:	0800e37f 	.word	0x0800e37f
 800e2c8:	0800e37f 	.word	0x0800e37f
 800e2cc:	0800e37f 	.word	0x0800e37f
 800e2d0:	0800e37f 	.word	0x0800e37f
 800e2d4:	0800e37f 	.word	0x0800e37f
 800e2d8:	0800e34b 	.word	0x0800e34b
 800e2dc:	0800e37f 	.word	0x0800e37f
 800e2e0:	0800e37f 	.word	0x0800e37f
 800e2e4:	0800e37f 	.word	0x0800e37f
 800e2e8:	0800e37f 	.word	0x0800e37f
 800e2ec:	0800e37f 	.word	0x0800e37f
 800e2f0:	0800e37f 	.word	0x0800e37f
 800e2f4:	0800e37f 	.word	0x0800e37f
 800e2f8:	0800e37f 	.word	0x0800e37f
 800e2fc:	0800e37f 	.word	0x0800e37f
 800e300:	0800e37f 	.word	0x0800e37f
 800e304:	0800e37f 	.word	0x0800e37f
 800e308:	0800e37f 	.word	0x0800e37f
 800e30c:	0800e37f 	.word	0x0800e37f
 800e310:	0800e37f 	.word	0x0800e37f
 800e314:	0800e37f 	.word	0x0800e37f
 800e318:	0800e371 	.word	0x0800e371
 800e31c:	2b40      	cmp	r3, #64	@ 0x40
 800e31e:	d02a      	beq.n	800e376 <UART_SetConfig+0x8aa>
 800e320:	e02d      	b.n	800e37e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e322:	f7fd f99d 	bl	800b660 <HAL_RCCEx_GetD3PCLK1Freq>
 800e326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e328:	e02f      	b.n	800e38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e32a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fd f9ac 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e338:	e027      	b.n	800e38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e33a:	f107 0318 	add.w	r3, r7, #24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd faf8 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e348:	e01f      	b.n	800e38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e34a:	4b21      	ldr	r3, [pc, #132]	@ (800e3d0 <UART_SetConfig+0x904>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d009      	beq.n	800e36a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e356:	4b1e      	ldr	r3, [pc, #120]	@ (800e3d0 <UART_SetConfig+0x904>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	08db      	lsrs	r3, r3, #3
 800e35c:	f003 0303 	and.w	r3, r3, #3
 800e360:	4a1d      	ldr	r2, [pc, #116]	@ (800e3d8 <UART_SetConfig+0x90c>)
 800e362:	fa22 f303 	lsr.w	r3, r2, r3
 800e366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e368:	e00f      	b.n	800e38a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e36a:	4b1b      	ldr	r3, [pc, #108]	@ (800e3d8 <UART_SetConfig+0x90c>)
 800e36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e36e:	e00c      	b.n	800e38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e370:	4b1a      	ldr	r3, [pc, #104]	@ (800e3dc <UART_SetConfig+0x910>)
 800e372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e374:	e009      	b.n	800e38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e37c:	e005      	b.n	800e38a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e37e:	2300      	movs	r3, #0
 800e380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f000 81ee 	beq.w	800e76e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e396:	4a12      	ldr	r2, [pc, #72]	@ (800e3e0 <UART_SetConfig+0x914>)
 800e398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e39c:	461a      	mov	r2, r3
 800e39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3a4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	685a      	ldr	r2, [r3, #4]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	005b      	lsls	r3, r3, #1
 800e3ae:	4413      	add	r3, r2
 800e3b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d305      	bcc.n	800e3c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d910      	bls.n	800e3e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e3c8:	e1d1      	b.n	800e76e <UART_SetConfig+0xca2>
 800e3ca:	bf00      	nop
 800e3cc:	40011c00 	.word	0x40011c00
 800e3d0:	58024400 	.word	0x58024400
 800e3d4:	58000c00 	.word	0x58000c00
 800e3d8:	03d09000 	.word	0x03d09000
 800e3dc:	003d0900 	.word	0x003d0900
 800e3e0:	08017198 	.word	0x08017198
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	60bb      	str	r3, [r7, #8]
 800e3ea:	60fa      	str	r2, [r7, #12]
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f0:	4ac0      	ldr	r2, [pc, #768]	@ (800e6f4 <UART_SetConfig+0xc28>)
 800e3f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	607a      	str	r2, [r7, #4]
 800e3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e406:	f7f2 f9a7 	bl	8000758 <__aeabi_uldivmod>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	4610      	mov	r0, r2
 800e410:	4619      	mov	r1, r3
 800e412:	f04f 0200 	mov.w	r2, #0
 800e416:	f04f 0300 	mov.w	r3, #0
 800e41a:	020b      	lsls	r3, r1, #8
 800e41c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e420:	0202      	lsls	r2, r0, #8
 800e422:	6979      	ldr	r1, [r7, #20]
 800e424:	6849      	ldr	r1, [r1, #4]
 800e426:	0849      	lsrs	r1, r1, #1
 800e428:	2000      	movs	r0, #0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4605      	mov	r5, r0
 800e42e:	eb12 0804 	adds.w	r8, r2, r4
 800e432:	eb43 0905 	adc.w	r9, r3, r5
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	469a      	mov	sl, r3
 800e43e:	4693      	mov	fp, r2
 800e440:	4652      	mov	r2, sl
 800e442:	465b      	mov	r3, fp
 800e444:	4640      	mov	r0, r8
 800e446:	4649      	mov	r1, r9
 800e448:	f7f2 f986 	bl	8000758 <__aeabi_uldivmod>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	4613      	mov	r3, r2
 800e452:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e45a:	d308      	bcc.n	800e46e <UART_SetConfig+0x9a2>
 800e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e462:	d204      	bcs.n	800e46e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e46a:	60da      	str	r2, [r3, #12]
 800e46c:	e17f      	b.n	800e76e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e474:	e17b      	b.n	800e76e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	69db      	ldr	r3, [r3, #28]
 800e47a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e47e:	f040 80bd 	bne.w	800e5fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e482:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e486:	2b20      	cmp	r3, #32
 800e488:	dc48      	bgt.n	800e51c <UART_SetConfig+0xa50>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	db7b      	blt.n	800e586 <UART_SetConfig+0xaba>
 800e48e:	2b20      	cmp	r3, #32
 800e490:	d879      	bhi.n	800e586 <UART_SetConfig+0xaba>
 800e492:	a201      	add	r2, pc, #4	@ (adr r2, 800e498 <UART_SetConfig+0x9cc>)
 800e494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e498:	0800e523 	.word	0x0800e523
 800e49c:	0800e52b 	.word	0x0800e52b
 800e4a0:	0800e587 	.word	0x0800e587
 800e4a4:	0800e587 	.word	0x0800e587
 800e4a8:	0800e533 	.word	0x0800e533
 800e4ac:	0800e587 	.word	0x0800e587
 800e4b0:	0800e587 	.word	0x0800e587
 800e4b4:	0800e587 	.word	0x0800e587
 800e4b8:	0800e543 	.word	0x0800e543
 800e4bc:	0800e587 	.word	0x0800e587
 800e4c0:	0800e587 	.word	0x0800e587
 800e4c4:	0800e587 	.word	0x0800e587
 800e4c8:	0800e587 	.word	0x0800e587
 800e4cc:	0800e587 	.word	0x0800e587
 800e4d0:	0800e587 	.word	0x0800e587
 800e4d4:	0800e587 	.word	0x0800e587
 800e4d8:	0800e553 	.word	0x0800e553
 800e4dc:	0800e587 	.word	0x0800e587
 800e4e0:	0800e587 	.word	0x0800e587
 800e4e4:	0800e587 	.word	0x0800e587
 800e4e8:	0800e587 	.word	0x0800e587
 800e4ec:	0800e587 	.word	0x0800e587
 800e4f0:	0800e587 	.word	0x0800e587
 800e4f4:	0800e587 	.word	0x0800e587
 800e4f8:	0800e587 	.word	0x0800e587
 800e4fc:	0800e587 	.word	0x0800e587
 800e500:	0800e587 	.word	0x0800e587
 800e504:	0800e587 	.word	0x0800e587
 800e508:	0800e587 	.word	0x0800e587
 800e50c:	0800e587 	.word	0x0800e587
 800e510:	0800e587 	.word	0x0800e587
 800e514:	0800e587 	.word	0x0800e587
 800e518:	0800e579 	.word	0x0800e579
 800e51c:	2b40      	cmp	r3, #64	@ 0x40
 800e51e:	d02e      	beq.n	800e57e <UART_SetConfig+0xab2>
 800e520:	e031      	b.n	800e586 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e522:	f7fb f9ff 	bl	8009924 <HAL_RCC_GetPCLK1Freq>
 800e526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e528:	e033      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e52a:	f7fb fa11 	bl	8009950 <HAL_RCC_GetPCLK2Freq>
 800e52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e530:	e02f      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e536:	4618      	mov	r0, r3
 800e538:	f7fd f8a8 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e540:	e027      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e542:	f107 0318 	add.w	r3, r7, #24
 800e546:	4618      	mov	r0, r3
 800e548:	f7fd f9f4 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e550:	e01f      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e552:	4b69      	ldr	r3, [pc, #420]	@ (800e6f8 <UART_SetConfig+0xc2c>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d009      	beq.n	800e572 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e55e:	4b66      	ldr	r3, [pc, #408]	@ (800e6f8 <UART_SetConfig+0xc2c>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	08db      	lsrs	r3, r3, #3
 800e564:	f003 0303 	and.w	r3, r3, #3
 800e568:	4a64      	ldr	r2, [pc, #400]	@ (800e6fc <UART_SetConfig+0xc30>)
 800e56a:	fa22 f303 	lsr.w	r3, r2, r3
 800e56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e570:	e00f      	b.n	800e592 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e572:	4b62      	ldr	r3, [pc, #392]	@ (800e6fc <UART_SetConfig+0xc30>)
 800e574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e576:	e00c      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e578:	4b61      	ldr	r3, [pc, #388]	@ (800e700 <UART_SetConfig+0xc34>)
 800e57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e57c:	e009      	b.n	800e592 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e584:	e005      	b.n	800e592 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e586:	2300      	movs	r3, #0
 800e588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 80ea 	beq.w	800e76e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59e:	4a55      	ldr	r2, [pc, #340]	@ (800e6f4 <UART_SetConfig+0xc28>)
 800e5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5ac:	005a      	lsls	r2, r3, #1
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	441a      	add	r2, r3
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c2:	2b0f      	cmp	r3, #15
 800e5c4:	d916      	bls.n	800e5f4 <UART_SetConfig+0xb28>
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5cc:	d212      	bcs.n	800e5f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	f023 030f 	bic.w	r3, r3, #15
 800e5d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5da:	085b      	lsrs	r3, r3, #1
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	f003 0307 	and.w	r3, r3, #7
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e5f0:	60da      	str	r2, [r3, #12]
 800e5f2:	e0bc      	b.n	800e76e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e5fa:	e0b8      	b.n	800e76e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e600:	2b20      	cmp	r3, #32
 800e602:	dc4b      	bgt.n	800e69c <UART_SetConfig+0xbd0>
 800e604:	2b00      	cmp	r3, #0
 800e606:	f2c0 8087 	blt.w	800e718 <UART_SetConfig+0xc4c>
 800e60a:	2b20      	cmp	r3, #32
 800e60c:	f200 8084 	bhi.w	800e718 <UART_SetConfig+0xc4c>
 800e610:	a201      	add	r2, pc, #4	@ (adr r2, 800e618 <UART_SetConfig+0xb4c>)
 800e612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e616:	bf00      	nop
 800e618:	0800e6a3 	.word	0x0800e6a3
 800e61c:	0800e6ab 	.word	0x0800e6ab
 800e620:	0800e719 	.word	0x0800e719
 800e624:	0800e719 	.word	0x0800e719
 800e628:	0800e6b3 	.word	0x0800e6b3
 800e62c:	0800e719 	.word	0x0800e719
 800e630:	0800e719 	.word	0x0800e719
 800e634:	0800e719 	.word	0x0800e719
 800e638:	0800e6c3 	.word	0x0800e6c3
 800e63c:	0800e719 	.word	0x0800e719
 800e640:	0800e719 	.word	0x0800e719
 800e644:	0800e719 	.word	0x0800e719
 800e648:	0800e719 	.word	0x0800e719
 800e64c:	0800e719 	.word	0x0800e719
 800e650:	0800e719 	.word	0x0800e719
 800e654:	0800e719 	.word	0x0800e719
 800e658:	0800e6d3 	.word	0x0800e6d3
 800e65c:	0800e719 	.word	0x0800e719
 800e660:	0800e719 	.word	0x0800e719
 800e664:	0800e719 	.word	0x0800e719
 800e668:	0800e719 	.word	0x0800e719
 800e66c:	0800e719 	.word	0x0800e719
 800e670:	0800e719 	.word	0x0800e719
 800e674:	0800e719 	.word	0x0800e719
 800e678:	0800e719 	.word	0x0800e719
 800e67c:	0800e719 	.word	0x0800e719
 800e680:	0800e719 	.word	0x0800e719
 800e684:	0800e719 	.word	0x0800e719
 800e688:	0800e719 	.word	0x0800e719
 800e68c:	0800e719 	.word	0x0800e719
 800e690:	0800e719 	.word	0x0800e719
 800e694:	0800e719 	.word	0x0800e719
 800e698:	0800e70b 	.word	0x0800e70b
 800e69c:	2b40      	cmp	r3, #64	@ 0x40
 800e69e:	d037      	beq.n	800e710 <UART_SetConfig+0xc44>
 800e6a0:	e03a      	b.n	800e718 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6a2:	f7fb f93f 	bl	8009924 <HAL_RCC_GetPCLK1Freq>
 800e6a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6a8:	e03c      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6aa:	f7fb f951 	bl	8009950 <HAL_RCC_GetPCLK2Freq>
 800e6ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6b0:	e038      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fc ffe8 	bl	800b68c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6c0:	e030      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6c2:	f107 0318 	add.w	r3, r7, #24
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fd f934 	bl	800b934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6d0:	e028      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6d2:	4b09      	ldr	r3, [pc, #36]	@ (800e6f8 <UART_SetConfig+0xc2c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d012      	beq.n	800e704 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6de:	4b06      	ldr	r3, [pc, #24]	@ (800e6f8 <UART_SetConfig+0xc2c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	08db      	lsrs	r3, r3, #3
 800e6e4:	f003 0303 	and.w	r3, r3, #3
 800e6e8:	4a04      	ldr	r2, [pc, #16]	@ (800e6fc <UART_SetConfig+0xc30>)
 800e6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e6f0:	e018      	b.n	800e724 <UART_SetConfig+0xc58>
 800e6f2:	bf00      	nop
 800e6f4:	08017198 	.word	0x08017198
 800e6f8:	58024400 	.word	0x58024400
 800e6fc:	03d09000 	.word	0x03d09000
 800e700:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e704:	4b24      	ldr	r3, [pc, #144]	@ (800e798 <UART_SetConfig+0xccc>)
 800e706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e708:	e00c      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e70a:	4b24      	ldr	r3, [pc, #144]	@ (800e79c <UART_SetConfig+0xcd0>)
 800e70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e70e:	e009      	b.n	800e724 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e716:	e005      	b.n	800e724 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e718:	2300      	movs	r3, #0
 800e71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e722:	bf00      	nop
    }

    if (pclk != 0U)
 800e724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e726:	2b00      	cmp	r3, #0
 800e728:	d021      	beq.n	800e76e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72e:	4a1c      	ldr	r2, [pc, #112]	@ (800e7a0 <UART_SetConfig+0xcd4>)
 800e730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e734:	461a      	mov	r2, r3
 800e736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e738:	fbb3 f2f2 	udiv	r2, r3, r2
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	085b      	lsrs	r3, r3, #1
 800e742:	441a      	add	r2, r3
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	fbb2 f3f3 	udiv	r3, r2, r3
 800e74c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	2b0f      	cmp	r3, #15
 800e752:	d909      	bls.n	800e768 <UART_SetConfig+0xc9c>
 800e754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e75a:	d205      	bcs.n	800e768 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75e:	b29a      	uxth	r2, r3
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	60da      	str	r2, [r3, #12]
 800e766:	e002      	b.n	800e76e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2201      	movs	r2, #1
 800e772:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2201      	movs	r2, #1
 800e77a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	2200      	movs	r2, #0
 800e782:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2200      	movs	r2, #0
 800e788:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e78a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3748      	adds	r7, #72	@ 0x48
 800e792:	46bd      	mov	sp, r7
 800e794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e798:	03d09000 	.word	0x03d09000
 800e79c:	003d0900 	.word	0x003d0900
 800e7a0:	08017198 	.word	0x08017198

0800e7a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7b0:	f003 0308 	and.w	r3, r3, #8
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00a      	beq.n	800e7ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d2:	f003 0301 	and.w	r3, r3, #1
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00a      	beq.n	800e7f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	430a      	orrs	r2, r1
 800e7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00a      	beq.n	800e812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e816:	f003 0304 	and.w	r3, r3, #4
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	430a      	orrs	r2, r1
 800e832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e838:	f003 0310 	and.w	r3, r3, #16
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00a      	beq.n	800e856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	430a      	orrs	r2, r1
 800e854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e85a:	f003 0320 	and.w	r3, r3, #32
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00a      	beq.n	800e878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	430a      	orrs	r2, r1
 800e876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e87c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01a      	beq.n	800e8ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	430a      	orrs	r2, r1
 800e898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8a2:	d10a      	bne.n	800e8ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00a      	beq.n	800e8dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	430a      	orrs	r2, r1
 800e8da:	605a      	str	r2, [r3, #4]
  }
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b098      	sub	sp, #96	@ 0x60
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e8f8:	f7f4 ffae 	bl	8003858 <HAL_GetTick>
 800e8fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f003 0308 	and.w	r3, r3, #8
 800e908:	2b08      	cmp	r3, #8
 800e90a:	d12f      	bne.n	800e96c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e90c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e914:	2200      	movs	r2, #0
 800e916:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f88e 	bl	800ea3c <UART_WaitOnFlagUntilTimeout>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d022      	beq.n	800e96c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e92e:	e853 3f00 	ldrex	r3, [r3]
 800e932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e93a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	461a      	mov	r2, r3
 800e942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e944:	647b      	str	r3, [r7, #68]	@ 0x44
 800e946:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e948:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e94a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e94c:	e841 2300 	strex	r3, r2, [r1]
 800e950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1e6      	bne.n	800e926 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2220      	movs	r2, #32
 800e95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e968:	2303      	movs	r3, #3
 800e96a:	e063      	b.n	800ea34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f003 0304 	and.w	r3, r3, #4
 800e976:	2b04      	cmp	r3, #4
 800e978:	d149      	bne.n	800ea0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e97a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e982:	2200      	movs	r2, #0
 800e984:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f857 	bl	800ea3c <UART_WaitOnFlagUntilTimeout>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d03c      	beq.n	800ea0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99c:	e853 3f00 	ldrex	r3, [r3]
 800e9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9ba:	e841 2300 	strex	r3, r2, [r1]
 800e9be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e6      	bne.n	800e994 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	e853 3f00 	ldrex	r3, [r3]
 800e9d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f023 0301 	bic.w	r3, r3, #1
 800e9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9e6:	61fa      	str	r2, [r7, #28]
 800e9e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ea:	69b9      	ldr	r1, [r7, #24]
 800e9ec:	69fa      	ldr	r2, [r7, #28]
 800e9ee:	e841 2300 	strex	r3, r2, [r1]
 800e9f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1e5      	bne.n	800e9c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2220      	movs	r2, #32
 800e9fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	e012      	b.n	800ea34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2220      	movs	r2, #32
 800ea12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2220      	movs	r2, #32
 800ea1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3758      	adds	r7, #88	@ 0x58
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea4c:	e04f      	b.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea54:	d04b      	beq.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea56:	f7f4 feff 	bl	8003858 <HAL_GetTick>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d302      	bcc.n	800ea6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	e04e      	b.n	800eb0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f003 0304 	and.w	r3, r3, #4
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d037      	beq.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b80      	cmp	r3, #128	@ 0x80
 800ea82:	d034      	beq.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2b40      	cmp	r3, #64	@ 0x40
 800ea88:	d031      	beq.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	69db      	ldr	r3, [r3, #28]
 800ea90:	f003 0308 	and.w	r3, r3, #8
 800ea94:	2b08      	cmp	r3, #8
 800ea96:	d110      	bne.n	800eaba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2208      	movs	r2, #8
 800ea9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f000 f839 	bl	800eb18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2208      	movs	r2, #8
 800eaaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	e029      	b.n	800eb0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	69db      	ldr	r3, [r3, #28]
 800eac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eac8:	d111      	bne.n	800eaee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ead2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f000 f81f 	bl	800eb18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2220      	movs	r2, #32
 800eade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e00f      	b.n	800eb0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	69da      	ldr	r2, [r3, #28]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	bf0c      	ite	eq
 800eafe:	2301      	moveq	r3, #1
 800eb00:	2300      	movne	r3, #0
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	461a      	mov	r2, r3
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d0a0      	beq.n	800ea4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
	...

0800eb18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b095      	sub	sp, #84	@ 0x54
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb28:	e853 3f00 	ldrex	r3, [r3]
 800eb2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb46:	e841 2300 	strex	r3, r2, [r1]
 800eb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e6      	bne.n	800eb20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	3308      	adds	r3, #8
 800eb58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	e853 3f00 	ldrex	r3, [r3]
 800eb60:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb62:	69fa      	ldr	r2, [r7, #28]
 800eb64:	4b1e      	ldr	r3, [pc, #120]	@ (800ebe0 <UART_EndRxTransfer+0xc8>)
 800eb66:	4013      	ands	r3, r2
 800eb68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3308      	adds	r3, #8
 800eb70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb7a:	e841 2300 	strex	r3, r2, [r1]
 800eb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e5      	bne.n	800eb52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d118      	bne.n	800ebc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	e853 3f00 	ldrex	r3, [r3]
 800eb9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	f023 0310 	bic.w	r3, r3, #16
 800eba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebac:	61bb      	str	r3, [r7, #24]
 800ebae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb0:	6979      	ldr	r1, [r7, #20]
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	e841 2300 	strex	r3, r2, [r1]
 800ebb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1e6      	bne.n	800eb8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2220      	movs	r2, #32
 800ebc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ebd4:	bf00      	nop
 800ebd6:	3754      	adds	r7, #84	@ 0x54
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	effffffe 	.word	0xeffffffe

0800ebe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d101      	bne.n	800ebfa <HAL_UARTEx_DisableFifoMode+0x16>
 800ebf6:	2302      	movs	r3, #2
 800ebf8:	e027      	b.n	800ec4a <HAL_UARTEx_DisableFifoMode+0x66>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2224      	movs	r2, #36	@ 0x24
 800ec06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f022 0201 	bic.w	r2, r2, #1
 800ec20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ec28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2220      	movs	r2, #32
 800ec3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b084      	sub	sp, #16
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d101      	bne.n	800ec6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	e02d      	b.n	800ecca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2224      	movs	r2, #36	@ 0x24
 800ec7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f022 0201 	bic.w	r2, r2, #1
 800ec94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	430a      	orrs	r2, r1
 800eca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f850 	bl	800ed50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2220      	movs	r2, #32
 800ecbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d101      	bne.n	800ecea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ece6:	2302      	movs	r3, #2
 800ece8:	e02d      	b.n	800ed46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2201      	movs	r2, #1
 800ecee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2224      	movs	r2, #36	@ 0x24
 800ecf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f022 0201 	bic.w	r2, r2, #1
 800ed10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	430a      	orrs	r2, r1
 800ed24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f812 	bl	800ed50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2220      	movs	r2, #32
 800ed38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d108      	bne.n	800ed72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed70:	e031      	b.n	800edd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed72:	2310      	movs	r3, #16
 800ed74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed76:	2310      	movs	r3, #16
 800ed78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	0e5b      	lsrs	r3, r3, #25
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	f003 0307 	and.w	r3, r3, #7
 800ed88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	0f5b      	lsrs	r3, r3, #29
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0307 	and.w	r3, r3, #7
 800ed98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	7b3a      	ldrb	r2, [r7, #12]
 800ed9e:	4911      	ldr	r1, [pc, #68]	@ (800ede4 <UARTEx_SetNbDataToProcess+0x94>)
 800eda0:	5c8a      	ldrb	r2, [r1, r2]
 800eda2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eda6:	7b3a      	ldrb	r2, [r7, #12]
 800eda8:	490f      	ldr	r1, [pc, #60]	@ (800ede8 <UARTEx_SetNbDataToProcess+0x98>)
 800edaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edac:	fb93 f3f2 	sdiv	r3, r3, r2
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
 800edba:	7b7a      	ldrb	r2, [r7, #13]
 800edbc:	4909      	ldr	r1, [pc, #36]	@ (800ede4 <UARTEx_SetNbDataToProcess+0x94>)
 800edbe:	5c8a      	ldrb	r2, [r1, r2]
 800edc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800edc4:	7b7a      	ldrb	r2, [r7, #13]
 800edc6:	4908      	ldr	r1, [pc, #32]	@ (800ede8 <UARTEx_SetNbDataToProcess+0x98>)
 800edc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edca:	fb93 f3f2 	sdiv	r3, r3, r2
 800edce:	b29a      	uxth	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800edd6:	bf00      	nop
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	080171b0 	.word	0x080171b0
 800ede8:	080171b8 	.word	0x080171b8

0800edec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edec:	b084      	sub	sp, #16
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	f107 001c 	add.w	r0, r7, #28
 800edfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800edfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d121      	bne.n	800ee4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68da      	ldr	r2, [r3, #12]
 800ee16:	4b2c      	ldr	r3, [pc, #176]	@ (800eec8 <USB_CoreInit+0xdc>)
 800ee18:	4013      	ands	r3, r2
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d105      	bne.n	800ee3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f001 faf6 	bl	8010430 <USB_CoreReset>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
 800ee48:	e01b      	b.n	800ee82 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f001 faea 	bl	8010430 <USB_CoreReset>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ee60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d106      	bne.n	800ee76 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	639a      	str	r2, [r3, #56]	@ 0x38
 800ee74:	e005      	b.n	800ee82 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ee82:	7fbb      	ldrb	r3, [r7, #30]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d116      	bne.n	800eeb6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ee96:	4b0d      	ldr	r3, [pc, #52]	@ (800eecc <USB_CoreInit+0xe0>)
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f043 0206 	orr.w	r2, r3, #6
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f043 0220 	orr.w	r2, r3, #32
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eec2:	b004      	add	sp, #16
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	ffbdffbf 	.word	0xffbdffbf
 800eecc:	03ee0000 	.word	0x03ee0000

0800eed0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	4613      	mov	r3, r2
 800eedc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d165      	bne.n	800efb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	4a41      	ldr	r2, [pc, #260]	@ (800efec <USB_SetTurnaroundTime+0x11c>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d906      	bls.n	800eefa <USB_SetTurnaroundTime+0x2a>
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	4a40      	ldr	r2, [pc, #256]	@ (800eff0 <USB_SetTurnaroundTime+0x120>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d202      	bcs.n	800eefa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800eef4:	230f      	movs	r3, #15
 800eef6:	617b      	str	r3, [r7, #20]
 800eef8:	e062      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	4a3c      	ldr	r2, [pc, #240]	@ (800eff0 <USB_SetTurnaroundTime+0x120>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d306      	bcc.n	800ef10 <USB_SetTurnaroundTime+0x40>
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	4a3b      	ldr	r2, [pc, #236]	@ (800eff4 <USB_SetTurnaroundTime+0x124>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d202      	bcs.n	800ef10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ef0a:	230e      	movs	r3, #14
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	e057      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	4a38      	ldr	r2, [pc, #224]	@ (800eff4 <USB_SetTurnaroundTime+0x124>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d306      	bcc.n	800ef26 <USB_SetTurnaroundTime+0x56>
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	4a37      	ldr	r2, [pc, #220]	@ (800eff8 <USB_SetTurnaroundTime+0x128>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d202      	bcs.n	800ef26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ef20:	230d      	movs	r3, #13
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	e04c      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	4a33      	ldr	r2, [pc, #204]	@ (800eff8 <USB_SetTurnaroundTime+0x128>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d306      	bcc.n	800ef3c <USB_SetTurnaroundTime+0x6c>
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	4a32      	ldr	r2, [pc, #200]	@ (800effc <USB_SetTurnaroundTime+0x12c>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d802      	bhi.n	800ef3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ef36:	230c      	movs	r3, #12
 800ef38:	617b      	str	r3, [r7, #20]
 800ef3a:	e041      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	4a2f      	ldr	r2, [pc, #188]	@ (800effc <USB_SetTurnaroundTime+0x12c>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d906      	bls.n	800ef52 <USB_SetTurnaroundTime+0x82>
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	4a2e      	ldr	r2, [pc, #184]	@ (800f000 <USB_SetTurnaroundTime+0x130>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d802      	bhi.n	800ef52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ef4c:	230b      	movs	r3, #11
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e036      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	4a2a      	ldr	r2, [pc, #168]	@ (800f000 <USB_SetTurnaroundTime+0x130>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d906      	bls.n	800ef68 <USB_SetTurnaroundTime+0x98>
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	4a29      	ldr	r2, [pc, #164]	@ (800f004 <USB_SetTurnaroundTime+0x134>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d802      	bhi.n	800ef68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ef62:	230a      	movs	r3, #10
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	e02b      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	4a26      	ldr	r2, [pc, #152]	@ (800f004 <USB_SetTurnaroundTime+0x134>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d906      	bls.n	800ef7e <USB_SetTurnaroundTime+0xae>
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	4a25      	ldr	r2, [pc, #148]	@ (800f008 <USB_SetTurnaroundTime+0x138>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d202      	bcs.n	800ef7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ef78:	2309      	movs	r3, #9
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	e020      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	4a21      	ldr	r2, [pc, #132]	@ (800f008 <USB_SetTurnaroundTime+0x138>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d306      	bcc.n	800ef94 <USB_SetTurnaroundTime+0xc4>
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	4a20      	ldr	r2, [pc, #128]	@ (800f00c <USB_SetTurnaroundTime+0x13c>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d802      	bhi.n	800ef94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ef8e:	2308      	movs	r3, #8
 800ef90:	617b      	str	r3, [r7, #20]
 800ef92:	e015      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	4a1d      	ldr	r2, [pc, #116]	@ (800f00c <USB_SetTurnaroundTime+0x13c>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d906      	bls.n	800efaa <USB_SetTurnaroundTime+0xda>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	4a1c      	ldr	r2, [pc, #112]	@ (800f010 <USB_SetTurnaroundTime+0x140>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d202      	bcs.n	800efaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800efa4:	2307      	movs	r3, #7
 800efa6:	617b      	str	r3, [r7, #20]
 800efa8:	e00a      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800efaa:	2306      	movs	r3, #6
 800efac:	617b      	str	r3, [r7, #20]
 800efae:	e007      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d102      	bne.n	800efbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800efb6:	2309      	movs	r3, #9
 800efb8:	617b      	str	r3, [r7, #20]
 800efba:	e001      	b.n	800efc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800efbc:	2309      	movs	r3, #9
 800efbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	68da      	ldr	r2, [r3, #12]
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	029b      	lsls	r3, r3, #10
 800efd4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800efd8:	431a      	orrs	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	371c      	adds	r7, #28
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	00d8acbf 	.word	0x00d8acbf
 800eff0:	00e4e1c0 	.word	0x00e4e1c0
 800eff4:	00f42400 	.word	0x00f42400
 800eff8:	01067380 	.word	0x01067380
 800effc:	011a499f 	.word	0x011a499f
 800f000:	01312cff 	.word	0x01312cff
 800f004:	014ca43f 	.word	0x014ca43f
 800f008:	016e3600 	.word	0x016e3600
 800f00c:	01a6ab1f 	.word	0x01a6ab1f
 800f010:	01e84800 	.word	0x01e84800

0800f014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	f043 0201 	orr.w	r2, r3, #1
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f036:	b480      	push	{r7}
 800f038:	b083      	sub	sp, #12
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	f023 0201 	bic.w	r2, r3, #1
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f064:	2300      	movs	r3, #0
 800f066:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f074:	78fb      	ldrb	r3, [r7, #3]
 800f076:	2b01      	cmp	r3, #1
 800f078:	d115      	bne.n	800f0a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f086:	200a      	movs	r0, #10
 800f088:	f7f4 fbf2 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	330a      	adds	r3, #10
 800f090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f001 f93b 	bl	801030e <USB_GetMode>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d01e      	beq.n	800f0dc <USB_SetCurrentMode+0x84>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2bc7      	cmp	r3, #199	@ 0xc7
 800f0a2:	d9f0      	bls.n	800f086 <USB_SetCurrentMode+0x2e>
 800f0a4:	e01a      	b.n	800f0dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f0a6:	78fb      	ldrb	r3, [r7, #3]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d115      	bne.n	800f0d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f0b8:	200a      	movs	r0, #10
 800f0ba:	f7f4 fbd9 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	330a      	adds	r3, #10
 800f0c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f001 f922 	bl	801030e <USB_GetMode>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d005      	beq.n	800f0dc <USB_SetCurrentMode+0x84>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800f0d4:	d9f0      	bls.n	800f0b8 <USB_SetCurrentMode+0x60>
 800f0d6:	e001      	b.n	800f0dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	e005      	b.n	800f0e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2bc8      	cmp	r3, #200	@ 0xc8
 800f0e0:	d101      	bne.n	800f0e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e000      	b.n	800f0e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b086      	sub	sp, #24
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f0fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f10a:	2300      	movs	r3, #0
 800f10c:	613b      	str	r3, [r7, #16]
 800f10e:	e009      	b.n	800f124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	3340      	adds	r3, #64	@ 0x40
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	2200      	movs	r2, #0
 800f11c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	3301      	adds	r3, #1
 800f122:	613b      	str	r3, [r7, #16]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	2b0e      	cmp	r3, #14
 800f128:	d9f2      	bls.n	800f110 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f12a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d11c      	bne.n	800f16c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f14a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	e005      	b.n	800f178 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f170:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f17e:	461a      	mov	r2, r3
 800f180:	2300      	movs	r3, #0
 800f182:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f184:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d10d      	bne.n	800f1a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f18c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f194:	2100      	movs	r1, #0
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f968 	bl	800f46c <USB_SetDevSpeed>
 800f19c:	e008      	b.n	800f1b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f19e:	2101      	movs	r1, #1
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f963 	bl	800f46c <USB_SetDevSpeed>
 800f1a6:	e003      	b.n	800f1b0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f1a8:	2103      	movs	r1, #3
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f95e 	bl	800f46c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f1b0:	2110      	movs	r1, #16
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 f8fa 	bl	800f3ac <USB_FlushTxFifo>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f924 	bl	800f410 <USB_FlushRxFifo>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1d8:	461a      	mov	r2, r3
 800f1da:	2300      	movs	r3, #0
 800f1dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	613b      	str	r3, [r7, #16]
 800f1fa:	e043      	b.n	800f284 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f20e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f212:	d118      	bne.n	800f246 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10a      	bne.n	800f230 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	015a      	lsls	r2, r3, #5
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	4413      	add	r3, r2
 800f222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f226:	461a      	mov	r2, r3
 800f228:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	e013      	b.n	800f258 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	015a      	lsls	r2, r3, #5
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4413      	add	r3, r2
 800f238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f23c:	461a      	mov	r2, r3
 800f23e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	e008      	b.n	800f258 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f252:	461a      	mov	r2, r3
 800f254:	2300      	movs	r3, #0
 800f256:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	015a      	lsls	r2, r3, #5
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4413      	add	r3, r2
 800f260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f264:	461a      	mov	r2, r3
 800f266:	2300      	movs	r3, #0
 800f268:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f276:	461a      	mov	r2, r3
 800f278:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f27c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	3301      	adds	r3, #1
 800f282:	613b      	str	r3, [r7, #16]
 800f284:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f288:	461a      	mov	r2, r3
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d3b5      	bcc.n	800f1fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f290:	2300      	movs	r3, #0
 800f292:	613b      	str	r3, [r7, #16]
 800f294:	e043      	b.n	800f31e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2ac:	d118      	bne.n	800f2e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10a      	bne.n	800f2ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	015a      	lsls	r2, r3, #5
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	e013      	b.n	800f2f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	015a      	lsls	r2, r3, #5
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f2dc:	6013      	str	r3, [r2, #0]
 800f2de:	e008      	b.n	800f2f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	015a      	lsls	r2, r3, #5
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	015a      	lsls	r2, r3, #5
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2fe:	461a      	mov	r2, r3
 800f300:	2300      	movs	r3, #0
 800f302:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f310:	461a      	mov	r2, r3
 800f312:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	3301      	adds	r3, #1
 800f31c:	613b      	str	r3, [r7, #16]
 800f31e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f322:	461a      	mov	r2, r3
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	4293      	cmp	r3, r2
 800f328:	d3b5      	bcc.n	800f296 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f330:	691b      	ldr	r3, [r3, #16]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f33c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f34a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f34c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f350:	2b00      	cmp	r3, #0
 800f352:	d105      	bne.n	800f360 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	f043 0210 	orr.w	r2, r3, #16
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	699a      	ldr	r2, [r3, #24]
 800f364:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a4 <USB_DevInit+0x2b4>)
 800f366:	4313      	orrs	r3, r2
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f36c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f370:	2b00      	cmp	r3, #0
 800f372:	d005      	beq.n	800f380 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	699b      	ldr	r3, [r3, #24]
 800f378:	f043 0208 	orr.w	r2, r3, #8
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f380:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f384:	2b01      	cmp	r3, #1
 800f386:	d105      	bne.n	800f394 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	699a      	ldr	r2, [r3, #24]
 800f38c:	4b06      	ldr	r3, [pc, #24]	@ (800f3a8 <USB_DevInit+0x2b8>)
 800f38e:	4313      	orrs	r3, r2
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3a0:	b004      	add	sp, #16
 800f3a2:	4770      	bx	lr
 800f3a4:	803c3800 	.word	0x803c3800
 800f3a8:	40000004 	.word	0x40000004

0800f3ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f3c6:	d901      	bls.n	800f3cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e01b      	b.n	800f404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	daf2      	bge.n	800f3ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	019b      	lsls	r3, r3, #6
 800f3dc:	f043 0220 	orr.w	r2, r3, #32
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f3f0:	d901      	bls.n	800f3f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	e006      	b.n	800f404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	f003 0320 	and.w	r3, r3, #32
 800f3fe:	2b20      	cmp	r3, #32
 800f400:	d0f0      	beq.n	800f3e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3301      	adds	r3, #1
 800f420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f428:	d901      	bls.n	800f42e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f42a:	2303      	movs	r3, #3
 800f42c:	e018      	b.n	800f460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	daf2      	bge.n	800f41c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f436:	2300      	movs	r3, #0
 800f438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2210      	movs	r2, #16
 800f43e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	3301      	adds	r3, #1
 800f444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f44c:	d901      	bls.n	800f452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f44e:	2303      	movs	r3, #3
 800f450:	e006      	b.n	800f460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	f003 0310 	and.w	r3, r3, #16
 800f45a:	2b10      	cmp	r3, #16
 800f45c:	d0f0      	beq.n	800f440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	78fb      	ldrb	r3, [r7, #3]
 800f486:	68f9      	ldr	r1, [r7, #12]
 800f488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f48c:	4313      	orrs	r3, r2
 800f48e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr

0800f49e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f49e:	b480      	push	{r7}
 800f4a0:	b087      	sub	sp, #28
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	f003 0306 	and.w	r3, r3, #6
 800f4b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d102      	bne.n	800f4c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	75fb      	strb	r3, [r7, #23]
 800f4c2:	e00a      	b.n	800f4da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d002      	beq.n	800f4d0 <USB_GetDevSpeed+0x32>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2b06      	cmp	r3, #6
 800f4ce:	d102      	bne.n	800f4d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	75fb      	strb	r3, [r7, #23]
 800f4d4:	e001      	b.n	800f4da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f4d6:	230f      	movs	r3, #15
 800f4d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	371c      	adds	r7, #28
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	785b      	ldrb	r3, [r3, #1]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d139      	bne.n	800f578 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f50a:	69da      	ldr	r2, [r3, #28]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f003 030f 	and.w	r3, r3, #15
 800f514:	2101      	movs	r1, #1
 800f516:	fa01 f303 	lsl.w	r3, r1, r3
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	68f9      	ldr	r1, [r7, #12]
 800f51e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f522:	4313      	orrs	r3, r2
 800f524:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	015a      	lsls	r2, r3, #5
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	4413      	add	r3, r2
 800f52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d153      	bne.n	800f5e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	015a      	lsls	r2, r3, #5
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	4413      	add	r3, r2
 800f544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	791b      	ldrb	r3, [r3, #4]
 800f556:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f558:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	059b      	lsls	r3, r3, #22
 800f55e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f560:	431a      	orrs	r2, r3
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	0159      	lsls	r1, r3, #5
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	440b      	add	r3, r1
 800f56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f56e:	4619      	mov	r1, r3
 800f570:	4b20      	ldr	r3, [pc, #128]	@ (800f5f4 <USB_ActivateEndpoint+0x10c>)
 800f572:	4313      	orrs	r3, r2
 800f574:	600b      	str	r3, [r1, #0]
 800f576:	e035      	b.n	800f5e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f57e:	69da      	ldr	r2, [r3, #28]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	f003 030f 	and.w	r3, r3, #15
 800f588:	2101      	movs	r1, #1
 800f58a:	fa01 f303 	lsl.w	r3, r1, r3
 800f58e:	041b      	lsls	r3, r3, #16
 800f590:	68f9      	ldr	r1, [r7, #12]
 800f592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f596:	4313      	orrs	r3, r2
 800f598:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	015a      	lsls	r2, r3, #5
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d119      	bne.n	800f5e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	015a      	lsls	r2, r3, #5
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	791b      	ldrb	r3, [r3, #4]
 800f5ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f5cc:	430b      	orrs	r3, r1
 800f5ce:	431a      	orrs	r2, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	0159      	lsls	r1, r3, #5
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	440b      	add	r3, r1
 800f5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4b05      	ldr	r3, [pc, #20]	@ (800f5f4 <USB_ActivateEndpoint+0x10c>)
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	10008000 	.word	0x10008000

0800f5f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	785b      	ldrb	r3, [r3, #1]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d161      	bne.n	800f6d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	015a      	lsls	r2, r3, #5
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	4413      	add	r3, r2
 800f61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f62a:	d11f      	bne.n	800f66c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	015a      	lsls	r2, r3, #5
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	4413      	add	r3, r2
 800f634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	0151      	lsls	r1, r2, #5
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	440a      	add	r2, r1
 800f642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f646:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f64a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	015a      	lsls	r2, r3, #5
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4413      	add	r3, r2
 800f654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	0151      	lsls	r1, r2, #5
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	440a      	add	r2, r1
 800f662:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f66a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f003 030f 	and.w	r3, r3, #15
 800f67c:	2101      	movs	r1, #1
 800f67e:	fa01 f303 	lsl.w	r3, r1, r3
 800f682:	b29b      	uxth	r3, r3
 800f684:	43db      	mvns	r3, r3
 800f686:	68f9      	ldr	r1, [r7, #12]
 800f688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f68c:	4013      	ands	r3, r2
 800f68e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f696:	69da      	ldr	r2, [r3, #28]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f003 030f 	and.w	r3, r3, #15
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	43db      	mvns	r3, r3
 800f6aa:	68f9      	ldr	r1, [r7, #12]
 800f6ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	015a      	lsls	r2, r3, #5
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	0159      	lsls	r1, r3, #5
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	440b      	add	r3, r1
 800f6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	4b35      	ldr	r3, [pc, #212]	@ (800f7a8 <USB_DeactivateEndpoint+0x1b0>)
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	600b      	str	r3, [r1, #0]
 800f6d6:	e060      	b.n	800f79a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f6ee:	d11f      	bne.n	800f730 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	015a      	lsls	r2, r3, #5
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	4413      	add	r3, r2
 800f6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	0151      	lsls	r1, r2, #5
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	440a      	add	r2, r1
 800f706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f70a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f70e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	015a      	lsls	r2, r3, #5
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	4413      	add	r3, r2
 800f718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	0151      	lsls	r1, r2, #5
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	440a      	add	r2, r1
 800f726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f72a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f72e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	f003 030f 	and.w	r3, r3, #15
 800f740:	2101      	movs	r1, #1
 800f742:	fa01 f303 	lsl.w	r3, r1, r3
 800f746:	041b      	lsls	r3, r3, #16
 800f748:	43db      	mvns	r3, r3
 800f74a:	68f9      	ldr	r1, [r7, #12]
 800f74c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f750:	4013      	ands	r3, r2
 800f752:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f75a:	69da      	ldr	r2, [r3, #28]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	f003 030f 	and.w	r3, r3, #15
 800f764:	2101      	movs	r1, #1
 800f766:	fa01 f303 	lsl.w	r3, r1, r3
 800f76a:	041b      	lsls	r3, r3, #16
 800f76c:	43db      	mvns	r3, r3
 800f76e:	68f9      	ldr	r1, [r7, #12]
 800f770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f774:	4013      	ands	r3, r2
 800f776:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	0159      	lsls	r1, r3, #5
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	440b      	add	r3, r1
 800f78e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f792:	4619      	mov	r1, r3
 800f794:	4b05      	ldr	r3, [pc, #20]	@ (800f7ac <USB_DeactivateEndpoint+0x1b4>)
 800f796:	4013      	ands	r3, r2
 800f798:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3714      	adds	r7, #20
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	ec337800 	.word	0xec337800
 800f7ac:	eff37800 	.word	0xeff37800

0800f7b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08a      	sub	sp, #40	@ 0x28
 800f7b4:	af02      	add	r7, sp, #8
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	785b      	ldrb	r3, [r3, #1]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	f040 8181 	bne.w	800fad4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d132      	bne.n	800f840 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7e6:	691a      	ldr	r2, [r3, #16]
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	0159      	lsls	r1, r3, #5
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	440b      	add	r3, r1
 800f7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4ba5      	ldr	r3, [pc, #660]	@ (800fa8c <USB_EPStartXfer+0x2dc>)
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	015a      	lsls	r2, r3, #5
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	4413      	add	r3, r2
 800f804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	69ba      	ldr	r2, [r7, #24]
 800f80c:	0151      	lsls	r1, r2, #5
 800f80e:	69fa      	ldr	r2, [r7, #28]
 800f810:	440a      	add	r2, r1
 800f812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f81a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f828:	691a      	ldr	r2, [r3, #16]
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	0159      	lsls	r1, r3, #5
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	440b      	add	r3, r1
 800f832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f836:	4619      	mov	r1, r3
 800f838:	4b95      	ldr	r3, [pc, #596]	@ (800fa90 <USB_EPStartXfer+0x2e0>)
 800f83a:	4013      	ands	r3, r2
 800f83c:	610b      	str	r3, [r1, #16]
 800f83e:	e092      	b.n	800f966 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f84c:	691a      	ldr	r2, [r3, #16]
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	0159      	lsls	r1, r3, #5
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	440b      	add	r3, r1
 800f856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f85a:	4619      	mov	r1, r3
 800f85c:	4b8c      	ldr	r3, [pc, #560]	@ (800fa90 <USB_EPStartXfer+0x2e0>)
 800f85e:	4013      	ands	r3, r2
 800f860:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	015a      	lsls	r2, r3, #5
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	4413      	add	r3, r2
 800f86a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f86e:	691a      	ldr	r2, [r3, #16]
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	0159      	lsls	r1, r3, #5
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	440b      	add	r3, r1
 800f878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f87c:	4619      	mov	r1, r3
 800f87e:	4b83      	ldr	r3, [pc, #524]	@ (800fa8c <USB_EPStartXfer+0x2dc>)
 800f880:	4013      	ands	r3, r2
 800f882:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d11a      	bne.n	800f8c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	691a      	ldr	r2, [r3, #16]
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	429a      	cmp	r2, r3
 800f894:	d903      	bls.n	800f89e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	689a      	ldr	r2, [r3, #8]
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	015a      	lsls	r2, r3, #5
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	69ba      	ldr	r2, [r7, #24]
 800f8ae:	0151      	lsls	r1, r2, #5
 800f8b0:	69fa      	ldr	r2, [r7, #28]
 800f8b2:	440a      	add	r2, r1
 800f8b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f8b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f8bc:	6113      	str	r3, [r2, #16]
 800f8be:	e01b      	b.n	800f8f8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	015a      	lsls	r2, r3, #5
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8cc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	6919      	ldr	r1, [r3, #16]
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	440b      	add	r3, r1
 800f8d8:	1e59      	subs	r1, r3, #1
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	fbb1 f3f3 	udiv	r3, r1, r3
 800f8e2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f8e4:	4b6b      	ldr	r3, [pc, #428]	@ (800fa94 <USB_EPStartXfer+0x2e4>)
 800f8e6:	400b      	ands	r3, r1
 800f8e8:	69b9      	ldr	r1, [r7, #24]
 800f8ea:	0148      	lsls	r0, r1, #5
 800f8ec:	69f9      	ldr	r1, [r7, #28]
 800f8ee:	4401      	add	r1, r0
 800f8f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	015a      	lsls	r2, r3, #5
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	4413      	add	r3, r2
 800f900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f904:	691a      	ldr	r2, [r3, #16]
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f90e:	69b9      	ldr	r1, [r7, #24]
 800f910:	0148      	lsls	r0, r1, #5
 800f912:	69f9      	ldr	r1, [r7, #28]
 800f914:	4401      	add	r1, r0
 800f916:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f91a:	4313      	orrs	r3, r2
 800f91c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	791b      	ldrb	r3, [r3, #4]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d11f      	bne.n	800f966 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	015a      	lsls	r2, r3, #5
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	4413      	add	r3, r2
 800f92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	69ba      	ldr	r2, [r7, #24]
 800f936:	0151      	lsls	r1, r2, #5
 800f938:	69fa      	ldr	r2, [r7, #28]
 800f93a:	440a      	add	r2, r1
 800f93c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f940:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f944:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	015a      	lsls	r2, r3, #5
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	4413      	add	r3, r2
 800f94e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	0151      	lsls	r1, r2, #5
 800f958:	69fa      	ldr	r2, [r7, #28]
 800f95a:	440a      	add	r2, r1
 800f95c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f964:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f966:	79fb      	ldrb	r3, [r7, #7]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d14b      	bne.n	800fa04 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d009      	beq.n	800f988 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f980:	461a      	mov	r2, r3
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	791b      	ldrb	r3, [r3, #4]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d128      	bne.n	800f9e2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d110      	bne.n	800f9c2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	015a      	lsls	r2, r3, #5
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	69ba      	ldr	r2, [r7, #24]
 800f9b0:	0151      	lsls	r1, r2, #5
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	440a      	add	r2, r1
 800f9b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f9be:	6013      	str	r3, [r2, #0]
 800f9c0:	e00f      	b.n	800f9e2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	015a      	lsls	r2, r3, #5
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	69ba      	ldr	r2, [r7, #24]
 800f9d2:	0151      	lsls	r1, r2, #5
 800f9d4:	69fa      	ldr	r2, [r7, #28]
 800f9d6:	440a      	add	r2, r1
 800f9d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	015a      	lsls	r2, r3, #5
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	69ba      	ldr	r2, [r7, #24]
 800f9f2:	0151      	lsls	r1, r2, #5
 800f9f4:	69fa      	ldr	r2, [r7, #28]
 800f9f6:	440a      	add	r2, r1
 800f9f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fa00:	6013      	str	r3, [r2, #0]
 800fa02:	e16a      	b.n	800fcda <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	015a      	lsls	r2, r3, #5
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	69ba      	ldr	r2, [r7, #24]
 800fa14:	0151      	lsls	r1, r2, #5
 800fa16:	69fa      	ldr	r2, [r7, #28]
 800fa18:	440a      	add	r2, r1
 800fa1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fa22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	791b      	ldrb	r3, [r3, #4]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d015      	beq.n	800fa58 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 8152 	beq.w	800fcda <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	f003 030f 	and.w	r3, r3, #15
 800fa46:	2101      	movs	r1, #1
 800fa48:	fa01 f303 	lsl.w	r3, r1, r3
 800fa4c:	69f9      	ldr	r1, [r7, #28]
 800fa4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa52:	4313      	orrs	r3, r2
 800fa54:	634b      	str	r3, [r1, #52]	@ 0x34
 800fa56:	e140      	b.n	800fcda <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d117      	bne.n	800fa98 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	69ba      	ldr	r2, [r7, #24]
 800fa78:	0151      	lsls	r1, r2, #5
 800fa7a:	69fa      	ldr	r2, [r7, #28]
 800fa7c:	440a      	add	r2, r1
 800fa7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fa86:	6013      	str	r3, [r2, #0]
 800fa88:	e016      	b.n	800fab8 <USB_EPStartXfer+0x308>
 800fa8a:	bf00      	nop
 800fa8c:	e007ffff 	.word	0xe007ffff
 800fa90:	fff80000 	.word	0xfff80000
 800fa94:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fa98:	69bb      	ldr	r3, [r7, #24]
 800fa9a:	015a      	lsls	r2, r3, #5
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	4413      	add	r3, r2
 800faa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69ba      	ldr	r2, [r7, #24]
 800faa8:	0151      	lsls	r1, r2, #5
 800faaa:	69fa      	ldr	r2, [r7, #28]
 800faac:	440a      	add	r2, r1
 800faae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fab6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	68d9      	ldr	r1, [r3, #12]
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	781a      	ldrb	r2, [r3, #0]
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	b298      	uxth	r0, r3
 800fac6:	79fb      	ldrb	r3, [r7, #7]
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	4603      	mov	r3, r0
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f000 f9b9 	bl	800fe44 <USB_WritePacket>
 800fad2:	e102      	b.n	800fcda <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fae0:	691a      	ldr	r2, [r3, #16]
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	0159      	lsls	r1, r3, #5
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	440b      	add	r3, r1
 800faea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faee:	4619      	mov	r1, r3
 800faf0:	4b7c      	ldr	r3, [pc, #496]	@ (800fce4 <USB_EPStartXfer+0x534>)
 800faf2:	4013      	ands	r3, r2
 800faf4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	015a      	lsls	r2, r3, #5
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	4413      	add	r3, r2
 800fafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb02:	691a      	ldr	r2, [r3, #16]
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	0159      	lsls	r1, r3, #5
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	440b      	add	r3, r1
 800fb0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb10:	4619      	mov	r1, r3
 800fb12:	4b75      	ldr	r3, [pc, #468]	@ (800fce8 <USB_EPStartXfer+0x538>)
 800fb14:	4013      	ands	r3, r2
 800fb16:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d12f      	bne.n	800fb7e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d003      	beq.n	800fb2e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	689a      	ldr	r2, [r3, #8]
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	689a      	ldr	r2, [r3, #8]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	015a      	lsls	r2, r3, #5
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb42:	691a      	ldr	r2, [r3, #16]
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	6a1b      	ldr	r3, [r3, #32]
 800fb48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb4c:	69b9      	ldr	r1, [r7, #24]
 800fb4e:	0148      	lsls	r0, r1, #5
 800fb50:	69f9      	ldr	r1, [r7, #28]
 800fb52:	4401      	add	r1, r0
 800fb54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	015a      	lsls	r2, r3, #5
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	4413      	add	r3, r2
 800fb64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	69ba      	ldr	r2, [r7, #24]
 800fb6c:	0151      	lsls	r1, r2, #5
 800fb6e:	69fa      	ldr	r2, [r7, #28]
 800fb70:	440a      	add	r2, r1
 800fb72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb7a:	6113      	str	r3, [r2, #16]
 800fb7c:	e05f      	b.n	800fc3e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d123      	bne.n	800fbce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	015a      	lsls	r2, r3, #5
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb92:	691a      	ldr	r2, [r3, #16]
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb9c:	69b9      	ldr	r1, [r7, #24]
 800fb9e:	0148      	lsls	r0, r1, #5
 800fba0:	69f9      	ldr	r1, [r7, #28]
 800fba2:	4401      	add	r1, r0
 800fba4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	015a      	lsls	r2, r3, #5
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbb8:	691b      	ldr	r3, [r3, #16]
 800fbba:	69ba      	ldr	r2, [r7, #24]
 800fbbc:	0151      	lsls	r1, r2, #5
 800fbbe:	69fa      	ldr	r2, [r7, #28]
 800fbc0:	440a      	add	r2, r1
 800fbc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fbc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fbca:	6113      	str	r3, [r2, #16]
 800fbcc:	e037      	b.n	800fc3e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	691a      	ldr	r2, [r3, #16]
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	1e5a      	subs	r2, r3, #1
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	8afa      	ldrh	r2, [r7, #22]
 800fbea:	fb03 f202 	mul.w	r2, r3, r2
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	015a      	lsls	r2, r3, #5
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbfe:	691a      	ldr	r2, [r3, #16]
 800fc00:	8afb      	ldrh	r3, [r7, #22]
 800fc02:	04d9      	lsls	r1, r3, #19
 800fc04:	4b39      	ldr	r3, [pc, #228]	@ (800fcec <USB_EPStartXfer+0x53c>)
 800fc06:	400b      	ands	r3, r1
 800fc08:	69b9      	ldr	r1, [r7, #24]
 800fc0a:	0148      	lsls	r0, r1, #5
 800fc0c:	69f9      	ldr	r1, [r7, #28]
 800fc0e:	4401      	add	r1, r0
 800fc10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fc14:	4313      	orrs	r3, r2
 800fc16:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc24:	691a      	ldr	r2, [r3, #16]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc2e:	69b9      	ldr	r1, [r7, #24]
 800fc30:	0148      	lsls	r0, r1, #5
 800fc32:	69f9      	ldr	r1, [r7, #28]
 800fc34:	4401      	add	r1, r0
 800fc36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d10d      	bne.n	800fc60 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d009      	beq.n	800fc60 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	68d9      	ldr	r1, [r3, #12]
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc5c:	460a      	mov	r2, r1
 800fc5e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	791b      	ldrb	r3, [r3, #4]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d128      	bne.n	800fcba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d110      	bne.n	800fc9a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	015a      	lsls	r2, r3, #5
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	0151      	lsls	r1, r2, #5
 800fc8a:	69fa      	ldr	r2, [r7, #28]
 800fc8c:	440a      	add	r2, r1
 800fc8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	e00f      	b.n	800fcba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	0151      	lsls	r1, r2, #5
 800fcac:	69fa      	ldr	r2, [r7, #28]
 800fcae:	440a      	add	r2, r1
 800fcb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcb8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	015a      	lsls	r2, r3, #5
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	69ba      	ldr	r2, [r7, #24]
 800fcca:	0151      	lsls	r1, r2, #5
 800fccc:	69fa      	ldr	r2, [r7, #28]
 800fcce:	440a      	add	r2, r1
 800fcd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcd4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fcd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3720      	adds	r7, #32
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	fff80000 	.word	0xfff80000
 800fce8:	e007ffff 	.word	0xe007ffff
 800fcec:	1ff80000 	.word	0x1ff80000

0800fcf0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	785b      	ldrb	r3, [r3, #1]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d14a      	bne.n	800fda4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	015a      	lsls	r2, r3, #5
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	4413      	add	r3, r2
 800fd18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd26:	f040 8086 	bne.w	800fe36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	015a      	lsls	r2, r3, #5
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	4413      	add	r3, r2
 800fd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	683a      	ldr	r2, [r7, #0]
 800fd3c:	7812      	ldrb	r2, [r2, #0]
 800fd3e:	0151      	lsls	r1, r2, #5
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	440a      	add	r2, r1
 800fd44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fd4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	7812      	ldrb	r2, [r2, #0]
 800fd62:	0151      	lsls	r1, r2, #5
 800fd64:	693a      	ldr	r2, [r7, #16]
 800fd66:	440a      	add	r2, r1
 800fd68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	3301      	adds	r3, #1
 800fd76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d902      	bls.n	800fd88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	75fb      	strb	r3, [r7, #23]
          break;
 800fd86:	e056      	b.n	800fe36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	015a      	lsls	r2, r3, #5
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	4413      	add	r3, r2
 800fd92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fda0:	d0e7      	beq.n	800fd72 <USB_EPStopXfer+0x82>
 800fda2:	e048      	b.n	800fe36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	015a      	lsls	r2, r3, #5
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	4413      	add	r3, r2
 800fdae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fdb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fdbc:	d13b      	bne.n	800fe36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	015a      	lsls	r2, r3, #5
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	683a      	ldr	r2, [r7, #0]
 800fdd0:	7812      	ldrb	r2, [r2, #0]
 800fdd2:	0151      	lsls	r1, r2, #5
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	440a      	add	r2, r1
 800fdd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fddc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fde0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	683a      	ldr	r2, [r7, #0]
 800fdf4:	7812      	ldrb	r2, [r2, #0]
 800fdf6:	0151      	lsls	r1, r2, #5
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fe04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d902      	bls.n	800fe1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	75fb      	strb	r3, [r7, #23]
          break;
 800fe1a:	e00c      	b.n	800fe36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	015a      	lsls	r2, r3, #5
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	4413      	add	r3, r2
 800fe26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fe30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fe34:	d0e7      	beq.n	800fe06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fe36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	371c      	adds	r7, #28
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b089      	sub	sp, #36	@ 0x24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	4611      	mov	r1, r2
 800fe50:	461a      	mov	r2, r3
 800fe52:	460b      	mov	r3, r1
 800fe54:	71fb      	strb	r3, [r7, #7]
 800fe56:	4613      	mov	r3, r2
 800fe58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fe62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d123      	bne.n	800feb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fe6a:	88bb      	ldrh	r3, [r7, #4]
 800fe6c:	3303      	adds	r3, #3
 800fe6e:	089b      	lsrs	r3, r3, #2
 800fe70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fe72:	2300      	movs	r3, #0
 800fe74:	61bb      	str	r3, [r7, #24]
 800fe76:	e018      	b.n	800feaa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fe78:	79fb      	ldrb	r3, [r7, #7]
 800fe7a:	031a      	lsls	r2, r3, #12
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	4413      	add	r3, r2
 800fe80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe84:	461a      	mov	r2, r3
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3301      	adds	r3, #1
 800fe96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	3301      	adds	r3, #1
 800fea2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	3301      	adds	r3, #1
 800fea8:	61bb      	str	r3, [r7, #24]
 800feaa:	69ba      	ldr	r2, [r7, #24]
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d3e2      	bcc.n	800fe78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3724      	adds	r7, #36	@ 0x24
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b08b      	sub	sp, #44	@ 0x2c
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	4613      	mov	r3, r2
 800fecc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fed6:	88fb      	ldrh	r3, [r7, #6]
 800fed8:	089b      	lsrs	r3, r3, #2
 800feda:	b29b      	uxth	r3, r3
 800fedc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fede:	88fb      	ldrh	r3, [r7, #6]
 800fee0:	f003 0303 	and.w	r3, r3, #3
 800fee4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fee6:	2300      	movs	r3, #0
 800fee8:	623b      	str	r3, [r7, #32]
 800feea:	e014      	b.n	800ff16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef6:	601a      	str	r2, [r3, #0]
    pDest++;
 800fef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefa:	3301      	adds	r3, #1
 800fefc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff00:	3301      	adds	r3, #1
 800ff02:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ff04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff06:	3301      	adds	r3, #1
 800ff08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ff0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	3301      	adds	r3, #1
 800ff14:	623b      	str	r3, [r7, #32]
 800ff16:	6a3a      	ldr	r2, [r7, #32]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d3e6      	bcc.n	800feec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ff1e:	8bfb      	ldrh	r3, [r7, #30]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d01e      	beq.n	800ff62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ff24:	2300      	movs	r3, #0
 800ff26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f107 0310 	add.w	r3, r7, #16
 800ff34:	6812      	ldr	r2, [r2, #0]
 800ff36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ff38:	693a      	ldr	r2, [r7, #16]
 800ff3a:	6a3b      	ldr	r3, [r7, #32]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	00db      	lsls	r3, r3, #3
 800ff40:	fa22 f303 	lsr.w	r3, r2, r3
 800ff44:	b2da      	uxtb	r2, r3
 800ff46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff48:	701a      	strb	r2, [r3, #0]
      i++;
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ff50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff52:	3301      	adds	r3, #1
 800ff54:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ff56:	8bfb      	ldrh	r3, [r7, #30]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ff5c:	8bfb      	ldrh	r3, [r7, #30]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1ea      	bne.n	800ff38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ff62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	372c      	adds	r7, #44	@ 0x2c
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b085      	sub	sp, #20
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	785b      	ldrb	r3, [r3, #1]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d12c      	bne.n	800ffe6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	db12      	blt.n	800ffc4 <USB_EPSetStall+0x54>
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00f      	beq.n	800ffc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	0151      	lsls	r1, r2, #5
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	440a      	add	r2, r1
 800ffba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ffc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	015a      	lsls	r2, r3, #5
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	0151      	lsls	r1, r2, #5
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	440a      	add	r2, r1
 800ffda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	e02b      	b.n	801003e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	015a      	lsls	r2, r3, #5
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	4413      	add	r3, r2
 800ffee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	db12      	blt.n	801001e <USB_EPSetStall+0xae>
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00f      	beq.n	801001e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	0151      	lsls	r1, r2, #5
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	440a      	add	r2, r1
 8010014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010018:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801001c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	015a      	lsls	r2, r3, #5
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	4413      	add	r3, r2
 8010026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	0151      	lsls	r1, r2, #5
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	440a      	add	r2, r1
 8010034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801003c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	785b      	ldrb	r3, [r3, #1]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d128      	bne.n	80100ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	68ba      	ldr	r2, [r7, #8]
 8010078:	0151      	lsls	r1, r2, #5
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	440a      	add	r2, r1
 801007e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010082:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010086:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	791b      	ldrb	r3, [r3, #4]
 801008c:	2b03      	cmp	r3, #3
 801008e:	d003      	beq.n	8010098 <USB_EPClearStall+0x4c>
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	791b      	ldrb	r3, [r3, #4]
 8010094:	2b02      	cmp	r3, #2
 8010096:	d138      	bne.n	801010a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68ba      	ldr	r2, [r7, #8]
 80100a8:	0151      	lsls	r1, r2, #5
 80100aa:	68fa      	ldr	r2, [r7, #12]
 80100ac:	440a      	add	r2, r1
 80100ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	e027      	b.n	801010a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	015a      	lsls	r2, r3, #5
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	4413      	add	r3, r2
 80100c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	0151      	lsls	r1, r2, #5
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	440a      	add	r2, r1
 80100d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80100d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80100d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	791b      	ldrb	r3, [r3, #4]
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d003      	beq.n	80100ea <USB_EPClearStall+0x9e>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	791b      	ldrb	r3, [r3, #4]
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	d10f      	bne.n	801010a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	015a      	lsls	r2, r3, #5
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	4413      	add	r3, r2
 80100f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	0151      	lsls	r1, r2, #5
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	440a      	add	r2, r1
 8010100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010108:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	460b      	mov	r3, r1
 8010122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010136:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801013a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	78fb      	ldrb	r3, [r7, #3]
 8010146:	011b      	lsls	r3, r3, #4
 8010148:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 801014c:	68f9      	ldr	r1, [r7, #12]
 801014e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010152:	4313      	orrs	r3, r2
 8010154:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3714      	adds	r7, #20
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr

08010164 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801017e:	f023 0303 	bic.w	r3, r3, #3
 8010182:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010192:	f023 0302 	bic.w	r3, r3, #2
 8010196:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b085      	sub	sp, #20
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80101c0:	f023 0303 	bic.w	r3, r3, #3
 80101c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80101d4:	f043 0302 	orr.w	r3, r3, #2
 80101d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101da:	2300      	movs	r3, #0
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	4013      	ands	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010200:	68fb      	ldr	r3, [r7, #12]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801020e:	b480      	push	{r7}
 8010210:	b085      	sub	sp, #20
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801022a:	69db      	ldr	r3, [r3, #28]
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	4013      	ands	r3, r2
 8010230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	0c1b      	lsrs	r3, r3, #16
}
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010242:	b480      	push	{r7}
 8010244:	b085      	sub	sp, #20
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010254:	699b      	ldr	r3, [r3, #24]
 8010256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	4013      	ands	r3, r2
 8010264:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	b29b      	uxth	r3, r3
}
 801026a:	4618      	mov	r0, r3
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr

08010276 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010276:	b480      	push	{r7}
 8010278:	b085      	sub	sp, #20
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	460b      	mov	r3, r1
 8010280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010286:	78fb      	ldrb	r3, [r7, #3]
 8010288:	015a      	lsls	r2, r3, #5
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	4413      	add	r3, r2
 801028e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801029c:	695b      	ldr	r3, [r3, #20]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	4013      	ands	r3, r2
 80102a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102a4:	68bb      	ldr	r3, [r7, #8]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b087      	sub	sp, #28
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
 80102ba:	460b      	mov	r3, r1
 80102bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102c8:	691b      	ldr	r3, [r3, #16]
 80102ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80102d6:	78fb      	ldrb	r3, [r7, #3]
 80102d8:	f003 030f 	and.w	r3, r3, #15
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	fa22 f303 	lsr.w	r3, r2, r3
 80102e2:	01db      	lsls	r3, r3, #7
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80102ec:	78fb      	ldrb	r3, [r7, #3]
 80102ee:	015a      	lsls	r2, r3, #5
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	4413      	add	r3, r2
 80102f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	693a      	ldr	r2, [r7, #16]
 80102fc:	4013      	ands	r3, r2
 80102fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010300:	68bb      	ldr	r3, [r7, #8]
}
 8010302:	4618      	mov	r0, r3
 8010304:	371c      	adds	r7, #28
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	695b      	ldr	r3, [r3, #20]
 801031a:	f003 0301 	and.w	r3, r3, #1
}
 801031e:	4618      	mov	r0, r3
 8010320:	370c      	adds	r7, #12
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
	...

0801032c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010346:	4619      	mov	r1, r3
 8010348:	4b09      	ldr	r3, [pc, #36]	@ (8010370 <USB_ActivateSetup+0x44>)
 801034a:	4013      	ands	r3, r2
 801034c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	68fa      	ldr	r2, [r7, #12]
 8010358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801035c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3714      	adds	r7, #20
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr
 8010370:	fffff800 	.word	0xfffff800

08010374 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010374:	b480      	push	{r7}
 8010376:	b087      	sub	sp, #28
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	460b      	mov	r3, r1
 801037e:	607a      	str	r2, [r7, #4]
 8010380:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	333c      	adds	r3, #60	@ 0x3c
 801038a:	3304      	adds	r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	4a26      	ldr	r2, [pc, #152]	@ (801042c <USB_EP0_OutStart+0xb8>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d90a      	bls.n	80103ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80103a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80103a8:	d101      	bne.n	80103ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80103aa:	2300      	movs	r3, #0
 80103ac:	e037      	b.n	801041e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103b4:	461a      	mov	r2, r3
 80103b6:	2300      	movs	r3, #0
 80103b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80103cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103dc:	f043 0318 	orr.w	r3, r3, #24
 80103e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	697a      	ldr	r2, [r7, #20]
 80103ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80103f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80103f6:	7afb      	ldrb	r3, [r7, #11]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d10f      	bne.n	801041c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010402:	461a      	mov	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010416:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801041a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	371c      	adds	r7, #28
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	4f54300a 	.word	0x4f54300a

08010430 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	3301      	adds	r3, #1
 8010440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010448:	d901      	bls.n	801044e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801044a:	2303      	movs	r3, #3
 801044c:	e01b      	b.n	8010486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	691b      	ldr	r3, [r3, #16]
 8010452:	2b00      	cmp	r3, #0
 8010454:	daf2      	bge.n	801043c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	f043 0201 	orr.w	r2, r3, #1
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	3301      	adds	r3, #1
 801046a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010472:	d901      	bls.n	8010478 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010474:	2303      	movs	r3, #3
 8010476:	e006      	b.n	8010486 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	f003 0301 	and.w	r3, r3, #1
 8010480:	2b01      	cmp	r3, #1
 8010482:	d0f0      	beq.n	8010466 <USB_CoreReset+0x36>

  return HAL_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3714      	adds	r7, #20
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
	...

08010494 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80104a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80104a4:	f002 fcca 	bl	8012e3c <USBD_static_malloc>
 80104a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d109      	bne.n	80104c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	32b0      	adds	r2, #176	@ 0xb0
 80104ba:	2100      	movs	r1, #0
 80104bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80104c0:	2302      	movs	r3, #2
 80104c2:	e0d4      	b.n	801066e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80104c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80104c8:	2100      	movs	r1, #0
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f004 f815 	bl	80144fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	32b0      	adds	r2, #176	@ 0xb0
 80104da:	68f9      	ldr	r1, [r7, #12]
 80104dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	32b0      	adds	r2, #176	@ 0xb0
 80104ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7c1b      	ldrb	r3, [r3, #16]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d138      	bne.n	801056e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80104fc:	4b5e      	ldr	r3, [pc, #376]	@ (8010678 <USBD_CDC_Init+0x1e4>)
 80104fe:	7819      	ldrb	r1, [r3, #0]
 8010500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010504:	2202      	movs	r2, #2
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f002 fb75 	bl	8012bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801050c:	4b5a      	ldr	r3, [pc, #360]	@ (8010678 <USBD_CDC_Init+0x1e4>)
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	f003 020f 	and.w	r2, r3, #15
 8010514:	6879      	ldr	r1, [r7, #4]
 8010516:	4613      	mov	r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	4413      	add	r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	440b      	add	r3, r1
 8010520:	3324      	adds	r3, #36	@ 0x24
 8010522:	2201      	movs	r2, #1
 8010524:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010526:	4b55      	ldr	r3, [pc, #340]	@ (801067c <USBD_CDC_Init+0x1e8>)
 8010528:	7819      	ldrb	r1, [r3, #0]
 801052a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801052e:	2202      	movs	r2, #2
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f002 fb60 	bl	8012bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010536:	4b51      	ldr	r3, [pc, #324]	@ (801067c <USBD_CDC_Init+0x1e8>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	f003 020f 	and.w	r2, r3, #15
 801053e:	6879      	ldr	r1, [r7, #4]
 8010540:	4613      	mov	r3, r2
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	440b      	add	r3, r1
 801054a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801054e:	2201      	movs	r2, #1
 8010550:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010552:	4b4b      	ldr	r3, [pc, #300]	@ (8010680 <USBD_CDC_Init+0x1ec>)
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	f003 020f 	and.w	r2, r3, #15
 801055a:	6879      	ldr	r1, [r7, #4]
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	440b      	add	r3, r1
 8010566:	3326      	adds	r3, #38	@ 0x26
 8010568:	2210      	movs	r2, #16
 801056a:	801a      	strh	r2, [r3, #0]
 801056c:	e035      	b.n	80105da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801056e:	4b42      	ldr	r3, [pc, #264]	@ (8010678 <USBD_CDC_Init+0x1e4>)
 8010570:	7819      	ldrb	r1, [r3, #0]
 8010572:	2340      	movs	r3, #64	@ 0x40
 8010574:	2202      	movs	r2, #2
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f002 fb3d 	bl	8012bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801057c:	4b3e      	ldr	r3, [pc, #248]	@ (8010678 <USBD_CDC_Init+0x1e4>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f003 020f 	and.w	r2, r3, #15
 8010584:	6879      	ldr	r1, [r7, #4]
 8010586:	4613      	mov	r3, r2
 8010588:	009b      	lsls	r3, r3, #2
 801058a:	4413      	add	r3, r2
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	440b      	add	r3, r1
 8010590:	3324      	adds	r3, #36	@ 0x24
 8010592:	2201      	movs	r2, #1
 8010594:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010596:	4b39      	ldr	r3, [pc, #228]	@ (801067c <USBD_CDC_Init+0x1e8>)
 8010598:	7819      	ldrb	r1, [r3, #0]
 801059a:	2340      	movs	r3, #64	@ 0x40
 801059c:	2202      	movs	r2, #2
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f002 fb29 	bl	8012bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80105a4:	4b35      	ldr	r3, [pc, #212]	@ (801067c <USBD_CDC_Init+0x1e8>)
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 020f 	and.w	r2, r3, #15
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4613      	mov	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4413      	add	r3, r2
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	440b      	add	r3, r1
 80105b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80105bc:	2201      	movs	r2, #1
 80105be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80105c0:	4b2f      	ldr	r3, [pc, #188]	@ (8010680 <USBD_CDC_Init+0x1ec>)
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	f003 020f 	and.w	r2, r3, #15
 80105c8:	6879      	ldr	r1, [r7, #4]
 80105ca:	4613      	mov	r3, r2
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	440b      	add	r3, r1
 80105d4:	3326      	adds	r3, #38	@ 0x26
 80105d6:	2210      	movs	r2, #16
 80105d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80105da:	4b29      	ldr	r3, [pc, #164]	@ (8010680 <USBD_CDC_Init+0x1ec>)
 80105dc:	7819      	ldrb	r1, [r3, #0]
 80105de:	2308      	movs	r3, #8
 80105e0:	2203      	movs	r2, #3
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f002 fb07 	bl	8012bf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80105e8:	4b25      	ldr	r3, [pc, #148]	@ (8010680 <USBD_CDC_Init+0x1ec>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	f003 020f 	and.w	r2, r3, #15
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	4613      	mov	r3, r2
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	440b      	add	r3, r1
 80105fc:	3324      	adds	r3, #36	@ 0x24
 80105fe:	2201      	movs	r2, #1
 8010600:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	33b0      	adds	r3, #176	@ 0xb0
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	4413      	add	r3, r2
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2200      	movs	r2, #0
 8010622:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2200      	movs	r2, #0
 801062a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010634:	2b00      	cmp	r3, #0
 8010636:	d101      	bne.n	801063c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010638:	2302      	movs	r3, #2
 801063a:	e018      	b.n	801066e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7c1b      	ldrb	r3, [r3, #16]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10a      	bne.n	801065a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010644:	4b0d      	ldr	r3, [pc, #52]	@ (801067c <USBD_CDC_Init+0x1e8>)
 8010646:	7819      	ldrb	r1, [r3, #0]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801064e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f002 fbbe 	bl	8012dd4 <USBD_LL_PrepareReceive>
 8010658:	e008      	b.n	801066c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801065a:	4b08      	ldr	r3, [pc, #32]	@ (801067c <USBD_CDC_Init+0x1e8>)
 801065c:	7819      	ldrb	r1, [r3, #0]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010664:	2340      	movs	r3, #64	@ 0x40
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f002 fbb4 	bl	8012dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	24000097 	.word	0x24000097
 801067c:	24000098 	.word	0x24000098
 8010680:	24000099 	.word	0x24000099

08010684 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010690:	4b3a      	ldr	r3, [pc, #232]	@ (801077c <USBD_CDC_DeInit+0xf8>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	4619      	mov	r1, r3
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f002 fad3 	bl	8012c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801069c:	4b37      	ldr	r3, [pc, #220]	@ (801077c <USBD_CDC_DeInit+0xf8>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 020f 	and.w	r2, r3, #15
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	4613      	mov	r3, r2
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	4413      	add	r3, r2
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	440b      	add	r3, r1
 80106b0:	3324      	adds	r3, #36	@ 0x24
 80106b2:	2200      	movs	r2, #0
 80106b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80106b6:	4b32      	ldr	r3, [pc, #200]	@ (8010780 <USBD_CDC_DeInit+0xfc>)
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	4619      	mov	r1, r3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f002 fac0 	bl	8012c42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80106c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010780 <USBD_CDC_DeInit+0xfc>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 020f 	and.w	r2, r3, #15
 80106ca:	6879      	ldr	r1, [r7, #4]
 80106cc:	4613      	mov	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4413      	add	r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	440b      	add	r3, r1
 80106d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80106da:	2200      	movs	r2, #0
 80106dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80106de:	4b29      	ldr	r3, [pc, #164]	@ (8010784 <USBD_CDC_DeInit+0x100>)
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f002 faac 	bl	8012c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80106ea:	4b26      	ldr	r3, [pc, #152]	@ (8010784 <USBD_CDC_DeInit+0x100>)
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	f003 020f 	and.w	r2, r3, #15
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	4613      	mov	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	440b      	add	r3, r1
 80106fe:	3324      	adds	r3, #36	@ 0x24
 8010700:	2200      	movs	r2, #0
 8010702:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010704:	4b1f      	ldr	r3, [pc, #124]	@ (8010784 <USBD_CDC_DeInit+0x100>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	f003 020f 	and.w	r2, r3, #15
 801070c:	6879      	ldr	r1, [r7, #4]
 801070e:	4613      	mov	r3, r2
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	4413      	add	r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	440b      	add	r3, r1
 8010718:	3326      	adds	r3, #38	@ 0x26
 801071a:	2200      	movs	r2, #0
 801071c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	32b0      	adds	r2, #176	@ 0xb0
 8010728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01f      	beq.n	8010770 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	33b0      	adds	r3, #176	@ 0xb0
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	4413      	add	r3, r2
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	32b0      	adds	r2, #176	@ 0xb0
 801074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010752:	4618      	mov	r0, r3
 8010754:	f002 fb80 	bl	8012e58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	32b0      	adds	r2, #176	@ 0xb0
 8010762:	2100      	movs	r1, #0
 8010764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	24000097 	.word	0x24000097
 8010780:	24000098 	.word	0x24000098
 8010784:	24000099 	.word	0x24000099

08010788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	32b0      	adds	r2, #176	@ 0xb0
 801079c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80107a2:	2300      	movs	r3, #0
 80107a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80107a6:	2300      	movs	r3, #0
 80107a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80107aa:	2300      	movs	r3, #0
 80107ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d101      	bne.n	80107b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80107b4:	2303      	movs	r3, #3
 80107b6:	e0bf      	b.n	8010938 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d050      	beq.n	8010866 <USBD_CDC_Setup+0xde>
 80107c4:	2b20      	cmp	r3, #32
 80107c6:	f040 80af 	bne.w	8010928 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	88db      	ldrh	r3, [r3, #6]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d03a      	beq.n	8010848 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	b25b      	sxtb	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	da1b      	bge.n	8010814 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	33b0      	adds	r3, #176	@ 0xb0
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	4413      	add	r3, r2
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	689b      	ldr	r3, [r3, #8]
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80107f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80107f4:	683a      	ldr	r2, [r7, #0]
 80107f6:	88d2      	ldrh	r2, [r2, #6]
 80107f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	88db      	ldrh	r3, [r3, #6]
 80107fe:	2b07      	cmp	r3, #7
 8010800:	bf28      	it	cs
 8010802:	2307      	movcs	r3, #7
 8010804:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	89fa      	ldrh	r2, [r7, #14]
 801080a:	4619      	mov	r1, r3
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f001 fdbd 	bl	801238c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010812:	e090      	b.n	8010936 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	785a      	ldrb	r2, [r3, #1]
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	88db      	ldrh	r3, [r3, #6]
 8010822:	2b3f      	cmp	r3, #63	@ 0x3f
 8010824:	d803      	bhi.n	801082e <USBD_CDC_Setup+0xa6>
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	88db      	ldrh	r3, [r3, #6]
 801082a:	b2da      	uxtb	r2, r3
 801082c:	e000      	b.n	8010830 <USBD_CDC_Setup+0xa8>
 801082e:	2240      	movs	r2, #64	@ 0x40
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010836:	6939      	ldr	r1, [r7, #16]
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801083e:	461a      	mov	r2, r3
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f001 fdcf 	bl	80123e4 <USBD_CtlPrepareRx>
      break;
 8010846:	e076      	b.n	8010936 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	33b0      	adds	r3, #176	@ 0xb0
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	4413      	add	r3, r2
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	7850      	ldrb	r0, [r2, #1]
 801085e:	2200      	movs	r2, #0
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	4798      	blx	r3
      break;
 8010864:	e067      	b.n	8010936 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	785b      	ldrb	r3, [r3, #1]
 801086a:	2b0b      	cmp	r3, #11
 801086c:	d851      	bhi.n	8010912 <USBD_CDC_Setup+0x18a>
 801086e:	a201      	add	r2, pc, #4	@ (adr r2, 8010874 <USBD_CDC_Setup+0xec>)
 8010870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010874:	080108a5 	.word	0x080108a5
 8010878:	08010921 	.word	0x08010921
 801087c:	08010913 	.word	0x08010913
 8010880:	08010913 	.word	0x08010913
 8010884:	08010913 	.word	0x08010913
 8010888:	08010913 	.word	0x08010913
 801088c:	08010913 	.word	0x08010913
 8010890:	08010913 	.word	0x08010913
 8010894:	08010913 	.word	0x08010913
 8010898:	08010913 	.word	0x08010913
 801089c:	080108cf 	.word	0x080108cf
 80108a0:	080108f9 	.word	0x080108f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	d107      	bne.n	80108c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80108b0:	f107 030a 	add.w	r3, r7, #10
 80108b4:	2202      	movs	r2, #2
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 fd67 	bl	801238c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108be:	e032      	b.n	8010926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80108c0:	6839      	ldr	r1, [r7, #0]
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f001 fce5 	bl	8012292 <USBD_CtlError>
            ret = USBD_FAIL;
 80108c8:	2303      	movs	r3, #3
 80108ca:	75fb      	strb	r3, [r7, #23]
          break;
 80108cc:	e02b      	b.n	8010926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d107      	bne.n	80108ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80108da:	f107 030d 	add.w	r3, r7, #13
 80108de:	2201      	movs	r2, #1
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f001 fd52 	bl	801238c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108e8:	e01d      	b.n	8010926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80108ea:	6839      	ldr	r1, [r7, #0]
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f001 fcd0 	bl	8012292 <USBD_CtlError>
            ret = USBD_FAIL;
 80108f2:	2303      	movs	r3, #3
 80108f4:	75fb      	strb	r3, [r7, #23]
          break;
 80108f6:	e016      	b.n	8010926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	2b03      	cmp	r3, #3
 8010902:	d00f      	beq.n	8010924 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f001 fcc3 	bl	8012292 <USBD_CtlError>
            ret = USBD_FAIL;
 801090c:	2303      	movs	r3, #3
 801090e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010910:	e008      	b.n	8010924 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f001 fcbc 	bl	8012292 <USBD_CtlError>
          ret = USBD_FAIL;
 801091a:	2303      	movs	r3, #3
 801091c:	75fb      	strb	r3, [r7, #23]
          break;
 801091e:	e002      	b.n	8010926 <USBD_CDC_Setup+0x19e>
          break;
 8010920:	bf00      	nop
 8010922:	e008      	b.n	8010936 <USBD_CDC_Setup+0x1ae>
          break;
 8010924:	bf00      	nop
      }
      break;
 8010926:	e006      	b.n	8010936 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f001 fcb1 	bl	8012292 <USBD_CtlError>
      ret = USBD_FAIL;
 8010930:	2303      	movs	r3, #3
 8010932:	75fb      	strb	r3, [r7, #23]
      break;
 8010934:	bf00      	nop
  }

  return (uint8_t)ret;
 8010936:	7dfb      	ldrb	r3, [r7, #23]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	32b0      	adds	r2, #176	@ 0xb0
 801095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010966:	2303      	movs	r3, #3
 8010968:	e065      	b.n	8010a36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	32b0      	adds	r2, #176	@ 0xb0
 8010974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010978:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801097a:	78fb      	ldrb	r3, [r7, #3]
 801097c:	f003 020f 	and.w	r2, r3, #15
 8010980:	6879      	ldr	r1, [r7, #4]
 8010982:	4613      	mov	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	440b      	add	r3, r1
 801098c:	3318      	adds	r3, #24
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d02f      	beq.n	80109f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010994:	78fb      	ldrb	r3, [r7, #3]
 8010996:	f003 020f 	and.w	r2, r3, #15
 801099a:	6879      	ldr	r1, [r7, #4]
 801099c:	4613      	mov	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	440b      	add	r3, r1
 80109a6:	3318      	adds	r3, #24
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	78fb      	ldrb	r3, [r7, #3]
 80109ac:	f003 010f 	and.w	r1, r3, #15
 80109b0:	68f8      	ldr	r0, [r7, #12]
 80109b2:	460b      	mov	r3, r1
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	440b      	add	r3, r1
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4403      	add	r3, r0
 80109bc:	331c      	adds	r3, #28
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80109c4:	fb01 f303 	mul.w	r3, r1, r3
 80109c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d112      	bne.n	80109f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	f003 020f 	and.w	r2, r3, #15
 80109d4:	6879      	ldr	r1, [r7, #4]
 80109d6:	4613      	mov	r3, r2
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4413      	add	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	440b      	add	r3, r1
 80109e0:	3318      	adds	r3, #24
 80109e2:	2200      	movs	r2, #0
 80109e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80109e6:	78f9      	ldrb	r1, [r7, #3]
 80109e8:	2300      	movs	r3, #0
 80109ea:	2200      	movs	r2, #0
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f002 f9d0 	bl	8012d92 <USBD_LL_Transmit>
 80109f2:	e01f      	b.n	8010a34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	33b0      	adds	r3, #176	@ 0xb0
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	4413      	add	r3, r2
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d010      	beq.n	8010a34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	33b0      	adds	r3, #176	@ 0xb0
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	4413      	add	r3, r2
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010a30:	78fa      	ldrb	r2, [r7, #3]
 8010a32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	460b      	mov	r3, r1
 8010a48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	32b0      	adds	r2, #176	@ 0xb0
 8010a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	32b0      	adds	r2, #176	@ 0xb0
 8010a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d101      	bne.n	8010a70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e01a      	b.n	8010aa6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010a70:	78fb      	ldrb	r3, [r7, #3]
 8010a72:	4619      	mov	r1, r3
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f002 f9ce 	bl	8012e16 <USBD_LL_GetRxDataSize>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	33b0      	adds	r3, #176	@ 0xb0
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	4413      	add	r3, r2
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010aa0:	4611      	mov	r1, r2
 8010aa2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	32b0      	adds	r2, #176	@ 0xb0
 8010ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010acc:	2303      	movs	r3, #3
 8010ace:	e024      	b.n	8010b1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	33b0      	adds	r3, #176	@ 0xb0
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	4413      	add	r3, r2
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d019      	beq.n	8010b18 <USBD_CDC_EP0_RxReady+0x6a>
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010aea:	2bff      	cmp	r3, #255	@ 0xff
 8010aec:	d014      	beq.n	8010b18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	33b0      	adds	r3, #176	@ 0xb0
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010b06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010b0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	22ff      	movs	r2, #255	@ 0xff
 8010b14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
	...

08010b24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010b2c:	2182      	movs	r1, #130	@ 0x82
 8010b2e:	4818      	ldr	r0, [pc, #96]	@ (8010b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b30:	f000 fd4f 	bl	80115d2 <USBD_GetEpDesc>
 8010b34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010b36:	2101      	movs	r1, #1
 8010b38:	4815      	ldr	r0, [pc, #84]	@ (8010b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b3a:	f000 fd4a 	bl	80115d2 <USBD_GetEpDesc>
 8010b3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010b40:	2181      	movs	r1, #129	@ 0x81
 8010b42:	4813      	ldr	r0, [pc, #76]	@ (8010b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b44:	f000 fd45 	bl	80115d2 <USBD_GetEpDesc>
 8010b48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	2210      	movs	r2, #16
 8010b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d006      	beq.n	8010b6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010b64:	711a      	strb	r2, [r3, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d006      	beq.n	8010b7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010b78:	711a      	strb	r2, [r3, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2243      	movs	r2, #67	@ 0x43
 8010b82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010b84:	4b02      	ldr	r3, [pc, #8]	@ (8010b90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3718      	adds	r7, #24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	24000054 	.word	0x24000054

08010b94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b086      	sub	sp, #24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010b9c:	2182      	movs	r1, #130	@ 0x82
 8010b9e:	4818      	ldr	r0, [pc, #96]	@ (8010c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ba0:	f000 fd17 	bl	80115d2 <USBD_GetEpDesc>
 8010ba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	4815      	ldr	r0, [pc, #84]	@ (8010c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010baa:	f000 fd12 	bl	80115d2 <USBD_GetEpDesc>
 8010bae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010bb0:	2181      	movs	r1, #129	@ 0x81
 8010bb2:	4813      	ldr	r0, [pc, #76]	@ (8010c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010bb4:	f000 fd0d 	bl	80115d2 <USBD_GetEpDesc>
 8010bb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2210      	movs	r2, #16
 8010bc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d006      	beq.n	8010bda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	711a      	strb	r2, [r3, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f042 0202 	orr.w	r2, r2, #2
 8010bd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d006      	beq.n	8010bee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	711a      	strb	r2, [r3, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f042 0202 	orr.w	r2, r2, #2
 8010bec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2243      	movs	r2, #67	@ 0x43
 8010bf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010bf4:	4b02      	ldr	r3, [pc, #8]	@ (8010c00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3718      	adds	r7, #24
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	24000054 	.word	0x24000054

08010c04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b086      	sub	sp, #24
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c0c:	2182      	movs	r1, #130	@ 0x82
 8010c0e:	4818      	ldr	r0, [pc, #96]	@ (8010c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c10:	f000 fcdf 	bl	80115d2 <USBD_GetEpDesc>
 8010c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c16:	2101      	movs	r1, #1
 8010c18:	4815      	ldr	r0, [pc, #84]	@ (8010c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c1a:	f000 fcda 	bl	80115d2 <USBD_GetEpDesc>
 8010c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c20:	2181      	movs	r1, #129	@ 0x81
 8010c22:	4813      	ldr	r0, [pc, #76]	@ (8010c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c24:	f000 fcd5 	bl	80115d2 <USBD_GetEpDesc>
 8010c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	2210      	movs	r2, #16
 8010c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d006      	beq.n	8010c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c44:	711a      	strb	r2, [r3, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d006      	beq.n	8010c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c58:	711a      	strb	r2, [r3, #4]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2243      	movs	r2, #67	@ 0x43
 8010c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010c64:	4b02      	ldr	r3, [pc, #8]	@ (8010c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3718      	adds	r7, #24
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	24000054 	.word	0x24000054

08010c74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	220a      	movs	r2, #10
 8010c80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010c82:	4b03      	ldr	r3, [pc, #12]	@ (8010c90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	24000010 	.word	0x24000010

08010c94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010ca4:	2303      	movs	r3, #3
 8010ca6:	e009      	b.n	8010cbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	33b0      	adds	r3, #176	@ 0xb0
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4413      	add	r3, r2
 8010cb6:	683a      	ldr	r2, [r7, #0]
 8010cb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	32b0      	adds	r2, #176	@ 0xb0
 8010cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010cea:	2303      	movs	r3, #3
 8010cec:	e008      	b.n	8010d00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	68ba      	ldr	r2, [r7, #8]
 8010cf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	371c      	adds	r7, #28
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	32b0      	adds	r2, #176	@ 0xb0
 8010d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d101      	bne.n	8010d30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010d2c:	2303      	movs	r3, #3
 8010d2e:	e004      	b.n	8010d3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3714      	adds	r7, #20
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
	...

08010d48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	32b0      	adds	r2, #176	@ 0xb0
 8010d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010d60:	2301      	movs	r3, #1
 8010d62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	e025      	b.n	8010dba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11f      	bne.n	8010db8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010d80:	4b10      	ldr	r3, [pc, #64]	@ (8010dc4 <USBD_CDC_TransmitPacket+0x7c>)
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	f003 020f 	and.w	r2, r3, #15
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	4613      	mov	r3, r2
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	4413      	add	r3, r2
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4403      	add	r3, r0
 8010d9a:	3318      	adds	r3, #24
 8010d9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010d9e:	4b09      	ldr	r3, [pc, #36]	@ (8010dc4 <USBD_CDC_TransmitPacket+0x7c>)
 8010da0:	7819      	ldrb	r1, [r3, #0]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f001 ffef 	bl	8012d92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	24000097 	.word	0x24000097

08010dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	32b0      	adds	r2, #176	@ 0xb0
 8010dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	32b0      	adds	r2, #176	@ 0xb0
 8010dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010df2:	2303      	movs	r3, #3
 8010df4:	e018      	b.n	8010e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	7c1b      	ldrb	r3, [r3, #16]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10a      	bne.n	8010e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8010e30 <USBD_CDC_ReceivePacket+0x68>)
 8010e00:	7819      	ldrb	r1, [r3, #0]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f001 ffe1 	bl	8012dd4 <USBD_LL_PrepareReceive>
 8010e12:	e008      	b.n	8010e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010e14:	4b06      	ldr	r3, [pc, #24]	@ (8010e30 <USBD_CDC_ReceivePacket+0x68>)
 8010e16:	7819      	ldrb	r1, [r3, #0]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e1e:	2340      	movs	r3, #64	@ 0x40
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f001 ffd7 	bl	8012dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	24000098 	.word	0x24000098

08010e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d101      	bne.n	8010e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010e48:	2303      	movs	r3, #3
 8010e4a:	e01f      	b.n	8010e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	68ba      	ldr	r2, [r7, #8]
 8010e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2201      	movs	r2, #1
 8010e76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	79fa      	ldrb	r2, [r7, #7]
 8010e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f001 fe4b 	bl	8012b1c <USBD_LL_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3718      	adds	r7, #24
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d101      	bne.n	8010eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	e025      	b.n	8010ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	32ae      	adds	r2, #174	@ 0xae
 8010ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00f      	beq.n	8010ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	32ae      	adds	r2, #174	@ 0xae
 8010ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed8:	f107 020e 	add.w	r2, r7, #14
 8010edc:	4610      	mov	r0, r2
 8010ede:	4798      	blx	r3
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f001 fe59 	bl	8012bc0 <USBD_LL_Start>
 8010f0e:	4603      	mov	r3, r0
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b084      	sub	sp, #16
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	460b      	mov	r3, r1
 8010f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d009      	beq.n	8010f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	78fa      	ldrb	r2, [r7, #3]
 8010f52:	4611      	mov	r1, r2
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	4798      	blx	r3
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	460b      	mov	r3, r1
 8010f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	78fa      	ldrb	r2, [r7, #3]
 8010f80:	4611      	mov	r1, r2
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	4798      	blx	r3
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
 8010fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f001 f936 	bl	801221e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010fce:	f003 031f 	and.w	r3, r3, #31
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	d01a      	beq.n	801100c <USBD_LL_SetupStage+0x72>
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d822      	bhi.n	8011020 <USBD_LL_SetupStage+0x86>
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d002      	beq.n	8010fe4 <USBD_LL_SetupStage+0x4a>
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d00a      	beq.n	8010ff8 <USBD_LL_SetupStage+0x5e>
 8010fe2:	e01d      	b.n	8011020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fb63 	bl	80116b8 <USBD_StdDevReq>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8010ff6:	e020      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ffe:	4619      	mov	r1, r3
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 fbcb 	bl	801179c <USBD_StdItfReq>
 8011006:	4603      	mov	r3, r0
 8011008:	73fb      	strb	r3, [r7, #15]
      break;
 801100a:	e016      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fc2d 	bl	8011874 <USBD_StdEPReq>
 801101a:	4603      	mov	r3, r0
 801101c:	73fb      	strb	r3, [r7, #15]
      break;
 801101e:	e00c      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011026:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801102a:	b2db      	uxtb	r3, r3
 801102c:	4619      	mov	r1, r3
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f001 fe26 	bl	8012c80 <USBD_LL_StallEP>
 8011034:	4603      	mov	r3, r0
 8011036:	73fb      	strb	r3, [r7, #15]
      break;
 8011038:	bf00      	nop
  }

  return ret;
 801103a:	7bfb      	ldrb	r3, [r7, #15]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3710      	adds	r7, #16
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	460b      	mov	r3, r1
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011052:	2300      	movs	r3, #0
 8011054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011056:	7afb      	ldrb	r3, [r7, #11]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d16e      	bne.n	801113a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801106a:	2b03      	cmp	r3, #3
 801106c:	f040 8098 	bne.w	80111a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	689a      	ldr	r2, [r3, #8]
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	429a      	cmp	r2, r3
 801107a:	d913      	bls.n	80110a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	689a      	ldr	r2, [r3, #8]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	1ad2      	subs	r2, r2, r3
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4293      	cmp	r3, r2
 8011094:	bf28      	it	cs
 8011096:	4613      	movcs	r3, r2
 8011098:	461a      	mov	r2, r3
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f001 f9be 	bl	801241e <USBD_CtlContinueRx>
 80110a2:	e07d      	b.n	80111a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80110aa:	f003 031f 	and.w	r3, r3, #31
 80110ae:	2b02      	cmp	r3, #2
 80110b0:	d014      	beq.n	80110dc <USBD_LL_DataOutStage+0x98>
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d81d      	bhi.n	80110f2 <USBD_LL_DataOutStage+0xae>
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <USBD_LL_DataOutStage+0x7c>
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d003      	beq.n	80110c6 <USBD_LL_DataOutStage+0x82>
 80110be:	e018      	b.n	80110f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80110c0:	2300      	movs	r3, #0
 80110c2:	75bb      	strb	r3, [r7, #22]
            break;
 80110c4:	e018      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	4619      	mov	r1, r3
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f000 fa64 	bl	801159e <USBD_CoreFindIF>
 80110d6:	4603      	mov	r3, r0
 80110d8:	75bb      	strb	r3, [r7, #22]
            break;
 80110da:	e00d      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	4619      	mov	r1, r3
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 fa66 	bl	80115b8 <USBD_CoreFindEP>
 80110ec:	4603      	mov	r3, r0
 80110ee:	75bb      	strb	r3, [r7, #22]
            break;
 80110f0:	e002      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80110f2:	2300      	movs	r3, #0
 80110f4:	75bb      	strb	r3, [r7, #22]
            break;
 80110f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80110f8:	7dbb      	ldrb	r3, [r7, #22]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d119      	bne.n	8011132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b03      	cmp	r3, #3
 8011108:	d113      	bne.n	8011132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801110a:	7dba      	ldrb	r2, [r7, #22]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	32ae      	adds	r2, #174	@ 0xae
 8011110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00b      	beq.n	8011132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801111a:	7dba      	ldrb	r2, [r7, #22]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011122:	7dba      	ldrb	r2, [r7, #22]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	32ae      	adds	r2, #174	@ 0xae
 8011128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f001 f984 	bl	8012440 <USBD_CtlSendStatus>
 8011138:	e032      	b.n	80111a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801113a:	7afb      	ldrb	r3, [r7, #11]
 801113c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011140:	b2db      	uxtb	r3, r3
 8011142:	4619      	mov	r1, r3
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 fa37 	bl	80115b8 <USBD_CoreFindEP>
 801114a:	4603      	mov	r3, r0
 801114c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801114e:	7dbb      	ldrb	r3, [r7, #22]
 8011150:	2bff      	cmp	r3, #255	@ 0xff
 8011152:	d025      	beq.n	80111a0 <USBD_LL_DataOutStage+0x15c>
 8011154:	7dbb      	ldrb	r3, [r7, #22]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d122      	bne.n	80111a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011160:	b2db      	uxtb	r3, r3
 8011162:	2b03      	cmp	r3, #3
 8011164:	d117      	bne.n	8011196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011166:	7dba      	ldrb	r2, [r7, #22]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	32ae      	adds	r2, #174	@ 0xae
 801116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011170:	699b      	ldr	r3, [r3, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00f      	beq.n	8011196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011176:	7dba      	ldrb	r2, [r7, #22]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801117e:	7dba      	ldrb	r2, [r7, #22]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	32ae      	adds	r2, #174	@ 0xae
 8011184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	7afa      	ldrb	r2, [r7, #11]
 801118c:	4611      	mov	r1, r2
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	4798      	blx	r3
 8011192:	4603      	mov	r3, r0
 8011194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
 801119e:	e000      	b.n	80111a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3718      	adds	r7, #24
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b086      	sub	sp, #24
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	60f8      	str	r0, [r7, #12]
 80111b2:	460b      	mov	r3, r1
 80111b4:	607a      	str	r2, [r7, #4]
 80111b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80111b8:	7afb      	ldrb	r3, [r7, #11]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d16f      	bne.n	801129e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	3314      	adds	r3, #20
 80111c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d15a      	bne.n	8011284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	689a      	ldr	r2, [r3, #8]
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d914      	bls.n	8011204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	689a      	ldr	r2, [r3, #8]
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	1ad2      	subs	r2, r2, r3
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	461a      	mov	r2, r3
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f001 f8e6 	bl	80123c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111f6:	2300      	movs	r3, #0
 80111f8:	2200      	movs	r2, #0
 80111fa:	2100      	movs	r1, #0
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f001 fde9 	bl	8012dd4 <USBD_LL_PrepareReceive>
 8011202:	e03f      	b.n	8011284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	429a      	cmp	r2, r3
 801120e:	d11c      	bne.n	801124a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011218:	429a      	cmp	r2, r3
 801121a:	d316      	bcc.n	801124a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011226:	429a      	cmp	r2, r3
 8011228:	d20f      	bcs.n	801124a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801122a:	2200      	movs	r2, #0
 801122c:	2100      	movs	r1, #0
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f001 f8c7 	bl	80123c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2200      	movs	r2, #0
 8011238:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801123c:	2300      	movs	r3, #0
 801123e:	2200      	movs	r2, #0
 8011240:	2100      	movs	r1, #0
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f001 fdc6 	bl	8012dd4 <USBD_LL_PrepareReceive>
 8011248:	e01c      	b.n	8011284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b03      	cmp	r3, #3
 8011254:	d10f      	bne.n	8011276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d009      	beq.n	8011276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2200      	movs	r2, #0
 8011266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011276:	2180      	movs	r1, #128	@ 0x80
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f001 fd01 	bl	8012c80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f001 f8f1 	bl	8012466 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d03a      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7ff fe42 	bl	8010f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2200      	movs	r2, #0
 8011298:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801129c:	e032      	b.n	8011304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801129e:	7afb      	ldrb	r3, [r7, #11]
 80112a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	4619      	mov	r1, r3
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	f000 f985 	bl	80115b8 <USBD_CoreFindEP>
 80112ae:	4603      	mov	r3, r0
 80112b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112b2:	7dfb      	ldrb	r3, [r7, #23]
 80112b4:	2bff      	cmp	r3, #255	@ 0xff
 80112b6:	d025      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d122      	bne.n	8011304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d11c      	bne.n	8011304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80112ca:	7dfa      	ldrb	r2, [r7, #23]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	32ae      	adds	r2, #174	@ 0xae
 80112d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d014      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80112da:	7dfa      	ldrb	r2, [r7, #23]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80112e2:	7dfa      	ldrb	r2, [r7, #23]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	32ae      	adds	r2, #174	@ 0xae
 80112e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	7afa      	ldrb	r2, [r7, #11]
 80112f0:	4611      	mov	r1, r2
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	4798      	blx	r3
 80112f6:	4603      	mov	r3, r0
 80112f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80112fa:	7dbb      	ldrb	r3, [r7, #22]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d001      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011300:	7dbb      	ldrb	r3, [r7, #22]
 8011302:	e000      	b.n	8011306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2201      	movs	r2, #1
 801131e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011346:	2b00      	cmp	r3, #0
 8011348:	d014      	beq.n	8011374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00e      	beq.n	8011374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	6852      	ldr	r2, [r2, #4]
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4611      	mov	r1, r2
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	4798      	blx	r3
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d001      	beq.n	8011374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011370:	2303      	movs	r3, #3
 8011372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011374:	2340      	movs	r3, #64	@ 0x40
 8011376:	2200      	movs	r2, #0
 8011378:	2100      	movs	r1, #0
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f001 fc3b 	bl	8012bf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2240      	movs	r2, #64	@ 0x40
 801138c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011390:	2340      	movs	r3, #64	@ 0x40
 8011392:	2200      	movs	r2, #0
 8011394:	2180      	movs	r1, #128	@ 0x80
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f001 fc2d 	bl	8012bf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2240      	movs	r2, #64	@ 0x40
 80113a6:	621a      	str	r2, [r3, #32]

  return ret;
 80113a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80113b2:	b480      	push	{r7}
 80113b4:	b083      	sub	sp, #12
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	460b      	mov	r3, r1
 80113bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	78fa      	ldrb	r2, [r7, #3]
 80113c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	370c      	adds	r7, #12
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr

080113d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b04      	cmp	r3, #4
 80113e4:	d006      	beq.n	80113f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2204      	movs	r2, #4
 80113f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80113fc:	2300      	movs	r3, #0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr

0801140a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801140a:	b480      	push	{r7}
 801140c:	b083      	sub	sp, #12
 801140e:	af00      	add	r7, sp, #0
 8011410:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b04      	cmp	r3, #4
 801141c:	d106      	bne.n	801142c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011424:	b2da      	uxtb	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	370c      	adds	r7, #12
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr

0801143a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801143a:	b580      	push	{r7, lr}
 801143c:	b082      	sub	sp, #8
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011448:	b2db      	uxtb	r3, r3
 801144a:	2b03      	cmp	r3, #3
 801144c:	d110      	bne.n	8011470 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00b      	beq.n	8011470 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d005      	beq.n	8011470 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801146a:	69db      	ldr	r3, [r3, #28]
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	460b      	mov	r3, r1
 8011484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	32ae      	adds	r2, #174	@ 0xae
 8011490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d101      	bne.n	801149c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011498:	2303      	movs	r3, #3
 801149a:	e01c      	b.n	80114d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d115      	bne.n	80114d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	32ae      	adds	r2, #174	@ 0xae
 80114b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114b6:	6a1b      	ldr	r3, [r3, #32]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00b      	beq.n	80114d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	32ae      	adds	r2, #174	@ 0xae
 80114c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ca:	6a1b      	ldr	r3, [r3, #32]
 80114cc:	78fa      	ldrb	r2, [r7, #3]
 80114ce:	4611      	mov	r1, r2
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3708      	adds	r7, #8
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b082      	sub	sp, #8
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	460b      	mov	r3, r1
 80114e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	32ae      	adds	r2, #174	@ 0xae
 80114f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80114fc:	2303      	movs	r3, #3
 80114fe:	e01c      	b.n	801153a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011506:	b2db      	uxtb	r3, r3
 8011508:	2b03      	cmp	r3, #3
 801150a:	d115      	bne.n	8011538 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	32ae      	adds	r2, #174	@ 0xae
 8011516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00b      	beq.n	8011538 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	32ae      	adds	r2, #174	@ 0xae
 801152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011530:	78fa      	ldrb	r2, [r7, #3]
 8011532:	4611      	mov	r1, r2
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011538:	2300      	movs	r3, #0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}

08011542 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011542:	b480      	push	{r7}
 8011544:	b083      	sub	sp, #12
 8011546:	af00      	add	r7, sp, #0
 8011548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801154a:	2300      	movs	r3, #0
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2201      	movs	r2, #1
 8011568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00e      	beq.n	8011594 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	6852      	ldr	r2, [r2, #4]
 8011582:	b2d2      	uxtb	r2, r2
 8011584:	4611      	mov	r1, r2
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	4798      	blx	r3
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d001      	beq.n	8011594 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011590:	2303      	movs	r3, #3
 8011592:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011594:	7bfb      	ldrb	r3, [r7, #15]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3710      	adds	r7, #16
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801159e:	b480      	push	{r7}
 80115a0:	b083      	sub	sp, #12
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
 80115a6:	460b      	mov	r3, r1
 80115a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80115aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	460b      	mov	r3, r1
 80115c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80115c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	370c      	adds	r7, #12
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr

080115d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b086      	sub	sp, #24
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	460b      	mov	r3, r1
 80115dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	885b      	ldrh	r3, [r3, #2]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	7812      	ldrb	r2, [r2, #0]
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d91f      	bls.n	8011638 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80115fe:	e013      	b.n	8011628 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011600:	f107 030a 	add.w	r3, r7, #10
 8011604:	4619      	mov	r1, r3
 8011606:	6978      	ldr	r0, [r7, #20]
 8011608:	f000 f81b 	bl	8011642 <USBD_GetNextDesc>
 801160c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	785b      	ldrb	r3, [r3, #1]
 8011612:	2b05      	cmp	r3, #5
 8011614:	d108      	bne.n	8011628 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	789b      	ldrb	r3, [r3, #2]
 801161e:	78fa      	ldrb	r2, [r7, #3]
 8011620:	429a      	cmp	r2, r3
 8011622:	d008      	beq.n	8011636 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011624:	2300      	movs	r3, #0
 8011626:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	885b      	ldrh	r3, [r3, #2]
 801162c:	b29a      	uxth	r2, r3
 801162e:	897b      	ldrh	r3, [r7, #10]
 8011630:	429a      	cmp	r2, r3
 8011632:	d8e5      	bhi.n	8011600 <USBD_GetEpDesc+0x2e>
 8011634:	e000      	b.n	8011638 <USBD_GetEpDesc+0x66>
          break;
 8011636:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011638:	693b      	ldr	r3, [r7, #16]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3718      	adds	r7, #24
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011642:	b480      	push	{r7}
 8011644:	b085      	sub	sp, #20
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	881b      	ldrh	r3, [r3, #0]
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	7812      	ldrb	r2, [r2, #0]
 8011658:	4413      	add	r3, r2
 801165a:	b29a      	uxth	r2, r3
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	461a      	mov	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4413      	add	r3, r2
 801166a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801166c:	68fb      	ldr	r3, [r7, #12]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3714      	adds	r7, #20
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr

0801167a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801167a:	b480      	push	{r7}
 801167c:	b087      	sub	sp, #28
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	3301      	adds	r3, #1
 8011690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011698:	8a3b      	ldrh	r3, [r7, #16]
 801169a:	021b      	lsls	r3, r3, #8
 801169c:	b21a      	sxth	r2, r3
 801169e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80116a8:	89fb      	ldrh	r3, [r7, #14]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	371c      	adds	r7, #28
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
	...

080116b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116c2:	2300      	movs	r3, #0
 80116c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80116ce:	2b40      	cmp	r3, #64	@ 0x40
 80116d0:	d005      	beq.n	80116de <USBD_StdDevReq+0x26>
 80116d2:	2b40      	cmp	r3, #64	@ 0x40
 80116d4:	d857      	bhi.n	8011786 <USBD_StdDevReq+0xce>
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d00f      	beq.n	80116fa <USBD_StdDevReq+0x42>
 80116da:	2b20      	cmp	r3, #32
 80116dc:	d153      	bne.n	8011786 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	32ae      	adds	r2, #174	@ 0xae
 80116e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	6839      	ldr	r1, [r7, #0]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	4798      	blx	r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
      break;
 80116f8:	e04a      	b.n	8011790 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	785b      	ldrb	r3, [r3, #1]
 80116fe:	2b09      	cmp	r3, #9
 8011700:	d83b      	bhi.n	801177a <USBD_StdDevReq+0xc2>
 8011702:	a201      	add	r2, pc, #4	@ (adr r2, 8011708 <USBD_StdDevReq+0x50>)
 8011704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011708:	0801175d 	.word	0x0801175d
 801170c:	08011771 	.word	0x08011771
 8011710:	0801177b 	.word	0x0801177b
 8011714:	08011767 	.word	0x08011767
 8011718:	0801177b 	.word	0x0801177b
 801171c:	0801173b 	.word	0x0801173b
 8011720:	08011731 	.word	0x08011731
 8011724:	0801177b 	.word	0x0801177b
 8011728:	08011753 	.word	0x08011753
 801172c:	08011745 	.word	0x08011745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011730:	6839      	ldr	r1, [r7, #0]
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fa3c 	bl	8011bb0 <USBD_GetDescriptor>
          break;
 8011738:	e024      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 fbcb 	bl	8011ed8 <USBD_SetAddress>
          break;
 8011742:	e01f      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011744:	6839      	ldr	r1, [r7, #0]
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 fc0a 	bl	8011f60 <USBD_SetConfig>
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
          break;
 8011750:	e018      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011752:	6839      	ldr	r1, [r7, #0]
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fcad 	bl	80120b4 <USBD_GetConfig>
          break;
 801175a:	e013      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801175c:	6839      	ldr	r1, [r7, #0]
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f000 fcde 	bl	8012120 <USBD_GetStatus>
          break;
 8011764:	e00e      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011766:	6839      	ldr	r1, [r7, #0]
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 fd0d 	bl	8012188 <USBD_SetFeature>
          break;
 801176e:	e009      	b.n	8011784 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 fd31 	bl	80121da <USBD_ClrFeature>
          break;
 8011778:	e004      	b.n	8011784 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fd88 	bl	8012292 <USBD_CtlError>
          break;
 8011782:	bf00      	nop
      }
      break;
 8011784:	e004      	b.n	8011790 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 fd82 	bl	8012292 <USBD_CtlError>
      break;
 801178e:	bf00      	nop
  }

  return ret;
 8011790:	7bfb      	ldrb	r3, [r7, #15]
}
 8011792:	4618      	mov	r0, r3
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop

0801179c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80117a6:	2300      	movs	r3, #0
 80117a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80117b2:	2b40      	cmp	r3, #64	@ 0x40
 80117b4:	d005      	beq.n	80117c2 <USBD_StdItfReq+0x26>
 80117b6:	2b40      	cmp	r3, #64	@ 0x40
 80117b8:	d852      	bhi.n	8011860 <USBD_StdItfReq+0xc4>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <USBD_StdItfReq+0x26>
 80117be:	2b20      	cmp	r3, #32
 80117c0:	d14e      	bne.n	8011860 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	3b01      	subs	r3, #1
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d840      	bhi.n	8011852 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	889b      	ldrh	r3, [r3, #4]
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d836      	bhi.n	8011848 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	889b      	ldrh	r3, [r3, #4]
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	4619      	mov	r1, r3
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7ff fedb 	bl	801159e <USBD_CoreFindIF>
 80117e8:	4603      	mov	r3, r0
 80117ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117ec:	7bbb      	ldrb	r3, [r7, #14]
 80117ee:	2bff      	cmp	r3, #255	@ 0xff
 80117f0:	d01d      	beq.n	801182e <USBD_StdItfReq+0x92>
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d11a      	bne.n	801182e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80117f8:	7bba      	ldrb	r2, [r7, #14]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	32ae      	adds	r2, #174	@ 0xae
 80117fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00f      	beq.n	8011828 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011808:	7bba      	ldrb	r2, [r7, #14]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011810:	7bba      	ldrb	r2, [r7, #14]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	32ae      	adds	r2, #174	@ 0xae
 8011816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	4798      	blx	r3
 8011822:	4603      	mov	r3, r0
 8011824:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011826:	e004      	b.n	8011832 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011828:	2303      	movs	r3, #3
 801182a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801182c:	e001      	b.n	8011832 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801182e:	2303      	movs	r3, #3
 8011830:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	88db      	ldrh	r3, [r3, #6]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d110      	bne.n	801185c <USBD_StdItfReq+0xc0>
 801183a:	7bfb      	ldrb	r3, [r7, #15]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d10d      	bne.n	801185c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fdfd 	bl	8012440 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011846:	e009      	b.n	801185c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 fd21 	bl	8012292 <USBD_CtlError>
          break;
 8011850:	e004      	b.n	801185c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f000 fd1c 	bl	8012292 <USBD_CtlError>
          break;
 801185a:	e000      	b.n	801185e <USBD_StdItfReq+0xc2>
          break;
 801185c:	bf00      	nop
      }
      break;
 801185e:	e004      	b.n	801186a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011860:	6839      	ldr	r1, [r7, #0]
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 fd15 	bl	8012292 <USBD_CtlError>
      break;
 8011868:	bf00      	nop
  }

  return ret;
 801186a:	7bfb      	ldrb	r3, [r7, #15]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	889b      	ldrh	r3, [r3, #4]
 8011886:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011890:	2b40      	cmp	r3, #64	@ 0x40
 8011892:	d007      	beq.n	80118a4 <USBD_StdEPReq+0x30>
 8011894:	2b40      	cmp	r3, #64	@ 0x40
 8011896:	f200 817f 	bhi.w	8011b98 <USBD_StdEPReq+0x324>
 801189a:	2b00      	cmp	r3, #0
 801189c:	d02a      	beq.n	80118f4 <USBD_StdEPReq+0x80>
 801189e:	2b20      	cmp	r3, #32
 80118a0:	f040 817a 	bne.w	8011b98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80118a4:	7bbb      	ldrb	r3, [r7, #14]
 80118a6:	4619      	mov	r1, r3
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7ff fe85 	bl	80115b8 <USBD_CoreFindEP>
 80118ae:	4603      	mov	r3, r0
 80118b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118b2:	7b7b      	ldrb	r3, [r7, #13]
 80118b4:	2bff      	cmp	r3, #255	@ 0xff
 80118b6:	f000 8174 	beq.w	8011ba2 <USBD_StdEPReq+0x32e>
 80118ba:	7b7b      	ldrb	r3, [r7, #13]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f040 8170 	bne.w	8011ba2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80118c2:	7b7a      	ldrb	r2, [r7, #13]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80118ca:	7b7a      	ldrb	r2, [r7, #13]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	32ae      	adds	r2, #174	@ 0xae
 80118d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f000 8163 	beq.w	8011ba2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80118dc:	7b7a      	ldrb	r2, [r7, #13]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	32ae      	adds	r2, #174	@ 0xae
 80118e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118e6:	689b      	ldr	r3, [r3, #8]
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	4798      	blx	r3
 80118ee:	4603      	mov	r3, r0
 80118f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80118f2:	e156      	b.n	8011ba2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	785b      	ldrb	r3, [r3, #1]
 80118f8:	2b03      	cmp	r3, #3
 80118fa:	d008      	beq.n	801190e <USBD_StdEPReq+0x9a>
 80118fc:	2b03      	cmp	r3, #3
 80118fe:	f300 8145 	bgt.w	8011b8c <USBD_StdEPReq+0x318>
 8011902:	2b00      	cmp	r3, #0
 8011904:	f000 809b 	beq.w	8011a3e <USBD_StdEPReq+0x1ca>
 8011908:	2b01      	cmp	r3, #1
 801190a:	d03c      	beq.n	8011986 <USBD_StdEPReq+0x112>
 801190c:	e13e      	b.n	8011b8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b02      	cmp	r3, #2
 8011918:	d002      	beq.n	8011920 <USBD_StdEPReq+0xac>
 801191a:	2b03      	cmp	r3, #3
 801191c:	d016      	beq.n	801194c <USBD_StdEPReq+0xd8>
 801191e:	e02c      	b.n	801197a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011920:	7bbb      	ldrb	r3, [r7, #14]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00d      	beq.n	8011942 <USBD_StdEPReq+0xce>
 8011926:	7bbb      	ldrb	r3, [r7, #14]
 8011928:	2b80      	cmp	r3, #128	@ 0x80
 801192a:	d00a      	beq.n	8011942 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801192c:	7bbb      	ldrb	r3, [r7, #14]
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f001 f9a5 	bl	8012c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011936:	2180      	movs	r1, #128	@ 0x80
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f001 f9a1 	bl	8012c80 <USBD_LL_StallEP>
 801193e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011940:	e020      	b.n	8011984 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 fca4 	bl	8012292 <USBD_CtlError>
              break;
 801194a:	e01b      	b.n	8011984 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	885b      	ldrh	r3, [r3, #2]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d10e      	bne.n	8011972 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011954:	7bbb      	ldrb	r3, [r7, #14]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00b      	beq.n	8011972 <USBD_StdEPReq+0xfe>
 801195a:	7bbb      	ldrb	r3, [r7, #14]
 801195c:	2b80      	cmp	r3, #128	@ 0x80
 801195e:	d008      	beq.n	8011972 <USBD_StdEPReq+0xfe>
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	88db      	ldrh	r3, [r3, #6]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d104      	bne.n	8011972 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011968:	7bbb      	ldrb	r3, [r7, #14]
 801196a:	4619      	mov	r1, r3
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f001 f987 	bl	8012c80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 fd64 	bl	8012440 <USBD_CtlSendStatus>

              break;
 8011978:	e004      	b.n	8011984 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 fc88 	bl	8012292 <USBD_CtlError>
              break;
 8011982:	bf00      	nop
          }
          break;
 8011984:	e107      	b.n	8011b96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801198c:	b2db      	uxtb	r3, r3
 801198e:	2b02      	cmp	r3, #2
 8011990:	d002      	beq.n	8011998 <USBD_StdEPReq+0x124>
 8011992:	2b03      	cmp	r3, #3
 8011994:	d016      	beq.n	80119c4 <USBD_StdEPReq+0x150>
 8011996:	e04b      	b.n	8011a30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011998:	7bbb      	ldrb	r3, [r7, #14]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00d      	beq.n	80119ba <USBD_StdEPReq+0x146>
 801199e:	7bbb      	ldrb	r3, [r7, #14]
 80119a0:	2b80      	cmp	r3, #128	@ 0x80
 80119a2:	d00a      	beq.n	80119ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80119a4:	7bbb      	ldrb	r3, [r7, #14]
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f001 f969 	bl	8012c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80119ae:	2180      	movs	r1, #128	@ 0x80
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f001 f965 	bl	8012c80 <USBD_LL_StallEP>
 80119b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80119b8:	e040      	b.n	8011a3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 fc68 	bl	8012292 <USBD_CtlError>
              break;
 80119c2:	e03b      	b.n	8011a3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	885b      	ldrh	r3, [r3, #2]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d136      	bne.n	8011a3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80119cc:	7bbb      	ldrb	r3, [r7, #14]
 80119ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d004      	beq.n	80119e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80119d6:	7bbb      	ldrb	r3, [r7, #14]
 80119d8:	4619      	mov	r1, r3
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f001 f96f 	bl	8012cbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fd2d 	bl	8012440 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80119e6:	7bbb      	ldrb	r3, [r7, #14]
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff fde4 	bl	80115b8 <USBD_CoreFindEP>
 80119f0:	4603      	mov	r3, r0
 80119f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119f4:	7b7b      	ldrb	r3, [r7, #13]
 80119f6:	2bff      	cmp	r3, #255	@ 0xff
 80119f8:	d01f      	beq.n	8011a3a <USBD_StdEPReq+0x1c6>
 80119fa:	7b7b      	ldrb	r3, [r7, #13]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d11c      	bne.n	8011a3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011a00:	7b7a      	ldrb	r2, [r7, #13]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011a08:	7b7a      	ldrb	r2, [r7, #13]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	32ae      	adds	r2, #174	@ 0xae
 8011a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d010      	beq.n	8011a3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011a18:	7b7a      	ldrb	r2, [r7, #13]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	32ae      	adds	r2, #174	@ 0xae
 8011a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	6839      	ldr	r1, [r7, #0]
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	4798      	blx	r3
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011a2e:	e004      	b.n	8011a3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 fc2d 	bl	8012292 <USBD_CtlError>
              break;
 8011a38:	e000      	b.n	8011a3c <USBD_StdEPReq+0x1c8>
              break;
 8011a3a:	bf00      	nop
          }
          break;
 8011a3c:	e0ab      	b.n	8011b96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d002      	beq.n	8011a50 <USBD_StdEPReq+0x1dc>
 8011a4a:	2b03      	cmp	r3, #3
 8011a4c:	d032      	beq.n	8011ab4 <USBD_StdEPReq+0x240>
 8011a4e:	e097      	b.n	8011b80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a50:	7bbb      	ldrb	r3, [r7, #14]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d007      	beq.n	8011a66 <USBD_StdEPReq+0x1f2>
 8011a56:	7bbb      	ldrb	r3, [r7, #14]
 8011a58:	2b80      	cmp	r3, #128	@ 0x80
 8011a5a:	d004      	beq.n	8011a66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011a5c:	6839      	ldr	r1, [r7, #0]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 fc17 	bl	8012292 <USBD_CtlError>
                break;
 8011a64:	e091      	b.n	8011b8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	da0b      	bge.n	8011a86 <USBD_StdEPReq+0x212>
 8011a6e:	7bbb      	ldrb	r3, [r7, #14]
 8011a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011a74:	4613      	mov	r3, r2
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	4413      	add	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	3310      	adds	r3, #16
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	4413      	add	r3, r2
 8011a82:	3304      	adds	r3, #4
 8011a84:	e00b      	b.n	8011a9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a86:	7bbb      	ldrb	r3, [r7, #14]
 8011a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011a98:	687a      	ldr	r2, [r7, #4]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	4619      	mov	r1, r3
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 fc6d 	bl	801238c <USBD_CtlSendData>
              break;
 8011ab2:	e06a      	b.n	8011b8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	da11      	bge.n	8011ae0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011abc:	7bbb      	ldrb	r3, [r7, #14]
 8011abe:	f003 020f 	and.w	r2, r3, #15
 8011ac2:	6879      	ldr	r1, [r7, #4]
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	4413      	add	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	440b      	add	r3, r1
 8011ace:	3324      	adds	r3, #36	@ 0x24
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d117      	bne.n	8011b06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011ad6:	6839      	ldr	r1, [r7, #0]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f000 fbda 	bl	8012292 <USBD_CtlError>
                  break;
 8011ade:	e054      	b.n	8011b8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ae0:	7bbb      	ldrb	r3, [r7, #14]
 8011ae2:	f003 020f 	and.w	r2, r3, #15
 8011ae6:	6879      	ldr	r1, [r7, #4]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	440b      	add	r3, r1
 8011af2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d104      	bne.n	8011b06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011afc:	6839      	ldr	r1, [r7, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fbc7 	bl	8012292 <USBD_CtlError>
                  break;
 8011b04:	e041      	b.n	8011b8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	da0b      	bge.n	8011b26 <USBD_StdEPReq+0x2b2>
 8011b0e:	7bbb      	ldrb	r3, [r7, #14]
 8011b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b14:	4613      	mov	r3, r2
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	4413      	add	r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	3310      	adds	r3, #16
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	4413      	add	r3, r2
 8011b22:	3304      	adds	r3, #4
 8011b24:	e00b      	b.n	8011b3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b26:	7bbb      	ldrb	r3, [r7, #14]
 8011b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b2c:	4613      	mov	r3, r2
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	4413      	add	r3, r2
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	3304      	adds	r3, #4
 8011b3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011b40:	7bbb      	ldrb	r3, [r7, #14]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d002      	beq.n	8011b4c <USBD_StdEPReq+0x2d8>
 8011b46:	7bbb      	ldrb	r3, [r7, #14]
 8011b48:	2b80      	cmp	r3, #128	@ 0x80
 8011b4a:	d103      	bne.n	8011b54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	e00e      	b.n	8011b72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b54:	7bbb      	ldrb	r3, [r7, #14]
 8011b56:	4619      	mov	r1, r3
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f001 f8cf 	bl	8012cfc <USBD_LL_IsStallEP>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d003      	beq.n	8011b6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2201      	movs	r2, #1
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	e002      	b.n	8011b72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2202      	movs	r2, #2
 8011b76:	4619      	mov	r1, r3
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 fc07 	bl	801238c <USBD_CtlSendData>
              break;
 8011b7e:	e004      	b.n	8011b8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fb85 	bl	8012292 <USBD_CtlError>
              break;
 8011b88:	bf00      	nop
          }
          break;
 8011b8a:	e004      	b.n	8011b96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011b8c:	6839      	ldr	r1, [r7, #0]
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fb7f 	bl	8012292 <USBD_CtlError>
          break;
 8011b94:	bf00      	nop
      }
      break;
 8011b96:	e005      	b.n	8011ba4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 fb79 	bl	8012292 <USBD_CtlError>
      break;
 8011ba0:	e000      	b.n	8011ba4 <USBD_StdEPReq+0x330>
      break;
 8011ba2:	bf00      	nop
  }

  return ret;
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
	...

08011bb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	885b      	ldrh	r3, [r3, #2]
 8011bca:	0a1b      	lsrs	r3, r3, #8
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	2b0e      	cmp	r3, #14
 8011bd2:	f200 8152 	bhi.w	8011e7a <USBD_GetDescriptor+0x2ca>
 8011bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8011bdc <USBD_GetDescriptor+0x2c>)
 8011bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bdc:	08011c4d 	.word	0x08011c4d
 8011be0:	08011c65 	.word	0x08011c65
 8011be4:	08011ca5 	.word	0x08011ca5
 8011be8:	08011e7b 	.word	0x08011e7b
 8011bec:	08011e7b 	.word	0x08011e7b
 8011bf0:	08011e1b 	.word	0x08011e1b
 8011bf4:	08011e47 	.word	0x08011e47
 8011bf8:	08011e7b 	.word	0x08011e7b
 8011bfc:	08011e7b 	.word	0x08011e7b
 8011c00:	08011e7b 	.word	0x08011e7b
 8011c04:	08011e7b 	.word	0x08011e7b
 8011c08:	08011e7b 	.word	0x08011e7b
 8011c0c:	08011e7b 	.word	0x08011e7b
 8011c10:	08011e7b 	.word	0x08011e7b
 8011c14:	08011c19 	.word	0x08011c19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c1e:	69db      	ldr	r3, [r3, #28]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d00b      	beq.n	8011c3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c2a:	69db      	ldr	r3, [r3, #28]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	7c12      	ldrb	r2, [r2, #16]
 8011c30:	f107 0108 	add.w	r1, r7, #8
 8011c34:	4610      	mov	r0, r2
 8011c36:	4798      	blx	r3
 8011c38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c3a:	e126      	b.n	8011e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fb27 	bl	8012292 <USBD_CtlError>
        err++;
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	3301      	adds	r3, #1
 8011c48:	72fb      	strb	r3, [r7, #11]
      break;
 8011c4a:	e11e      	b.n	8011e8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	7c12      	ldrb	r2, [r2, #16]
 8011c58:	f107 0108 	add.w	r1, r7, #8
 8011c5c:	4610      	mov	r0, r2
 8011c5e:	4798      	blx	r3
 8011c60:	60f8      	str	r0, [r7, #12]
      break;
 8011c62:	e112      	b.n	8011e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	7c1b      	ldrb	r3, [r3, #16]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10d      	bne.n	8011c88 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c74:	f107 0208 	add.w	r2, r7, #8
 8011c78:	4610      	mov	r0, r2
 8011c7a:	4798      	blx	r3
 8011c7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3301      	adds	r3, #1
 8011c82:	2202      	movs	r2, #2
 8011c84:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011c86:	e100      	b.n	8011e8a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c90:	f107 0208 	add.w	r2, r7, #8
 8011c94:	4610      	mov	r0, r2
 8011c96:	4798      	blx	r3
 8011c98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	701a      	strb	r2, [r3, #0]
      break;
 8011ca2:	e0f2      	b.n	8011e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	885b      	ldrh	r3, [r3, #2]
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	2b05      	cmp	r3, #5
 8011cac:	f200 80ac 	bhi.w	8011e08 <USBD_GetDescriptor+0x258>
 8011cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8011cb8 <USBD_GetDescriptor+0x108>)
 8011cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb6:	bf00      	nop
 8011cb8:	08011cd1 	.word	0x08011cd1
 8011cbc:	08011d05 	.word	0x08011d05
 8011cc0:	08011d39 	.word	0x08011d39
 8011cc4:	08011d6d 	.word	0x08011d6d
 8011cc8:	08011da1 	.word	0x08011da1
 8011ccc:	08011dd5 	.word	0x08011dd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	7c12      	ldrb	r2, [r2, #16]
 8011ce8:	f107 0108 	add.w	r1, r7, #8
 8011cec:	4610      	mov	r0, r2
 8011cee:	4798      	blx	r3
 8011cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cf2:	e091      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 facb 	bl	8012292 <USBD_CtlError>
            err++;
 8011cfc:	7afb      	ldrb	r3, [r7, #11]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	72fb      	strb	r3, [r7, #11]
          break;
 8011d02:	e089      	b.n	8011e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00b      	beq.n	8011d28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	7c12      	ldrb	r2, [r2, #16]
 8011d1c:	f107 0108 	add.w	r1, r7, #8
 8011d20:	4610      	mov	r0, r2
 8011d22:	4798      	blx	r3
 8011d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d26:	e077      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fab1 	bl	8012292 <USBD_CtlError>
            err++;
 8011d30:	7afb      	ldrb	r3, [r7, #11]
 8011d32:	3301      	adds	r3, #1
 8011d34:	72fb      	strb	r3, [r7, #11]
          break;
 8011d36:	e06f      	b.n	8011e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d00b      	beq.n	8011d5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	7c12      	ldrb	r2, [r2, #16]
 8011d50:	f107 0108 	add.w	r1, r7, #8
 8011d54:	4610      	mov	r0, r2
 8011d56:	4798      	blx	r3
 8011d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d5a:	e05d      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d5c:	6839      	ldr	r1, [r7, #0]
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 fa97 	bl	8012292 <USBD_CtlError>
            err++;
 8011d64:	7afb      	ldrb	r3, [r7, #11]
 8011d66:	3301      	adds	r3, #1
 8011d68:	72fb      	strb	r3, [r7, #11]
          break;
 8011d6a:	e055      	b.n	8011e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00b      	beq.n	8011d90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	7c12      	ldrb	r2, [r2, #16]
 8011d84:	f107 0108 	add.w	r1, r7, #8
 8011d88:	4610      	mov	r0, r2
 8011d8a:	4798      	blx	r3
 8011d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d8e:	e043      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011d90:	6839      	ldr	r1, [r7, #0]
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 fa7d 	bl	8012292 <USBD_CtlError>
            err++;
 8011d98:	7afb      	ldrb	r3, [r7, #11]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8011d9e:	e03b      	b.n	8011e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011da6:	695b      	ldr	r3, [r3, #20]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00b      	beq.n	8011dc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011db2:	695b      	ldr	r3, [r3, #20]
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	7c12      	ldrb	r2, [r2, #16]
 8011db8:	f107 0108 	add.w	r1, r7, #8
 8011dbc:	4610      	mov	r0, r2
 8011dbe:	4798      	blx	r3
 8011dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dc2:	e029      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011dc4:	6839      	ldr	r1, [r7, #0]
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 fa63 	bl	8012292 <USBD_CtlError>
            err++;
 8011dcc:	7afb      	ldrb	r3, [r7, #11]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8011dd2:	e021      	b.n	8011e18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dda:	699b      	ldr	r3, [r3, #24]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00b      	beq.n	8011df8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011de6:	699b      	ldr	r3, [r3, #24]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	7c12      	ldrb	r2, [r2, #16]
 8011dec:	f107 0108 	add.w	r1, r7, #8
 8011df0:	4610      	mov	r0, r2
 8011df2:	4798      	blx	r3
 8011df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011df6:	e00f      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 fa49 	bl	8012292 <USBD_CtlError>
            err++;
 8011e00:	7afb      	ldrb	r3, [r7, #11]
 8011e02:	3301      	adds	r3, #1
 8011e04:	72fb      	strb	r3, [r7, #11]
          break;
 8011e06:	e007      	b.n	8011e18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011e08:	6839      	ldr	r1, [r7, #0]
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 fa41 	bl	8012292 <USBD_CtlError>
          err++;
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	3301      	adds	r3, #1
 8011e14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011e16:	bf00      	nop
      }
      break;
 8011e18:	e037      	b.n	8011e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	7c1b      	ldrb	r3, [r3, #16]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d109      	bne.n	8011e36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e2a:	f107 0208 	add.w	r2, r7, #8
 8011e2e:	4610      	mov	r0, r2
 8011e30:	4798      	blx	r3
 8011e32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e34:	e029      	b.n	8011e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e36:	6839      	ldr	r1, [r7, #0]
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 fa2a 	bl	8012292 <USBD_CtlError>
        err++;
 8011e3e:	7afb      	ldrb	r3, [r7, #11]
 8011e40:	3301      	adds	r3, #1
 8011e42:	72fb      	strb	r3, [r7, #11]
      break;
 8011e44:	e021      	b.n	8011e8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	7c1b      	ldrb	r3, [r3, #16]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10d      	bne.n	8011e6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e56:	f107 0208 	add.w	r2, r7, #8
 8011e5a:	4610      	mov	r0, r2
 8011e5c:	4798      	blx	r3
 8011e5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	3301      	adds	r3, #1
 8011e64:	2207      	movs	r2, #7
 8011e66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e68:	e00f      	b.n	8011e8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011e6a:	6839      	ldr	r1, [r7, #0]
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 fa10 	bl	8012292 <USBD_CtlError>
        err++;
 8011e72:	7afb      	ldrb	r3, [r7, #11]
 8011e74:	3301      	adds	r3, #1
 8011e76:	72fb      	strb	r3, [r7, #11]
      break;
 8011e78:	e007      	b.n	8011e8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011e7a:	6839      	ldr	r1, [r7, #0]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 fa08 	bl	8012292 <USBD_CtlError>
      err++;
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	3301      	adds	r3, #1
 8011e86:	72fb      	strb	r3, [r7, #11]
      break;
 8011e88:	bf00      	nop
  }

  if (err != 0U)
 8011e8a:	7afb      	ldrb	r3, [r7, #11]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d11e      	bne.n	8011ece <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	88db      	ldrh	r3, [r3, #6]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d016      	beq.n	8011ec6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011e98:	893b      	ldrh	r3, [r7, #8]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00e      	beq.n	8011ebc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	88da      	ldrh	r2, [r3, #6]
 8011ea2:	893b      	ldrh	r3, [r7, #8]
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	bf28      	it	cs
 8011ea8:	4613      	movcs	r3, r2
 8011eaa:	b29b      	uxth	r3, r3
 8011eac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011eae:	893b      	ldrh	r3, [r7, #8]
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	68f9      	ldr	r1, [r7, #12]
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f000 fa69 	bl	801238c <USBD_CtlSendData>
 8011eba:	e009      	b.n	8011ed0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011ebc:	6839      	ldr	r1, [r7, #0]
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f000 f9e7 	bl	8012292 <USBD_CtlError>
 8011ec4:	e004      	b.n	8011ed0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 faba 	bl	8012440 <USBD_CtlSendStatus>
 8011ecc:	e000      	b.n	8011ed0 <USBD_GetDescriptor+0x320>
    return;
 8011ece:	bf00      	nop
  }
}
 8011ed0:	3710      	adds	r7, #16
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop

08011ed8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	889b      	ldrh	r3, [r3, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d131      	bne.n	8011f4e <USBD_SetAddress+0x76>
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	88db      	ldrh	r3, [r3, #6]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d12d      	bne.n	8011f4e <USBD_SetAddress+0x76>
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	885b      	ldrh	r3, [r3, #2]
 8011ef6:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ef8:	d829      	bhi.n	8011f4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	885b      	ldrh	r3, [r3, #2]
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	2b03      	cmp	r3, #3
 8011f10:	d104      	bne.n	8011f1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 f9bc 	bl	8012292 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f1a:	e01d      	b.n	8011f58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7bfa      	ldrb	r2, [r7, #15]
 8011f20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	4619      	mov	r1, r3
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 ff13 	bl	8012d54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 fa86 	bl	8012440 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d004      	beq.n	8011f44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2202      	movs	r2, #2
 8011f3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f42:	e009      	b.n	8011f58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f4c:	e004      	b.n	8011f58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011f4e:	6839      	ldr	r1, [r7, #0]
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f99e 	bl	8012292 <USBD_CtlError>
  }
}
 8011f56:	bf00      	nop
 8011f58:	bf00      	nop
 8011f5a:	3710      	adds	r7, #16
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	885b      	ldrh	r3, [r3, #2]
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	4b4e      	ldr	r3, [pc, #312]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011f78:	4b4d      	ldr	r3, [pc, #308]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	d905      	bls.n	8011f8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 f985 	bl	8012292 <USBD_CtlError>
    return USBD_FAIL;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	e08c      	b.n	80120a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	2b02      	cmp	r3, #2
 8011f96:	d002      	beq.n	8011f9e <USBD_SetConfig+0x3e>
 8011f98:	2b03      	cmp	r3, #3
 8011f9a:	d029      	beq.n	8011ff0 <USBD_SetConfig+0x90>
 8011f9c:	e075      	b.n	801208a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011f9e:	4b44      	ldr	r3, [pc, #272]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d020      	beq.n	8011fe8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011fa6:	4b42      	ldr	r3, [pc, #264]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	461a      	mov	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7fe ffb9 	bl	8010f2e <USBD_SetClassConfig>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011fc0:	7bfb      	ldrb	r3, [r7, #15]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d008      	beq.n	8011fd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011fc6:	6839      	ldr	r1, [r7, #0]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f962 	bl	8012292 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2202      	movs	r2, #2
 8011fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011fd6:	e065      	b.n	80120a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 fa31 	bl	8012440 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2203      	movs	r2, #3
 8011fe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011fe6:	e05d      	b.n	80120a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f000 fa29 	bl	8012440 <USBD_CtlSendStatus>
      break;
 8011fee:	e059      	b.n	80120a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80120b0 <USBD_SetConfig+0x150>)
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d112      	bne.n	801201e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2202      	movs	r2, #2
 8011ffc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012000:	4b2b      	ldr	r3, [pc, #172]	@ (80120b0 <USBD_SetConfig+0x150>)
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	461a      	mov	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801200a:	4b29      	ldr	r3, [pc, #164]	@ (80120b0 <USBD_SetConfig+0x150>)
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7fe ffa8 	bl	8010f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 fa12 	bl	8012440 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801201c:	e042      	b.n	80120a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801201e:	4b24      	ldr	r3, [pc, #144]	@ (80120b0 <USBD_SetConfig+0x150>)
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	461a      	mov	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	429a      	cmp	r2, r3
 801202a:	d02a      	beq.n	8012082 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	b2db      	uxtb	r3, r3
 8012032:	4619      	mov	r1, r3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7fe ff96 	bl	8010f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801203a:	4b1d      	ldr	r3, [pc, #116]	@ (80120b0 <USBD_SetConfig+0x150>)
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012044:	4b1a      	ldr	r3, [pc, #104]	@ (80120b0 <USBD_SetConfig+0x150>)
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	4619      	mov	r1, r3
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f7fe ff6f 	bl	8010f2e <USBD_SetClassConfig>
 8012050:	4603      	mov	r3, r0
 8012052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012054:	7bfb      	ldrb	r3, [r7, #15]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d00f      	beq.n	801207a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801205a:	6839      	ldr	r1, [r7, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f918 	bl	8012292 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	b2db      	uxtb	r3, r3
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7fe ff7b 	bl	8010f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2202      	movs	r2, #2
 8012074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012078:	e014      	b.n	80120a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f9e0 	bl	8012440 <USBD_CtlSendStatus>
      break;
 8012080:	e010      	b.n	80120a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 f9dc 	bl	8012440 <USBD_CtlSendStatus>
      break;
 8012088:	e00c      	b.n	80120a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801208a:	6839      	ldr	r1, [r7, #0]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f900 	bl	8012292 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012092:	4b07      	ldr	r3, [pc, #28]	@ (80120b0 <USBD_SetConfig+0x150>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	4619      	mov	r1, r3
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7fe ff64 	bl	8010f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801209e:	2303      	movs	r3, #3
 80120a0:	73fb      	strb	r3, [r7, #15]
      break;
 80120a2:	bf00      	nop
  }

  return ret;
 80120a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	24002e88 	.word	0x24002e88

080120b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	88db      	ldrh	r3, [r3, #6]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d004      	beq.n	80120d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 f8e2 	bl	8012292 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80120ce:	e023      	b.n	8012118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b02      	cmp	r3, #2
 80120da:	dc02      	bgt.n	80120e2 <USBD_GetConfig+0x2e>
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dc03      	bgt.n	80120e8 <USBD_GetConfig+0x34>
 80120e0:	e015      	b.n	801210e <USBD_GetConfig+0x5a>
 80120e2:	2b03      	cmp	r3, #3
 80120e4:	d00b      	beq.n	80120fe <USBD_GetConfig+0x4a>
 80120e6:	e012      	b.n	801210e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3308      	adds	r3, #8
 80120f2:	2201      	movs	r2, #1
 80120f4:	4619      	mov	r1, r3
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 f948 	bl	801238c <USBD_CtlSendData>
        break;
 80120fc:	e00c      	b.n	8012118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3304      	adds	r3, #4
 8012102:	2201      	movs	r2, #1
 8012104:	4619      	mov	r1, r3
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 f940 	bl	801238c <USBD_CtlSendData>
        break;
 801210c:	e004      	b.n	8012118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801210e:	6839      	ldr	r1, [r7, #0]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f8be 	bl	8012292 <USBD_CtlError>
        break;
 8012116:	bf00      	nop
}
 8012118:	bf00      	nop
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012130:	b2db      	uxtb	r3, r3
 8012132:	3b01      	subs	r3, #1
 8012134:	2b02      	cmp	r3, #2
 8012136:	d81e      	bhi.n	8012176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	88db      	ldrh	r3, [r3, #6]
 801213c:	2b02      	cmp	r3, #2
 801213e:	d004      	beq.n	801214a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 f8a5 	bl	8012292 <USBD_CtlError>
        break;
 8012148:	e01a      	b.n	8012180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2201      	movs	r2, #1
 801214e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012156:	2b00      	cmp	r3, #0
 8012158:	d005      	beq.n	8012166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	f043 0202 	orr.w	r2, r3, #2
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	330c      	adds	r3, #12
 801216a:	2202      	movs	r2, #2
 801216c:	4619      	mov	r1, r3
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 f90c 	bl	801238c <USBD_CtlSendData>
      break;
 8012174:	e004      	b.n	8012180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 f88a 	bl	8012292 <USBD_CtlError>
      break;
 801217e:	bf00      	nop
  }
}
 8012180:	bf00      	nop
 8012182:	3708      	adds	r7, #8
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	885b      	ldrh	r3, [r3, #2]
 8012196:	2b01      	cmp	r3, #1
 8012198:	d107      	bne.n	80121aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2201      	movs	r2, #1
 801219e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 f94c 	bl	8012440 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80121a8:	e013      	b.n	80121d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	885b      	ldrh	r3, [r3, #2]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d10b      	bne.n	80121ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	889b      	ldrh	r3, [r3, #4]
 80121b6:	0a1b      	lsrs	r3, r3, #8
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	b2da      	uxtb	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 f93c 	bl	8012440 <USBD_CtlSendStatus>
}
 80121c8:	e003      	b.n	80121d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 f860 	bl	8012292 <USBD_CtlError>
}
 80121d2:	bf00      	nop
 80121d4:	3708      	adds	r7, #8
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b082      	sub	sp, #8
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
 80121e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	3b01      	subs	r3, #1
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d80b      	bhi.n	801220a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	885b      	ldrh	r3, [r3, #2]
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d10c      	bne.n	8012214 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2200      	movs	r2, #0
 80121fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f91c 	bl	8012440 <USBD_CtlSendStatus>
      }
      break;
 8012208:	e004      	b.n	8012214 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f840 	bl	8012292 <USBD_CtlError>
      break;
 8012212:	e000      	b.n	8012216 <USBD_ClrFeature+0x3c>
      break;
 8012214:	bf00      	nop
  }
}
 8012216:	bf00      	nop
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	781a      	ldrb	r2, [r3, #0]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	3301      	adds	r3, #1
 8012238:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	781a      	ldrb	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	3301      	adds	r3, #1
 8012246:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012248:	68f8      	ldr	r0, [r7, #12]
 801224a:	f7ff fa16 	bl	801167a <SWAPBYTE>
 801224e:	4603      	mov	r3, r0
 8012250:	461a      	mov	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	3301      	adds	r3, #1
 801225a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	3301      	adds	r3, #1
 8012260:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f7ff fa09 	bl	801167a <SWAPBYTE>
 8012268:	4603      	mov	r3, r0
 801226a:	461a      	mov	r2, r3
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	3301      	adds	r3, #1
 8012274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3301      	adds	r3, #1
 801227a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f7ff f9fc 	bl	801167a <SWAPBYTE>
 8012282:	4603      	mov	r3, r0
 8012284:	461a      	mov	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	80da      	strh	r2, [r3, #6]
}
 801228a:	bf00      	nop
 801228c:	3710      	adds	r7, #16
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
 801229a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801229c:	2180      	movs	r1, #128	@ 0x80
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 fcee 	bl	8012c80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80122a4:	2100      	movs	r1, #0
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 fcea 	bl	8012c80 <USBD_LL_StallEP>
}
 80122ac:	bf00      	nop
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80122c0:	2300      	movs	r3, #0
 80122c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d042      	beq.n	8012350 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80122ce:	6938      	ldr	r0, [r7, #16]
 80122d0:	f000 f842 	bl	8012358 <USBD_GetLen>
 80122d4:	4603      	mov	r3, r0
 80122d6:	3301      	adds	r3, #1
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122de:	d808      	bhi.n	80122f2 <USBD_GetString+0x3e>
 80122e0:	6938      	ldr	r0, [r7, #16]
 80122e2:	f000 f839 	bl	8012358 <USBD_GetLen>
 80122e6:	4603      	mov	r3, r0
 80122e8:	3301      	adds	r3, #1
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	e001      	b.n	80122f6 <USBD_GetString+0x42>
 80122f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80122fa:	7dfb      	ldrb	r3, [r7, #23]
 80122fc:	68ba      	ldr	r2, [r7, #8]
 80122fe:	4413      	add	r3, r2
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	7812      	ldrb	r2, [r2, #0]
 8012304:	701a      	strb	r2, [r3, #0]
  idx++;
 8012306:	7dfb      	ldrb	r3, [r7, #23]
 8012308:	3301      	adds	r3, #1
 801230a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801230c:	7dfb      	ldrb	r3, [r7, #23]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	4413      	add	r3, r2
 8012312:	2203      	movs	r2, #3
 8012314:	701a      	strb	r2, [r3, #0]
  idx++;
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	3301      	adds	r3, #1
 801231a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801231c:	e013      	b.n	8012346 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801231e:	7dfb      	ldrb	r3, [r7, #23]
 8012320:	68ba      	ldr	r2, [r7, #8]
 8012322:	4413      	add	r3, r2
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	7812      	ldrb	r2, [r2, #0]
 8012328:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	3301      	adds	r3, #1
 801232e:	613b      	str	r3, [r7, #16]
    idx++;
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	3301      	adds	r3, #1
 8012334:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012336:	7dfb      	ldrb	r3, [r7, #23]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	4413      	add	r3, r2
 801233c:	2200      	movs	r2, #0
 801233e:	701a      	strb	r2, [r3, #0]
    idx++;
 8012340:	7dfb      	ldrb	r3, [r7, #23]
 8012342:	3301      	adds	r3, #1
 8012344:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1e7      	bne.n	801231e <USBD_GetString+0x6a>
 801234e:	e000      	b.n	8012352 <USBD_GetString+0x9e>
    return;
 8012350:	bf00      	nop
  }
}
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012358:	b480      	push	{r7}
 801235a:	b085      	sub	sp, #20
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012360:	2300      	movs	r3, #0
 8012362:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012368:	e005      	b.n	8012376 <USBD_GetLen+0x1e>
  {
    len++;
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	3301      	adds	r3, #1
 801236e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	3301      	adds	r3, #1
 8012374:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d1f5      	bne.n	801236a <USBD_GetLen+0x12>
  }

  return len;
 801237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2202      	movs	r2, #2
 801239c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	68ba      	ldr	r2, [r7, #8]
 80123b0:	2100      	movs	r1, #0
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f000 fced 	bl	8012d92 <USBD_LL_Transmit>

  return USBD_OK;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3710      	adds	r7, #16
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b084      	sub	sp, #16
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	60f8      	str	r0, [r7, #12]
 80123ca:	60b9      	str	r1, [r7, #8]
 80123cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	68ba      	ldr	r2, [r7, #8]
 80123d2:	2100      	movs	r1, #0
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f000 fcdc 	bl	8012d92 <USBD_LL_Transmit>

  return USBD_OK;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3710      	adds	r7, #16
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2203      	movs	r2, #3
 80123f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	2100      	movs	r1, #0
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	f000 fce0 	bl	8012dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012414:	2300      	movs	r3, #0
}
 8012416:	4618      	mov	r0, r3
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b084      	sub	sp, #16
 8012422:	af00      	add	r7, sp, #0
 8012424:	60f8      	str	r0, [r7, #12]
 8012426:	60b9      	str	r1, [r7, #8]
 8012428:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	68ba      	ldr	r2, [r7, #8]
 801242e:	2100      	movs	r1, #0
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f000 fccf 	bl	8012dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012436:	2300      	movs	r3, #0
}
 8012438:	4618      	mov	r0, r3
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2204      	movs	r2, #4
 801244c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012450:	2300      	movs	r3, #0
 8012452:	2200      	movs	r2, #0
 8012454:	2100      	movs	r1, #0
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f000 fc9b 	bl	8012d92 <USBD_LL_Transmit>

  return USBD_OK;
 801245c:	2300      	movs	r3, #0
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b082      	sub	sp, #8
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2205      	movs	r2, #5
 8012472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012476:	2300      	movs	r3, #0
 8012478:	2200      	movs	r2, #0
 801247a:	2100      	movs	r1, #0
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 fca9 	bl	8012dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012490:	2201      	movs	r2, #1
 8012492:	4913      	ldr	r1, [pc, #76]	@ (80124e0 <MX_USB_DEVICE_Init+0x54>)
 8012494:	4813      	ldr	r0, [pc, #76]	@ (80124e4 <MX_USB_DEVICE_Init+0x58>)
 8012496:	f7fe fccd 	bl	8010e34 <USBD_Init>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d001      	beq.n	80124a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80124a0:	f7ef f9e0 	bl	8001864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80124a4:	4910      	ldr	r1, [pc, #64]	@ (80124e8 <MX_USB_DEVICE_Init+0x5c>)
 80124a6:	480f      	ldr	r0, [pc, #60]	@ (80124e4 <MX_USB_DEVICE_Init+0x58>)
 80124a8:	f7fe fcf4 	bl	8010e94 <USBD_RegisterClass>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80124b2:	f7ef f9d7 	bl	8001864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80124b6:	490d      	ldr	r1, [pc, #52]	@ (80124ec <MX_USB_DEVICE_Init+0x60>)
 80124b8:	480a      	ldr	r0, [pc, #40]	@ (80124e4 <MX_USB_DEVICE_Init+0x58>)
 80124ba:	f7fe fbeb 	bl	8010c94 <USBD_CDC_RegisterInterface>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d001      	beq.n	80124c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80124c4:	f7ef f9ce 	bl	8001864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80124c8:	4806      	ldr	r0, [pc, #24]	@ (80124e4 <MX_USB_DEVICE_Init+0x58>)
 80124ca:	f7fe fd19 	bl	8010f00 <USBD_Start>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d001      	beq.n	80124d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80124d4:	f7ef f9c6 	bl	8001864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80124d8:	f7f6 fada 	bl	8008a90 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80124dc:	bf00      	nop
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	240000b0 	.word	0x240000b0
 80124e4:	24002e8c 	.word	0x24002e8c
 80124e8:	2400001c 	.word	0x2400001c
 80124ec:	2400009c 	.word	0x2400009c

080124f0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80124f4:	2200      	movs	r2, #0
 80124f6:	4905      	ldr	r1, [pc, #20]	@ (801250c <CDC_Init_HS+0x1c>)
 80124f8:	4805      	ldr	r0, [pc, #20]	@ (8012510 <CDC_Init_HS+0x20>)
 80124fa:	f7fe fbe5 	bl	8010cc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80124fe:	4905      	ldr	r1, [pc, #20]	@ (8012514 <CDC_Init_HS+0x24>)
 8012500:	4803      	ldr	r0, [pc, #12]	@ (8012510 <CDC_Init_HS+0x20>)
 8012502:	f7fe fc03 	bl	8010d0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012506:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012508:	4618      	mov	r0, r3
 801250a:	bd80      	pop	{r7, pc}
 801250c:	24003968 	.word	0x24003968
 8012510:	24002e8c 	.word	0x24002e8c
 8012514:	24003168 	.word	0x24003168

08012518 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012518:	b480      	push	{r7}
 801251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801251c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801251e:	4618      	mov	r0, r3
 8012520:	46bd      	mov	sp, r7
 8012522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012526:	4770      	bx	lr

08012528 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	4603      	mov	r3, r0
 8012530:	6039      	str	r1, [r7, #0]
 8012532:	71fb      	strb	r3, [r7, #7]
 8012534:	4613      	mov	r3, r2
 8012536:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012538:	79fb      	ldrb	r3, [r7, #7]
 801253a:	2b23      	cmp	r3, #35	@ 0x23
 801253c:	d84a      	bhi.n	80125d4 <CDC_Control_HS+0xac>
 801253e:	a201      	add	r2, pc, #4	@ (adr r2, 8012544 <CDC_Control_HS+0x1c>)
 8012540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012544:	080125d5 	.word	0x080125d5
 8012548:	080125d5 	.word	0x080125d5
 801254c:	080125d5 	.word	0x080125d5
 8012550:	080125d5 	.word	0x080125d5
 8012554:	080125d5 	.word	0x080125d5
 8012558:	080125d5 	.word	0x080125d5
 801255c:	080125d5 	.word	0x080125d5
 8012560:	080125d5 	.word	0x080125d5
 8012564:	080125d5 	.word	0x080125d5
 8012568:	080125d5 	.word	0x080125d5
 801256c:	080125d5 	.word	0x080125d5
 8012570:	080125d5 	.word	0x080125d5
 8012574:	080125d5 	.word	0x080125d5
 8012578:	080125d5 	.word	0x080125d5
 801257c:	080125d5 	.word	0x080125d5
 8012580:	080125d5 	.word	0x080125d5
 8012584:	080125d5 	.word	0x080125d5
 8012588:	080125d5 	.word	0x080125d5
 801258c:	080125d5 	.word	0x080125d5
 8012590:	080125d5 	.word	0x080125d5
 8012594:	080125d5 	.word	0x080125d5
 8012598:	080125d5 	.word	0x080125d5
 801259c:	080125d5 	.word	0x080125d5
 80125a0:	080125d5 	.word	0x080125d5
 80125a4:	080125d5 	.word	0x080125d5
 80125a8:	080125d5 	.word	0x080125d5
 80125ac:	080125d5 	.word	0x080125d5
 80125b0:	080125d5 	.word	0x080125d5
 80125b4:	080125d5 	.word	0x080125d5
 80125b8:	080125d5 	.word	0x080125d5
 80125bc:	080125d5 	.word	0x080125d5
 80125c0:	080125d5 	.word	0x080125d5
 80125c4:	080125d5 	.word	0x080125d5
 80125c8:	080125d5 	.word	0x080125d5
 80125cc:	080125d5 	.word	0x080125d5
 80125d0:	080125d5 	.word	0x080125d5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80125d4:	bf00      	nop
  }

  return (USBD_OK);
 80125d6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80125d8:	4618      	mov	r0, r3
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80125ee:	6879      	ldr	r1, [r7, #4]
 80125f0:	4808      	ldr	r0, [pc, #32]	@ (8012614 <CDC_Receive_HS+0x30>)
 80125f2:	f7fe fb8b 	bl	8010d0c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80125f6:	4807      	ldr	r0, [pc, #28]	@ (8012614 <CDC_Receive_HS+0x30>)
 80125f8:	f7fe fbe6 	bl	8010dc8 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	461a      	mov	r2, r3
 8012602:	6879      	ldr	r1, [r7, #4]
 8012604:	4804      	ldr	r0, [pc, #16]	@ (8012618 <CDC_Receive_HS+0x34>)
 8012606:	f7f0 fb2b 	bl	8002c60 <VibeCheckShell_PutInput>

	return (USBD_OK);
 801260a:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801260c:	4618      	mov	r0, r3
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	24002e8c 	.word	0x24002e8c
 8012618:	24000898 	.word	0x24000898

0801261c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801262c:	4b0d      	ldr	r3, [pc, #52]	@ (8012664 <CDC_Transmit_HS+0x48>)
 801262e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012632:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801263e:	2301      	movs	r3, #1
 8012640:	e00b      	b.n	801265a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012642:	887b      	ldrh	r3, [r7, #2]
 8012644:	461a      	mov	r2, r3
 8012646:	6879      	ldr	r1, [r7, #4]
 8012648:	4806      	ldr	r0, [pc, #24]	@ (8012664 <CDC_Transmit_HS+0x48>)
 801264a:	f7fe fb3d 	bl	8010cc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801264e:	4805      	ldr	r0, [pc, #20]	@ (8012664 <CDC_Transmit_HS+0x48>)
 8012650:	f7fe fb7a 	bl	8010d48 <USBD_CDC_TransmitPacket>
 8012654:	4603      	mov	r3, r0
 8012656:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8012658:	7bfb      	ldrb	r3, [r7, #15]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	24002e8c 	.word	0x24002e8c

08012668 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012668:	b480      	push	{r7}
 801266a:	b087      	sub	sp, #28
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	4613      	mov	r3, r2
 8012674:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012676:	2300      	movs	r3, #0
 8012678:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801267a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801267e:	4618      	mov	r0, r3
 8012680:	371c      	adds	r7, #28
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
	...

0801268c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	4603      	mov	r3, r0
 8012694:	6039      	str	r1, [r7, #0]
 8012696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2212      	movs	r2, #18
 801269c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801269e:	4b03      	ldr	r3, [pc, #12]	@ (80126ac <USBD_HS_DeviceDescriptor+0x20>)
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	370c      	adds	r7, #12
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	240000d0 	.word	0x240000d0

080126b0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	4603      	mov	r3, r0
 80126b8:	6039      	str	r1, [r7, #0]
 80126ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	2204      	movs	r2, #4
 80126c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80126c2:	4b03      	ldr	r3, [pc, #12]	@ (80126d0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	240000e4 	.word	0x240000e4

080126d4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	4603      	mov	r3, r0
 80126dc:	6039      	str	r1, [r7, #0]
 80126de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80126e0:	79fb      	ldrb	r3, [r7, #7]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d105      	bne.n	80126f2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80126e6:	683a      	ldr	r2, [r7, #0]
 80126e8:	4907      	ldr	r1, [pc, #28]	@ (8012708 <USBD_HS_ProductStrDescriptor+0x34>)
 80126ea:	4808      	ldr	r0, [pc, #32]	@ (801270c <USBD_HS_ProductStrDescriptor+0x38>)
 80126ec:	f7ff fde2 	bl	80122b4 <USBD_GetString>
 80126f0:	e004      	b.n	80126fc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	4904      	ldr	r1, [pc, #16]	@ (8012708 <USBD_HS_ProductStrDescriptor+0x34>)
 80126f6:	4805      	ldr	r0, [pc, #20]	@ (801270c <USBD_HS_ProductStrDescriptor+0x38>)
 80126f8:	f7ff fddc 	bl	80122b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80126fc:	4b02      	ldr	r3, [pc, #8]	@ (8012708 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	24004168 	.word	0x24004168
 801270c:	0801714c 	.word	0x0801714c

08012710 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	6039      	str	r1, [r7, #0]
 801271a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801271c:	683a      	ldr	r2, [r7, #0]
 801271e:	4904      	ldr	r1, [pc, #16]	@ (8012730 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012720:	4804      	ldr	r0, [pc, #16]	@ (8012734 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012722:	f7ff fdc7 	bl	80122b4 <USBD_GetString>
  return USBD_StrDesc;
 8012726:	4b02      	ldr	r3, [pc, #8]	@ (8012730 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012728:	4618      	mov	r0, r3
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	24004168 	.word	0x24004168
 8012734:	08017158 	.word	0x08017158

08012738 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	6039      	str	r1, [r7, #0]
 8012742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	221a      	movs	r2, #26
 8012748:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801274a:	f000 f843 	bl	80127d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801274e:	4b02      	ldr	r3, [pc, #8]	@ (8012758 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012750:	4618      	mov	r0, r3
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	240000e8 	.word	0x240000e8

0801275c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	4603      	mov	r3, r0
 8012764:	6039      	str	r1, [r7, #0]
 8012766:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012768:	79fb      	ldrb	r3, [r7, #7]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d105      	bne.n	801277a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	4907      	ldr	r1, [pc, #28]	@ (8012790 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012772:	4808      	ldr	r0, [pc, #32]	@ (8012794 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012774:	f7ff fd9e 	bl	80122b4 <USBD_GetString>
 8012778:	e004      	b.n	8012784 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	4904      	ldr	r1, [pc, #16]	@ (8012790 <USBD_HS_ConfigStrDescriptor+0x34>)
 801277e:	4805      	ldr	r0, [pc, #20]	@ (8012794 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012780:	f7ff fd98 	bl	80122b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012784:	4b02      	ldr	r3, [pc, #8]	@ (8012790 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	24004168 	.word	0x24004168
 8012794:	08017164 	.word	0x08017164

08012798 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	6039      	str	r1, [r7, #0]
 80127a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d105      	bne.n	80127b6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	4907      	ldr	r1, [pc, #28]	@ (80127cc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80127ae:	4808      	ldr	r0, [pc, #32]	@ (80127d0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80127b0:	f7ff fd80 	bl	80122b4 <USBD_GetString>
 80127b4:	e004      	b.n	80127c0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80127b6:	683a      	ldr	r2, [r7, #0]
 80127b8:	4904      	ldr	r1, [pc, #16]	@ (80127cc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80127ba:	4805      	ldr	r0, [pc, #20]	@ (80127d0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80127bc:	f7ff fd7a 	bl	80122b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80127c0:	4b02      	ldr	r3, [pc, #8]	@ (80127cc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	24004168 	.word	0x24004168
 80127d0:	08017170 	.word	0x08017170

080127d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80127da:	4b0f      	ldr	r3, [pc, #60]	@ (8012818 <Get_SerialNum+0x44>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80127e0:	4b0e      	ldr	r3, [pc, #56]	@ (801281c <Get_SerialNum+0x48>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80127e6:	4b0e      	ldr	r3, [pc, #56]	@ (8012820 <Get_SerialNum+0x4c>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4413      	add	r3, r2
 80127f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d009      	beq.n	801280e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80127fa:	2208      	movs	r2, #8
 80127fc:	4909      	ldr	r1, [pc, #36]	@ (8012824 <Get_SerialNum+0x50>)
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f000 f814 	bl	801282c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012804:	2204      	movs	r2, #4
 8012806:	4908      	ldr	r1, [pc, #32]	@ (8012828 <Get_SerialNum+0x54>)
 8012808:	68b8      	ldr	r0, [r7, #8]
 801280a:	f000 f80f 	bl	801282c <IntToUnicode>
  }
}
 801280e:	bf00      	nop
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	1ff1e800 	.word	0x1ff1e800
 801281c:	1ff1e804 	.word	0x1ff1e804
 8012820:	1ff1e808 	.word	0x1ff1e808
 8012824:	240000ea 	.word	0x240000ea
 8012828:	240000fa 	.word	0x240000fa

0801282c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801282c:	b480      	push	{r7}
 801282e:	b087      	sub	sp, #28
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	4613      	mov	r3, r2
 8012838:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801283a:	2300      	movs	r3, #0
 801283c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801283e:	2300      	movs	r3, #0
 8012840:	75fb      	strb	r3, [r7, #23]
 8012842:	e027      	b.n	8012894 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	0f1b      	lsrs	r3, r3, #28
 8012848:	2b09      	cmp	r3, #9
 801284a:	d80b      	bhi.n	8012864 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	0f1b      	lsrs	r3, r3, #28
 8012850:	b2da      	uxtb	r2, r3
 8012852:	7dfb      	ldrb	r3, [r7, #23]
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	4619      	mov	r1, r3
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	440b      	add	r3, r1
 801285c:	3230      	adds	r2, #48	@ 0x30
 801285e:	b2d2      	uxtb	r2, r2
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	e00a      	b.n	801287a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	0f1b      	lsrs	r3, r3, #28
 8012868:	b2da      	uxtb	r2, r3
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	005b      	lsls	r3, r3, #1
 801286e:	4619      	mov	r1, r3
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	440b      	add	r3, r1
 8012874:	3237      	adds	r2, #55	@ 0x37
 8012876:	b2d2      	uxtb	r2, r2
 8012878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	011b      	lsls	r3, r3, #4
 801287e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012880:	7dfb      	ldrb	r3, [r7, #23]
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	3301      	adds	r3, #1
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	4413      	add	r3, r2
 801288a:	2200      	movs	r2, #0
 801288c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	3301      	adds	r3, #1
 8012892:	75fb      	strb	r3, [r7, #23]
 8012894:	7dfa      	ldrb	r2, [r7, #23]
 8012896:	79fb      	ldrb	r3, [r7, #7]
 8012898:	429a      	cmp	r2, r3
 801289a:	d3d3      	bcc.n	8012844 <IntToUnicode+0x18>
  }
}
 801289c:	bf00      	nop
 801289e:	bf00      	nop
 80128a0:	371c      	adds	r7, #28
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr
	...

080128ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b0b2      	sub	sp, #200	@ 0xc8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80128b4:	f107 0310 	add.w	r3, r7, #16
 80128b8:	22b8      	movs	r2, #184	@ 0xb8
 80128ba:	2100      	movs	r1, #0
 80128bc:	4618      	mov	r0, r3
 80128be:	f001 fe1c 	bl	80144fa <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a1a      	ldr	r2, [pc, #104]	@ (8012930 <HAL_PCD_MspInit+0x84>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d12c      	bne.n	8012926 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80128cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80128d0:	f04f 0300 	mov.w	r3, #0
 80128d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80128d8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80128dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80128e0:	f107 0310 	add.w	r3, r7, #16
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f7 f849 	bl	800997c <HAL_RCCEx_PeriphCLKConfig>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d001      	beq.n	80128f4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80128f0:	f7ee ffb8 	bl	8001864 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80128f4:	f7f6 f8cc 	bl	8008a90 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80128f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012934 <HAL_PCD_MspInit+0x88>)
 80128fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80128fe:	4a0d      	ldr	r2, [pc, #52]	@ (8012934 <HAL_PCD_MspInit+0x88>)
 8012900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012904:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012908:	4b0a      	ldr	r3, [pc, #40]	@ (8012934 <HAL_PCD_MspInit+0x88>)
 801290a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012912:	60fb      	str	r3, [r7, #12]
 8012914:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012916:	2200      	movs	r2, #0
 8012918:	2100      	movs	r1, #0
 801291a:	204d      	movs	r0, #77	@ 0x4d
 801291c:	f7f2 fc1b 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012920:	204d      	movs	r0, #77	@ 0x4d
 8012922:	f7f2 fc32 	bl	800518a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012926:	bf00      	nop
 8012928:	37c8      	adds	r7, #200	@ 0xc8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	40040000 	.word	0x40040000
 8012934:	58024400 	.word	0x58024400

08012938 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801294c:	4619      	mov	r1, r3
 801294e:	4610      	mov	r0, r2
 8012950:	f7fe fb23 	bl	8010f9a <USBD_LL_SetupStage>
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	460b      	mov	r3, r1
 8012966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801296e:	78fa      	ldrb	r2, [r7, #3]
 8012970:	6879      	ldr	r1, [r7, #4]
 8012972:	4613      	mov	r3, r2
 8012974:	00db      	lsls	r3, r3, #3
 8012976:	4413      	add	r3, r2
 8012978:	009b      	lsls	r3, r3, #2
 801297a:	440b      	add	r3, r1
 801297c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	78fb      	ldrb	r3, [r7, #3]
 8012984:	4619      	mov	r1, r3
 8012986:	f7fe fb5d 	bl	8011044 <USBD_LL_DataOutStage>
}
 801298a:	bf00      	nop
 801298c:	3708      	adds	r7, #8
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b082      	sub	sp, #8
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	460b      	mov	r3, r1
 801299c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80129a4:	78fa      	ldrb	r2, [r7, #3]
 80129a6:	6879      	ldr	r1, [r7, #4]
 80129a8:	4613      	mov	r3, r2
 80129aa:	00db      	lsls	r3, r3, #3
 80129ac:	4413      	add	r3, r2
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	440b      	add	r3, r1
 80129b2:	3320      	adds	r3, #32
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	78fb      	ldrb	r3, [r7, #3]
 80129b8:	4619      	mov	r1, r3
 80129ba:	f7fe fbf6 	bl	80111aa <USBD_LL_DataInStage>
}
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b082      	sub	sp, #8
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fe fd30 	bl	801143a <USBD_LL_SOF>
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80129ea:	2301      	movs	r3, #1
 80129ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	79db      	ldrb	r3, [r3, #7]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d102      	bne.n	80129fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80129f6:	2300      	movs	r3, #0
 80129f8:	73fb      	strb	r3, [r7, #15]
 80129fa:	e008      	b.n	8012a0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	79db      	ldrb	r3, [r3, #7]
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	d102      	bne.n	8012a0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012a04:	2301      	movs	r3, #1
 8012a06:	73fb      	strb	r3, [r7, #15]
 8012a08:	e001      	b.n	8012a0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012a0a:	f7ee ff2b 	bl	8001864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a14:	7bfa      	ldrb	r2, [r7, #15]
 8012a16:	4611      	mov	r1, r2
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fe fcca 	bl	80113b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe fc72 	bl	801130e <USBD_LL_Reset>
}
 8012a2a:	bf00      	nop
 8012a2c:	3710      	adds	r7, #16
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
	...

08012a34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7fe fcc5 	bl	80113d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	6812      	ldr	r2, [r2, #0]
 8012a56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012a5a:	f043 0301 	orr.w	r3, r3, #1
 8012a5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	7adb      	ldrb	r3, [r3, #11]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d005      	beq.n	8012a74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a68:	4b04      	ldr	r3, [pc, #16]	@ (8012a7c <HAL_PCD_SuspendCallback+0x48>)
 8012a6a:	691b      	ldr	r3, [r3, #16]
 8012a6c:	4a03      	ldr	r2, [pc, #12]	@ (8012a7c <HAL_PCD_SuspendCallback+0x48>)
 8012a6e:	f043 0306 	orr.w	r3, r3, #6
 8012a72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012a74:	bf00      	nop
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	e000ed00 	.word	0xe000ed00

08012a80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe fcbb 	bl	801140a <USBD_LL_Resume>
}
 8012a94:	bf00      	nop
 8012a96:	3708      	adds	r7, #8
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012aae:	78fa      	ldrb	r2, [r7, #3]
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe fd13 	bl	80114de <USBD_LL_IsoOUTIncomplete>
}
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	460b      	mov	r3, r1
 8012aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012ad2:	78fa      	ldrb	r2, [r7, #3]
 8012ad4:	4611      	mov	r1, r2
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fe fccf 	bl	801147a <USBD_LL_IsoINIncomplete>
}
 8012adc:	bf00      	nop
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe fd25 	bl	8011542 <USBD_LL_DevConnected>
}
 8012af8:	bf00      	nop
 8012afa:	3708      	adds	r7, #8
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fe fd22 	bl	8011558 <USBD_LL_DevDisconnected>
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d140      	bne.n	8012bae <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012b2c:	4a22      	ldr	r2, [pc, #136]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4a20      	ldr	r2, [pc, #128]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8012bbc <USBD_LL_Init+0xa0>)
 8012b40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012b42:	4b1d      	ldr	r3, [pc, #116]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b44:	2209      	movs	r2, #9
 8012b46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012b48:	4b1b      	ldr	r3, [pc, #108]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b50:	2200      	movs	r2, #0
 8012b52:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012b54:	4b18      	ldr	r3, [pc, #96]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b56:	2202      	movs	r2, #2
 8012b58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012b5a:	4b17      	ldr	r3, [pc, #92]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012b60:	4b15      	ldr	r3, [pc, #84]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012b66:	4b14      	ldr	r3, [pc, #80]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012b6c:	4b12      	ldr	r3, [pc, #72]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b6e:	2200      	movs	r2, #0
 8012b70:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012b72:	4b11      	ldr	r3, [pc, #68]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b74:	2200      	movs	r2, #0
 8012b76:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012b78:	4b0f      	ldr	r3, [pc, #60]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012b7e:	480e      	ldr	r0, [pc, #56]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b80:	f7f4 fcad 	bl	80074de <HAL_PCD_Init>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012b8a:	f7ee fe6b 	bl	8001864 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012b92:	4809      	ldr	r0, [pc, #36]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b94:	f7f5 ff01 	bl	800899a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012b98:	2280      	movs	r2, #128	@ 0x80
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	4806      	ldr	r0, [pc, #24]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012b9e:	f7f5 feb5 	bl	800890c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012ba2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8012ba6:	2101      	movs	r1, #1
 8012ba8:	4803      	ldr	r0, [pc, #12]	@ (8012bb8 <USBD_LL_Init+0x9c>)
 8012baa:	f7f5 feaf 	bl	800890c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	24004368 	.word	0x24004368
 8012bbc:	40040000 	.word	0x40040000

08012bc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7f4 fd8d 	bl	80076f6 <HAL_PCD_Start>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012be0:	7bfb      	ldrb	r3, [r7, #15]
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 f942 	bl	8012e6c <USBD_Get_USB_Status>
 8012be8:	4603      	mov	r3, r0
 8012bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b084      	sub	sp, #16
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
 8012bfe:	4608      	mov	r0, r1
 8012c00:	4611      	mov	r1, r2
 8012c02:	461a      	mov	r2, r3
 8012c04:	4603      	mov	r3, r0
 8012c06:	70fb      	strb	r3, [r7, #3]
 8012c08:	460b      	mov	r3, r1
 8012c0a:	70bb      	strb	r3, [r7, #2]
 8012c0c:	4613      	mov	r3, r2
 8012c0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c10:	2300      	movs	r3, #0
 8012c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c14:	2300      	movs	r3, #0
 8012c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012c1e:	78bb      	ldrb	r3, [r7, #2]
 8012c20:	883a      	ldrh	r2, [r7, #0]
 8012c22:	78f9      	ldrb	r1, [r7, #3]
 8012c24:	f7f5 fa8e 	bl	8008144 <HAL_PCD_EP_Open>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 f91c 	bl	8012e6c <USBD_Get_USB_Status>
 8012c34:	4603      	mov	r3, r0
 8012c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3710      	adds	r7, #16
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c42:	b580      	push	{r7, lr}
 8012c44:	b084      	sub	sp, #16
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c52:	2300      	movs	r3, #0
 8012c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012c5c:	78fa      	ldrb	r2, [r7, #3]
 8012c5e:	4611      	mov	r1, r2
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7f5 fad7 	bl	8008214 <HAL_PCD_EP_Close>
 8012c66:	4603      	mov	r3, r0
 8012c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c6a:	7bfb      	ldrb	r3, [r7, #15]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 f8fd 	bl	8012e6c <USBD_Get_USB_Status>
 8012c72:	4603      	mov	r3, r0
 8012c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c90:	2300      	movs	r3, #0
 8012c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012c9a:	78fa      	ldrb	r2, [r7, #3]
 8012c9c:	4611      	mov	r1, r2
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f5 fb8f 	bl	80083c2 <HAL_PCD_EP_SetStall>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 f8de 	bl	8012e6c <USBD_Get_USB_Status>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012cd8:	78fa      	ldrb	r2, [r7, #3]
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7f5 fbd3 	bl	8008488 <HAL_PCD_EP_ClrStall>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ce6:	7bfb      	ldrb	r3, [r7, #15]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f000 f8bf 	bl	8012e6c <USBD_Get_USB_Status>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3710      	adds	r7, #16
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	460b      	mov	r3, r1
 8012d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	da0b      	bge.n	8012d30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012d18:	78fb      	ldrb	r3, [r7, #3]
 8012d1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d1e:	68f9      	ldr	r1, [r7, #12]
 8012d20:	4613      	mov	r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	4413      	add	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	440b      	add	r3, r1
 8012d2a:	3316      	adds	r3, #22
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	e00b      	b.n	8012d48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012d30:	78fb      	ldrb	r3, [r7, #3]
 8012d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d36:	68f9      	ldr	r1, [r7, #12]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	4413      	add	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	440b      	add	r3, r1
 8012d42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3714      	adds	r7, #20
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d60:	2300      	movs	r3, #0
 8012d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d64:	2300      	movs	r3, #0
 8012d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012d6e:	78fa      	ldrb	r2, [r7, #3]
 8012d70:	4611      	mov	r1, r2
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7f5 f9c2 	bl	80080fc <HAL_PCD_SetAddress>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d7c:	7bfb      	ldrb	r3, [r7, #15]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f000 f874 	bl	8012e6c <USBD_Get_USB_Status>
 8012d84:	4603      	mov	r3, r0
 8012d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}

08012d92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012d92:	b580      	push	{r7, lr}
 8012d94:	b086      	sub	sp, #24
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	60f8      	str	r0, [r7, #12]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	603b      	str	r3, [r7, #0]
 8012d9e:	460b      	mov	r3, r1
 8012da0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012da2:	2300      	movs	r3, #0
 8012da4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012db0:	7af9      	ldrb	r1, [r7, #11]
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	f7f5 faca 	bl	800834e <HAL_PCD_EP_Transmit>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012dbe:	7dfb      	ldrb	r3, [r7, #23]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f000 f853 	bl	8012e6c <USBD_Get_USB_Status>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012dca:	7dbb      	ldrb	r3, [r7, #22]
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3718      	adds	r7, #24
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	607a      	str	r2, [r7, #4]
 8012dde:	603b      	str	r3, [r7, #0]
 8012de0:	460b      	mov	r3, r1
 8012de2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012de4:	2300      	movs	r3, #0
 8012de6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012de8:	2300      	movs	r3, #0
 8012dea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012df2:	7af9      	ldrb	r1, [r7, #11]
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	f7f5 fa56 	bl	80082a8 <HAL_PCD_EP_Receive>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e00:	7dfb      	ldrb	r3, [r7, #23]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f000 f832 	bl	8012e6c <USBD_Get_USB_Status>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3718      	adds	r7, #24
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b082      	sub	sp, #8
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	460b      	mov	r3, r1
 8012e20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012e28:	78fa      	ldrb	r2, [r7, #3]
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f5 fa76 	bl	800831e <HAL_PCD_EP_GetRxCount>
 8012e32:	4603      	mov	r3, r0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012e44:	4b03      	ldr	r3, [pc, #12]	@ (8012e54 <USBD_static_malloc+0x18>)
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	2400484c 	.word	0x2400484c

08012e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b085      	sub	sp, #20
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	4603      	mov	r3, r0
 8012e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	2b03      	cmp	r3, #3
 8012e7e:	d817      	bhi.n	8012eb0 <USBD_Get_USB_Status+0x44>
 8012e80:	a201      	add	r2, pc, #4	@ (adr r2, 8012e88 <USBD_Get_USB_Status+0x1c>)
 8012e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e86:	bf00      	nop
 8012e88:	08012e99 	.word	0x08012e99
 8012e8c:	08012e9f 	.word	0x08012e9f
 8012e90:	08012ea5 	.word	0x08012ea5
 8012e94:	08012eab 	.word	0x08012eab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e9c:	e00b      	b.n	8012eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e9e:	2303      	movs	r3, #3
 8012ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8012ea2:	e008      	b.n	8012eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8012ea8:	e005      	b.n	8012eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012eaa:	2303      	movs	r3, #3
 8012eac:	73fb      	strb	r3, [r7, #15]
    break;
 8012eae:	e002      	b.n	8012eb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012eb0:	2303      	movs	r3, #3
 8012eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8012eb4:	bf00      	nop
  }
  return usb_status;
 8012eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3714      	adds	r7, #20
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <atof>:
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	f000 bdb1 	b.w	8013a2c <strtod>

08012eca <sulp>:
 8012eca:	b570      	push	{r4, r5, r6, lr}
 8012ecc:	4604      	mov	r4, r0
 8012ece:	460d      	mov	r5, r1
 8012ed0:	4616      	mov	r6, r2
 8012ed2:	ec45 4b10 	vmov	d0, r4, r5
 8012ed6:	f003 f965 	bl	80161a4 <__ulp>
 8012eda:	b17e      	cbz	r6, 8012efc <sulp+0x32>
 8012edc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012ee0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	dd09      	ble.n	8012efc <sulp+0x32>
 8012ee8:	051b      	lsls	r3, r3, #20
 8012eea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012ef4:	ec41 0b17 	vmov	d7, r0, r1
 8012ef8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012efc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f00 <_strtod_l>:
 8012f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f04:	ed2d 8b0a 	vpush	{d8-d12}
 8012f08:	b097      	sub	sp, #92	@ 0x5c
 8012f0a:	4688      	mov	r8, r1
 8012f0c:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f0e:	2200      	movs	r2, #0
 8012f10:	9212      	str	r2, [sp, #72]	@ 0x48
 8012f12:	9005      	str	r0, [sp, #20]
 8012f14:	f04f 0a00 	mov.w	sl, #0
 8012f18:	f04f 0b00 	mov.w	fp, #0
 8012f1c:	460a      	mov	r2, r1
 8012f1e:	9211      	str	r2, [sp, #68]	@ 0x44
 8012f20:	7811      	ldrb	r1, [r2, #0]
 8012f22:	292b      	cmp	r1, #43	@ 0x2b
 8012f24:	d04c      	beq.n	8012fc0 <_strtod_l+0xc0>
 8012f26:	d839      	bhi.n	8012f9c <_strtod_l+0x9c>
 8012f28:	290d      	cmp	r1, #13
 8012f2a:	d833      	bhi.n	8012f94 <_strtod_l+0x94>
 8012f2c:	2908      	cmp	r1, #8
 8012f2e:	d833      	bhi.n	8012f98 <_strtod_l+0x98>
 8012f30:	2900      	cmp	r1, #0
 8012f32:	d03c      	beq.n	8012fae <_strtod_l+0xae>
 8012f34:	2200      	movs	r2, #0
 8012f36:	9208      	str	r2, [sp, #32]
 8012f38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012f3a:	782a      	ldrb	r2, [r5, #0]
 8012f3c:	2a30      	cmp	r2, #48	@ 0x30
 8012f3e:	f040 80b5 	bne.w	80130ac <_strtod_l+0x1ac>
 8012f42:	786a      	ldrb	r2, [r5, #1]
 8012f44:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012f48:	2a58      	cmp	r2, #88	@ 0x58
 8012f4a:	d170      	bne.n	801302e <_strtod_l+0x12e>
 8012f4c:	9302      	str	r3, [sp, #8]
 8012f4e:	9b08      	ldr	r3, [sp, #32]
 8012f50:	9301      	str	r3, [sp, #4]
 8012f52:	ab12      	add	r3, sp, #72	@ 0x48
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	4a8b      	ldr	r2, [pc, #556]	@ (8013184 <_strtod_l+0x284>)
 8012f58:	9805      	ldr	r0, [sp, #20]
 8012f5a:	ab13      	add	r3, sp, #76	@ 0x4c
 8012f5c:	a911      	add	r1, sp, #68	@ 0x44
 8012f5e:	f002 fa13 	bl	8015388 <__gethex>
 8012f62:	f010 060f 	ands.w	r6, r0, #15
 8012f66:	4604      	mov	r4, r0
 8012f68:	d005      	beq.n	8012f76 <_strtod_l+0x76>
 8012f6a:	2e06      	cmp	r6, #6
 8012f6c:	d12a      	bne.n	8012fc4 <_strtod_l+0xc4>
 8012f6e:	3501      	adds	r5, #1
 8012f70:	2300      	movs	r3, #0
 8012f72:	9511      	str	r5, [sp, #68]	@ 0x44
 8012f74:	9308      	str	r3, [sp, #32]
 8012f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f040 852f 	bne.w	80139dc <_strtod_l+0xadc>
 8012f7e:	9b08      	ldr	r3, [sp, #32]
 8012f80:	ec4b ab10 	vmov	d0, sl, fp
 8012f84:	b1cb      	cbz	r3, 8012fba <_strtod_l+0xba>
 8012f86:	eeb1 0b40 	vneg.f64	d0, d0
 8012f8a:	b017      	add	sp, #92	@ 0x5c
 8012f8c:	ecbd 8b0a 	vpop	{d8-d12}
 8012f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f94:	2920      	cmp	r1, #32
 8012f96:	d1cd      	bne.n	8012f34 <_strtod_l+0x34>
 8012f98:	3201      	adds	r2, #1
 8012f9a:	e7c0      	b.n	8012f1e <_strtod_l+0x1e>
 8012f9c:	292d      	cmp	r1, #45	@ 0x2d
 8012f9e:	d1c9      	bne.n	8012f34 <_strtod_l+0x34>
 8012fa0:	2101      	movs	r1, #1
 8012fa2:	9108      	str	r1, [sp, #32]
 8012fa4:	1c51      	adds	r1, r2, #1
 8012fa6:	9111      	str	r1, [sp, #68]	@ 0x44
 8012fa8:	7852      	ldrb	r2, [r2, #1]
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	d1c4      	bne.n	8012f38 <_strtod_l+0x38>
 8012fae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fb0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f040 850f 	bne.w	80139d8 <_strtod_l+0xad8>
 8012fba:	ec4b ab10 	vmov	d0, sl, fp
 8012fbe:	e7e4      	b.n	8012f8a <_strtod_l+0x8a>
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	e7ee      	b.n	8012fa2 <_strtod_l+0xa2>
 8012fc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012fc6:	b13a      	cbz	r2, 8012fd8 <_strtod_l+0xd8>
 8012fc8:	2135      	movs	r1, #53	@ 0x35
 8012fca:	a814      	add	r0, sp, #80	@ 0x50
 8012fcc:	f003 f9e1 	bl	8016392 <__copybits>
 8012fd0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012fd2:	9805      	ldr	r0, [sp, #20]
 8012fd4:	f002 fdb2 	bl	8015b3c <_Bfree>
 8012fd8:	1e73      	subs	r3, r6, #1
 8012fda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012fdc:	2b04      	cmp	r3, #4
 8012fde:	d806      	bhi.n	8012fee <_strtod_l+0xee>
 8012fe0:	e8df f003 	tbb	[pc, r3]
 8012fe4:	201d0314 	.word	0x201d0314
 8012fe8:	14          	.byte	0x14
 8012fe9:	00          	.byte	0x00
 8012fea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012fee:	05e3      	lsls	r3, r4, #23
 8012ff0:	bf48      	it	mi
 8012ff2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012ff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012ffa:	0d1b      	lsrs	r3, r3, #20
 8012ffc:	051b      	lsls	r3, r3, #20
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1b9      	bne.n	8012f76 <_strtod_l+0x76>
 8013002:	f001 faeb 	bl	80145dc <__errno>
 8013006:	2322      	movs	r3, #34	@ 0x22
 8013008:	6003      	str	r3, [r0, #0]
 801300a:	e7b4      	b.n	8012f76 <_strtod_l+0x76>
 801300c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013010:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013014:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013018:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801301c:	e7e7      	b.n	8012fee <_strtod_l+0xee>
 801301e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801318c <_strtod_l+0x28c>
 8013022:	e7e4      	b.n	8012fee <_strtod_l+0xee>
 8013024:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013028:	f04f 3aff 	mov.w	sl, #4294967295
 801302c:	e7df      	b.n	8012fee <_strtod_l+0xee>
 801302e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013030:	1c5a      	adds	r2, r3, #1
 8013032:	9211      	str	r2, [sp, #68]	@ 0x44
 8013034:	785b      	ldrb	r3, [r3, #1]
 8013036:	2b30      	cmp	r3, #48	@ 0x30
 8013038:	d0f9      	beq.n	801302e <_strtod_l+0x12e>
 801303a:	2b00      	cmp	r3, #0
 801303c:	d09b      	beq.n	8012f76 <_strtod_l+0x76>
 801303e:	2301      	movs	r3, #1
 8013040:	2600      	movs	r6, #0
 8013042:	9307      	str	r3, [sp, #28]
 8013044:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013046:	930a      	str	r3, [sp, #40]	@ 0x28
 8013048:	46b1      	mov	r9, r6
 801304a:	4635      	mov	r5, r6
 801304c:	220a      	movs	r2, #10
 801304e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013050:	7804      	ldrb	r4, [r0, #0]
 8013052:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013056:	b2d9      	uxtb	r1, r3
 8013058:	2909      	cmp	r1, #9
 801305a:	d929      	bls.n	80130b0 <_strtod_l+0x1b0>
 801305c:	494a      	ldr	r1, [pc, #296]	@ (8013188 <_strtod_l+0x288>)
 801305e:	2201      	movs	r2, #1
 8013060:	f001 fa60 	bl	8014524 <strncmp>
 8013064:	b378      	cbz	r0, 80130c6 <_strtod_l+0x1c6>
 8013066:	2000      	movs	r0, #0
 8013068:	4622      	mov	r2, r4
 801306a:	462b      	mov	r3, r5
 801306c:	4607      	mov	r7, r0
 801306e:	9006      	str	r0, [sp, #24]
 8013070:	2a65      	cmp	r2, #101	@ 0x65
 8013072:	d001      	beq.n	8013078 <_strtod_l+0x178>
 8013074:	2a45      	cmp	r2, #69	@ 0x45
 8013076:	d117      	bne.n	80130a8 <_strtod_l+0x1a8>
 8013078:	b91b      	cbnz	r3, 8013082 <_strtod_l+0x182>
 801307a:	9b07      	ldr	r3, [sp, #28]
 801307c:	4303      	orrs	r3, r0
 801307e:	d096      	beq.n	8012fae <_strtod_l+0xae>
 8013080:	2300      	movs	r3, #0
 8013082:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013086:	f108 0201 	add.w	r2, r8, #1
 801308a:	9211      	str	r2, [sp, #68]	@ 0x44
 801308c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013090:	2a2b      	cmp	r2, #43	@ 0x2b
 8013092:	d06b      	beq.n	801316c <_strtod_l+0x26c>
 8013094:	2a2d      	cmp	r2, #45	@ 0x2d
 8013096:	d071      	beq.n	801317c <_strtod_l+0x27c>
 8013098:	f04f 0e00 	mov.w	lr, #0
 801309c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80130a0:	2c09      	cmp	r4, #9
 80130a2:	d979      	bls.n	8013198 <_strtod_l+0x298>
 80130a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80130a8:	2400      	movs	r4, #0
 80130aa:	e094      	b.n	80131d6 <_strtod_l+0x2d6>
 80130ac:	2300      	movs	r3, #0
 80130ae:	e7c7      	b.n	8013040 <_strtod_l+0x140>
 80130b0:	2d08      	cmp	r5, #8
 80130b2:	f100 0001 	add.w	r0, r0, #1
 80130b6:	bfd4      	ite	le
 80130b8:	fb02 3909 	mlale	r9, r2, r9, r3
 80130bc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80130c0:	3501      	adds	r5, #1
 80130c2:	9011      	str	r0, [sp, #68]	@ 0x44
 80130c4:	e7c3      	b.n	801304e <_strtod_l+0x14e>
 80130c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80130c8:	1c5a      	adds	r2, r3, #1
 80130ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80130cc:	785a      	ldrb	r2, [r3, #1]
 80130ce:	b375      	cbz	r5, 801312e <_strtod_l+0x22e>
 80130d0:	4607      	mov	r7, r0
 80130d2:	462b      	mov	r3, r5
 80130d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80130d8:	2909      	cmp	r1, #9
 80130da:	d913      	bls.n	8013104 <_strtod_l+0x204>
 80130dc:	2101      	movs	r1, #1
 80130de:	9106      	str	r1, [sp, #24]
 80130e0:	e7c6      	b.n	8013070 <_strtod_l+0x170>
 80130e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80130e4:	1c5a      	adds	r2, r3, #1
 80130e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80130e8:	785a      	ldrb	r2, [r3, #1]
 80130ea:	3001      	adds	r0, #1
 80130ec:	2a30      	cmp	r2, #48	@ 0x30
 80130ee:	d0f8      	beq.n	80130e2 <_strtod_l+0x1e2>
 80130f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80130f4:	2b08      	cmp	r3, #8
 80130f6:	f200 8476 	bhi.w	80139e6 <_strtod_l+0xae6>
 80130fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80130fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80130fe:	4607      	mov	r7, r0
 8013100:	2000      	movs	r0, #0
 8013102:	4603      	mov	r3, r0
 8013104:	3a30      	subs	r2, #48	@ 0x30
 8013106:	f100 0101 	add.w	r1, r0, #1
 801310a:	d023      	beq.n	8013154 <_strtod_l+0x254>
 801310c:	440f      	add	r7, r1
 801310e:	eb00 0c03 	add.w	ip, r0, r3
 8013112:	4619      	mov	r1, r3
 8013114:	240a      	movs	r4, #10
 8013116:	4561      	cmp	r1, ip
 8013118:	d10b      	bne.n	8013132 <_strtod_l+0x232>
 801311a:	1c5c      	adds	r4, r3, #1
 801311c:	4403      	add	r3, r0
 801311e:	2b08      	cmp	r3, #8
 8013120:	4404      	add	r4, r0
 8013122:	dc11      	bgt.n	8013148 <_strtod_l+0x248>
 8013124:	230a      	movs	r3, #10
 8013126:	fb03 2909 	mla	r9, r3, r9, r2
 801312a:	2100      	movs	r1, #0
 801312c:	e013      	b.n	8013156 <_strtod_l+0x256>
 801312e:	4628      	mov	r0, r5
 8013130:	e7dc      	b.n	80130ec <_strtod_l+0x1ec>
 8013132:	2908      	cmp	r1, #8
 8013134:	f101 0101 	add.w	r1, r1, #1
 8013138:	dc02      	bgt.n	8013140 <_strtod_l+0x240>
 801313a:	fb04 f909 	mul.w	r9, r4, r9
 801313e:	e7ea      	b.n	8013116 <_strtod_l+0x216>
 8013140:	2910      	cmp	r1, #16
 8013142:	bfd8      	it	le
 8013144:	4366      	mulle	r6, r4
 8013146:	e7e6      	b.n	8013116 <_strtod_l+0x216>
 8013148:	2b0f      	cmp	r3, #15
 801314a:	dcee      	bgt.n	801312a <_strtod_l+0x22a>
 801314c:	230a      	movs	r3, #10
 801314e:	fb03 2606 	mla	r6, r3, r6, r2
 8013152:	e7ea      	b.n	801312a <_strtod_l+0x22a>
 8013154:	461c      	mov	r4, r3
 8013156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013158:	1c5a      	adds	r2, r3, #1
 801315a:	9211      	str	r2, [sp, #68]	@ 0x44
 801315c:	785a      	ldrb	r2, [r3, #1]
 801315e:	4608      	mov	r0, r1
 8013160:	4623      	mov	r3, r4
 8013162:	e7b7      	b.n	80130d4 <_strtod_l+0x1d4>
 8013164:	2301      	movs	r3, #1
 8013166:	2700      	movs	r7, #0
 8013168:	9306      	str	r3, [sp, #24]
 801316a:	e786      	b.n	801307a <_strtod_l+0x17a>
 801316c:	f04f 0e00 	mov.w	lr, #0
 8013170:	f108 0202 	add.w	r2, r8, #2
 8013174:	9211      	str	r2, [sp, #68]	@ 0x44
 8013176:	f898 2002 	ldrb.w	r2, [r8, #2]
 801317a:	e78f      	b.n	801309c <_strtod_l+0x19c>
 801317c:	f04f 0e01 	mov.w	lr, #1
 8013180:	e7f6      	b.n	8013170 <_strtod_l+0x270>
 8013182:	bf00      	nop
 8013184:	080171d8 	.word	0x080171d8
 8013188:	080171c0 	.word	0x080171c0
 801318c:	7ff00000 	.word	0x7ff00000
 8013190:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013192:	1c54      	adds	r4, r2, #1
 8013194:	9411      	str	r4, [sp, #68]	@ 0x44
 8013196:	7852      	ldrb	r2, [r2, #1]
 8013198:	2a30      	cmp	r2, #48	@ 0x30
 801319a:	d0f9      	beq.n	8013190 <_strtod_l+0x290>
 801319c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80131a0:	2c08      	cmp	r4, #8
 80131a2:	d881      	bhi.n	80130a8 <_strtod_l+0x1a8>
 80131a4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80131a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80131aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80131ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80131ae:	1c51      	adds	r1, r2, #1
 80131b0:	9111      	str	r1, [sp, #68]	@ 0x44
 80131b2:	7852      	ldrb	r2, [r2, #1]
 80131b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80131b8:	2c09      	cmp	r4, #9
 80131ba:	d938      	bls.n	801322e <_strtod_l+0x32e>
 80131bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80131be:	1b0c      	subs	r4, r1, r4
 80131c0:	2c08      	cmp	r4, #8
 80131c2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80131c6:	dc02      	bgt.n	80131ce <_strtod_l+0x2ce>
 80131c8:	4564      	cmp	r4, ip
 80131ca:	bfa8      	it	ge
 80131cc:	4664      	movge	r4, ip
 80131ce:	f1be 0f00 	cmp.w	lr, #0
 80131d2:	d000      	beq.n	80131d6 <_strtod_l+0x2d6>
 80131d4:	4264      	negs	r4, r4
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d14e      	bne.n	8013278 <_strtod_l+0x378>
 80131da:	9b07      	ldr	r3, [sp, #28]
 80131dc:	4318      	orrs	r0, r3
 80131de:	f47f aeca 	bne.w	8012f76 <_strtod_l+0x76>
 80131e2:	9b06      	ldr	r3, [sp, #24]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f47f aee2 	bne.w	8012fae <_strtod_l+0xae>
 80131ea:	2a69      	cmp	r2, #105	@ 0x69
 80131ec:	d027      	beq.n	801323e <_strtod_l+0x33e>
 80131ee:	dc24      	bgt.n	801323a <_strtod_l+0x33a>
 80131f0:	2a49      	cmp	r2, #73	@ 0x49
 80131f2:	d024      	beq.n	801323e <_strtod_l+0x33e>
 80131f4:	2a4e      	cmp	r2, #78	@ 0x4e
 80131f6:	f47f aeda 	bne.w	8012fae <_strtod_l+0xae>
 80131fa:	4997      	ldr	r1, [pc, #604]	@ (8013458 <_strtod_l+0x558>)
 80131fc:	a811      	add	r0, sp, #68	@ 0x44
 80131fe:	f002 fae5 	bl	80157cc <__match>
 8013202:	2800      	cmp	r0, #0
 8013204:	f43f aed3 	beq.w	8012fae <_strtod_l+0xae>
 8013208:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b28      	cmp	r3, #40	@ 0x28
 801320e:	d12d      	bne.n	801326c <_strtod_l+0x36c>
 8013210:	4992      	ldr	r1, [pc, #584]	@ (801345c <_strtod_l+0x55c>)
 8013212:	aa14      	add	r2, sp, #80	@ 0x50
 8013214:	a811      	add	r0, sp, #68	@ 0x44
 8013216:	f002 faed 	bl	80157f4 <__hexnan>
 801321a:	2805      	cmp	r0, #5
 801321c:	d126      	bne.n	801326c <_strtod_l+0x36c>
 801321e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013220:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013224:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013228:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801322c:	e6a3      	b.n	8012f76 <_strtod_l+0x76>
 801322e:	240a      	movs	r4, #10
 8013230:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013234:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013238:	e7b8      	b.n	80131ac <_strtod_l+0x2ac>
 801323a:	2a6e      	cmp	r2, #110	@ 0x6e
 801323c:	e7db      	b.n	80131f6 <_strtod_l+0x2f6>
 801323e:	4988      	ldr	r1, [pc, #544]	@ (8013460 <_strtod_l+0x560>)
 8013240:	a811      	add	r0, sp, #68	@ 0x44
 8013242:	f002 fac3 	bl	80157cc <__match>
 8013246:	2800      	cmp	r0, #0
 8013248:	f43f aeb1 	beq.w	8012fae <_strtod_l+0xae>
 801324c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801324e:	4985      	ldr	r1, [pc, #532]	@ (8013464 <_strtod_l+0x564>)
 8013250:	3b01      	subs	r3, #1
 8013252:	a811      	add	r0, sp, #68	@ 0x44
 8013254:	9311      	str	r3, [sp, #68]	@ 0x44
 8013256:	f002 fab9 	bl	80157cc <__match>
 801325a:	b910      	cbnz	r0, 8013262 <_strtod_l+0x362>
 801325c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801325e:	3301      	adds	r3, #1
 8013260:	9311      	str	r3, [sp, #68]	@ 0x44
 8013262:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013478 <_strtod_l+0x578>
 8013266:	f04f 0a00 	mov.w	sl, #0
 801326a:	e684      	b.n	8012f76 <_strtod_l+0x76>
 801326c:	487e      	ldr	r0, [pc, #504]	@ (8013468 <_strtod_l+0x568>)
 801326e:	f001 f9f3 	bl	8014658 <nan>
 8013272:	ec5b ab10 	vmov	sl, fp, d0
 8013276:	e67e      	b.n	8012f76 <_strtod_l+0x76>
 8013278:	ee07 9a90 	vmov	s15, r9
 801327c:	1be2      	subs	r2, r4, r7
 801327e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013282:	2d00      	cmp	r5, #0
 8013284:	bf08      	it	eq
 8013286:	461d      	moveq	r5, r3
 8013288:	2b10      	cmp	r3, #16
 801328a:	9209      	str	r2, [sp, #36]	@ 0x24
 801328c:	461a      	mov	r2, r3
 801328e:	bfa8      	it	ge
 8013290:	2210      	movge	r2, #16
 8013292:	2b09      	cmp	r3, #9
 8013294:	ec5b ab17 	vmov	sl, fp, d7
 8013298:	dc15      	bgt.n	80132c6 <_strtod_l+0x3c6>
 801329a:	1be1      	subs	r1, r4, r7
 801329c:	2900      	cmp	r1, #0
 801329e:	f43f ae6a 	beq.w	8012f76 <_strtod_l+0x76>
 80132a2:	eba4 0107 	sub.w	r1, r4, r7
 80132a6:	dd72      	ble.n	801338e <_strtod_l+0x48e>
 80132a8:	2916      	cmp	r1, #22
 80132aa:	dc59      	bgt.n	8013360 <_strtod_l+0x460>
 80132ac:	4b6f      	ldr	r3, [pc, #444]	@ (801346c <_strtod_l+0x56c>)
 80132ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132b4:	ed93 7b00 	vldr	d7, [r3]
 80132b8:	ec4b ab16 	vmov	d6, sl, fp
 80132bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132c0:	ec5b ab17 	vmov	sl, fp, d7
 80132c4:	e657      	b.n	8012f76 <_strtod_l+0x76>
 80132c6:	4969      	ldr	r1, [pc, #420]	@ (801346c <_strtod_l+0x56c>)
 80132c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80132cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80132d0:	ee06 6a90 	vmov	s13, r6
 80132d4:	2b0f      	cmp	r3, #15
 80132d6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80132da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80132de:	ec5b ab16 	vmov	sl, fp, d6
 80132e2:	ddda      	ble.n	801329a <_strtod_l+0x39a>
 80132e4:	1a9a      	subs	r2, r3, r2
 80132e6:	1be1      	subs	r1, r4, r7
 80132e8:	440a      	add	r2, r1
 80132ea:	2a00      	cmp	r2, #0
 80132ec:	f340 8094 	ble.w	8013418 <_strtod_l+0x518>
 80132f0:	f012 000f 	ands.w	r0, r2, #15
 80132f4:	d00a      	beq.n	801330c <_strtod_l+0x40c>
 80132f6:	495d      	ldr	r1, [pc, #372]	@ (801346c <_strtod_l+0x56c>)
 80132f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80132fc:	ed91 7b00 	vldr	d7, [r1]
 8013300:	ec4b ab16 	vmov	d6, sl, fp
 8013304:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013308:	ec5b ab17 	vmov	sl, fp, d7
 801330c:	f032 020f 	bics.w	r2, r2, #15
 8013310:	d073      	beq.n	80133fa <_strtod_l+0x4fa>
 8013312:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013316:	dd47      	ble.n	80133a8 <_strtod_l+0x4a8>
 8013318:	2400      	movs	r4, #0
 801331a:	4625      	mov	r5, r4
 801331c:	9407      	str	r4, [sp, #28]
 801331e:	4626      	mov	r6, r4
 8013320:	9a05      	ldr	r2, [sp, #20]
 8013322:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013478 <_strtod_l+0x578>
 8013326:	2322      	movs	r3, #34	@ 0x22
 8013328:	6013      	str	r3, [r2, #0]
 801332a:	f04f 0a00 	mov.w	sl, #0
 801332e:	9b07      	ldr	r3, [sp, #28]
 8013330:	2b00      	cmp	r3, #0
 8013332:	f43f ae20 	beq.w	8012f76 <_strtod_l+0x76>
 8013336:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013338:	9805      	ldr	r0, [sp, #20]
 801333a:	f002 fbff 	bl	8015b3c <_Bfree>
 801333e:	9805      	ldr	r0, [sp, #20]
 8013340:	4631      	mov	r1, r6
 8013342:	f002 fbfb 	bl	8015b3c <_Bfree>
 8013346:	9805      	ldr	r0, [sp, #20]
 8013348:	4629      	mov	r1, r5
 801334a:	f002 fbf7 	bl	8015b3c <_Bfree>
 801334e:	9907      	ldr	r1, [sp, #28]
 8013350:	9805      	ldr	r0, [sp, #20]
 8013352:	f002 fbf3 	bl	8015b3c <_Bfree>
 8013356:	9805      	ldr	r0, [sp, #20]
 8013358:	4621      	mov	r1, r4
 801335a:	f002 fbef 	bl	8015b3c <_Bfree>
 801335e:	e60a      	b.n	8012f76 <_strtod_l+0x76>
 8013360:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013364:	1be0      	subs	r0, r4, r7
 8013366:	4281      	cmp	r1, r0
 8013368:	dbbc      	blt.n	80132e4 <_strtod_l+0x3e4>
 801336a:	4a40      	ldr	r2, [pc, #256]	@ (801346c <_strtod_l+0x56c>)
 801336c:	f1c3 030f 	rsb	r3, r3, #15
 8013370:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013374:	ed91 7b00 	vldr	d7, [r1]
 8013378:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801337a:	ec4b ab16 	vmov	d6, sl, fp
 801337e:	1acb      	subs	r3, r1, r3
 8013380:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013384:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013388:	ed92 6b00 	vldr	d6, [r2]
 801338c:	e796      	b.n	80132bc <_strtod_l+0x3bc>
 801338e:	3116      	adds	r1, #22
 8013390:	dba8      	blt.n	80132e4 <_strtod_l+0x3e4>
 8013392:	4b36      	ldr	r3, [pc, #216]	@ (801346c <_strtod_l+0x56c>)
 8013394:	1b3c      	subs	r4, r7, r4
 8013396:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801339a:	ed94 7b00 	vldr	d7, [r4]
 801339e:	ec4b ab16 	vmov	d6, sl, fp
 80133a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80133a6:	e78b      	b.n	80132c0 <_strtod_l+0x3c0>
 80133a8:	2000      	movs	r0, #0
 80133aa:	ec4b ab17 	vmov	d7, sl, fp
 80133ae:	4e30      	ldr	r6, [pc, #192]	@ (8013470 <_strtod_l+0x570>)
 80133b0:	1112      	asrs	r2, r2, #4
 80133b2:	4601      	mov	r1, r0
 80133b4:	2a01      	cmp	r2, #1
 80133b6:	dc23      	bgt.n	8013400 <_strtod_l+0x500>
 80133b8:	b108      	cbz	r0, 80133be <_strtod_l+0x4be>
 80133ba:	ec5b ab17 	vmov	sl, fp, d7
 80133be:	4a2c      	ldr	r2, [pc, #176]	@ (8013470 <_strtod_l+0x570>)
 80133c0:	482c      	ldr	r0, [pc, #176]	@ (8013474 <_strtod_l+0x574>)
 80133c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80133c6:	ed92 7b00 	vldr	d7, [r2]
 80133ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80133ce:	ec4b ab16 	vmov	d6, sl, fp
 80133d2:	4a29      	ldr	r2, [pc, #164]	@ (8013478 <_strtod_l+0x578>)
 80133d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133d8:	ee17 1a90 	vmov	r1, s15
 80133dc:	400a      	ands	r2, r1
 80133de:	4282      	cmp	r2, r0
 80133e0:	ec5b ab17 	vmov	sl, fp, d7
 80133e4:	d898      	bhi.n	8013318 <_strtod_l+0x418>
 80133e6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80133ea:	4282      	cmp	r2, r0
 80133ec:	bf86      	itte	hi
 80133ee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801347c <_strtod_l+0x57c>
 80133f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80133f6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80133fa:	2200      	movs	r2, #0
 80133fc:	9206      	str	r2, [sp, #24]
 80133fe:	e076      	b.n	80134ee <_strtod_l+0x5ee>
 8013400:	f012 0f01 	tst.w	r2, #1
 8013404:	d004      	beq.n	8013410 <_strtod_l+0x510>
 8013406:	ed96 6b00 	vldr	d6, [r6]
 801340a:	2001      	movs	r0, #1
 801340c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013410:	3101      	adds	r1, #1
 8013412:	1052      	asrs	r2, r2, #1
 8013414:	3608      	adds	r6, #8
 8013416:	e7cd      	b.n	80133b4 <_strtod_l+0x4b4>
 8013418:	d0ef      	beq.n	80133fa <_strtod_l+0x4fa>
 801341a:	4252      	negs	r2, r2
 801341c:	f012 000f 	ands.w	r0, r2, #15
 8013420:	d00a      	beq.n	8013438 <_strtod_l+0x538>
 8013422:	4912      	ldr	r1, [pc, #72]	@ (801346c <_strtod_l+0x56c>)
 8013424:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013428:	ed91 7b00 	vldr	d7, [r1]
 801342c:	ec4b ab16 	vmov	d6, sl, fp
 8013430:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013434:	ec5b ab17 	vmov	sl, fp, d7
 8013438:	1112      	asrs	r2, r2, #4
 801343a:	d0de      	beq.n	80133fa <_strtod_l+0x4fa>
 801343c:	2a1f      	cmp	r2, #31
 801343e:	dd1f      	ble.n	8013480 <_strtod_l+0x580>
 8013440:	2400      	movs	r4, #0
 8013442:	4625      	mov	r5, r4
 8013444:	9407      	str	r4, [sp, #28]
 8013446:	4626      	mov	r6, r4
 8013448:	9a05      	ldr	r2, [sp, #20]
 801344a:	2322      	movs	r3, #34	@ 0x22
 801344c:	f04f 0a00 	mov.w	sl, #0
 8013450:	f04f 0b00 	mov.w	fp, #0
 8013454:	6013      	str	r3, [r2, #0]
 8013456:	e76a      	b.n	801332e <_strtod_l+0x42e>
 8013458:	08017326 	.word	0x08017326
 801345c:	080171c4 	.word	0x080171c4
 8013460:	0801731e 	.word	0x0801731e
 8013464:	08017358 	.word	0x08017358
 8013468:	080175e4 	.word	0x080175e4
 801346c:	080174d0 	.word	0x080174d0
 8013470:	080174a8 	.word	0x080174a8
 8013474:	7ca00000 	.word	0x7ca00000
 8013478:	7ff00000 	.word	0x7ff00000
 801347c:	7fefffff 	.word	0x7fefffff
 8013480:	f012 0110 	ands.w	r1, r2, #16
 8013484:	bf18      	it	ne
 8013486:	216a      	movne	r1, #106	@ 0x6a
 8013488:	9106      	str	r1, [sp, #24]
 801348a:	ec4b ab17 	vmov	d7, sl, fp
 801348e:	49b0      	ldr	r1, [pc, #704]	@ (8013750 <_strtod_l+0x850>)
 8013490:	2000      	movs	r0, #0
 8013492:	07d6      	lsls	r6, r2, #31
 8013494:	d504      	bpl.n	80134a0 <_strtod_l+0x5a0>
 8013496:	ed91 6b00 	vldr	d6, [r1]
 801349a:	2001      	movs	r0, #1
 801349c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134a0:	1052      	asrs	r2, r2, #1
 80134a2:	f101 0108 	add.w	r1, r1, #8
 80134a6:	d1f4      	bne.n	8013492 <_strtod_l+0x592>
 80134a8:	b108      	cbz	r0, 80134ae <_strtod_l+0x5ae>
 80134aa:	ec5b ab17 	vmov	sl, fp, d7
 80134ae:	9a06      	ldr	r2, [sp, #24]
 80134b0:	b1b2      	cbz	r2, 80134e0 <_strtod_l+0x5e0>
 80134b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80134b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	4658      	mov	r0, fp
 80134be:	dd0f      	ble.n	80134e0 <_strtod_l+0x5e0>
 80134c0:	2a1f      	cmp	r2, #31
 80134c2:	dd55      	ble.n	8013570 <_strtod_l+0x670>
 80134c4:	2a34      	cmp	r2, #52	@ 0x34
 80134c6:	bfde      	ittt	le
 80134c8:	f04f 32ff 	movle.w	r2, #4294967295
 80134cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80134d0:	408a      	lslle	r2, r1
 80134d2:	f04f 0a00 	mov.w	sl, #0
 80134d6:	bfcc      	ite	gt
 80134d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80134dc:	ea02 0b00 	andle.w	fp, r2, r0
 80134e0:	ec4b ab17 	vmov	d7, sl, fp
 80134e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80134e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ec:	d0a8      	beq.n	8013440 <_strtod_l+0x540>
 80134ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80134f0:	9805      	ldr	r0, [sp, #20]
 80134f2:	f8cd 9000 	str.w	r9, [sp]
 80134f6:	462a      	mov	r2, r5
 80134f8:	f002 fb88 	bl	8015c0c <__s2b>
 80134fc:	9007      	str	r0, [sp, #28]
 80134fe:	2800      	cmp	r0, #0
 8013500:	f43f af0a 	beq.w	8013318 <_strtod_l+0x418>
 8013504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013506:	1b3f      	subs	r7, r7, r4
 8013508:	2b00      	cmp	r3, #0
 801350a:	bfb4      	ite	lt
 801350c:	463b      	movlt	r3, r7
 801350e:	2300      	movge	r3, #0
 8013510:	930a      	str	r3, [sp, #40]	@ 0x28
 8013512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013514:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8013740 <_strtod_l+0x840>
 8013518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801351c:	2400      	movs	r4, #0
 801351e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013520:	4625      	mov	r5, r4
 8013522:	9b07      	ldr	r3, [sp, #28]
 8013524:	9805      	ldr	r0, [sp, #20]
 8013526:	6859      	ldr	r1, [r3, #4]
 8013528:	f002 fac8 	bl	8015abc <_Balloc>
 801352c:	4606      	mov	r6, r0
 801352e:	2800      	cmp	r0, #0
 8013530:	f43f aef6 	beq.w	8013320 <_strtod_l+0x420>
 8013534:	9b07      	ldr	r3, [sp, #28]
 8013536:	691a      	ldr	r2, [r3, #16]
 8013538:	ec4b ab19 	vmov	d9, sl, fp
 801353c:	3202      	adds	r2, #2
 801353e:	f103 010c 	add.w	r1, r3, #12
 8013542:	0092      	lsls	r2, r2, #2
 8013544:	300c      	adds	r0, #12
 8013546:	f001 f876 	bl	8014636 <memcpy>
 801354a:	eeb0 0b49 	vmov.f64	d0, d9
 801354e:	9805      	ldr	r0, [sp, #20]
 8013550:	aa14      	add	r2, sp, #80	@ 0x50
 8013552:	a913      	add	r1, sp, #76	@ 0x4c
 8013554:	f002 fe96 	bl	8016284 <__d2b>
 8013558:	9012      	str	r0, [sp, #72]	@ 0x48
 801355a:	2800      	cmp	r0, #0
 801355c:	f43f aee0 	beq.w	8013320 <_strtod_l+0x420>
 8013560:	9805      	ldr	r0, [sp, #20]
 8013562:	2101      	movs	r1, #1
 8013564:	f002 fbe8 	bl	8015d38 <__i2b>
 8013568:	4605      	mov	r5, r0
 801356a:	b940      	cbnz	r0, 801357e <_strtod_l+0x67e>
 801356c:	2500      	movs	r5, #0
 801356e:	e6d7      	b.n	8013320 <_strtod_l+0x420>
 8013570:	f04f 31ff 	mov.w	r1, #4294967295
 8013574:	fa01 f202 	lsl.w	r2, r1, r2
 8013578:	ea02 0a0a 	and.w	sl, r2, sl
 801357c:	e7b0      	b.n	80134e0 <_strtod_l+0x5e0>
 801357e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013580:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013582:	2f00      	cmp	r7, #0
 8013584:	bfab      	itete	ge
 8013586:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013588:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801358a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801358e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013592:	bfac      	ite	ge
 8013594:	eb07 0903 	addge.w	r9, r7, r3
 8013598:	eba3 0807 	sublt.w	r8, r3, r7
 801359c:	9b06      	ldr	r3, [sp, #24]
 801359e:	1aff      	subs	r7, r7, r3
 80135a0:	4417      	add	r7, r2
 80135a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80135a6:	4a6b      	ldr	r2, [pc, #428]	@ (8013754 <_strtod_l+0x854>)
 80135a8:	3f01      	subs	r7, #1
 80135aa:	4297      	cmp	r7, r2
 80135ac:	da51      	bge.n	8013652 <_strtod_l+0x752>
 80135ae:	1bd1      	subs	r1, r2, r7
 80135b0:	291f      	cmp	r1, #31
 80135b2:	eba3 0301 	sub.w	r3, r3, r1
 80135b6:	f04f 0201 	mov.w	r2, #1
 80135ba:	dc3e      	bgt.n	801363a <_strtod_l+0x73a>
 80135bc:	408a      	lsls	r2, r1
 80135be:	920c      	str	r2, [sp, #48]	@ 0x30
 80135c0:	2200      	movs	r2, #0
 80135c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80135c4:	eb09 0703 	add.w	r7, r9, r3
 80135c8:	4498      	add	r8, r3
 80135ca:	9b06      	ldr	r3, [sp, #24]
 80135cc:	45b9      	cmp	r9, r7
 80135ce:	4498      	add	r8, r3
 80135d0:	464b      	mov	r3, r9
 80135d2:	bfa8      	it	ge
 80135d4:	463b      	movge	r3, r7
 80135d6:	4543      	cmp	r3, r8
 80135d8:	bfa8      	it	ge
 80135da:	4643      	movge	r3, r8
 80135dc:	2b00      	cmp	r3, #0
 80135de:	bfc2      	ittt	gt
 80135e0:	1aff      	subgt	r7, r7, r3
 80135e2:	eba8 0803 	subgt.w	r8, r8, r3
 80135e6:	eba9 0903 	subgt.w	r9, r9, r3
 80135ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	dd16      	ble.n	801361e <_strtod_l+0x71e>
 80135f0:	4629      	mov	r1, r5
 80135f2:	9805      	ldr	r0, [sp, #20]
 80135f4:	461a      	mov	r2, r3
 80135f6:	f002 fc5f 	bl	8015eb8 <__pow5mult>
 80135fa:	4605      	mov	r5, r0
 80135fc:	2800      	cmp	r0, #0
 80135fe:	d0b5      	beq.n	801356c <_strtod_l+0x66c>
 8013600:	4601      	mov	r1, r0
 8013602:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013604:	9805      	ldr	r0, [sp, #20]
 8013606:	f002 fbad 	bl	8015d64 <__multiply>
 801360a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801360c:	2800      	cmp	r0, #0
 801360e:	f43f ae87 	beq.w	8013320 <_strtod_l+0x420>
 8013612:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013614:	9805      	ldr	r0, [sp, #20]
 8013616:	f002 fa91 	bl	8015b3c <_Bfree>
 801361a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801361c:	9312      	str	r3, [sp, #72]	@ 0x48
 801361e:	2f00      	cmp	r7, #0
 8013620:	dc1b      	bgt.n	801365a <_strtod_l+0x75a>
 8013622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013624:	2b00      	cmp	r3, #0
 8013626:	dd21      	ble.n	801366c <_strtod_l+0x76c>
 8013628:	4631      	mov	r1, r6
 801362a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801362c:	9805      	ldr	r0, [sp, #20]
 801362e:	f002 fc43 	bl	8015eb8 <__pow5mult>
 8013632:	4606      	mov	r6, r0
 8013634:	b9d0      	cbnz	r0, 801366c <_strtod_l+0x76c>
 8013636:	2600      	movs	r6, #0
 8013638:	e672      	b.n	8013320 <_strtod_l+0x420>
 801363a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801363e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013642:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013646:	37e2      	adds	r7, #226	@ 0xe2
 8013648:	fa02 f107 	lsl.w	r1, r2, r7
 801364c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801364e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013650:	e7b8      	b.n	80135c4 <_strtod_l+0x6c4>
 8013652:	2200      	movs	r2, #0
 8013654:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013656:	2201      	movs	r2, #1
 8013658:	e7f9      	b.n	801364e <_strtod_l+0x74e>
 801365a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801365c:	9805      	ldr	r0, [sp, #20]
 801365e:	463a      	mov	r2, r7
 8013660:	f002 fc84 	bl	8015f6c <__lshift>
 8013664:	9012      	str	r0, [sp, #72]	@ 0x48
 8013666:	2800      	cmp	r0, #0
 8013668:	d1db      	bne.n	8013622 <_strtod_l+0x722>
 801366a:	e659      	b.n	8013320 <_strtod_l+0x420>
 801366c:	f1b8 0f00 	cmp.w	r8, #0
 8013670:	dd07      	ble.n	8013682 <_strtod_l+0x782>
 8013672:	4631      	mov	r1, r6
 8013674:	9805      	ldr	r0, [sp, #20]
 8013676:	4642      	mov	r2, r8
 8013678:	f002 fc78 	bl	8015f6c <__lshift>
 801367c:	4606      	mov	r6, r0
 801367e:	2800      	cmp	r0, #0
 8013680:	d0d9      	beq.n	8013636 <_strtod_l+0x736>
 8013682:	f1b9 0f00 	cmp.w	r9, #0
 8013686:	dd08      	ble.n	801369a <_strtod_l+0x79a>
 8013688:	4629      	mov	r1, r5
 801368a:	9805      	ldr	r0, [sp, #20]
 801368c:	464a      	mov	r2, r9
 801368e:	f002 fc6d 	bl	8015f6c <__lshift>
 8013692:	4605      	mov	r5, r0
 8013694:	2800      	cmp	r0, #0
 8013696:	f43f ae43 	beq.w	8013320 <_strtod_l+0x420>
 801369a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801369c:	9805      	ldr	r0, [sp, #20]
 801369e:	4632      	mov	r2, r6
 80136a0:	f002 fcec 	bl	801607c <__mdiff>
 80136a4:	4604      	mov	r4, r0
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f43f ae3a 	beq.w	8013320 <_strtod_l+0x420>
 80136ac:	2300      	movs	r3, #0
 80136ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80136b2:	60c3      	str	r3, [r0, #12]
 80136b4:	4629      	mov	r1, r5
 80136b6:	f002 fcc5 	bl	8016044 <__mcmp>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	da4e      	bge.n	801375c <_strtod_l+0x85c>
 80136be:	ea58 080a 	orrs.w	r8, r8, sl
 80136c2:	d174      	bne.n	80137ae <_strtod_l+0x8ae>
 80136c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d170      	bne.n	80137ae <_strtod_l+0x8ae>
 80136cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136d0:	0d1b      	lsrs	r3, r3, #20
 80136d2:	051b      	lsls	r3, r3, #20
 80136d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80136d8:	d969      	bls.n	80137ae <_strtod_l+0x8ae>
 80136da:	6963      	ldr	r3, [r4, #20]
 80136dc:	b913      	cbnz	r3, 80136e4 <_strtod_l+0x7e4>
 80136de:	6923      	ldr	r3, [r4, #16]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	dd64      	ble.n	80137ae <_strtod_l+0x8ae>
 80136e4:	4621      	mov	r1, r4
 80136e6:	2201      	movs	r2, #1
 80136e8:	9805      	ldr	r0, [sp, #20]
 80136ea:	f002 fc3f 	bl	8015f6c <__lshift>
 80136ee:	4629      	mov	r1, r5
 80136f0:	4604      	mov	r4, r0
 80136f2:	f002 fca7 	bl	8016044 <__mcmp>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	dd59      	ble.n	80137ae <_strtod_l+0x8ae>
 80136fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136fe:	9a06      	ldr	r2, [sp, #24]
 8013700:	0d1b      	lsrs	r3, r3, #20
 8013702:	051b      	lsls	r3, r3, #20
 8013704:	2a00      	cmp	r2, #0
 8013706:	d070      	beq.n	80137ea <_strtod_l+0x8ea>
 8013708:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801370c:	d86d      	bhi.n	80137ea <_strtod_l+0x8ea>
 801370e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013712:	f67f ae99 	bls.w	8013448 <_strtod_l+0x548>
 8013716:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013748 <_strtod_l+0x848>
 801371a:	ec4b ab16 	vmov	d6, sl, fp
 801371e:	4b0e      	ldr	r3, [pc, #56]	@ (8013758 <_strtod_l+0x858>)
 8013720:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013724:	ee17 2a90 	vmov	r2, s15
 8013728:	4013      	ands	r3, r2
 801372a:	ec5b ab17 	vmov	sl, fp, d7
 801372e:	2b00      	cmp	r3, #0
 8013730:	f47f ae01 	bne.w	8013336 <_strtod_l+0x436>
 8013734:	9a05      	ldr	r2, [sp, #20]
 8013736:	2322      	movs	r3, #34	@ 0x22
 8013738:	6013      	str	r3, [r2, #0]
 801373a:	e5fc      	b.n	8013336 <_strtod_l+0x436>
 801373c:	f3af 8000 	nop.w
 8013740:	ffc00000 	.word	0xffc00000
 8013744:	41dfffff 	.word	0x41dfffff
 8013748:	00000000 	.word	0x00000000
 801374c:	39500000 	.word	0x39500000
 8013750:	080171f0 	.word	0x080171f0
 8013754:	fffffc02 	.word	0xfffffc02
 8013758:	7ff00000 	.word	0x7ff00000
 801375c:	46d9      	mov	r9, fp
 801375e:	d15d      	bne.n	801381c <_strtod_l+0x91c>
 8013760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013764:	f1b8 0f00 	cmp.w	r8, #0
 8013768:	d02a      	beq.n	80137c0 <_strtod_l+0x8c0>
 801376a:	4aab      	ldr	r2, [pc, #684]	@ (8013a18 <_strtod_l+0xb18>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d12a      	bne.n	80137c6 <_strtod_l+0x8c6>
 8013770:	9b06      	ldr	r3, [sp, #24]
 8013772:	4652      	mov	r2, sl
 8013774:	b1fb      	cbz	r3, 80137b6 <_strtod_l+0x8b6>
 8013776:	4ba9      	ldr	r3, [pc, #676]	@ (8013a1c <_strtod_l+0xb1c>)
 8013778:	ea0b 0303 	and.w	r3, fp, r3
 801377c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013780:	f04f 31ff 	mov.w	r1, #4294967295
 8013784:	d81a      	bhi.n	80137bc <_strtod_l+0x8bc>
 8013786:	0d1b      	lsrs	r3, r3, #20
 8013788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801378c:	fa01 f303 	lsl.w	r3, r1, r3
 8013790:	429a      	cmp	r2, r3
 8013792:	d118      	bne.n	80137c6 <_strtod_l+0x8c6>
 8013794:	4ba2      	ldr	r3, [pc, #648]	@ (8013a20 <_strtod_l+0xb20>)
 8013796:	4599      	cmp	r9, r3
 8013798:	d102      	bne.n	80137a0 <_strtod_l+0x8a0>
 801379a:	3201      	adds	r2, #1
 801379c:	f43f adc0 	beq.w	8013320 <_strtod_l+0x420>
 80137a0:	4b9e      	ldr	r3, [pc, #632]	@ (8013a1c <_strtod_l+0xb1c>)
 80137a2:	ea09 0303 	and.w	r3, r9, r3
 80137a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80137aa:	f04f 0a00 	mov.w	sl, #0
 80137ae:	9b06      	ldr	r3, [sp, #24]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d1b0      	bne.n	8013716 <_strtod_l+0x816>
 80137b4:	e5bf      	b.n	8013336 <_strtod_l+0x436>
 80137b6:	f04f 33ff 	mov.w	r3, #4294967295
 80137ba:	e7e9      	b.n	8013790 <_strtod_l+0x890>
 80137bc:	460b      	mov	r3, r1
 80137be:	e7e7      	b.n	8013790 <_strtod_l+0x890>
 80137c0:	ea53 030a 	orrs.w	r3, r3, sl
 80137c4:	d099      	beq.n	80136fa <_strtod_l+0x7fa>
 80137c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137c8:	b1c3      	cbz	r3, 80137fc <_strtod_l+0x8fc>
 80137ca:	ea13 0f09 	tst.w	r3, r9
 80137ce:	d0ee      	beq.n	80137ae <_strtod_l+0x8ae>
 80137d0:	9a06      	ldr	r2, [sp, #24]
 80137d2:	4650      	mov	r0, sl
 80137d4:	4659      	mov	r1, fp
 80137d6:	f1b8 0f00 	cmp.w	r8, #0
 80137da:	d013      	beq.n	8013804 <_strtod_l+0x904>
 80137dc:	f7ff fb75 	bl	8012eca <sulp>
 80137e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80137e4:	ec5b ab17 	vmov	sl, fp, d7
 80137e8:	e7e1      	b.n	80137ae <_strtod_l+0x8ae>
 80137ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80137ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80137f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80137f6:	f04f 3aff 	mov.w	sl, #4294967295
 80137fa:	e7d8      	b.n	80137ae <_strtod_l+0x8ae>
 80137fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137fe:	ea13 0f0a 	tst.w	r3, sl
 8013802:	e7e4      	b.n	80137ce <_strtod_l+0x8ce>
 8013804:	f7ff fb61 	bl	8012eca <sulp>
 8013808:	ee39 0b40 	vsub.f64	d0, d9, d0
 801380c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013814:	ec5b ab10 	vmov	sl, fp, d0
 8013818:	d1c9      	bne.n	80137ae <_strtod_l+0x8ae>
 801381a:	e615      	b.n	8013448 <_strtod_l+0x548>
 801381c:	4629      	mov	r1, r5
 801381e:	4620      	mov	r0, r4
 8013820:	f002 fd88 	bl	8016334 <__ratio>
 8013824:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013828:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013830:	d85d      	bhi.n	80138ee <_strtod_l+0x9ee>
 8013832:	f1b8 0f00 	cmp.w	r8, #0
 8013836:	d164      	bne.n	8013902 <_strtod_l+0xa02>
 8013838:	f1ba 0f00 	cmp.w	sl, #0
 801383c:	d14b      	bne.n	80138d6 <_strtod_l+0x9d6>
 801383e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013842:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013846:	2b00      	cmp	r3, #0
 8013848:	d160      	bne.n	801390c <_strtod_l+0xa0c>
 801384a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801384e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013856:	d401      	bmi.n	801385c <_strtod_l+0x95c>
 8013858:	ee20 8b08 	vmul.f64	d8, d0, d8
 801385c:	eeb1 ab48 	vneg.f64	d10, d8
 8013860:	486e      	ldr	r0, [pc, #440]	@ (8013a1c <_strtod_l+0xb1c>)
 8013862:	4970      	ldr	r1, [pc, #448]	@ (8013a24 <_strtod_l+0xb24>)
 8013864:	ea09 0700 	and.w	r7, r9, r0
 8013868:	428f      	cmp	r7, r1
 801386a:	ec53 2b1a 	vmov	r2, r3, d10
 801386e:	d17d      	bne.n	801396c <_strtod_l+0xa6c>
 8013870:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013874:	ec4b ab1c 	vmov	d12, sl, fp
 8013878:	eeb0 0b4c 	vmov.f64	d0, d12
 801387c:	f002 fc92 	bl	80161a4 <__ulp>
 8013880:	4866      	ldr	r0, [pc, #408]	@ (8013a1c <_strtod_l+0xb1c>)
 8013882:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013886:	ee1c 3a90 	vmov	r3, s25
 801388a:	4a67      	ldr	r2, [pc, #412]	@ (8013a28 <_strtod_l+0xb28>)
 801388c:	ea03 0100 	and.w	r1, r3, r0
 8013890:	4291      	cmp	r1, r2
 8013892:	ec5b ab1c 	vmov	sl, fp, d12
 8013896:	d93c      	bls.n	8013912 <_strtod_l+0xa12>
 8013898:	ee19 2a90 	vmov	r2, s19
 801389c:	4b60      	ldr	r3, [pc, #384]	@ (8013a20 <_strtod_l+0xb20>)
 801389e:	429a      	cmp	r2, r3
 80138a0:	d104      	bne.n	80138ac <_strtod_l+0x9ac>
 80138a2:	ee19 3a10 	vmov	r3, s18
 80138a6:	3301      	adds	r3, #1
 80138a8:	f43f ad3a 	beq.w	8013320 <_strtod_l+0x420>
 80138ac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8013a20 <_strtod_l+0xb20>
 80138b0:	f04f 3aff 	mov.w	sl, #4294967295
 80138b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80138b6:	9805      	ldr	r0, [sp, #20]
 80138b8:	f002 f940 	bl	8015b3c <_Bfree>
 80138bc:	9805      	ldr	r0, [sp, #20]
 80138be:	4631      	mov	r1, r6
 80138c0:	f002 f93c 	bl	8015b3c <_Bfree>
 80138c4:	9805      	ldr	r0, [sp, #20]
 80138c6:	4629      	mov	r1, r5
 80138c8:	f002 f938 	bl	8015b3c <_Bfree>
 80138cc:	9805      	ldr	r0, [sp, #20]
 80138ce:	4621      	mov	r1, r4
 80138d0:	f002 f934 	bl	8015b3c <_Bfree>
 80138d4:	e625      	b.n	8013522 <_strtod_l+0x622>
 80138d6:	f1ba 0f01 	cmp.w	sl, #1
 80138da:	d103      	bne.n	80138e4 <_strtod_l+0x9e4>
 80138dc:	f1bb 0f00 	cmp.w	fp, #0
 80138e0:	f43f adb2 	beq.w	8013448 <_strtod_l+0x548>
 80138e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80138e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80138ec:	e7b8      	b.n	8013860 <_strtod_l+0x960>
 80138ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80138f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80138f6:	f1b8 0f00 	cmp.w	r8, #0
 80138fa:	d0af      	beq.n	801385c <_strtod_l+0x95c>
 80138fc:	eeb0 ab48 	vmov.f64	d10, d8
 8013900:	e7ae      	b.n	8013860 <_strtod_l+0x960>
 8013902:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013906:	eeb0 8b4a 	vmov.f64	d8, d10
 801390a:	e7a9      	b.n	8013860 <_strtod_l+0x960>
 801390c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013910:	e7a6      	b.n	8013860 <_strtod_l+0x960>
 8013912:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	46d9      	mov	r9, fp
 801391a:	2b00      	cmp	r3, #0
 801391c:	d1ca      	bne.n	80138b4 <_strtod_l+0x9b4>
 801391e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013922:	0d1b      	lsrs	r3, r3, #20
 8013924:	051b      	lsls	r3, r3, #20
 8013926:	429f      	cmp	r7, r3
 8013928:	d1c4      	bne.n	80138b4 <_strtod_l+0x9b4>
 801392a:	ec51 0b18 	vmov	r0, r1, d8
 801392e:	f7ec ff2b 	bl	8000788 <__aeabi_d2lz>
 8013932:	f7ec fee3 	bl	80006fc <__aeabi_l2d>
 8013936:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801393a:	ec41 0b17 	vmov	d7, r0, r1
 801393e:	ea49 090a 	orr.w	r9, r9, sl
 8013942:	ea59 0908 	orrs.w	r9, r9, r8
 8013946:	ee38 8b47 	vsub.f64	d8, d8, d7
 801394a:	d03c      	beq.n	80139c6 <_strtod_l+0xac6>
 801394c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013a00 <_strtod_l+0xb00>
 8013950:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013958:	f53f aced 	bmi.w	8013336 <_strtod_l+0x436>
 801395c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013a08 <_strtod_l+0xb08>
 8013960:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013968:	dda4      	ble.n	80138b4 <_strtod_l+0x9b4>
 801396a:	e4e4      	b.n	8013336 <_strtod_l+0x436>
 801396c:	9906      	ldr	r1, [sp, #24]
 801396e:	b1e1      	cbz	r1, 80139aa <_strtod_l+0xaaa>
 8013970:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8013974:	d819      	bhi.n	80139aa <_strtod_l+0xaaa>
 8013976:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801397e:	d811      	bhi.n	80139a4 <_strtod_l+0xaa4>
 8013980:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013984:	ee18 3a10 	vmov	r3, s16
 8013988:	2b01      	cmp	r3, #1
 801398a:	bf38      	it	cc
 801398c:	2301      	movcc	r3, #1
 801398e:	ee08 3a10 	vmov	s16, r3
 8013992:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013996:	f1b8 0f00 	cmp.w	r8, #0
 801399a:	d111      	bne.n	80139c0 <_strtod_l+0xac0>
 801399c:	eeb1 7b48 	vneg.f64	d7, d8
 80139a0:	ec53 2b17 	vmov	r2, r3, d7
 80139a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80139a8:	1bcb      	subs	r3, r1, r7
 80139aa:	eeb0 0b49 	vmov.f64	d0, d9
 80139ae:	ec43 2b1a 	vmov	d10, r2, r3
 80139b2:	f002 fbf7 	bl	80161a4 <__ulp>
 80139b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80139ba:	ec5b ab19 	vmov	sl, fp, d9
 80139be:	e7aa      	b.n	8013916 <_strtod_l+0xa16>
 80139c0:	eeb0 7b48 	vmov.f64	d7, d8
 80139c4:	e7ec      	b.n	80139a0 <_strtod_l+0xaa0>
 80139c6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013a10 <_strtod_l+0xb10>
 80139ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80139ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d2:	f57f af6f 	bpl.w	80138b4 <_strtod_l+0x9b4>
 80139d6:	e4ae      	b.n	8013336 <_strtod_l+0x436>
 80139d8:	2300      	movs	r3, #0
 80139da:	9308      	str	r3, [sp, #32]
 80139dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80139e0:	6013      	str	r3, [r2, #0]
 80139e2:	f7ff bacc 	b.w	8012f7e <_strtod_l+0x7e>
 80139e6:	2a65      	cmp	r2, #101	@ 0x65
 80139e8:	f43f abbc 	beq.w	8013164 <_strtod_l+0x264>
 80139ec:	2a45      	cmp	r2, #69	@ 0x45
 80139ee:	f43f abb9 	beq.w	8013164 <_strtod_l+0x264>
 80139f2:	2301      	movs	r3, #1
 80139f4:	9306      	str	r3, [sp, #24]
 80139f6:	f7ff bbf0 	b.w	80131da <_strtod_l+0x2da>
 80139fa:	bf00      	nop
 80139fc:	f3af 8000 	nop.w
 8013a00:	94a03595 	.word	0x94a03595
 8013a04:	3fdfffff 	.word	0x3fdfffff
 8013a08:	35afe535 	.word	0x35afe535
 8013a0c:	3fe00000 	.word	0x3fe00000
 8013a10:	94a03595 	.word	0x94a03595
 8013a14:	3fcfffff 	.word	0x3fcfffff
 8013a18:	000fffff 	.word	0x000fffff
 8013a1c:	7ff00000 	.word	0x7ff00000
 8013a20:	7fefffff 	.word	0x7fefffff
 8013a24:	7fe00000 	.word	0x7fe00000
 8013a28:	7c9fffff 	.word	0x7c9fffff

08013a2c <strtod>:
 8013a2c:	460a      	mov	r2, r1
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4802      	ldr	r0, [pc, #8]	@ (8013a3c <strtod+0x10>)
 8013a32:	4b03      	ldr	r3, [pc, #12]	@ (8013a40 <strtod+0x14>)
 8013a34:	6800      	ldr	r0, [r0, #0]
 8013a36:	f7ff ba63 	b.w	8012f00 <_strtod_l>
 8013a3a:	bf00      	nop
 8013a3c:	2400027c 	.word	0x2400027c
 8013a40:	24000110 	.word	0x24000110

08013a44 <__cvt>:
 8013a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a46:	ed2d 8b02 	vpush	{d8}
 8013a4a:	eeb0 8b40 	vmov.f64	d8, d0
 8013a4e:	b085      	sub	sp, #20
 8013a50:	4617      	mov	r7, r2
 8013a52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013a54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a56:	ee18 2a90 	vmov	r2, s17
 8013a5a:	f025 0520 	bic.w	r5, r5, #32
 8013a5e:	2a00      	cmp	r2, #0
 8013a60:	bfb6      	itet	lt
 8013a62:	222d      	movlt	r2, #45	@ 0x2d
 8013a64:	2200      	movge	r2, #0
 8013a66:	eeb1 8b40 	vneglt.f64	d8, d0
 8013a6a:	2d46      	cmp	r5, #70	@ 0x46
 8013a6c:	460c      	mov	r4, r1
 8013a6e:	701a      	strb	r2, [r3, #0]
 8013a70:	d004      	beq.n	8013a7c <__cvt+0x38>
 8013a72:	2d45      	cmp	r5, #69	@ 0x45
 8013a74:	d100      	bne.n	8013a78 <__cvt+0x34>
 8013a76:	3401      	adds	r4, #1
 8013a78:	2102      	movs	r1, #2
 8013a7a:	e000      	b.n	8013a7e <__cvt+0x3a>
 8013a7c:	2103      	movs	r1, #3
 8013a7e:	ab03      	add	r3, sp, #12
 8013a80:	9301      	str	r3, [sp, #4]
 8013a82:	ab02      	add	r3, sp, #8
 8013a84:	9300      	str	r3, [sp, #0]
 8013a86:	4622      	mov	r2, r4
 8013a88:	4633      	mov	r3, r6
 8013a8a:	eeb0 0b48 	vmov.f64	d0, d8
 8013a8e:	f000 fe73 	bl	8014778 <_dtoa_r>
 8013a92:	2d47      	cmp	r5, #71	@ 0x47
 8013a94:	d114      	bne.n	8013ac0 <__cvt+0x7c>
 8013a96:	07fb      	lsls	r3, r7, #31
 8013a98:	d50a      	bpl.n	8013ab0 <__cvt+0x6c>
 8013a9a:	1902      	adds	r2, r0, r4
 8013a9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa4:	bf08      	it	eq
 8013aa6:	9203      	streq	r2, [sp, #12]
 8013aa8:	2130      	movs	r1, #48	@ 0x30
 8013aaa:	9b03      	ldr	r3, [sp, #12]
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d319      	bcc.n	8013ae4 <__cvt+0xa0>
 8013ab0:	9b03      	ldr	r3, [sp, #12]
 8013ab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ab4:	1a1b      	subs	r3, r3, r0
 8013ab6:	6013      	str	r3, [r2, #0]
 8013ab8:	b005      	add	sp, #20
 8013aba:	ecbd 8b02 	vpop	{d8}
 8013abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ac0:	2d46      	cmp	r5, #70	@ 0x46
 8013ac2:	eb00 0204 	add.w	r2, r0, r4
 8013ac6:	d1e9      	bne.n	8013a9c <__cvt+0x58>
 8013ac8:	7803      	ldrb	r3, [r0, #0]
 8013aca:	2b30      	cmp	r3, #48	@ 0x30
 8013acc:	d107      	bne.n	8013ade <__cvt+0x9a>
 8013ace:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad6:	bf1c      	itt	ne
 8013ad8:	f1c4 0401 	rsbne	r4, r4, #1
 8013adc:	6034      	strne	r4, [r6, #0]
 8013ade:	6833      	ldr	r3, [r6, #0]
 8013ae0:	441a      	add	r2, r3
 8013ae2:	e7db      	b.n	8013a9c <__cvt+0x58>
 8013ae4:	1c5c      	adds	r4, r3, #1
 8013ae6:	9403      	str	r4, [sp, #12]
 8013ae8:	7019      	strb	r1, [r3, #0]
 8013aea:	e7de      	b.n	8013aaa <__cvt+0x66>

08013aec <__exponent>:
 8013aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013aee:	2900      	cmp	r1, #0
 8013af0:	bfba      	itte	lt
 8013af2:	4249      	neglt	r1, r1
 8013af4:	232d      	movlt	r3, #45	@ 0x2d
 8013af6:	232b      	movge	r3, #43	@ 0x2b
 8013af8:	2909      	cmp	r1, #9
 8013afa:	7002      	strb	r2, [r0, #0]
 8013afc:	7043      	strb	r3, [r0, #1]
 8013afe:	dd29      	ble.n	8013b54 <__exponent+0x68>
 8013b00:	f10d 0307 	add.w	r3, sp, #7
 8013b04:	461d      	mov	r5, r3
 8013b06:	270a      	movs	r7, #10
 8013b08:	461a      	mov	r2, r3
 8013b0a:	fbb1 f6f7 	udiv	r6, r1, r7
 8013b0e:	fb07 1416 	mls	r4, r7, r6, r1
 8013b12:	3430      	adds	r4, #48	@ 0x30
 8013b14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013b18:	460c      	mov	r4, r1
 8013b1a:	2c63      	cmp	r4, #99	@ 0x63
 8013b1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b20:	4631      	mov	r1, r6
 8013b22:	dcf1      	bgt.n	8013b08 <__exponent+0x1c>
 8013b24:	3130      	adds	r1, #48	@ 0x30
 8013b26:	1e94      	subs	r4, r2, #2
 8013b28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013b2c:	1c41      	adds	r1, r0, #1
 8013b2e:	4623      	mov	r3, r4
 8013b30:	42ab      	cmp	r3, r5
 8013b32:	d30a      	bcc.n	8013b4a <__exponent+0x5e>
 8013b34:	f10d 0309 	add.w	r3, sp, #9
 8013b38:	1a9b      	subs	r3, r3, r2
 8013b3a:	42ac      	cmp	r4, r5
 8013b3c:	bf88      	it	hi
 8013b3e:	2300      	movhi	r3, #0
 8013b40:	3302      	adds	r3, #2
 8013b42:	4403      	add	r3, r0
 8013b44:	1a18      	subs	r0, r3, r0
 8013b46:	b003      	add	sp, #12
 8013b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013b4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013b52:	e7ed      	b.n	8013b30 <__exponent+0x44>
 8013b54:	2330      	movs	r3, #48	@ 0x30
 8013b56:	3130      	adds	r1, #48	@ 0x30
 8013b58:	7083      	strb	r3, [r0, #2]
 8013b5a:	70c1      	strb	r1, [r0, #3]
 8013b5c:	1d03      	adds	r3, r0, #4
 8013b5e:	e7f1      	b.n	8013b44 <__exponent+0x58>

08013b60 <_printf_float>:
 8013b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	b08d      	sub	sp, #52	@ 0x34
 8013b66:	460c      	mov	r4, r1
 8013b68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013b6c:	4616      	mov	r6, r2
 8013b6e:	461f      	mov	r7, r3
 8013b70:	4605      	mov	r5, r0
 8013b72:	f000 fce9 	bl	8014548 <_localeconv_r>
 8013b76:	f8d0 b000 	ldr.w	fp, [r0]
 8013b7a:	4658      	mov	r0, fp
 8013b7c:	f7ec fc28 	bl	80003d0 <strlen>
 8013b80:	2300      	movs	r3, #0
 8013b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b84:	f8d8 3000 	ldr.w	r3, [r8]
 8013b88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013b8c:	6822      	ldr	r2, [r4, #0]
 8013b8e:	9005      	str	r0, [sp, #20]
 8013b90:	3307      	adds	r3, #7
 8013b92:	f023 0307 	bic.w	r3, r3, #7
 8013b96:	f103 0108 	add.w	r1, r3, #8
 8013b9a:	f8c8 1000 	str.w	r1, [r8]
 8013b9e:	ed93 0b00 	vldr	d0, [r3]
 8013ba2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013e00 <_printf_float+0x2a0>
 8013ba6:	eeb0 7bc0 	vabs.f64	d7, d0
 8013baa:	eeb4 7b46 	vcmp.f64	d7, d6
 8013bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8013bb6:	dd24      	ble.n	8013c02 <_printf_float+0xa2>
 8013bb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc0:	d502      	bpl.n	8013bc8 <_printf_float+0x68>
 8013bc2:	232d      	movs	r3, #45	@ 0x2d
 8013bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bc8:	498f      	ldr	r1, [pc, #572]	@ (8013e08 <_printf_float+0x2a8>)
 8013bca:	4b90      	ldr	r3, [pc, #576]	@ (8013e0c <_printf_float+0x2ac>)
 8013bcc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013bd0:	bf94      	ite	ls
 8013bd2:	4688      	movls	r8, r1
 8013bd4:	4698      	movhi	r8, r3
 8013bd6:	f022 0204 	bic.w	r2, r2, #4
 8013bda:	2303      	movs	r3, #3
 8013bdc:	6123      	str	r3, [r4, #16]
 8013bde:	6022      	str	r2, [r4, #0]
 8013be0:	f04f 0a00 	mov.w	sl, #0
 8013be4:	9700      	str	r7, [sp, #0]
 8013be6:	4633      	mov	r3, r6
 8013be8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013bea:	4621      	mov	r1, r4
 8013bec:	4628      	mov	r0, r5
 8013bee:	f000 f9d1 	bl	8013f94 <_printf_common>
 8013bf2:	3001      	adds	r0, #1
 8013bf4:	f040 8089 	bne.w	8013d0a <_printf_float+0x1aa>
 8013bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bfc:	b00d      	add	sp, #52	@ 0x34
 8013bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c02:	eeb4 0b40 	vcmp.f64	d0, d0
 8013c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c0a:	d709      	bvc.n	8013c20 <_printf_float+0xc0>
 8013c0c:	ee10 3a90 	vmov	r3, s1
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	bfbc      	itt	lt
 8013c14:	232d      	movlt	r3, #45	@ 0x2d
 8013c16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013c1a:	497d      	ldr	r1, [pc, #500]	@ (8013e10 <_printf_float+0x2b0>)
 8013c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8013e14 <_printf_float+0x2b4>)
 8013c1e:	e7d5      	b.n	8013bcc <_printf_float+0x6c>
 8013c20:	6863      	ldr	r3, [r4, #4]
 8013c22:	1c59      	adds	r1, r3, #1
 8013c24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013c28:	d139      	bne.n	8013c9e <_printf_float+0x13e>
 8013c2a:	2306      	movs	r3, #6
 8013c2c:	6063      	str	r3, [r4, #4]
 8013c2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013c32:	2300      	movs	r3, #0
 8013c34:	6022      	str	r2, [r4, #0]
 8013c36:	9303      	str	r3, [sp, #12]
 8013c38:	ab0a      	add	r3, sp, #40	@ 0x28
 8013c3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013c3e:	ab09      	add	r3, sp, #36	@ 0x24
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	6861      	ldr	r1, [r4, #4]
 8013c44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f7ff fefb 	bl	8013a44 <__cvt>
 8013c4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c54:	4680      	mov	r8, r0
 8013c56:	d129      	bne.n	8013cac <_printf_float+0x14c>
 8013c58:	1cc8      	adds	r0, r1, #3
 8013c5a:	db02      	blt.n	8013c62 <_printf_float+0x102>
 8013c5c:	6863      	ldr	r3, [r4, #4]
 8013c5e:	4299      	cmp	r1, r3
 8013c60:	dd41      	ble.n	8013ce6 <_printf_float+0x186>
 8013c62:	f1a9 0902 	sub.w	r9, r9, #2
 8013c66:	fa5f f989 	uxtb.w	r9, r9
 8013c6a:	3901      	subs	r1, #1
 8013c6c:	464a      	mov	r2, r9
 8013c6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013c72:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c74:	f7ff ff3a 	bl	8013aec <__exponent>
 8013c78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c7a:	1813      	adds	r3, r2, r0
 8013c7c:	2a01      	cmp	r2, #1
 8013c7e:	4682      	mov	sl, r0
 8013c80:	6123      	str	r3, [r4, #16]
 8013c82:	dc02      	bgt.n	8013c8a <_printf_float+0x12a>
 8013c84:	6822      	ldr	r2, [r4, #0]
 8013c86:	07d2      	lsls	r2, r2, #31
 8013c88:	d501      	bpl.n	8013c8e <_printf_float+0x12e>
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	6123      	str	r3, [r4, #16]
 8013c8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d0a6      	beq.n	8013be4 <_printf_float+0x84>
 8013c96:	232d      	movs	r3, #45	@ 0x2d
 8013c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c9c:	e7a2      	b.n	8013be4 <_printf_float+0x84>
 8013c9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013ca2:	d1c4      	bne.n	8013c2e <_printf_float+0xce>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d1c2      	bne.n	8013c2e <_printf_float+0xce>
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e7bf      	b.n	8013c2c <_printf_float+0xcc>
 8013cac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013cb0:	d9db      	bls.n	8013c6a <_printf_float+0x10a>
 8013cb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8013cb6:	d118      	bne.n	8013cea <_printf_float+0x18a>
 8013cb8:	2900      	cmp	r1, #0
 8013cba:	6863      	ldr	r3, [r4, #4]
 8013cbc:	dd0b      	ble.n	8013cd6 <_printf_float+0x176>
 8013cbe:	6121      	str	r1, [r4, #16]
 8013cc0:	b913      	cbnz	r3, 8013cc8 <_printf_float+0x168>
 8013cc2:	6822      	ldr	r2, [r4, #0]
 8013cc4:	07d0      	lsls	r0, r2, #31
 8013cc6:	d502      	bpl.n	8013cce <_printf_float+0x16e>
 8013cc8:	3301      	adds	r3, #1
 8013cca:	440b      	add	r3, r1
 8013ccc:	6123      	str	r3, [r4, #16]
 8013cce:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013cd0:	f04f 0a00 	mov.w	sl, #0
 8013cd4:	e7db      	b.n	8013c8e <_printf_float+0x12e>
 8013cd6:	b913      	cbnz	r3, 8013cde <_printf_float+0x17e>
 8013cd8:	6822      	ldr	r2, [r4, #0]
 8013cda:	07d2      	lsls	r2, r2, #31
 8013cdc:	d501      	bpl.n	8013ce2 <_printf_float+0x182>
 8013cde:	3302      	adds	r3, #2
 8013ce0:	e7f4      	b.n	8013ccc <_printf_float+0x16c>
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e7f2      	b.n	8013ccc <_printf_float+0x16c>
 8013ce6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cec:	4299      	cmp	r1, r3
 8013cee:	db05      	blt.n	8013cfc <_printf_float+0x19c>
 8013cf0:	6823      	ldr	r3, [r4, #0]
 8013cf2:	6121      	str	r1, [r4, #16]
 8013cf4:	07d8      	lsls	r0, r3, #31
 8013cf6:	d5ea      	bpl.n	8013cce <_printf_float+0x16e>
 8013cf8:	1c4b      	adds	r3, r1, #1
 8013cfa:	e7e7      	b.n	8013ccc <_printf_float+0x16c>
 8013cfc:	2900      	cmp	r1, #0
 8013cfe:	bfd4      	ite	le
 8013d00:	f1c1 0202 	rsble	r2, r1, #2
 8013d04:	2201      	movgt	r2, #1
 8013d06:	4413      	add	r3, r2
 8013d08:	e7e0      	b.n	8013ccc <_printf_float+0x16c>
 8013d0a:	6823      	ldr	r3, [r4, #0]
 8013d0c:	055a      	lsls	r2, r3, #21
 8013d0e:	d407      	bmi.n	8013d20 <_printf_float+0x1c0>
 8013d10:	6923      	ldr	r3, [r4, #16]
 8013d12:	4642      	mov	r2, r8
 8013d14:	4631      	mov	r1, r6
 8013d16:	4628      	mov	r0, r5
 8013d18:	47b8      	blx	r7
 8013d1a:	3001      	adds	r0, #1
 8013d1c:	d12a      	bne.n	8013d74 <_printf_float+0x214>
 8013d1e:	e76b      	b.n	8013bf8 <_printf_float+0x98>
 8013d20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013d24:	f240 80e0 	bls.w	8013ee8 <_printf_float+0x388>
 8013d28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013d2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d34:	d133      	bne.n	8013d9e <_printf_float+0x23e>
 8013d36:	4a38      	ldr	r2, [pc, #224]	@ (8013e18 <_printf_float+0x2b8>)
 8013d38:	2301      	movs	r3, #1
 8013d3a:	4631      	mov	r1, r6
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	47b8      	blx	r7
 8013d40:	3001      	adds	r0, #1
 8013d42:	f43f af59 	beq.w	8013bf8 <_printf_float+0x98>
 8013d46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013d4a:	4543      	cmp	r3, r8
 8013d4c:	db02      	blt.n	8013d54 <_printf_float+0x1f4>
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	07d8      	lsls	r0, r3, #31
 8013d52:	d50f      	bpl.n	8013d74 <_printf_float+0x214>
 8013d54:	9b05      	ldr	r3, [sp, #20]
 8013d56:	465a      	mov	r2, fp
 8013d58:	4631      	mov	r1, r6
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	47b8      	blx	r7
 8013d5e:	3001      	adds	r0, #1
 8013d60:	f43f af4a 	beq.w	8013bf8 <_printf_float+0x98>
 8013d64:	f04f 0900 	mov.w	r9, #0
 8013d68:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d6c:	f104 0a1a 	add.w	sl, r4, #26
 8013d70:	45c8      	cmp	r8, r9
 8013d72:	dc09      	bgt.n	8013d88 <_printf_float+0x228>
 8013d74:	6823      	ldr	r3, [r4, #0]
 8013d76:	079b      	lsls	r3, r3, #30
 8013d78:	f100 8107 	bmi.w	8013f8a <_printf_float+0x42a>
 8013d7c:	68e0      	ldr	r0, [r4, #12]
 8013d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d80:	4298      	cmp	r0, r3
 8013d82:	bfb8      	it	lt
 8013d84:	4618      	movlt	r0, r3
 8013d86:	e739      	b.n	8013bfc <_printf_float+0x9c>
 8013d88:	2301      	movs	r3, #1
 8013d8a:	4652      	mov	r2, sl
 8013d8c:	4631      	mov	r1, r6
 8013d8e:	4628      	mov	r0, r5
 8013d90:	47b8      	blx	r7
 8013d92:	3001      	adds	r0, #1
 8013d94:	f43f af30 	beq.w	8013bf8 <_printf_float+0x98>
 8013d98:	f109 0901 	add.w	r9, r9, #1
 8013d9c:	e7e8      	b.n	8013d70 <_printf_float+0x210>
 8013d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	dc3b      	bgt.n	8013e1c <_printf_float+0x2bc>
 8013da4:	4a1c      	ldr	r2, [pc, #112]	@ (8013e18 <_printf_float+0x2b8>)
 8013da6:	2301      	movs	r3, #1
 8013da8:	4631      	mov	r1, r6
 8013daa:	4628      	mov	r0, r5
 8013dac:	47b8      	blx	r7
 8013dae:	3001      	adds	r0, #1
 8013db0:	f43f af22 	beq.w	8013bf8 <_printf_float+0x98>
 8013db4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013db8:	ea59 0303 	orrs.w	r3, r9, r3
 8013dbc:	d102      	bne.n	8013dc4 <_printf_float+0x264>
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	07d9      	lsls	r1, r3, #31
 8013dc2:	d5d7      	bpl.n	8013d74 <_printf_float+0x214>
 8013dc4:	9b05      	ldr	r3, [sp, #20]
 8013dc6:	465a      	mov	r2, fp
 8013dc8:	4631      	mov	r1, r6
 8013dca:	4628      	mov	r0, r5
 8013dcc:	47b8      	blx	r7
 8013dce:	3001      	adds	r0, #1
 8013dd0:	f43f af12 	beq.w	8013bf8 <_printf_float+0x98>
 8013dd4:	f04f 0a00 	mov.w	sl, #0
 8013dd8:	f104 0b1a 	add.w	fp, r4, #26
 8013ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dde:	425b      	negs	r3, r3
 8013de0:	4553      	cmp	r3, sl
 8013de2:	dc01      	bgt.n	8013de8 <_printf_float+0x288>
 8013de4:	464b      	mov	r3, r9
 8013de6:	e794      	b.n	8013d12 <_printf_float+0x1b2>
 8013de8:	2301      	movs	r3, #1
 8013dea:	465a      	mov	r2, fp
 8013dec:	4631      	mov	r1, r6
 8013dee:	4628      	mov	r0, r5
 8013df0:	47b8      	blx	r7
 8013df2:	3001      	adds	r0, #1
 8013df4:	f43f af00 	beq.w	8013bf8 <_printf_float+0x98>
 8013df8:	f10a 0a01 	add.w	sl, sl, #1
 8013dfc:	e7ee      	b.n	8013ddc <_printf_float+0x27c>
 8013dfe:	bf00      	nop
 8013e00:	ffffffff 	.word	0xffffffff
 8013e04:	7fefffff 	.word	0x7fefffff
 8013e08:	08017319 	.word	0x08017319
 8013e0c:	0801731d 	.word	0x0801731d
 8013e10:	08017321 	.word	0x08017321
 8013e14:	08017325 	.word	0x08017325
 8013e18:	08017329 	.word	0x08017329
 8013e1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e22:	4553      	cmp	r3, sl
 8013e24:	bfa8      	it	ge
 8013e26:	4653      	movge	r3, sl
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	4699      	mov	r9, r3
 8013e2c:	dc37      	bgt.n	8013e9e <_printf_float+0x33e>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	9307      	str	r3, [sp, #28]
 8013e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e36:	f104 021a 	add.w	r2, r4, #26
 8013e3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e3c:	9907      	ldr	r1, [sp, #28]
 8013e3e:	9306      	str	r3, [sp, #24]
 8013e40:	eba3 0309 	sub.w	r3, r3, r9
 8013e44:	428b      	cmp	r3, r1
 8013e46:	dc31      	bgt.n	8013eac <_printf_float+0x34c>
 8013e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e4a:	459a      	cmp	sl, r3
 8013e4c:	dc3b      	bgt.n	8013ec6 <_printf_float+0x366>
 8013e4e:	6823      	ldr	r3, [r4, #0]
 8013e50:	07da      	lsls	r2, r3, #31
 8013e52:	d438      	bmi.n	8013ec6 <_printf_float+0x366>
 8013e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e56:	ebaa 0903 	sub.w	r9, sl, r3
 8013e5a:	9b06      	ldr	r3, [sp, #24]
 8013e5c:	ebaa 0303 	sub.w	r3, sl, r3
 8013e60:	4599      	cmp	r9, r3
 8013e62:	bfa8      	it	ge
 8013e64:	4699      	movge	r9, r3
 8013e66:	f1b9 0f00 	cmp.w	r9, #0
 8013e6a:	dc34      	bgt.n	8013ed6 <_printf_float+0x376>
 8013e6c:	f04f 0800 	mov.w	r8, #0
 8013e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e74:	f104 0b1a 	add.w	fp, r4, #26
 8013e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e7a:	ebaa 0303 	sub.w	r3, sl, r3
 8013e7e:	eba3 0309 	sub.w	r3, r3, r9
 8013e82:	4543      	cmp	r3, r8
 8013e84:	f77f af76 	ble.w	8013d74 <_printf_float+0x214>
 8013e88:	2301      	movs	r3, #1
 8013e8a:	465a      	mov	r2, fp
 8013e8c:	4631      	mov	r1, r6
 8013e8e:	4628      	mov	r0, r5
 8013e90:	47b8      	blx	r7
 8013e92:	3001      	adds	r0, #1
 8013e94:	f43f aeb0 	beq.w	8013bf8 <_printf_float+0x98>
 8013e98:	f108 0801 	add.w	r8, r8, #1
 8013e9c:	e7ec      	b.n	8013e78 <_printf_float+0x318>
 8013e9e:	4642      	mov	r2, r8
 8013ea0:	4631      	mov	r1, r6
 8013ea2:	4628      	mov	r0, r5
 8013ea4:	47b8      	blx	r7
 8013ea6:	3001      	adds	r0, #1
 8013ea8:	d1c1      	bne.n	8013e2e <_printf_float+0x2ce>
 8013eaa:	e6a5      	b.n	8013bf8 <_printf_float+0x98>
 8013eac:	2301      	movs	r3, #1
 8013eae:	4631      	mov	r1, r6
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	9206      	str	r2, [sp, #24]
 8013eb4:	47b8      	blx	r7
 8013eb6:	3001      	adds	r0, #1
 8013eb8:	f43f ae9e 	beq.w	8013bf8 <_printf_float+0x98>
 8013ebc:	9b07      	ldr	r3, [sp, #28]
 8013ebe:	9a06      	ldr	r2, [sp, #24]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	9307      	str	r3, [sp, #28]
 8013ec4:	e7b9      	b.n	8013e3a <_printf_float+0x2da>
 8013ec6:	9b05      	ldr	r3, [sp, #20]
 8013ec8:	465a      	mov	r2, fp
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4628      	mov	r0, r5
 8013ece:	47b8      	blx	r7
 8013ed0:	3001      	adds	r0, #1
 8013ed2:	d1bf      	bne.n	8013e54 <_printf_float+0x2f4>
 8013ed4:	e690      	b.n	8013bf8 <_printf_float+0x98>
 8013ed6:	9a06      	ldr	r2, [sp, #24]
 8013ed8:	464b      	mov	r3, r9
 8013eda:	4442      	add	r2, r8
 8013edc:	4631      	mov	r1, r6
 8013ede:	4628      	mov	r0, r5
 8013ee0:	47b8      	blx	r7
 8013ee2:	3001      	adds	r0, #1
 8013ee4:	d1c2      	bne.n	8013e6c <_printf_float+0x30c>
 8013ee6:	e687      	b.n	8013bf8 <_printf_float+0x98>
 8013ee8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013eec:	f1b9 0f01 	cmp.w	r9, #1
 8013ef0:	dc01      	bgt.n	8013ef6 <_printf_float+0x396>
 8013ef2:	07db      	lsls	r3, r3, #31
 8013ef4:	d536      	bpl.n	8013f64 <_printf_float+0x404>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	4642      	mov	r2, r8
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	f43f ae79 	beq.w	8013bf8 <_printf_float+0x98>
 8013f06:	9b05      	ldr	r3, [sp, #20]
 8013f08:	465a      	mov	r2, fp
 8013f0a:	4631      	mov	r1, r6
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	47b8      	blx	r7
 8013f10:	3001      	adds	r0, #1
 8013f12:	f43f ae71 	beq.w	8013bf8 <_printf_float+0x98>
 8013f16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f26:	d018      	beq.n	8013f5a <_printf_float+0x3fa>
 8013f28:	464b      	mov	r3, r9
 8013f2a:	f108 0201 	add.w	r2, r8, #1
 8013f2e:	4631      	mov	r1, r6
 8013f30:	4628      	mov	r0, r5
 8013f32:	47b8      	blx	r7
 8013f34:	3001      	adds	r0, #1
 8013f36:	d10c      	bne.n	8013f52 <_printf_float+0x3f2>
 8013f38:	e65e      	b.n	8013bf8 <_printf_float+0x98>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	465a      	mov	r2, fp
 8013f3e:	4631      	mov	r1, r6
 8013f40:	4628      	mov	r0, r5
 8013f42:	47b8      	blx	r7
 8013f44:	3001      	adds	r0, #1
 8013f46:	f43f ae57 	beq.w	8013bf8 <_printf_float+0x98>
 8013f4a:	f108 0801 	add.w	r8, r8, #1
 8013f4e:	45c8      	cmp	r8, r9
 8013f50:	dbf3      	blt.n	8013f3a <_printf_float+0x3da>
 8013f52:	4653      	mov	r3, sl
 8013f54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013f58:	e6dc      	b.n	8013d14 <_printf_float+0x1b4>
 8013f5a:	f04f 0800 	mov.w	r8, #0
 8013f5e:	f104 0b1a 	add.w	fp, r4, #26
 8013f62:	e7f4      	b.n	8013f4e <_printf_float+0x3ee>
 8013f64:	2301      	movs	r3, #1
 8013f66:	4642      	mov	r2, r8
 8013f68:	e7e1      	b.n	8013f2e <_printf_float+0x3ce>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	464a      	mov	r2, r9
 8013f6e:	4631      	mov	r1, r6
 8013f70:	4628      	mov	r0, r5
 8013f72:	47b8      	blx	r7
 8013f74:	3001      	adds	r0, #1
 8013f76:	f43f ae3f 	beq.w	8013bf8 <_printf_float+0x98>
 8013f7a:	f108 0801 	add.w	r8, r8, #1
 8013f7e:	68e3      	ldr	r3, [r4, #12]
 8013f80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f82:	1a5b      	subs	r3, r3, r1
 8013f84:	4543      	cmp	r3, r8
 8013f86:	dcf0      	bgt.n	8013f6a <_printf_float+0x40a>
 8013f88:	e6f8      	b.n	8013d7c <_printf_float+0x21c>
 8013f8a:	f04f 0800 	mov.w	r8, #0
 8013f8e:	f104 0919 	add.w	r9, r4, #25
 8013f92:	e7f4      	b.n	8013f7e <_printf_float+0x41e>

08013f94 <_printf_common>:
 8013f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f98:	4616      	mov	r6, r2
 8013f9a:	4698      	mov	r8, r3
 8013f9c:	688a      	ldr	r2, [r1, #8]
 8013f9e:	690b      	ldr	r3, [r1, #16]
 8013fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	bfb8      	it	lt
 8013fa8:	4613      	movlt	r3, r2
 8013faa:	6033      	str	r3, [r6, #0]
 8013fac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013fb0:	4607      	mov	r7, r0
 8013fb2:	460c      	mov	r4, r1
 8013fb4:	b10a      	cbz	r2, 8013fba <_printf_common+0x26>
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	6033      	str	r3, [r6, #0]
 8013fba:	6823      	ldr	r3, [r4, #0]
 8013fbc:	0699      	lsls	r1, r3, #26
 8013fbe:	bf42      	ittt	mi
 8013fc0:	6833      	ldrmi	r3, [r6, #0]
 8013fc2:	3302      	addmi	r3, #2
 8013fc4:	6033      	strmi	r3, [r6, #0]
 8013fc6:	6825      	ldr	r5, [r4, #0]
 8013fc8:	f015 0506 	ands.w	r5, r5, #6
 8013fcc:	d106      	bne.n	8013fdc <_printf_common+0x48>
 8013fce:	f104 0a19 	add.w	sl, r4, #25
 8013fd2:	68e3      	ldr	r3, [r4, #12]
 8013fd4:	6832      	ldr	r2, [r6, #0]
 8013fd6:	1a9b      	subs	r3, r3, r2
 8013fd8:	42ab      	cmp	r3, r5
 8013fda:	dc26      	bgt.n	801402a <_printf_common+0x96>
 8013fdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013fe0:	6822      	ldr	r2, [r4, #0]
 8013fe2:	3b00      	subs	r3, #0
 8013fe4:	bf18      	it	ne
 8013fe6:	2301      	movne	r3, #1
 8013fe8:	0692      	lsls	r2, r2, #26
 8013fea:	d42b      	bmi.n	8014044 <_printf_common+0xb0>
 8013fec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013ff0:	4641      	mov	r1, r8
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	47c8      	blx	r9
 8013ff6:	3001      	adds	r0, #1
 8013ff8:	d01e      	beq.n	8014038 <_printf_common+0xa4>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	6922      	ldr	r2, [r4, #16]
 8013ffe:	f003 0306 	and.w	r3, r3, #6
 8014002:	2b04      	cmp	r3, #4
 8014004:	bf02      	ittt	eq
 8014006:	68e5      	ldreq	r5, [r4, #12]
 8014008:	6833      	ldreq	r3, [r6, #0]
 801400a:	1aed      	subeq	r5, r5, r3
 801400c:	68a3      	ldr	r3, [r4, #8]
 801400e:	bf0c      	ite	eq
 8014010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014014:	2500      	movne	r5, #0
 8014016:	4293      	cmp	r3, r2
 8014018:	bfc4      	itt	gt
 801401a:	1a9b      	subgt	r3, r3, r2
 801401c:	18ed      	addgt	r5, r5, r3
 801401e:	2600      	movs	r6, #0
 8014020:	341a      	adds	r4, #26
 8014022:	42b5      	cmp	r5, r6
 8014024:	d11a      	bne.n	801405c <_printf_common+0xc8>
 8014026:	2000      	movs	r0, #0
 8014028:	e008      	b.n	801403c <_printf_common+0xa8>
 801402a:	2301      	movs	r3, #1
 801402c:	4652      	mov	r2, sl
 801402e:	4641      	mov	r1, r8
 8014030:	4638      	mov	r0, r7
 8014032:	47c8      	blx	r9
 8014034:	3001      	adds	r0, #1
 8014036:	d103      	bne.n	8014040 <_printf_common+0xac>
 8014038:	f04f 30ff 	mov.w	r0, #4294967295
 801403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014040:	3501      	adds	r5, #1
 8014042:	e7c6      	b.n	8013fd2 <_printf_common+0x3e>
 8014044:	18e1      	adds	r1, r4, r3
 8014046:	1c5a      	adds	r2, r3, #1
 8014048:	2030      	movs	r0, #48	@ 0x30
 801404a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801404e:	4422      	add	r2, r4
 8014050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014058:	3302      	adds	r3, #2
 801405a:	e7c7      	b.n	8013fec <_printf_common+0x58>
 801405c:	2301      	movs	r3, #1
 801405e:	4622      	mov	r2, r4
 8014060:	4641      	mov	r1, r8
 8014062:	4638      	mov	r0, r7
 8014064:	47c8      	blx	r9
 8014066:	3001      	adds	r0, #1
 8014068:	d0e6      	beq.n	8014038 <_printf_common+0xa4>
 801406a:	3601      	adds	r6, #1
 801406c:	e7d9      	b.n	8014022 <_printf_common+0x8e>
	...

08014070 <_printf_i>:
 8014070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014074:	7e0f      	ldrb	r7, [r1, #24]
 8014076:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014078:	2f78      	cmp	r7, #120	@ 0x78
 801407a:	4691      	mov	r9, r2
 801407c:	4680      	mov	r8, r0
 801407e:	460c      	mov	r4, r1
 8014080:	469a      	mov	sl, r3
 8014082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014086:	d807      	bhi.n	8014098 <_printf_i+0x28>
 8014088:	2f62      	cmp	r7, #98	@ 0x62
 801408a:	d80a      	bhi.n	80140a2 <_printf_i+0x32>
 801408c:	2f00      	cmp	r7, #0
 801408e:	f000 80d2 	beq.w	8014236 <_printf_i+0x1c6>
 8014092:	2f58      	cmp	r7, #88	@ 0x58
 8014094:	f000 80b9 	beq.w	801420a <_printf_i+0x19a>
 8014098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801409c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80140a0:	e03a      	b.n	8014118 <_printf_i+0xa8>
 80140a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80140a6:	2b15      	cmp	r3, #21
 80140a8:	d8f6      	bhi.n	8014098 <_printf_i+0x28>
 80140aa:	a101      	add	r1, pc, #4	@ (adr r1, 80140b0 <_printf_i+0x40>)
 80140ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140b0:	08014109 	.word	0x08014109
 80140b4:	0801411d 	.word	0x0801411d
 80140b8:	08014099 	.word	0x08014099
 80140bc:	08014099 	.word	0x08014099
 80140c0:	08014099 	.word	0x08014099
 80140c4:	08014099 	.word	0x08014099
 80140c8:	0801411d 	.word	0x0801411d
 80140cc:	08014099 	.word	0x08014099
 80140d0:	08014099 	.word	0x08014099
 80140d4:	08014099 	.word	0x08014099
 80140d8:	08014099 	.word	0x08014099
 80140dc:	0801421d 	.word	0x0801421d
 80140e0:	08014147 	.word	0x08014147
 80140e4:	080141d7 	.word	0x080141d7
 80140e8:	08014099 	.word	0x08014099
 80140ec:	08014099 	.word	0x08014099
 80140f0:	0801423f 	.word	0x0801423f
 80140f4:	08014099 	.word	0x08014099
 80140f8:	08014147 	.word	0x08014147
 80140fc:	08014099 	.word	0x08014099
 8014100:	08014099 	.word	0x08014099
 8014104:	080141df 	.word	0x080141df
 8014108:	6833      	ldr	r3, [r6, #0]
 801410a:	1d1a      	adds	r2, r3, #4
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	6032      	str	r2, [r6, #0]
 8014110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014118:	2301      	movs	r3, #1
 801411a:	e09d      	b.n	8014258 <_printf_i+0x1e8>
 801411c:	6833      	ldr	r3, [r6, #0]
 801411e:	6820      	ldr	r0, [r4, #0]
 8014120:	1d19      	adds	r1, r3, #4
 8014122:	6031      	str	r1, [r6, #0]
 8014124:	0606      	lsls	r6, r0, #24
 8014126:	d501      	bpl.n	801412c <_printf_i+0xbc>
 8014128:	681d      	ldr	r5, [r3, #0]
 801412a:	e003      	b.n	8014134 <_printf_i+0xc4>
 801412c:	0645      	lsls	r5, r0, #25
 801412e:	d5fb      	bpl.n	8014128 <_printf_i+0xb8>
 8014130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014134:	2d00      	cmp	r5, #0
 8014136:	da03      	bge.n	8014140 <_printf_i+0xd0>
 8014138:	232d      	movs	r3, #45	@ 0x2d
 801413a:	426d      	negs	r5, r5
 801413c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014140:	4859      	ldr	r0, [pc, #356]	@ (80142a8 <_printf_i+0x238>)
 8014142:	230a      	movs	r3, #10
 8014144:	e011      	b.n	801416a <_printf_i+0xfa>
 8014146:	6821      	ldr	r1, [r4, #0]
 8014148:	6833      	ldr	r3, [r6, #0]
 801414a:	0608      	lsls	r0, r1, #24
 801414c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014150:	d402      	bmi.n	8014158 <_printf_i+0xe8>
 8014152:	0649      	lsls	r1, r1, #25
 8014154:	bf48      	it	mi
 8014156:	b2ad      	uxthmi	r5, r5
 8014158:	2f6f      	cmp	r7, #111	@ 0x6f
 801415a:	4853      	ldr	r0, [pc, #332]	@ (80142a8 <_printf_i+0x238>)
 801415c:	6033      	str	r3, [r6, #0]
 801415e:	bf14      	ite	ne
 8014160:	230a      	movne	r3, #10
 8014162:	2308      	moveq	r3, #8
 8014164:	2100      	movs	r1, #0
 8014166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801416a:	6866      	ldr	r6, [r4, #4]
 801416c:	60a6      	str	r6, [r4, #8]
 801416e:	2e00      	cmp	r6, #0
 8014170:	bfa2      	ittt	ge
 8014172:	6821      	ldrge	r1, [r4, #0]
 8014174:	f021 0104 	bicge.w	r1, r1, #4
 8014178:	6021      	strge	r1, [r4, #0]
 801417a:	b90d      	cbnz	r5, 8014180 <_printf_i+0x110>
 801417c:	2e00      	cmp	r6, #0
 801417e:	d04b      	beq.n	8014218 <_printf_i+0x1a8>
 8014180:	4616      	mov	r6, r2
 8014182:	fbb5 f1f3 	udiv	r1, r5, r3
 8014186:	fb03 5711 	mls	r7, r3, r1, r5
 801418a:	5dc7      	ldrb	r7, [r0, r7]
 801418c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014190:	462f      	mov	r7, r5
 8014192:	42bb      	cmp	r3, r7
 8014194:	460d      	mov	r5, r1
 8014196:	d9f4      	bls.n	8014182 <_printf_i+0x112>
 8014198:	2b08      	cmp	r3, #8
 801419a:	d10b      	bne.n	80141b4 <_printf_i+0x144>
 801419c:	6823      	ldr	r3, [r4, #0]
 801419e:	07df      	lsls	r7, r3, #31
 80141a0:	d508      	bpl.n	80141b4 <_printf_i+0x144>
 80141a2:	6923      	ldr	r3, [r4, #16]
 80141a4:	6861      	ldr	r1, [r4, #4]
 80141a6:	4299      	cmp	r1, r3
 80141a8:	bfde      	ittt	le
 80141aa:	2330      	movle	r3, #48	@ 0x30
 80141ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80141b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80141b4:	1b92      	subs	r2, r2, r6
 80141b6:	6122      	str	r2, [r4, #16]
 80141b8:	f8cd a000 	str.w	sl, [sp]
 80141bc:	464b      	mov	r3, r9
 80141be:	aa03      	add	r2, sp, #12
 80141c0:	4621      	mov	r1, r4
 80141c2:	4640      	mov	r0, r8
 80141c4:	f7ff fee6 	bl	8013f94 <_printf_common>
 80141c8:	3001      	adds	r0, #1
 80141ca:	d14a      	bne.n	8014262 <_printf_i+0x1f2>
 80141cc:	f04f 30ff 	mov.w	r0, #4294967295
 80141d0:	b004      	add	sp, #16
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	f043 0320 	orr.w	r3, r3, #32
 80141dc:	6023      	str	r3, [r4, #0]
 80141de:	4833      	ldr	r0, [pc, #204]	@ (80142ac <_printf_i+0x23c>)
 80141e0:	2778      	movs	r7, #120	@ 0x78
 80141e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	6831      	ldr	r1, [r6, #0]
 80141ea:	061f      	lsls	r7, r3, #24
 80141ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80141f0:	d402      	bmi.n	80141f8 <_printf_i+0x188>
 80141f2:	065f      	lsls	r7, r3, #25
 80141f4:	bf48      	it	mi
 80141f6:	b2ad      	uxthmi	r5, r5
 80141f8:	6031      	str	r1, [r6, #0]
 80141fa:	07d9      	lsls	r1, r3, #31
 80141fc:	bf44      	itt	mi
 80141fe:	f043 0320 	orrmi.w	r3, r3, #32
 8014202:	6023      	strmi	r3, [r4, #0]
 8014204:	b11d      	cbz	r5, 801420e <_printf_i+0x19e>
 8014206:	2310      	movs	r3, #16
 8014208:	e7ac      	b.n	8014164 <_printf_i+0xf4>
 801420a:	4827      	ldr	r0, [pc, #156]	@ (80142a8 <_printf_i+0x238>)
 801420c:	e7e9      	b.n	80141e2 <_printf_i+0x172>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	f023 0320 	bic.w	r3, r3, #32
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	e7f6      	b.n	8014206 <_printf_i+0x196>
 8014218:	4616      	mov	r6, r2
 801421a:	e7bd      	b.n	8014198 <_printf_i+0x128>
 801421c:	6833      	ldr	r3, [r6, #0]
 801421e:	6825      	ldr	r5, [r4, #0]
 8014220:	6961      	ldr	r1, [r4, #20]
 8014222:	1d18      	adds	r0, r3, #4
 8014224:	6030      	str	r0, [r6, #0]
 8014226:	062e      	lsls	r6, r5, #24
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	d501      	bpl.n	8014230 <_printf_i+0x1c0>
 801422c:	6019      	str	r1, [r3, #0]
 801422e:	e002      	b.n	8014236 <_printf_i+0x1c6>
 8014230:	0668      	lsls	r0, r5, #25
 8014232:	d5fb      	bpl.n	801422c <_printf_i+0x1bc>
 8014234:	8019      	strh	r1, [r3, #0]
 8014236:	2300      	movs	r3, #0
 8014238:	6123      	str	r3, [r4, #16]
 801423a:	4616      	mov	r6, r2
 801423c:	e7bc      	b.n	80141b8 <_printf_i+0x148>
 801423e:	6833      	ldr	r3, [r6, #0]
 8014240:	1d1a      	adds	r2, r3, #4
 8014242:	6032      	str	r2, [r6, #0]
 8014244:	681e      	ldr	r6, [r3, #0]
 8014246:	6862      	ldr	r2, [r4, #4]
 8014248:	2100      	movs	r1, #0
 801424a:	4630      	mov	r0, r6
 801424c:	f7ec f870 	bl	8000330 <memchr>
 8014250:	b108      	cbz	r0, 8014256 <_printf_i+0x1e6>
 8014252:	1b80      	subs	r0, r0, r6
 8014254:	6060      	str	r0, [r4, #4]
 8014256:	6863      	ldr	r3, [r4, #4]
 8014258:	6123      	str	r3, [r4, #16]
 801425a:	2300      	movs	r3, #0
 801425c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014260:	e7aa      	b.n	80141b8 <_printf_i+0x148>
 8014262:	6923      	ldr	r3, [r4, #16]
 8014264:	4632      	mov	r2, r6
 8014266:	4649      	mov	r1, r9
 8014268:	4640      	mov	r0, r8
 801426a:	47d0      	blx	sl
 801426c:	3001      	adds	r0, #1
 801426e:	d0ad      	beq.n	80141cc <_printf_i+0x15c>
 8014270:	6823      	ldr	r3, [r4, #0]
 8014272:	079b      	lsls	r3, r3, #30
 8014274:	d413      	bmi.n	801429e <_printf_i+0x22e>
 8014276:	68e0      	ldr	r0, [r4, #12]
 8014278:	9b03      	ldr	r3, [sp, #12]
 801427a:	4298      	cmp	r0, r3
 801427c:	bfb8      	it	lt
 801427e:	4618      	movlt	r0, r3
 8014280:	e7a6      	b.n	80141d0 <_printf_i+0x160>
 8014282:	2301      	movs	r3, #1
 8014284:	4632      	mov	r2, r6
 8014286:	4649      	mov	r1, r9
 8014288:	4640      	mov	r0, r8
 801428a:	47d0      	blx	sl
 801428c:	3001      	adds	r0, #1
 801428e:	d09d      	beq.n	80141cc <_printf_i+0x15c>
 8014290:	3501      	adds	r5, #1
 8014292:	68e3      	ldr	r3, [r4, #12]
 8014294:	9903      	ldr	r1, [sp, #12]
 8014296:	1a5b      	subs	r3, r3, r1
 8014298:	42ab      	cmp	r3, r5
 801429a:	dcf2      	bgt.n	8014282 <_printf_i+0x212>
 801429c:	e7eb      	b.n	8014276 <_printf_i+0x206>
 801429e:	2500      	movs	r5, #0
 80142a0:	f104 0619 	add.w	r6, r4, #25
 80142a4:	e7f5      	b.n	8014292 <_printf_i+0x222>
 80142a6:	bf00      	nop
 80142a8:	0801732b 	.word	0x0801732b
 80142ac:	0801733c 	.word	0x0801733c

080142b0 <std>:
 80142b0:	2300      	movs	r3, #0
 80142b2:	b510      	push	{r4, lr}
 80142b4:	4604      	mov	r4, r0
 80142b6:	e9c0 3300 	strd	r3, r3, [r0]
 80142ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142be:	6083      	str	r3, [r0, #8]
 80142c0:	8181      	strh	r1, [r0, #12]
 80142c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80142c4:	81c2      	strh	r2, [r0, #14]
 80142c6:	6183      	str	r3, [r0, #24]
 80142c8:	4619      	mov	r1, r3
 80142ca:	2208      	movs	r2, #8
 80142cc:	305c      	adds	r0, #92	@ 0x5c
 80142ce:	f000 f914 	bl	80144fa <memset>
 80142d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014308 <std+0x58>)
 80142d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80142d6:	4b0d      	ldr	r3, [pc, #52]	@ (801430c <std+0x5c>)
 80142d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80142da:	4b0d      	ldr	r3, [pc, #52]	@ (8014310 <std+0x60>)
 80142dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80142de:	4b0d      	ldr	r3, [pc, #52]	@ (8014314 <std+0x64>)
 80142e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80142e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014318 <std+0x68>)
 80142e4:	6224      	str	r4, [r4, #32]
 80142e6:	429c      	cmp	r4, r3
 80142e8:	d006      	beq.n	80142f8 <std+0x48>
 80142ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80142ee:	4294      	cmp	r4, r2
 80142f0:	d002      	beq.n	80142f8 <std+0x48>
 80142f2:	33d0      	adds	r3, #208	@ 0xd0
 80142f4:	429c      	cmp	r4, r3
 80142f6:	d105      	bne.n	8014304 <std+0x54>
 80142f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80142fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014300:	f000 b996 	b.w	8014630 <__retarget_lock_init_recursive>
 8014304:	bd10      	pop	{r4, pc}
 8014306:	bf00      	nop
 8014308:	08014475 	.word	0x08014475
 801430c:	08014497 	.word	0x08014497
 8014310:	080144cf 	.word	0x080144cf
 8014314:	080144f3 	.word	0x080144f3
 8014318:	24004a6c 	.word	0x24004a6c

0801431c <stdio_exit_handler>:
 801431c:	4a02      	ldr	r2, [pc, #8]	@ (8014328 <stdio_exit_handler+0xc>)
 801431e:	4903      	ldr	r1, [pc, #12]	@ (801432c <stdio_exit_handler+0x10>)
 8014320:	4803      	ldr	r0, [pc, #12]	@ (8014330 <stdio_exit_handler+0x14>)
 8014322:	f000 b869 	b.w	80143f8 <_fwalk_sglue>
 8014326:	bf00      	nop
 8014328:	24000104 	.word	0x24000104
 801432c:	080167ed 	.word	0x080167ed
 8014330:	24000280 	.word	0x24000280

08014334 <cleanup_stdio>:
 8014334:	6841      	ldr	r1, [r0, #4]
 8014336:	4b0c      	ldr	r3, [pc, #48]	@ (8014368 <cleanup_stdio+0x34>)
 8014338:	4299      	cmp	r1, r3
 801433a:	b510      	push	{r4, lr}
 801433c:	4604      	mov	r4, r0
 801433e:	d001      	beq.n	8014344 <cleanup_stdio+0x10>
 8014340:	f002 fa54 	bl	80167ec <_fflush_r>
 8014344:	68a1      	ldr	r1, [r4, #8]
 8014346:	4b09      	ldr	r3, [pc, #36]	@ (801436c <cleanup_stdio+0x38>)
 8014348:	4299      	cmp	r1, r3
 801434a:	d002      	beq.n	8014352 <cleanup_stdio+0x1e>
 801434c:	4620      	mov	r0, r4
 801434e:	f002 fa4d 	bl	80167ec <_fflush_r>
 8014352:	68e1      	ldr	r1, [r4, #12]
 8014354:	4b06      	ldr	r3, [pc, #24]	@ (8014370 <cleanup_stdio+0x3c>)
 8014356:	4299      	cmp	r1, r3
 8014358:	d004      	beq.n	8014364 <cleanup_stdio+0x30>
 801435a:	4620      	mov	r0, r4
 801435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014360:	f002 ba44 	b.w	80167ec <_fflush_r>
 8014364:	bd10      	pop	{r4, pc}
 8014366:	bf00      	nop
 8014368:	24004a6c 	.word	0x24004a6c
 801436c:	24004ad4 	.word	0x24004ad4
 8014370:	24004b3c 	.word	0x24004b3c

08014374 <global_stdio_init.part.0>:
 8014374:	b510      	push	{r4, lr}
 8014376:	4b0b      	ldr	r3, [pc, #44]	@ (80143a4 <global_stdio_init.part.0+0x30>)
 8014378:	4c0b      	ldr	r4, [pc, #44]	@ (80143a8 <global_stdio_init.part.0+0x34>)
 801437a:	4a0c      	ldr	r2, [pc, #48]	@ (80143ac <global_stdio_init.part.0+0x38>)
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	4620      	mov	r0, r4
 8014380:	2200      	movs	r2, #0
 8014382:	2104      	movs	r1, #4
 8014384:	f7ff ff94 	bl	80142b0 <std>
 8014388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801438c:	2201      	movs	r2, #1
 801438e:	2109      	movs	r1, #9
 8014390:	f7ff ff8e 	bl	80142b0 <std>
 8014394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014398:	2202      	movs	r2, #2
 801439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801439e:	2112      	movs	r1, #18
 80143a0:	f7ff bf86 	b.w	80142b0 <std>
 80143a4:	24004ba4 	.word	0x24004ba4
 80143a8:	24004a6c 	.word	0x24004a6c
 80143ac:	0801431d 	.word	0x0801431d

080143b0 <__sfp_lock_acquire>:
 80143b0:	4801      	ldr	r0, [pc, #4]	@ (80143b8 <__sfp_lock_acquire+0x8>)
 80143b2:	f000 b93e 	b.w	8014632 <__retarget_lock_acquire_recursive>
 80143b6:	bf00      	nop
 80143b8:	24004bad 	.word	0x24004bad

080143bc <__sfp_lock_release>:
 80143bc:	4801      	ldr	r0, [pc, #4]	@ (80143c4 <__sfp_lock_release+0x8>)
 80143be:	f000 b939 	b.w	8014634 <__retarget_lock_release_recursive>
 80143c2:	bf00      	nop
 80143c4:	24004bad 	.word	0x24004bad

080143c8 <__sinit>:
 80143c8:	b510      	push	{r4, lr}
 80143ca:	4604      	mov	r4, r0
 80143cc:	f7ff fff0 	bl	80143b0 <__sfp_lock_acquire>
 80143d0:	6a23      	ldr	r3, [r4, #32]
 80143d2:	b11b      	cbz	r3, 80143dc <__sinit+0x14>
 80143d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143d8:	f7ff bff0 	b.w	80143bc <__sfp_lock_release>
 80143dc:	4b04      	ldr	r3, [pc, #16]	@ (80143f0 <__sinit+0x28>)
 80143de:	6223      	str	r3, [r4, #32]
 80143e0:	4b04      	ldr	r3, [pc, #16]	@ (80143f4 <__sinit+0x2c>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1f5      	bne.n	80143d4 <__sinit+0xc>
 80143e8:	f7ff ffc4 	bl	8014374 <global_stdio_init.part.0>
 80143ec:	e7f2      	b.n	80143d4 <__sinit+0xc>
 80143ee:	bf00      	nop
 80143f0:	08014335 	.word	0x08014335
 80143f4:	24004ba4 	.word	0x24004ba4

080143f8 <_fwalk_sglue>:
 80143f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143fc:	4607      	mov	r7, r0
 80143fe:	4688      	mov	r8, r1
 8014400:	4614      	mov	r4, r2
 8014402:	2600      	movs	r6, #0
 8014404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014408:	f1b9 0901 	subs.w	r9, r9, #1
 801440c:	d505      	bpl.n	801441a <_fwalk_sglue+0x22>
 801440e:	6824      	ldr	r4, [r4, #0]
 8014410:	2c00      	cmp	r4, #0
 8014412:	d1f7      	bne.n	8014404 <_fwalk_sglue+0xc>
 8014414:	4630      	mov	r0, r6
 8014416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801441a:	89ab      	ldrh	r3, [r5, #12]
 801441c:	2b01      	cmp	r3, #1
 801441e:	d907      	bls.n	8014430 <_fwalk_sglue+0x38>
 8014420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014424:	3301      	adds	r3, #1
 8014426:	d003      	beq.n	8014430 <_fwalk_sglue+0x38>
 8014428:	4629      	mov	r1, r5
 801442a:	4638      	mov	r0, r7
 801442c:	47c0      	blx	r8
 801442e:	4306      	orrs	r6, r0
 8014430:	3568      	adds	r5, #104	@ 0x68
 8014432:	e7e9      	b.n	8014408 <_fwalk_sglue+0x10>

08014434 <siprintf>:
 8014434:	b40e      	push	{r1, r2, r3}
 8014436:	b500      	push	{lr}
 8014438:	b09c      	sub	sp, #112	@ 0x70
 801443a:	ab1d      	add	r3, sp, #116	@ 0x74
 801443c:	9002      	str	r0, [sp, #8]
 801443e:	9006      	str	r0, [sp, #24]
 8014440:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014444:	4809      	ldr	r0, [pc, #36]	@ (801446c <siprintf+0x38>)
 8014446:	9107      	str	r1, [sp, #28]
 8014448:	9104      	str	r1, [sp, #16]
 801444a:	4909      	ldr	r1, [pc, #36]	@ (8014470 <siprintf+0x3c>)
 801444c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014450:	9105      	str	r1, [sp, #20]
 8014452:	6800      	ldr	r0, [r0, #0]
 8014454:	9301      	str	r3, [sp, #4]
 8014456:	a902      	add	r1, sp, #8
 8014458:	f002 f848 	bl	80164ec <_svfiprintf_r>
 801445c:	9b02      	ldr	r3, [sp, #8]
 801445e:	2200      	movs	r2, #0
 8014460:	701a      	strb	r2, [r3, #0]
 8014462:	b01c      	add	sp, #112	@ 0x70
 8014464:	f85d eb04 	ldr.w	lr, [sp], #4
 8014468:	b003      	add	sp, #12
 801446a:	4770      	bx	lr
 801446c:	2400027c 	.word	0x2400027c
 8014470:	ffff0208 	.word	0xffff0208

08014474 <__sread>:
 8014474:	b510      	push	{r4, lr}
 8014476:	460c      	mov	r4, r1
 8014478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447c:	f000 f88a 	bl	8014594 <_read_r>
 8014480:	2800      	cmp	r0, #0
 8014482:	bfab      	itete	ge
 8014484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014486:	89a3      	ldrhlt	r3, [r4, #12]
 8014488:	181b      	addge	r3, r3, r0
 801448a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801448e:	bfac      	ite	ge
 8014490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014492:	81a3      	strhlt	r3, [r4, #12]
 8014494:	bd10      	pop	{r4, pc}

08014496 <__swrite>:
 8014496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801449a:	461f      	mov	r7, r3
 801449c:	898b      	ldrh	r3, [r1, #12]
 801449e:	05db      	lsls	r3, r3, #23
 80144a0:	4605      	mov	r5, r0
 80144a2:	460c      	mov	r4, r1
 80144a4:	4616      	mov	r6, r2
 80144a6:	d505      	bpl.n	80144b4 <__swrite+0x1e>
 80144a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144ac:	2302      	movs	r3, #2
 80144ae:	2200      	movs	r2, #0
 80144b0:	f000 f85e 	bl	8014570 <_lseek_r>
 80144b4:	89a3      	ldrh	r3, [r4, #12]
 80144b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80144be:	81a3      	strh	r3, [r4, #12]
 80144c0:	4632      	mov	r2, r6
 80144c2:	463b      	mov	r3, r7
 80144c4:	4628      	mov	r0, r5
 80144c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144ca:	f000 b875 	b.w	80145b8 <_write_r>

080144ce <__sseek>:
 80144ce:	b510      	push	{r4, lr}
 80144d0:	460c      	mov	r4, r1
 80144d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144d6:	f000 f84b 	bl	8014570 <_lseek_r>
 80144da:	1c43      	adds	r3, r0, #1
 80144dc:	89a3      	ldrh	r3, [r4, #12]
 80144de:	bf15      	itete	ne
 80144e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80144e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80144e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80144ea:	81a3      	strheq	r3, [r4, #12]
 80144ec:	bf18      	it	ne
 80144ee:	81a3      	strhne	r3, [r4, #12]
 80144f0:	bd10      	pop	{r4, pc}

080144f2 <__sclose>:
 80144f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144f6:	f000 b82b 	b.w	8014550 <_close_r>

080144fa <memset>:
 80144fa:	4402      	add	r2, r0
 80144fc:	4603      	mov	r3, r0
 80144fe:	4293      	cmp	r3, r2
 8014500:	d100      	bne.n	8014504 <memset+0xa>
 8014502:	4770      	bx	lr
 8014504:	f803 1b01 	strb.w	r1, [r3], #1
 8014508:	e7f9      	b.n	80144fe <memset+0x4>

0801450a <strchr>:
 801450a:	b2c9      	uxtb	r1, r1
 801450c:	4603      	mov	r3, r0
 801450e:	4618      	mov	r0, r3
 8014510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014514:	b112      	cbz	r2, 801451c <strchr+0x12>
 8014516:	428a      	cmp	r2, r1
 8014518:	d1f9      	bne.n	801450e <strchr+0x4>
 801451a:	4770      	bx	lr
 801451c:	2900      	cmp	r1, #0
 801451e:	bf18      	it	ne
 8014520:	2000      	movne	r0, #0
 8014522:	4770      	bx	lr

08014524 <strncmp>:
 8014524:	b510      	push	{r4, lr}
 8014526:	b16a      	cbz	r2, 8014544 <strncmp+0x20>
 8014528:	3901      	subs	r1, #1
 801452a:	1884      	adds	r4, r0, r2
 801452c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014530:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014534:	429a      	cmp	r2, r3
 8014536:	d103      	bne.n	8014540 <strncmp+0x1c>
 8014538:	42a0      	cmp	r0, r4
 801453a:	d001      	beq.n	8014540 <strncmp+0x1c>
 801453c:	2a00      	cmp	r2, #0
 801453e:	d1f5      	bne.n	801452c <strncmp+0x8>
 8014540:	1ad0      	subs	r0, r2, r3
 8014542:	bd10      	pop	{r4, pc}
 8014544:	4610      	mov	r0, r2
 8014546:	e7fc      	b.n	8014542 <strncmp+0x1e>

08014548 <_localeconv_r>:
 8014548:	4800      	ldr	r0, [pc, #0]	@ (801454c <_localeconv_r+0x4>)
 801454a:	4770      	bx	lr
 801454c:	24000200 	.word	0x24000200

08014550 <_close_r>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	4d06      	ldr	r5, [pc, #24]	@ (801456c <_close_r+0x1c>)
 8014554:	2300      	movs	r3, #0
 8014556:	4604      	mov	r4, r0
 8014558:	4608      	mov	r0, r1
 801455a:	602b      	str	r3, [r5, #0]
 801455c:	f7ed fe52 	bl	8002204 <_close>
 8014560:	1c43      	adds	r3, r0, #1
 8014562:	d102      	bne.n	801456a <_close_r+0x1a>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	b103      	cbz	r3, 801456a <_close_r+0x1a>
 8014568:	6023      	str	r3, [r4, #0]
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	24004ba8 	.word	0x24004ba8

08014570 <_lseek_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	@ (8014590 <_lseek_r+0x20>)
 8014574:	4604      	mov	r4, r0
 8014576:	4608      	mov	r0, r1
 8014578:	4611      	mov	r1, r2
 801457a:	2200      	movs	r2, #0
 801457c:	602a      	str	r2, [r5, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	f7ed fe67 	bl	8002252 <_lseek>
 8014584:	1c43      	adds	r3, r0, #1
 8014586:	d102      	bne.n	801458e <_lseek_r+0x1e>
 8014588:	682b      	ldr	r3, [r5, #0]
 801458a:	b103      	cbz	r3, 801458e <_lseek_r+0x1e>
 801458c:	6023      	str	r3, [r4, #0]
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	24004ba8 	.word	0x24004ba8

08014594 <_read_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d07      	ldr	r5, [pc, #28]	@ (80145b4 <_read_r+0x20>)
 8014598:	4604      	mov	r4, r0
 801459a:	4608      	mov	r0, r1
 801459c:	4611      	mov	r1, r2
 801459e:	2200      	movs	r2, #0
 80145a0:	602a      	str	r2, [r5, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	f7ed fdf5 	bl	8002192 <_read>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d102      	bne.n	80145b2 <_read_r+0x1e>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b103      	cbz	r3, 80145b2 <_read_r+0x1e>
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	bd38      	pop	{r3, r4, r5, pc}
 80145b4:	24004ba8 	.word	0x24004ba8

080145b8 <_write_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4d07      	ldr	r5, [pc, #28]	@ (80145d8 <_write_r+0x20>)
 80145bc:	4604      	mov	r4, r0
 80145be:	4608      	mov	r0, r1
 80145c0:	4611      	mov	r1, r2
 80145c2:	2200      	movs	r2, #0
 80145c4:	602a      	str	r2, [r5, #0]
 80145c6:	461a      	mov	r2, r3
 80145c8:	f7ed fe00 	bl	80021cc <_write>
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	d102      	bne.n	80145d6 <_write_r+0x1e>
 80145d0:	682b      	ldr	r3, [r5, #0]
 80145d2:	b103      	cbz	r3, 80145d6 <_write_r+0x1e>
 80145d4:	6023      	str	r3, [r4, #0]
 80145d6:	bd38      	pop	{r3, r4, r5, pc}
 80145d8:	24004ba8 	.word	0x24004ba8

080145dc <__errno>:
 80145dc:	4b01      	ldr	r3, [pc, #4]	@ (80145e4 <__errno+0x8>)
 80145de:	6818      	ldr	r0, [r3, #0]
 80145e0:	4770      	bx	lr
 80145e2:	bf00      	nop
 80145e4:	2400027c 	.word	0x2400027c

080145e8 <__libc_init_array>:
 80145e8:	b570      	push	{r4, r5, r6, lr}
 80145ea:	4d0d      	ldr	r5, [pc, #52]	@ (8014620 <__libc_init_array+0x38>)
 80145ec:	4c0d      	ldr	r4, [pc, #52]	@ (8014624 <__libc_init_array+0x3c>)
 80145ee:	1b64      	subs	r4, r4, r5
 80145f0:	10a4      	asrs	r4, r4, #2
 80145f2:	2600      	movs	r6, #0
 80145f4:	42a6      	cmp	r6, r4
 80145f6:	d109      	bne.n	801460c <__libc_init_array+0x24>
 80145f8:	4d0b      	ldr	r5, [pc, #44]	@ (8014628 <__libc_init_array+0x40>)
 80145fa:	4c0c      	ldr	r4, [pc, #48]	@ (801462c <__libc_init_array+0x44>)
 80145fc:	f002 fd46 	bl	801708c <_init>
 8014600:	1b64      	subs	r4, r4, r5
 8014602:	10a4      	asrs	r4, r4, #2
 8014604:	2600      	movs	r6, #0
 8014606:	42a6      	cmp	r6, r4
 8014608:	d105      	bne.n	8014616 <__libc_init_array+0x2e>
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014610:	4798      	blx	r3
 8014612:	3601      	adds	r6, #1
 8014614:	e7ee      	b.n	80145f4 <__libc_init_array+0xc>
 8014616:	f855 3b04 	ldr.w	r3, [r5], #4
 801461a:	4798      	blx	r3
 801461c:	3601      	adds	r6, #1
 801461e:	e7f2      	b.n	8014606 <__libc_init_array+0x1e>
 8014620:	08017730 	.word	0x08017730
 8014624:	08017730 	.word	0x08017730
 8014628:	08017730 	.word	0x08017730
 801462c:	08017734 	.word	0x08017734

08014630 <__retarget_lock_init_recursive>:
 8014630:	4770      	bx	lr

08014632 <__retarget_lock_acquire_recursive>:
 8014632:	4770      	bx	lr

08014634 <__retarget_lock_release_recursive>:
 8014634:	4770      	bx	lr

08014636 <memcpy>:
 8014636:	440a      	add	r2, r1
 8014638:	4291      	cmp	r1, r2
 801463a:	f100 33ff 	add.w	r3, r0, #4294967295
 801463e:	d100      	bne.n	8014642 <memcpy+0xc>
 8014640:	4770      	bx	lr
 8014642:	b510      	push	{r4, lr}
 8014644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014648:	f803 4f01 	strb.w	r4, [r3, #1]!
 801464c:	4291      	cmp	r1, r2
 801464e:	d1f9      	bne.n	8014644 <memcpy+0xe>
 8014650:	bd10      	pop	{r4, pc}
 8014652:	0000      	movs	r0, r0
 8014654:	0000      	movs	r0, r0
	...

08014658 <nan>:
 8014658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014660 <nan+0x8>
 801465c:	4770      	bx	lr
 801465e:	bf00      	nop
 8014660:	00000000 	.word	0x00000000
 8014664:	7ff80000 	.word	0x7ff80000

08014668 <quorem>:
 8014668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801466c:	6903      	ldr	r3, [r0, #16]
 801466e:	690c      	ldr	r4, [r1, #16]
 8014670:	42a3      	cmp	r3, r4
 8014672:	4607      	mov	r7, r0
 8014674:	db7e      	blt.n	8014774 <quorem+0x10c>
 8014676:	3c01      	subs	r4, #1
 8014678:	f101 0814 	add.w	r8, r1, #20
 801467c:	00a3      	lsls	r3, r4, #2
 801467e:	f100 0514 	add.w	r5, r0, #20
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014688:	9301      	str	r3, [sp, #4]
 801468a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801468e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014692:	3301      	adds	r3, #1
 8014694:	429a      	cmp	r2, r3
 8014696:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801469a:	fbb2 f6f3 	udiv	r6, r2, r3
 801469e:	d32e      	bcc.n	80146fe <quorem+0x96>
 80146a0:	f04f 0a00 	mov.w	sl, #0
 80146a4:	46c4      	mov	ip, r8
 80146a6:	46ae      	mov	lr, r5
 80146a8:	46d3      	mov	fp, sl
 80146aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80146ae:	b298      	uxth	r0, r3
 80146b0:	fb06 a000 	mla	r0, r6, r0, sl
 80146b4:	0c02      	lsrs	r2, r0, #16
 80146b6:	0c1b      	lsrs	r3, r3, #16
 80146b8:	fb06 2303 	mla	r3, r6, r3, r2
 80146bc:	f8de 2000 	ldr.w	r2, [lr]
 80146c0:	b280      	uxth	r0, r0
 80146c2:	b292      	uxth	r2, r2
 80146c4:	1a12      	subs	r2, r2, r0
 80146c6:	445a      	add	r2, fp
 80146c8:	f8de 0000 	ldr.w	r0, [lr]
 80146cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80146d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80146da:	b292      	uxth	r2, r2
 80146dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80146e0:	45e1      	cmp	r9, ip
 80146e2:	f84e 2b04 	str.w	r2, [lr], #4
 80146e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80146ea:	d2de      	bcs.n	80146aa <quorem+0x42>
 80146ec:	9b00      	ldr	r3, [sp, #0]
 80146ee:	58eb      	ldr	r3, [r5, r3]
 80146f0:	b92b      	cbnz	r3, 80146fe <quorem+0x96>
 80146f2:	9b01      	ldr	r3, [sp, #4]
 80146f4:	3b04      	subs	r3, #4
 80146f6:	429d      	cmp	r5, r3
 80146f8:	461a      	mov	r2, r3
 80146fa:	d32f      	bcc.n	801475c <quorem+0xf4>
 80146fc:	613c      	str	r4, [r7, #16]
 80146fe:	4638      	mov	r0, r7
 8014700:	f001 fca0 	bl	8016044 <__mcmp>
 8014704:	2800      	cmp	r0, #0
 8014706:	db25      	blt.n	8014754 <quorem+0xec>
 8014708:	4629      	mov	r1, r5
 801470a:	2000      	movs	r0, #0
 801470c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014710:	f8d1 c000 	ldr.w	ip, [r1]
 8014714:	fa1f fe82 	uxth.w	lr, r2
 8014718:	fa1f f38c 	uxth.w	r3, ip
 801471c:	eba3 030e 	sub.w	r3, r3, lr
 8014720:	4403      	add	r3, r0
 8014722:	0c12      	lsrs	r2, r2, #16
 8014724:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014728:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801472c:	b29b      	uxth	r3, r3
 801472e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014732:	45c1      	cmp	r9, r8
 8014734:	f841 3b04 	str.w	r3, [r1], #4
 8014738:	ea4f 4022 	mov.w	r0, r2, asr #16
 801473c:	d2e6      	bcs.n	801470c <quorem+0xa4>
 801473e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014746:	b922      	cbnz	r2, 8014752 <quorem+0xea>
 8014748:	3b04      	subs	r3, #4
 801474a:	429d      	cmp	r5, r3
 801474c:	461a      	mov	r2, r3
 801474e:	d30b      	bcc.n	8014768 <quorem+0x100>
 8014750:	613c      	str	r4, [r7, #16]
 8014752:	3601      	adds	r6, #1
 8014754:	4630      	mov	r0, r6
 8014756:	b003      	add	sp, #12
 8014758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475c:	6812      	ldr	r2, [r2, #0]
 801475e:	3b04      	subs	r3, #4
 8014760:	2a00      	cmp	r2, #0
 8014762:	d1cb      	bne.n	80146fc <quorem+0x94>
 8014764:	3c01      	subs	r4, #1
 8014766:	e7c6      	b.n	80146f6 <quorem+0x8e>
 8014768:	6812      	ldr	r2, [r2, #0]
 801476a:	3b04      	subs	r3, #4
 801476c:	2a00      	cmp	r2, #0
 801476e:	d1ef      	bne.n	8014750 <quorem+0xe8>
 8014770:	3c01      	subs	r4, #1
 8014772:	e7ea      	b.n	801474a <quorem+0xe2>
 8014774:	2000      	movs	r0, #0
 8014776:	e7ee      	b.n	8014756 <quorem+0xee>

08014778 <_dtoa_r>:
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	ed2d 8b02 	vpush	{d8}
 8014780:	69c7      	ldr	r7, [r0, #28]
 8014782:	b091      	sub	sp, #68	@ 0x44
 8014784:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014788:	ec55 4b10 	vmov	r4, r5, d0
 801478c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801478e:	9107      	str	r1, [sp, #28]
 8014790:	4681      	mov	r9, r0
 8014792:	9209      	str	r2, [sp, #36]	@ 0x24
 8014794:	930d      	str	r3, [sp, #52]	@ 0x34
 8014796:	b97f      	cbnz	r7, 80147b8 <_dtoa_r+0x40>
 8014798:	2010      	movs	r0, #16
 801479a:	f001 f8c7 	bl	801592c <malloc>
 801479e:	4602      	mov	r2, r0
 80147a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80147a4:	b920      	cbnz	r0, 80147b0 <_dtoa_r+0x38>
 80147a6:	4ba0      	ldr	r3, [pc, #640]	@ (8014a28 <_dtoa_r+0x2b0>)
 80147a8:	21ef      	movs	r1, #239	@ 0xef
 80147aa:	48a0      	ldr	r0, [pc, #640]	@ (8014a2c <_dtoa_r+0x2b4>)
 80147ac:	f002 f870 	bl	8016890 <__assert_func>
 80147b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80147b4:	6007      	str	r7, [r0, #0]
 80147b6:	60c7      	str	r7, [r0, #12]
 80147b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80147bc:	6819      	ldr	r1, [r3, #0]
 80147be:	b159      	cbz	r1, 80147d8 <_dtoa_r+0x60>
 80147c0:	685a      	ldr	r2, [r3, #4]
 80147c2:	604a      	str	r2, [r1, #4]
 80147c4:	2301      	movs	r3, #1
 80147c6:	4093      	lsls	r3, r2
 80147c8:	608b      	str	r3, [r1, #8]
 80147ca:	4648      	mov	r0, r9
 80147cc:	f001 f9b6 	bl	8015b3c <_Bfree>
 80147d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80147d4:	2200      	movs	r2, #0
 80147d6:	601a      	str	r2, [r3, #0]
 80147d8:	1e2b      	subs	r3, r5, #0
 80147da:	bfbb      	ittet	lt
 80147dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80147e0:	9303      	strlt	r3, [sp, #12]
 80147e2:	2300      	movge	r3, #0
 80147e4:	2201      	movlt	r2, #1
 80147e6:	bfac      	ite	ge
 80147e8:	6033      	strge	r3, [r6, #0]
 80147ea:	6032      	strlt	r2, [r6, #0]
 80147ec:	4b90      	ldr	r3, [pc, #576]	@ (8014a30 <_dtoa_r+0x2b8>)
 80147ee:	9e03      	ldr	r6, [sp, #12]
 80147f0:	43b3      	bics	r3, r6
 80147f2:	d110      	bne.n	8014816 <_dtoa_r+0x9e>
 80147f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80147f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80147fa:	6013      	str	r3, [r2, #0]
 80147fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014800:	4323      	orrs	r3, r4
 8014802:	f000 84de 	beq.w	80151c2 <_dtoa_r+0xa4a>
 8014806:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014808:	4f8a      	ldr	r7, [pc, #552]	@ (8014a34 <_dtoa_r+0x2bc>)
 801480a:	2b00      	cmp	r3, #0
 801480c:	f000 84e0 	beq.w	80151d0 <_dtoa_r+0xa58>
 8014810:	1cfb      	adds	r3, r7, #3
 8014812:	f000 bcdb 	b.w	80151cc <_dtoa_r+0xa54>
 8014816:	ed9d 8b02 	vldr	d8, [sp, #8]
 801481a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014822:	d10a      	bne.n	801483a <_dtoa_r+0xc2>
 8014824:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014826:	2301      	movs	r3, #1
 8014828:	6013      	str	r3, [r2, #0]
 801482a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801482c:	b113      	cbz	r3, 8014834 <_dtoa_r+0xbc>
 801482e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014830:	4b81      	ldr	r3, [pc, #516]	@ (8014a38 <_dtoa_r+0x2c0>)
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	4f81      	ldr	r7, [pc, #516]	@ (8014a3c <_dtoa_r+0x2c4>)
 8014836:	f000 bccb 	b.w	80151d0 <_dtoa_r+0xa58>
 801483a:	aa0e      	add	r2, sp, #56	@ 0x38
 801483c:	a90f      	add	r1, sp, #60	@ 0x3c
 801483e:	4648      	mov	r0, r9
 8014840:	eeb0 0b48 	vmov.f64	d0, d8
 8014844:	f001 fd1e 	bl	8016284 <__d2b>
 8014848:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801484c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801484e:	9001      	str	r0, [sp, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d045      	beq.n	80148e0 <_dtoa_r+0x168>
 8014854:	eeb0 7b48 	vmov.f64	d7, d8
 8014858:	ee18 1a90 	vmov	r1, s17
 801485c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014860:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014864:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014868:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801486c:	2500      	movs	r5, #0
 801486e:	ee07 1a90 	vmov	s15, r1
 8014872:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014876:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014a10 <_dtoa_r+0x298>
 801487a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801487e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014a18 <_dtoa_r+0x2a0>
 8014882:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014886:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014a20 <_dtoa_r+0x2a8>
 801488a:	ee07 3a90 	vmov	s15, r3
 801488e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014892:	eeb0 7b46 	vmov.f64	d7, d6
 8014896:	eea4 7b05 	vfma.f64	d7, d4, d5
 801489a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801489e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80148a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a6:	ee16 8a90 	vmov	r8, s13
 80148aa:	d508      	bpl.n	80148be <_dtoa_r+0x146>
 80148ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80148b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80148b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b8:	bf18      	it	ne
 80148ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 80148be:	f1b8 0f16 	cmp.w	r8, #22
 80148c2:	d82b      	bhi.n	801491c <_dtoa_r+0x1a4>
 80148c4:	495e      	ldr	r1, [pc, #376]	@ (8014a40 <_dtoa_r+0x2c8>)
 80148c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80148ca:	ed91 7b00 	vldr	d7, [r1]
 80148ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d6:	d501      	bpl.n	80148dc <_dtoa_r+0x164>
 80148d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80148dc:	2100      	movs	r1, #0
 80148de:	e01e      	b.n	801491e <_dtoa_r+0x1a6>
 80148e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148e2:	4413      	add	r3, r2
 80148e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80148e8:	2920      	cmp	r1, #32
 80148ea:	bfc1      	itttt	gt
 80148ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80148f0:	408e      	lslgt	r6, r1
 80148f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80148f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80148fa:	bfd6      	itet	le
 80148fc:	f1c1 0120 	rsble	r1, r1, #32
 8014900:	4331      	orrgt	r1, r6
 8014902:	fa04 f101 	lslle.w	r1, r4, r1
 8014906:	ee07 1a90 	vmov	s15, r1
 801490a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801490e:	3b01      	subs	r3, #1
 8014910:	ee17 1a90 	vmov	r1, s15
 8014914:	2501      	movs	r5, #1
 8014916:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801491a:	e7a8      	b.n	801486e <_dtoa_r+0xf6>
 801491c:	2101      	movs	r1, #1
 801491e:	1ad2      	subs	r2, r2, r3
 8014920:	1e53      	subs	r3, r2, #1
 8014922:	9306      	str	r3, [sp, #24]
 8014924:	bf45      	ittet	mi
 8014926:	f1c2 0301 	rsbmi	r3, r2, #1
 801492a:	9305      	strmi	r3, [sp, #20]
 801492c:	2300      	movpl	r3, #0
 801492e:	2300      	movmi	r3, #0
 8014930:	bf4c      	ite	mi
 8014932:	9306      	strmi	r3, [sp, #24]
 8014934:	9305      	strpl	r3, [sp, #20]
 8014936:	f1b8 0f00 	cmp.w	r8, #0
 801493a:	910c      	str	r1, [sp, #48]	@ 0x30
 801493c:	db18      	blt.n	8014970 <_dtoa_r+0x1f8>
 801493e:	9b06      	ldr	r3, [sp, #24]
 8014940:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014944:	4443      	add	r3, r8
 8014946:	9306      	str	r3, [sp, #24]
 8014948:	2300      	movs	r3, #0
 801494a:	9a07      	ldr	r2, [sp, #28]
 801494c:	2a09      	cmp	r2, #9
 801494e:	d849      	bhi.n	80149e4 <_dtoa_r+0x26c>
 8014950:	2a05      	cmp	r2, #5
 8014952:	bfc4      	itt	gt
 8014954:	3a04      	subgt	r2, #4
 8014956:	9207      	strgt	r2, [sp, #28]
 8014958:	9a07      	ldr	r2, [sp, #28]
 801495a:	f1a2 0202 	sub.w	r2, r2, #2
 801495e:	bfcc      	ite	gt
 8014960:	2400      	movgt	r4, #0
 8014962:	2401      	movle	r4, #1
 8014964:	2a03      	cmp	r2, #3
 8014966:	d848      	bhi.n	80149fa <_dtoa_r+0x282>
 8014968:	e8df f002 	tbb	[pc, r2]
 801496c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014970:	9b05      	ldr	r3, [sp, #20]
 8014972:	2200      	movs	r2, #0
 8014974:	eba3 0308 	sub.w	r3, r3, r8
 8014978:	9305      	str	r3, [sp, #20]
 801497a:	920a      	str	r2, [sp, #40]	@ 0x28
 801497c:	f1c8 0300 	rsb	r3, r8, #0
 8014980:	e7e3      	b.n	801494a <_dtoa_r+0x1d2>
 8014982:	2200      	movs	r2, #0
 8014984:	9208      	str	r2, [sp, #32]
 8014986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014988:	2a00      	cmp	r2, #0
 801498a:	dc39      	bgt.n	8014a00 <_dtoa_r+0x288>
 801498c:	f04f 0b01 	mov.w	fp, #1
 8014990:	46da      	mov	sl, fp
 8014992:	465a      	mov	r2, fp
 8014994:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014998:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801499c:	2100      	movs	r1, #0
 801499e:	2004      	movs	r0, #4
 80149a0:	f100 0614 	add.w	r6, r0, #20
 80149a4:	4296      	cmp	r6, r2
 80149a6:	d930      	bls.n	8014a0a <_dtoa_r+0x292>
 80149a8:	6079      	str	r1, [r7, #4]
 80149aa:	4648      	mov	r0, r9
 80149ac:	9304      	str	r3, [sp, #16]
 80149ae:	f001 f885 	bl	8015abc <_Balloc>
 80149b2:	9b04      	ldr	r3, [sp, #16]
 80149b4:	4607      	mov	r7, r0
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d146      	bne.n	8014a48 <_dtoa_r+0x2d0>
 80149ba:	4b22      	ldr	r3, [pc, #136]	@ (8014a44 <_dtoa_r+0x2cc>)
 80149bc:	4602      	mov	r2, r0
 80149be:	f240 11af 	movw	r1, #431	@ 0x1af
 80149c2:	e6f2      	b.n	80147aa <_dtoa_r+0x32>
 80149c4:	2201      	movs	r2, #1
 80149c6:	e7dd      	b.n	8014984 <_dtoa_r+0x20c>
 80149c8:	2200      	movs	r2, #0
 80149ca:	9208      	str	r2, [sp, #32]
 80149cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80149ce:	eb08 0b02 	add.w	fp, r8, r2
 80149d2:	f10b 0a01 	add.w	sl, fp, #1
 80149d6:	4652      	mov	r2, sl
 80149d8:	2a01      	cmp	r2, #1
 80149da:	bfb8      	it	lt
 80149dc:	2201      	movlt	r2, #1
 80149de:	e7db      	b.n	8014998 <_dtoa_r+0x220>
 80149e0:	2201      	movs	r2, #1
 80149e2:	e7f2      	b.n	80149ca <_dtoa_r+0x252>
 80149e4:	2401      	movs	r4, #1
 80149e6:	2200      	movs	r2, #0
 80149e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80149ec:	f04f 3bff 	mov.w	fp, #4294967295
 80149f0:	2100      	movs	r1, #0
 80149f2:	46da      	mov	sl, fp
 80149f4:	2212      	movs	r2, #18
 80149f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80149f8:	e7ce      	b.n	8014998 <_dtoa_r+0x220>
 80149fa:	2201      	movs	r2, #1
 80149fc:	9208      	str	r2, [sp, #32]
 80149fe:	e7f5      	b.n	80149ec <_dtoa_r+0x274>
 8014a00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8014a04:	46da      	mov	sl, fp
 8014a06:	465a      	mov	r2, fp
 8014a08:	e7c6      	b.n	8014998 <_dtoa_r+0x220>
 8014a0a:	3101      	adds	r1, #1
 8014a0c:	0040      	lsls	r0, r0, #1
 8014a0e:	e7c7      	b.n	80149a0 <_dtoa_r+0x228>
 8014a10:	636f4361 	.word	0x636f4361
 8014a14:	3fd287a7 	.word	0x3fd287a7
 8014a18:	8b60c8b3 	.word	0x8b60c8b3
 8014a1c:	3fc68a28 	.word	0x3fc68a28
 8014a20:	509f79fb 	.word	0x509f79fb
 8014a24:	3fd34413 	.word	0x3fd34413
 8014a28:	08017362 	.word	0x08017362
 8014a2c:	08017379 	.word	0x08017379
 8014a30:	7ff00000 	.word	0x7ff00000
 8014a34:	0801735e 	.word	0x0801735e
 8014a38:	0801732a 	.word	0x0801732a
 8014a3c:	08017329 	.word	0x08017329
 8014a40:	080174d0 	.word	0x080174d0
 8014a44:	080173d1 	.word	0x080173d1
 8014a48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8014a4c:	f1ba 0f0e 	cmp.w	sl, #14
 8014a50:	6010      	str	r0, [r2, #0]
 8014a52:	d86f      	bhi.n	8014b34 <_dtoa_r+0x3bc>
 8014a54:	2c00      	cmp	r4, #0
 8014a56:	d06d      	beq.n	8014b34 <_dtoa_r+0x3bc>
 8014a58:	f1b8 0f00 	cmp.w	r8, #0
 8014a5c:	f340 80c2 	ble.w	8014be4 <_dtoa_r+0x46c>
 8014a60:	4aca      	ldr	r2, [pc, #808]	@ (8014d8c <_dtoa_r+0x614>)
 8014a62:	f008 010f 	and.w	r1, r8, #15
 8014a66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014a6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8014a6e:	ed92 7b00 	vldr	d7, [r2]
 8014a72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014a76:	f000 80a9 	beq.w	8014bcc <_dtoa_r+0x454>
 8014a7a:	4ac5      	ldr	r2, [pc, #788]	@ (8014d90 <_dtoa_r+0x618>)
 8014a7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014a80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014a84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014a88:	f001 010f 	and.w	r1, r1, #15
 8014a8c:	2203      	movs	r2, #3
 8014a8e:	48c0      	ldr	r0, [pc, #768]	@ (8014d90 <_dtoa_r+0x618>)
 8014a90:	2900      	cmp	r1, #0
 8014a92:	f040 809d 	bne.w	8014bd0 <_dtoa_r+0x458>
 8014a96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014a9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014a9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014aa2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014aa8:	2900      	cmp	r1, #0
 8014aaa:	f000 80c1 	beq.w	8014c30 <_dtoa_r+0x4b8>
 8014aae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014ab2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aba:	f140 80b9 	bpl.w	8014c30 <_dtoa_r+0x4b8>
 8014abe:	f1ba 0f00 	cmp.w	sl, #0
 8014ac2:	f000 80b5 	beq.w	8014c30 <_dtoa_r+0x4b8>
 8014ac6:	f1bb 0f00 	cmp.w	fp, #0
 8014aca:	dd31      	ble.n	8014b30 <_dtoa_r+0x3b8>
 8014acc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ad8:	f108 31ff 	add.w	r1, r8, #4294967295
 8014adc:	9104      	str	r1, [sp, #16]
 8014ade:	3201      	adds	r2, #1
 8014ae0:	465c      	mov	r4, fp
 8014ae2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ae6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8014aea:	ee07 2a90 	vmov	s15, r2
 8014aee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014af2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014af6:	ee15 2a90 	vmov	r2, s11
 8014afa:	ec51 0b15 	vmov	r0, r1, d5
 8014afe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014b02:	2c00      	cmp	r4, #0
 8014b04:	f040 8098 	bne.w	8014c38 <_dtoa_r+0x4c0>
 8014b08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014b0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014b10:	ec41 0b17 	vmov	d7, r0, r1
 8014b14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1c:	f300 8261 	bgt.w	8014fe2 <_dtoa_r+0x86a>
 8014b20:	eeb1 7b47 	vneg.f64	d7, d7
 8014b24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2c:	f100 80f5 	bmi.w	8014d1a <_dtoa_r+0x5a2>
 8014b30:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014b34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014b36:	2a00      	cmp	r2, #0
 8014b38:	f2c0 812c 	blt.w	8014d94 <_dtoa_r+0x61c>
 8014b3c:	f1b8 0f0e 	cmp.w	r8, #14
 8014b40:	f300 8128 	bgt.w	8014d94 <_dtoa_r+0x61c>
 8014b44:	4b91      	ldr	r3, [pc, #580]	@ (8014d8c <_dtoa_r+0x614>)
 8014b46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014b4a:	ed93 6b00 	vldr	d6, [r3]
 8014b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	da03      	bge.n	8014b5c <_dtoa_r+0x3e4>
 8014b54:	f1ba 0f00 	cmp.w	sl, #0
 8014b58:	f340 80d2 	ble.w	8014d00 <_dtoa_r+0x588>
 8014b5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b64:	463e      	mov	r6, r7
 8014b66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014b6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014b6e:	ee15 3a10 	vmov	r3, s10
 8014b72:	3330      	adds	r3, #48	@ 0x30
 8014b74:	f806 3b01 	strb.w	r3, [r6], #1
 8014b78:	1bf3      	subs	r3, r6, r7
 8014b7a:	459a      	cmp	sl, r3
 8014b7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014b80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014b84:	f040 80f8 	bne.w	8014d78 <_dtoa_r+0x600>
 8014b88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014b8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b94:	f300 80dd 	bgt.w	8014d52 <_dtoa_r+0x5da>
 8014b98:	eeb4 7b46 	vcmp.f64	d7, d6
 8014b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba0:	d104      	bne.n	8014bac <_dtoa_r+0x434>
 8014ba2:	ee15 3a10 	vmov	r3, s10
 8014ba6:	07db      	lsls	r3, r3, #31
 8014ba8:	f100 80d3 	bmi.w	8014d52 <_dtoa_r+0x5da>
 8014bac:	9901      	ldr	r1, [sp, #4]
 8014bae:	4648      	mov	r0, r9
 8014bb0:	f000 ffc4 	bl	8015b3c <_Bfree>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014bb8:	7033      	strb	r3, [r6, #0]
 8014bba:	f108 0301 	add.w	r3, r8, #1
 8014bbe:	6013      	str	r3, [r2, #0]
 8014bc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	f000 8304 	beq.w	80151d0 <_dtoa_r+0xa58>
 8014bc8:	601e      	str	r6, [r3, #0]
 8014bca:	e301      	b.n	80151d0 <_dtoa_r+0xa58>
 8014bcc:	2202      	movs	r2, #2
 8014bce:	e75e      	b.n	8014a8e <_dtoa_r+0x316>
 8014bd0:	07cc      	lsls	r4, r1, #31
 8014bd2:	d504      	bpl.n	8014bde <_dtoa_r+0x466>
 8014bd4:	ed90 6b00 	vldr	d6, [r0]
 8014bd8:	3201      	adds	r2, #1
 8014bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014bde:	1049      	asrs	r1, r1, #1
 8014be0:	3008      	adds	r0, #8
 8014be2:	e755      	b.n	8014a90 <_dtoa_r+0x318>
 8014be4:	d022      	beq.n	8014c2c <_dtoa_r+0x4b4>
 8014be6:	f1c8 0100 	rsb	r1, r8, #0
 8014bea:	4a68      	ldr	r2, [pc, #416]	@ (8014d8c <_dtoa_r+0x614>)
 8014bec:	f001 000f 	and.w	r0, r1, #15
 8014bf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014bf4:	ed92 7b00 	vldr	d7, [r2]
 8014bf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014bfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c00:	4863      	ldr	r0, [pc, #396]	@ (8014d90 <_dtoa_r+0x618>)
 8014c02:	1109      	asrs	r1, r1, #4
 8014c04:	2400      	movs	r4, #0
 8014c06:	2202      	movs	r2, #2
 8014c08:	b929      	cbnz	r1, 8014c16 <_dtoa_r+0x49e>
 8014c0a:	2c00      	cmp	r4, #0
 8014c0c:	f43f af49 	beq.w	8014aa2 <_dtoa_r+0x32a>
 8014c10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c14:	e745      	b.n	8014aa2 <_dtoa_r+0x32a>
 8014c16:	07ce      	lsls	r6, r1, #31
 8014c18:	d505      	bpl.n	8014c26 <_dtoa_r+0x4ae>
 8014c1a:	ed90 6b00 	vldr	d6, [r0]
 8014c1e:	3201      	adds	r2, #1
 8014c20:	2401      	movs	r4, #1
 8014c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c26:	1049      	asrs	r1, r1, #1
 8014c28:	3008      	adds	r0, #8
 8014c2a:	e7ed      	b.n	8014c08 <_dtoa_r+0x490>
 8014c2c:	2202      	movs	r2, #2
 8014c2e:	e738      	b.n	8014aa2 <_dtoa_r+0x32a>
 8014c30:	f8cd 8010 	str.w	r8, [sp, #16]
 8014c34:	4654      	mov	r4, sl
 8014c36:	e754      	b.n	8014ae2 <_dtoa_r+0x36a>
 8014c38:	4a54      	ldr	r2, [pc, #336]	@ (8014d8c <_dtoa_r+0x614>)
 8014c3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014c3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014c42:	9a08      	ldr	r2, [sp, #32]
 8014c44:	ec41 0b17 	vmov	d7, r0, r1
 8014c48:	443c      	add	r4, r7
 8014c4a:	b34a      	cbz	r2, 8014ca0 <_dtoa_r+0x528>
 8014c4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014c50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014c54:	463e      	mov	r6, r7
 8014c56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014c5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014c5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014c62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014c66:	ee14 2a90 	vmov	r2, s9
 8014c6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014c6e:	3230      	adds	r2, #48	@ 0x30
 8014c70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014c74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c7c:	f806 2b01 	strb.w	r2, [r6], #1
 8014c80:	d438      	bmi.n	8014cf4 <_dtoa_r+0x57c>
 8014c82:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014c86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	d462      	bmi.n	8014d56 <_dtoa_r+0x5de>
 8014c90:	42a6      	cmp	r6, r4
 8014c92:	f43f af4d 	beq.w	8014b30 <_dtoa_r+0x3b8>
 8014c96:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014c9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014c9e:	e7e0      	b.n	8014c62 <_dtoa_r+0x4ea>
 8014ca0:	4621      	mov	r1, r4
 8014ca2:	463e      	mov	r6, r7
 8014ca4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014ca8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014cac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014cb0:	ee14 2a90 	vmov	r2, s9
 8014cb4:	3230      	adds	r2, #48	@ 0x30
 8014cb6:	f806 2b01 	strb.w	r2, [r6], #1
 8014cba:	42a6      	cmp	r6, r4
 8014cbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014cc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014cc4:	d119      	bne.n	8014cfa <_dtoa_r+0x582>
 8014cc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8014cca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014cce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd6:	dc3e      	bgt.n	8014d56 <_dtoa_r+0x5de>
 8014cd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014cdc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce4:	f57f af24 	bpl.w	8014b30 <_dtoa_r+0x3b8>
 8014ce8:	460e      	mov	r6, r1
 8014cea:	3901      	subs	r1, #1
 8014cec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014cf0:	2b30      	cmp	r3, #48	@ 0x30
 8014cf2:	d0f9      	beq.n	8014ce8 <_dtoa_r+0x570>
 8014cf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014cf8:	e758      	b.n	8014bac <_dtoa_r+0x434>
 8014cfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014cfe:	e7d5      	b.n	8014cac <_dtoa_r+0x534>
 8014d00:	d10b      	bne.n	8014d1a <_dtoa_r+0x5a2>
 8014d02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014d06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014d0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d16:	f2c0 8161 	blt.w	8014fdc <_dtoa_r+0x864>
 8014d1a:	2400      	movs	r4, #0
 8014d1c:	4625      	mov	r5, r4
 8014d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d20:	43db      	mvns	r3, r3
 8014d22:	9304      	str	r3, [sp, #16]
 8014d24:	463e      	mov	r6, r7
 8014d26:	f04f 0800 	mov.w	r8, #0
 8014d2a:	4621      	mov	r1, r4
 8014d2c:	4648      	mov	r0, r9
 8014d2e:	f000 ff05 	bl	8015b3c <_Bfree>
 8014d32:	2d00      	cmp	r5, #0
 8014d34:	d0de      	beq.n	8014cf4 <_dtoa_r+0x57c>
 8014d36:	f1b8 0f00 	cmp.w	r8, #0
 8014d3a:	d005      	beq.n	8014d48 <_dtoa_r+0x5d0>
 8014d3c:	45a8      	cmp	r8, r5
 8014d3e:	d003      	beq.n	8014d48 <_dtoa_r+0x5d0>
 8014d40:	4641      	mov	r1, r8
 8014d42:	4648      	mov	r0, r9
 8014d44:	f000 fefa 	bl	8015b3c <_Bfree>
 8014d48:	4629      	mov	r1, r5
 8014d4a:	4648      	mov	r0, r9
 8014d4c:	f000 fef6 	bl	8015b3c <_Bfree>
 8014d50:	e7d0      	b.n	8014cf4 <_dtoa_r+0x57c>
 8014d52:	f8cd 8010 	str.w	r8, [sp, #16]
 8014d56:	4633      	mov	r3, r6
 8014d58:	461e      	mov	r6, r3
 8014d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014d5e:	2a39      	cmp	r2, #57	@ 0x39
 8014d60:	d106      	bne.n	8014d70 <_dtoa_r+0x5f8>
 8014d62:	429f      	cmp	r7, r3
 8014d64:	d1f8      	bne.n	8014d58 <_dtoa_r+0x5e0>
 8014d66:	9a04      	ldr	r2, [sp, #16]
 8014d68:	3201      	adds	r2, #1
 8014d6a:	9204      	str	r2, [sp, #16]
 8014d6c:	2230      	movs	r2, #48	@ 0x30
 8014d6e:	703a      	strb	r2, [r7, #0]
 8014d70:	781a      	ldrb	r2, [r3, #0]
 8014d72:	3201      	adds	r2, #1
 8014d74:	701a      	strb	r2, [r3, #0]
 8014d76:	e7bd      	b.n	8014cf4 <_dtoa_r+0x57c>
 8014d78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014d7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d84:	f47f aeef 	bne.w	8014b66 <_dtoa_r+0x3ee>
 8014d88:	e710      	b.n	8014bac <_dtoa_r+0x434>
 8014d8a:	bf00      	nop
 8014d8c:	080174d0 	.word	0x080174d0
 8014d90:	080174a8 	.word	0x080174a8
 8014d94:	9908      	ldr	r1, [sp, #32]
 8014d96:	2900      	cmp	r1, #0
 8014d98:	f000 80e3 	beq.w	8014f62 <_dtoa_r+0x7ea>
 8014d9c:	9907      	ldr	r1, [sp, #28]
 8014d9e:	2901      	cmp	r1, #1
 8014da0:	f300 80c8 	bgt.w	8014f34 <_dtoa_r+0x7bc>
 8014da4:	2d00      	cmp	r5, #0
 8014da6:	f000 80c1 	beq.w	8014f2c <_dtoa_r+0x7b4>
 8014daa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014dae:	9e05      	ldr	r6, [sp, #20]
 8014db0:	461c      	mov	r4, r3
 8014db2:	9304      	str	r3, [sp, #16]
 8014db4:	9b05      	ldr	r3, [sp, #20]
 8014db6:	4413      	add	r3, r2
 8014db8:	9305      	str	r3, [sp, #20]
 8014dba:	9b06      	ldr	r3, [sp, #24]
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	4648      	mov	r0, r9
 8014dc2:	9306      	str	r3, [sp, #24]
 8014dc4:	f000 ffb8 	bl	8015d38 <__i2b>
 8014dc8:	9b04      	ldr	r3, [sp, #16]
 8014dca:	4605      	mov	r5, r0
 8014dcc:	b166      	cbz	r6, 8014de8 <_dtoa_r+0x670>
 8014dce:	9a06      	ldr	r2, [sp, #24]
 8014dd0:	2a00      	cmp	r2, #0
 8014dd2:	dd09      	ble.n	8014de8 <_dtoa_r+0x670>
 8014dd4:	42b2      	cmp	r2, r6
 8014dd6:	9905      	ldr	r1, [sp, #20]
 8014dd8:	bfa8      	it	ge
 8014dda:	4632      	movge	r2, r6
 8014ddc:	1a89      	subs	r1, r1, r2
 8014dde:	9105      	str	r1, [sp, #20]
 8014de0:	9906      	ldr	r1, [sp, #24]
 8014de2:	1ab6      	subs	r6, r6, r2
 8014de4:	1a8a      	subs	r2, r1, r2
 8014de6:	9206      	str	r2, [sp, #24]
 8014de8:	b1fb      	cbz	r3, 8014e2a <_dtoa_r+0x6b2>
 8014dea:	9a08      	ldr	r2, [sp, #32]
 8014dec:	2a00      	cmp	r2, #0
 8014dee:	f000 80bc 	beq.w	8014f6a <_dtoa_r+0x7f2>
 8014df2:	b19c      	cbz	r4, 8014e1c <_dtoa_r+0x6a4>
 8014df4:	4629      	mov	r1, r5
 8014df6:	4622      	mov	r2, r4
 8014df8:	4648      	mov	r0, r9
 8014dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014dfc:	f001 f85c 	bl	8015eb8 <__pow5mult>
 8014e00:	9a01      	ldr	r2, [sp, #4]
 8014e02:	4601      	mov	r1, r0
 8014e04:	4605      	mov	r5, r0
 8014e06:	4648      	mov	r0, r9
 8014e08:	f000 ffac 	bl	8015d64 <__multiply>
 8014e0c:	9901      	ldr	r1, [sp, #4]
 8014e0e:	9004      	str	r0, [sp, #16]
 8014e10:	4648      	mov	r0, r9
 8014e12:	f000 fe93 	bl	8015b3c <_Bfree>
 8014e16:	9a04      	ldr	r2, [sp, #16]
 8014e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e1a:	9201      	str	r2, [sp, #4]
 8014e1c:	1b1a      	subs	r2, r3, r4
 8014e1e:	d004      	beq.n	8014e2a <_dtoa_r+0x6b2>
 8014e20:	9901      	ldr	r1, [sp, #4]
 8014e22:	4648      	mov	r0, r9
 8014e24:	f001 f848 	bl	8015eb8 <__pow5mult>
 8014e28:	9001      	str	r0, [sp, #4]
 8014e2a:	2101      	movs	r1, #1
 8014e2c:	4648      	mov	r0, r9
 8014e2e:	f000 ff83 	bl	8015d38 <__i2b>
 8014e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e34:	4604      	mov	r4, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	f000 81d0 	beq.w	80151dc <_dtoa_r+0xa64>
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	4601      	mov	r1, r0
 8014e40:	4648      	mov	r0, r9
 8014e42:	f001 f839 	bl	8015eb8 <__pow5mult>
 8014e46:	9b07      	ldr	r3, [sp, #28]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	f300 8095 	bgt.w	8014f7a <_dtoa_r+0x802>
 8014e50:	9b02      	ldr	r3, [sp, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	f040 808b 	bne.w	8014f6e <_dtoa_r+0x7f6>
 8014e58:	9b03      	ldr	r3, [sp, #12]
 8014e5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014e5e:	2a00      	cmp	r2, #0
 8014e60:	f040 8087 	bne.w	8014f72 <_dtoa_r+0x7fa>
 8014e64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014e68:	0d12      	lsrs	r2, r2, #20
 8014e6a:	0512      	lsls	r2, r2, #20
 8014e6c:	2a00      	cmp	r2, #0
 8014e6e:	f000 8082 	beq.w	8014f76 <_dtoa_r+0x7fe>
 8014e72:	9b05      	ldr	r3, [sp, #20]
 8014e74:	3301      	adds	r3, #1
 8014e76:	9305      	str	r3, [sp, #20]
 8014e78:	9b06      	ldr	r3, [sp, #24]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	9306      	str	r3, [sp, #24]
 8014e7e:	2301      	movs	r3, #1
 8014e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 81af 	beq.w	80151e8 <_dtoa_r+0xa70>
 8014e8a:	6922      	ldr	r2, [r4, #16]
 8014e8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014e90:	6910      	ldr	r0, [r2, #16]
 8014e92:	f000 ff05 	bl	8015ca0 <__hi0bits>
 8014e96:	f1c0 0020 	rsb	r0, r0, #32
 8014e9a:	9b06      	ldr	r3, [sp, #24]
 8014e9c:	4418      	add	r0, r3
 8014e9e:	f010 001f 	ands.w	r0, r0, #31
 8014ea2:	d076      	beq.n	8014f92 <_dtoa_r+0x81a>
 8014ea4:	f1c0 0220 	rsb	r2, r0, #32
 8014ea8:	2a04      	cmp	r2, #4
 8014eaa:	dd69      	ble.n	8014f80 <_dtoa_r+0x808>
 8014eac:	9b05      	ldr	r3, [sp, #20]
 8014eae:	f1c0 001c 	rsb	r0, r0, #28
 8014eb2:	4403      	add	r3, r0
 8014eb4:	9305      	str	r3, [sp, #20]
 8014eb6:	9b06      	ldr	r3, [sp, #24]
 8014eb8:	4406      	add	r6, r0
 8014eba:	4403      	add	r3, r0
 8014ebc:	9306      	str	r3, [sp, #24]
 8014ebe:	9b05      	ldr	r3, [sp, #20]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	dd05      	ble.n	8014ed0 <_dtoa_r+0x758>
 8014ec4:	9901      	ldr	r1, [sp, #4]
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	4648      	mov	r0, r9
 8014eca:	f001 f84f 	bl	8015f6c <__lshift>
 8014ece:	9001      	str	r0, [sp, #4]
 8014ed0:	9b06      	ldr	r3, [sp, #24]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	dd05      	ble.n	8014ee2 <_dtoa_r+0x76a>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	461a      	mov	r2, r3
 8014eda:	4648      	mov	r0, r9
 8014edc:	f001 f846 	bl	8015f6c <__lshift>
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d056      	beq.n	8014f96 <_dtoa_r+0x81e>
 8014ee8:	9801      	ldr	r0, [sp, #4]
 8014eea:	4621      	mov	r1, r4
 8014eec:	f001 f8aa 	bl	8016044 <__mcmp>
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	da50      	bge.n	8014f96 <_dtoa_r+0x81e>
 8014ef4:	f108 33ff 	add.w	r3, r8, #4294967295
 8014ef8:	9304      	str	r3, [sp, #16]
 8014efa:	9901      	ldr	r1, [sp, #4]
 8014efc:	2300      	movs	r3, #0
 8014efe:	220a      	movs	r2, #10
 8014f00:	4648      	mov	r0, r9
 8014f02:	f000 fe3d 	bl	8015b80 <__multadd>
 8014f06:	9b08      	ldr	r3, [sp, #32]
 8014f08:	9001      	str	r0, [sp, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f000 816e 	beq.w	80151ec <_dtoa_r+0xa74>
 8014f10:	4629      	mov	r1, r5
 8014f12:	2300      	movs	r3, #0
 8014f14:	220a      	movs	r2, #10
 8014f16:	4648      	mov	r0, r9
 8014f18:	f000 fe32 	bl	8015b80 <__multadd>
 8014f1c:	f1bb 0f00 	cmp.w	fp, #0
 8014f20:	4605      	mov	r5, r0
 8014f22:	dc64      	bgt.n	8014fee <_dtoa_r+0x876>
 8014f24:	9b07      	ldr	r3, [sp, #28]
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	dc3e      	bgt.n	8014fa8 <_dtoa_r+0x830>
 8014f2a:	e060      	b.n	8014fee <_dtoa_r+0x876>
 8014f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014f2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014f32:	e73c      	b.n	8014dae <_dtoa_r+0x636>
 8014f34:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014f38:	42a3      	cmp	r3, r4
 8014f3a:	bfbf      	itttt	lt
 8014f3c:	1ae2      	sublt	r2, r4, r3
 8014f3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014f40:	189b      	addlt	r3, r3, r2
 8014f42:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8014f44:	bfae      	itee	ge
 8014f46:	1b1c      	subge	r4, r3, r4
 8014f48:	4623      	movlt	r3, r4
 8014f4a:	2400      	movlt	r4, #0
 8014f4c:	f1ba 0f00 	cmp.w	sl, #0
 8014f50:	bfb5      	itete	lt
 8014f52:	9a05      	ldrlt	r2, [sp, #20]
 8014f54:	9e05      	ldrge	r6, [sp, #20]
 8014f56:	eba2 060a 	sublt.w	r6, r2, sl
 8014f5a:	4652      	movge	r2, sl
 8014f5c:	bfb8      	it	lt
 8014f5e:	2200      	movlt	r2, #0
 8014f60:	e727      	b.n	8014db2 <_dtoa_r+0x63a>
 8014f62:	9e05      	ldr	r6, [sp, #20]
 8014f64:	9d08      	ldr	r5, [sp, #32]
 8014f66:	461c      	mov	r4, r3
 8014f68:	e730      	b.n	8014dcc <_dtoa_r+0x654>
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	e758      	b.n	8014e20 <_dtoa_r+0x6a8>
 8014f6e:	2300      	movs	r3, #0
 8014f70:	e786      	b.n	8014e80 <_dtoa_r+0x708>
 8014f72:	9b02      	ldr	r3, [sp, #8]
 8014f74:	e784      	b.n	8014e80 <_dtoa_r+0x708>
 8014f76:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014f78:	e783      	b.n	8014e82 <_dtoa_r+0x70a>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f7e:	e784      	b.n	8014e8a <_dtoa_r+0x712>
 8014f80:	d09d      	beq.n	8014ebe <_dtoa_r+0x746>
 8014f82:	9b05      	ldr	r3, [sp, #20]
 8014f84:	321c      	adds	r2, #28
 8014f86:	4413      	add	r3, r2
 8014f88:	9305      	str	r3, [sp, #20]
 8014f8a:	9b06      	ldr	r3, [sp, #24]
 8014f8c:	4416      	add	r6, r2
 8014f8e:	4413      	add	r3, r2
 8014f90:	e794      	b.n	8014ebc <_dtoa_r+0x744>
 8014f92:	4602      	mov	r2, r0
 8014f94:	e7f5      	b.n	8014f82 <_dtoa_r+0x80a>
 8014f96:	f1ba 0f00 	cmp.w	sl, #0
 8014f9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8014f9e:	46d3      	mov	fp, sl
 8014fa0:	dc21      	bgt.n	8014fe6 <_dtoa_r+0x86e>
 8014fa2:	9b07      	ldr	r3, [sp, #28]
 8014fa4:	2b02      	cmp	r3, #2
 8014fa6:	dd1e      	ble.n	8014fe6 <_dtoa_r+0x86e>
 8014fa8:	f1bb 0f00 	cmp.w	fp, #0
 8014fac:	f47f aeb7 	bne.w	8014d1e <_dtoa_r+0x5a6>
 8014fb0:	4621      	mov	r1, r4
 8014fb2:	465b      	mov	r3, fp
 8014fb4:	2205      	movs	r2, #5
 8014fb6:	4648      	mov	r0, r9
 8014fb8:	f000 fde2 	bl	8015b80 <__multadd>
 8014fbc:	4601      	mov	r1, r0
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	9801      	ldr	r0, [sp, #4]
 8014fc2:	f001 f83f 	bl	8016044 <__mcmp>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	f77f aea9 	ble.w	8014d1e <_dtoa_r+0x5a6>
 8014fcc:	463e      	mov	r6, r7
 8014fce:	2331      	movs	r3, #49	@ 0x31
 8014fd0:	f806 3b01 	strb.w	r3, [r6], #1
 8014fd4:	9b04      	ldr	r3, [sp, #16]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	9304      	str	r3, [sp, #16]
 8014fda:	e6a4      	b.n	8014d26 <_dtoa_r+0x5ae>
 8014fdc:	f8cd 8010 	str.w	r8, [sp, #16]
 8014fe0:	4654      	mov	r4, sl
 8014fe2:	4625      	mov	r5, r4
 8014fe4:	e7f2      	b.n	8014fcc <_dtoa_r+0x854>
 8014fe6:	9b08      	ldr	r3, [sp, #32]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 8103 	beq.w	80151f4 <_dtoa_r+0xa7c>
 8014fee:	2e00      	cmp	r6, #0
 8014ff0:	dd05      	ble.n	8014ffe <_dtoa_r+0x886>
 8014ff2:	4629      	mov	r1, r5
 8014ff4:	4632      	mov	r2, r6
 8014ff6:	4648      	mov	r0, r9
 8014ff8:	f000 ffb8 	bl	8015f6c <__lshift>
 8014ffc:	4605      	mov	r5, r0
 8014ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015000:	2b00      	cmp	r3, #0
 8015002:	d058      	beq.n	80150b6 <_dtoa_r+0x93e>
 8015004:	6869      	ldr	r1, [r5, #4]
 8015006:	4648      	mov	r0, r9
 8015008:	f000 fd58 	bl	8015abc <_Balloc>
 801500c:	4606      	mov	r6, r0
 801500e:	b928      	cbnz	r0, 801501c <_dtoa_r+0x8a4>
 8015010:	4b82      	ldr	r3, [pc, #520]	@ (801521c <_dtoa_r+0xaa4>)
 8015012:	4602      	mov	r2, r0
 8015014:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015018:	f7ff bbc7 	b.w	80147aa <_dtoa_r+0x32>
 801501c:	692a      	ldr	r2, [r5, #16]
 801501e:	3202      	adds	r2, #2
 8015020:	0092      	lsls	r2, r2, #2
 8015022:	f105 010c 	add.w	r1, r5, #12
 8015026:	300c      	adds	r0, #12
 8015028:	f7ff fb05 	bl	8014636 <memcpy>
 801502c:	2201      	movs	r2, #1
 801502e:	4631      	mov	r1, r6
 8015030:	4648      	mov	r0, r9
 8015032:	f000 ff9b 	bl	8015f6c <__lshift>
 8015036:	1c7b      	adds	r3, r7, #1
 8015038:	9305      	str	r3, [sp, #20]
 801503a:	eb07 030b 	add.w	r3, r7, fp
 801503e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015040:	9b02      	ldr	r3, [sp, #8]
 8015042:	f003 0301 	and.w	r3, r3, #1
 8015046:	46a8      	mov	r8, r5
 8015048:	9308      	str	r3, [sp, #32]
 801504a:	4605      	mov	r5, r0
 801504c:	9b05      	ldr	r3, [sp, #20]
 801504e:	9801      	ldr	r0, [sp, #4]
 8015050:	4621      	mov	r1, r4
 8015052:	f103 3bff 	add.w	fp, r3, #4294967295
 8015056:	f7ff fb07 	bl	8014668 <quorem>
 801505a:	4641      	mov	r1, r8
 801505c:	9002      	str	r0, [sp, #8]
 801505e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015062:	9801      	ldr	r0, [sp, #4]
 8015064:	f000 ffee 	bl	8016044 <__mcmp>
 8015068:	462a      	mov	r2, r5
 801506a:	9006      	str	r0, [sp, #24]
 801506c:	4621      	mov	r1, r4
 801506e:	4648      	mov	r0, r9
 8015070:	f001 f804 	bl	801607c <__mdiff>
 8015074:	68c2      	ldr	r2, [r0, #12]
 8015076:	4606      	mov	r6, r0
 8015078:	b9fa      	cbnz	r2, 80150ba <_dtoa_r+0x942>
 801507a:	4601      	mov	r1, r0
 801507c:	9801      	ldr	r0, [sp, #4]
 801507e:	f000 ffe1 	bl	8016044 <__mcmp>
 8015082:	4602      	mov	r2, r0
 8015084:	4631      	mov	r1, r6
 8015086:	4648      	mov	r0, r9
 8015088:	920a      	str	r2, [sp, #40]	@ 0x28
 801508a:	f000 fd57 	bl	8015b3c <_Bfree>
 801508e:	9b07      	ldr	r3, [sp, #28]
 8015090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015092:	9e05      	ldr	r6, [sp, #20]
 8015094:	ea43 0102 	orr.w	r1, r3, r2
 8015098:	9b08      	ldr	r3, [sp, #32]
 801509a:	4319      	orrs	r1, r3
 801509c:	d10f      	bne.n	80150be <_dtoa_r+0x946>
 801509e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80150a2:	d028      	beq.n	80150f6 <_dtoa_r+0x97e>
 80150a4:	9b06      	ldr	r3, [sp, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	dd02      	ble.n	80150b0 <_dtoa_r+0x938>
 80150aa:	9b02      	ldr	r3, [sp, #8]
 80150ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80150b0:	f88b a000 	strb.w	sl, [fp]
 80150b4:	e639      	b.n	8014d2a <_dtoa_r+0x5b2>
 80150b6:	4628      	mov	r0, r5
 80150b8:	e7bd      	b.n	8015036 <_dtoa_r+0x8be>
 80150ba:	2201      	movs	r2, #1
 80150bc:	e7e2      	b.n	8015084 <_dtoa_r+0x90c>
 80150be:	9b06      	ldr	r3, [sp, #24]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	db04      	blt.n	80150ce <_dtoa_r+0x956>
 80150c4:	9907      	ldr	r1, [sp, #28]
 80150c6:	430b      	orrs	r3, r1
 80150c8:	9908      	ldr	r1, [sp, #32]
 80150ca:	430b      	orrs	r3, r1
 80150cc:	d120      	bne.n	8015110 <_dtoa_r+0x998>
 80150ce:	2a00      	cmp	r2, #0
 80150d0:	ddee      	ble.n	80150b0 <_dtoa_r+0x938>
 80150d2:	9901      	ldr	r1, [sp, #4]
 80150d4:	2201      	movs	r2, #1
 80150d6:	4648      	mov	r0, r9
 80150d8:	f000 ff48 	bl	8015f6c <__lshift>
 80150dc:	4621      	mov	r1, r4
 80150de:	9001      	str	r0, [sp, #4]
 80150e0:	f000 ffb0 	bl	8016044 <__mcmp>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	dc03      	bgt.n	80150f0 <_dtoa_r+0x978>
 80150e8:	d1e2      	bne.n	80150b0 <_dtoa_r+0x938>
 80150ea:	f01a 0f01 	tst.w	sl, #1
 80150ee:	d0df      	beq.n	80150b0 <_dtoa_r+0x938>
 80150f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80150f4:	d1d9      	bne.n	80150aa <_dtoa_r+0x932>
 80150f6:	2339      	movs	r3, #57	@ 0x39
 80150f8:	f88b 3000 	strb.w	r3, [fp]
 80150fc:	4633      	mov	r3, r6
 80150fe:	461e      	mov	r6, r3
 8015100:	3b01      	subs	r3, #1
 8015102:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015106:	2a39      	cmp	r2, #57	@ 0x39
 8015108:	d053      	beq.n	80151b2 <_dtoa_r+0xa3a>
 801510a:	3201      	adds	r2, #1
 801510c:	701a      	strb	r2, [r3, #0]
 801510e:	e60c      	b.n	8014d2a <_dtoa_r+0x5b2>
 8015110:	2a00      	cmp	r2, #0
 8015112:	dd07      	ble.n	8015124 <_dtoa_r+0x9ac>
 8015114:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015118:	d0ed      	beq.n	80150f6 <_dtoa_r+0x97e>
 801511a:	f10a 0301 	add.w	r3, sl, #1
 801511e:	f88b 3000 	strb.w	r3, [fp]
 8015122:	e602      	b.n	8014d2a <_dtoa_r+0x5b2>
 8015124:	9b05      	ldr	r3, [sp, #20]
 8015126:	9a05      	ldr	r2, [sp, #20]
 8015128:	f803 ac01 	strb.w	sl, [r3, #-1]
 801512c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801512e:	4293      	cmp	r3, r2
 8015130:	d029      	beq.n	8015186 <_dtoa_r+0xa0e>
 8015132:	9901      	ldr	r1, [sp, #4]
 8015134:	2300      	movs	r3, #0
 8015136:	220a      	movs	r2, #10
 8015138:	4648      	mov	r0, r9
 801513a:	f000 fd21 	bl	8015b80 <__multadd>
 801513e:	45a8      	cmp	r8, r5
 8015140:	9001      	str	r0, [sp, #4]
 8015142:	f04f 0300 	mov.w	r3, #0
 8015146:	f04f 020a 	mov.w	r2, #10
 801514a:	4641      	mov	r1, r8
 801514c:	4648      	mov	r0, r9
 801514e:	d107      	bne.n	8015160 <_dtoa_r+0x9e8>
 8015150:	f000 fd16 	bl	8015b80 <__multadd>
 8015154:	4680      	mov	r8, r0
 8015156:	4605      	mov	r5, r0
 8015158:	9b05      	ldr	r3, [sp, #20]
 801515a:	3301      	adds	r3, #1
 801515c:	9305      	str	r3, [sp, #20]
 801515e:	e775      	b.n	801504c <_dtoa_r+0x8d4>
 8015160:	f000 fd0e 	bl	8015b80 <__multadd>
 8015164:	4629      	mov	r1, r5
 8015166:	4680      	mov	r8, r0
 8015168:	2300      	movs	r3, #0
 801516a:	220a      	movs	r2, #10
 801516c:	4648      	mov	r0, r9
 801516e:	f000 fd07 	bl	8015b80 <__multadd>
 8015172:	4605      	mov	r5, r0
 8015174:	e7f0      	b.n	8015158 <_dtoa_r+0x9e0>
 8015176:	f1bb 0f00 	cmp.w	fp, #0
 801517a:	bfcc      	ite	gt
 801517c:	465e      	movgt	r6, fp
 801517e:	2601      	movle	r6, #1
 8015180:	443e      	add	r6, r7
 8015182:	f04f 0800 	mov.w	r8, #0
 8015186:	9901      	ldr	r1, [sp, #4]
 8015188:	2201      	movs	r2, #1
 801518a:	4648      	mov	r0, r9
 801518c:	f000 feee 	bl	8015f6c <__lshift>
 8015190:	4621      	mov	r1, r4
 8015192:	9001      	str	r0, [sp, #4]
 8015194:	f000 ff56 	bl	8016044 <__mcmp>
 8015198:	2800      	cmp	r0, #0
 801519a:	dcaf      	bgt.n	80150fc <_dtoa_r+0x984>
 801519c:	d102      	bne.n	80151a4 <_dtoa_r+0xa2c>
 801519e:	f01a 0f01 	tst.w	sl, #1
 80151a2:	d1ab      	bne.n	80150fc <_dtoa_r+0x984>
 80151a4:	4633      	mov	r3, r6
 80151a6:	461e      	mov	r6, r3
 80151a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80151ac:	2a30      	cmp	r2, #48	@ 0x30
 80151ae:	d0fa      	beq.n	80151a6 <_dtoa_r+0xa2e>
 80151b0:	e5bb      	b.n	8014d2a <_dtoa_r+0x5b2>
 80151b2:	429f      	cmp	r7, r3
 80151b4:	d1a3      	bne.n	80150fe <_dtoa_r+0x986>
 80151b6:	9b04      	ldr	r3, [sp, #16]
 80151b8:	3301      	adds	r3, #1
 80151ba:	9304      	str	r3, [sp, #16]
 80151bc:	2331      	movs	r3, #49	@ 0x31
 80151be:	703b      	strb	r3, [r7, #0]
 80151c0:	e5b3      	b.n	8014d2a <_dtoa_r+0x5b2>
 80151c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80151c4:	4f16      	ldr	r7, [pc, #88]	@ (8015220 <_dtoa_r+0xaa8>)
 80151c6:	b11b      	cbz	r3, 80151d0 <_dtoa_r+0xa58>
 80151c8:	f107 0308 	add.w	r3, r7, #8
 80151cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80151ce:	6013      	str	r3, [r2, #0]
 80151d0:	4638      	mov	r0, r7
 80151d2:	b011      	add	sp, #68	@ 0x44
 80151d4:	ecbd 8b02 	vpop	{d8}
 80151d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151dc:	9b07      	ldr	r3, [sp, #28]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	f77f ae36 	ble.w	8014e50 <_dtoa_r+0x6d8>
 80151e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80151e8:	2001      	movs	r0, #1
 80151ea:	e656      	b.n	8014e9a <_dtoa_r+0x722>
 80151ec:	f1bb 0f00 	cmp.w	fp, #0
 80151f0:	f77f aed7 	ble.w	8014fa2 <_dtoa_r+0x82a>
 80151f4:	463e      	mov	r6, r7
 80151f6:	9801      	ldr	r0, [sp, #4]
 80151f8:	4621      	mov	r1, r4
 80151fa:	f7ff fa35 	bl	8014668 <quorem>
 80151fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015202:	f806 ab01 	strb.w	sl, [r6], #1
 8015206:	1bf2      	subs	r2, r6, r7
 8015208:	4593      	cmp	fp, r2
 801520a:	ddb4      	ble.n	8015176 <_dtoa_r+0x9fe>
 801520c:	9901      	ldr	r1, [sp, #4]
 801520e:	2300      	movs	r3, #0
 8015210:	220a      	movs	r2, #10
 8015212:	4648      	mov	r0, r9
 8015214:	f000 fcb4 	bl	8015b80 <__multadd>
 8015218:	9001      	str	r0, [sp, #4]
 801521a:	e7ec      	b.n	80151f6 <_dtoa_r+0xa7e>
 801521c:	080173d1 	.word	0x080173d1
 8015220:	08017355 	.word	0x08017355

08015224 <_free_r>:
 8015224:	b538      	push	{r3, r4, r5, lr}
 8015226:	4605      	mov	r5, r0
 8015228:	2900      	cmp	r1, #0
 801522a:	d041      	beq.n	80152b0 <_free_r+0x8c>
 801522c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015230:	1f0c      	subs	r4, r1, #4
 8015232:	2b00      	cmp	r3, #0
 8015234:	bfb8      	it	lt
 8015236:	18e4      	addlt	r4, r4, r3
 8015238:	f000 fc34 	bl	8015aa4 <__malloc_lock>
 801523c:	4a1d      	ldr	r2, [pc, #116]	@ (80152b4 <_free_r+0x90>)
 801523e:	6813      	ldr	r3, [r2, #0]
 8015240:	b933      	cbnz	r3, 8015250 <_free_r+0x2c>
 8015242:	6063      	str	r3, [r4, #4]
 8015244:	6014      	str	r4, [r2, #0]
 8015246:	4628      	mov	r0, r5
 8015248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801524c:	f000 bc30 	b.w	8015ab0 <__malloc_unlock>
 8015250:	42a3      	cmp	r3, r4
 8015252:	d908      	bls.n	8015266 <_free_r+0x42>
 8015254:	6820      	ldr	r0, [r4, #0]
 8015256:	1821      	adds	r1, r4, r0
 8015258:	428b      	cmp	r3, r1
 801525a:	bf01      	itttt	eq
 801525c:	6819      	ldreq	r1, [r3, #0]
 801525e:	685b      	ldreq	r3, [r3, #4]
 8015260:	1809      	addeq	r1, r1, r0
 8015262:	6021      	streq	r1, [r4, #0]
 8015264:	e7ed      	b.n	8015242 <_free_r+0x1e>
 8015266:	461a      	mov	r2, r3
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	b10b      	cbz	r3, 8015270 <_free_r+0x4c>
 801526c:	42a3      	cmp	r3, r4
 801526e:	d9fa      	bls.n	8015266 <_free_r+0x42>
 8015270:	6811      	ldr	r1, [r2, #0]
 8015272:	1850      	adds	r0, r2, r1
 8015274:	42a0      	cmp	r0, r4
 8015276:	d10b      	bne.n	8015290 <_free_r+0x6c>
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	4401      	add	r1, r0
 801527c:	1850      	adds	r0, r2, r1
 801527e:	4283      	cmp	r3, r0
 8015280:	6011      	str	r1, [r2, #0]
 8015282:	d1e0      	bne.n	8015246 <_free_r+0x22>
 8015284:	6818      	ldr	r0, [r3, #0]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	6053      	str	r3, [r2, #4]
 801528a:	4408      	add	r0, r1
 801528c:	6010      	str	r0, [r2, #0]
 801528e:	e7da      	b.n	8015246 <_free_r+0x22>
 8015290:	d902      	bls.n	8015298 <_free_r+0x74>
 8015292:	230c      	movs	r3, #12
 8015294:	602b      	str	r3, [r5, #0]
 8015296:	e7d6      	b.n	8015246 <_free_r+0x22>
 8015298:	6820      	ldr	r0, [r4, #0]
 801529a:	1821      	adds	r1, r4, r0
 801529c:	428b      	cmp	r3, r1
 801529e:	bf04      	itt	eq
 80152a0:	6819      	ldreq	r1, [r3, #0]
 80152a2:	685b      	ldreq	r3, [r3, #4]
 80152a4:	6063      	str	r3, [r4, #4]
 80152a6:	bf04      	itt	eq
 80152a8:	1809      	addeq	r1, r1, r0
 80152aa:	6021      	streq	r1, [r4, #0]
 80152ac:	6054      	str	r4, [r2, #4]
 80152ae:	e7ca      	b.n	8015246 <_free_r+0x22>
 80152b0:	bd38      	pop	{r3, r4, r5, pc}
 80152b2:	bf00      	nop
 80152b4:	24004bb4 	.word	0x24004bb4

080152b8 <rshift>:
 80152b8:	6903      	ldr	r3, [r0, #16]
 80152ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80152be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80152c6:	f100 0414 	add.w	r4, r0, #20
 80152ca:	dd45      	ble.n	8015358 <rshift+0xa0>
 80152cc:	f011 011f 	ands.w	r1, r1, #31
 80152d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80152d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80152d8:	d10c      	bne.n	80152f4 <rshift+0x3c>
 80152da:	f100 0710 	add.w	r7, r0, #16
 80152de:	4629      	mov	r1, r5
 80152e0:	42b1      	cmp	r1, r6
 80152e2:	d334      	bcc.n	801534e <rshift+0x96>
 80152e4:	1a9b      	subs	r3, r3, r2
 80152e6:	009b      	lsls	r3, r3, #2
 80152e8:	1eea      	subs	r2, r5, #3
 80152ea:	4296      	cmp	r6, r2
 80152ec:	bf38      	it	cc
 80152ee:	2300      	movcc	r3, #0
 80152f0:	4423      	add	r3, r4
 80152f2:	e015      	b.n	8015320 <rshift+0x68>
 80152f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80152f8:	f1c1 0820 	rsb	r8, r1, #32
 80152fc:	40cf      	lsrs	r7, r1
 80152fe:	f105 0e04 	add.w	lr, r5, #4
 8015302:	46a1      	mov	r9, r4
 8015304:	4576      	cmp	r6, lr
 8015306:	46f4      	mov	ip, lr
 8015308:	d815      	bhi.n	8015336 <rshift+0x7e>
 801530a:	1a9a      	subs	r2, r3, r2
 801530c:	0092      	lsls	r2, r2, #2
 801530e:	3a04      	subs	r2, #4
 8015310:	3501      	adds	r5, #1
 8015312:	42ae      	cmp	r6, r5
 8015314:	bf38      	it	cc
 8015316:	2200      	movcc	r2, #0
 8015318:	18a3      	adds	r3, r4, r2
 801531a:	50a7      	str	r7, [r4, r2]
 801531c:	b107      	cbz	r7, 8015320 <rshift+0x68>
 801531e:	3304      	adds	r3, #4
 8015320:	1b1a      	subs	r2, r3, r4
 8015322:	42a3      	cmp	r3, r4
 8015324:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015328:	bf08      	it	eq
 801532a:	2300      	moveq	r3, #0
 801532c:	6102      	str	r2, [r0, #16]
 801532e:	bf08      	it	eq
 8015330:	6143      	streq	r3, [r0, #20]
 8015332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015336:	f8dc c000 	ldr.w	ip, [ip]
 801533a:	fa0c fc08 	lsl.w	ip, ip, r8
 801533e:	ea4c 0707 	orr.w	r7, ip, r7
 8015342:	f849 7b04 	str.w	r7, [r9], #4
 8015346:	f85e 7b04 	ldr.w	r7, [lr], #4
 801534a:	40cf      	lsrs	r7, r1
 801534c:	e7da      	b.n	8015304 <rshift+0x4c>
 801534e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015352:	f847 cf04 	str.w	ip, [r7, #4]!
 8015356:	e7c3      	b.n	80152e0 <rshift+0x28>
 8015358:	4623      	mov	r3, r4
 801535a:	e7e1      	b.n	8015320 <rshift+0x68>

0801535c <__hexdig_fun>:
 801535c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015360:	2b09      	cmp	r3, #9
 8015362:	d802      	bhi.n	801536a <__hexdig_fun+0xe>
 8015364:	3820      	subs	r0, #32
 8015366:	b2c0      	uxtb	r0, r0
 8015368:	4770      	bx	lr
 801536a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801536e:	2b05      	cmp	r3, #5
 8015370:	d801      	bhi.n	8015376 <__hexdig_fun+0x1a>
 8015372:	3847      	subs	r0, #71	@ 0x47
 8015374:	e7f7      	b.n	8015366 <__hexdig_fun+0xa>
 8015376:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801537a:	2b05      	cmp	r3, #5
 801537c:	d801      	bhi.n	8015382 <__hexdig_fun+0x26>
 801537e:	3827      	subs	r0, #39	@ 0x27
 8015380:	e7f1      	b.n	8015366 <__hexdig_fun+0xa>
 8015382:	2000      	movs	r0, #0
 8015384:	4770      	bx	lr
	...

08015388 <__gethex>:
 8015388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801538c:	b085      	sub	sp, #20
 801538e:	468a      	mov	sl, r1
 8015390:	9302      	str	r3, [sp, #8]
 8015392:	680b      	ldr	r3, [r1, #0]
 8015394:	9001      	str	r0, [sp, #4]
 8015396:	4690      	mov	r8, r2
 8015398:	1c9c      	adds	r4, r3, #2
 801539a:	46a1      	mov	r9, r4
 801539c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80153a0:	2830      	cmp	r0, #48	@ 0x30
 80153a2:	d0fa      	beq.n	801539a <__gethex+0x12>
 80153a4:	eba9 0303 	sub.w	r3, r9, r3
 80153a8:	f1a3 0b02 	sub.w	fp, r3, #2
 80153ac:	f7ff ffd6 	bl	801535c <__hexdig_fun>
 80153b0:	4605      	mov	r5, r0
 80153b2:	2800      	cmp	r0, #0
 80153b4:	d168      	bne.n	8015488 <__gethex+0x100>
 80153b6:	49a0      	ldr	r1, [pc, #640]	@ (8015638 <__gethex+0x2b0>)
 80153b8:	2201      	movs	r2, #1
 80153ba:	4648      	mov	r0, r9
 80153bc:	f7ff f8b2 	bl	8014524 <strncmp>
 80153c0:	4607      	mov	r7, r0
 80153c2:	2800      	cmp	r0, #0
 80153c4:	d167      	bne.n	8015496 <__gethex+0x10e>
 80153c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80153ca:	4626      	mov	r6, r4
 80153cc:	f7ff ffc6 	bl	801535c <__hexdig_fun>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d062      	beq.n	801549a <__gethex+0x112>
 80153d4:	4623      	mov	r3, r4
 80153d6:	7818      	ldrb	r0, [r3, #0]
 80153d8:	2830      	cmp	r0, #48	@ 0x30
 80153da:	4699      	mov	r9, r3
 80153dc:	f103 0301 	add.w	r3, r3, #1
 80153e0:	d0f9      	beq.n	80153d6 <__gethex+0x4e>
 80153e2:	f7ff ffbb 	bl	801535c <__hexdig_fun>
 80153e6:	fab0 f580 	clz	r5, r0
 80153ea:	096d      	lsrs	r5, r5, #5
 80153ec:	f04f 0b01 	mov.w	fp, #1
 80153f0:	464a      	mov	r2, r9
 80153f2:	4616      	mov	r6, r2
 80153f4:	3201      	adds	r2, #1
 80153f6:	7830      	ldrb	r0, [r6, #0]
 80153f8:	f7ff ffb0 	bl	801535c <__hexdig_fun>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d1f8      	bne.n	80153f2 <__gethex+0x6a>
 8015400:	498d      	ldr	r1, [pc, #564]	@ (8015638 <__gethex+0x2b0>)
 8015402:	2201      	movs	r2, #1
 8015404:	4630      	mov	r0, r6
 8015406:	f7ff f88d 	bl	8014524 <strncmp>
 801540a:	2800      	cmp	r0, #0
 801540c:	d13f      	bne.n	801548e <__gethex+0x106>
 801540e:	b944      	cbnz	r4, 8015422 <__gethex+0x9a>
 8015410:	1c74      	adds	r4, r6, #1
 8015412:	4622      	mov	r2, r4
 8015414:	4616      	mov	r6, r2
 8015416:	3201      	adds	r2, #1
 8015418:	7830      	ldrb	r0, [r6, #0]
 801541a:	f7ff ff9f 	bl	801535c <__hexdig_fun>
 801541e:	2800      	cmp	r0, #0
 8015420:	d1f8      	bne.n	8015414 <__gethex+0x8c>
 8015422:	1ba4      	subs	r4, r4, r6
 8015424:	00a7      	lsls	r7, r4, #2
 8015426:	7833      	ldrb	r3, [r6, #0]
 8015428:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801542c:	2b50      	cmp	r3, #80	@ 0x50
 801542e:	d13e      	bne.n	80154ae <__gethex+0x126>
 8015430:	7873      	ldrb	r3, [r6, #1]
 8015432:	2b2b      	cmp	r3, #43	@ 0x2b
 8015434:	d033      	beq.n	801549e <__gethex+0x116>
 8015436:	2b2d      	cmp	r3, #45	@ 0x2d
 8015438:	d034      	beq.n	80154a4 <__gethex+0x11c>
 801543a:	1c71      	adds	r1, r6, #1
 801543c:	2400      	movs	r4, #0
 801543e:	7808      	ldrb	r0, [r1, #0]
 8015440:	f7ff ff8c 	bl	801535c <__hexdig_fun>
 8015444:	1e43      	subs	r3, r0, #1
 8015446:	b2db      	uxtb	r3, r3
 8015448:	2b18      	cmp	r3, #24
 801544a:	d830      	bhi.n	80154ae <__gethex+0x126>
 801544c:	f1a0 0210 	sub.w	r2, r0, #16
 8015450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015454:	f7ff ff82 	bl	801535c <__hexdig_fun>
 8015458:	f100 3cff 	add.w	ip, r0, #4294967295
 801545c:	fa5f fc8c 	uxtb.w	ip, ip
 8015460:	f1bc 0f18 	cmp.w	ip, #24
 8015464:	f04f 030a 	mov.w	r3, #10
 8015468:	d91e      	bls.n	80154a8 <__gethex+0x120>
 801546a:	b104      	cbz	r4, 801546e <__gethex+0xe6>
 801546c:	4252      	negs	r2, r2
 801546e:	4417      	add	r7, r2
 8015470:	f8ca 1000 	str.w	r1, [sl]
 8015474:	b1ed      	cbz	r5, 80154b2 <__gethex+0x12a>
 8015476:	f1bb 0f00 	cmp.w	fp, #0
 801547a:	bf0c      	ite	eq
 801547c:	2506      	moveq	r5, #6
 801547e:	2500      	movne	r5, #0
 8015480:	4628      	mov	r0, r5
 8015482:	b005      	add	sp, #20
 8015484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015488:	2500      	movs	r5, #0
 801548a:	462c      	mov	r4, r5
 801548c:	e7b0      	b.n	80153f0 <__gethex+0x68>
 801548e:	2c00      	cmp	r4, #0
 8015490:	d1c7      	bne.n	8015422 <__gethex+0x9a>
 8015492:	4627      	mov	r7, r4
 8015494:	e7c7      	b.n	8015426 <__gethex+0x9e>
 8015496:	464e      	mov	r6, r9
 8015498:	462f      	mov	r7, r5
 801549a:	2501      	movs	r5, #1
 801549c:	e7c3      	b.n	8015426 <__gethex+0x9e>
 801549e:	2400      	movs	r4, #0
 80154a0:	1cb1      	adds	r1, r6, #2
 80154a2:	e7cc      	b.n	801543e <__gethex+0xb6>
 80154a4:	2401      	movs	r4, #1
 80154a6:	e7fb      	b.n	80154a0 <__gethex+0x118>
 80154a8:	fb03 0002 	mla	r0, r3, r2, r0
 80154ac:	e7ce      	b.n	801544c <__gethex+0xc4>
 80154ae:	4631      	mov	r1, r6
 80154b0:	e7de      	b.n	8015470 <__gethex+0xe8>
 80154b2:	eba6 0309 	sub.w	r3, r6, r9
 80154b6:	3b01      	subs	r3, #1
 80154b8:	4629      	mov	r1, r5
 80154ba:	2b07      	cmp	r3, #7
 80154bc:	dc0a      	bgt.n	80154d4 <__gethex+0x14c>
 80154be:	9801      	ldr	r0, [sp, #4]
 80154c0:	f000 fafc 	bl	8015abc <_Balloc>
 80154c4:	4604      	mov	r4, r0
 80154c6:	b940      	cbnz	r0, 80154da <__gethex+0x152>
 80154c8:	4b5c      	ldr	r3, [pc, #368]	@ (801563c <__gethex+0x2b4>)
 80154ca:	4602      	mov	r2, r0
 80154cc:	21e4      	movs	r1, #228	@ 0xe4
 80154ce:	485c      	ldr	r0, [pc, #368]	@ (8015640 <__gethex+0x2b8>)
 80154d0:	f001 f9de 	bl	8016890 <__assert_func>
 80154d4:	3101      	adds	r1, #1
 80154d6:	105b      	asrs	r3, r3, #1
 80154d8:	e7ef      	b.n	80154ba <__gethex+0x132>
 80154da:	f100 0a14 	add.w	sl, r0, #20
 80154de:	2300      	movs	r3, #0
 80154e0:	4655      	mov	r5, sl
 80154e2:	469b      	mov	fp, r3
 80154e4:	45b1      	cmp	r9, r6
 80154e6:	d337      	bcc.n	8015558 <__gethex+0x1d0>
 80154e8:	f845 bb04 	str.w	fp, [r5], #4
 80154ec:	eba5 050a 	sub.w	r5, r5, sl
 80154f0:	10ad      	asrs	r5, r5, #2
 80154f2:	6125      	str	r5, [r4, #16]
 80154f4:	4658      	mov	r0, fp
 80154f6:	f000 fbd3 	bl	8015ca0 <__hi0bits>
 80154fa:	016d      	lsls	r5, r5, #5
 80154fc:	f8d8 6000 	ldr.w	r6, [r8]
 8015500:	1a2d      	subs	r5, r5, r0
 8015502:	42b5      	cmp	r5, r6
 8015504:	dd54      	ble.n	80155b0 <__gethex+0x228>
 8015506:	1bad      	subs	r5, r5, r6
 8015508:	4629      	mov	r1, r5
 801550a:	4620      	mov	r0, r4
 801550c:	f000 ff64 	bl	80163d8 <__any_on>
 8015510:	4681      	mov	r9, r0
 8015512:	b178      	cbz	r0, 8015534 <__gethex+0x1ac>
 8015514:	1e6b      	subs	r3, r5, #1
 8015516:	1159      	asrs	r1, r3, #5
 8015518:	f003 021f 	and.w	r2, r3, #31
 801551c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015520:	f04f 0901 	mov.w	r9, #1
 8015524:	fa09 f202 	lsl.w	r2, r9, r2
 8015528:	420a      	tst	r2, r1
 801552a:	d003      	beq.n	8015534 <__gethex+0x1ac>
 801552c:	454b      	cmp	r3, r9
 801552e:	dc36      	bgt.n	801559e <__gethex+0x216>
 8015530:	f04f 0902 	mov.w	r9, #2
 8015534:	4629      	mov	r1, r5
 8015536:	4620      	mov	r0, r4
 8015538:	f7ff febe 	bl	80152b8 <rshift>
 801553c:	442f      	add	r7, r5
 801553e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015542:	42bb      	cmp	r3, r7
 8015544:	da42      	bge.n	80155cc <__gethex+0x244>
 8015546:	9801      	ldr	r0, [sp, #4]
 8015548:	4621      	mov	r1, r4
 801554a:	f000 faf7 	bl	8015b3c <_Bfree>
 801554e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015550:	2300      	movs	r3, #0
 8015552:	6013      	str	r3, [r2, #0]
 8015554:	25a3      	movs	r5, #163	@ 0xa3
 8015556:	e793      	b.n	8015480 <__gethex+0xf8>
 8015558:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801555c:	2a2e      	cmp	r2, #46	@ 0x2e
 801555e:	d012      	beq.n	8015586 <__gethex+0x1fe>
 8015560:	2b20      	cmp	r3, #32
 8015562:	d104      	bne.n	801556e <__gethex+0x1e6>
 8015564:	f845 bb04 	str.w	fp, [r5], #4
 8015568:	f04f 0b00 	mov.w	fp, #0
 801556c:	465b      	mov	r3, fp
 801556e:	7830      	ldrb	r0, [r6, #0]
 8015570:	9303      	str	r3, [sp, #12]
 8015572:	f7ff fef3 	bl	801535c <__hexdig_fun>
 8015576:	9b03      	ldr	r3, [sp, #12]
 8015578:	f000 000f 	and.w	r0, r0, #15
 801557c:	4098      	lsls	r0, r3
 801557e:	ea4b 0b00 	orr.w	fp, fp, r0
 8015582:	3304      	adds	r3, #4
 8015584:	e7ae      	b.n	80154e4 <__gethex+0x15c>
 8015586:	45b1      	cmp	r9, r6
 8015588:	d8ea      	bhi.n	8015560 <__gethex+0x1d8>
 801558a:	492b      	ldr	r1, [pc, #172]	@ (8015638 <__gethex+0x2b0>)
 801558c:	9303      	str	r3, [sp, #12]
 801558e:	2201      	movs	r2, #1
 8015590:	4630      	mov	r0, r6
 8015592:	f7fe ffc7 	bl	8014524 <strncmp>
 8015596:	9b03      	ldr	r3, [sp, #12]
 8015598:	2800      	cmp	r0, #0
 801559a:	d1e1      	bne.n	8015560 <__gethex+0x1d8>
 801559c:	e7a2      	b.n	80154e4 <__gethex+0x15c>
 801559e:	1ea9      	subs	r1, r5, #2
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 ff19 	bl	80163d8 <__any_on>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d0c2      	beq.n	8015530 <__gethex+0x1a8>
 80155aa:	f04f 0903 	mov.w	r9, #3
 80155ae:	e7c1      	b.n	8015534 <__gethex+0x1ac>
 80155b0:	da09      	bge.n	80155c6 <__gethex+0x23e>
 80155b2:	1b75      	subs	r5, r6, r5
 80155b4:	4621      	mov	r1, r4
 80155b6:	9801      	ldr	r0, [sp, #4]
 80155b8:	462a      	mov	r2, r5
 80155ba:	f000 fcd7 	bl	8015f6c <__lshift>
 80155be:	1b7f      	subs	r7, r7, r5
 80155c0:	4604      	mov	r4, r0
 80155c2:	f100 0a14 	add.w	sl, r0, #20
 80155c6:	f04f 0900 	mov.w	r9, #0
 80155ca:	e7b8      	b.n	801553e <__gethex+0x1b6>
 80155cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80155d0:	42bd      	cmp	r5, r7
 80155d2:	dd6f      	ble.n	80156b4 <__gethex+0x32c>
 80155d4:	1bed      	subs	r5, r5, r7
 80155d6:	42ae      	cmp	r6, r5
 80155d8:	dc34      	bgt.n	8015644 <__gethex+0x2bc>
 80155da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80155de:	2b02      	cmp	r3, #2
 80155e0:	d022      	beq.n	8015628 <__gethex+0x2a0>
 80155e2:	2b03      	cmp	r3, #3
 80155e4:	d024      	beq.n	8015630 <__gethex+0x2a8>
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d115      	bne.n	8015616 <__gethex+0x28e>
 80155ea:	42ae      	cmp	r6, r5
 80155ec:	d113      	bne.n	8015616 <__gethex+0x28e>
 80155ee:	2e01      	cmp	r6, #1
 80155f0:	d10b      	bne.n	801560a <__gethex+0x282>
 80155f2:	9a02      	ldr	r2, [sp, #8]
 80155f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80155f8:	6013      	str	r3, [r2, #0]
 80155fa:	2301      	movs	r3, #1
 80155fc:	6123      	str	r3, [r4, #16]
 80155fe:	f8ca 3000 	str.w	r3, [sl]
 8015602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015604:	2562      	movs	r5, #98	@ 0x62
 8015606:	601c      	str	r4, [r3, #0]
 8015608:	e73a      	b.n	8015480 <__gethex+0xf8>
 801560a:	1e71      	subs	r1, r6, #1
 801560c:	4620      	mov	r0, r4
 801560e:	f000 fee3 	bl	80163d8 <__any_on>
 8015612:	2800      	cmp	r0, #0
 8015614:	d1ed      	bne.n	80155f2 <__gethex+0x26a>
 8015616:	9801      	ldr	r0, [sp, #4]
 8015618:	4621      	mov	r1, r4
 801561a:	f000 fa8f 	bl	8015b3c <_Bfree>
 801561e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015620:	2300      	movs	r3, #0
 8015622:	6013      	str	r3, [r2, #0]
 8015624:	2550      	movs	r5, #80	@ 0x50
 8015626:	e72b      	b.n	8015480 <__gethex+0xf8>
 8015628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801562a:	2b00      	cmp	r3, #0
 801562c:	d1f3      	bne.n	8015616 <__gethex+0x28e>
 801562e:	e7e0      	b.n	80155f2 <__gethex+0x26a>
 8015630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015632:	2b00      	cmp	r3, #0
 8015634:	d1dd      	bne.n	80155f2 <__gethex+0x26a>
 8015636:	e7ee      	b.n	8015616 <__gethex+0x28e>
 8015638:	080171c0 	.word	0x080171c0
 801563c:	080173d1 	.word	0x080173d1
 8015640:	080173e2 	.word	0x080173e2
 8015644:	1e6f      	subs	r7, r5, #1
 8015646:	f1b9 0f00 	cmp.w	r9, #0
 801564a:	d130      	bne.n	80156ae <__gethex+0x326>
 801564c:	b127      	cbz	r7, 8015658 <__gethex+0x2d0>
 801564e:	4639      	mov	r1, r7
 8015650:	4620      	mov	r0, r4
 8015652:	f000 fec1 	bl	80163d8 <__any_on>
 8015656:	4681      	mov	r9, r0
 8015658:	117a      	asrs	r2, r7, #5
 801565a:	2301      	movs	r3, #1
 801565c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015660:	f007 071f 	and.w	r7, r7, #31
 8015664:	40bb      	lsls	r3, r7
 8015666:	4213      	tst	r3, r2
 8015668:	4629      	mov	r1, r5
 801566a:	4620      	mov	r0, r4
 801566c:	bf18      	it	ne
 801566e:	f049 0902 	orrne.w	r9, r9, #2
 8015672:	f7ff fe21 	bl	80152b8 <rshift>
 8015676:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801567a:	1b76      	subs	r6, r6, r5
 801567c:	2502      	movs	r5, #2
 801567e:	f1b9 0f00 	cmp.w	r9, #0
 8015682:	d047      	beq.n	8015714 <__gethex+0x38c>
 8015684:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015688:	2b02      	cmp	r3, #2
 801568a:	d015      	beq.n	80156b8 <__gethex+0x330>
 801568c:	2b03      	cmp	r3, #3
 801568e:	d017      	beq.n	80156c0 <__gethex+0x338>
 8015690:	2b01      	cmp	r3, #1
 8015692:	d109      	bne.n	80156a8 <__gethex+0x320>
 8015694:	f019 0f02 	tst.w	r9, #2
 8015698:	d006      	beq.n	80156a8 <__gethex+0x320>
 801569a:	f8da 3000 	ldr.w	r3, [sl]
 801569e:	ea49 0903 	orr.w	r9, r9, r3
 80156a2:	f019 0f01 	tst.w	r9, #1
 80156a6:	d10e      	bne.n	80156c6 <__gethex+0x33e>
 80156a8:	f045 0510 	orr.w	r5, r5, #16
 80156ac:	e032      	b.n	8015714 <__gethex+0x38c>
 80156ae:	f04f 0901 	mov.w	r9, #1
 80156b2:	e7d1      	b.n	8015658 <__gethex+0x2d0>
 80156b4:	2501      	movs	r5, #1
 80156b6:	e7e2      	b.n	801567e <__gethex+0x2f6>
 80156b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156ba:	f1c3 0301 	rsb	r3, r3, #1
 80156be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80156c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d0f0      	beq.n	80156a8 <__gethex+0x320>
 80156c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80156ca:	f104 0314 	add.w	r3, r4, #20
 80156ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80156d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80156d6:	f04f 0c00 	mov.w	ip, #0
 80156da:	4618      	mov	r0, r3
 80156dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80156e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80156e4:	d01b      	beq.n	801571e <__gethex+0x396>
 80156e6:	3201      	adds	r2, #1
 80156e8:	6002      	str	r2, [r0, #0]
 80156ea:	2d02      	cmp	r5, #2
 80156ec:	f104 0314 	add.w	r3, r4, #20
 80156f0:	d13c      	bne.n	801576c <__gethex+0x3e4>
 80156f2:	f8d8 2000 	ldr.w	r2, [r8]
 80156f6:	3a01      	subs	r2, #1
 80156f8:	42b2      	cmp	r2, r6
 80156fa:	d109      	bne.n	8015710 <__gethex+0x388>
 80156fc:	1171      	asrs	r1, r6, #5
 80156fe:	2201      	movs	r2, #1
 8015700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015704:	f006 061f 	and.w	r6, r6, #31
 8015708:	fa02 f606 	lsl.w	r6, r2, r6
 801570c:	421e      	tst	r6, r3
 801570e:	d13a      	bne.n	8015786 <__gethex+0x3fe>
 8015710:	f045 0520 	orr.w	r5, r5, #32
 8015714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015716:	601c      	str	r4, [r3, #0]
 8015718:	9b02      	ldr	r3, [sp, #8]
 801571a:	601f      	str	r7, [r3, #0]
 801571c:	e6b0      	b.n	8015480 <__gethex+0xf8>
 801571e:	4299      	cmp	r1, r3
 8015720:	f843 cc04 	str.w	ip, [r3, #-4]
 8015724:	d8d9      	bhi.n	80156da <__gethex+0x352>
 8015726:	68a3      	ldr	r3, [r4, #8]
 8015728:	459b      	cmp	fp, r3
 801572a:	db17      	blt.n	801575c <__gethex+0x3d4>
 801572c:	6861      	ldr	r1, [r4, #4]
 801572e:	9801      	ldr	r0, [sp, #4]
 8015730:	3101      	adds	r1, #1
 8015732:	f000 f9c3 	bl	8015abc <_Balloc>
 8015736:	4681      	mov	r9, r0
 8015738:	b918      	cbnz	r0, 8015742 <__gethex+0x3ba>
 801573a:	4b1a      	ldr	r3, [pc, #104]	@ (80157a4 <__gethex+0x41c>)
 801573c:	4602      	mov	r2, r0
 801573e:	2184      	movs	r1, #132	@ 0x84
 8015740:	e6c5      	b.n	80154ce <__gethex+0x146>
 8015742:	6922      	ldr	r2, [r4, #16]
 8015744:	3202      	adds	r2, #2
 8015746:	f104 010c 	add.w	r1, r4, #12
 801574a:	0092      	lsls	r2, r2, #2
 801574c:	300c      	adds	r0, #12
 801574e:	f7fe ff72 	bl	8014636 <memcpy>
 8015752:	4621      	mov	r1, r4
 8015754:	9801      	ldr	r0, [sp, #4]
 8015756:	f000 f9f1 	bl	8015b3c <_Bfree>
 801575a:	464c      	mov	r4, r9
 801575c:	6923      	ldr	r3, [r4, #16]
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015764:	6122      	str	r2, [r4, #16]
 8015766:	2201      	movs	r2, #1
 8015768:	615a      	str	r2, [r3, #20]
 801576a:	e7be      	b.n	80156ea <__gethex+0x362>
 801576c:	6922      	ldr	r2, [r4, #16]
 801576e:	455a      	cmp	r2, fp
 8015770:	dd0b      	ble.n	801578a <__gethex+0x402>
 8015772:	2101      	movs	r1, #1
 8015774:	4620      	mov	r0, r4
 8015776:	f7ff fd9f 	bl	80152b8 <rshift>
 801577a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801577e:	3701      	adds	r7, #1
 8015780:	42bb      	cmp	r3, r7
 8015782:	f6ff aee0 	blt.w	8015546 <__gethex+0x1be>
 8015786:	2501      	movs	r5, #1
 8015788:	e7c2      	b.n	8015710 <__gethex+0x388>
 801578a:	f016 061f 	ands.w	r6, r6, #31
 801578e:	d0fa      	beq.n	8015786 <__gethex+0x3fe>
 8015790:	4453      	add	r3, sl
 8015792:	f1c6 0620 	rsb	r6, r6, #32
 8015796:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801579a:	f000 fa81 	bl	8015ca0 <__hi0bits>
 801579e:	42b0      	cmp	r0, r6
 80157a0:	dbe7      	blt.n	8015772 <__gethex+0x3ea>
 80157a2:	e7f0      	b.n	8015786 <__gethex+0x3fe>
 80157a4:	080173d1 	.word	0x080173d1

080157a8 <L_shift>:
 80157a8:	f1c2 0208 	rsb	r2, r2, #8
 80157ac:	0092      	lsls	r2, r2, #2
 80157ae:	b570      	push	{r4, r5, r6, lr}
 80157b0:	f1c2 0620 	rsb	r6, r2, #32
 80157b4:	6843      	ldr	r3, [r0, #4]
 80157b6:	6804      	ldr	r4, [r0, #0]
 80157b8:	fa03 f506 	lsl.w	r5, r3, r6
 80157bc:	432c      	orrs	r4, r5
 80157be:	40d3      	lsrs	r3, r2
 80157c0:	6004      	str	r4, [r0, #0]
 80157c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80157c6:	4288      	cmp	r0, r1
 80157c8:	d3f4      	bcc.n	80157b4 <L_shift+0xc>
 80157ca:	bd70      	pop	{r4, r5, r6, pc}

080157cc <__match>:
 80157cc:	b530      	push	{r4, r5, lr}
 80157ce:	6803      	ldr	r3, [r0, #0]
 80157d0:	3301      	adds	r3, #1
 80157d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157d6:	b914      	cbnz	r4, 80157de <__match+0x12>
 80157d8:	6003      	str	r3, [r0, #0]
 80157da:	2001      	movs	r0, #1
 80157dc:	bd30      	pop	{r4, r5, pc}
 80157de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80157e6:	2d19      	cmp	r5, #25
 80157e8:	bf98      	it	ls
 80157ea:	3220      	addls	r2, #32
 80157ec:	42a2      	cmp	r2, r4
 80157ee:	d0f0      	beq.n	80157d2 <__match+0x6>
 80157f0:	2000      	movs	r0, #0
 80157f2:	e7f3      	b.n	80157dc <__match+0x10>

080157f4 <__hexnan>:
 80157f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f8:	680b      	ldr	r3, [r1, #0]
 80157fa:	6801      	ldr	r1, [r0, #0]
 80157fc:	115e      	asrs	r6, r3, #5
 80157fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015802:	f013 031f 	ands.w	r3, r3, #31
 8015806:	b087      	sub	sp, #28
 8015808:	bf18      	it	ne
 801580a:	3604      	addne	r6, #4
 801580c:	2500      	movs	r5, #0
 801580e:	1f37      	subs	r7, r6, #4
 8015810:	4682      	mov	sl, r0
 8015812:	4690      	mov	r8, r2
 8015814:	9301      	str	r3, [sp, #4]
 8015816:	f846 5c04 	str.w	r5, [r6, #-4]
 801581a:	46b9      	mov	r9, r7
 801581c:	463c      	mov	r4, r7
 801581e:	9502      	str	r5, [sp, #8]
 8015820:	46ab      	mov	fp, r5
 8015822:	784a      	ldrb	r2, [r1, #1]
 8015824:	1c4b      	adds	r3, r1, #1
 8015826:	9303      	str	r3, [sp, #12]
 8015828:	b342      	cbz	r2, 801587c <__hexnan+0x88>
 801582a:	4610      	mov	r0, r2
 801582c:	9105      	str	r1, [sp, #20]
 801582e:	9204      	str	r2, [sp, #16]
 8015830:	f7ff fd94 	bl	801535c <__hexdig_fun>
 8015834:	2800      	cmp	r0, #0
 8015836:	d151      	bne.n	80158dc <__hexnan+0xe8>
 8015838:	9a04      	ldr	r2, [sp, #16]
 801583a:	9905      	ldr	r1, [sp, #20]
 801583c:	2a20      	cmp	r2, #32
 801583e:	d818      	bhi.n	8015872 <__hexnan+0x7e>
 8015840:	9b02      	ldr	r3, [sp, #8]
 8015842:	459b      	cmp	fp, r3
 8015844:	dd13      	ble.n	801586e <__hexnan+0x7a>
 8015846:	454c      	cmp	r4, r9
 8015848:	d206      	bcs.n	8015858 <__hexnan+0x64>
 801584a:	2d07      	cmp	r5, #7
 801584c:	dc04      	bgt.n	8015858 <__hexnan+0x64>
 801584e:	462a      	mov	r2, r5
 8015850:	4649      	mov	r1, r9
 8015852:	4620      	mov	r0, r4
 8015854:	f7ff ffa8 	bl	80157a8 <L_shift>
 8015858:	4544      	cmp	r4, r8
 801585a:	d952      	bls.n	8015902 <__hexnan+0x10e>
 801585c:	2300      	movs	r3, #0
 801585e:	f1a4 0904 	sub.w	r9, r4, #4
 8015862:	f844 3c04 	str.w	r3, [r4, #-4]
 8015866:	f8cd b008 	str.w	fp, [sp, #8]
 801586a:	464c      	mov	r4, r9
 801586c:	461d      	mov	r5, r3
 801586e:	9903      	ldr	r1, [sp, #12]
 8015870:	e7d7      	b.n	8015822 <__hexnan+0x2e>
 8015872:	2a29      	cmp	r2, #41	@ 0x29
 8015874:	d157      	bne.n	8015926 <__hexnan+0x132>
 8015876:	3102      	adds	r1, #2
 8015878:	f8ca 1000 	str.w	r1, [sl]
 801587c:	f1bb 0f00 	cmp.w	fp, #0
 8015880:	d051      	beq.n	8015926 <__hexnan+0x132>
 8015882:	454c      	cmp	r4, r9
 8015884:	d206      	bcs.n	8015894 <__hexnan+0xa0>
 8015886:	2d07      	cmp	r5, #7
 8015888:	dc04      	bgt.n	8015894 <__hexnan+0xa0>
 801588a:	462a      	mov	r2, r5
 801588c:	4649      	mov	r1, r9
 801588e:	4620      	mov	r0, r4
 8015890:	f7ff ff8a 	bl	80157a8 <L_shift>
 8015894:	4544      	cmp	r4, r8
 8015896:	d936      	bls.n	8015906 <__hexnan+0x112>
 8015898:	f1a8 0204 	sub.w	r2, r8, #4
 801589c:	4623      	mov	r3, r4
 801589e:	f853 1b04 	ldr.w	r1, [r3], #4
 80158a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80158a6:	429f      	cmp	r7, r3
 80158a8:	d2f9      	bcs.n	801589e <__hexnan+0xaa>
 80158aa:	1b3b      	subs	r3, r7, r4
 80158ac:	f023 0303 	bic.w	r3, r3, #3
 80158b0:	3304      	adds	r3, #4
 80158b2:	3401      	adds	r4, #1
 80158b4:	3e03      	subs	r6, #3
 80158b6:	42b4      	cmp	r4, r6
 80158b8:	bf88      	it	hi
 80158ba:	2304      	movhi	r3, #4
 80158bc:	4443      	add	r3, r8
 80158be:	2200      	movs	r2, #0
 80158c0:	f843 2b04 	str.w	r2, [r3], #4
 80158c4:	429f      	cmp	r7, r3
 80158c6:	d2fb      	bcs.n	80158c0 <__hexnan+0xcc>
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	b91b      	cbnz	r3, 80158d4 <__hexnan+0xe0>
 80158cc:	4547      	cmp	r7, r8
 80158ce:	d128      	bne.n	8015922 <__hexnan+0x12e>
 80158d0:	2301      	movs	r3, #1
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	2005      	movs	r0, #5
 80158d6:	b007      	add	sp, #28
 80158d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	3501      	adds	r5, #1
 80158de:	2d08      	cmp	r5, #8
 80158e0:	f10b 0b01 	add.w	fp, fp, #1
 80158e4:	dd06      	ble.n	80158f4 <__hexnan+0x100>
 80158e6:	4544      	cmp	r4, r8
 80158e8:	d9c1      	bls.n	801586e <__hexnan+0x7a>
 80158ea:	2300      	movs	r3, #0
 80158ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80158f0:	2501      	movs	r5, #1
 80158f2:	3c04      	subs	r4, #4
 80158f4:	6822      	ldr	r2, [r4, #0]
 80158f6:	f000 000f 	and.w	r0, r0, #15
 80158fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80158fe:	6020      	str	r0, [r4, #0]
 8015900:	e7b5      	b.n	801586e <__hexnan+0x7a>
 8015902:	2508      	movs	r5, #8
 8015904:	e7b3      	b.n	801586e <__hexnan+0x7a>
 8015906:	9b01      	ldr	r3, [sp, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d0dd      	beq.n	80158c8 <__hexnan+0xd4>
 801590c:	f1c3 0320 	rsb	r3, r3, #32
 8015910:	f04f 32ff 	mov.w	r2, #4294967295
 8015914:	40da      	lsrs	r2, r3
 8015916:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801591a:	4013      	ands	r3, r2
 801591c:	f846 3c04 	str.w	r3, [r6, #-4]
 8015920:	e7d2      	b.n	80158c8 <__hexnan+0xd4>
 8015922:	3f04      	subs	r7, #4
 8015924:	e7d0      	b.n	80158c8 <__hexnan+0xd4>
 8015926:	2004      	movs	r0, #4
 8015928:	e7d5      	b.n	80158d6 <__hexnan+0xe2>
	...

0801592c <malloc>:
 801592c:	4b02      	ldr	r3, [pc, #8]	@ (8015938 <malloc+0xc>)
 801592e:	4601      	mov	r1, r0
 8015930:	6818      	ldr	r0, [r3, #0]
 8015932:	f000 b825 	b.w	8015980 <_malloc_r>
 8015936:	bf00      	nop
 8015938:	2400027c 	.word	0x2400027c

0801593c <sbrk_aligned>:
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	4e0f      	ldr	r6, [pc, #60]	@ (801597c <sbrk_aligned+0x40>)
 8015940:	460c      	mov	r4, r1
 8015942:	6831      	ldr	r1, [r6, #0]
 8015944:	4605      	mov	r5, r0
 8015946:	b911      	cbnz	r1, 801594e <sbrk_aligned+0x12>
 8015948:	f000 ff92 	bl	8016870 <_sbrk_r>
 801594c:	6030      	str	r0, [r6, #0]
 801594e:	4621      	mov	r1, r4
 8015950:	4628      	mov	r0, r5
 8015952:	f000 ff8d 	bl	8016870 <_sbrk_r>
 8015956:	1c43      	adds	r3, r0, #1
 8015958:	d103      	bne.n	8015962 <sbrk_aligned+0x26>
 801595a:	f04f 34ff 	mov.w	r4, #4294967295
 801595e:	4620      	mov	r0, r4
 8015960:	bd70      	pop	{r4, r5, r6, pc}
 8015962:	1cc4      	adds	r4, r0, #3
 8015964:	f024 0403 	bic.w	r4, r4, #3
 8015968:	42a0      	cmp	r0, r4
 801596a:	d0f8      	beq.n	801595e <sbrk_aligned+0x22>
 801596c:	1a21      	subs	r1, r4, r0
 801596e:	4628      	mov	r0, r5
 8015970:	f000 ff7e 	bl	8016870 <_sbrk_r>
 8015974:	3001      	adds	r0, #1
 8015976:	d1f2      	bne.n	801595e <sbrk_aligned+0x22>
 8015978:	e7ef      	b.n	801595a <sbrk_aligned+0x1e>
 801597a:	bf00      	nop
 801597c:	24004bb0 	.word	0x24004bb0

08015980 <_malloc_r>:
 8015980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015984:	1ccd      	adds	r5, r1, #3
 8015986:	f025 0503 	bic.w	r5, r5, #3
 801598a:	3508      	adds	r5, #8
 801598c:	2d0c      	cmp	r5, #12
 801598e:	bf38      	it	cc
 8015990:	250c      	movcc	r5, #12
 8015992:	2d00      	cmp	r5, #0
 8015994:	4606      	mov	r6, r0
 8015996:	db01      	blt.n	801599c <_malloc_r+0x1c>
 8015998:	42a9      	cmp	r1, r5
 801599a:	d904      	bls.n	80159a6 <_malloc_r+0x26>
 801599c:	230c      	movs	r3, #12
 801599e:	6033      	str	r3, [r6, #0]
 80159a0:	2000      	movs	r0, #0
 80159a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015a7c <_malloc_r+0xfc>
 80159aa:	f000 f87b 	bl	8015aa4 <__malloc_lock>
 80159ae:	f8d8 3000 	ldr.w	r3, [r8]
 80159b2:	461c      	mov	r4, r3
 80159b4:	bb44      	cbnz	r4, 8015a08 <_malloc_r+0x88>
 80159b6:	4629      	mov	r1, r5
 80159b8:	4630      	mov	r0, r6
 80159ba:	f7ff ffbf 	bl	801593c <sbrk_aligned>
 80159be:	1c43      	adds	r3, r0, #1
 80159c0:	4604      	mov	r4, r0
 80159c2:	d158      	bne.n	8015a76 <_malloc_r+0xf6>
 80159c4:	f8d8 4000 	ldr.w	r4, [r8]
 80159c8:	4627      	mov	r7, r4
 80159ca:	2f00      	cmp	r7, #0
 80159cc:	d143      	bne.n	8015a56 <_malloc_r+0xd6>
 80159ce:	2c00      	cmp	r4, #0
 80159d0:	d04b      	beq.n	8015a6a <_malloc_r+0xea>
 80159d2:	6823      	ldr	r3, [r4, #0]
 80159d4:	4639      	mov	r1, r7
 80159d6:	4630      	mov	r0, r6
 80159d8:	eb04 0903 	add.w	r9, r4, r3
 80159dc:	f000 ff48 	bl	8016870 <_sbrk_r>
 80159e0:	4581      	cmp	r9, r0
 80159e2:	d142      	bne.n	8015a6a <_malloc_r+0xea>
 80159e4:	6821      	ldr	r1, [r4, #0]
 80159e6:	1a6d      	subs	r5, r5, r1
 80159e8:	4629      	mov	r1, r5
 80159ea:	4630      	mov	r0, r6
 80159ec:	f7ff ffa6 	bl	801593c <sbrk_aligned>
 80159f0:	3001      	adds	r0, #1
 80159f2:	d03a      	beq.n	8015a6a <_malloc_r+0xea>
 80159f4:	6823      	ldr	r3, [r4, #0]
 80159f6:	442b      	add	r3, r5
 80159f8:	6023      	str	r3, [r4, #0]
 80159fa:	f8d8 3000 	ldr.w	r3, [r8]
 80159fe:	685a      	ldr	r2, [r3, #4]
 8015a00:	bb62      	cbnz	r2, 8015a5c <_malloc_r+0xdc>
 8015a02:	f8c8 7000 	str.w	r7, [r8]
 8015a06:	e00f      	b.n	8015a28 <_malloc_r+0xa8>
 8015a08:	6822      	ldr	r2, [r4, #0]
 8015a0a:	1b52      	subs	r2, r2, r5
 8015a0c:	d420      	bmi.n	8015a50 <_malloc_r+0xd0>
 8015a0e:	2a0b      	cmp	r2, #11
 8015a10:	d917      	bls.n	8015a42 <_malloc_r+0xc2>
 8015a12:	1961      	adds	r1, r4, r5
 8015a14:	42a3      	cmp	r3, r4
 8015a16:	6025      	str	r5, [r4, #0]
 8015a18:	bf18      	it	ne
 8015a1a:	6059      	strne	r1, [r3, #4]
 8015a1c:	6863      	ldr	r3, [r4, #4]
 8015a1e:	bf08      	it	eq
 8015a20:	f8c8 1000 	streq.w	r1, [r8]
 8015a24:	5162      	str	r2, [r4, r5]
 8015a26:	604b      	str	r3, [r1, #4]
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f000 f841 	bl	8015ab0 <__malloc_unlock>
 8015a2e:	f104 000b 	add.w	r0, r4, #11
 8015a32:	1d23      	adds	r3, r4, #4
 8015a34:	f020 0007 	bic.w	r0, r0, #7
 8015a38:	1ac2      	subs	r2, r0, r3
 8015a3a:	bf1c      	itt	ne
 8015a3c:	1a1b      	subne	r3, r3, r0
 8015a3e:	50a3      	strne	r3, [r4, r2]
 8015a40:	e7af      	b.n	80159a2 <_malloc_r+0x22>
 8015a42:	6862      	ldr	r2, [r4, #4]
 8015a44:	42a3      	cmp	r3, r4
 8015a46:	bf0c      	ite	eq
 8015a48:	f8c8 2000 	streq.w	r2, [r8]
 8015a4c:	605a      	strne	r2, [r3, #4]
 8015a4e:	e7eb      	b.n	8015a28 <_malloc_r+0xa8>
 8015a50:	4623      	mov	r3, r4
 8015a52:	6864      	ldr	r4, [r4, #4]
 8015a54:	e7ae      	b.n	80159b4 <_malloc_r+0x34>
 8015a56:	463c      	mov	r4, r7
 8015a58:	687f      	ldr	r7, [r7, #4]
 8015a5a:	e7b6      	b.n	80159ca <_malloc_r+0x4a>
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	42a3      	cmp	r3, r4
 8015a62:	d1fb      	bne.n	8015a5c <_malloc_r+0xdc>
 8015a64:	2300      	movs	r3, #0
 8015a66:	6053      	str	r3, [r2, #4]
 8015a68:	e7de      	b.n	8015a28 <_malloc_r+0xa8>
 8015a6a:	230c      	movs	r3, #12
 8015a6c:	6033      	str	r3, [r6, #0]
 8015a6e:	4630      	mov	r0, r6
 8015a70:	f000 f81e 	bl	8015ab0 <__malloc_unlock>
 8015a74:	e794      	b.n	80159a0 <_malloc_r+0x20>
 8015a76:	6005      	str	r5, [r0, #0]
 8015a78:	e7d6      	b.n	8015a28 <_malloc_r+0xa8>
 8015a7a:	bf00      	nop
 8015a7c:	24004bb4 	.word	0x24004bb4

08015a80 <__ascii_mbtowc>:
 8015a80:	b082      	sub	sp, #8
 8015a82:	b901      	cbnz	r1, 8015a86 <__ascii_mbtowc+0x6>
 8015a84:	a901      	add	r1, sp, #4
 8015a86:	b142      	cbz	r2, 8015a9a <__ascii_mbtowc+0x1a>
 8015a88:	b14b      	cbz	r3, 8015a9e <__ascii_mbtowc+0x1e>
 8015a8a:	7813      	ldrb	r3, [r2, #0]
 8015a8c:	600b      	str	r3, [r1, #0]
 8015a8e:	7812      	ldrb	r2, [r2, #0]
 8015a90:	1e10      	subs	r0, r2, #0
 8015a92:	bf18      	it	ne
 8015a94:	2001      	movne	r0, #1
 8015a96:	b002      	add	sp, #8
 8015a98:	4770      	bx	lr
 8015a9a:	4610      	mov	r0, r2
 8015a9c:	e7fb      	b.n	8015a96 <__ascii_mbtowc+0x16>
 8015a9e:	f06f 0001 	mvn.w	r0, #1
 8015aa2:	e7f8      	b.n	8015a96 <__ascii_mbtowc+0x16>

08015aa4 <__malloc_lock>:
 8015aa4:	4801      	ldr	r0, [pc, #4]	@ (8015aac <__malloc_lock+0x8>)
 8015aa6:	f7fe bdc4 	b.w	8014632 <__retarget_lock_acquire_recursive>
 8015aaa:	bf00      	nop
 8015aac:	24004bac 	.word	0x24004bac

08015ab0 <__malloc_unlock>:
 8015ab0:	4801      	ldr	r0, [pc, #4]	@ (8015ab8 <__malloc_unlock+0x8>)
 8015ab2:	f7fe bdbf 	b.w	8014634 <__retarget_lock_release_recursive>
 8015ab6:	bf00      	nop
 8015ab8:	24004bac 	.word	0x24004bac

08015abc <_Balloc>:
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	69c6      	ldr	r6, [r0, #28]
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	460d      	mov	r5, r1
 8015ac4:	b976      	cbnz	r6, 8015ae4 <_Balloc+0x28>
 8015ac6:	2010      	movs	r0, #16
 8015ac8:	f7ff ff30 	bl	801592c <malloc>
 8015acc:	4602      	mov	r2, r0
 8015ace:	61e0      	str	r0, [r4, #28]
 8015ad0:	b920      	cbnz	r0, 8015adc <_Balloc+0x20>
 8015ad2:	4b18      	ldr	r3, [pc, #96]	@ (8015b34 <_Balloc+0x78>)
 8015ad4:	4818      	ldr	r0, [pc, #96]	@ (8015b38 <_Balloc+0x7c>)
 8015ad6:	216b      	movs	r1, #107	@ 0x6b
 8015ad8:	f000 feda 	bl	8016890 <__assert_func>
 8015adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ae0:	6006      	str	r6, [r0, #0]
 8015ae2:	60c6      	str	r6, [r0, #12]
 8015ae4:	69e6      	ldr	r6, [r4, #28]
 8015ae6:	68f3      	ldr	r3, [r6, #12]
 8015ae8:	b183      	cbz	r3, 8015b0c <_Balloc+0x50>
 8015aea:	69e3      	ldr	r3, [r4, #28]
 8015aec:	68db      	ldr	r3, [r3, #12]
 8015aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015af2:	b9b8      	cbnz	r0, 8015b24 <_Balloc+0x68>
 8015af4:	2101      	movs	r1, #1
 8015af6:	fa01 f605 	lsl.w	r6, r1, r5
 8015afa:	1d72      	adds	r2, r6, #5
 8015afc:	0092      	lsls	r2, r2, #2
 8015afe:	4620      	mov	r0, r4
 8015b00:	f000 fee4 	bl	80168cc <_calloc_r>
 8015b04:	b160      	cbz	r0, 8015b20 <_Balloc+0x64>
 8015b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b0a:	e00e      	b.n	8015b2a <_Balloc+0x6e>
 8015b0c:	2221      	movs	r2, #33	@ 0x21
 8015b0e:	2104      	movs	r1, #4
 8015b10:	4620      	mov	r0, r4
 8015b12:	f000 fedb 	bl	80168cc <_calloc_r>
 8015b16:	69e3      	ldr	r3, [r4, #28]
 8015b18:	60f0      	str	r0, [r6, #12]
 8015b1a:	68db      	ldr	r3, [r3, #12]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d1e4      	bne.n	8015aea <_Balloc+0x2e>
 8015b20:	2000      	movs	r0, #0
 8015b22:	bd70      	pop	{r4, r5, r6, pc}
 8015b24:	6802      	ldr	r2, [r0, #0]
 8015b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b30:	e7f7      	b.n	8015b22 <_Balloc+0x66>
 8015b32:	bf00      	nop
 8015b34:	08017362 	.word	0x08017362
 8015b38:	08017442 	.word	0x08017442

08015b3c <_Bfree>:
 8015b3c:	b570      	push	{r4, r5, r6, lr}
 8015b3e:	69c6      	ldr	r6, [r0, #28]
 8015b40:	4605      	mov	r5, r0
 8015b42:	460c      	mov	r4, r1
 8015b44:	b976      	cbnz	r6, 8015b64 <_Bfree+0x28>
 8015b46:	2010      	movs	r0, #16
 8015b48:	f7ff fef0 	bl	801592c <malloc>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	61e8      	str	r0, [r5, #28]
 8015b50:	b920      	cbnz	r0, 8015b5c <_Bfree+0x20>
 8015b52:	4b09      	ldr	r3, [pc, #36]	@ (8015b78 <_Bfree+0x3c>)
 8015b54:	4809      	ldr	r0, [pc, #36]	@ (8015b7c <_Bfree+0x40>)
 8015b56:	218f      	movs	r1, #143	@ 0x8f
 8015b58:	f000 fe9a 	bl	8016890 <__assert_func>
 8015b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b60:	6006      	str	r6, [r0, #0]
 8015b62:	60c6      	str	r6, [r0, #12]
 8015b64:	b13c      	cbz	r4, 8015b76 <_Bfree+0x3a>
 8015b66:	69eb      	ldr	r3, [r5, #28]
 8015b68:	6862      	ldr	r2, [r4, #4]
 8015b6a:	68db      	ldr	r3, [r3, #12]
 8015b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b70:	6021      	str	r1, [r4, #0]
 8015b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b76:	bd70      	pop	{r4, r5, r6, pc}
 8015b78:	08017362 	.word	0x08017362
 8015b7c:	08017442 	.word	0x08017442

08015b80 <__multadd>:
 8015b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b84:	690d      	ldr	r5, [r1, #16]
 8015b86:	4607      	mov	r7, r0
 8015b88:	460c      	mov	r4, r1
 8015b8a:	461e      	mov	r6, r3
 8015b8c:	f101 0c14 	add.w	ip, r1, #20
 8015b90:	2000      	movs	r0, #0
 8015b92:	f8dc 3000 	ldr.w	r3, [ip]
 8015b96:	b299      	uxth	r1, r3
 8015b98:	fb02 6101 	mla	r1, r2, r1, r6
 8015b9c:	0c1e      	lsrs	r6, r3, #16
 8015b9e:	0c0b      	lsrs	r3, r1, #16
 8015ba0:	fb02 3306 	mla	r3, r2, r6, r3
 8015ba4:	b289      	uxth	r1, r1
 8015ba6:	3001      	adds	r0, #1
 8015ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bac:	4285      	cmp	r5, r0
 8015bae:	f84c 1b04 	str.w	r1, [ip], #4
 8015bb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bb6:	dcec      	bgt.n	8015b92 <__multadd+0x12>
 8015bb8:	b30e      	cbz	r6, 8015bfe <__multadd+0x7e>
 8015bba:	68a3      	ldr	r3, [r4, #8]
 8015bbc:	42ab      	cmp	r3, r5
 8015bbe:	dc19      	bgt.n	8015bf4 <__multadd+0x74>
 8015bc0:	6861      	ldr	r1, [r4, #4]
 8015bc2:	4638      	mov	r0, r7
 8015bc4:	3101      	adds	r1, #1
 8015bc6:	f7ff ff79 	bl	8015abc <_Balloc>
 8015bca:	4680      	mov	r8, r0
 8015bcc:	b928      	cbnz	r0, 8015bda <__multadd+0x5a>
 8015bce:	4602      	mov	r2, r0
 8015bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8015c04 <__multadd+0x84>)
 8015bd2:	480d      	ldr	r0, [pc, #52]	@ (8015c08 <__multadd+0x88>)
 8015bd4:	21ba      	movs	r1, #186	@ 0xba
 8015bd6:	f000 fe5b 	bl	8016890 <__assert_func>
 8015bda:	6922      	ldr	r2, [r4, #16]
 8015bdc:	3202      	adds	r2, #2
 8015bde:	f104 010c 	add.w	r1, r4, #12
 8015be2:	0092      	lsls	r2, r2, #2
 8015be4:	300c      	adds	r0, #12
 8015be6:	f7fe fd26 	bl	8014636 <memcpy>
 8015bea:	4621      	mov	r1, r4
 8015bec:	4638      	mov	r0, r7
 8015bee:	f7ff ffa5 	bl	8015b3c <_Bfree>
 8015bf2:	4644      	mov	r4, r8
 8015bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015bf8:	3501      	adds	r5, #1
 8015bfa:	615e      	str	r6, [r3, #20]
 8015bfc:	6125      	str	r5, [r4, #16]
 8015bfe:	4620      	mov	r0, r4
 8015c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c04:	080173d1 	.word	0x080173d1
 8015c08:	08017442 	.word	0x08017442

08015c0c <__s2b>:
 8015c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c10:	460c      	mov	r4, r1
 8015c12:	4615      	mov	r5, r2
 8015c14:	461f      	mov	r7, r3
 8015c16:	2209      	movs	r2, #9
 8015c18:	3308      	adds	r3, #8
 8015c1a:	4606      	mov	r6, r0
 8015c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c20:	2100      	movs	r1, #0
 8015c22:	2201      	movs	r2, #1
 8015c24:	429a      	cmp	r2, r3
 8015c26:	db09      	blt.n	8015c3c <__s2b+0x30>
 8015c28:	4630      	mov	r0, r6
 8015c2a:	f7ff ff47 	bl	8015abc <_Balloc>
 8015c2e:	b940      	cbnz	r0, 8015c42 <__s2b+0x36>
 8015c30:	4602      	mov	r2, r0
 8015c32:	4b19      	ldr	r3, [pc, #100]	@ (8015c98 <__s2b+0x8c>)
 8015c34:	4819      	ldr	r0, [pc, #100]	@ (8015c9c <__s2b+0x90>)
 8015c36:	21d3      	movs	r1, #211	@ 0xd3
 8015c38:	f000 fe2a 	bl	8016890 <__assert_func>
 8015c3c:	0052      	lsls	r2, r2, #1
 8015c3e:	3101      	adds	r1, #1
 8015c40:	e7f0      	b.n	8015c24 <__s2b+0x18>
 8015c42:	9b08      	ldr	r3, [sp, #32]
 8015c44:	6143      	str	r3, [r0, #20]
 8015c46:	2d09      	cmp	r5, #9
 8015c48:	f04f 0301 	mov.w	r3, #1
 8015c4c:	6103      	str	r3, [r0, #16]
 8015c4e:	dd16      	ble.n	8015c7e <__s2b+0x72>
 8015c50:	f104 0909 	add.w	r9, r4, #9
 8015c54:	46c8      	mov	r8, r9
 8015c56:	442c      	add	r4, r5
 8015c58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015c5c:	4601      	mov	r1, r0
 8015c5e:	3b30      	subs	r3, #48	@ 0x30
 8015c60:	220a      	movs	r2, #10
 8015c62:	4630      	mov	r0, r6
 8015c64:	f7ff ff8c 	bl	8015b80 <__multadd>
 8015c68:	45a0      	cmp	r8, r4
 8015c6a:	d1f5      	bne.n	8015c58 <__s2b+0x4c>
 8015c6c:	f1a5 0408 	sub.w	r4, r5, #8
 8015c70:	444c      	add	r4, r9
 8015c72:	1b2d      	subs	r5, r5, r4
 8015c74:	1963      	adds	r3, r4, r5
 8015c76:	42bb      	cmp	r3, r7
 8015c78:	db04      	blt.n	8015c84 <__s2b+0x78>
 8015c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c7e:	340a      	adds	r4, #10
 8015c80:	2509      	movs	r5, #9
 8015c82:	e7f6      	b.n	8015c72 <__s2b+0x66>
 8015c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015c88:	4601      	mov	r1, r0
 8015c8a:	3b30      	subs	r3, #48	@ 0x30
 8015c8c:	220a      	movs	r2, #10
 8015c8e:	4630      	mov	r0, r6
 8015c90:	f7ff ff76 	bl	8015b80 <__multadd>
 8015c94:	e7ee      	b.n	8015c74 <__s2b+0x68>
 8015c96:	bf00      	nop
 8015c98:	080173d1 	.word	0x080173d1
 8015c9c:	08017442 	.word	0x08017442

08015ca0 <__hi0bits>:
 8015ca0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	bf36      	itet	cc
 8015ca8:	0403      	lslcc	r3, r0, #16
 8015caa:	2000      	movcs	r0, #0
 8015cac:	2010      	movcc	r0, #16
 8015cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015cb2:	bf3c      	itt	cc
 8015cb4:	021b      	lslcc	r3, r3, #8
 8015cb6:	3008      	addcc	r0, #8
 8015cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015cbc:	bf3c      	itt	cc
 8015cbe:	011b      	lslcc	r3, r3, #4
 8015cc0:	3004      	addcc	r0, #4
 8015cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015cc6:	bf3c      	itt	cc
 8015cc8:	009b      	lslcc	r3, r3, #2
 8015cca:	3002      	addcc	r0, #2
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	db05      	blt.n	8015cdc <__hi0bits+0x3c>
 8015cd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015cd4:	f100 0001 	add.w	r0, r0, #1
 8015cd8:	bf08      	it	eq
 8015cda:	2020      	moveq	r0, #32
 8015cdc:	4770      	bx	lr

08015cde <__lo0bits>:
 8015cde:	6803      	ldr	r3, [r0, #0]
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	f013 0007 	ands.w	r0, r3, #7
 8015ce6:	d00b      	beq.n	8015d00 <__lo0bits+0x22>
 8015ce8:	07d9      	lsls	r1, r3, #31
 8015cea:	d421      	bmi.n	8015d30 <__lo0bits+0x52>
 8015cec:	0798      	lsls	r0, r3, #30
 8015cee:	bf49      	itett	mi
 8015cf0:	085b      	lsrmi	r3, r3, #1
 8015cf2:	089b      	lsrpl	r3, r3, #2
 8015cf4:	2001      	movmi	r0, #1
 8015cf6:	6013      	strmi	r3, [r2, #0]
 8015cf8:	bf5c      	itt	pl
 8015cfa:	6013      	strpl	r3, [r2, #0]
 8015cfc:	2002      	movpl	r0, #2
 8015cfe:	4770      	bx	lr
 8015d00:	b299      	uxth	r1, r3
 8015d02:	b909      	cbnz	r1, 8015d08 <__lo0bits+0x2a>
 8015d04:	0c1b      	lsrs	r3, r3, #16
 8015d06:	2010      	movs	r0, #16
 8015d08:	b2d9      	uxtb	r1, r3
 8015d0a:	b909      	cbnz	r1, 8015d10 <__lo0bits+0x32>
 8015d0c:	3008      	adds	r0, #8
 8015d0e:	0a1b      	lsrs	r3, r3, #8
 8015d10:	0719      	lsls	r1, r3, #28
 8015d12:	bf04      	itt	eq
 8015d14:	091b      	lsreq	r3, r3, #4
 8015d16:	3004      	addeq	r0, #4
 8015d18:	0799      	lsls	r1, r3, #30
 8015d1a:	bf04      	itt	eq
 8015d1c:	089b      	lsreq	r3, r3, #2
 8015d1e:	3002      	addeq	r0, #2
 8015d20:	07d9      	lsls	r1, r3, #31
 8015d22:	d403      	bmi.n	8015d2c <__lo0bits+0x4e>
 8015d24:	085b      	lsrs	r3, r3, #1
 8015d26:	f100 0001 	add.w	r0, r0, #1
 8015d2a:	d003      	beq.n	8015d34 <__lo0bits+0x56>
 8015d2c:	6013      	str	r3, [r2, #0]
 8015d2e:	4770      	bx	lr
 8015d30:	2000      	movs	r0, #0
 8015d32:	4770      	bx	lr
 8015d34:	2020      	movs	r0, #32
 8015d36:	4770      	bx	lr

08015d38 <__i2b>:
 8015d38:	b510      	push	{r4, lr}
 8015d3a:	460c      	mov	r4, r1
 8015d3c:	2101      	movs	r1, #1
 8015d3e:	f7ff febd 	bl	8015abc <_Balloc>
 8015d42:	4602      	mov	r2, r0
 8015d44:	b928      	cbnz	r0, 8015d52 <__i2b+0x1a>
 8015d46:	4b05      	ldr	r3, [pc, #20]	@ (8015d5c <__i2b+0x24>)
 8015d48:	4805      	ldr	r0, [pc, #20]	@ (8015d60 <__i2b+0x28>)
 8015d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8015d4e:	f000 fd9f 	bl	8016890 <__assert_func>
 8015d52:	2301      	movs	r3, #1
 8015d54:	6144      	str	r4, [r0, #20]
 8015d56:	6103      	str	r3, [r0, #16]
 8015d58:	bd10      	pop	{r4, pc}
 8015d5a:	bf00      	nop
 8015d5c:	080173d1 	.word	0x080173d1
 8015d60:	08017442 	.word	0x08017442

08015d64 <__multiply>:
 8015d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d68:	4614      	mov	r4, r2
 8015d6a:	690a      	ldr	r2, [r1, #16]
 8015d6c:	6923      	ldr	r3, [r4, #16]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	bfa8      	it	ge
 8015d72:	4623      	movge	r3, r4
 8015d74:	460f      	mov	r7, r1
 8015d76:	bfa4      	itt	ge
 8015d78:	460c      	movge	r4, r1
 8015d7a:	461f      	movge	r7, r3
 8015d7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015d80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015d84:	68a3      	ldr	r3, [r4, #8]
 8015d86:	6861      	ldr	r1, [r4, #4]
 8015d88:	eb0a 0609 	add.w	r6, sl, r9
 8015d8c:	42b3      	cmp	r3, r6
 8015d8e:	b085      	sub	sp, #20
 8015d90:	bfb8      	it	lt
 8015d92:	3101      	addlt	r1, #1
 8015d94:	f7ff fe92 	bl	8015abc <_Balloc>
 8015d98:	b930      	cbnz	r0, 8015da8 <__multiply+0x44>
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	4b44      	ldr	r3, [pc, #272]	@ (8015eb0 <__multiply+0x14c>)
 8015d9e:	4845      	ldr	r0, [pc, #276]	@ (8015eb4 <__multiply+0x150>)
 8015da0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015da4:	f000 fd74 	bl	8016890 <__assert_func>
 8015da8:	f100 0514 	add.w	r5, r0, #20
 8015dac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015db0:	462b      	mov	r3, r5
 8015db2:	2200      	movs	r2, #0
 8015db4:	4543      	cmp	r3, r8
 8015db6:	d321      	bcc.n	8015dfc <__multiply+0x98>
 8015db8:	f107 0114 	add.w	r1, r7, #20
 8015dbc:	f104 0214 	add.w	r2, r4, #20
 8015dc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015dc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015dc8:	9302      	str	r3, [sp, #8]
 8015dca:	1b13      	subs	r3, r2, r4
 8015dcc:	3b15      	subs	r3, #21
 8015dce:	f023 0303 	bic.w	r3, r3, #3
 8015dd2:	3304      	adds	r3, #4
 8015dd4:	f104 0715 	add.w	r7, r4, #21
 8015dd8:	42ba      	cmp	r2, r7
 8015dda:	bf38      	it	cc
 8015ddc:	2304      	movcc	r3, #4
 8015dde:	9301      	str	r3, [sp, #4]
 8015de0:	9b02      	ldr	r3, [sp, #8]
 8015de2:	9103      	str	r1, [sp, #12]
 8015de4:	428b      	cmp	r3, r1
 8015de6:	d80c      	bhi.n	8015e02 <__multiply+0x9e>
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	dd03      	ble.n	8015df4 <__multiply+0x90>
 8015dec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d05b      	beq.n	8015eac <__multiply+0x148>
 8015df4:	6106      	str	r6, [r0, #16]
 8015df6:	b005      	add	sp, #20
 8015df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfc:	f843 2b04 	str.w	r2, [r3], #4
 8015e00:	e7d8      	b.n	8015db4 <__multiply+0x50>
 8015e02:	f8b1 a000 	ldrh.w	sl, [r1]
 8015e06:	f1ba 0f00 	cmp.w	sl, #0
 8015e0a:	d024      	beq.n	8015e56 <__multiply+0xf2>
 8015e0c:	f104 0e14 	add.w	lr, r4, #20
 8015e10:	46a9      	mov	r9, r5
 8015e12:	f04f 0c00 	mov.w	ip, #0
 8015e16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8015e1e:	fa1f fb87 	uxth.w	fp, r7
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	fb0a 330b 	mla	r3, sl, fp, r3
 8015e28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015e2c:	f8d9 7000 	ldr.w	r7, [r9]
 8015e30:	4463      	add	r3, ip
 8015e32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015e36:	fb0a c70b 	mla	r7, sl, fp, ip
 8015e3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015e44:	4572      	cmp	r2, lr
 8015e46:	f849 3b04 	str.w	r3, [r9], #4
 8015e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015e4e:	d8e2      	bhi.n	8015e16 <__multiply+0xb2>
 8015e50:	9b01      	ldr	r3, [sp, #4]
 8015e52:	f845 c003 	str.w	ip, [r5, r3]
 8015e56:	9b03      	ldr	r3, [sp, #12]
 8015e58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015e5c:	3104      	adds	r1, #4
 8015e5e:	f1b9 0f00 	cmp.w	r9, #0
 8015e62:	d021      	beq.n	8015ea8 <__multiply+0x144>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	f104 0c14 	add.w	ip, r4, #20
 8015e6a:	46ae      	mov	lr, r5
 8015e6c:	f04f 0a00 	mov.w	sl, #0
 8015e70:	f8bc b000 	ldrh.w	fp, [ip]
 8015e74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015e78:	fb09 770b 	mla	r7, r9, fp, r7
 8015e7c:	4457      	add	r7, sl
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015e84:	f84e 3b04 	str.w	r3, [lr], #4
 8015e88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e90:	f8be 3000 	ldrh.w	r3, [lr]
 8015e94:	fb09 330a 	mla	r3, r9, sl, r3
 8015e98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015e9c:	4562      	cmp	r2, ip
 8015e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015ea2:	d8e5      	bhi.n	8015e70 <__multiply+0x10c>
 8015ea4:	9f01      	ldr	r7, [sp, #4]
 8015ea6:	51eb      	str	r3, [r5, r7]
 8015ea8:	3504      	adds	r5, #4
 8015eaa:	e799      	b.n	8015de0 <__multiply+0x7c>
 8015eac:	3e01      	subs	r6, #1
 8015eae:	e79b      	b.n	8015de8 <__multiply+0x84>
 8015eb0:	080173d1 	.word	0x080173d1
 8015eb4:	08017442 	.word	0x08017442

08015eb8 <__pow5mult>:
 8015eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ebc:	4615      	mov	r5, r2
 8015ebe:	f012 0203 	ands.w	r2, r2, #3
 8015ec2:	4607      	mov	r7, r0
 8015ec4:	460e      	mov	r6, r1
 8015ec6:	d007      	beq.n	8015ed8 <__pow5mult+0x20>
 8015ec8:	4c25      	ldr	r4, [pc, #148]	@ (8015f60 <__pow5mult+0xa8>)
 8015eca:	3a01      	subs	r2, #1
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015ed2:	f7ff fe55 	bl	8015b80 <__multadd>
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	10ad      	asrs	r5, r5, #2
 8015eda:	d03d      	beq.n	8015f58 <__pow5mult+0xa0>
 8015edc:	69fc      	ldr	r4, [r7, #28]
 8015ede:	b97c      	cbnz	r4, 8015f00 <__pow5mult+0x48>
 8015ee0:	2010      	movs	r0, #16
 8015ee2:	f7ff fd23 	bl	801592c <malloc>
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	61f8      	str	r0, [r7, #28]
 8015eea:	b928      	cbnz	r0, 8015ef8 <__pow5mult+0x40>
 8015eec:	4b1d      	ldr	r3, [pc, #116]	@ (8015f64 <__pow5mult+0xac>)
 8015eee:	481e      	ldr	r0, [pc, #120]	@ (8015f68 <__pow5mult+0xb0>)
 8015ef0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015ef4:	f000 fccc 	bl	8016890 <__assert_func>
 8015ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015efc:	6004      	str	r4, [r0, #0]
 8015efe:	60c4      	str	r4, [r0, #12]
 8015f00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f08:	b94c      	cbnz	r4, 8015f1e <__pow5mult+0x66>
 8015f0a:	f240 2171 	movw	r1, #625	@ 0x271
 8015f0e:	4638      	mov	r0, r7
 8015f10:	f7ff ff12 	bl	8015d38 <__i2b>
 8015f14:	2300      	movs	r3, #0
 8015f16:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	6003      	str	r3, [r0, #0]
 8015f1e:	f04f 0900 	mov.w	r9, #0
 8015f22:	07eb      	lsls	r3, r5, #31
 8015f24:	d50a      	bpl.n	8015f3c <__pow5mult+0x84>
 8015f26:	4631      	mov	r1, r6
 8015f28:	4622      	mov	r2, r4
 8015f2a:	4638      	mov	r0, r7
 8015f2c:	f7ff ff1a 	bl	8015d64 <__multiply>
 8015f30:	4631      	mov	r1, r6
 8015f32:	4680      	mov	r8, r0
 8015f34:	4638      	mov	r0, r7
 8015f36:	f7ff fe01 	bl	8015b3c <_Bfree>
 8015f3a:	4646      	mov	r6, r8
 8015f3c:	106d      	asrs	r5, r5, #1
 8015f3e:	d00b      	beq.n	8015f58 <__pow5mult+0xa0>
 8015f40:	6820      	ldr	r0, [r4, #0]
 8015f42:	b938      	cbnz	r0, 8015f54 <__pow5mult+0x9c>
 8015f44:	4622      	mov	r2, r4
 8015f46:	4621      	mov	r1, r4
 8015f48:	4638      	mov	r0, r7
 8015f4a:	f7ff ff0b 	bl	8015d64 <__multiply>
 8015f4e:	6020      	str	r0, [r4, #0]
 8015f50:	f8c0 9000 	str.w	r9, [r0]
 8015f54:	4604      	mov	r4, r0
 8015f56:	e7e4      	b.n	8015f22 <__pow5mult+0x6a>
 8015f58:	4630      	mov	r0, r6
 8015f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f5e:	bf00      	nop
 8015f60:	0801749c 	.word	0x0801749c
 8015f64:	08017362 	.word	0x08017362
 8015f68:	08017442 	.word	0x08017442

08015f6c <__lshift>:
 8015f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f70:	460c      	mov	r4, r1
 8015f72:	6849      	ldr	r1, [r1, #4]
 8015f74:	6923      	ldr	r3, [r4, #16]
 8015f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f7a:	68a3      	ldr	r3, [r4, #8]
 8015f7c:	4607      	mov	r7, r0
 8015f7e:	4691      	mov	r9, r2
 8015f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f84:	f108 0601 	add.w	r6, r8, #1
 8015f88:	42b3      	cmp	r3, r6
 8015f8a:	db0b      	blt.n	8015fa4 <__lshift+0x38>
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f7ff fd95 	bl	8015abc <_Balloc>
 8015f92:	4605      	mov	r5, r0
 8015f94:	b948      	cbnz	r0, 8015faa <__lshift+0x3e>
 8015f96:	4602      	mov	r2, r0
 8015f98:	4b28      	ldr	r3, [pc, #160]	@ (801603c <__lshift+0xd0>)
 8015f9a:	4829      	ldr	r0, [pc, #164]	@ (8016040 <__lshift+0xd4>)
 8015f9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015fa0:	f000 fc76 	bl	8016890 <__assert_func>
 8015fa4:	3101      	adds	r1, #1
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	e7ee      	b.n	8015f88 <__lshift+0x1c>
 8015faa:	2300      	movs	r3, #0
 8015fac:	f100 0114 	add.w	r1, r0, #20
 8015fb0:	f100 0210 	add.w	r2, r0, #16
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	4553      	cmp	r3, sl
 8015fb8:	db33      	blt.n	8016022 <__lshift+0xb6>
 8015fba:	6920      	ldr	r0, [r4, #16]
 8015fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015fc0:	f104 0314 	add.w	r3, r4, #20
 8015fc4:	f019 091f 	ands.w	r9, r9, #31
 8015fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015fd0:	d02b      	beq.n	801602a <__lshift+0xbe>
 8015fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8015fd6:	468a      	mov	sl, r1
 8015fd8:	2200      	movs	r2, #0
 8015fda:	6818      	ldr	r0, [r3, #0]
 8015fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8015fe0:	4310      	orrs	r0, r2
 8015fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8015fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fea:	459c      	cmp	ip, r3
 8015fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ff0:	d8f3      	bhi.n	8015fda <__lshift+0x6e>
 8015ff2:	ebac 0304 	sub.w	r3, ip, r4
 8015ff6:	3b15      	subs	r3, #21
 8015ff8:	f023 0303 	bic.w	r3, r3, #3
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	f104 0015 	add.w	r0, r4, #21
 8016002:	4584      	cmp	ip, r0
 8016004:	bf38      	it	cc
 8016006:	2304      	movcc	r3, #4
 8016008:	50ca      	str	r2, [r1, r3]
 801600a:	b10a      	cbz	r2, 8016010 <__lshift+0xa4>
 801600c:	f108 0602 	add.w	r6, r8, #2
 8016010:	3e01      	subs	r6, #1
 8016012:	4638      	mov	r0, r7
 8016014:	612e      	str	r6, [r5, #16]
 8016016:	4621      	mov	r1, r4
 8016018:	f7ff fd90 	bl	8015b3c <_Bfree>
 801601c:	4628      	mov	r0, r5
 801601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016022:	f842 0f04 	str.w	r0, [r2, #4]!
 8016026:	3301      	adds	r3, #1
 8016028:	e7c5      	b.n	8015fb6 <__lshift+0x4a>
 801602a:	3904      	subs	r1, #4
 801602c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016030:	f841 2f04 	str.w	r2, [r1, #4]!
 8016034:	459c      	cmp	ip, r3
 8016036:	d8f9      	bhi.n	801602c <__lshift+0xc0>
 8016038:	e7ea      	b.n	8016010 <__lshift+0xa4>
 801603a:	bf00      	nop
 801603c:	080173d1 	.word	0x080173d1
 8016040:	08017442 	.word	0x08017442

08016044 <__mcmp>:
 8016044:	690a      	ldr	r2, [r1, #16]
 8016046:	4603      	mov	r3, r0
 8016048:	6900      	ldr	r0, [r0, #16]
 801604a:	1a80      	subs	r0, r0, r2
 801604c:	b530      	push	{r4, r5, lr}
 801604e:	d10e      	bne.n	801606e <__mcmp+0x2a>
 8016050:	3314      	adds	r3, #20
 8016052:	3114      	adds	r1, #20
 8016054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801605c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016064:	4295      	cmp	r5, r2
 8016066:	d003      	beq.n	8016070 <__mcmp+0x2c>
 8016068:	d205      	bcs.n	8016076 <__mcmp+0x32>
 801606a:	f04f 30ff 	mov.w	r0, #4294967295
 801606e:	bd30      	pop	{r4, r5, pc}
 8016070:	42a3      	cmp	r3, r4
 8016072:	d3f3      	bcc.n	801605c <__mcmp+0x18>
 8016074:	e7fb      	b.n	801606e <__mcmp+0x2a>
 8016076:	2001      	movs	r0, #1
 8016078:	e7f9      	b.n	801606e <__mcmp+0x2a>
	...

0801607c <__mdiff>:
 801607c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016080:	4689      	mov	r9, r1
 8016082:	4606      	mov	r6, r0
 8016084:	4611      	mov	r1, r2
 8016086:	4648      	mov	r0, r9
 8016088:	4614      	mov	r4, r2
 801608a:	f7ff ffdb 	bl	8016044 <__mcmp>
 801608e:	1e05      	subs	r5, r0, #0
 8016090:	d112      	bne.n	80160b8 <__mdiff+0x3c>
 8016092:	4629      	mov	r1, r5
 8016094:	4630      	mov	r0, r6
 8016096:	f7ff fd11 	bl	8015abc <_Balloc>
 801609a:	4602      	mov	r2, r0
 801609c:	b928      	cbnz	r0, 80160aa <__mdiff+0x2e>
 801609e:	4b3f      	ldr	r3, [pc, #252]	@ (801619c <__mdiff+0x120>)
 80160a0:	f240 2137 	movw	r1, #567	@ 0x237
 80160a4:	483e      	ldr	r0, [pc, #248]	@ (80161a0 <__mdiff+0x124>)
 80160a6:	f000 fbf3 	bl	8016890 <__assert_func>
 80160aa:	2301      	movs	r3, #1
 80160ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80160b0:	4610      	mov	r0, r2
 80160b2:	b003      	add	sp, #12
 80160b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b8:	bfbc      	itt	lt
 80160ba:	464b      	movlt	r3, r9
 80160bc:	46a1      	movlt	r9, r4
 80160be:	4630      	mov	r0, r6
 80160c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80160c4:	bfba      	itte	lt
 80160c6:	461c      	movlt	r4, r3
 80160c8:	2501      	movlt	r5, #1
 80160ca:	2500      	movge	r5, #0
 80160cc:	f7ff fcf6 	bl	8015abc <_Balloc>
 80160d0:	4602      	mov	r2, r0
 80160d2:	b918      	cbnz	r0, 80160dc <__mdiff+0x60>
 80160d4:	4b31      	ldr	r3, [pc, #196]	@ (801619c <__mdiff+0x120>)
 80160d6:	f240 2145 	movw	r1, #581	@ 0x245
 80160da:	e7e3      	b.n	80160a4 <__mdiff+0x28>
 80160dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80160e0:	6926      	ldr	r6, [r4, #16]
 80160e2:	60c5      	str	r5, [r0, #12]
 80160e4:	f109 0310 	add.w	r3, r9, #16
 80160e8:	f109 0514 	add.w	r5, r9, #20
 80160ec:	f104 0e14 	add.w	lr, r4, #20
 80160f0:	f100 0b14 	add.w	fp, r0, #20
 80160f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80160f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80160fc:	9301      	str	r3, [sp, #4]
 80160fe:	46d9      	mov	r9, fp
 8016100:	f04f 0c00 	mov.w	ip, #0
 8016104:	9b01      	ldr	r3, [sp, #4]
 8016106:	f85e 0b04 	ldr.w	r0, [lr], #4
 801610a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801610e:	9301      	str	r3, [sp, #4]
 8016110:	fa1f f38a 	uxth.w	r3, sl
 8016114:	4619      	mov	r1, r3
 8016116:	b283      	uxth	r3, r0
 8016118:	1acb      	subs	r3, r1, r3
 801611a:	0c00      	lsrs	r0, r0, #16
 801611c:	4463      	add	r3, ip
 801611e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016122:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016126:	b29b      	uxth	r3, r3
 8016128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801612c:	4576      	cmp	r6, lr
 801612e:	f849 3b04 	str.w	r3, [r9], #4
 8016132:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016136:	d8e5      	bhi.n	8016104 <__mdiff+0x88>
 8016138:	1b33      	subs	r3, r6, r4
 801613a:	3b15      	subs	r3, #21
 801613c:	f023 0303 	bic.w	r3, r3, #3
 8016140:	3415      	adds	r4, #21
 8016142:	3304      	adds	r3, #4
 8016144:	42a6      	cmp	r6, r4
 8016146:	bf38      	it	cc
 8016148:	2304      	movcc	r3, #4
 801614a:	441d      	add	r5, r3
 801614c:	445b      	add	r3, fp
 801614e:	461e      	mov	r6, r3
 8016150:	462c      	mov	r4, r5
 8016152:	4544      	cmp	r4, r8
 8016154:	d30e      	bcc.n	8016174 <__mdiff+0xf8>
 8016156:	f108 0103 	add.w	r1, r8, #3
 801615a:	1b49      	subs	r1, r1, r5
 801615c:	f021 0103 	bic.w	r1, r1, #3
 8016160:	3d03      	subs	r5, #3
 8016162:	45a8      	cmp	r8, r5
 8016164:	bf38      	it	cc
 8016166:	2100      	movcc	r1, #0
 8016168:	440b      	add	r3, r1
 801616a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801616e:	b191      	cbz	r1, 8016196 <__mdiff+0x11a>
 8016170:	6117      	str	r7, [r2, #16]
 8016172:	e79d      	b.n	80160b0 <__mdiff+0x34>
 8016174:	f854 1b04 	ldr.w	r1, [r4], #4
 8016178:	46e6      	mov	lr, ip
 801617a:	0c08      	lsrs	r0, r1, #16
 801617c:	fa1c fc81 	uxtah	ip, ip, r1
 8016180:	4471      	add	r1, lr
 8016182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016186:	b289      	uxth	r1, r1
 8016188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801618c:	f846 1b04 	str.w	r1, [r6], #4
 8016190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016194:	e7dd      	b.n	8016152 <__mdiff+0xd6>
 8016196:	3f01      	subs	r7, #1
 8016198:	e7e7      	b.n	801616a <__mdiff+0xee>
 801619a:	bf00      	nop
 801619c:	080173d1 	.word	0x080173d1
 80161a0:	08017442 	.word	0x08017442

080161a4 <__ulp>:
 80161a4:	b082      	sub	sp, #8
 80161a6:	ed8d 0b00 	vstr	d0, [sp]
 80161aa:	9a01      	ldr	r2, [sp, #4]
 80161ac:	4b0f      	ldr	r3, [pc, #60]	@ (80161ec <__ulp+0x48>)
 80161ae:	4013      	ands	r3, r2
 80161b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	dc08      	bgt.n	80161ca <__ulp+0x26>
 80161b8:	425b      	negs	r3, r3
 80161ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80161be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80161c2:	da04      	bge.n	80161ce <__ulp+0x2a>
 80161c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80161c8:	4113      	asrs	r3, r2
 80161ca:	2200      	movs	r2, #0
 80161cc:	e008      	b.n	80161e0 <__ulp+0x3c>
 80161ce:	f1a2 0314 	sub.w	r3, r2, #20
 80161d2:	2b1e      	cmp	r3, #30
 80161d4:	bfda      	itte	le
 80161d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80161da:	40da      	lsrle	r2, r3
 80161dc:	2201      	movgt	r2, #1
 80161de:	2300      	movs	r3, #0
 80161e0:	4619      	mov	r1, r3
 80161e2:	4610      	mov	r0, r2
 80161e4:	ec41 0b10 	vmov	d0, r0, r1
 80161e8:	b002      	add	sp, #8
 80161ea:	4770      	bx	lr
 80161ec:	7ff00000 	.word	0x7ff00000

080161f0 <__b2d>:
 80161f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f4:	6906      	ldr	r6, [r0, #16]
 80161f6:	f100 0814 	add.w	r8, r0, #20
 80161fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80161fe:	1f37      	subs	r7, r6, #4
 8016200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016204:	4610      	mov	r0, r2
 8016206:	f7ff fd4b 	bl	8015ca0 <__hi0bits>
 801620a:	f1c0 0320 	rsb	r3, r0, #32
 801620e:	280a      	cmp	r0, #10
 8016210:	600b      	str	r3, [r1, #0]
 8016212:	491b      	ldr	r1, [pc, #108]	@ (8016280 <__b2d+0x90>)
 8016214:	dc15      	bgt.n	8016242 <__b2d+0x52>
 8016216:	f1c0 0c0b 	rsb	ip, r0, #11
 801621a:	fa22 f30c 	lsr.w	r3, r2, ip
 801621e:	45b8      	cmp	r8, r7
 8016220:	ea43 0501 	orr.w	r5, r3, r1
 8016224:	bf34      	ite	cc
 8016226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801622a:	2300      	movcs	r3, #0
 801622c:	3015      	adds	r0, #21
 801622e:	fa02 f000 	lsl.w	r0, r2, r0
 8016232:	fa23 f30c 	lsr.w	r3, r3, ip
 8016236:	4303      	orrs	r3, r0
 8016238:	461c      	mov	r4, r3
 801623a:	ec45 4b10 	vmov	d0, r4, r5
 801623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016242:	45b8      	cmp	r8, r7
 8016244:	bf3a      	itte	cc
 8016246:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801624a:	f1a6 0708 	subcc.w	r7, r6, #8
 801624e:	2300      	movcs	r3, #0
 8016250:	380b      	subs	r0, #11
 8016252:	d012      	beq.n	801627a <__b2d+0x8a>
 8016254:	f1c0 0120 	rsb	r1, r0, #32
 8016258:	fa23 f401 	lsr.w	r4, r3, r1
 801625c:	4082      	lsls	r2, r0
 801625e:	4322      	orrs	r2, r4
 8016260:	4547      	cmp	r7, r8
 8016262:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016266:	bf8c      	ite	hi
 8016268:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801626c:	2200      	movls	r2, #0
 801626e:	4083      	lsls	r3, r0
 8016270:	40ca      	lsrs	r2, r1
 8016272:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016276:	4313      	orrs	r3, r2
 8016278:	e7de      	b.n	8016238 <__b2d+0x48>
 801627a:	ea42 0501 	orr.w	r5, r2, r1
 801627e:	e7db      	b.n	8016238 <__b2d+0x48>
 8016280:	3ff00000 	.word	0x3ff00000

08016284 <__d2b>:
 8016284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016288:	460f      	mov	r7, r1
 801628a:	2101      	movs	r1, #1
 801628c:	ec59 8b10 	vmov	r8, r9, d0
 8016290:	4616      	mov	r6, r2
 8016292:	f7ff fc13 	bl	8015abc <_Balloc>
 8016296:	4604      	mov	r4, r0
 8016298:	b930      	cbnz	r0, 80162a8 <__d2b+0x24>
 801629a:	4602      	mov	r2, r0
 801629c:	4b23      	ldr	r3, [pc, #140]	@ (801632c <__d2b+0xa8>)
 801629e:	4824      	ldr	r0, [pc, #144]	@ (8016330 <__d2b+0xac>)
 80162a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80162a4:	f000 faf4 	bl	8016890 <__assert_func>
 80162a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80162ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162b0:	b10d      	cbz	r5, 80162b6 <__d2b+0x32>
 80162b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80162b6:	9301      	str	r3, [sp, #4]
 80162b8:	f1b8 0300 	subs.w	r3, r8, #0
 80162bc:	d023      	beq.n	8016306 <__d2b+0x82>
 80162be:	4668      	mov	r0, sp
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	f7ff fd0c 	bl	8015cde <__lo0bits>
 80162c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80162ca:	b1d0      	cbz	r0, 8016302 <__d2b+0x7e>
 80162cc:	f1c0 0320 	rsb	r3, r0, #32
 80162d0:	fa02 f303 	lsl.w	r3, r2, r3
 80162d4:	430b      	orrs	r3, r1
 80162d6:	40c2      	lsrs	r2, r0
 80162d8:	6163      	str	r3, [r4, #20]
 80162da:	9201      	str	r2, [sp, #4]
 80162dc:	9b01      	ldr	r3, [sp, #4]
 80162de:	61a3      	str	r3, [r4, #24]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	bf0c      	ite	eq
 80162e4:	2201      	moveq	r2, #1
 80162e6:	2202      	movne	r2, #2
 80162e8:	6122      	str	r2, [r4, #16]
 80162ea:	b1a5      	cbz	r5, 8016316 <__d2b+0x92>
 80162ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80162f0:	4405      	add	r5, r0
 80162f2:	603d      	str	r5, [r7, #0]
 80162f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80162f8:	6030      	str	r0, [r6, #0]
 80162fa:	4620      	mov	r0, r4
 80162fc:	b003      	add	sp, #12
 80162fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016302:	6161      	str	r1, [r4, #20]
 8016304:	e7ea      	b.n	80162dc <__d2b+0x58>
 8016306:	a801      	add	r0, sp, #4
 8016308:	f7ff fce9 	bl	8015cde <__lo0bits>
 801630c:	9b01      	ldr	r3, [sp, #4]
 801630e:	6163      	str	r3, [r4, #20]
 8016310:	3020      	adds	r0, #32
 8016312:	2201      	movs	r2, #1
 8016314:	e7e8      	b.n	80162e8 <__d2b+0x64>
 8016316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801631a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801631e:	6038      	str	r0, [r7, #0]
 8016320:	6918      	ldr	r0, [r3, #16]
 8016322:	f7ff fcbd 	bl	8015ca0 <__hi0bits>
 8016326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801632a:	e7e5      	b.n	80162f8 <__d2b+0x74>
 801632c:	080173d1 	.word	0x080173d1
 8016330:	08017442 	.word	0x08017442

08016334 <__ratio>:
 8016334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016338:	4688      	mov	r8, r1
 801633a:	4669      	mov	r1, sp
 801633c:	4681      	mov	r9, r0
 801633e:	f7ff ff57 	bl	80161f0 <__b2d>
 8016342:	a901      	add	r1, sp, #4
 8016344:	4640      	mov	r0, r8
 8016346:	ec55 4b10 	vmov	r4, r5, d0
 801634a:	f7ff ff51 	bl	80161f0 <__b2d>
 801634e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016352:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016356:	1ad2      	subs	r2, r2, r3
 8016358:	e9dd 3100 	ldrd	r3, r1, [sp]
 801635c:	1a5b      	subs	r3, r3, r1
 801635e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016362:	ec57 6b10 	vmov	r6, r7, d0
 8016366:	2b00      	cmp	r3, #0
 8016368:	bfd6      	itet	le
 801636a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801636e:	462a      	movgt	r2, r5
 8016370:	463a      	movle	r2, r7
 8016372:	46ab      	mov	fp, r5
 8016374:	46a2      	mov	sl, r4
 8016376:	bfce      	itee	gt
 8016378:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801637c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016380:	ee00 3a90 	vmovle	s1, r3
 8016384:	ec4b ab17 	vmov	d7, sl, fp
 8016388:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801638c:	b003      	add	sp, #12
 801638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016392 <__copybits>:
 8016392:	3901      	subs	r1, #1
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	1149      	asrs	r1, r1, #5
 8016398:	6914      	ldr	r4, [r2, #16]
 801639a:	3101      	adds	r1, #1
 801639c:	f102 0314 	add.w	r3, r2, #20
 80163a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80163a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80163a8:	1f05      	subs	r5, r0, #4
 80163aa:	42a3      	cmp	r3, r4
 80163ac:	d30c      	bcc.n	80163c8 <__copybits+0x36>
 80163ae:	1aa3      	subs	r3, r4, r2
 80163b0:	3b11      	subs	r3, #17
 80163b2:	f023 0303 	bic.w	r3, r3, #3
 80163b6:	3211      	adds	r2, #17
 80163b8:	42a2      	cmp	r2, r4
 80163ba:	bf88      	it	hi
 80163bc:	2300      	movhi	r3, #0
 80163be:	4418      	add	r0, r3
 80163c0:	2300      	movs	r3, #0
 80163c2:	4288      	cmp	r0, r1
 80163c4:	d305      	bcc.n	80163d2 <__copybits+0x40>
 80163c6:	bd70      	pop	{r4, r5, r6, pc}
 80163c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80163cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80163d0:	e7eb      	b.n	80163aa <__copybits+0x18>
 80163d2:	f840 3b04 	str.w	r3, [r0], #4
 80163d6:	e7f4      	b.n	80163c2 <__copybits+0x30>

080163d8 <__any_on>:
 80163d8:	f100 0214 	add.w	r2, r0, #20
 80163dc:	6900      	ldr	r0, [r0, #16]
 80163de:	114b      	asrs	r3, r1, #5
 80163e0:	4298      	cmp	r0, r3
 80163e2:	b510      	push	{r4, lr}
 80163e4:	db11      	blt.n	801640a <__any_on+0x32>
 80163e6:	dd0a      	ble.n	80163fe <__any_on+0x26>
 80163e8:	f011 011f 	ands.w	r1, r1, #31
 80163ec:	d007      	beq.n	80163fe <__any_on+0x26>
 80163ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80163f2:	fa24 f001 	lsr.w	r0, r4, r1
 80163f6:	fa00 f101 	lsl.w	r1, r0, r1
 80163fa:	428c      	cmp	r4, r1
 80163fc:	d10b      	bne.n	8016416 <__any_on+0x3e>
 80163fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016402:	4293      	cmp	r3, r2
 8016404:	d803      	bhi.n	801640e <__any_on+0x36>
 8016406:	2000      	movs	r0, #0
 8016408:	bd10      	pop	{r4, pc}
 801640a:	4603      	mov	r3, r0
 801640c:	e7f7      	b.n	80163fe <__any_on+0x26>
 801640e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016412:	2900      	cmp	r1, #0
 8016414:	d0f5      	beq.n	8016402 <__any_on+0x2a>
 8016416:	2001      	movs	r0, #1
 8016418:	e7f6      	b.n	8016408 <__any_on+0x30>

0801641a <__ascii_wctomb>:
 801641a:	4603      	mov	r3, r0
 801641c:	4608      	mov	r0, r1
 801641e:	b141      	cbz	r1, 8016432 <__ascii_wctomb+0x18>
 8016420:	2aff      	cmp	r2, #255	@ 0xff
 8016422:	d904      	bls.n	801642e <__ascii_wctomb+0x14>
 8016424:	228a      	movs	r2, #138	@ 0x8a
 8016426:	601a      	str	r2, [r3, #0]
 8016428:	f04f 30ff 	mov.w	r0, #4294967295
 801642c:	4770      	bx	lr
 801642e:	700a      	strb	r2, [r1, #0]
 8016430:	2001      	movs	r0, #1
 8016432:	4770      	bx	lr

08016434 <__ssputs_r>:
 8016434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016438:	688e      	ldr	r6, [r1, #8]
 801643a:	461f      	mov	r7, r3
 801643c:	42be      	cmp	r6, r7
 801643e:	680b      	ldr	r3, [r1, #0]
 8016440:	4682      	mov	sl, r0
 8016442:	460c      	mov	r4, r1
 8016444:	4690      	mov	r8, r2
 8016446:	d82d      	bhi.n	80164a4 <__ssputs_r+0x70>
 8016448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801644c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016450:	d026      	beq.n	80164a0 <__ssputs_r+0x6c>
 8016452:	6965      	ldr	r5, [r4, #20]
 8016454:	6909      	ldr	r1, [r1, #16]
 8016456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801645a:	eba3 0901 	sub.w	r9, r3, r1
 801645e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016462:	1c7b      	adds	r3, r7, #1
 8016464:	444b      	add	r3, r9
 8016466:	106d      	asrs	r5, r5, #1
 8016468:	429d      	cmp	r5, r3
 801646a:	bf38      	it	cc
 801646c:	461d      	movcc	r5, r3
 801646e:	0553      	lsls	r3, r2, #21
 8016470:	d527      	bpl.n	80164c2 <__ssputs_r+0x8e>
 8016472:	4629      	mov	r1, r5
 8016474:	f7ff fa84 	bl	8015980 <_malloc_r>
 8016478:	4606      	mov	r6, r0
 801647a:	b360      	cbz	r0, 80164d6 <__ssputs_r+0xa2>
 801647c:	6921      	ldr	r1, [r4, #16]
 801647e:	464a      	mov	r2, r9
 8016480:	f7fe f8d9 	bl	8014636 <memcpy>
 8016484:	89a3      	ldrh	r3, [r4, #12]
 8016486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801648a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801648e:	81a3      	strh	r3, [r4, #12]
 8016490:	6126      	str	r6, [r4, #16]
 8016492:	6165      	str	r5, [r4, #20]
 8016494:	444e      	add	r6, r9
 8016496:	eba5 0509 	sub.w	r5, r5, r9
 801649a:	6026      	str	r6, [r4, #0]
 801649c:	60a5      	str	r5, [r4, #8]
 801649e:	463e      	mov	r6, r7
 80164a0:	42be      	cmp	r6, r7
 80164a2:	d900      	bls.n	80164a6 <__ssputs_r+0x72>
 80164a4:	463e      	mov	r6, r7
 80164a6:	6820      	ldr	r0, [r4, #0]
 80164a8:	4632      	mov	r2, r6
 80164aa:	4641      	mov	r1, r8
 80164ac:	f000 f9c6 	bl	801683c <memmove>
 80164b0:	68a3      	ldr	r3, [r4, #8]
 80164b2:	1b9b      	subs	r3, r3, r6
 80164b4:	60a3      	str	r3, [r4, #8]
 80164b6:	6823      	ldr	r3, [r4, #0]
 80164b8:	4433      	add	r3, r6
 80164ba:	6023      	str	r3, [r4, #0]
 80164bc:	2000      	movs	r0, #0
 80164be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164c2:	462a      	mov	r2, r5
 80164c4:	f000 fa16 	bl	80168f4 <_realloc_r>
 80164c8:	4606      	mov	r6, r0
 80164ca:	2800      	cmp	r0, #0
 80164cc:	d1e0      	bne.n	8016490 <__ssputs_r+0x5c>
 80164ce:	6921      	ldr	r1, [r4, #16]
 80164d0:	4650      	mov	r0, sl
 80164d2:	f7fe fea7 	bl	8015224 <_free_r>
 80164d6:	230c      	movs	r3, #12
 80164d8:	f8ca 3000 	str.w	r3, [sl]
 80164dc:	89a3      	ldrh	r3, [r4, #12]
 80164de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164e2:	81a3      	strh	r3, [r4, #12]
 80164e4:	f04f 30ff 	mov.w	r0, #4294967295
 80164e8:	e7e9      	b.n	80164be <__ssputs_r+0x8a>
	...

080164ec <_svfiprintf_r>:
 80164ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164f0:	4698      	mov	r8, r3
 80164f2:	898b      	ldrh	r3, [r1, #12]
 80164f4:	061b      	lsls	r3, r3, #24
 80164f6:	b09d      	sub	sp, #116	@ 0x74
 80164f8:	4607      	mov	r7, r0
 80164fa:	460d      	mov	r5, r1
 80164fc:	4614      	mov	r4, r2
 80164fe:	d510      	bpl.n	8016522 <_svfiprintf_r+0x36>
 8016500:	690b      	ldr	r3, [r1, #16]
 8016502:	b973      	cbnz	r3, 8016522 <_svfiprintf_r+0x36>
 8016504:	2140      	movs	r1, #64	@ 0x40
 8016506:	f7ff fa3b 	bl	8015980 <_malloc_r>
 801650a:	6028      	str	r0, [r5, #0]
 801650c:	6128      	str	r0, [r5, #16]
 801650e:	b930      	cbnz	r0, 801651e <_svfiprintf_r+0x32>
 8016510:	230c      	movs	r3, #12
 8016512:	603b      	str	r3, [r7, #0]
 8016514:	f04f 30ff 	mov.w	r0, #4294967295
 8016518:	b01d      	add	sp, #116	@ 0x74
 801651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651e:	2340      	movs	r3, #64	@ 0x40
 8016520:	616b      	str	r3, [r5, #20]
 8016522:	2300      	movs	r3, #0
 8016524:	9309      	str	r3, [sp, #36]	@ 0x24
 8016526:	2320      	movs	r3, #32
 8016528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801652c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016530:	2330      	movs	r3, #48	@ 0x30
 8016532:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80166d0 <_svfiprintf_r+0x1e4>
 8016536:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801653a:	f04f 0901 	mov.w	r9, #1
 801653e:	4623      	mov	r3, r4
 8016540:	469a      	mov	sl, r3
 8016542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016546:	b10a      	cbz	r2, 801654c <_svfiprintf_r+0x60>
 8016548:	2a25      	cmp	r2, #37	@ 0x25
 801654a:	d1f9      	bne.n	8016540 <_svfiprintf_r+0x54>
 801654c:	ebba 0b04 	subs.w	fp, sl, r4
 8016550:	d00b      	beq.n	801656a <_svfiprintf_r+0x7e>
 8016552:	465b      	mov	r3, fp
 8016554:	4622      	mov	r2, r4
 8016556:	4629      	mov	r1, r5
 8016558:	4638      	mov	r0, r7
 801655a:	f7ff ff6b 	bl	8016434 <__ssputs_r>
 801655e:	3001      	adds	r0, #1
 8016560:	f000 80a7 	beq.w	80166b2 <_svfiprintf_r+0x1c6>
 8016564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016566:	445a      	add	r2, fp
 8016568:	9209      	str	r2, [sp, #36]	@ 0x24
 801656a:	f89a 3000 	ldrb.w	r3, [sl]
 801656e:	2b00      	cmp	r3, #0
 8016570:	f000 809f 	beq.w	80166b2 <_svfiprintf_r+0x1c6>
 8016574:	2300      	movs	r3, #0
 8016576:	f04f 32ff 	mov.w	r2, #4294967295
 801657a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801657e:	f10a 0a01 	add.w	sl, sl, #1
 8016582:	9304      	str	r3, [sp, #16]
 8016584:	9307      	str	r3, [sp, #28]
 8016586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801658a:	931a      	str	r3, [sp, #104]	@ 0x68
 801658c:	4654      	mov	r4, sl
 801658e:	2205      	movs	r2, #5
 8016590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016594:	484e      	ldr	r0, [pc, #312]	@ (80166d0 <_svfiprintf_r+0x1e4>)
 8016596:	f7e9 fecb 	bl	8000330 <memchr>
 801659a:	9a04      	ldr	r2, [sp, #16]
 801659c:	b9d8      	cbnz	r0, 80165d6 <_svfiprintf_r+0xea>
 801659e:	06d0      	lsls	r0, r2, #27
 80165a0:	bf44      	itt	mi
 80165a2:	2320      	movmi	r3, #32
 80165a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165a8:	0711      	lsls	r1, r2, #28
 80165aa:	bf44      	itt	mi
 80165ac:	232b      	movmi	r3, #43	@ 0x2b
 80165ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165b2:	f89a 3000 	ldrb.w	r3, [sl]
 80165b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80165b8:	d015      	beq.n	80165e6 <_svfiprintf_r+0xfa>
 80165ba:	9a07      	ldr	r2, [sp, #28]
 80165bc:	4654      	mov	r4, sl
 80165be:	2000      	movs	r0, #0
 80165c0:	f04f 0c0a 	mov.w	ip, #10
 80165c4:	4621      	mov	r1, r4
 80165c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165ca:	3b30      	subs	r3, #48	@ 0x30
 80165cc:	2b09      	cmp	r3, #9
 80165ce:	d94b      	bls.n	8016668 <_svfiprintf_r+0x17c>
 80165d0:	b1b0      	cbz	r0, 8016600 <_svfiprintf_r+0x114>
 80165d2:	9207      	str	r2, [sp, #28]
 80165d4:	e014      	b.n	8016600 <_svfiprintf_r+0x114>
 80165d6:	eba0 0308 	sub.w	r3, r0, r8
 80165da:	fa09 f303 	lsl.w	r3, r9, r3
 80165de:	4313      	orrs	r3, r2
 80165e0:	9304      	str	r3, [sp, #16]
 80165e2:	46a2      	mov	sl, r4
 80165e4:	e7d2      	b.n	801658c <_svfiprintf_r+0xa0>
 80165e6:	9b03      	ldr	r3, [sp, #12]
 80165e8:	1d19      	adds	r1, r3, #4
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	9103      	str	r1, [sp, #12]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	bfbb      	ittet	lt
 80165f2:	425b      	neglt	r3, r3
 80165f4:	f042 0202 	orrlt.w	r2, r2, #2
 80165f8:	9307      	strge	r3, [sp, #28]
 80165fa:	9307      	strlt	r3, [sp, #28]
 80165fc:	bfb8      	it	lt
 80165fe:	9204      	strlt	r2, [sp, #16]
 8016600:	7823      	ldrb	r3, [r4, #0]
 8016602:	2b2e      	cmp	r3, #46	@ 0x2e
 8016604:	d10a      	bne.n	801661c <_svfiprintf_r+0x130>
 8016606:	7863      	ldrb	r3, [r4, #1]
 8016608:	2b2a      	cmp	r3, #42	@ 0x2a
 801660a:	d132      	bne.n	8016672 <_svfiprintf_r+0x186>
 801660c:	9b03      	ldr	r3, [sp, #12]
 801660e:	1d1a      	adds	r2, r3, #4
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	9203      	str	r2, [sp, #12]
 8016614:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016618:	3402      	adds	r4, #2
 801661a:	9305      	str	r3, [sp, #20]
 801661c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80166e0 <_svfiprintf_r+0x1f4>
 8016620:	7821      	ldrb	r1, [r4, #0]
 8016622:	2203      	movs	r2, #3
 8016624:	4650      	mov	r0, sl
 8016626:	f7e9 fe83 	bl	8000330 <memchr>
 801662a:	b138      	cbz	r0, 801663c <_svfiprintf_r+0x150>
 801662c:	9b04      	ldr	r3, [sp, #16]
 801662e:	eba0 000a 	sub.w	r0, r0, sl
 8016632:	2240      	movs	r2, #64	@ 0x40
 8016634:	4082      	lsls	r2, r0
 8016636:	4313      	orrs	r3, r2
 8016638:	3401      	adds	r4, #1
 801663a:	9304      	str	r3, [sp, #16]
 801663c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016640:	4824      	ldr	r0, [pc, #144]	@ (80166d4 <_svfiprintf_r+0x1e8>)
 8016642:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016646:	2206      	movs	r2, #6
 8016648:	f7e9 fe72 	bl	8000330 <memchr>
 801664c:	2800      	cmp	r0, #0
 801664e:	d036      	beq.n	80166be <_svfiprintf_r+0x1d2>
 8016650:	4b21      	ldr	r3, [pc, #132]	@ (80166d8 <_svfiprintf_r+0x1ec>)
 8016652:	bb1b      	cbnz	r3, 801669c <_svfiprintf_r+0x1b0>
 8016654:	9b03      	ldr	r3, [sp, #12]
 8016656:	3307      	adds	r3, #7
 8016658:	f023 0307 	bic.w	r3, r3, #7
 801665c:	3308      	adds	r3, #8
 801665e:	9303      	str	r3, [sp, #12]
 8016660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016662:	4433      	add	r3, r6
 8016664:	9309      	str	r3, [sp, #36]	@ 0x24
 8016666:	e76a      	b.n	801653e <_svfiprintf_r+0x52>
 8016668:	fb0c 3202 	mla	r2, ip, r2, r3
 801666c:	460c      	mov	r4, r1
 801666e:	2001      	movs	r0, #1
 8016670:	e7a8      	b.n	80165c4 <_svfiprintf_r+0xd8>
 8016672:	2300      	movs	r3, #0
 8016674:	3401      	adds	r4, #1
 8016676:	9305      	str	r3, [sp, #20]
 8016678:	4619      	mov	r1, r3
 801667a:	f04f 0c0a 	mov.w	ip, #10
 801667e:	4620      	mov	r0, r4
 8016680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016684:	3a30      	subs	r2, #48	@ 0x30
 8016686:	2a09      	cmp	r2, #9
 8016688:	d903      	bls.n	8016692 <_svfiprintf_r+0x1a6>
 801668a:	2b00      	cmp	r3, #0
 801668c:	d0c6      	beq.n	801661c <_svfiprintf_r+0x130>
 801668e:	9105      	str	r1, [sp, #20]
 8016690:	e7c4      	b.n	801661c <_svfiprintf_r+0x130>
 8016692:	fb0c 2101 	mla	r1, ip, r1, r2
 8016696:	4604      	mov	r4, r0
 8016698:	2301      	movs	r3, #1
 801669a:	e7f0      	b.n	801667e <_svfiprintf_r+0x192>
 801669c:	ab03      	add	r3, sp, #12
 801669e:	9300      	str	r3, [sp, #0]
 80166a0:	462a      	mov	r2, r5
 80166a2:	4b0e      	ldr	r3, [pc, #56]	@ (80166dc <_svfiprintf_r+0x1f0>)
 80166a4:	a904      	add	r1, sp, #16
 80166a6:	4638      	mov	r0, r7
 80166a8:	f7fd fa5a 	bl	8013b60 <_printf_float>
 80166ac:	1c42      	adds	r2, r0, #1
 80166ae:	4606      	mov	r6, r0
 80166b0:	d1d6      	bne.n	8016660 <_svfiprintf_r+0x174>
 80166b2:	89ab      	ldrh	r3, [r5, #12]
 80166b4:	065b      	lsls	r3, r3, #25
 80166b6:	f53f af2d 	bmi.w	8016514 <_svfiprintf_r+0x28>
 80166ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80166bc:	e72c      	b.n	8016518 <_svfiprintf_r+0x2c>
 80166be:	ab03      	add	r3, sp, #12
 80166c0:	9300      	str	r3, [sp, #0]
 80166c2:	462a      	mov	r2, r5
 80166c4:	4b05      	ldr	r3, [pc, #20]	@ (80166dc <_svfiprintf_r+0x1f0>)
 80166c6:	a904      	add	r1, sp, #16
 80166c8:	4638      	mov	r0, r7
 80166ca:	f7fd fcd1 	bl	8014070 <_printf_i>
 80166ce:	e7ed      	b.n	80166ac <_svfiprintf_r+0x1c0>
 80166d0:	08017598 	.word	0x08017598
 80166d4:	080175a2 	.word	0x080175a2
 80166d8:	08013b61 	.word	0x08013b61
 80166dc:	08016435 	.word	0x08016435
 80166e0:	0801759e 	.word	0x0801759e

080166e4 <__sflush_r>:
 80166e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80166e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ec:	0716      	lsls	r6, r2, #28
 80166ee:	4605      	mov	r5, r0
 80166f0:	460c      	mov	r4, r1
 80166f2:	d454      	bmi.n	801679e <__sflush_r+0xba>
 80166f4:	684b      	ldr	r3, [r1, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	dc02      	bgt.n	8016700 <__sflush_r+0x1c>
 80166fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	dd48      	ble.n	8016792 <__sflush_r+0xae>
 8016700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016702:	2e00      	cmp	r6, #0
 8016704:	d045      	beq.n	8016792 <__sflush_r+0xae>
 8016706:	2300      	movs	r3, #0
 8016708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801670c:	682f      	ldr	r7, [r5, #0]
 801670e:	6a21      	ldr	r1, [r4, #32]
 8016710:	602b      	str	r3, [r5, #0]
 8016712:	d030      	beq.n	8016776 <__sflush_r+0x92>
 8016714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016716:	89a3      	ldrh	r3, [r4, #12]
 8016718:	0759      	lsls	r1, r3, #29
 801671a:	d505      	bpl.n	8016728 <__sflush_r+0x44>
 801671c:	6863      	ldr	r3, [r4, #4]
 801671e:	1ad2      	subs	r2, r2, r3
 8016720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016722:	b10b      	cbz	r3, 8016728 <__sflush_r+0x44>
 8016724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016726:	1ad2      	subs	r2, r2, r3
 8016728:	2300      	movs	r3, #0
 801672a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801672c:	6a21      	ldr	r1, [r4, #32]
 801672e:	4628      	mov	r0, r5
 8016730:	47b0      	blx	r6
 8016732:	1c43      	adds	r3, r0, #1
 8016734:	89a3      	ldrh	r3, [r4, #12]
 8016736:	d106      	bne.n	8016746 <__sflush_r+0x62>
 8016738:	6829      	ldr	r1, [r5, #0]
 801673a:	291d      	cmp	r1, #29
 801673c:	d82b      	bhi.n	8016796 <__sflush_r+0xb2>
 801673e:	4a2a      	ldr	r2, [pc, #168]	@ (80167e8 <__sflush_r+0x104>)
 8016740:	410a      	asrs	r2, r1
 8016742:	07d6      	lsls	r6, r2, #31
 8016744:	d427      	bmi.n	8016796 <__sflush_r+0xb2>
 8016746:	2200      	movs	r2, #0
 8016748:	6062      	str	r2, [r4, #4]
 801674a:	04d9      	lsls	r1, r3, #19
 801674c:	6922      	ldr	r2, [r4, #16]
 801674e:	6022      	str	r2, [r4, #0]
 8016750:	d504      	bpl.n	801675c <__sflush_r+0x78>
 8016752:	1c42      	adds	r2, r0, #1
 8016754:	d101      	bne.n	801675a <__sflush_r+0x76>
 8016756:	682b      	ldr	r3, [r5, #0]
 8016758:	b903      	cbnz	r3, 801675c <__sflush_r+0x78>
 801675a:	6560      	str	r0, [r4, #84]	@ 0x54
 801675c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801675e:	602f      	str	r7, [r5, #0]
 8016760:	b1b9      	cbz	r1, 8016792 <__sflush_r+0xae>
 8016762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016766:	4299      	cmp	r1, r3
 8016768:	d002      	beq.n	8016770 <__sflush_r+0x8c>
 801676a:	4628      	mov	r0, r5
 801676c:	f7fe fd5a 	bl	8015224 <_free_r>
 8016770:	2300      	movs	r3, #0
 8016772:	6363      	str	r3, [r4, #52]	@ 0x34
 8016774:	e00d      	b.n	8016792 <__sflush_r+0xae>
 8016776:	2301      	movs	r3, #1
 8016778:	4628      	mov	r0, r5
 801677a:	47b0      	blx	r6
 801677c:	4602      	mov	r2, r0
 801677e:	1c50      	adds	r0, r2, #1
 8016780:	d1c9      	bne.n	8016716 <__sflush_r+0x32>
 8016782:	682b      	ldr	r3, [r5, #0]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d0c6      	beq.n	8016716 <__sflush_r+0x32>
 8016788:	2b1d      	cmp	r3, #29
 801678a:	d001      	beq.n	8016790 <__sflush_r+0xac>
 801678c:	2b16      	cmp	r3, #22
 801678e:	d11e      	bne.n	80167ce <__sflush_r+0xea>
 8016790:	602f      	str	r7, [r5, #0]
 8016792:	2000      	movs	r0, #0
 8016794:	e022      	b.n	80167dc <__sflush_r+0xf8>
 8016796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801679a:	b21b      	sxth	r3, r3
 801679c:	e01b      	b.n	80167d6 <__sflush_r+0xf2>
 801679e:	690f      	ldr	r7, [r1, #16]
 80167a0:	2f00      	cmp	r7, #0
 80167a2:	d0f6      	beq.n	8016792 <__sflush_r+0xae>
 80167a4:	0793      	lsls	r3, r2, #30
 80167a6:	680e      	ldr	r6, [r1, #0]
 80167a8:	bf08      	it	eq
 80167aa:	694b      	ldreq	r3, [r1, #20]
 80167ac:	600f      	str	r7, [r1, #0]
 80167ae:	bf18      	it	ne
 80167b0:	2300      	movne	r3, #0
 80167b2:	eba6 0807 	sub.w	r8, r6, r7
 80167b6:	608b      	str	r3, [r1, #8]
 80167b8:	f1b8 0f00 	cmp.w	r8, #0
 80167bc:	dde9      	ble.n	8016792 <__sflush_r+0xae>
 80167be:	6a21      	ldr	r1, [r4, #32]
 80167c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80167c2:	4643      	mov	r3, r8
 80167c4:	463a      	mov	r2, r7
 80167c6:	4628      	mov	r0, r5
 80167c8:	47b0      	blx	r6
 80167ca:	2800      	cmp	r0, #0
 80167cc:	dc08      	bgt.n	80167e0 <__sflush_r+0xfc>
 80167ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167d6:	81a3      	strh	r3, [r4, #12]
 80167d8:	f04f 30ff 	mov.w	r0, #4294967295
 80167dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e0:	4407      	add	r7, r0
 80167e2:	eba8 0800 	sub.w	r8, r8, r0
 80167e6:	e7e7      	b.n	80167b8 <__sflush_r+0xd4>
 80167e8:	dfbffffe 	.word	0xdfbffffe

080167ec <_fflush_r>:
 80167ec:	b538      	push	{r3, r4, r5, lr}
 80167ee:	690b      	ldr	r3, [r1, #16]
 80167f0:	4605      	mov	r5, r0
 80167f2:	460c      	mov	r4, r1
 80167f4:	b913      	cbnz	r3, 80167fc <_fflush_r+0x10>
 80167f6:	2500      	movs	r5, #0
 80167f8:	4628      	mov	r0, r5
 80167fa:	bd38      	pop	{r3, r4, r5, pc}
 80167fc:	b118      	cbz	r0, 8016806 <_fflush_r+0x1a>
 80167fe:	6a03      	ldr	r3, [r0, #32]
 8016800:	b90b      	cbnz	r3, 8016806 <_fflush_r+0x1a>
 8016802:	f7fd fde1 	bl	80143c8 <__sinit>
 8016806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d0f3      	beq.n	80167f6 <_fflush_r+0xa>
 801680e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016810:	07d0      	lsls	r0, r2, #31
 8016812:	d404      	bmi.n	801681e <_fflush_r+0x32>
 8016814:	0599      	lsls	r1, r3, #22
 8016816:	d402      	bmi.n	801681e <_fflush_r+0x32>
 8016818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801681a:	f7fd ff0a 	bl	8014632 <__retarget_lock_acquire_recursive>
 801681e:	4628      	mov	r0, r5
 8016820:	4621      	mov	r1, r4
 8016822:	f7ff ff5f 	bl	80166e4 <__sflush_r>
 8016826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016828:	07da      	lsls	r2, r3, #31
 801682a:	4605      	mov	r5, r0
 801682c:	d4e4      	bmi.n	80167f8 <_fflush_r+0xc>
 801682e:	89a3      	ldrh	r3, [r4, #12]
 8016830:	059b      	lsls	r3, r3, #22
 8016832:	d4e1      	bmi.n	80167f8 <_fflush_r+0xc>
 8016834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016836:	f7fd fefd 	bl	8014634 <__retarget_lock_release_recursive>
 801683a:	e7dd      	b.n	80167f8 <_fflush_r+0xc>

0801683c <memmove>:
 801683c:	4288      	cmp	r0, r1
 801683e:	b510      	push	{r4, lr}
 8016840:	eb01 0402 	add.w	r4, r1, r2
 8016844:	d902      	bls.n	801684c <memmove+0x10>
 8016846:	4284      	cmp	r4, r0
 8016848:	4623      	mov	r3, r4
 801684a:	d807      	bhi.n	801685c <memmove+0x20>
 801684c:	1e43      	subs	r3, r0, #1
 801684e:	42a1      	cmp	r1, r4
 8016850:	d008      	beq.n	8016864 <memmove+0x28>
 8016852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016856:	f803 2f01 	strb.w	r2, [r3, #1]!
 801685a:	e7f8      	b.n	801684e <memmove+0x12>
 801685c:	4402      	add	r2, r0
 801685e:	4601      	mov	r1, r0
 8016860:	428a      	cmp	r2, r1
 8016862:	d100      	bne.n	8016866 <memmove+0x2a>
 8016864:	bd10      	pop	{r4, pc}
 8016866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801686a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801686e:	e7f7      	b.n	8016860 <memmove+0x24>

08016870 <_sbrk_r>:
 8016870:	b538      	push	{r3, r4, r5, lr}
 8016872:	4d06      	ldr	r5, [pc, #24]	@ (801688c <_sbrk_r+0x1c>)
 8016874:	2300      	movs	r3, #0
 8016876:	4604      	mov	r4, r0
 8016878:	4608      	mov	r0, r1
 801687a:	602b      	str	r3, [r5, #0]
 801687c:	f7eb fcf6 	bl	800226c <_sbrk>
 8016880:	1c43      	adds	r3, r0, #1
 8016882:	d102      	bne.n	801688a <_sbrk_r+0x1a>
 8016884:	682b      	ldr	r3, [r5, #0]
 8016886:	b103      	cbz	r3, 801688a <_sbrk_r+0x1a>
 8016888:	6023      	str	r3, [r4, #0]
 801688a:	bd38      	pop	{r3, r4, r5, pc}
 801688c:	24004ba8 	.word	0x24004ba8

08016890 <__assert_func>:
 8016890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016892:	4614      	mov	r4, r2
 8016894:	461a      	mov	r2, r3
 8016896:	4b09      	ldr	r3, [pc, #36]	@ (80168bc <__assert_func+0x2c>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	4605      	mov	r5, r0
 801689c:	68d8      	ldr	r0, [r3, #12]
 801689e:	b954      	cbnz	r4, 80168b6 <__assert_func+0x26>
 80168a0:	4b07      	ldr	r3, [pc, #28]	@ (80168c0 <__assert_func+0x30>)
 80168a2:	461c      	mov	r4, r3
 80168a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80168a8:	9100      	str	r1, [sp, #0]
 80168aa:	462b      	mov	r3, r5
 80168ac:	4905      	ldr	r1, [pc, #20]	@ (80168c4 <__assert_func+0x34>)
 80168ae:	f000 f84f 	bl	8016950 <fiprintf>
 80168b2:	f000 f85f 	bl	8016974 <abort>
 80168b6:	4b04      	ldr	r3, [pc, #16]	@ (80168c8 <__assert_func+0x38>)
 80168b8:	e7f4      	b.n	80168a4 <__assert_func+0x14>
 80168ba:	bf00      	nop
 80168bc:	2400027c 	.word	0x2400027c
 80168c0:	080175e4 	.word	0x080175e4
 80168c4:	080175b6 	.word	0x080175b6
 80168c8:	080175a9 	.word	0x080175a9

080168cc <_calloc_r>:
 80168cc:	b570      	push	{r4, r5, r6, lr}
 80168ce:	fba1 5402 	umull	r5, r4, r1, r2
 80168d2:	b93c      	cbnz	r4, 80168e4 <_calloc_r+0x18>
 80168d4:	4629      	mov	r1, r5
 80168d6:	f7ff f853 	bl	8015980 <_malloc_r>
 80168da:	4606      	mov	r6, r0
 80168dc:	b928      	cbnz	r0, 80168ea <_calloc_r+0x1e>
 80168de:	2600      	movs	r6, #0
 80168e0:	4630      	mov	r0, r6
 80168e2:	bd70      	pop	{r4, r5, r6, pc}
 80168e4:	220c      	movs	r2, #12
 80168e6:	6002      	str	r2, [r0, #0]
 80168e8:	e7f9      	b.n	80168de <_calloc_r+0x12>
 80168ea:	462a      	mov	r2, r5
 80168ec:	4621      	mov	r1, r4
 80168ee:	f7fd fe04 	bl	80144fa <memset>
 80168f2:	e7f5      	b.n	80168e0 <_calloc_r+0x14>

080168f4 <_realloc_r>:
 80168f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f8:	4680      	mov	r8, r0
 80168fa:	4615      	mov	r5, r2
 80168fc:	460c      	mov	r4, r1
 80168fe:	b921      	cbnz	r1, 801690a <_realloc_r+0x16>
 8016900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016904:	4611      	mov	r1, r2
 8016906:	f7ff b83b 	b.w	8015980 <_malloc_r>
 801690a:	b92a      	cbnz	r2, 8016918 <_realloc_r+0x24>
 801690c:	f7fe fc8a 	bl	8015224 <_free_r>
 8016910:	2400      	movs	r4, #0
 8016912:	4620      	mov	r0, r4
 8016914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016918:	f000 f833 	bl	8016982 <_malloc_usable_size_r>
 801691c:	4285      	cmp	r5, r0
 801691e:	4606      	mov	r6, r0
 8016920:	d802      	bhi.n	8016928 <_realloc_r+0x34>
 8016922:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016926:	d8f4      	bhi.n	8016912 <_realloc_r+0x1e>
 8016928:	4629      	mov	r1, r5
 801692a:	4640      	mov	r0, r8
 801692c:	f7ff f828 	bl	8015980 <_malloc_r>
 8016930:	4607      	mov	r7, r0
 8016932:	2800      	cmp	r0, #0
 8016934:	d0ec      	beq.n	8016910 <_realloc_r+0x1c>
 8016936:	42b5      	cmp	r5, r6
 8016938:	462a      	mov	r2, r5
 801693a:	4621      	mov	r1, r4
 801693c:	bf28      	it	cs
 801693e:	4632      	movcs	r2, r6
 8016940:	f7fd fe79 	bl	8014636 <memcpy>
 8016944:	4621      	mov	r1, r4
 8016946:	4640      	mov	r0, r8
 8016948:	f7fe fc6c 	bl	8015224 <_free_r>
 801694c:	463c      	mov	r4, r7
 801694e:	e7e0      	b.n	8016912 <_realloc_r+0x1e>

08016950 <fiprintf>:
 8016950:	b40e      	push	{r1, r2, r3}
 8016952:	b503      	push	{r0, r1, lr}
 8016954:	4601      	mov	r1, r0
 8016956:	ab03      	add	r3, sp, #12
 8016958:	4805      	ldr	r0, [pc, #20]	@ (8016970 <fiprintf+0x20>)
 801695a:	f853 2b04 	ldr.w	r2, [r3], #4
 801695e:	6800      	ldr	r0, [r0, #0]
 8016960:	9301      	str	r3, [sp, #4]
 8016962:	f000 f83f 	bl	80169e4 <_vfiprintf_r>
 8016966:	b002      	add	sp, #8
 8016968:	f85d eb04 	ldr.w	lr, [sp], #4
 801696c:	b003      	add	sp, #12
 801696e:	4770      	bx	lr
 8016970:	2400027c 	.word	0x2400027c

08016974 <abort>:
 8016974:	b508      	push	{r3, lr}
 8016976:	2006      	movs	r0, #6
 8016978:	f000 fa08 	bl	8016d8c <raise>
 801697c:	2001      	movs	r0, #1
 801697e:	f7eb fbfd 	bl	800217c <_exit>

08016982 <_malloc_usable_size_r>:
 8016982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016986:	1f18      	subs	r0, r3, #4
 8016988:	2b00      	cmp	r3, #0
 801698a:	bfbc      	itt	lt
 801698c:	580b      	ldrlt	r3, [r1, r0]
 801698e:	18c0      	addlt	r0, r0, r3
 8016990:	4770      	bx	lr

08016992 <__sfputc_r>:
 8016992:	6893      	ldr	r3, [r2, #8]
 8016994:	3b01      	subs	r3, #1
 8016996:	2b00      	cmp	r3, #0
 8016998:	b410      	push	{r4}
 801699a:	6093      	str	r3, [r2, #8]
 801699c:	da08      	bge.n	80169b0 <__sfputc_r+0x1e>
 801699e:	6994      	ldr	r4, [r2, #24]
 80169a0:	42a3      	cmp	r3, r4
 80169a2:	db01      	blt.n	80169a8 <__sfputc_r+0x16>
 80169a4:	290a      	cmp	r1, #10
 80169a6:	d103      	bne.n	80169b0 <__sfputc_r+0x1e>
 80169a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ac:	f000 b932 	b.w	8016c14 <__swbuf_r>
 80169b0:	6813      	ldr	r3, [r2, #0]
 80169b2:	1c58      	adds	r0, r3, #1
 80169b4:	6010      	str	r0, [r2, #0]
 80169b6:	7019      	strb	r1, [r3, #0]
 80169b8:	4608      	mov	r0, r1
 80169ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169be:	4770      	bx	lr

080169c0 <__sfputs_r>:
 80169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c2:	4606      	mov	r6, r0
 80169c4:	460f      	mov	r7, r1
 80169c6:	4614      	mov	r4, r2
 80169c8:	18d5      	adds	r5, r2, r3
 80169ca:	42ac      	cmp	r4, r5
 80169cc:	d101      	bne.n	80169d2 <__sfputs_r+0x12>
 80169ce:	2000      	movs	r0, #0
 80169d0:	e007      	b.n	80169e2 <__sfputs_r+0x22>
 80169d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169d6:	463a      	mov	r2, r7
 80169d8:	4630      	mov	r0, r6
 80169da:	f7ff ffda 	bl	8016992 <__sfputc_r>
 80169de:	1c43      	adds	r3, r0, #1
 80169e0:	d1f3      	bne.n	80169ca <__sfputs_r+0xa>
 80169e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080169e4 <_vfiprintf_r>:
 80169e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e8:	460d      	mov	r5, r1
 80169ea:	b09d      	sub	sp, #116	@ 0x74
 80169ec:	4614      	mov	r4, r2
 80169ee:	4698      	mov	r8, r3
 80169f0:	4606      	mov	r6, r0
 80169f2:	b118      	cbz	r0, 80169fc <_vfiprintf_r+0x18>
 80169f4:	6a03      	ldr	r3, [r0, #32]
 80169f6:	b90b      	cbnz	r3, 80169fc <_vfiprintf_r+0x18>
 80169f8:	f7fd fce6 	bl	80143c8 <__sinit>
 80169fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80169fe:	07d9      	lsls	r1, r3, #31
 8016a00:	d405      	bmi.n	8016a0e <_vfiprintf_r+0x2a>
 8016a02:	89ab      	ldrh	r3, [r5, #12]
 8016a04:	059a      	lsls	r2, r3, #22
 8016a06:	d402      	bmi.n	8016a0e <_vfiprintf_r+0x2a>
 8016a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a0a:	f7fd fe12 	bl	8014632 <__retarget_lock_acquire_recursive>
 8016a0e:	89ab      	ldrh	r3, [r5, #12]
 8016a10:	071b      	lsls	r3, r3, #28
 8016a12:	d501      	bpl.n	8016a18 <_vfiprintf_r+0x34>
 8016a14:	692b      	ldr	r3, [r5, #16]
 8016a16:	b99b      	cbnz	r3, 8016a40 <_vfiprintf_r+0x5c>
 8016a18:	4629      	mov	r1, r5
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	f000 f938 	bl	8016c90 <__swsetup_r>
 8016a20:	b170      	cbz	r0, 8016a40 <_vfiprintf_r+0x5c>
 8016a22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a24:	07dc      	lsls	r4, r3, #31
 8016a26:	d504      	bpl.n	8016a32 <_vfiprintf_r+0x4e>
 8016a28:	f04f 30ff 	mov.w	r0, #4294967295
 8016a2c:	b01d      	add	sp, #116	@ 0x74
 8016a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a32:	89ab      	ldrh	r3, [r5, #12]
 8016a34:	0598      	lsls	r0, r3, #22
 8016a36:	d4f7      	bmi.n	8016a28 <_vfiprintf_r+0x44>
 8016a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a3a:	f7fd fdfb 	bl	8014634 <__retarget_lock_release_recursive>
 8016a3e:	e7f3      	b.n	8016a28 <_vfiprintf_r+0x44>
 8016a40:	2300      	movs	r3, #0
 8016a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a44:	2320      	movs	r3, #32
 8016a46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a4e:	2330      	movs	r3, #48	@ 0x30
 8016a50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016c00 <_vfiprintf_r+0x21c>
 8016a54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016a58:	f04f 0901 	mov.w	r9, #1
 8016a5c:	4623      	mov	r3, r4
 8016a5e:	469a      	mov	sl, r3
 8016a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a64:	b10a      	cbz	r2, 8016a6a <_vfiprintf_r+0x86>
 8016a66:	2a25      	cmp	r2, #37	@ 0x25
 8016a68:	d1f9      	bne.n	8016a5e <_vfiprintf_r+0x7a>
 8016a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8016a6e:	d00b      	beq.n	8016a88 <_vfiprintf_r+0xa4>
 8016a70:	465b      	mov	r3, fp
 8016a72:	4622      	mov	r2, r4
 8016a74:	4629      	mov	r1, r5
 8016a76:	4630      	mov	r0, r6
 8016a78:	f7ff ffa2 	bl	80169c0 <__sfputs_r>
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	f000 80a7 	beq.w	8016bd0 <_vfiprintf_r+0x1ec>
 8016a82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a84:	445a      	add	r2, fp
 8016a86:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a88:	f89a 3000 	ldrb.w	r3, [sl]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f000 809f 	beq.w	8016bd0 <_vfiprintf_r+0x1ec>
 8016a92:	2300      	movs	r3, #0
 8016a94:	f04f 32ff 	mov.w	r2, #4294967295
 8016a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a9c:	f10a 0a01 	add.w	sl, sl, #1
 8016aa0:	9304      	str	r3, [sp, #16]
 8016aa2:	9307      	str	r3, [sp, #28]
 8016aa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016aa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8016aaa:	4654      	mov	r4, sl
 8016aac:	2205      	movs	r2, #5
 8016aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ab2:	4853      	ldr	r0, [pc, #332]	@ (8016c00 <_vfiprintf_r+0x21c>)
 8016ab4:	f7e9 fc3c 	bl	8000330 <memchr>
 8016ab8:	9a04      	ldr	r2, [sp, #16]
 8016aba:	b9d8      	cbnz	r0, 8016af4 <_vfiprintf_r+0x110>
 8016abc:	06d1      	lsls	r1, r2, #27
 8016abe:	bf44      	itt	mi
 8016ac0:	2320      	movmi	r3, #32
 8016ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ac6:	0713      	lsls	r3, r2, #28
 8016ac8:	bf44      	itt	mi
 8016aca:	232b      	movmi	r3, #43	@ 0x2b
 8016acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad4:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ad6:	d015      	beq.n	8016b04 <_vfiprintf_r+0x120>
 8016ad8:	9a07      	ldr	r2, [sp, #28]
 8016ada:	4654      	mov	r4, sl
 8016adc:	2000      	movs	r0, #0
 8016ade:	f04f 0c0a 	mov.w	ip, #10
 8016ae2:	4621      	mov	r1, r4
 8016ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae8:	3b30      	subs	r3, #48	@ 0x30
 8016aea:	2b09      	cmp	r3, #9
 8016aec:	d94b      	bls.n	8016b86 <_vfiprintf_r+0x1a2>
 8016aee:	b1b0      	cbz	r0, 8016b1e <_vfiprintf_r+0x13a>
 8016af0:	9207      	str	r2, [sp, #28]
 8016af2:	e014      	b.n	8016b1e <_vfiprintf_r+0x13a>
 8016af4:	eba0 0308 	sub.w	r3, r0, r8
 8016af8:	fa09 f303 	lsl.w	r3, r9, r3
 8016afc:	4313      	orrs	r3, r2
 8016afe:	9304      	str	r3, [sp, #16]
 8016b00:	46a2      	mov	sl, r4
 8016b02:	e7d2      	b.n	8016aaa <_vfiprintf_r+0xc6>
 8016b04:	9b03      	ldr	r3, [sp, #12]
 8016b06:	1d19      	adds	r1, r3, #4
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	9103      	str	r1, [sp, #12]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	bfbb      	ittet	lt
 8016b10:	425b      	neglt	r3, r3
 8016b12:	f042 0202 	orrlt.w	r2, r2, #2
 8016b16:	9307      	strge	r3, [sp, #28]
 8016b18:	9307      	strlt	r3, [sp, #28]
 8016b1a:	bfb8      	it	lt
 8016b1c:	9204      	strlt	r2, [sp, #16]
 8016b1e:	7823      	ldrb	r3, [r4, #0]
 8016b20:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b22:	d10a      	bne.n	8016b3a <_vfiprintf_r+0x156>
 8016b24:	7863      	ldrb	r3, [r4, #1]
 8016b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b28:	d132      	bne.n	8016b90 <_vfiprintf_r+0x1ac>
 8016b2a:	9b03      	ldr	r3, [sp, #12]
 8016b2c:	1d1a      	adds	r2, r3, #4
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	9203      	str	r2, [sp, #12]
 8016b32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016b36:	3402      	adds	r4, #2
 8016b38:	9305      	str	r3, [sp, #20]
 8016b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016c10 <_vfiprintf_r+0x22c>
 8016b3e:	7821      	ldrb	r1, [r4, #0]
 8016b40:	2203      	movs	r2, #3
 8016b42:	4650      	mov	r0, sl
 8016b44:	f7e9 fbf4 	bl	8000330 <memchr>
 8016b48:	b138      	cbz	r0, 8016b5a <_vfiprintf_r+0x176>
 8016b4a:	9b04      	ldr	r3, [sp, #16]
 8016b4c:	eba0 000a 	sub.w	r0, r0, sl
 8016b50:	2240      	movs	r2, #64	@ 0x40
 8016b52:	4082      	lsls	r2, r0
 8016b54:	4313      	orrs	r3, r2
 8016b56:	3401      	adds	r4, #1
 8016b58:	9304      	str	r3, [sp, #16]
 8016b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b5e:	4829      	ldr	r0, [pc, #164]	@ (8016c04 <_vfiprintf_r+0x220>)
 8016b60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016b64:	2206      	movs	r2, #6
 8016b66:	f7e9 fbe3 	bl	8000330 <memchr>
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	d03f      	beq.n	8016bee <_vfiprintf_r+0x20a>
 8016b6e:	4b26      	ldr	r3, [pc, #152]	@ (8016c08 <_vfiprintf_r+0x224>)
 8016b70:	bb1b      	cbnz	r3, 8016bba <_vfiprintf_r+0x1d6>
 8016b72:	9b03      	ldr	r3, [sp, #12]
 8016b74:	3307      	adds	r3, #7
 8016b76:	f023 0307 	bic.w	r3, r3, #7
 8016b7a:	3308      	adds	r3, #8
 8016b7c:	9303      	str	r3, [sp, #12]
 8016b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b80:	443b      	add	r3, r7
 8016b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b84:	e76a      	b.n	8016a5c <_vfiprintf_r+0x78>
 8016b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b8a:	460c      	mov	r4, r1
 8016b8c:	2001      	movs	r0, #1
 8016b8e:	e7a8      	b.n	8016ae2 <_vfiprintf_r+0xfe>
 8016b90:	2300      	movs	r3, #0
 8016b92:	3401      	adds	r4, #1
 8016b94:	9305      	str	r3, [sp, #20]
 8016b96:	4619      	mov	r1, r3
 8016b98:	f04f 0c0a 	mov.w	ip, #10
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba2:	3a30      	subs	r2, #48	@ 0x30
 8016ba4:	2a09      	cmp	r2, #9
 8016ba6:	d903      	bls.n	8016bb0 <_vfiprintf_r+0x1cc>
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d0c6      	beq.n	8016b3a <_vfiprintf_r+0x156>
 8016bac:	9105      	str	r1, [sp, #20]
 8016bae:	e7c4      	b.n	8016b3a <_vfiprintf_r+0x156>
 8016bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	e7f0      	b.n	8016b9c <_vfiprintf_r+0x1b8>
 8016bba:	ab03      	add	r3, sp, #12
 8016bbc:	9300      	str	r3, [sp, #0]
 8016bbe:	462a      	mov	r2, r5
 8016bc0:	4b12      	ldr	r3, [pc, #72]	@ (8016c0c <_vfiprintf_r+0x228>)
 8016bc2:	a904      	add	r1, sp, #16
 8016bc4:	4630      	mov	r0, r6
 8016bc6:	f7fc ffcb 	bl	8013b60 <_printf_float>
 8016bca:	4607      	mov	r7, r0
 8016bcc:	1c78      	adds	r0, r7, #1
 8016bce:	d1d6      	bne.n	8016b7e <_vfiprintf_r+0x19a>
 8016bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016bd2:	07d9      	lsls	r1, r3, #31
 8016bd4:	d405      	bmi.n	8016be2 <_vfiprintf_r+0x1fe>
 8016bd6:	89ab      	ldrh	r3, [r5, #12]
 8016bd8:	059a      	lsls	r2, r3, #22
 8016bda:	d402      	bmi.n	8016be2 <_vfiprintf_r+0x1fe>
 8016bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016bde:	f7fd fd29 	bl	8014634 <__retarget_lock_release_recursive>
 8016be2:	89ab      	ldrh	r3, [r5, #12]
 8016be4:	065b      	lsls	r3, r3, #25
 8016be6:	f53f af1f 	bmi.w	8016a28 <_vfiprintf_r+0x44>
 8016bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016bec:	e71e      	b.n	8016a2c <_vfiprintf_r+0x48>
 8016bee:	ab03      	add	r3, sp, #12
 8016bf0:	9300      	str	r3, [sp, #0]
 8016bf2:	462a      	mov	r2, r5
 8016bf4:	4b05      	ldr	r3, [pc, #20]	@ (8016c0c <_vfiprintf_r+0x228>)
 8016bf6:	a904      	add	r1, sp, #16
 8016bf8:	4630      	mov	r0, r6
 8016bfa:	f7fd fa39 	bl	8014070 <_printf_i>
 8016bfe:	e7e4      	b.n	8016bca <_vfiprintf_r+0x1e6>
 8016c00:	08017598 	.word	0x08017598
 8016c04:	080175a2 	.word	0x080175a2
 8016c08:	08013b61 	.word	0x08013b61
 8016c0c:	080169c1 	.word	0x080169c1
 8016c10:	0801759e 	.word	0x0801759e

08016c14 <__swbuf_r>:
 8016c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c16:	460e      	mov	r6, r1
 8016c18:	4614      	mov	r4, r2
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	b118      	cbz	r0, 8016c26 <__swbuf_r+0x12>
 8016c1e:	6a03      	ldr	r3, [r0, #32]
 8016c20:	b90b      	cbnz	r3, 8016c26 <__swbuf_r+0x12>
 8016c22:	f7fd fbd1 	bl	80143c8 <__sinit>
 8016c26:	69a3      	ldr	r3, [r4, #24]
 8016c28:	60a3      	str	r3, [r4, #8]
 8016c2a:	89a3      	ldrh	r3, [r4, #12]
 8016c2c:	071a      	lsls	r2, r3, #28
 8016c2e:	d501      	bpl.n	8016c34 <__swbuf_r+0x20>
 8016c30:	6923      	ldr	r3, [r4, #16]
 8016c32:	b943      	cbnz	r3, 8016c46 <__swbuf_r+0x32>
 8016c34:	4621      	mov	r1, r4
 8016c36:	4628      	mov	r0, r5
 8016c38:	f000 f82a 	bl	8016c90 <__swsetup_r>
 8016c3c:	b118      	cbz	r0, 8016c46 <__swbuf_r+0x32>
 8016c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8016c42:	4638      	mov	r0, r7
 8016c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	6922      	ldr	r2, [r4, #16]
 8016c4a:	1a98      	subs	r0, r3, r2
 8016c4c:	6963      	ldr	r3, [r4, #20]
 8016c4e:	b2f6      	uxtb	r6, r6
 8016c50:	4283      	cmp	r3, r0
 8016c52:	4637      	mov	r7, r6
 8016c54:	dc05      	bgt.n	8016c62 <__swbuf_r+0x4e>
 8016c56:	4621      	mov	r1, r4
 8016c58:	4628      	mov	r0, r5
 8016c5a:	f7ff fdc7 	bl	80167ec <_fflush_r>
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	d1ed      	bne.n	8016c3e <__swbuf_r+0x2a>
 8016c62:	68a3      	ldr	r3, [r4, #8]
 8016c64:	3b01      	subs	r3, #1
 8016c66:	60a3      	str	r3, [r4, #8]
 8016c68:	6823      	ldr	r3, [r4, #0]
 8016c6a:	1c5a      	adds	r2, r3, #1
 8016c6c:	6022      	str	r2, [r4, #0]
 8016c6e:	701e      	strb	r6, [r3, #0]
 8016c70:	6962      	ldr	r2, [r4, #20]
 8016c72:	1c43      	adds	r3, r0, #1
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d004      	beq.n	8016c82 <__swbuf_r+0x6e>
 8016c78:	89a3      	ldrh	r3, [r4, #12]
 8016c7a:	07db      	lsls	r3, r3, #31
 8016c7c:	d5e1      	bpl.n	8016c42 <__swbuf_r+0x2e>
 8016c7e:	2e0a      	cmp	r6, #10
 8016c80:	d1df      	bne.n	8016c42 <__swbuf_r+0x2e>
 8016c82:	4621      	mov	r1, r4
 8016c84:	4628      	mov	r0, r5
 8016c86:	f7ff fdb1 	bl	80167ec <_fflush_r>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d0d9      	beq.n	8016c42 <__swbuf_r+0x2e>
 8016c8e:	e7d6      	b.n	8016c3e <__swbuf_r+0x2a>

08016c90 <__swsetup_r>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4b29      	ldr	r3, [pc, #164]	@ (8016d38 <__swsetup_r+0xa8>)
 8016c94:	4605      	mov	r5, r0
 8016c96:	6818      	ldr	r0, [r3, #0]
 8016c98:	460c      	mov	r4, r1
 8016c9a:	b118      	cbz	r0, 8016ca4 <__swsetup_r+0x14>
 8016c9c:	6a03      	ldr	r3, [r0, #32]
 8016c9e:	b90b      	cbnz	r3, 8016ca4 <__swsetup_r+0x14>
 8016ca0:	f7fd fb92 	bl	80143c8 <__sinit>
 8016ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ca8:	0719      	lsls	r1, r3, #28
 8016caa:	d422      	bmi.n	8016cf2 <__swsetup_r+0x62>
 8016cac:	06da      	lsls	r2, r3, #27
 8016cae:	d407      	bmi.n	8016cc0 <__swsetup_r+0x30>
 8016cb0:	2209      	movs	r2, #9
 8016cb2:	602a      	str	r2, [r5, #0]
 8016cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016cb8:	81a3      	strh	r3, [r4, #12]
 8016cba:	f04f 30ff 	mov.w	r0, #4294967295
 8016cbe:	e033      	b.n	8016d28 <__swsetup_r+0x98>
 8016cc0:	0758      	lsls	r0, r3, #29
 8016cc2:	d512      	bpl.n	8016cea <__swsetup_r+0x5a>
 8016cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016cc6:	b141      	cbz	r1, 8016cda <__swsetup_r+0x4a>
 8016cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ccc:	4299      	cmp	r1, r3
 8016cce:	d002      	beq.n	8016cd6 <__swsetup_r+0x46>
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f7fe faa7 	bl	8015224 <_free_r>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016cda:	89a3      	ldrh	r3, [r4, #12]
 8016cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016ce0:	81a3      	strh	r3, [r4, #12]
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	6063      	str	r3, [r4, #4]
 8016ce6:	6923      	ldr	r3, [r4, #16]
 8016ce8:	6023      	str	r3, [r4, #0]
 8016cea:	89a3      	ldrh	r3, [r4, #12]
 8016cec:	f043 0308 	orr.w	r3, r3, #8
 8016cf0:	81a3      	strh	r3, [r4, #12]
 8016cf2:	6923      	ldr	r3, [r4, #16]
 8016cf4:	b94b      	cbnz	r3, 8016d0a <__swsetup_r+0x7a>
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d00:	d003      	beq.n	8016d0a <__swsetup_r+0x7a>
 8016d02:	4621      	mov	r1, r4
 8016d04:	4628      	mov	r0, r5
 8016d06:	f000 f883 	bl	8016e10 <__smakebuf_r>
 8016d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d0e:	f013 0201 	ands.w	r2, r3, #1
 8016d12:	d00a      	beq.n	8016d2a <__swsetup_r+0x9a>
 8016d14:	2200      	movs	r2, #0
 8016d16:	60a2      	str	r2, [r4, #8]
 8016d18:	6962      	ldr	r2, [r4, #20]
 8016d1a:	4252      	negs	r2, r2
 8016d1c:	61a2      	str	r2, [r4, #24]
 8016d1e:	6922      	ldr	r2, [r4, #16]
 8016d20:	b942      	cbnz	r2, 8016d34 <__swsetup_r+0xa4>
 8016d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016d26:	d1c5      	bne.n	8016cb4 <__swsetup_r+0x24>
 8016d28:	bd38      	pop	{r3, r4, r5, pc}
 8016d2a:	0799      	lsls	r1, r3, #30
 8016d2c:	bf58      	it	pl
 8016d2e:	6962      	ldrpl	r2, [r4, #20]
 8016d30:	60a2      	str	r2, [r4, #8]
 8016d32:	e7f4      	b.n	8016d1e <__swsetup_r+0x8e>
 8016d34:	2000      	movs	r0, #0
 8016d36:	e7f7      	b.n	8016d28 <__swsetup_r+0x98>
 8016d38:	2400027c 	.word	0x2400027c

08016d3c <_raise_r>:
 8016d3c:	291f      	cmp	r1, #31
 8016d3e:	b538      	push	{r3, r4, r5, lr}
 8016d40:	4605      	mov	r5, r0
 8016d42:	460c      	mov	r4, r1
 8016d44:	d904      	bls.n	8016d50 <_raise_r+0x14>
 8016d46:	2316      	movs	r3, #22
 8016d48:	6003      	str	r3, [r0, #0]
 8016d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d4e:	bd38      	pop	{r3, r4, r5, pc}
 8016d50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016d52:	b112      	cbz	r2, 8016d5a <_raise_r+0x1e>
 8016d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d58:	b94b      	cbnz	r3, 8016d6e <_raise_r+0x32>
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	f000 f830 	bl	8016dc0 <_getpid_r>
 8016d60:	4622      	mov	r2, r4
 8016d62:	4601      	mov	r1, r0
 8016d64:	4628      	mov	r0, r5
 8016d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d6a:	f000 b817 	b.w	8016d9c <_kill_r>
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d00a      	beq.n	8016d88 <_raise_r+0x4c>
 8016d72:	1c59      	adds	r1, r3, #1
 8016d74:	d103      	bne.n	8016d7e <_raise_r+0x42>
 8016d76:	2316      	movs	r3, #22
 8016d78:	6003      	str	r3, [r0, #0]
 8016d7a:	2001      	movs	r0, #1
 8016d7c:	e7e7      	b.n	8016d4e <_raise_r+0x12>
 8016d7e:	2100      	movs	r1, #0
 8016d80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016d84:	4620      	mov	r0, r4
 8016d86:	4798      	blx	r3
 8016d88:	2000      	movs	r0, #0
 8016d8a:	e7e0      	b.n	8016d4e <_raise_r+0x12>

08016d8c <raise>:
 8016d8c:	4b02      	ldr	r3, [pc, #8]	@ (8016d98 <raise+0xc>)
 8016d8e:	4601      	mov	r1, r0
 8016d90:	6818      	ldr	r0, [r3, #0]
 8016d92:	f7ff bfd3 	b.w	8016d3c <_raise_r>
 8016d96:	bf00      	nop
 8016d98:	2400027c 	.word	0x2400027c

08016d9c <_kill_r>:
 8016d9c:	b538      	push	{r3, r4, r5, lr}
 8016d9e:	4d07      	ldr	r5, [pc, #28]	@ (8016dbc <_kill_r+0x20>)
 8016da0:	2300      	movs	r3, #0
 8016da2:	4604      	mov	r4, r0
 8016da4:	4608      	mov	r0, r1
 8016da6:	4611      	mov	r1, r2
 8016da8:	602b      	str	r3, [r5, #0]
 8016daa:	f7eb f9d7 	bl	800215c <_kill>
 8016dae:	1c43      	adds	r3, r0, #1
 8016db0:	d102      	bne.n	8016db8 <_kill_r+0x1c>
 8016db2:	682b      	ldr	r3, [r5, #0]
 8016db4:	b103      	cbz	r3, 8016db8 <_kill_r+0x1c>
 8016db6:	6023      	str	r3, [r4, #0]
 8016db8:	bd38      	pop	{r3, r4, r5, pc}
 8016dba:	bf00      	nop
 8016dbc:	24004ba8 	.word	0x24004ba8

08016dc0 <_getpid_r>:
 8016dc0:	f7eb b9c4 	b.w	800214c <_getpid>

08016dc4 <__swhatbuf_r>:
 8016dc4:	b570      	push	{r4, r5, r6, lr}
 8016dc6:	460c      	mov	r4, r1
 8016dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dcc:	2900      	cmp	r1, #0
 8016dce:	b096      	sub	sp, #88	@ 0x58
 8016dd0:	4615      	mov	r5, r2
 8016dd2:	461e      	mov	r6, r3
 8016dd4:	da0d      	bge.n	8016df2 <__swhatbuf_r+0x2e>
 8016dd6:	89a3      	ldrh	r3, [r4, #12]
 8016dd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016ddc:	f04f 0100 	mov.w	r1, #0
 8016de0:	bf14      	ite	ne
 8016de2:	2340      	movne	r3, #64	@ 0x40
 8016de4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016de8:	2000      	movs	r0, #0
 8016dea:	6031      	str	r1, [r6, #0]
 8016dec:	602b      	str	r3, [r5, #0]
 8016dee:	b016      	add	sp, #88	@ 0x58
 8016df0:	bd70      	pop	{r4, r5, r6, pc}
 8016df2:	466a      	mov	r2, sp
 8016df4:	f000 f848 	bl	8016e88 <_fstat_r>
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	dbec      	blt.n	8016dd6 <__swhatbuf_r+0x12>
 8016dfc:	9901      	ldr	r1, [sp, #4]
 8016dfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016e02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016e06:	4259      	negs	r1, r3
 8016e08:	4159      	adcs	r1, r3
 8016e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e0e:	e7eb      	b.n	8016de8 <__swhatbuf_r+0x24>

08016e10 <__smakebuf_r>:
 8016e10:	898b      	ldrh	r3, [r1, #12]
 8016e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e14:	079d      	lsls	r5, r3, #30
 8016e16:	4606      	mov	r6, r0
 8016e18:	460c      	mov	r4, r1
 8016e1a:	d507      	bpl.n	8016e2c <__smakebuf_r+0x1c>
 8016e1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016e20:	6023      	str	r3, [r4, #0]
 8016e22:	6123      	str	r3, [r4, #16]
 8016e24:	2301      	movs	r3, #1
 8016e26:	6163      	str	r3, [r4, #20]
 8016e28:	b003      	add	sp, #12
 8016e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e2c:	ab01      	add	r3, sp, #4
 8016e2e:	466a      	mov	r2, sp
 8016e30:	f7ff ffc8 	bl	8016dc4 <__swhatbuf_r>
 8016e34:	9f00      	ldr	r7, [sp, #0]
 8016e36:	4605      	mov	r5, r0
 8016e38:	4639      	mov	r1, r7
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f7fe fda0 	bl	8015980 <_malloc_r>
 8016e40:	b948      	cbnz	r0, 8016e56 <__smakebuf_r+0x46>
 8016e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e46:	059a      	lsls	r2, r3, #22
 8016e48:	d4ee      	bmi.n	8016e28 <__smakebuf_r+0x18>
 8016e4a:	f023 0303 	bic.w	r3, r3, #3
 8016e4e:	f043 0302 	orr.w	r3, r3, #2
 8016e52:	81a3      	strh	r3, [r4, #12]
 8016e54:	e7e2      	b.n	8016e1c <__smakebuf_r+0xc>
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	6020      	str	r0, [r4, #0]
 8016e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e5e:	81a3      	strh	r3, [r4, #12]
 8016e60:	9b01      	ldr	r3, [sp, #4]
 8016e62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016e66:	b15b      	cbz	r3, 8016e80 <__smakebuf_r+0x70>
 8016e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e6c:	4630      	mov	r0, r6
 8016e6e:	f000 f81d 	bl	8016eac <_isatty_r>
 8016e72:	b128      	cbz	r0, 8016e80 <__smakebuf_r+0x70>
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	f023 0303 	bic.w	r3, r3, #3
 8016e7a:	f043 0301 	orr.w	r3, r3, #1
 8016e7e:	81a3      	strh	r3, [r4, #12]
 8016e80:	89a3      	ldrh	r3, [r4, #12]
 8016e82:	431d      	orrs	r5, r3
 8016e84:	81a5      	strh	r5, [r4, #12]
 8016e86:	e7cf      	b.n	8016e28 <__smakebuf_r+0x18>

08016e88 <_fstat_r>:
 8016e88:	b538      	push	{r3, r4, r5, lr}
 8016e8a:	4d07      	ldr	r5, [pc, #28]	@ (8016ea8 <_fstat_r+0x20>)
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4608      	mov	r0, r1
 8016e92:	4611      	mov	r1, r2
 8016e94:	602b      	str	r3, [r5, #0]
 8016e96:	f7eb f9c1 	bl	800221c <_fstat>
 8016e9a:	1c43      	adds	r3, r0, #1
 8016e9c:	d102      	bne.n	8016ea4 <_fstat_r+0x1c>
 8016e9e:	682b      	ldr	r3, [r5, #0]
 8016ea0:	b103      	cbz	r3, 8016ea4 <_fstat_r+0x1c>
 8016ea2:	6023      	str	r3, [r4, #0]
 8016ea4:	bd38      	pop	{r3, r4, r5, pc}
 8016ea6:	bf00      	nop
 8016ea8:	24004ba8 	.word	0x24004ba8

08016eac <_isatty_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	4d06      	ldr	r5, [pc, #24]	@ (8016ec8 <_isatty_r+0x1c>)
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4608      	mov	r0, r1
 8016eb6:	602b      	str	r3, [r5, #0]
 8016eb8:	f7eb f9c0 	bl	800223c <_isatty>
 8016ebc:	1c43      	adds	r3, r0, #1
 8016ebe:	d102      	bne.n	8016ec6 <_isatty_r+0x1a>
 8016ec0:	682b      	ldr	r3, [r5, #0]
 8016ec2:	b103      	cbz	r3, 8016ec6 <_isatty_r+0x1a>
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	bd38      	pop	{r3, r4, r5, pc}
 8016ec8:	24004ba8 	.word	0x24004ba8

08016ecc <sinf_poly>:
 8016ecc:	07cb      	lsls	r3, r1, #31
 8016ece:	d412      	bmi.n	8016ef6 <sinf_poly+0x2a>
 8016ed0:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016ed4:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016ed8:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016edc:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016ee0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016ee4:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016ee8:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016eec:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016ef0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016ef4:	4770      	bx	lr
 8016ef6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016efa:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016efe:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016f02:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016f06:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016f0a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016f0e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016f12:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016f16:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016f1a:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016f1e:	e7e5      	b.n	8016eec <sinf_poly+0x20>

08016f20 <sinf>:
 8016f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f22:	ee10 4a10 	vmov	r4, s0
 8016f26:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016f2a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016f2e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016f32:	eef0 7a40 	vmov.f32	s15, s0
 8016f36:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8016f3a:	d218      	bcs.n	8016f6e <sinf+0x4e>
 8016f3c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016f40:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016f44:	d20a      	bcs.n	8016f5c <sinf+0x3c>
 8016f46:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8016f4a:	d103      	bne.n	8016f54 <sinf+0x34>
 8016f4c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8016f50:	ed8d 1a01 	vstr	s2, [sp, #4]
 8016f54:	eeb0 0a67 	vmov.f32	s0, s15
 8016f58:	b003      	add	sp, #12
 8016f5a:	bd30      	pop	{r4, r5, pc}
 8016f5c:	483a      	ldr	r0, [pc, #232]	@ (8017048 <sinf+0x128>)
 8016f5e:	eeb0 0b46 	vmov.f64	d0, d6
 8016f62:	2100      	movs	r1, #0
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f6a:	f7ff bfaf 	b.w	8016ecc <sinf_poly>
 8016f6e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d824      	bhi.n	8016fc0 <sinf+0xa0>
 8016f76:	4b34      	ldr	r3, [pc, #208]	@ (8017048 <sinf+0x128>)
 8016f78:	ed93 7b08 	vldr	d7, [r3, #32]
 8016f7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016f84:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016f88:	ee17 1a90 	vmov	r1, s15
 8016f8c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016f90:	1609      	asrs	r1, r1, #24
 8016f92:	ee07 1a90 	vmov	s15, r1
 8016f96:	f001 0203 	and.w	r2, r1, #3
 8016f9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016f9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8016fa2:	ed92 0b00 	vldr	d0, [r2]
 8016fa6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8016faa:	f011 0f02 	tst.w	r1, #2
 8016fae:	eea5 6b47 	vfms.f64	d6, d5, d7
 8016fb2:	bf08      	it	eq
 8016fb4:	4618      	moveq	r0, r3
 8016fb6:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016fba:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016fbe:	e7d1      	b.n	8016f64 <sinf+0x44>
 8016fc0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016fc4:	d237      	bcs.n	8017036 <sinf+0x116>
 8016fc6:	4921      	ldr	r1, [pc, #132]	@ (801704c <sinf+0x12c>)
 8016fc8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8016fcc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8016fd0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016fd4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8016fd8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016fdc:	6a10      	ldr	r0, [r2, #32]
 8016fde:	6912      	ldr	r2, [r2, #16]
 8016fe0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016fe4:	40ab      	lsls	r3, r5
 8016fe6:	fba0 5003 	umull	r5, r0, r0, r3
 8016fea:	4359      	muls	r1, r3
 8016fec:	fbe3 0102 	umlal	r0, r1, r3, r2
 8016ff0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8016ff4:	0f9d      	lsrs	r5, r3, #30
 8016ff6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016ffa:	1ac9      	subs	r1, r1, r3
 8016ffc:	f7e9 fb7e 	bl	80006fc <__aeabi_l2d>
 8017000:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017004:	4b10      	ldr	r3, [pc, #64]	@ (8017048 <sinf+0x128>)
 8017006:	f004 0203 	and.w	r2, r4, #3
 801700a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801700e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8017040 <sinf+0x120>
 8017012:	ed92 0b00 	vldr	d0, [r2]
 8017016:	ec41 0b17 	vmov	d7, r0, r1
 801701a:	f014 0f02 	tst.w	r4, #2
 801701e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017022:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017026:	4629      	mov	r1, r5
 8017028:	bf08      	it	eq
 801702a:	4618      	moveq	r0, r3
 801702c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017030:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017034:	e796      	b.n	8016f64 <sinf+0x44>
 8017036:	b003      	add	sp, #12
 8017038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801703c:	f000 b816 	b.w	801706c <__math_invalidf>
 8017040:	54442d18 	.word	0x54442d18
 8017044:	3c1921fb 	.word	0x3c1921fb
 8017048:	08017648 	.word	0x08017648
 801704c:	080175e8 	.word	0x080175e8

08017050 <with_errnof>:
 8017050:	b510      	push	{r4, lr}
 8017052:	ed2d 8b02 	vpush	{d8}
 8017056:	eeb0 8a40 	vmov.f32	s16, s0
 801705a:	4604      	mov	r4, r0
 801705c:	f7fd fabe 	bl	80145dc <__errno>
 8017060:	eeb0 0a48 	vmov.f32	s0, s16
 8017064:	ecbd 8b02 	vpop	{d8}
 8017068:	6004      	str	r4, [r0, #0]
 801706a:	bd10      	pop	{r4, pc}

0801706c <__math_invalidf>:
 801706c:	eef0 7a40 	vmov.f32	s15, s0
 8017070:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017074:	eef4 7a67 	vcmp.f32	s15, s15
 8017078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017080:	d602      	bvs.n	8017088 <__math_invalidf+0x1c>
 8017082:	2021      	movs	r0, #33	@ 0x21
 8017084:	f7ff bfe4 	b.w	8017050 <with_errnof>
 8017088:	4770      	bx	lr
	...

0801708c <_init>:
 801708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801708e:	bf00      	nop
 8017090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017092:	bc08      	pop	{r3}
 8017094:	469e      	mov	lr, r3
 8017096:	4770      	bx	lr

08017098 <_fini>:
 8017098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709a:	bf00      	nop
 801709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801709e:	bc08      	pop	{r3}
 80170a0:	469e      	mov	lr, r3
 80170a2:	4770      	bx	lr
