
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c230  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  0801c500  0801c500  0001d500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d318  0801d318  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d320  0801d320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d324  0801d324  0001e324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801d328  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006098  240002cc  0801d5f4  0001f2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006364  0801d5f4  0001f364  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001f2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003995a  00000000  00000000  0001f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000071ff  00000000  00000000  00058c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028c0  00000000  00000000  0005fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f93  00000000  00000000  00062718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e4f9  00000000  00000000  000646ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003e611  00000000  00000000  000a2ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172ce3  00000000  00000000  000e11b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00253e98  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c398  00000000  00000000  00253edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00260274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000072  00000000  00000000  0026031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c4e8 	.word	0x0801c4e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801c4e8 	.word	0x0801c4e8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f009 fdcb 	bl	800a698 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fadf 	bl	80010e0 <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9a9 	bl	8000ea0 <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9b4 	bl	8000ebc <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b54:	2201      	movs	r2, #1
 8000b56:	210d      	movs	r1, #13
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 faf5 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b5e:	2202      	movs	r2, #2
 8000b60:	210e      	movs	r1, #14
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 faf0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b68:	2204      	movs	r2, #4
 8000b6a:	2113      	movs	r1, #19
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 faeb 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b72:	2200      	movs	r2, #0
 8000b74:	2115      	movs	r1, #21
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fae6 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2116      	movs	r1, #22
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fae1 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2117      	movs	r1, #23
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fadc 	bl	8001148 <LSM6DS3_WriteRegister>

	LSM6DS3_WriteOffsets(sensor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f805 	bl	8000ba0 <LSM6DS3_WriteOffsets>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbc:	edc7 7a00 	vstr	s15, [r7]
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bcc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd8:	edc7 7a00 	vstr	s15, [r7]
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2173      	movs	r1, #115	@ 0x73
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 faa0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2174      	movs	r1, #116	@ 0x74
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa9a 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2175      	movs	r1, #117	@ 0x75
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fa94 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	3a800000 	.word	0x3a800000

08000c2c <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d04d      	beq.n	8000cde <LSM6DS3_StartAccel+0xb2>
 8000c42:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d84c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c4a:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d042      	beq.n	8000cd8 <LSM6DS3_StartAccel+0xac>
 8000c52:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d844      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c5a:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <LSM6DS3_StartAccel+0xa6>
 8000c62:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d83c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c6a:	f240 3241 	movw	r2, #833	@ 0x341
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d02c      	beq.n	8000ccc <LSM6DS3_StartAccel+0xa0>
 8000c72:	f240 3241 	movw	r2, #833	@ 0x341
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d834      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c7a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c7e:	d022      	beq.n	8000cc6 <LSM6DS3_StartAccel+0x9a>
 8000c80:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c84:	d82e      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c86:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c88:	d01a      	beq.n	8000cc0 <LSM6DS3_StartAccel+0x94>
 8000c8a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c8c:	d82a      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c8e:	2b68      	cmp	r3, #104	@ 0x68
 8000c90:	d013      	beq.n	8000cba <LSM6DS3_StartAccel+0x8e>
 8000c92:	2b68      	cmp	r3, #104	@ 0x68
 8000c94:	d826      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c96:	2b34      	cmp	r3, #52	@ 0x34
 8000c98:	d00c      	beq.n	8000cb4 <LSM6DS3_StartAccel+0x88>
 8000c9a:	2b34      	cmp	r3, #52	@ 0x34
 8000c9c:	d822      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d002      	beq.n	8000ca8 <LSM6DS3_StartAccel+0x7c>
 8000ca2:	2b1a      	cmp	r3, #26
 8000ca4:	d003      	beq.n	8000cae <LSM6DS3_StartAccel+0x82>
 8000ca6:	e01d      	b.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e01d      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e01a      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e017      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e014      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000cc0:	2350      	movs	r3, #80	@ 0x50
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e011      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cca:	e00e      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000ccc:	2370      	movs	r3, #112	@ 0x70
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	e00b      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd6:	e008      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000cd8:	2390      	movs	r3, #144	@ 0x90
 8000cda:	73fb      	strb	r3, [r7, #15]
		break;
 8000cdc:	e005      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000cde:	23a0      	movs	r3, #160	@ 0xa0
 8000ce0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce2:	e002      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce8:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	3b02      	subs	r3, #2
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	d82c      	bhi.n	8000d50 <LSM6DS3_StartAccel+0x124>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <LSM6DS3_StartAccel+0xd0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d3f 	.word	0x08000d3f
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000d51 	.word	0x08000d51
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d4b 	.word	0x08000d4b
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8000d3c:	e00b      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
		break;
 8000d42:	e008      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000d44:	230c      	movs	r3, #12
 8000d46:	73bb      	strb	r3, [r7, #14]
		break;
 8000d48:	e005      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d4e:	e002      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
		break;
 8000d54:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f9f0 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04d      	beq.n	8000e22 <LSM6DS3_StartGyro+0xb2>
 8000d86:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d84c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d8e:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d042      	beq.n	8000e1c <LSM6DS3_StartGyro+0xac>
 8000d96:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d844      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d9e:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d037      	beq.n	8000e16 <LSM6DS3_StartGyro+0xa6>
 8000da6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d83c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dae:	f240 3241 	movw	r2, #833	@ 0x341
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02c      	beq.n	8000e10 <LSM6DS3_StartGyro+0xa0>
 8000db6:	f240 3241 	movw	r2, #833	@ 0x341
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d834      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dbe:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc2:	d022      	beq.n	8000e0a <LSM6DS3_StartGyro+0x9a>
 8000dc4:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc8:	d82e      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dca:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dcc:	d01a      	beq.n	8000e04 <LSM6DS3_StartGyro+0x94>
 8000dce:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dd0:	d82a      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dd2:	2b68      	cmp	r3, #104	@ 0x68
 8000dd4:	d013      	beq.n	8000dfe <LSM6DS3_StartGyro+0x8e>
 8000dd6:	2b68      	cmp	r3, #104	@ 0x68
 8000dd8:	d826      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dda:	2b34      	cmp	r3, #52	@ 0x34
 8000ddc:	d00c      	beq.n	8000df8 <LSM6DS3_StartGyro+0x88>
 8000dde:	2b34      	cmp	r3, #52	@ 0x34
 8000de0:	d822      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d002      	beq.n	8000dec <LSM6DS3_StartGyro+0x7c>
 8000de6:	2b1a      	cmp	r3, #26
 8000de8:	d003      	beq.n	8000df2 <LSM6DS3_StartGyro+0x82>
 8000dea:	e01d      	b.n	8000e28 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000dec:	2310      	movs	r3, #16
 8000dee:	73fb      	strb	r3, [r7, #15]
		break;
 8000df0:	e01d      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000df2:	2320      	movs	r3, #32
 8000df4:	73fb      	strb	r3, [r7, #15]
		break;
 8000df6:	e01a      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfc:	e017      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	73fb      	strb	r3, [r7, #15]
		break;
 8000e02:	e014      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e011      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e0a:	2360      	movs	r3, #96	@ 0x60
 8000e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0e:	e00e      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e10:	2370      	movs	r3, #112	@ 0x70
 8000e12:	73fb      	strb	r3, [r7, #15]
		break;
 8000e14:	e00b      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e008      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e20:	e005      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e002      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d01f      	beq.n	8000e7a <LSM6DS3_StartGyro+0x10a>
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d81f      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d016      	beq.n	8000e74 <LSM6DS3_StartGyro+0x104>
 8000e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4a:	d819      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e50:	d00d      	beq.n	8000e6e <LSM6DS3_StartGyro+0xfe>
 8000e52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e56:	d813      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e5a:	d002      	beq.n	8000e62 <LSM6DS3_StartGyro+0xf2>
 8000e5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000e5e:	d003      	beq.n	8000e68 <LSM6DS3_StartGyro+0xf8>
 8000e60:	e00e      	b.n	8000e80 <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000e62:	2302      	movs	r3, #2
 8000e64:	73bb      	strb	r3, [r7, #14]
		break;
 8000e66:	e00e      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6c:	e00b      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	73bb      	strb	r3, [r7, #14]
		break;
 8000e72:	e008      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73bb      	strb	r3, [r7, #14]
		break;
 8000e78:	e005      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e7e:	e002      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
		break;
 8000e84:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2111      	movs	r1, #17
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f958 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f94b 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2111      	movs	r1, #17
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f93d 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd4 <LSM6DS3_ReadAccel+0xfc>)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	f107 0110 	add.w	r1, r7, #16
 8000f0e:	f107 0018 	add.w	r0, r7, #24
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	2207      	movs	r2, #7
 8000f1a:	f000 f941 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f3a:	7d7b      	ldrb	r3, [r7, #21]
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dbb      	ldrb	r3, [r7, #22]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]

}
 8000fcc:	bf00      	nop
 8000fce:	372c      	adds	r7, #44	@ 0x2c
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	0801c500 	.word	0x0801c500
 8000fd8:	47000000 	.word	0x47000000

08000fdc <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08d      	sub	sp, #52	@ 0x34
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fea:	4a3b      	ldr	r2, [pc, #236]	@ (80010d8 <LSM6DS3_ReadGyro+0xfc>)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c0a      	lsrs	r2, r1, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	8912      	ldrh	r2, [r2, #8]
 800100e:	f107 0110 	add.w	r1, r7, #16
 8001012:	f107 0018 	add.w	r0, r7, #24
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	2207      	movs	r2, #7
 800101e:	f000 f8bf 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001022:	7c7b      	ldrb	r3, [r7, #17]
 8001024:	b21a      	sxth	r2, r3
 8001026:	7cbb      	ldrb	r3, [r7, #18]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b21a      	sxth	r2, r3
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	b21a      	sxth	r2, r3
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
}
 80010d0:	bf00      	nop
 80010d2:	372c      	adds	r7, #44	@ 0x2c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	0801c508 	.word	0x0801c508
 80010dc:	47000000 	.word	0x47000000

080010e0 <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	460b      	mov	r3, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	753b      	strb	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f009 fac6 	bl	800a698 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 0210 	add.w	r2, r7, #16
 8001114:	f107 0114 	add.w	r1, r7, #20
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	f00e fd68 	bl	800fbf4 <HAL_SPI_TransmitReceive>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6858      	ldr	r0, [r3, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	891b      	ldrh	r3, [r3, #8]
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	f009 fab0 	bl	800a698 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 8001138:	7c7a      	ldrb	r2, [r7, #17]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]

	return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891b      	ldrh	r3, [r3, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f009 fa94 	bl	800a698 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, HAL_MAX_DELAY);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2202      	movs	r2, #2
 800117e:	f00e fb4b 	bl	800f818 <HAL_SPI_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	891b      	ldrh	r3, [r3, #8]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	f009 fa81 	bl	800a698 <HAL_GPIO_WritePin>

	return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80011a0:	b470      	push	{r4, r5, r6}
 80011a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80011a6:	4684      	mov	ip, r0
 80011a8:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011aa:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011ae:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011b0:	685e      	ldr	r6, [r3, #4]
 80011b2:	4030      	ands	r0, r6
 80011b4:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 80011b6:	68d8      	ldr	r0, [r3, #12]
 80011b8:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 80011bc:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f040 0001 	orr.w	r0, r0, #1
 80011c4:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80011cc:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011ce:	b1a2      	cbz	r2, 80011fa <SPI_TxRx_Fast+0x5a>
 80011d0:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 80011d4:	6958      	ldr	r0, [r3, #20]
 80011d6:	0780      	lsls	r0, r0, #30
 80011d8:	d5fc      	bpl.n	80011d4 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 80011da:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80011de:	45b4      	cmp	ip, r6
 80011e0:	f883 0020 	strb.w	r0, [r3, #32]
 80011e4:	d1f6      	bne.n	80011d4 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011e6:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 80011e8:	6958      	ldr	r0, [r3, #20]
 80011ea:	07c0      	lsls	r0, r0, #31
 80011ec:	d5fc      	bpl.n	80011e8 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 80011ee:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 80011f2:	f801 0b01 	strb.w	r0, [r1], #1
 80011f6:	4291      	cmp	r1, r2
 80011f8:	d1f6      	bne.n	80011e8 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 8001202:	61a5      	str	r5, [r4, #24]
}
 8001204:	bc70      	pop	{r4, r5, r6}
 8001206:	4770      	bx	lr
 8001208:	ffff0000 	.word	0xffff0000

0800120c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001216:	f003 fe08 	bl	8004e2a <VibeCheckStrobe_PeriodElapsedUpdate>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24002dac 	.word	0x24002dac

08001228 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001232:	f004 fc1b 	bl	8005a6c <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24002dcc 	.word	0x24002dcc

08001244 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 800124e:	f004 fc29 	bl	8005aa4 <VibeCheckWaveGen_DMACpltCallback>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24002dcc 	.word	0x24002dcc

08001260 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	VibeCheckAccel_EXTICallback(&vc.accel, GPIO_Pin);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001270:	f002 fbac 	bl	80039cc <VibeCheckAccel_EXTICallback>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24004398 	.word	0x24004398

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001286:	f000 ff1b 	bl	80020c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f004 ff07 	bl	800609c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f845 	bl	800131c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001292:	f000 f8b3 	bl	80013fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fdb7 	bl	8001e08 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f000 fd85 	bl	8001da8 <MX_DMA_Init>
  MX_DAC1_Init();
 800129e:	f000 f9c3 	bl	8001628 <MX_DAC1_Init>
  MX_I2C2_Init();
 80012a2:	f000 f9fd 	bl	80016a0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012a6:	f000 fa3b 	bl	8001720 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012aa:	f000 fa8f 	bl	80017cc <MX_SPI3_Init>
  MX_SPI4_Init();
 80012ae:	f000 fae3 	bl	8001878 <MX_SPI4_Init>
  MX_TIM4_Init();
 80012b2:	f000 fc67 	bl	8001b84 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012b6:	f000 fbd7 	bl	8001a68 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fd29 	bl	8001d10 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012be:	f000 fb31 	bl	8001924 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c2:	f000 fb83 	bl	80019cc <MX_TIM2_Init>
  MX_ADC1_Init();
 80012c6:	f000 f8c9 	bl	800145c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ca:	f000 f943 	bl	8001554 <MX_ADC2_Init>
  MX_UART7_Init();
 80012ce:	f000 fcd1 	bl	8001c74 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 80012d2:	f015 fcad 	bl	8016c30 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &hspi2, &hspi3, &hspi4);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <main+0x7c>)
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <main+0x80>)
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <main+0x84>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <main+0x88>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <main+0x8c>)
 80012e8:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <main+0x90>)
 80012ea:	490a      	ldr	r1, [pc, #40]	@ (8001314 <main+0x94>)
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <main+0x98>)
 80012ee:	f001 fe09 	bl	8002f04 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <main+0x98>)
 80012f4:	f001 ffdc 	bl	80032b0 <VibeCheck_Loop>
 80012f8:	e7fb      	b.n	80012f2 <main+0x72>
 80012fa:	bf00      	nop
 80012fc:	24000630 	.word	0x24000630
 8001300:	240005a8 	.word	0x240005a8
 8001304:	24000520 	.word	0x24000520
 8001308:	2400079c 	.word	0x2400079c
 800130c:	240003c8 	.word	0x240003c8
 8001310:	240006b8 	.word	0x240006b8
 8001314:	24000750 	.word	0x24000750
 8001318:	24000988 	.word	0x24000988

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	@ 0x70
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001326:	224c      	movs	r2, #76	@ 0x4c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f017 fd41 	bl	8018db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2220      	movs	r2, #32
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f017 fd3b 	bl	8018db2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800133c:	2002      	movs	r0, #2
 800133e:	f00a fdb1 	bl	800bea4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <SystemClock_Config+0xdc>)
 800134c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800135e:	bf00      	nop
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <SystemClock_Config+0xdc>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800136c:	d1f8      	bne.n	8001360 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800136e:	2321      	movs	r3, #33	@ 0x21
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001380:	2302      	movs	r3, #2
 8001382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001388:	2328      	movs	r3, #40	@ 0x28
 800138a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001398:	230c      	movs	r3, #12
 800139a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800139c:	2300      	movs	r3, #0
 800139e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00a fdc5 	bl	800bf38 <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013b4:	f000 feb0 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	233f      	movs	r3, #63	@ 0x3f
 80013ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	2303      	movs	r3, #3
 80013be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c4:	2308      	movs	r3, #8
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013d6:	2340      	movs	r3, #64	@ 0x40
 80013d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2103      	movs	r1, #3
 80013de:	4618      	mov	r0, r3
 80013e0:	f00b f984 	bl	800c6ec <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ea:	f000 fe95 	bl	8002118 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3770      	adds	r7, #112	@ 0x70
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58024800 	.word	0x58024800

080013fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001400:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	22b8      	movs	r2, #184	@ 0xb8
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f017 fcd2 	bl	8018db2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800140e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800141e:	2310      	movs	r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001426:	2302      	movs	r3, #2
 8001428:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800142e:	23c0      	movs	r3, #192	@ 0xc0
 8001430:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f00b fcde 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800144e:	f000 fe63 	bl	8002118 <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	37b8      	adds	r7, #184	@ 0xb8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2224      	movs	r2, #36	@ 0x24
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f017 fc9c 	bl	8018db2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800147a:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800147c:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <MX_ADC1_Init+0xec>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001482:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001486:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001488:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001494:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <MX_ADC1_Init+0xe8>)
 8001496:	2204      	movs	r2, #4
 8001498:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800149a:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a0:	4b28      	ldr	r3, [pc, #160]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ac:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014dc:	2201      	movs	r2, #1
 80014de:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014e2:	f005 f8d7 	bl	8006694 <HAL_ADC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014ec:	f000 fe14 	bl	8002118 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	@ (8001544 <MX_ADC1_Init+0xe8>)
 80014fc:	f006 f916 	bl	800772c <HAL_ADCEx_MultiModeConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001506:	f000 fe07 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_ADC1_Init+0xf0>)
 800150c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150e:	2306      	movs	r3, #6
 8001510:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_ADC1_Init+0xf4>)
 8001518:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151a:	2304      	movs	r3, #4
 800151c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_ADC1_Init+0xe8>)
 800152e:	f005 fab9 	bl	8006aa4 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001538:	f000 fdee 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	240002e8 	.word	0x240002e8
 8001548:	40022000 	.word	0x40022000
 800154c:	10c00010 	.word	0x10c00010
 8001550:	47ff0000 	.word	0x47ff0000

08001554 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2224      	movs	r2, #36	@ 0x24
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f017 fc26 	bl	8018db2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001566:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001568:	4a2c      	ldr	r2, [pc, #176]	@ (800161c <MX_ADC2_Init+0xc8>)
 800156a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800156e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001572:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001594:	2201      	movs	r2, #1
 8001596:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_ADC2_Init+0xc4>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015cc:	4812      	ldr	r0, [pc, #72]	@ (8001618 <MX_ADC2_Init+0xc4>)
 80015ce:	f005 f861 	bl	8006694 <HAL_ADC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80015d8:	f000 fd9e 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015dc:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_ADC2_Init+0xcc>)
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e0:	2306      	movs	r3, #6
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_ADC2_Init+0xd0>)
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ec:	2304      	movs	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_ADC2_Init+0xc4>)
 8001600:	f005 fa50 	bl	8006aa4 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800160a:	f000 fd85 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24000358 	.word	0x24000358
 800161c:	40022100 	.word	0x40022100
 8001620:	0c900008 	.word	0x0c900008
 8001624:	47ff0000 	.word	0x47ff0000

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	@ 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f017 fbbc 	bl	8018db2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_DAC1_Init+0x70>)
 800163c:	4a17      	ldr	r2, [pc, #92]	@ (800169c <MX_DAC1_Init+0x74>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4815      	ldr	r0, [pc, #84]	@ (8001698 <MX_DAC1_Init+0x70>)
 8001642:	f006 fadd 	bl	8007c00 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fd64 	bl	8002118 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8001654:	2306      	movs	r3, #6
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001658:	2302      	movs	r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	@ (8001698 <MX_DAC1_Init+0x70>)
 800166c:	f006 fbb4 	bl	8007dd8 <HAL_DAC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fd4f 	bl	8002118 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2210      	movs	r2, #16
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_DAC1_Init+0x70>)
 8001682:	f006 fba9 	bl	8007dd8 <HAL_DAC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800168c:	f000 fd44 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	240003c8 	.word	0x240003c8
 800169c:	40007400 	.word	0x40007400

080016a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <MX_I2C2_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <MX_I2C2_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016dc:	f009 f810 	bl	800a700 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fd17 	bl	8002118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ee:	f009 f8a3 	bl	800a838 <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fd0e 	bl	8002118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_I2C2_Init+0x74>)
 8001700:	f009 f8e5 	bl	800a8ce <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fd05 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	240004cc 	.word	0x240004cc
 8001718:	40005800 	.word	0x40005800
 800171c:	307075b1 	.word	0x307075b1

08001720 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001726:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <MX_SPI2_Init+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800172c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800173a:	2207      	movs	r2, #7
 800173c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800174c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001750:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001758:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001778:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_SPI2_Init+0xa4>)
 80017b2:	f00d ff0d 	bl	800f5d0 <HAL_SPI_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017bc:	f000 fcac 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	24000520 	.word	0x24000520
 80017c8:	40003800 	.word	0x40003800

080017cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <MX_SPI3_Init+0xa8>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017e6:	2207      	movs	r2, #7
 80017e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_SPI3_Init+0xa4>)
 80017f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001804:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800182c:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001832:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_SPI3_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_SPI3_Init+0xa4>)
 800185e:	f00d feb7 	bl	800f5d0 <HAL_SPI_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001868:	f000 fc56 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	240005a8 	.word	0x240005a8
 8001874:	40003c00 	.word	0x40003c00

08001878 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <MX_SPI4_Init+0xa4>)
 800187e:	4a28      	ldr	r2, [pc, #160]	@ (8001920 <MX_SPI4_Init+0xa8>)
 8001880:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001882:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001884:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001888:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <MX_SPI4_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001892:	2207      	movs	r2, #7
 8001894:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_SPI4_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018b0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018d8:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <MX_SPI4_Init+0xa4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_SPI4_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_SPI4_Init+0xa4>)
 800190a:	f00d fe61 	bl	800f5d0 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001914:	f000 fc00 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	24000630 	.word	0x24000630
 8001920:	40013400 	.word	0x40013400

08001924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001944:	4a20      	ldr	r2, [pc, #128]	@ (80019c8 <MX_TIM1_Init+0xa4>)
 8001946:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800195a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196e:	4815      	ldr	r0, [pc, #84]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 8001970:	f00e fd63 	bl	801043a <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800197a:	f000 fbcd 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 800198c:	f00f fd14 	bl	80113b8 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001996:	f000 fbbf 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800199a:	2320      	movs	r3, #32
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <MX_TIM1_Init+0xa0>)
 80019ac:	f010 fb56 	bl	801205c <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019b6:	f000 fbaf 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	240006b8 	.word	0x240006b8
 80019c8:	40010000 	.word	0x40010000

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM2_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a14:	f00e fd11 	bl	801043a <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a1e:	f000 fb7b 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a30:	f00f fcc2 	bl	80113b8 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a3a:	f000 fb6d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_TIM2_Init+0x98>)
 8001a4c:	f010 fb06 	bl	801205c <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 fb5f 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	24000704 	.word	0x24000704

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001a9c:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <MX_TIM3_Init+0x118>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b35      	ldr	r3, [pc, #212]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aac:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac0:	482e      	ldr	r0, [pc, #184]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ac2:	f00e fcba 	bl	801043a <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001acc:	f000 fb24 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4827      	ldr	r0, [pc, #156]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001ade:	f00f fc6b 	bl	80113b8 <HAL_TIM_ConfigClockSource>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ae8:	f000 fb16 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aec:	4823      	ldr	r0, [pc, #140]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001aee:	f00e fdff 	bl	80106f0 <HAL_TIM_PWM_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001af8:	f000 fb0e 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b0c:	f010 faa6 	bl	801205c <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b16:	f000 faff 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1a:	2360      	movs	r3, #96	@ 0x60
 8001b1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4812      	ldr	r0, [pc, #72]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b32:	f00f fb2d 	bl	8011190 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b3c:	f000 faec 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	2204      	movs	r2, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b48:	f00f fb22 	bl	8011190 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b52:	f000 fae1 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b5e:	f00f fb17 	bl	8011190 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b68:	f000 fad6 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <MX_TIM3_Init+0x114>)
 8001b6e:	f000 fee1 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001b72:	bf00      	nop
 8001b74:	3738      	adds	r7, #56	@ 0x38
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000750 	.word	0x24000750
 8001b80:	40000400 	.word	0x40000400

08001b84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	@ 0x38
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c70 <MX_TIM4_Init+0xec>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b26      	ldr	r3, [pc, #152]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bdc:	4823      	ldr	r0, [pc, #140]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bde:	f00e fc2c 	bl	801043a <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001be8:	f000 fa96 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481c      	ldr	r0, [pc, #112]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001bfa:	f00f fbdd 	bl	80113b8 <HAL_TIM_ConfigClockSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c04:	f000 fa88 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c08:	4818      	ldr	r0, [pc, #96]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c0a:	f00e fd71 	bl	80106f0 <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c14:	f000 fa80 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c28:	f010 fa18 	bl	801205c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c32:	f000 fa71 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c4e:	f00f fa9f 	bl	8011190 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c58:	f000 fa5e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <MX_TIM4_Init+0xe8>)
 8001c5e:	f000 fe69 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001c62:	bf00      	nop
 8001c64:	3738      	adds	r7, #56	@ 0x38
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2400079c 	.word	0x2400079c
 8001c70:	40000800 	.word	0x40000800

08001c74 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c7a:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <MX_UART7_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c84:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ca0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ca4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cbe:	4812      	ldr	r0, [pc, #72]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cc0:	f010 fa86 	bl	80121d0 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 fa25 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cd2:	f011 fb92 	bl	80133fa <HAL_UARTEx_SetTxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001cdc:	f000 fa1c 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4809      	ldr	r0, [pc, #36]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001ce4:	f011 fbc7 	bl	8013476 <HAL_UARTEx_SetRxFifoThreshold>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 fa13 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_UART7_Init+0x94>)
 8001cf4:	f011 fb48 	bl	8013388 <HAL_UARTEx_DisableFifoMode>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001cfe:	f000 fa0b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000860 	.word	0x24000860
 8001d0c:	40007800 	.word	0x40007800

08001d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d14:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <MX_USART1_UART_Init+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d5a:	f010 fa39 	bl	80121d0 <HAL_UART_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d64:	f000 f9d8 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d6c:	f011 fb45 	bl	80133fa <HAL_UARTEx_SetTxFifoThreshold>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d76:	f000 f9cf 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d7e:	f011 fb7a 	bl	8013476 <HAL_UARTEx_SetRxFifoThreshold>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f000 f9c6 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	f011 fafb 	bl	8013388 <HAL_UARTEx_DisableFifoMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f9be 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	240008f4 	.word	0x240008f4
 8001da4:	40011000 	.word	0x40011000

08001da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001db4:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	200b      	movs	r0, #11
 8001dd2:	f005 fe68 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dd6:	200b      	movs	r0, #11
 8001dd8:	f005 fe7f 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	200c      	movs	r0, #12
 8001de2:	f005 fe60 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001de6:	200c      	movs	r0, #12
 8001de8:	f005 fe77 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	200d      	movs	r0, #13
 8001df2:	f005 fe58 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001df6:	200d      	movs	r0, #13
 8001df8:	f005 fe6f 	bl	8007ada <HAL_NVIC_EnableIRQ>

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58024400 	.word	0x58024400

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	@ 0x30
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	4ba2      	ldr	r3, [pc, #648]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	4aa0      	ldr	r2, [pc, #640]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a99      	ldr	r2, [pc, #612]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5a:	4b93      	ldr	r3, [pc, #588]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a91      	ldr	r2, [pc, #580]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b8b      	ldr	r3, [pc, #556]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	4a8a      	ldr	r2, [pc, #552]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e88:	4b87      	ldr	r3, [pc, #540]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	4a82      	ldr	r2, [pc, #520]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea6:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb4:	4b7c      	ldr	r3, [pc, #496]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	4a7b      	ldr	r2, [pc, #492]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec4:	4b78      	ldr	r3, [pc, #480]	@ (80020a8 <MX_GPIO_Init+0x2a0>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	4875      	ldr	r0, [pc, #468]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001ed8:	f008 fbde 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2104      	movs	r1, #4
 8001ee0:	4873      	ldr	r0, [pc, #460]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001ee2:	f008 fbd9 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4872      	ldr	r0, [pc, #456]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001eec:	f008 fbd4 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	486f      	ldr	r0, [pc, #444]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001ef6:	f008 fbcf 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f00:	486d      	ldr	r0, [pc, #436]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001f02:	f008 fbc9 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2101      	movs	r1, #1
 8001f0a:	486c      	ldr	r0, [pc, #432]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 8001f0c:	f008 fbc4 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f16:	4868      	ldr	r0, [pc, #416]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001f18:	f008 fbbe 	bl	800a698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	485e      	ldr	r0, [pc, #376]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001f32:	f008 f9f1 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001f36:	2310      	movs	r3, #16
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4857      	ldr	r0, [pc, #348]	@ (80020ac <MX_GPIO_Init+0x2a4>)
 8001f4e:	f008 f9e3 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4851      	ldr	r0, [pc, #324]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001f6a:	f008 f9d5 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	484a      	ldr	r0, [pc, #296]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8001f86:	f008 f9c7 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001f8a:	230b      	movs	r3, #11
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4844      	ldr	r0, [pc, #272]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001fa2:	f008 f9b9 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001fa6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	483e      	ldr	r0, [pc, #248]	@ (80020b4 <MX_GPIO_Init+0x2ac>)
 8001fbc:	f008 f9ac 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4837      	ldr	r0, [pc, #220]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 8001fda:	f008 f99d 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 8001fde:	f240 3306 	movw	r3, #774	@ 0x306
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4831      	ldr	r0, [pc, #196]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 8001ff6:	f008 f98f 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8001ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4828      	ldr	r0, [pc, #160]	@ (80020b0 <MX_GPIO_Init+0x2a8>)
 8002010:	f008 f982 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4824      	ldr	r0, [pc, #144]	@ (80020bc <MX_GPIO_Init+0x2b4>)
 800202c:	f008 f974 	bl	800a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <MX_GPIO_Init+0x2b0>)
 800204a:	f008 f965 	bl	800a318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2007      	movs	r0, #7
 8002054:	f005 fd27 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002058:	2007      	movs	r0, #7
 800205a:	f005 fd3e 	bl	8007ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2008      	movs	r0, #8
 8002064:	f005 fd1f 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002068:	2008      	movs	r0, #8
 800206a:	f005 fd36 	bl	8007ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2009      	movs	r0, #9
 8002074:	f005 fd17 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002078:	2009      	movs	r0, #9
 800207a:	f005 fd2e 	bl	8007ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2017      	movs	r0, #23
 8002084:	f005 fd0f 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002088:	2017      	movs	r0, #23
 800208a:	f005 fd26 	bl	8007ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2028      	movs	r0, #40	@ 0x28
 8002094:	f005 fd07 	bl	8007aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002098:	2028      	movs	r0, #40	@ 0x28
 800209a:	f005 fd1e 	bl	8007ada <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209e:	bf00      	nop
 80020a0:	3730      	adds	r7, #48	@ 0x30
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58021000 	.word	0x58021000
 80020b0:	58020800 	.word	0x58020800
 80020b4:	58020000 	.word	0x58020000
 80020b8:	58020400 	.word	0x58020400
 80020bc:	58020c00 	.word	0x58020c00

080020c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020c6:	463b      	mov	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020d2:	f005 fd1d 	bl	8007b10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020da:	2300      	movs	r3, #0
 80020dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020e2:	231f      	movs	r3, #31
 80020e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020e6:	2387      	movs	r3, #135	@ 0x87
 80020e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020ee:	2300      	movs	r3, #0
 80020f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002102:	463b      	mov	r3, r7
 8002104:	4618      	mov	r0, r3
 8002106:	f005 fd3b 	bl	8007b80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800210a:	2004      	movs	r0, #4
 800210c:	f005 fd18 	bl	8007b40 <HAL_MPU_Enable>

}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	745a      	strb	r2, [r3, #17]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	745a      	strb	r2, [r3, #17]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7c1b      	ldrb	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d030      	beq.n	80021fe <Sequencer_Update+0x76>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02c      	beq.n	80021fe <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d927      	bls.n	80021fe <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10a      	bne.n	80021fa <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7c5b      	ldrb	r3, [r3, #17]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	e002      	b.n	80021fa <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <Sequencer_Update+0x78>
		}
	}

	return 0;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	741a      	strb	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	741a      	strb	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7c1b      	ldrb	r3, [r3, #16]
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_MspInit+0x30>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002274:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_MspInit+0x30>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_MspInit+0x30>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58024400 	.word	0x58024400

0800229c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	@ 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a39      	ldr	r2, [pc, #228]	@ (80023a0 <HAL_ADC_MspInit+0x104>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d133      	bne.n	8002326 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a37      	ldr	r2, [pc, #220]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10e      	bne.n	80022ee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022d6:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f4:	4a2c      	ldr	r2, [pc, #176]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800230c:	2330      	movs	r3, #48	@ 0x30
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4823      	ldr	r0, [pc, #140]	@ (80023ac <HAL_ADC_MspInit+0x110>)
 8002320:	f007 fffa 	bl	800a318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002324:	e037      	b.n	8002396 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <HAL_ADC_MspInit+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d132      	bne.n	8002396 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002330:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 8002338:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_ADC_MspInit+0x108>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002348:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237e:	23c0      	movs	r3, #192	@ 0xc0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002382:	2303      	movs	r3, #3
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <HAL_ADC_MspInit+0x118>)
 8002392:	f007 ffc1 	bl	800a318 <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	3730      	adds	r7, #48	@ 0x30
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	24004628 	.word	0x24004628
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	40022100 	.word	0x40022100
 80023b4:	58020000 	.word	0x58020000

080023b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a48      	ldr	r2, [pc, #288]	@ (80024f8 <HAL_DAC_MspInit+0x140>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 808a 	bne.w	80024f0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023dc:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023e2:	4a46      	ldr	r2, [pc, #280]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ec:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b40      	ldr	r3, [pc, #256]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002400:	4a3e      	ldr	r2, [pc, #248]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800240a:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <HAL_DAC_MspInit+0x144>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002418:	2330      	movs	r3, #48	@ 0x30
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241c:	2303      	movs	r3, #3
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4835      	ldr	r0, [pc, #212]	@ (8002500 <HAL_DAC_MspInit+0x148>)
 800242c:	f007 ff74 	bl	800a318 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8002430:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002432:	4a35      	ldr	r2, [pc, #212]	@ (8002508 <HAL_DAC_MspInit+0x150>)
 8002434:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002436:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002438:	2243      	movs	r2, #67	@ 0x43
 800243a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243c:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002442:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002448:	4b2e      	ldr	r3, [pc, #184]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800244a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002452:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002456:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002458:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800245a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800245e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002466:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002474:	4823      	ldr	r0, [pc, #140]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002476:	f005 fe7b 	bl	8008170 <HAL_DMA_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002480:	f7ff fe4a 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_DAC_MspInit+0x14c>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_DAC_MspInit+0x154>)
 8002492:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_DAC_MspInit+0x158>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_DAC_MspInit+0x154>)
 8002498:	2244      	movs	r2, #68	@ 0x44
 800249a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_DAC_MspInit+0x154>)
 800249e:	2240      	movs	r2, #64	@ 0x40
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ae:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024be:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024d6:	f005 fe4b 	bl	8008170 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80024e0:	f7ff fe1a 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <HAL_DAC_MspInit+0x154>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40007400 	.word	0x40007400
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020000 	.word	0x58020000
 8002504:	240003dc 	.word	0x240003dc
 8002508:	40020010 	.word	0x40020010
 800250c:	24000454 	.word	0x24000454
 8002510:	40020028 	.word	0x40020028

08002514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b8      	sub	sp, #224	@ 0xe0
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	22b8      	movs	r2, #184	@ 0xb8
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f016 fc3c 	bl	8018db2 <memset>
  if(hi2c->Instance==I2C2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a27      	ldr	r2, [pc, #156]	@ (80025dc <HAL_I2C_MspInit+0xc8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d146      	bne.n	80025d2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002544:	f04f 0208 	mov.w	r2, #8
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f00a fc52 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002566:	f7ff fdd7 	bl	8002118 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002570:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002588:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800258c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025a2:	2304      	movs	r3, #4
 80025a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <HAL_I2C_MspInit+0xd0>)
 80025b0:	f007 feb2 	bl	800a318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_I2C_MspInit+0xcc>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025d2:	bf00      	nop
 80025d4:	37e0      	adds	r7, #224	@ 0xe0
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40005800 	.word	0x40005800
 80025e0:	58024400 	.word	0x58024400
 80025e4:	58020400 	.word	0x58020400

080025e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0bc      	sub	sp, #240	@ 0xf0
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	22b8      	movs	r2, #184	@ 0xb8
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f016 fbd2 	bl	8018db2 <memset>
  if(hspi->Instance==SPI2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a72      	ldr	r2, [pc, #456]	@ (80027dc <HAL_SPI_MspInit+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d146      	bne.n	80026a6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002618:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002624:	2300      	movs	r3, #0
 8002626:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	4618      	mov	r0, r3
 800262e:	f00a fbe9 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002638:	f7ff fd6e 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800263e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002642:	4a67      	ldr	r2, [pc, #412]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800264c:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800264e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002660:	4a5f      	ldr	r2, [pc, #380]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800266a:	4b5d      	ldr	r3, [pc, #372]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002678:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800267c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002692:	2305      	movs	r3, #5
 8002694:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800269c:	4619      	mov	r1, r3
 800269e:	4851      	ldr	r0, [pc, #324]	@ (80027e4 <HAL_SPI_MspInit+0x1fc>)
 80026a0:	f007 fe3a 	bl	800a318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026a4:	e096      	b.n	80027d4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_SPI_MspInit+0x200>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d146      	bne.n	800273e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80026b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026bc:	2300      	movs	r3, #0
 80026be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00a fb9d 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80026d0:	f7ff fd22 	bl	8002118 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026da:	4a41      	ldr	r2, [pc, #260]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026e4:	4b3e      	ldr	r3, [pc, #248]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f8:	4a39      	ldr	r2, [pc, #228]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002702:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 8002710:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002714:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800272a:	2306      	movs	r3, #6
 800272c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002734:	4619      	mov	r1, r3
 8002736:	482d      	ldr	r0, [pc, #180]	@ (80027ec <HAL_SPI_MspInit+0x204>)
 8002738:	f007 fdee 	bl	800a318 <HAL_GPIO_Init>
}
 800273c:	e04a      	b.n	80027d4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2b      	ldr	r2, [pc, #172]	@ (80027f0 <HAL_SPI_MspInit+0x208>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d145      	bne.n	80027d4 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	4618      	mov	r0, r3
 8002760:	f00a fb50 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800276a:	f7ff fcd5 	bl	8002118 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002774:	4a1a      	ldr	r2, [pc, #104]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800277a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_SPI_MspInit+0x1f8>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027c2:	2305      	movs	r3, #5
 80027c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027cc:	4619      	mov	r1, r3
 80027ce:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <HAL_SPI_MspInit+0x20c>)
 80027d0:	f007 fda2 	bl	800a318 <HAL_GPIO_Init>
}
 80027d4:	bf00      	nop
 80027d6:	37f0      	adds	r7, #240	@ 0xf0
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40003800 	.word	0x40003800
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58020400 	.word	0x58020400
 80027e8:	40003c00 	.word	0x40003c00
 80027ec:	58020800 	.word	0x58020800
 80027f0:	40013400 	.word	0x40013400
 80027f4:	58021000 	.word	0x58021000

080027f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a45      	ldr	r2, [pc, #276]	@ (800291c <HAL_TIM_Base_MspInit+0x124>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10f      	bne.n	800282a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800280a:	4b45      	ldr	r3, [pc, #276]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002810:	4a43      	ldr	r2, [pc, #268]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281a:	4b41      	ldr	r3, [pc, #260]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800281c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002828:	e074      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002832:	d10f      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002834:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800283a:	4a39      	ldr	r2, [pc, #228]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
}
 8002852:	e05f      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a32      	ldr	r2, [pc, #200]	@ (8002924 <HAL_TIM_Base_MspInit+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d117      	bne.n	800288e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285e:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002864:	4a2e      	ldr	r2, [pc, #184]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800286e:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	201d      	movs	r0, #29
 8002882:	f005 f910 	bl	8007aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002886:	201d      	movs	r0, #29
 8002888:	f005 f927 	bl	8007ada <HAL_NVIC_EnableIRQ>
}
 800288c:	e042      	b.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a25      	ldr	r2, [pc, #148]	@ (8002928 <HAL_TIM_Base_MspInit+0x130>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d13d      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002898:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 800289a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800289e:	4a20      	ldr	r2, [pc, #128]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_TIM_Base_MspInit+0x128>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_TIM_Base_MspInit+0x138>)
 80028ba:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028be:	221d      	movs	r2, #29
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028c4:	2240      	movs	r2, #64	@ 0x40
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b17      	ldr	r3, [pc, #92]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028dc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 80028fa:	f005 fc39 	bl	8008170 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002904:	f7ff fc08 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a08      	ldr	r2, [pc, #32]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24
 800290e:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_TIM_Base_MspInit+0x134>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010000 	.word	0x40010000
 8002920:	58024400 	.word	0x58024400
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	240007e8 	.word	0x240007e8
 8002930:	40020040 	.word	0x40020040

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <HAL_TIM_MspPostInit+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d120      	bne.n	8002998 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002974:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4818      	ldr	r0, [pc, #96]	@ (80029f4 <HAL_TIM_MspPostInit+0xc0>)
 8002992:	f007 fcc1 	bl	800a318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002996:	e024      	b.n	80029e2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <HAL_TIM_MspPostInit+0xc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d11f      	bne.n	80029e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d2:	2302      	movs	r3, #2
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4807      	ldr	r0, [pc, #28]	@ (80029fc <HAL_TIM_MspPostInit+0xc8>)
 80029de:	f007 fc9b 	bl	800a318 <HAL_GPIO_Init>
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	@ 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40000400 	.word	0x40000400
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020800 	.word	0x58020800
 80029f8:	40000800 	.word	0x40000800
 80029fc:	58020c00 	.word	0x58020c00

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ba      	sub	sp, #232	@ 0xe8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	22b8      	movs	r2, #184	@ 0xb8
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f016 f9c6 	bl	8018db2 <memset>
  if(huart->Instance==UART7)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <HAL_UART_MspInit+0x160>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d147      	bne.n	8002ac0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a30:	f04f 0202 	mov.w	r2, #2
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a f9dc 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff fb61 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a56:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a5c:	4a41      	ldr	r2, [pc, #260]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a66:	4b3f      	ldr	r3, [pc, #252]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a84:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a92:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002aac:	2307      	movs	r3, #7
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482b      	ldr	r0, [pc, #172]	@ (8002b68 <HAL_UART_MspInit+0x168>)
 8002aba:	f007 fc2d 	bl	800a318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002abe:	e04a      	b.n	8002b56 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_UART_MspInit+0x16c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d145      	bne.n	8002b56 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aca:	f04f 0201 	mov.w	r2, #1
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00a f98f 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002aec:	f7ff fb14 	bl	8002118 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b00:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b14:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_UART_MspInit+0x164>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b2c:	23c0      	movs	r3, #192	@ 0xc0
 8002b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b44:	2307      	movs	r3, #7
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <HAL_UART_MspInit+0x170>)
 8002b52:	f007 fbe1 	bl	800a318 <HAL_GPIO_Init>
}
 8002b56:	bf00      	nop
 8002b58:	37e8      	adds	r7, #232	@ 0xe8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40007800 	.word	0x40007800
 8002b64:	58024400 	.word	0x58024400
 8002b68:	58021000 	.word	0x58021000
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	58020400 	.word	0x58020400

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <NMI_Handler+0x4>

08002b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bca:	f003 fad9 	bl	8006180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f007 fd77 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002be4:	2004      	movs	r0, #4
 8002be6:	f007 fd70 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}

08002bee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002bf2:	2008      	movs	r0, #8
 8002bf4:	f007 fd69 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <DMA1_Stream0_IRQHandler+0x10>)
 8002c02:	f006 f877 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	240003dc 	.word	0x240003dc

08002c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA1_Stream1_IRQHandler+0x10>)
 8002c16:	f006 f86d 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	24000454 	.word	0x24000454

08002c24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <DMA1_Stream2_IRQHandler+0x10>)
 8002c2a:	f006 f863 	bl	8008cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	240007e8 	.word	0x240007e8

08002c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002c3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c40:	f007 fd43 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002c44:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c48:	f007 fd3f 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <TIM3_IRQHandler+0x10>)
 8002c56:	f00e f993 	bl	8010f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	24000750 	.word	0x24000750

08002c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002c68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c6c:	f007 fd2d 	bl	800a6ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <OTG_HS_IRQHandler+0x10>)
 8002c7a:	f007 ffb5 	bl	800abe8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	24005b14 	.word	0x24005b14

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca2:	f016 f8f7 	bl	8018e94 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <_exit+0x12>

08002cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e00a      	b.n	8002cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce0:	f3af 8000 	nop.w
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	60ba      	str	r2, [r7, #8]
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	dbf0      	blt.n	8002ce0 <_read+0x12>
  }

  return len;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e009      	b.n	8002d2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	60ba      	str	r2, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dbf1      	blt.n	8002d1a <_write+0x12>
  }
  return len;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_close>:

int _close(int file)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d68:	605a      	str	r2, [r3, #4]
  return 0;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_isatty>:

int _isatty(int file)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f016 f85c 	bl	8018e94 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	24050000 	.word	0x24050000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	2400462c 	.word	0x2400462c
 8002e10:	24006368 	.word	0x24006368

08002e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <SystemInit+0xd0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <SystemInit+0xd0>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee8 <SystemInit+0xd4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d807      	bhi.n	8002e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <SystemInit+0xd4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 030f 	bic.w	r3, r3, #15
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee8 <SystemInit+0xd4>)
 8002e3e:	f043 0307 	orr.w	r3, r3, #7
 8002e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <SystemInit+0xd8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <SystemInit+0xd8>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <SystemInit+0xd8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <SystemInit+0xd8>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4924      	ldr	r1, [pc, #144]	@ (8002eec <SystemInit+0xd8>)
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <SystemInit+0xdc>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e62:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <SystemInit+0xd4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <SystemInit+0xd4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 030f 	bic.w	r3, r3, #15
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <SystemInit+0xd4>)
 8002e78:	f043 0307 	orr.w	r3, r3, #7
 8002e7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <SystemInit+0xd8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <SystemInit+0xd8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <SystemInit+0xd8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <SystemInit+0xd8>)
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <SystemInit+0xe0>)
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <SystemInit+0xd8>)
 8002e98:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <SystemInit+0xe4>)
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <SystemInit+0xd8>)
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <SystemInit+0xe8>)
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <SystemInit+0xd8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <SystemInit+0xd8>)
 8002eaa:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <SystemInit+0xe8>)
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <SystemInit+0xd8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <SystemInit+0xd8>)
 8002eb6:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <SystemInit+0xe8>)
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <SystemInit+0xd8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <SystemInit+0xd8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a09      	ldr	r2, [pc, #36]	@ (8002eec <SystemInit+0xd8>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ecc:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <SystemInit+0xd8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <SystemInit+0xec>)
 8002ed4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ed8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	52002000 	.word	0x52002000
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ef4:	02020200 	.word	0x02020200
 8002ef8:	01ff0000 	.word	0x01ff0000
 8002efc:	01010280 	.word	0x01010280
 8002f00:	52004000 	.word	0x52004000

08002f04 <VibeCheck_Init>:
		DAC_HandleTypeDef* hdac_wavegen,
		TIM_HandleTypeDef* htim_rgb,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8002f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f06:	b0e5      	sub	sp, #404	@ 0x194
 8002f08:	af10      	add	r7, sp, #64	@ 0x40
 8002f0a:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8002f0e:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002f12:	6020      	str	r0, [r4, #0]
 8002f14:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002f18:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8002f1c:	6001      	str	r1, [r0, #0]
 8002f1e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f22:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002f26:	600a      	str	r2, [r1, #0]
 8002f28:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002f2c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002f30:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8002f32:	200a      	movs	r0, #10
 8002f34:	f003 f944 	bl	80061c0 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002f38:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002f3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f9e6 	bl	8004314 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8002f48:	4aca      	ldr	r2, [pc, #808]	@ (8003274 <VibeCheck_Init+0x370>)
 8002f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f4e:	6810      	ldr	r0, [r2, #0]
 8002f50:	6018      	str	r0, [r3, #0]
 8002f52:	8891      	ldrh	r1, [r2, #4]
 8002f54:	7992      	ldrb	r2, [r2, #6]
 8002f56:	8099      	strh	r1, [r3, #4]
 8002f58:	719a      	strb	r2, [r3, #6]
 8002f5a:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8002f5e:	2239      	movs	r2, #57	@ 0x39
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f015 ff25 	bl	8018db2 <memset>
 8002f68:	4bc3      	ldr	r3, [pc, #780]	@ (8003278 <VibeCheck_Init+0x374>)
 8002f6a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8002f6e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002f72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002f7c:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002f7e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002f82:	4abe      	ldr	r2, [pc, #760]	@ (800327c <VibeCheck_Init+0x378>)
 8002f84:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002f88:	6810      	ldr	r0, [r2, #0]
 8002f8a:	6851      	ldr	r1, [r2, #4]
 8002f8c:	c303      	stmia	r3!, {r0, r1}
 8002f8e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f92:	2238      	movs	r2, #56	@ 0x38
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f015 ff0b 	bl	8018db2 <memset>
 8002f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8003280 <VibeCheck_Init+0x37c>)
 8002f9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 8002fa2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fa6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002fb0:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 8002fb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 8002fb6:	4bb3      	ldr	r3, [pc, #716]	@ (8003284 <VibeCheck_Init+0x380>)
 8002fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002fbe:	223c      	movs	r2, #60	@ 0x3c
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f015 fef5 	bl	8018db2 <memset>
 8002fc8:	4baf      	ldr	r3, [pc, #700]	@ (8003288 <VibeCheck_Init+0x384>)
 8002fca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8002fce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	f243 4390 	movw	r3, #13456	@ 0x3490
 8002fdc:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler accel_cmd = {
 8002fe2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fe6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fea:	49a8      	ldr	r1, [pc, #672]	@ (800328c <VibeCheck_Init+0x388>)
 8002fec:	461a      	mov	r2, r3
 8002fee:	6808      	ldr	r0, [r1, #0]
 8002ff0:	6010      	str	r0, [r2, #0]
 8002ff2:	8889      	ldrh	r1, [r1, #4]
 8002ff4:	8091      	strh	r1, [r2, #4]
 8002ff6:	3306      	adds	r3, #6
 8002ff8:	223a      	movs	r2, #58	@ 0x3a
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f015 fed8 	bl	8018db2 <memset>
 8003002:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003006:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800300a:	4aa1      	ldr	r2, [pc, #644]	@ (8003290 <VibeCheck_Init+0x38c>)
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 800300e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f643 2310 	movw	r3, #14864	@ 0x3a10
 800301c:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 800301e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003022:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8003026:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 8003028:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800302c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003030:	681e      	ldr	r6, [r3, #0]
 8003032:	466d      	mov	r5, sp
 8003034:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003044:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003048:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800304c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003052:	4630      	mov	r0, r6
 8003054:	f001 fa8c 	bl	8004570 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 8003058:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800305c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003060:	681e      	ldr	r6, [r3, #0]
 8003062:	466d      	mov	r5, sp
 8003064:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 8003068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003074:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003078:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800307c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003082:	4630      	mov	r0, r6
 8003084:	f001 fa74 	bl	8004570 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003088:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800308c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003090:	681e      	ldr	r6, [r3, #0]
 8003092:	466d      	mov	r5, sp
 8003094:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8003098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80030b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b2:	4630      	mov	r0, r6
 80030b4:	f001 fa5c 	bl	8004570 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 80030b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030c8:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 80030cc:	466d      	mov	r5, sp
 80030ce:	f106 040c 	add.w	r4, r6, #12
 80030d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030e6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 fa40 	bl	8004570 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80030f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030f8:	4a66      	ldr	r2, [pc, #408]	@ (8003294 <VibeCheck_Init+0x390>)
 80030fa:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 80030fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003100:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f242 4344 	movw	r3, #9284	@ 0x2444
 800310a:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 800310c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003110:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003114:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler accel_data_sender = {
 8003116:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800311a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800311e:	4a5e      	ldr	r2, [pc, #376]	@ (8003298 <VibeCheck_Init+0x394>)
 8003120:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckAccelSender_Data_Execute,
			.obj = &vc->accel
 8003122:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003126:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003130:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_data_sender = {
 8003132:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003136:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800313a:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler accel_status_sender = {
 800313c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003140:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003144:	4a55      	ldr	r2, [pc, #340]	@ (800329c <VibeCheck_Init+0x398>)
 8003146:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckAccelSender_Status_Execute,
			.obj = &vc->accel
 8003148:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800314c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003156:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_status_sender = {
 8003158:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800315c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003160:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8003162:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003166:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003170:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003174:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003178:	f001 fa2c 	bl	80045d4 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_data_sender);
 800317c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003180:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800318a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800318e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003192:	f001 fa1f 	bl	80045d4 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_status_sender);
 8003196:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800319a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031ac:	f001 fa12 	bl	80045d4 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80031b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f242 4324 	movw	r3, #9252	@ 0x2424
 80031be:	4413      	add	r3, r2
 80031c0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031c4:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80031c8:	6811      	ldr	r1, [r2, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fc80 	bl	8004ad0 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 80031d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f242 4344 	movw	r3, #9284	@ 0x2444
 80031de:	4413      	add	r3, r2
 80031e0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031e4:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80031e8:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80031ec:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	6809      	ldr	r1, [r1, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 f9bd 	bl	8005574 <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 80031fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003208:	4413      	add	r3, r2
 800320a:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd80 	bl	8003d14 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003214:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003218:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f243 4090 	movw	r0, #13456	@ 0x3490
 8003222:	4418      	add	r0, r3
 8003224:	2310      	movs	r3, #16
 8003226:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <VibeCheck_Init+0x39c>)
 8003228:	491e      	ldr	r1, [pc, #120]	@ (80032a4 <VibeCheck_Init+0x3a0>)
 800322a:	f000 fe26 	bl	8003e7a <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 800322e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003232:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f243 4090 	movw	r0, #13456	@ 0x3490
 800323c:	4418      	add	r0, r3
 800323e:	2304      	movs	r3, #4
 8003240:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <VibeCheck_Init+0x3a4>)
 8003242:	491a      	ldr	r1, [pc, #104]	@ (80032ac <VibeCheck_Init+0x3a8>)
 8003244:	f000 fe50 	bl	8003ee8 <VibeCheckRGB_SetTopSequence>
	VibeCheckAccel_Init(&vc->accel, hspi_accel0, hspi_accel1, hspi_accel2);
 8003248:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800324c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f643 2010 	movw	r0, #14864	@ 0x3a10
 8003256:	4418      	add	r0, r3
 8003258:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800325c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8003260:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003264:	f000 f85e 	bl	8003324 <VibeCheckAccel_Init>
}
 8003268:	bf00      	nop
 800326a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800326e:	46bd      	mov	sp, r7
 8003270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003272:	bf00      	nop
 8003274:	0801c510 	.word	0x0801c510
 8003278:	08005071 	.word	0x08005071
 800327c:	0801c518 	.word	0x0801c518
 8003280:	08005e75 	.word	0x08005e75
 8003284:	00626772 	.word	0x00626772
 8003288:	0800414d 	.word	0x0800414d
 800328c:	0801c520 	.word	0x0801c520
 8003290:	08003b05 	.word	0x08003b05
 8003294:	08005fd1 	.word	0x08005fd1
 8003298:	08003bbd 	.word	0x08003bbd
 800329c:	08003c89 	.word	0x08003c89
 80032a0:	0801c7c0 	.word	0x0801c7c0
 80032a4:	0801c780 	.word	0x0801c780
 80032a8:	0801c714 	.word	0x0801c714
 80032ac:	0801c704 	.word	0x0801c704

080032b0 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f242 4344 	movw	r3, #9284	@ 0x2444
 80032be:	4413      	add	r3, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 f9f7 	bl	80056b4 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	f243 4390 	movw	r3, #13456	@ 0x3490
 80032cc:	4413      	add	r3, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fd56 	bl	8003d80 <VibeCheckRGB_Update>
	VibeCheckAccel_Update(&vc->accel);
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80032da:	4413      	add	r3, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f92b 	bl	8003538 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f84f 	bl	8004388 <VibeCheckShell_Update>
 80032ea:	4603      	mov	r3, r0
 80032ec:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f107 020c 	add.w	r2, r7, #12
 80032f4:	f107 0110 	add.w	r1, r7, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f9e1 	bl	80046c0 <VibeCheckShell_GetOutput>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <VibeCheck_Loop+0x6a>
		while (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) != USBD_OK);  /* block until the USB transmission starts to make sure we send all data */
 8003304:	bf00      	nop
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	b292      	uxth	r2, r2
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f013 fd56 	bl	8016dc0 <CDC_Transmit_HS>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f5      	bne.n	8003306 <VibeCheck_Loop+0x56>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <VibeCheckAccel_Init>:

#include "vibecheck_accel.h"


void VibeCheckAccel_Init(VibeCheckAccel* accel, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b0a1      	sub	sp, #132	@ 0x84
 8003328:	af06      	add	r7, sp, #24
 800332a:	6178      	str	r0, [r7, #20]
 800332c:	6139      	str	r1, [r7, #16]
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	60bb      	str	r3, [r7, #8]
	accel->data_ind = 0;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	accel->data_ready = 0;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	accel->time_prev_update = 0;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	accel->generate_fake_data = 0;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	667b      	str	r3, [r7, #100]	@ 0x64
 8003356:	e04a      	b.n	80033ee <VibeCheckAccel_Init+0xca>
	{
		accel->sensor_config[i].usr_offset_x = 0.0f;
 8003358:	6979      	ldr	r1, [r7, #20]
 800335a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].usr_offset_y = 0.0f;
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3304      	adds	r3, #4
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].usr_offset_z = 0.0f;
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3308      	adds	r3, #8
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].accel_odr_hz = VC_ACCEL_DEFAULT_ODR;
 8003398:	6979      	ldr	r1, [r7, #20]
 800339a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	330c      	adds	r3, #12
 80033a8:	220d      	movs	r2, #13
 80033aa:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].g_range = VC_ACCEL_DEFAULT_G_RANGE;
 80033ac:	6979      	ldr	r1, [r7, #20]
 80033ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3310      	adds	r3, #16
 80033bc:	2202      	movs	r2, #2
 80033be:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].gyro_odr_hz = VC_ACCEL_DEFAULT_ODR;
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3314      	adds	r3, #20
 80033d0:	220d      	movs	r2, #13
 80033d2:	601a      	str	r2, [r3, #0]
		accel->sensor_config[i].dps_range = VC_ACCEL_DEFAULT_DPS_RANGE;
 80033d4:	6979      	ldr	r1, [r7, #20]
 80033d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3318      	adds	r3, #24
 80033e4:	227d      	movs	r2, #125	@ 0x7d
 80033e6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 80033e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ea:	3301      	adds	r3, #1
 80033ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80033ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d9b1      	bls.n	8003358 <VibeCheckAccel_Init+0x34>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_ACCEL_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_ACCEL_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003400:	4a47      	ldr	r2, [pc, #284]	@ (8003520 <VibeCheckAccel_Init+0x1fc>)
 8003402:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003406:	ca07      	ldmia	r2, {r0, r1, r2}
 8003408:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_ACCEL_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 800340c:	4a45      	ldr	r2, [pc, #276]	@ (8003524 <VibeCheckAccel_Init+0x200>)
 800340e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003416:	6018      	str	r0, [r3, #0]
 8003418:	3304      	adds	r3, #4
 800341a:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_ACCEL_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 800341c:	4a42      	ldr	r2, [pc, #264]	@ (8003528 <VibeCheckAccel_Init+0x204>)
 800341e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003422:	ca07      	ldmia	r2, {r0, r1, r2}
 8003424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_ACCEL_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003428:	4a40      	ldr	r2, [pc, #256]	@ (800352c <VibeCheckAccel_Init+0x208>)
 800342a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800342e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003432:	6018      	str	r0, [r3, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_ACCEL_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003438:	4a3d      	ldr	r2, [pc, #244]	@ (8003530 <VibeCheckAccel_Init+0x20c>)
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003440:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_ACCEL_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8003444:	4a3b      	ldr	r2, [pc, #236]	@ (8003534 <VibeCheckAccel_Init+0x210>)
 8003446:	f107 0318 	add.w	r3, r7, #24
 800344a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800344e:	6018      	str	r0, [r3, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	663b      	str	r3, [r7, #96]	@ 0x60
 8003458:	e059      	b.n	800350e <VibeCheckAccel_Init+0x1ea>
	{
		LSM6DS3_Init(&accel->sensor[i], &accel->sensor_config[i],
 800345a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	3350      	adds	r3, #80	@ 0x50
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4413      	add	r3, r2
 8003464:	1d1d      	adds	r5, r3, #4
 8003466:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	18d6      	adds	r6, r2, r3
 8003474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3360      	adds	r3, #96	@ 0x60
 800347a:	f107 0208 	add.w	r2, r7, #8
 800347e:	4413      	add	r3, r2
 8003480:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	18cb      	adds	r3, r1, r3
 8003494:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	18c3      	adds	r3, r0, r3
 80034a8:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80034ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	18c3      	adds	r3, r0, r3
 80034ba:	f853 1c34 	ldr.w	r1, [r3, #-52]
 80034be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	18c3      	adds	r3, r0, r3
 80034cc:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 80034d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	18e3      	adds	r3, r4, r3
 80034de:	f853 4c48 	ldr.w	r4, [r3, #-72]
 80034e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	3360      	adds	r3, #96	@ 0x60
 80034e8:	f107 0c08 	add.w	ip, r7, #8
 80034ec:	4463      	add	r3, ip
 80034ee:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	9403      	str	r4, [sp, #12]
 80034f6:	9002      	str	r0, [sp, #8]
 80034f8:	9101      	str	r1, [sp, #4]
 80034fa:	9200      	str	r2, [sp, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4631      	mov	r1, r6
 8003502:	4628      	mov	r0, r5
 8003504:	f7fd fad8 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 8003508:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800350a:	3301      	adds	r3, #1
 800350c:	663b      	str	r3, [r7, #96]	@ 0x60
 800350e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003510:	2b02      	cmp	r3, #2
 8003512:	d9a2      	bls.n	800345a <VibeCheckAccel_Init+0x136>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	376c      	adds	r7, #108	@ 0x6c
 800351a:	46bd      	mov	sp, r7
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351e:	bf00      	nop
 8003520:	0801c528 	.word	0x0801c528
 8003524:	0801c534 	.word	0x0801c534
 8003528:	0801c53c 	.word	0x0801c53c
 800352c:	0801c548 	.word	0x0801c548
 8003530:	0801c550 	.word	0x0801c550
 8003534:	0801c55c 	.word	0x0801c55c

08003538 <VibeCheckAccel_Update>:


void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003540:	f002 fe32 	bl	80061a8 <HAL_GetTick>
 8003544:	61b8      	str	r0, [r7, #24]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2bfa      	cmp	r3, #250	@ 0xfa
 8003552:	f240 80fa 	bls.w	800374a <VibeCheckAccel_Update+0x212>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e093      	b.n	8003684 <VibeCheckAccel_Update+0x14c>
		{
			if (!accel->status[i].is_connected)
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	33b4      	adds	r3, #180	@ 0xb4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d124      	bne.n	80035bc <VibeCheckAccel_Update+0x84>
			{
				if (LSM6DS3_TestCommunication(&accel->sensor[i]))
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	015b      	lsls	r3, r3, #5
 8003576:	3350      	adds	r3, #80	@ 0x50
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fac4 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d079      	beq.n	800367e <VibeCheckAccel_Update+0x146>
				{
					accel->status[i].is_connected = 1;
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	33b4      	adds	r3, #180	@ 0xb4
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]
					accel->status[i].connection_change_flag = 1;
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	33c4      	adds	r3, #196	@ 0xc4
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
					VibeCheckAccel_UpdateSensor(accel, i);
 80035b2:	69f9      	ldr	r1, [r7, #28]
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f92a 	bl	800380e <VibeCheckAccel_UpdateSensor>
 80035ba:	e060      	b.n	800367e <VibeCheckAccel_Update+0x146>
				}
			}
			else
			{
				if (!accel->status[i].accel_measuring && !accel->status[i].gyro_measuring)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	33b8      	adds	r3, #184	@ 0xb8
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12b      	bne.n	800362a <VibeCheckAccel_Update+0xf2>
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	33bc      	adds	r3, #188	@ 0xbc
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d120      	bne.n	800362a <VibeCheckAccel_Update+0xf2>
				{
					if (!LSM6DS3_TestCommunication(&accel->sensor[i]))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	015b      	lsls	r3, r3, #5
 80035ec:	3350      	adds	r3, #80	@ 0x50
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fa89 	bl	8000b0c <LSM6DS3_TestCommunication>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13e      	bne.n	800367e <VibeCheckAccel_Update+0x146>
					{
						accel->status[i].is_connected = 0;
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	33b4      	adds	r3, #180	@ 0xb4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
						accel->status[i].connection_change_flag = 1;
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	33c4      	adds	r3, #196	@ 0xc4
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&accel->sensor[i]))
 8003628:	e029      	b.n	800367e <VibeCheckAccel_Update+0x146>
					}
				}
				else
				{
					if (accel->status[i].received_data_flag)
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	33c0      	adds	r3, #192	@ 0xc0
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <VibeCheckAccel_Update+0x11e>
					{
						accel->status[i].received_data_flag = 0;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	33c0      	adds	r3, #192	@ 0xc0
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e013      	b.n	800367e <VibeCheckAccel_Update+0x146>
					}
					else
					{
						accel->status[i].is_connected = 0;
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	33b4      	adds	r3, #180	@ 0xb4
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
						accel->status[i].connection_change_flag = 1;
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	33c4      	adds	r3, #196	@ 0xc4
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b02      	cmp	r3, #2
 8003688:	f67f af68 	bls.w	800355c <VibeCheckAccel_Update+0x24>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (accel->generate_fake_data)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d055      	beq.n	8003742 <VibeCheckAccel_Update+0x20a>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003754 <VibeCheckAccel_Update+0x21c>
 80036a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ac:	f018 f8e4 	bl	801b878 <sinf>
 80036b0:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003754 <VibeCheckAccel_Update+0x21c>
 80036c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003758 <VibeCheckAccel_Update+0x220>
 80036ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036ce:	eeb0 0a67 	vmov.f32	s0, s15
 80036d2:	f018 f8d1 	bl	801b878 <sinf>
 80036d6:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003754 <VibeCheckAccel_Update+0x21c>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800375c <VibeCheckAccel_Update+0x224>
 80036f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	f018 f8be 	bl	801b878 <sinf>
 80036fc:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 8003700:	ed97 1a03 	vldr	s2, [r7, #12]
 8003704:	edd7 0a04 	vldr	s1, [r7, #16]
 8003708:	ed97 0a05 	vldr	s0, [r7, #20]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	2101      	movs	r1, #1
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8c6 	bl	80038a2 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 8003716:	ed97 1a04 	vldr	s2, [r7, #16]
 800371a:	edd7 0a05 	vldr	s1, [r7, #20]
 800371e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	2102      	movs	r1, #2
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8bb 	bl	80038a2 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 800372c:	ed97 1a05 	vldr	s2, [r7, #20]
 8003730:	edd7 0a03 	vldr	s1, [r7, #12]
 8003734:	ed97 0a04 	vldr	s0, [r7, #16]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	2103      	movs	r1, #3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8b0 	bl	80038a2 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	}
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40c90fd0 	.word	0x40c90fd0
 8003758:	3f860a8b 	.word	0x3f860a8b
 800375c:	40060a8b 	.word	0x40060a8b

08003760 <VibeCheckAccel_StartFakeData>:
	*z = accel->sensor_config[channel].usr_offset_z;
}


void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <VibeCheckAccel_StopFakeData>:


void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <VibeCheckAccel_ConnectionChanged>:


uint32_t VibeCheckAccel_ConnectionChanged(VibeCheckAccel* accel, uint32_t* channel, uint32_t* is_connected)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e027      	b.n	80037fa <VibeCheckAccel_ConnectionChanged+0x62>
	{
		if (accel->status[i].connection_change_flag)
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	33c4      	adds	r3, #196	@ 0xc4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d019      	beq.n	80037f4 <VibeCheckAccel_ConnectionChanged+0x5c>
		{
			accel->status[i].connection_change_flag = 0;
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	33c4      	adds	r3, #196	@ 0xc4
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
			*channel = i;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]
			*is_connected = accel->status[i].is_connected;
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	33b4      	adds	r3, #180	@ 0xb4
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
			return 1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e006      	b.n	8003802 <VibeCheckAccel_ConnectionChanged+0x6a>
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3301      	adds	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d9d4      	bls.n	80037aa <VibeCheckAccel_ConnectionChanged+0x12>
		}
	}

	return 0;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <VibeCheckAccel_UpdateSensor>:


void VibeCheckAccel_UpdateSensor(VibeCheckAccel* accel, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
	if (channel >= VC_ACCEL_NUM_SENSORS) channel = VC_ACCEL_NUM_SENSORS - 1;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <VibeCheckAccel_UpdateSensor+0x14>
 800381e:	2302      	movs	r3, #2
 8003820:	603b      	str	r3, [r7, #0]

	if (accel->status[channel].is_connected)
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	33b4      	adds	r3, #180	@ 0xb4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d030      	beq.n	800389a <VibeCheckAccel_UpdateSensor+0x8c>
	{
		LSM6DS3_Configure(&accel->sensor[channel]);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	3350      	adds	r3, #80	@ 0x50
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	3304      	adds	r3, #4
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd f97b 	bl	8000b40 <LSM6DS3_Configure>
		if (accel->status[channel].accel_measuring)
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	33b8      	adds	r3, #184	@ 0xb8
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <VibeCheckAccel_UpdateSensor+0x64>
			LSM6DS3_StartAccel(&accel->sensor[channel]);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	3350      	adds	r3, #80	@ 0x50
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd f9dd 	bl	8000c2c <LSM6DS3_StartAccel>
		if (accel->status[channel].gyro_measuring)
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	33bc      	adds	r3, #188	@ 0xbc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <VibeCheckAccel_UpdateSensor+0x8c>
			LSM6DS3_StartGyro(&accel->sensor[channel]);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	3350      	adds	r3, #80	@ 0x50
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fa6b 	bl	8000d70 <LSM6DS3_StartGyro>
	}
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <VibeCheckAccel_AddData>:


void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6178      	str	r0, [r7, #20]
 80038aa:	460b      	mov	r3, r1
 80038ac:	60fa      	str	r2, [r7, #12]
 80038ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80038b2:	edc7 0a01 	vstr	s1, [r7, #4]
 80038b6:	ed87 1a00 	vstr	s2, [r7]
 80038ba:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	33f0      	adds	r3, #240	@ 0xf0
 80038d0:	7cfa      	ldrb	r2, [r7, #19]
 80038d2:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	33f4      	adds	r3, #244	@ 0xf4
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	33f8      	adds	r3, #248	@ 0xf8
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	33fc      	adds	r3, #252	@ 0xfc
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d104      	bne.n	8003958 <VibeCheckAccel_AddData+0xb6>
	{
		accel->data_ready = 1;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2201      	movs	r2, #1
 8003952:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 8003956:	e00c      	b.n	8003972 <VibeCheckAccel_AddData+0xd0>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 800395e:	2b14      	cmp	r3, #20
 8003960:	d107      	bne.n	8003972 <VibeCheckAccel_AddData+0xd0>
		accel->data_ind = 0;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
		accel->data_ready = 1;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2201      	movs	r2, #1
 800396e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <VibeCheckAccel_GetDataReady>:


uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 800398e:	2b00      	cmp	r3, #0
 8003990:	d015      	beq.n	80039be <VibeCheckAccel_GetDataReady+0x40>
	{
		accel->data_ready = 0;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d805      	bhi.n	80039b0 <VibeCheckAccel_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 72dc 	add.w	r2, r3, #440	@ 0x1b8
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e004      	b.n	80039ba <VibeCheckAccel_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
		}
		return 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <VibeCheckAccel_GetDataReady+0x42>
	}
	return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <VibeCheckAccel_EXTICallback>:


void VibeCheckAccel_EXTICallback(VibeCheckAccel* accel, uint16_t GPIO_Pin)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	@ 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	e089      	b.n	8003af2 <VibeCheckAccel_EXTICallback+0x126>
	{
		if (GPIO_Pin == accel->sensor[i].int1_pin && accel->status[i].accel_measuring)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	3303      	adds	r3, #3
 80039e4:	015b      	lsls	r3, r3, #5
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d138      	bne.n	8003a64 <VibeCheckAccel_EXTICallback+0x98>
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	33b8      	adds	r3, #184	@ 0xb8
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02d      	beq.n	8003a64 <VibeCheckAccel_EXTICallback+0x98>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&accel->sensor[i], &x, &y, &z);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	3350      	adds	r3, #80	@ 0x50
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	1d18      	adds	r0, r3, #4
 8003a14:	f107 0318 	add.w	r3, r7, #24
 8003a18:	f107 021c 	add.w	r2, r7, #28
 8003a1c:	f107 0120 	add.w	r1, r7, #32
 8003a20:	f7fd fa5a 	bl	8000ed8 <LSM6DS3_ReadAccel>
			VibeCheckAccel_AddData(accel, 2 * i, 0, x, y, z);  /* TODO: add time stamps */
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a30:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a34:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a38:	eeb0 1a66 	vmov.f32	s2, s13
 8003a3c:	eef0 0a47 	vmov.f32	s1, s14
 8003a40:	eeb0 0a67 	vmov.f32	s0, s15
 8003a44:	2200      	movs	r2, #0
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff2a 	bl	80038a2 <VibeCheckAccel_AddData>
			accel->status[i].received_data_flag = 1;
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	33c0      	adds	r3, #192	@ 0xc0
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
			break;
 8003a62:	e04b      	b.n	8003afc <VibeCheckAccel_EXTICallback+0x130>
		}

		if (GPIO_Pin == accel->sensor[i].int2_pin && accel->status[i].gyro_measuring)
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	015b      	lsls	r3, r3, #5
 8003a6a:	4413      	add	r3, r2
 8003a6c:	336c      	adds	r3, #108	@ 0x6c
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	887a      	ldrh	r2, [r7, #2]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d13a      	bne.n	8003aec <VibeCheckAccel_EXTICallback+0x120>
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	33bc      	adds	r3, #188	@ 0xbc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02f      	beq.n	8003aec <VibeCheckAccel_EXTICallback+0x120>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&accel->sensor[i], &x, &y, &z);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	015b      	lsls	r3, r3, #5
 8003a90:	3350      	adds	r3, #80	@ 0x50
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	1d18      	adds	r0, r3, #4
 8003a98:	f107 030c 	add.w	r3, r7, #12
 8003a9c:	f107 0210 	add.w	r2, r7, #16
 8003aa0:	f107 0114 	add.w	r1, r7, #20
 8003aa4:	f7fd fa9a 	bl	8000fdc <LSM6DS3_ReadGyro>
			VibeCheckAccel_AddData(accel, 2 * i + 1, 0, x, y, z);  /* TODO: add time stamps */
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ab8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003abc:	edd7 6a03 	vldr	s13, [r7, #12]
 8003ac0:	eeb0 1a66 	vmov.f32	s2, s13
 8003ac4:	eef0 0a47 	vmov.f32	s1, s14
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	2200      	movs	r2, #0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fee6 	bl	80038a2 <VibeCheckAccel_AddData>
			accel->status[i].received_data_flag = 1;
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	33c0      	adds	r3, #192	@ 0xc0
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
			break;
 8003aea:	e007      	b.n	8003afc <VibeCheckAccel_EXTICallback+0x130>
	for (uint32_t i = 0; i < VC_ACCEL_NUM_SENSORS; i++)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	3301      	adds	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f67f af72 	bls.w	80039de <VibeCheckAccel_EXTICallback+0x12>
		}
	}
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	3728      	adds	r7, #40	@ 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b094      	sub	sp, #80	@ 0x50
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	2240      	movs	r2, #64	@ 0x40
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f000 fe4c 	bl	80047b8 <VibeCheckShell_GetNextString>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d03c      	beq.n	8003ba0 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4920      	ldr	r1, [pc, #128]	@ (8003bac <VibeCheckAccelCMD_Execute+0xa8>)
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fbef 	bl	8000310 <strcmp>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d133      	bne.n	8003ba0 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	2240      	movs	r2, #64	@ 0x40
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f000 fe39 	bl	80047b8 <VibeCheckShell_GetNextString>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d029      	beq.n	8003ba0 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	4917      	ldr	r1, [pc, #92]	@ (8003bb0 <VibeCheckAccelCMD_Execute+0xac>)
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fbdc 	bl	8000310 <strcmp>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 8003b5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003b60:	f7ff fdfe 	bl	8003760 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8003b64:	4913      	ldr	r1, [pc, #76]	@ (8003bb4 <VibeCheckAccelCMD_Execute+0xb0>)
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f000 ff26 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f000 ffa1 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e015      	b.n	8003ba2 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	490f      	ldr	r1, [pc, #60]	@ (8003bb8 <VibeCheckAccelCMD_Execute+0xb4>)
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fbc7 	bl	8000310 <strcmp>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8003b88:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003b8a:	f7ff fdf7 	bl	800377c <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8003b8e:	4909      	ldr	r1, [pc, #36]	@ (8003bb4 <VibeCheckAccelCMD_Execute+0xb0>)
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f000 ff11 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f000 ff8c 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3750      	adds	r7, #80	@ 0x50
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	0801c564 	.word	0x0801c564
 8003bb0:	0801c570 	.word	0x0801c570
 8003bb4:	0801c578 	.word	0x0801c578
 8003bb8:	0801c57c 	.word	0x0801c57c

08003bbc <VibeCheckAccelSender_Data_Execute>:


uint32_t VibeCheckAccelSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6938      	ldr	r0, [r7, #16]
 8003bd2:	f7ff fed4 	bl	800397e <VibeCheckAccel_GetDataReady>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d04e      	beq.n	8003c7a <VibeCheckAccelSender_Data_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8003bdc:	4929      	ldr	r1, [pc, #164]	@ (8003c84 <VibeCheckAccelSender_Data_Execute+0xc8>)
 8003bde:	6838      	ldr	r0, [r7, #0]
 8003be0:	f000 feea 	bl	80049b8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f000 ff57 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8003bea:	210a      	movs	r1, #10
 8003bec:	6838      	ldr	r0, [r7, #0]
 8003bee:	f000 ff1d 	bl	8004a2c <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8003bf6:	e038      	b.n	8003c6a <VibeCheckAccelSender_Data_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8003bf8:	6838      	ldr	r0, [r7, #0]
 8003bfa:	f000 ff4d 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f000 ff11 	bl	8004a2c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f000 ff44 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4619      	mov	r1, r3
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f000 ff08 	bl	8004a2c <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f000 ff3b 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	6838      	ldr	r0, [r7, #0]
 8003c2e:	f000 ff15 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8003c32:	6838      	ldr	r0, [r7, #0]
 8003c34:	f000 ff30 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f000 ff0a 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f000 ff25 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c54:	eeb0 0a67 	vmov.f32	s0, s15
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f000 feff 	bl	8004a5c <VibeCheckShell_PutOutputFloat>

			data++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3314      	adds	r3, #20
 8003c62:	60fb      	str	r3, [r7, #12]
			data_written++;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d9c3      	bls.n	8003bf8 <VibeCheckAccelSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	f000 ff1f 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <VibeCheckAccelSender_Data_Execute+0xc0>
	}

	return 0;
 8003c7a:	2300      	movs	r3, #0

}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	0801c584 	.word	0x0801c584

08003c88 <VibeCheckAccelSender_Status_Execute>:


uint32_t VibeCheckAccelSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckAccel_ConnectionChanged(accel, &channel, &is_connected))
 8003c96:	f107 020c 	add.w	r2, r7, #12
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f7ff fd79 	bl	8003798 <VibeCheckAccel_ConnectionChanged>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d026      	beq.n	8003cfa <VibeCheckAccelSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8003cac:	4915      	ldr	r1, [pc, #84]	@ (8003d04 <VibeCheckAccelSender_Status_Execute+0x7c>)
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f000 fe82 	bl	80049b8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	f000 feef 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8003cba:	4913      	ldr	r1, [pc, #76]	@ (8003d08 <VibeCheckAccelSender_Status_Execute+0x80>)
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	f000 fe7b 	bl	80049b8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f000 fee8 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f000 fead 	bl	8004a2c <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8003cd2:	6838      	ldr	r0, [r7, #0]
 8003cd4:	f000 fee0 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <VibeCheckAccelSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8003cde:	490b      	ldr	r1, [pc, #44]	@ (8003d0c <VibeCheckAccelSender_Status_Execute+0x84>)
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f000 fe69 	bl	80049b8 <VibeCheckShell_PutOutputString>
 8003ce6:	e003      	b.n	8003cf0 <VibeCheckAccelSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8003ce8:	4909      	ldr	r1, [pc, #36]	@ (8003d10 <VibeCheckAccelSender_Status_Execute+0x88>)
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f000 fe64 	bl	80049b8 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f000 fedf 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <VibeCheckAccelSender_Status_Execute+0x74>
	}

	return 0;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	0801c58c 	.word	0x0801c58c
 8003d08:	0801c590 	.word	0x0801c590
 8003d0c:	0801c598 	.word	0x0801c598
 8003d10:	0801c5a4 	.word	0x0801c5a4

08003d14 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe f9fd 	bl	8002124 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe f9f7 	bl	8002124 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2263      	movs	r2, #99	@ 0x63
 8003d44:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e008      	b.n	8003d64 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	3210      	adds	r2, #16
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 8003d6a:	d3f2      	bcc.n	8003d52 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f94a 	bl	8004006 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f961 	bl	800403a <VibeCheckRGB_SendColors>
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	@ 0x28
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003d88:	f002 fa0e 	bl	80061a8 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003d94:	f107 0210 	add.w	r2, r7, #16
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f9f4 	bl	8002188 <Sequencer_Update>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d028      	beq.n	8003df8 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e01e      	b.n	8003dea <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	441a      	add	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	18ca      	adds	r2, r1, r3
 8003dc6:	f107 030c 	add.w	r3, r7, #12
 8003dca:	8811      	ldrh	r1, [r2, #0]
 8003dcc:	7892      	ldrb	r2, [r2, #2]
 8003dce:	8019      	strh	r1, [r3, #0]
 8003dd0:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003dd2:	7b3a      	ldrb	r2, [r7, #12]
 8003dd4:	7b79      	ldrb	r1, [r7, #13]
 8003dd6:	7bbb      	ldrb	r3, [r7, #14]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	69f9      	ldr	r1, [r7, #28]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8b9 	bl	8003f56 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d9dd      	bls.n	8003dac <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f922 	bl	800403a <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003df6:	e03c      	b.n	8003e72 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fa25 	bl	800224e <Sequencer_IsRunning>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d133      	bne.n	8003e72 <VibeCheckRGB_Update+0xf2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003e10:	f107 0210 	add.w	r2, r7, #16
 8003e14:	6979      	ldr	r1, [r7, #20]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe f9b6 	bl	8002188 <Sequencer_Update>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d027      	beq.n	8003e72 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e01e      	b.n	8003e66 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	441a      	add	r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	441a      	add	r2, r3
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	18ca      	adds	r2, r1, r3
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	8811      	ldrh	r1, [r2, #0]
 8003e48:	7892      	ldrb	r2, [r2, #2]
 8003e4a:	8019      	strh	r1, [r3, #0]
 8003e4c:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003e4e:	7a3a      	ldrb	r2, [r7, #8]
 8003e50:	7a79      	ldrb	r1, [r7, #9]
 8003e52:	7abb      	ldrb	r3, [r7, #10]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	460b      	mov	r3, r1
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f87b 	bl	8003f56 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	3301      	adds	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d9dd      	bls.n	8003e28 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8e4 	bl	800403a <VibeCheckRGB_SendColors>
}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003e96:	2301      	movs	r3, #1
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	f7fe f95e 	bl	800215c <Sequencer_SetSequence>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003eb6:	f002 f977 	bl	80061a8 <HAL_GetTick>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7fe f9a4 	bl	800220c <Sequencer_Start>
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}

08003ecc <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f9aa 	bl	8002234 <Sequencer_Stop>
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003f04:	2300      	movs	r3, #0
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	f7fe f927 	bl	800215c <Sequencer_SetSequence>
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003f16:	b590      	push	{r4, r7, lr}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 8003f24:	f002 f940 	bl	80061a8 <HAL_GetTick>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f7fe f96d 	bl	800220c <Sequencer_Start>
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}

08003f3a <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe f973 	bl	8002234 <Sequencer_Stop>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	4611      	mov	r1, r2
 8003f62:	461a      	mov	r2, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d901      	bls.n	8003f76 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003f72:	2308      	movs	r3, #8
 8003f74:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	3304      	adds	r3, #4
 8003f84:	79fa      	ldrb	r2, [r7, #7]
 8003f86:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	440b      	add	r3, r1
 8003f94:	3305      	adds	r3, #5
 8003f96:	79ba      	ldrb	r2, [r7, #6]
 8003f98:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3306      	adds	r3, #6
 8003fa8:	7e3a      	ldrb	r2, [r7, #24]
 8003faa:	701a      	strb	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d901      	bls.n	8003fcc <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003fc8:	2308      	movs	r3, #8
 8003fca:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	18ca      	adds	r2, r1, r3
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	3204      	adds	r2, #4
 8003fde:	8811      	ldrh	r1, [r2, #0]
 8003fe0:	7892      	ldrb	r2, [r2, #2]
 8003fe2:	8019      	strh	r1, [r3, #0]
 8003fe4:	709a      	strb	r2, [r3, #2]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	7b3a      	ldrb	r2, [r7, #12]
 8003fea:	f362 0307 	bfi	r3, r2, #0, #8
 8003fee:	7b7a      	ldrb	r2, [r7, #13]
 8003ff0:	f362 230f 	bfi	r3, r2, #8, #8
 8003ff4:	7bba      	ldrb	r2, [r7, #14]
 8003ff6:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af02      	add	r7, sp, #8
 800400c:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e00a      	b.n	800402a <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	2200      	movs	r2, #0
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ff99 	bl	8003f56 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d9f1      	bls.n	8004014 <VibeCheckRGB_SetAllOff+0xe>
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b088      	sub	sp, #32
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8004042:	23e0      	movs	r3, #224	@ 0xe0
 8004044:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e06e      	b.n	800412a <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 800404c:	2308      	movs	r3, #8
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e01d      	b.n	800408e <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	440b      	add	r3, r1
 800405e:	3305      	adds	r3, #5
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3b01      	subs	r3, #1
 8004068:	fa42 f303 	asr.w	r3, r2, r3
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <VibeCheckRGB_SendColors+0x3e>
 8004074:	2130      	movs	r1, #48	@ 0x30
 8004076:	e000      	b.n	800407a <VibeCheckRGB_SendColors+0x40>
 8004078:	2118      	movs	r1, #24
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	61fa      	str	r2, [r7, #28]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	3310      	adds	r3, #16
 8004084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1de      	bne.n	8004052 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8004094:	2308      	movs	r3, #8
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e01d      	b.n	80040d6 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	3304      	adds	r3, #4
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	fa42 f303 	asr.w	r3, r2, r3
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <VibeCheckRGB_SendColors+0x86>
 80040bc:	2130      	movs	r1, #48	@ 0x30
 80040be:	e000      	b.n	80040c2 <VibeCheckRGB_SendColors+0x88>
 80040c0:	2118      	movs	r1, #24
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	61fa      	str	r2, [r7, #28]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	3310      	adds	r3, #16
 80040cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1de      	bne.n	800409a <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80040dc:	2308      	movs	r3, #8
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e01d      	b.n	800411e <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	440b      	add	r3, r1
 80040ee:	3306      	adds	r3, #6
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	fa42 f303 	asr.w	r3, r2, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <VibeCheckRGB_SendColors+0xce>
 8004104:	2130      	movs	r1, #48	@ 0x30
 8004106:	e000      	b.n	800410a <VibeCheckRGB_SendColors+0xd0>
 8004108:	2118      	movs	r1, #24
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	61fa      	str	r2, [r7, #28]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	3310      	adds	r3, #16
 8004114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b01      	subs	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1de      	bne.n	80040e2 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3301      	adds	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d98d      	bls.n	800404c <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f103 0220 	add.w	r2, r3, #32
 800413a:	f44f 7326 	mov.w	r3, #664	@ 0x298
 800413e:	2100      	movs	r1, #0
 8004140:	f00c fcea 	bl	8010b18 <HAL_TIM_PWM_Start_DMA>
}
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09c      	sub	sp, #112	@ 0x70
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800415a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800415e:	2240      	movs	r2, #64	@ 0x40
 8004160:	4619      	mov	r1, r3
 8004162:	6838      	ldr	r0, [r7, #0]
 8004164:	f000 fb28 	bl	80047b8 <VibeCheckShell_GetNextString>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80c2 	beq.w	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8004170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004174:	4962      	ldr	r1, [pc, #392]	@ (8004300 <VibeCheckRGBCMD_Execute+0x1b4>)
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc f8ca 	bl	8000310 <strcmp>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d141      	bne.n	8004206 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8004182:	f107 0320 	add.w	r3, r7, #32
 8004186:	4619      	mov	r1, r3
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f000 fb85 	bl	8004898 <VibeCheckShell_GetNextInt>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80af 	beq.w	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8004196:	f107 031c 	add.w	r3, r7, #28
 800419a:	4619      	mov	r1, r3
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f000 fb7b 	bl	8004898 <VibeCheckShell_GetNextInt>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a5 	beq.w	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 80041aa:	f107 0318 	add.w	r3, r7, #24
 80041ae:	4619      	mov	r1, r3
 80041b0:	6838      	ldr	r0, [r7, #0]
 80041b2:	f000 fb71 	bl	8004898 <VibeCheckShell_GetNextInt>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 809b 	beq.w	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	6838      	ldr	r0, [r7, #0]
 80041c6:	f000 fb67 	bl	8004898 <VibeCheckShell_GetNextInt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8091 	beq.w	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	4618      	mov	r0, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	b2d9      	uxtb	r1, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	460b      	mov	r3, r1
 80041e6:	4601      	mov	r1, r0
 80041e8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80041ea:	f7ff feb4 	bl	8003f56 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 80041ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80041f0:	f7ff ff23 	bl	800403a <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 80041f4:	4943      	ldr	r1, [pc, #268]	@ (8004304 <VibeCheckRGBCMD_Execute+0x1b8>)
 80041f6:	6838      	ldr	r0, [r7, #0]
 80041f8:	f000 fbde 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f000 fc59 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004202:	2301      	movs	r3, #1
 8004204:	e077      	b.n	80042f6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8004206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800420a:	493f      	ldr	r1, [pc, #252]	@ (8004308 <VibeCheckRGBCMD_Execute+0x1bc>)
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc f87f 	bl	8000310 <strcmp>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d137      	bne.n	8004288 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	4619      	mov	r1, r3
 800421e:	6838      	ldr	r0, [r7, #0]
 8004220:	f000 fb3a 	bl	8004898 <VibeCheckShell_GetNextInt>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d064      	beq.n	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4619      	mov	r1, r3
 800422e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004230:	f7ff fec2 	bl	8003fb8 <VibeCheckRGB_GetColor>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	733a      	strb	r2, [r7, #12]
 800423a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800423e:	737a      	strb	r2, [r7, #13]
 8004240:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004244:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8004246:	492f      	ldr	r1, [pc, #188]	@ (8004304 <VibeCheckRGBCMD_Execute+0x1b8>)
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	f000 fbb5 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 800424e:	6838      	ldr	r0, [r7, #0]
 8004250:	f000 fc22 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8004254:	7b3b      	ldrb	r3, [r7, #12]
 8004256:	4619      	mov	r1, r3
 8004258:	6838      	ldr	r0, [r7, #0]
 800425a:	f000 fbe7 	bl	8004a2c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f000 fc1a 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8004264:	7b7b      	ldrb	r3, [r7, #13]
 8004266:	4619      	mov	r1, r3
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f000 fbdf 	bl	8004a2c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	f000 fc12 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8004274:	7bbb      	ldrb	r3, [r7, #14]
 8004276:	4619      	mov	r1, r3
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f000 fbd7 	bl	8004a2c <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 800427e:	6838      	ldr	r0, [r7, #0]
 8004280:	f000 fc18 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004284:	2301      	movs	r3, #1
 8004286:	e036      	b.n	80042f6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8004288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800428c:	491f      	ldr	r1, [pc, #124]	@ (800430c <VibeCheckRGBCMD_Execute+0x1c0>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f83e 	bl	8000310 <strcmp>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 800429a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800429c:	f7ff fe04 	bl	8003ea8 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 80042a0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80042a2:	f7ff fe38 	bl	8003f16 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 80042a6:	4917      	ldr	r1, [pc, #92]	@ (8004304 <VibeCheckRGBCMD_Execute+0x1b8>)
 80042a8:	6838      	ldr	r0, [r7, #0]
 80042aa:	f000 fb85 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80042ae:	6838      	ldr	r0, [r7, #0]
 80042b0:	f000 fc00 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e01e      	b.n	80042f6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 80042b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042bc:	4914      	ldr	r1, [pc, #80]	@ (8004310 <VibeCheckRGBCMD_Execute+0x1c4>)
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f826 	bl	8000310 <strcmp>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d114      	bne.n	80042f4 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 80042ca:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80042cc:	f7ff fdfe 	bl	8003ecc <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 80042d0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80042d2:	f7ff fe32 	bl	8003f3a <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 80042d6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80042d8:	f7ff fe95 	bl	8004006 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 80042dc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80042de:	f7ff feac 	bl	800403a <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 80042e2:	4908      	ldr	r1, [pc, #32]	@ (8004304 <VibeCheckRGBCMD_Execute+0x1b8>)
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f000 fb67 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80042ea:	6838      	ldr	r0, [r7, #0]
 80042ec:	f000 fbe2 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3768      	adds	r7, #104	@ 0x68
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	0801c5b4 	.word	0x0801c5b4
 8004304:	0801c5b8 	.word	0x0801c5b8
 8004308:	0801c5bc 	.word	0x0801c5bc
 800430c:	0801c5c0 	.word	0x0801c5c0
 8004310:	0801c5c8 	.word	0x0801c5c8

08004314 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800435a:	461a      	mov	r2, r3
 800435c:	2300      	movs	r3, #0
 800435e:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004366:	461a      	mov	r2, r3
 8004368:	2300      	movs	r3, #0
 800436a:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b099      	sub	sp, #100	@ 0x64
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8004390:	2300      	movs	r3, #0
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439e:	d302      	bcc.n	80043a6 <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8092 	beq.w	80044d6 <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 80043b8:	e08d      	b.n	80044d6 <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	2240      	movs	r2, #64	@ 0x40
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9f8 	bl	80047b8 <VibeCheckShell_GetNextString>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d04d      	beq.n	800446a <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043d2:	e041      	b.n	8004458 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 80043d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	f241 0218 	movw	r2, #4120	@ 0x1018
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	f107 020c 	add.w	r2, r7, #12
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fb ff8d 	bl	8000310 <strcmp>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11e      	bne.n	800443a <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	18ca      	adds	r2, r1, r3
 800440a:	f241 035c 	movw	r3, #4188	@ 0x105c
 800440e:	4413      	add	r3, r2
 8004410:	681c      	ldr	r4, [r3, #0]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	47a0      	blx	r4
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11f      	bne.n	8004472 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8004432:	2303      	movs	r3, #3
 8004434:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8004438:	e01b      	b.n	8004472 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004440:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004444:	3b01      	subs	r3, #1
 8004446:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004448:	429a      	cmp	r2, r3
 800444a:	d102      	bne.n	8004452 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800444c:	2302      	movs	r3, #2
 800444e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004454:	3301      	adds	r3, #1
 8004456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800445e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004464:	429a      	cmp	r2, r3
 8004466:	d3b5      	bcc.n	80043d4 <VibeCheckShell_Update+0x4c>
 8004468:	e004      	b.n	8004474 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800446a:	2302      	movs	r3, #2
 800446c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004470:	e000      	b.n	8004474 <VibeCheckShell_Update+0xec>
					break;
 8004472:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a8:	d103      	bne.n	80044b2 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 80044b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80044b6:	4619      	mov	r1, r3
 80044b8:	482c      	ldr	r0, [pc, #176]	@ (800456c <VibeCheckShell_Update+0x1e4>)
 80044ba:	f014 fc82 	bl	8018dc2 <strchr>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d100      	bne.n	80044c6 <VibeCheckShell_Update+0x13e>
		{
 80044c4:	e7d6      	b.n	8004474 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 80044c6:	bf00      	nop
		}


		shell->input_delimiter_count--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80044ce:	1e5a      	subs	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af6c 	bne.w	80043ba <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044e6:	e018      	b.n	800451a <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ec:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 80044f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f8:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	4790      	blx	r2
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8004514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004516:	3301      	adds	r3, #1
 8004518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004520:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8004524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004526:	429a      	cmp	r2, r3
 8004528:	d3de      	bcc.n	80044e8 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004536:	d302      	bcc.n	800453e <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 800453e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004540:	653b      	str	r3, [r7, #80]	@ 0x50
 8004542:	2300      	movs	r3, #0
 8004544:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004548:	f362 0307 	bfi	r3, r2, #0, #8
 800454c:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8004550:	f362 230f 	bfi	r3, r2, #8, #8
 8004554:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8004558:	f362 4317 	bfi	r3, r2, #16, #8
 800455c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8004560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8004564:	4618      	mov	r0, r3
 8004566:	3764      	adds	r7, #100	@ 0x64
 8004568:	46bd      	mov	sp, r7
 800456a:	bd90      	pop	{r4, r7, pc}
 800456c:	0801c5d0 	.word	0x0801c5d0

08004570 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8004570:	b084      	sub	sp, #16
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	f107 0014 	add.w	r0, r7, #20
 800457e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004588:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800458c:	2b3f      	cmp	r3, #63	@ 0x3f
 800458e:	d81a      	bhi.n	80045c6 <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004596:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800459a:	1c53      	adds	r3, r2, #1
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80045a2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	18ca      	adds	r2, r1, r3
 80045b2:	f241 0318 	movw	r3, #4120	@ 0x1018
 80045b6:	4413      	add	r3, r2
 80045b8:	3304      	adds	r3, #4
 80045ba:	f107 0114 	add.w	r1, r7, #20
 80045be:	2248      	movs	r2, #72	@ 0x48
 80045c0:	4618      	mov	r0, r3
 80045c2:	f014 fc94 	bl	8018eee <memcpy>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d0:	b004      	add	sp, #16
 80045d2:	4770      	bx	lr

080045d4 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80045e8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80045ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80045ee:	d814      	bhi.n	800461a <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80045f6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8004602:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	1d3a      	adds	r2, r7, #4
 8004612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004616:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e035      	b.n	80046a6 <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d036      	beq.n	80046b0 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	7811      	ldrb	r1, [r2, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004662:	d103      	bne.n	800466c <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	4619      	mov	r1, r3
 8004680:	480e      	ldr	r0, [pc, #56]	@ (80046bc <VibeCheckShell_PutInput+0x94>)
 8004682:	f014 fb9e 	bl	8018dc2 <strchr>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3301      	adds	r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3c5      	bcc.n	800463a <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 80046ae:	e000      	b.n	80046b2 <VibeCheckShell_PutInput+0x8a>
			break;
 80046b0:	bf00      	nop
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	0801c5d0 	.word	0x0801c5d0

080046c0 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d101      	bne.n	80046e4 <VibeCheckShell_GetOutput+0x24>
		return 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e062      	b.n	80047aa <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d930      	bls.n	800475a <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	441a      	add	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004730:	6959      	ldr	r1, [r3, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	1acb      	subs	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004744:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004754:	6153      	str	r3, [r2, #20]
		return 1;
 8004756:	2301      	movs	r3, #1
 8004758:	e027      	b.n	80047aa <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	441a      	add	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4413      	add	r3, r2
 8004790:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800479a:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a2:	461a      	mov	r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	6153      	str	r3, [r2, #20]
		return 1;
 80047a8:	2301      	movs	r3, #1
	}

}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e057      	b.n	800487a <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	5cd3      	ldrb	r3, [r2, r3]
 80047d4:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	4619      	mov	r1, r3
 80047da:	482c      	ldr	r0, [pc, #176]	@ (800488c <VibeCheckShell_GetNextString+0xd4>)
 80047dc:	f014 faf1 	bl	8018dc2 <strchr>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
				return 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e046      	b.n	8004884 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80047f6:	2300      	movs	r3, #0
 80047f8:	e044      	b.n	8004884 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004820:	d103      	bne.n	800482a <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800482a:	7cfb      	ldrb	r3, [r7, #19]
 800482c:	4619      	mov	r1, r3
 800482e:	4818      	ldr	r0, [pc, #96]	@ (8004890 <VibeCheckShell_GetNextString+0xd8>)
 8004830:	f014 fac7 	bl	8018dc2 <strchr>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
					return 1;
 8004846:	2301      	movs	r3, #1
 8004848:	e01c      	b.n	8004884 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	74bb      	strb	r3, [r7, #18]
 800484e:	7cbb      	ldrb	r3, [r7, #18]
 8004850:	3301      	adds	r3, #1
 8004852:	4a10      	ldr	r2, [pc, #64]	@ (8004894 <VibeCheckShell_GetNextString+0xdc>)
 8004854:	4413      	add	r3, r2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <VibeCheckShell_GetNextString+0xb0>
 8004860:	7cbb      	ldrb	r3, [r7, #18]
 8004862:	f103 0220 	add.w	r2, r3, #32
 8004866:	e000      	b.n	800486a <VibeCheckShell_GetNextString+0xb2>
 8004868:	7cba      	ldrb	r2, [r7, #18]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
				i++;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3301      	adds	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3a3      	bcc.n	80047ca <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	0801c5d0 	.word	0x0801c5d0
 8004890:	0801c5d4 	.word	0x0801c5d4
 8004894:	0801cc30 	.word	0x0801cc30

08004898 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b096      	sub	sp, #88	@ 0x58
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80048a2:	f107 0314 	add.w	r3, r7, #20
 80048a6:	2240      	movs	r2, #64	@ 0x40
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ff84 	bl	80047b8 <VibeCheckShell_GetNextString>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02f      	beq.n	8004916 <VibeCheckShell_GetNextInt+0x7e>
	{
		char valid[] = "-0123456789";
 80048b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004920 <VibeCheckShell_GetNextInt+0x88>)
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80048be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		for (uint32_t i = 0; i < strlen(str); i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c6:	e013      	b.n	80048f0 <VibeCheckShell_GetNextInt+0x58>
			if (strchr(valid, str[i]) == NULL)
 80048c8:	f107 0214 	add.w	r2, r7, #20
 80048cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f014 fa71 	bl	8018dc2 <strchr>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <VibeCheckShell_GetNextInt+0x52>
				return 0;  /* next token contains non-numeric characters */
 80048e6:	2300      	movs	r3, #0
 80048e8:	e016      	b.n	8004918 <VibeCheckShell_GetNextInt+0x80>
		for (uint32_t i = 0; i < strlen(str); i++)
 80048ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ec:	3301      	adds	r3, #1
 80048ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fb fd6b 	bl	80003d0 <strlen>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fe:	4293      	cmp	r3, r2
 8004900:	d3e2      	bcc.n	80048c8 <VibeCheckShell_GetNextInt+0x30>
		*next = atoi(str);
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	4618      	mov	r0, r3
 8004908:	f012 feb1 	bl	801766e <atoi>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
		return 1;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <VibeCheckShell_GetNextInt+0x80>
	}

	return 0;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3758      	adds	r7, #88	@ 0x58
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	0801c5d8 	.word	0x0801c5d8

08004924 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b099      	sub	sp, #100	@ 0x64
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800492e:	f107 031c 	add.w	r3, r7, #28
 8004932:	2240      	movs	r2, #64	@ 0x40
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ff3e 	bl	80047b8 <VibeCheckShell_GetNextString>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d033      	beq.n	80049aa <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 8004942:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <VibeCheckShell_GetNextFloat+0x90>)
 8004944:	f107 040c 	add.w	r4, r7, #12
 8004948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800494a:	c407      	stmia	r4!, {r0, r1, r2}
 800494c:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 800494e:	2300      	movs	r3, #0
 8004950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004952:	e013      	b.n	800497c <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 8004954:	f107 021c 	add.w	r2, r7, #28
 8004958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800495a:	4413      	add	r3, r2
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f014 fa2b 	bl	8018dc2 <strchr>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 8004972:	2300      	movs	r3, #0
 8004974:	e01a      	b.n	80049ac <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 8004976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004978:	3301      	adds	r3, #1
 800497a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	4618      	mov	r0, r3
 8004982:	f7fb fd25 	bl	80003d0 <strlen>
 8004986:	4602      	mov	r2, r0
 8004988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800498a:	4293      	cmp	r3, r2
 800498c:	d3e2      	bcc.n	8004954 <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4618      	mov	r0, r3
 8004994:	f012 fe68 	bl	8017668 <atof>
 8004998:	eeb0 7b40 	vmov.f64	d7, d0
 800499c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3764      	adds	r7, #100	@ 0x64
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}
 80049b4:	0801c5e4 	.word	0x0801c5e4

080049b8 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	while (*str)
 80049c2:	e027      	b.n	8004a14 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	1c53      	adds	r3, r2, #1
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80049da:	6101      	str	r1, [r0, #16]
 80049dc:	7811      	ldrb	r1, [r2, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	460a      	mov	r2, r1
 80049e4:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	3301      	adds	r3, #1
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049f8:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a06:	d105      	bne.n	8004a14 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6113      	str	r3, [r2, #16]
	while (*str)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1d3      	bne.n	80049c4 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b092      	sub	sp, #72	@ 0x48
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	4906      	ldr	r1, [pc, #24]	@ (8004a58 <VibeCheckShell_PutOutputInt+0x2c>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f014 f954 	bl	8018cec <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffb4 	bl	80049b8 <VibeCheckShell_PutOutputString>
}
 8004a50:	bf00      	nop
 8004a52:	3748      	adds	r7, #72	@ 0x48
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	0801c5f4 	.word	0x0801c5f4

08004a5c <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b092      	sub	sp, #72	@ 0x48
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a70:	f107 0008 	add.w	r0, r7, #8
 8004a74:	ec53 2b17 	vmov	r2, r3, d7
 8004a78:	4906      	ldr	r1, [pc, #24]	@ (8004a94 <VibeCheckShell_PutOutputFloat+0x38>)
 8004a7a:	f014 f937 	bl	8018cec <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff97 	bl	80049b8 <VibeCheckShell_PutOutputString>
}
 8004a8a:	bf00      	nop
 8004a8c:	3748      	adds	r7, #72	@ 0x48
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	0801c5f8 	.word	0x0801c5f8

08004a98 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8004aa0:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <VibeCheckShell_PutOutputSeparator+0x18>)
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff ff88 	bl	80049b8 <VibeCheckShell_PutOutputString>
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0801c5fc 	.word	0x0801c5fc

08004ab4 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8004abc:	4903      	ldr	r1, [pc, #12]	@ (8004acc <VibeCheckShell_PutOutputDelimiter+0x18>)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff7a 	bl	80049b8 <VibeCheckShell_PutOutputString>
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0801c5d0 	.word	0x0801c5d0

08004ad0 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ae6:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004aee:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f640 125f 	movw	r2, #2399	@ 0x95f
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f84a 	bl	8004ba8 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f928 	bl	8004d74 <VibeCheckStrobe_SetExposure>

}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f00b fd53 	bl	80105e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f00b fe35 	bl	80107b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2104      	movs	r1, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f00b fe2f 	bl	80107b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f00b fe29 	bl	80107b4 <HAL_TIM_PWM_Start>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f00b fd34 	bl	80105e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f00b ff32 	bl	80109ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f00b ff2c 	bl	80109ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2108      	movs	r1, #8
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f00b ff26 	bl	80109ec <HAL_TIM_PWM_Stop>
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8004bb4:	edd7 7a00 	vldr	s15, [r7]
 8004bb8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d502      	bpl.n	8004bcc <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8004bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004bca:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8004bcc:	edd7 7a00 	vldr	s15, [r7]
 8004bd0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004c3c <VibeCheckStrobe_SetFrequency+0x94>
 8004bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	dd01      	ble.n	8004be2 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8004bde:	4b18      	ldr	r3, [pc, #96]	@ (8004c40 <VibeCheckStrobe_SetFrequency+0x98>)
 8004be0:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8004be2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8004c44 <VibeCheckStrobe_SetFrequency+0x9c>
 8004be6:	ed97 7a00 	vldr	s14, [r7]
 8004bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c16:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004c44 <VibeCheckStrobe_SetFrequency+0x9c>
 8004c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6912      	ldr	r2, [r2, #16]
 8004c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	447a0000 	.word	0x447a0000
 8004c40:	447a0000 	.word	0x447a0000
 8004c44:	47c35000 	.word	0x47c35000

08004c48 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	ee07 3a90 	vmov	s15, r3
}
 8004c58:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8004c74:	edd7 7a00 	vldr	s15, [r7]
 8004c78:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d40 <VibeCheckStrobe_SetPhase+0xd8>
 8004c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d501      	bpl.n	8004c8a <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8004c86:	4b2f      	ldr	r3, [pc, #188]	@ (8004d44 <VibeCheckStrobe_SetPhase+0xdc>)
 8004c88:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8004c8a:	edd7 7a00 	vldr	s15, [r7]
 8004c8e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004d48 <VibeCheckStrobe_SetPhase+0xe0>
 8004c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	dd01      	ble.n	8004ca0 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <VibeCheckStrobe_SetPhase+0xe4>)
 8004c9e:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ca6:	ed97 7a00 	vldr	s14, [r7]
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8004cb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d50 <VibeCheckStrobe_SetPhase+0xe8>
 8004cba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd2:	ee17 3a90 	vmov	r3, s15
 8004cd6:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d029      	beq.n	8004d32 <VibeCheckStrobe_SetPhase+0xca>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d125      	bne.n	8004d32 <VibeCheckStrobe_SetPhase+0xca>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d121      	bne.n	8004d32 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d0e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8004d50 <VibeCheckStrobe_SetPhase+0xe8>
 8004d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	619a      	str	r2, [r3, #24]
	}
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	c3340000 	.word	0xc3340000
 8004d44:	c3340000 	.word	0xc3340000
 8004d48:	43340000 	.word	0x43340000
 8004d4c:	43340000 	.word	0x43340000
 8004d50:	43b40000 	.word	0x43b40000

08004d54 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	ee07 3a90 	vmov	s15, r3
}
 8004d64:	eeb0 0a67 	vmov.f32	s0, s15
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004e00 <VibeCheckStrobe_SetExposure+0x8c>
 8004d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004e04 <VibeCheckStrobe_SetExposure+0x90>
 8004d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d98:	ee17 3a90 	vmov	r3, s15
 8004d9c:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d904      	bls.n	8004db6 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dc0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8004e04 <VibeCheckStrobe_SetExposure+0x90>
 8004dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dc8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004e08 <VibeCheckStrobe_SetExposure+0x94>
 8004dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	3a83126f 	.word	0x3a83126f
 8004e04:	47c35000 	.word	0x47c35000
 8004e08:	447a0000 	.word	0x447a0000

08004e0c <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	ee07 3a90 	vmov	s15, r3
}
 8004e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6912      	ldr	r2, [r2, #16]
 8004e44:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6952      	ldr	r2, [r2, #20]
 8004e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	619a      	str	r2, [r3, #24]
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b096      	sub	sp, #88	@ 0x58
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004e82:	f107 0318 	add.w	r3, r7, #24
 8004e86:	2240      	movs	r2, #64	@ 0x40
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6838      	ldr	r0, [r7, #0]
 8004e8c:	f7ff fc94 	bl	80047b8 <VibeCheckShell_GetNextString>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d065      	beq.n	8004f62 <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8004e96:	f107 0318 	add.w	r3, r7, #24
 8004e9a:	4934      	ldr	r1, [pc, #208]	@ (8004f6c <VibeCheckStrobeCMD_Set+0xf4>)
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fa37 	bl	8000310 <strcmp>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d118      	bne.n	8004eda <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	4619      	mov	r1, r3
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f7ff fd38 	bl	8004924 <VibeCheckShell_GetNextFloat>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d053      	beq.n	8004f62 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8004eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe70 	bl	8004ba8 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004ec8:	4929      	ldr	r1, [pc, #164]	@ (8004f70 <VibeCheckStrobeCMD_Set+0xf8>)
 8004eca:	6838      	ldr	r0, [r7, #0]
 8004ecc:	f7ff fd74 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7ff fdef 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e044      	b.n	8004f64 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8004eda:	f107 0318 	add.w	r3, r7, #24
 8004ede:	4925      	ldr	r1, [pc, #148]	@ (8004f74 <VibeCheckStrobeCMD_Set+0xfc>)
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb fa15 	bl	8000310 <strcmp>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d118      	bne.n	8004f1e <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004eec:	f107 0310 	add.w	r3, r7, #16
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6838      	ldr	r0, [r7, #0]
 8004ef4:	f7ff fd16 	bl	8004924 <VibeCheckShell_GetNextFloat>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d031      	beq.n	8004f62 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8004efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f02:	eeb0 0a67 	vmov.f32	s0, s15
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff feae 	bl	8004c68 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004f0c:	4918      	ldr	r1, [pc, #96]	@ (8004f70 <VibeCheckStrobeCMD_Set+0xf8>)
 8004f0e:	6838      	ldr	r0, [r7, #0]
 8004f10:	f7ff fd52 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004f14:	6838      	ldr	r0, [r7, #0]
 8004f16:	f7ff fdcd 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e022      	b.n	8004f64 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8004f1e:	f107 0318 	add.w	r3, r7, #24
 8004f22:	4915      	ldr	r1, [pc, #84]	@ (8004f78 <VibeCheckStrobeCMD_Set+0x100>)
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb f9f3 	bl	8000310 <strcmp>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d118      	bne.n	8004f62 <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4619      	mov	r1, r3
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f7ff fcf4 	bl	8004924 <VibeCheckShell_GetNextFloat>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00f      	beq.n	8004f62 <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8004f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f46:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ff12 	bl	8004d74 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004f50:	4907      	ldr	r1, [pc, #28]	@ (8004f70 <VibeCheckStrobeCMD_Set+0xf8>)
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f7ff fd30 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004f58:	6838      	ldr	r0, [r7, #0]
 8004f5a:	f7ff fdab 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3758      	adds	r7, #88	@ 0x58
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	0801c600 	.word	0x0801c600
 8004f70:	0801c60c 	.word	0x0801c60c
 8004f74:	0801c610 	.word	0x0801c610
 8004f78:	0801c618 	.word	0x0801c618

08004f7c <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b092      	sub	sp, #72	@ 0x48
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f7ff fc12 	bl	80047b8 <VibeCheckShell_GetNextString>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d05c      	beq.n	8005054 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4930      	ldr	r1, [pc, #192]	@ (8005060 <VibeCheckStrobeCMD_Get+0xe4>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb f9b5 	bl	8000310 <strcmp>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004fac:	492d      	ldr	r1, [pc, #180]	@ (8005064 <VibeCheckStrobeCMD_Get+0xe8>)
 8004fae:	6838      	ldr	r0, [r7, #0]
 8004fb0:	f7ff fd02 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004fb4:	6838      	ldr	r0, [r7, #0]
 8004fb6:	f7ff fd6f 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fe44 	bl	8004c48 <VibeCheckStrobe_GetFrequency>
 8004fc0:	eef0 7a40 	vmov.f32	s15, s0
 8004fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc8:	6838      	ldr	r0, [r7, #0]
 8004fca:	f7ff fd47 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f7ff fd70 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e03e      	b.n	8005056 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	4922      	ldr	r1, [pc, #136]	@ (8005068 <VibeCheckStrobeCMD_Get+0xec>)
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb f996 	bl	8000310 <strcmp>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d115      	bne.n	8005016 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004fea:	491e      	ldr	r1, [pc, #120]	@ (8005064 <VibeCheckStrobeCMD_Get+0xe8>)
 8004fec:	6838      	ldr	r0, [r7, #0]
 8004fee:	f7ff fce3 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004ff2:	6838      	ldr	r0, [r7, #0]
 8004ff4:	f7ff fd50 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff feab 	bl	8004d54 <VibeCheckStrobe_GetPhase>
 8004ffe:	eef0 7a40 	vmov.f32	s15, s0
 8005002:	eeb0 0a67 	vmov.f32	s0, s15
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f7ff fd28 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800500c:	6838      	ldr	r0, [r7, #0]
 800500e:	f7ff fd51 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005012:	2301      	movs	r3, #1
 8005014:	e01f      	b.n	8005056 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8005016:	f107 0308 	add.w	r3, r7, #8
 800501a:	4914      	ldr	r1, [pc, #80]	@ (800506c <VibeCheckStrobeCMD_Get+0xf0>)
 800501c:	4618      	mov	r0, r3
 800501e:	f7fb f977 	bl	8000310 <strcmp>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d115      	bne.n	8005054 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005028:	490e      	ldr	r1, [pc, #56]	@ (8005064 <VibeCheckStrobeCMD_Get+0xe8>)
 800502a:	6838      	ldr	r0, [r7, #0]
 800502c:	f7ff fcc4 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005030:	6838      	ldr	r0, [r7, #0]
 8005032:	f7ff fd31 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fee8 	bl	8004e0c <VibeCheckStrobe_GetExposure>
 800503c:	eef0 7a40 	vmov.f32	s15, s0
 8005040:	eeb0 0a67 	vmov.f32	s0, s15
 8005044:	6838      	ldr	r0, [r7, #0]
 8005046:	f7ff fd09 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800504a:	6838      	ldr	r0, [r7, #0]
 800504c:	f7ff fd32 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3748      	adds	r7, #72	@ 0x48
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	0801c600 	.word	0x0801c600
 8005064:	0801c60c 	.word	0x0801c60c
 8005068:	0801c610 	.word	0x0801c610
 800506c:	0801c618 	.word	0x0801c618

08005070 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b094      	sub	sp, #80	@ 0x50
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	2240      	movs	r2, #64	@ 0x40
 8005084:	4619      	mov	r1, r3
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f7ff fb96 	bl	80047b8 <VibeCheckShell_GetNextString>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04d      	beq.n	800512e <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	4928      	ldr	r1, [pc, #160]	@ (8005138 <VibeCheckStrobeCMD_Execute+0xc8>)
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb f939 	bl	8000310 <strcmp>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80050a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80050a6:	f7ff fd41 	bl	8004b2c <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80050aa:	4924      	ldr	r1, [pc, #144]	@ (800513c <VibeCheckStrobeCMD_Execute+0xcc>)
 80050ac:	6838      	ldr	r0, [r7, #0]
 80050ae:	f7ff fc83 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f7ff fcfe 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e039      	b.n	8005130 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	491f      	ldr	r1, [pc, #124]	@ (8005140 <VibeCheckStrobeCMD_Execute+0xd0>)
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb f924 	bl	8000310 <strcmp>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 80050ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80050d0:	f7ff fd4b 	bl	8004b6a <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80050d4:	4919      	ldr	r1, [pc, #100]	@ (800513c <VibeCheckStrobeCMD_Execute+0xcc>)
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f7ff fc6e 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f7ff fce9 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e024      	b.n	8005130 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80050e6:	f107 030c 	add.w	r3, r7, #12
 80050ea:	4916      	ldr	r1, [pc, #88]	@ (8005144 <VibeCheckStrobeCMD_Execute+0xd4>)
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb f90f 	bl	8000310 <strcmp>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80050fc:	f7ff febc 	bl	8004e78 <VibeCheckStrobeCMD_Set>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005106:	2301      	movs	r3, #1
 8005108:	e012      	b.n	8005130 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 800510a:	f107 030c 	add.w	r3, r7, #12
 800510e:	490e      	ldr	r1, [pc, #56]	@ (8005148 <VibeCheckStrobeCMD_Execute+0xd8>)
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb f8fd 	bl	8000310 <strcmp>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d108      	bne.n	800512e <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005120:	f7ff ff2c 	bl	8004f7c <VibeCheckStrobeCMD_Get>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3750      	adds	r7, #80	@ 0x50
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0801c624 	.word	0x0801c624
 800513c:	0801c60c 	.word	0x0801c60c
 8005140:	0801c62c 	.word	0x0801c62c
 8005144:	0801c634 	.word	0x0801c634
 8005148:	0801c638 	.word	0x0801c638
 800514c:	00000000 	.word	0x00000000

08005150 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	ed2d 8b02 	vpush	{d8}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e032      	b.n	80051ce <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8005168:	edd7 7a01 	vldr	s15, [r7, #4]
 800516c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800517e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80051f0 <ComputeSineWave+0xa0>
 8005182:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005198:	eeb0 0b47 	vmov.f64	d0, d7
 800519c:	f016 faf4 	bl	801b788 <sin>
 80051a0:	eeb0 7b40 	vmov.f64	d7, d0
 80051a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80051a8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80051ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051b0:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80051e8 <ComputeSineWave+0x98>
 80051b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1d1a      	adds	r2, r3, #4
 80051bc:	60fa      	str	r2, [r7, #12]
 80051be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80051c2:	ee17 2a90 	vmov	r2, s15
 80051c6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3301      	adds	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d3c8      	bcc.n	8005168 <ComputeSineWave+0x18>
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	ecbd 8b02 	vpop	{d8}
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	f3af 8000 	nop.w
 80051e8:	00000000 	.word	0x00000000
 80051ec:	409ffe00 	.word	0x409ffe00
 80051f0:	40490fd0 	.word	0x40490fd0

080051f4 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e02c      	b.n	8005262 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d212      	bcs.n	8005238 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8005212:	edd7 7a01 	vldr	s15, [r7, #4]
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800521a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800521e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005278 <ComputeSquareWave+0x84>
 8005222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1d1a      	adds	r2, r3, #4
 800522a:	60fa      	str	r2, [r7, #12]
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 2a90 	vmov	r2, s15
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e011      	b.n	800525c <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800523c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005244:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005278 <ComputeSquareWave+0x84>
 8005248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	60fa      	str	r2, [r7, #12]
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3301      	adds	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3ce      	bcc.n	8005208 <ComputeSquareWave+0x14>
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	44fff000 	.word	0x44fff000

0800527c <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e052      	b.n	8005336 <ComputeSawWave+0xba>
		if (i < len / 2)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	429a      	cmp	r2, r3
 8005298:	d222      	bcs.n	80052e0 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80052a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800534c <ComputeSawWave+0xd0>
 80052ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d8:	ee17 2a90 	vmov	r2, s15
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e027      	b.n	8005330 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80052e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80052e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80052fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005302:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005310:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005318:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800534c <ComputeSawWave+0xd0>
 800531c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	60fa      	str	r2, [r7, #12]
 8005326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532a:	ee17 2a90 	vmov	r2, s15
 800532e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3301      	adds	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d3a8      	bcc.n	8005290 <ComputeSawWave+0x14>
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	44fff000 	.word	0x44fff000

08005350 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e082      	b.n	800546a <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	429a      	cmp	r2, r3
 800536c:	d221      	bcs.n	80053b2 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800537a:	edd7 7a01 	vldr	s15, [r7, #4]
 800537e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800538c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005398:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005484 <ComputeTriangleWave+0x134>
 800539c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	60fa      	str	r2, [r7, #12]
 80053a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053aa:	ee17 2a90 	vmov	r2, s15
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e058      	b.n	8005464 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d227      	bcs.n	8005412 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80053c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80053c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	edd7 7a01 	vldr	s15, [r7, #4]
 80053e2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80053f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005484 <ComputeTriangleWave+0x134>
 80053fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	60fa      	str	r2, [r7, #12]
 8005406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540a:	ee17 2a90 	vmov	r2, s15
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e028      	b.n	8005464 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8005412:	edd7 7a01 	vldr	s15, [r7, #4]
 8005416:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800541a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	edd7 7a01 	vldr	s15, [r7, #4]
 8005436:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005444:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005484 <ComputeTriangleWave+0x134>
 8005450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	60fa      	str	r2, [r7, #12]
 800545a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545e:	ee17 2a90 	vmov	r2, s15
 8005462:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3301      	adds	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	f4ff af78 	bcc.w	8005364 <ComputeTriangleWave+0x14>
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	44fff000 	.word	0x44fff000

08005488 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e008      	b.n	80054aa <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80054a2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3f2      	bcc.n	8005498 <ComputeNullWave+0x10>
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d044      	beq.n	8005560 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054dc:	7e1b      	ldrb	r3, [r3, #24]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d844      	bhi.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	08005513 	.word	0x08005513
 80054f0:	0800552d 	.word	0x0800552d
 80054f4:	08005547 	.word	0x08005547
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8005502:	eeb0 0a67 	vmov.f32	s0, s15
 8005506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800550a:	6838      	ldr	r0, [r7, #0]
 800550c:	f7ff fe20 	bl	8005150 <ComputeSineWave>
			break;
 8005510:	e02c      	b.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005518:	edd3 7a08 	vldr	s15, [r3, #32]
 800551c:	eeb0 0a67 	vmov.f32	s0, s15
 8005520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005524:	6838      	ldr	r0, [r7, #0]
 8005526:	f7ff fe65 	bl	80051f4 <ComputeSquareWave>
			break;
 800552a:	e01f      	b.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005532:	edd3 7a08 	vldr	s15, [r3, #32]
 8005536:	eeb0 0a67 	vmov.f32	s0, s15
 800553a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800553e:	6838      	ldr	r0, [r7, #0]
 8005540:	f7ff fe9c 	bl	800527c <ComputeSawWave>
			break;
 8005544:	e012      	b.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800554c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005550:	eeb0 0a67 	vmov.f32	s0, s15
 8005554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005558:	6838      	ldr	r0, [r7, #0]
 800555a:	f7ff fef9 	bl	8005350 <ComputeTriangleWave>
			break;
 800555e:	e005      	b.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8005560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005564:	6838      	ldr	r0, [r7, #0]
 8005566:	f7ff ff8f 	bl	8005488 <ComputeNullWave>
	}
}
 800556a:	e7ff      	b.n	800556c <VibeCheckWaveGen_RecomputeWave+0xac>
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005592:	461a      	mov	r2, r3
 8005594:	4b44      	ldr	r3, [pc, #272]	@ (80056a8 <VibeCheckWaveGen_Init+0x134>)
 8005596:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800559e:	461a      	mov	r2, r3
 80055a0:	4b42      	ldr	r3, [pc, #264]	@ (80056ac <VibeCheckWaveGen_Init+0x138>)
 80055a2:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055aa:	2200      	movs	r2, #0
 80055ac:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c0:	461a      	mov	r2, r3
 80055c2:	2300      	movs	r3, #0
 80055c4:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055e4:	461a      	mov	r2, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005614:	461a      	mov	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	220b      	movs	r2, #11
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800562a:	edd3 7a07 	vldr	s15, [r3, #28]
 800562e:	eeb0 0a67 	vmov.f32	s0, s15
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f920 	bl	8005878 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3308      	adds	r3, #8
 800563c:	4619      	mov	r1, r3
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff3e 	bl	80054c0 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff ff37 	bl	80054c0 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6858      	ldr	r0, [r3, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f103 0208 	add.w	r2, r3, #8
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005664:	2100      	movs	r1, #0
 8005666:	f002 faed 	bl	8007c44 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6858      	ldr	r0, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f103 0208 	add.w	r2, r3, #8
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800567c:	2110      	movs	r1, #16
 800567e:	f002 fae1 	bl	8007c44 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f00a ff2e 	bl	80104e8 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 800568c:	2200      	movs	r2, #0
 800568e:	2108      	movs	r1, #8
 8005690:	4807      	ldr	r0, [pc, #28]	@ (80056b0 <VibeCheckWaveGen_Init+0x13c>)
 8005692:	f005 f801 	bl	800a698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8005696:	2200      	movs	r2, #0
 8005698:	2102      	movs	r1, #2
 800569a:	4805      	ldr	r0, [pc, #20]	@ (80056b0 <VibeCheckWaveGen_Init+0x13c>)
 800569c:	f004 fffc 	bl	800a698 <HAL_GPIO_WritePin>
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	43dc0000 	.word	0x43dc0000
 80056ac:	3a83126f 	.word	0x3a83126f
 80056b0:	58020000 	.word	0x58020000

080056b4 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 80056bc:	f000 fd74 	bl	80061a8 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2bfa      	cmp	r3, #250	@ 0xfa
 80056d0:	d939      	bls.n	8005746 <VibeCheckWaveGen_Update+0x92>
 80056d2:	2104      	movs	r1, #4
 80056d4:	4843      	ldr	r0, [pc, #268]	@ (80057e4 <VibeCheckWaveGen_Update+0x130>)
 80056d6:	f004 ffc7 	bl	800a668 <HAL_GPIO_ReadPin>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d010      	beq.n	800570e <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 80056f8:	2200      	movs	r2, #0
 80056fa:	2108      	movs	r1, #8
 80056fc:	4839      	ldr	r0, [pc, #228]	@ (80057e4 <VibeCheckWaveGen_Update+0x130>)
 80056fe:	f004 ffcb 	bl	800a698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8005702:	2200      	movs	r2, #0
 8005704:	2102      	movs	r1, #2
 8005706:	4837      	ldr	r0, [pc, #220]	@ (80057e4 <VibeCheckWaveGen_Update+0x130>)
 8005708:	f004 ffc6 	bl	800a698 <HAL_GPIO_WritePin>
 800570c:	e00f      	b.n	800572e <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005714:	461a      	mov	r2, r3
 8005716:	2301      	movs	r3, #1
 8005718:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 800571a:	2201      	movs	r2, #1
 800571c:	2108      	movs	r1, #8
 800571e:	4831      	ldr	r0, [pc, #196]	@ (80057e4 <VibeCheckWaveGen_Update+0x130>)
 8005720:	f004 ffba 	bl	800a698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8005724:	2201      	movs	r2, #1
 8005726:	2102      	movs	r1, #2
 8005728:	482e      	ldr	r0, [pc, #184]	@ (80057e4 <VibeCheckWaveGen_Update+0x130>)
 800572a:	f004 ffb5 	bl	800a698 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005734:	461a      	mov	r2, r3
 8005736:	2301      	movs	r3, #1
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005740:	461a      	mov	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3308      	adds	r3, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff feb1 	bl	80054c0 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00c      	beq.n	8005790 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fe9e 	bl	80054c0 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	f241 0338 	movw	r3, #4152	@ 0x1038
 8005796:	4413      	add	r3, r2
 8005798:	f107 0208 	add.w	r2, r7, #8
 800579c:	68f9      	ldr	r1, [r7, #12]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fc fcf2 	bl	8002188 <Sequencer_Update>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <VibeCheckWaveGen_Update+0x110>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a0b      	ldr	r2, [pc, #44]	@ (80057e8 <VibeCheckWaveGen_Update+0x134>)
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	edd3 7a00 	vldr	s15, [r3]
 80057c2:	e005      	b.n	80057d0 <VibeCheckWaveGen_Update+0x11c>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <VibeCheckWaveGen_Update+0x138>)
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	edd3 7a00 	vldr	s15, [r3]
 80057d0:	eeb0 0a67 	vmov.f32	s0, s15
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f84f 	bl	8005878 <VibeCheckWaveGen_SetFrequency>
	}

}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	58020000 	.word	0x58020000
 80057e8:	0801caf4 	.word	0x0801caf4
 80057ec:	0801c9d8 	.word	0x0801c9d8

080057f0 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d111      	bne.n	8005828 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800580a:	461a      	mov	r2, r3
 800580c:	2301      	movs	r3, #1
 800580e:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005816:	461a      	mov	r2, r3
 8005818:	2301      	movs	r3, #1
 800581a:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005822:	461a      	mov	r2, r3
 8005824:	2301      	movs	r3, #1
 8005826:	60d3      	str	r3, [r2, #12]
	}

}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d011      	beq.n	800586c <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800584e:	461a      	mov	r2, r3
 8005850:	2300      	movs	r3, #0
 8005852:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585a:	461a      	mov	r2, r3
 800585c:	2301      	movs	r3, #1
 800585e:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005866:	461a      	mov	r2, r3
 8005868:	2301      	movs	r3, #1
 800586a:	60d3      	str	r3, [r2, #12]
	}
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8005884:	edd7 7a00 	vldr	s15, [r7]
 8005888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005890:	d502      	bpl.n	8005898 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8005898:	edd7 7a00 	vldr	s15, [r7]
 800589c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005918 <VibeCheckWaveGen_SetFrequency+0xa0>
 80058a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	dd01      	ble.n	80058ae <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80058aa:	4b1c      	ldr	r3, [pc, #112]	@ (800591c <VibeCheckWaveGen_SetFrequency+0xa4>)
 80058ac:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80058ae:	edd7 7a00 	vldr	s15, [r7]
 80058b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005920 <VibeCheckWaveGen_SetFrequency+0xa8>
 80058b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058ba:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8005924 <VibeCheckWaveGen_SetFrequency+0xac>
 80058be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ce:	ee17 3a90 	vmov	r3, s15
 80058d2:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058e6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8005924 <VibeCheckWaveGen_SetFrequency+0xac>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8005920 <VibeCheckWaveGen_SetFrequency+0xa8>
 80058f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058fc:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	46989600 	.word	0x46989600
 800591c:	46989600 	.word	0x46989600
 8005920:	44000000 	.word	0x44000000
 8005924:	4b989680 	.word	0x4b989680

08005928 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	ee07 3a90 	vmov	s15, r3
}
 800593c:	eeb0 0a67 	vmov.f32	s0, s15
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8005956:	edd7 7a00 	vldr	s15, [r7]
 800595a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005962:	d502      	bpl.n	800596a <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 800596a:	edd7 7a00 	vldr	s15, [r7]
 800596e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597a:	dd02      	ble.n	8005982 <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 800597c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005980:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005988:	461a      	mov	r2, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005994:	461a      	mov	r2, r3
 8005996:	2301      	movs	r3, #1
 8005998:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a0:	461a      	mov	r2, r3
 80059a2:	2301      	movs	r3, #1
 80059a4:	60d3      	str	r3, [r2, #12]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	ee07 3a90 	vmov	s15, r3
}
 80059c6:	eeb0 0a67 	vmov.f32	s0, s15
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e6:	461a      	mov	r2, r3
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f2:	461a      	mov	r2, r3
 80059f4:	2301      	movs	r3, #1
 80059f6:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fe:	461a      	mov	r2, r3
 8005a00:	2301      	movs	r3, #1
 8005a02:	60d3      	str	r3, [r2, #12]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1e:	7e1b      	ldrb	r3, [r3, #24]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	601a      	str	r2, [r3, #0]
		return 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a86:	461a      	mov	r2, r3
 8005a88:	2300      	movs	r3, #0
 8005a8a:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a92:	461a      	mov	r2, r3
 8005a94:	2301      	movs	r3, #1
 8005a96:	6113      	str	r3, [r2, #16]
	}
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aca:	461a      	mov	r2, r3
 8005acc:	2301      	movs	r3, #1
 8005ace:	6153      	str	r3, [r2, #20]
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	f241 0338 	movw	r3, #4152	@ 0x1038
 8005aea:	4413      	add	r3, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fc fb19 	bl	8002124 <Sequencer_Init>
	if (wavegen->demo_num)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f241 0038 	movw	r0, #4152	@ 0x1038
 8005b04:	4418      	add	r0, r3
 8005b06:	2301      	movs	r3, #1
 8005b08:	221a      	movs	r2, #26
 8005b0a:	4916      	ldr	r1, [pc, #88]	@ (8005b64 <VibeCheckWaveGen_StartDemo+0x88>)
 8005b0c:	f7fc fb26 	bl	800215c <Sequencer_SetSequence>
 8005b10:	e008      	b.n	8005b24 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f241 0038 	movw	r0, #4152	@ 0x1038
 8005b18:	4418      	add	r0, r3
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	222d      	movs	r2, #45	@ 0x2d
 8005b1e:	4912      	ldr	r1, [pc, #72]	@ (8005b68 <VibeCheckWaveGen_StartDemo+0x8c>)
 8005b20:	f7fc fb1c 	bl	800215c <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3e:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f241 0438 	movw	r4, #4152	@ 0x1038
 8005b46:	441c      	add	r4, r3
 8005b48:	f000 fb2e 	bl	80061a8 <HAL_GetTick>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7fc fb5b 	bl	800220c <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fe4a 	bl	80057f0 <VibeCheckWaveGen_Start>
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}
 8005b64:	0801c970 	.word	0x0801c970
 8005b68:	0801ca40 	.word	0x0801ca40

08005b6c <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe5d 	bl	8005834 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	f241 0338 	movw	r3, #4152	@ 0x1038
 8005b80:	4413      	add	r3, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fb56 	bl	8002234 <Sequencer_Stop>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b094      	sub	sp, #80	@ 0x50
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b9a:	f107 0310 	add.w	r3, r7, #16
 8005b9e:	2240      	movs	r2, #64	@ 0x40
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6838      	ldr	r0, [r7, #0]
 8005ba4:	f7fe fe08 	bl	80047b8 <VibeCheckShell_GetNextString>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80b0 	beq.w	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	4959      	ldr	r1, [pc, #356]	@ (8005d1c <VibeCheckWaveGenCMD_Set+0x18c>)
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fa fbaa 	bl	8000310 <strcmp>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d119      	bne.n	8005bf6 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005bc2:	f107 030c 	add.w	r3, r7, #12
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6838      	ldr	r0, [r7, #0]
 8005bca:	f7fe feab 	bl	8004924 <VibeCheckShell_GetNextFloat>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 809d 	beq.w	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8005bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bda:	eeb0 0a67 	vmov.f32	s0, s15
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fe4a 	bl	8005878 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005be4:	494e      	ldr	r1, [pc, #312]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005be6:	6838      	ldr	r0, [r7, #0]
 8005be8:	f7fe fee6 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005bec:	6838      	ldr	r0, [r7, #0]
 8005bee:	f7fe ff61 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e08d      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8005bf6:	f107 0310 	add.w	r3, r7, #16
 8005bfa:	494a      	ldr	r1, [pc, #296]	@ (8005d24 <VibeCheckWaveGenCMD_Set+0x194>)
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fa fb87 	bl	8000310 <strcmp>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d118      	bne.n	8005c3a <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005c08:	f107 0308 	add.w	r3, r7, #8
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6838      	ldr	r0, [r7, #0]
 8005c10:	f7fe fe88 	bl	8004924 <VibeCheckShell_GetNextFloat>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d07a      	beq.n	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8005c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fe91 	bl	800594a <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005c28:	493d      	ldr	r1, [pc, #244]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f7fe fec4 	bl	80049b8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	f7fe ff3f 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8005c3a:	f107 0310 	add.w	r3, r7, #16
 8005c3e:	493a      	ldr	r1, [pc, #232]	@ (8005d28 <VibeCheckWaveGenCMD_Set+0x198>)
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fa fb65 	bl	8000310 <strcmp>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d161      	bne.n	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	2240      	movs	r2, #64	@ 0x40
 8005c52:	4619      	mov	r1, r3
 8005c54:	6838      	ldr	r0, [r7, #0]
 8005c56:	f7fe fdaf 	bl	80047b8 <VibeCheckShell_GetNextString>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d057      	beq.n	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	4931      	ldr	r1, [pc, #196]	@ (8005d2c <VibeCheckWaveGenCMD_Set+0x19c>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fa fb52 	bl	8000310 <strcmp>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8005c72:	2100      	movs	r1, #0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff fead 	bl	80059d4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005c7a:	4929      	ldr	r1, [pc, #164]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005c7c:	6838      	ldr	r0, [r7, #0]
 8005c7e:	f7fe fe9b 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f7fe ff16 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e042      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	4927      	ldr	r1, [pc, #156]	@ (8005d30 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fb3c 	bl	8000310 <strcmp>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fe97 	bl	80059d4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005ca6:	491e      	ldr	r1, [pc, #120]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005ca8:	6838      	ldr	r0, [r7, #0]
 8005caa:	f7fe fe85 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005cae:	6838      	ldr	r0, [r7, #0]
 8005cb0:	f7fe ff00 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e02c      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8005cb8:	f107 0310 	add.w	r3, r7, #16
 8005cbc:	491d      	ldr	r1, [pc, #116]	@ (8005d34 <VibeCheckWaveGenCMD_Set+0x1a4>)
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fb26 	bl	8000310 <strcmp>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8005cca:	2102      	movs	r1, #2
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fe81 	bl	80059d4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005cd2:	4913      	ldr	r1, [pc, #76]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005cd4:	6838      	ldr	r0, [r7, #0]
 8005cd6:	f7fe fe6f 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005cda:	6838      	ldr	r0, [r7, #0]
 8005cdc:	f7fe feea 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e016      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8005ce4:	f107 0310 	add.w	r3, r7, #16
 8005ce8:	4913      	ldr	r1, [pc, #76]	@ (8005d38 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fa fb10 	bl	8000310 <strcmp>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10c      	bne.n	8005d10 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8005cf6:	2103      	movs	r1, #3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fe6b 	bl	80059d4 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005cfe:	4908      	ldr	r1, [pc, #32]	@ (8005d20 <VibeCheckWaveGenCMD_Set+0x190>)
 8005d00:	6838      	ldr	r0, [r7, #0]
 8005d02:	f7fe fe59 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005d06:	6838      	ldr	r0, [r7, #0]
 8005d08:	f7fe fed4 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3750      	adds	r7, #80	@ 0x50
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	0801c63c 	.word	0x0801c63c
 8005d20:	0801c648 	.word	0x0801c648
 8005d24:	0801c64c 	.word	0x0801c64c
 8005d28:	0801c658 	.word	0x0801c658
 8005d2c:	0801c664 	.word	0x0801c664
 8005d30:	0801c66c 	.word	0x0801c66c
 8005d34:	0801c674 	.word	0x0801c674
 8005d38:	0801c678 	.word	0x0801c678

08005d3c <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b092      	sub	sp, #72	@ 0x48
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005d46:	f107 0308 	add.w	r3, r7, #8
 8005d4a:	2240      	movs	r2, #64	@ 0x40
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6838      	ldr	r0, [r7, #0]
 8005d50:	f7fe fd32 	bl	80047b8 <VibeCheckShell_GetNextString>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d077      	beq.n	8005e4a <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	493d      	ldr	r1, [pc, #244]	@ (8005e54 <VibeCheckWaveGenCMD_Get+0x118>)
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa fad5 	bl	8000310 <strcmp>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d115      	bne.n	8005d98 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005d6c:	493a      	ldr	r1, [pc, #232]	@ (8005e58 <VibeCheckWaveGenCMD_Get+0x11c>)
 8005d6e:	6838      	ldr	r0, [r7, #0]
 8005d70:	f7fe fe22 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005d74:	6838      	ldr	r0, [r7, #0]
 8005d76:	f7fe fe8f 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fdd4 	bl	8005928 <VibeCheckWaveGen_GetFrequency>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	eeb0 0a67 	vmov.f32	s0, s15
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	f7fe fe67 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005d8e:	6838      	ldr	r0, [r7, #0]
 8005d90:	f7fe fe90 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e059      	b.n	8005e4c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8005d98:	f107 0308 	add.w	r3, r7, #8
 8005d9c:	492f      	ldr	r1, [pc, #188]	@ (8005e5c <VibeCheckWaveGenCMD_Get+0x120>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fab6 	bl	8000310 <strcmp>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d115      	bne.n	8005dd6 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005daa:	492b      	ldr	r1, [pc, #172]	@ (8005e58 <VibeCheckWaveGenCMD_Get+0x11c>)
 8005dac:	6838      	ldr	r0, [r7, #0]
 8005dae:	f7fe fe03 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005db2:	6838      	ldr	r0, [r7, #0]
 8005db4:	f7fe fe70 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fdfa 	bl	80059b2 <VibeCheckWaveGen_GetAmplitude>
 8005dbe:	eef0 7a40 	vmov.f32	s15, s0
 8005dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f7fe fe48 	bl	8004a5c <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005dcc:	6838      	ldr	r0, [r7, #0]
 8005dce:	f7fe fe71 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e03a      	b.n	8005e4c <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4921      	ldr	r1, [pc, #132]	@ (8005e60 <VibeCheckWaveGenCMD_Get+0x124>)
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa fa97 	bl	8000310 <strcmp>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d130      	bne.n	8005e4a <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005de8:	491b      	ldr	r1, [pc, #108]	@ (8005e58 <VibeCheckWaveGenCMD_Get+0x11c>)
 8005dea:	6838      	ldr	r0, [r7, #0]
 8005dec:	f7fe fde4 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005df0:	6838      	ldr	r0, [r7, #0]
 8005df2:	f7fe fe51 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fe0a 	bl	8005a10 <VibeCheckWaveGen_GetWaveform>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d81e      	bhi.n	8005e40 <VibeCheckWaveGenCMD_Get+0x104>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <VibeCheckWaveGenCMD_Get+0xcc>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e23 	.word	0x08005e23
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	08005e37 	.word	0x08005e37
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8005e18:	4912      	ldr	r1, [pc, #72]	@ (8005e64 <VibeCheckWaveGenCMD_Get+0x128>)
 8005e1a:	6838      	ldr	r0, [r7, #0]
 8005e1c:	f7fe fdcc 	bl	80049b8 <VibeCheckShell_PutOutputString>
				break;
 8005e20:	e00e      	b.n	8005e40 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8005e22:	4911      	ldr	r1, [pc, #68]	@ (8005e68 <VibeCheckWaveGenCMD_Get+0x12c>)
 8005e24:	6838      	ldr	r0, [r7, #0]
 8005e26:	f7fe fdc7 	bl	80049b8 <VibeCheckShell_PutOutputString>
				break;
 8005e2a:	e009      	b.n	8005e40 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8005e2c:	490f      	ldr	r1, [pc, #60]	@ (8005e6c <VibeCheckWaveGenCMD_Get+0x130>)
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	f7fe fdc2 	bl	80049b8 <VibeCheckShell_PutOutputString>
				break;
 8005e34:	e004      	b.n	8005e40 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8005e36:	490e      	ldr	r1, [pc, #56]	@ (8005e70 <VibeCheckWaveGenCMD_Get+0x134>)
 8005e38:	6838      	ldr	r0, [r7, #0]
 8005e3a:	f7fe fdbd 	bl	80049b8 <VibeCheckShell_PutOutputString>
				break;
 8005e3e:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8005e40:	6838      	ldr	r0, [r7, #0]
 8005e42:	f7fe fe37 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3748      	adds	r7, #72	@ 0x48
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	0801c63c 	.word	0x0801c63c
 8005e58:	0801c648 	.word	0x0801c648
 8005e5c:	0801c64c 	.word	0x0801c64c
 8005e60:	0801c658 	.word	0x0801c658
 8005e64:	0801c664 	.word	0x0801c664
 8005e68:	0801c66c 	.word	0x0801c66c
 8005e6c:	0801c674 	.word	0x0801c674
 8005e70:	0801c678 	.word	0x0801c678

08005e74 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b094      	sub	sp, #80	@ 0x50
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005e82:	f107 030c 	add.w	r3, r7, #12
 8005e86:	2240      	movs	r2, #64	@ 0x40
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f7fe fc94 	bl	80047b8 <VibeCheckShell_GetNextString>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 808b 	beq.w	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	4946      	ldr	r1, [pc, #280]	@ (8005fb8 <VibeCheckWaveGenCMD_Execute+0x144>)
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fa fa36 	bl	8000310 <strcmp>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8005eaa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005eac:	f7ff fca0 	bl	80057f0 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005eb0:	4942      	ldr	r1, [pc, #264]	@ (8005fbc <VibeCheckWaveGenCMD_Execute+0x148>)
 8005eb2:	6838      	ldr	r0, [r7, #0]
 8005eb4:	f7fe fd80 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005eb8:	6838      	ldr	r0, [r7, #0]
 8005eba:	f7fe fdfb 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e076      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8005ec2:	f107 030c 	add.w	r3, r7, #12
 8005ec6:	493e      	ldr	r1, [pc, #248]	@ (8005fc0 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa fa21 	bl	8000310 <strcmp>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8005ed4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005ed6:	f7ff fcad 	bl	8005834 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005eda:	4938      	ldr	r1, [pc, #224]	@ (8005fbc <VibeCheckWaveGenCMD_Execute+0x148>)
 8005edc:	6838      	ldr	r0, [r7, #0]
 8005ede:	f7fe fd6b 	bl	80049b8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005ee2:	6838      	ldr	r0, [r7, #0]
 8005ee4:	f7fe fde6 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e061      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	4934      	ldr	r1, [pc, #208]	@ (8005fc4 <VibeCheckWaveGenCMD_Execute+0x150>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fa fa0c 	bl	8000310 <strcmp>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005f02:	f7ff fe45 	bl	8005b90 <VibeCheckWaveGenCMD_Set>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d050      	beq.n	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e04f      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	492c      	ldr	r1, [pc, #176]	@ (8005fc8 <VibeCheckWaveGenCMD_Execute+0x154>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fa f9fa 	bl	8000310 <strcmp>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005f26:	f7ff ff09 	bl	8005d3c <VibeCheckWaveGenCMD_Get>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d03e      	beq.n	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e03d      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	4924      	ldr	r1, [pc, #144]	@ (8005fcc <VibeCheckWaveGenCMD_Execute+0x158>)
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fa f9e8 	bl	8000310 <strcmp>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d133      	bne.n	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f7fe fc32 	bl	80047b8 <VibeCheckShell_GetNextString>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d029      	beq.n	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8005f5a:	f107 030c 	add.w	r3, r7, #12
 8005f5e:	4916      	ldr	r1, [pc, #88]	@ (8005fb8 <VibeCheckWaveGenCMD_Execute+0x144>)
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fa f9d5 	bl	8000310 <strcmp>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8005f6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005f6e:	f7ff fdb5 	bl	8005adc <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005f72:	4912      	ldr	r1, [pc, #72]	@ (8005fbc <VibeCheckWaveGenCMD_Execute+0x148>)
 8005f74:	6838      	ldr	r0, [r7, #0]
 8005f76:	f7fe fd1f 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005f7a:	6838      	ldr	r0, [r7, #0]
 8005f7c:	f7fe fd9a 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e015      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	490d      	ldr	r1, [pc, #52]	@ (8005fc0 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa f9c0 	bl	8000310 <strcmp>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8005f96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005f98:	f7ff fde8 	bl	8005b6c <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005f9c:	4907      	ldr	r1, [pc, #28]	@ (8005fbc <VibeCheckWaveGenCMD_Execute+0x148>)
 8005f9e:	6838      	ldr	r0, [r7, #0]
 8005fa0:	f7fe fd0a 	bl	80049b8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005fa4:	6838      	ldr	r0, [r7, #0]
 8005fa6:	f7fe fd85 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3750      	adds	r7, #80	@ 0x50
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	0801c684 	.word	0x0801c684
 8005fbc:	0801c648 	.word	0x0801c648
 8005fc0:	0801c68c 	.word	0x0801c68c
 8005fc4:	0801c694 	.word	0x0801c694
 8005fc8:	0801c698 	.word	0x0801c698
 8005fcc:	0801c69c 	.word	0x0801c69c

08005fd0 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fd21 	bl	8005a2c <VibeCheckWaveGen_WasMuteButtonPressed>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01e      	beq.n	800602e <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8005ff0:	4911      	ldr	r1, [pc, #68]	@ (8006038 <VibeCheckWaveGenSender_Execute+0x68>)
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f7fe fce0 	bl	80049b8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005ff8:	6838      	ldr	r0, [r7, #0]
 8005ffa:	f7fe fd4d 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 8005ffe:	490f      	ldr	r1, [pc, #60]	@ (800603c <VibeCheckWaveGenSender_Execute+0x6c>)
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7fe fcd9 	bl	80049b8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f7fe fd46 	bl	8004a98 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 8006012:	490b      	ldr	r1, [pc, #44]	@ (8006040 <VibeCheckWaveGenSender_Execute+0x70>)
 8006014:	6838      	ldr	r0, [r7, #0]
 8006016:	f7fe fccf 	bl	80049b8 <VibeCheckShell_PutOutputString>
 800601a:	e003      	b.n	8006024 <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 800601c:	4909      	ldr	r1, [pc, #36]	@ (8006044 <VibeCheckWaveGenSender_Execute+0x74>)
 800601e:	6838      	ldr	r0, [r7, #0]
 8006020:	f7fe fcca 	bl	80049b8 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8006024:	6838      	ldr	r0, [r7, #0]
 8006026:	f7fe fd45 	bl	8004ab4 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	0801c6a4 	.word	0x0801c6a4
 800603c:	0801c6a8 	.word	0x0801c6a8
 8006040:	0801c6b0 	.word	0x0801c6b0
 8006044:	0801c6b8 	.word	0x0801c6b8

08006048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800604c:	f7fc fee2 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006050:	480c      	ldr	r0, [pc, #48]	@ (8006084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006052:	490d      	ldr	r1, [pc, #52]	@ (8006088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006054:	4a0d      	ldr	r2, [pc, #52]	@ (800608c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006058:	e002      	b.n	8006060 <LoopCopyDataInit>

0800605a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800605a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800605c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800605e:	3304      	adds	r3, #4

08006060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006064:	d3f9      	bcc.n	800605a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006066:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006068:	4c0a      	ldr	r4, [pc, #40]	@ (8006094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800606a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800606c:	e001      	b.n	8006072 <LoopFillZerobss>

0800606e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800606e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006070:	3204      	adds	r2, #4

08006072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006074:	d3fb      	bcc.n	800606e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006076:	f012 ff13 	bl	8018ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800607a:	f7fb f901 	bl	8001280 <main>
  bx  lr
 800607e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006080:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006084:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006088:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 800608c:	0801d328 	.word	0x0801d328
  ldr r2, =_sbss
 8006090:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8006094:	24006364 	.word	0x24006364

08006098 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006098:	e7fe      	b.n	8006098 <ADC3_IRQHandler>
	...

0800609c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060a2:	2003      	movs	r0, #3
 80060a4:	f001 fcf4 	bl	8007a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060a8:	f006 fcd6 	bl	800ca58 <HAL_RCC_GetSysClockFreq>
 80060ac:	4602      	mov	r2, r0
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <HAL_Init+0x68>)
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	4913      	ldr	r1, [pc, #76]	@ (8006108 <HAL_Init+0x6c>)
 80060ba:	5ccb      	ldrb	r3, [r1, r3]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
 80060c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <HAL_Init+0x68>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006108 <HAL_Init+0x6c>)
 80060d0:	5cd3      	ldrb	r3, [r2, r3]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
 80060dc:	4a0b      	ldr	r2, [pc, #44]	@ (800610c <HAL_Init+0x70>)
 80060de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006110 <HAL_Init+0x74>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060e6:	200f      	movs	r0, #15
 80060e8:	f000 f814 	bl	8006114 <HAL_InitTick>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e002      	b.n	80060fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80060f6:	f7fc f8b7 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	58024400 	.word	0x58024400
 8006108:	0801c6f4 	.word	0x0801c6f4
 800610c:	24000004 	.word	0x24000004
 8006110:	24000000 	.word	0x24000000

08006114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800611c:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <HAL_InitTick+0x60>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e021      	b.n	800616c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006128:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <HAL_InitTick+0x64>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b11      	ldr	r3, [pc, #68]	@ (8006174 <HAL_InitTick+0x60>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	4619      	mov	r1, r3
 8006132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006136:	fbb3 f3f1 	udiv	r3, r3, r1
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fcd9 	bl	8007af6 <HAL_SYSTICK_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e00e      	b.n	800616c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b0f      	cmp	r3, #15
 8006152:	d80a      	bhi.n	800616a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006154:	2200      	movs	r2, #0
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	f001 fca3 	bl	8007aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006160:	4a06      	ldr	r2, [pc, #24]	@ (800617c <HAL_InitTick+0x68>)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	2400000c 	.word	0x2400000c
 8006178:	24000000 	.word	0x24000000
 800617c:	24000008 	.word	0x24000008

08006180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006184:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <HAL_IncTick+0x20>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_IncTick+0x24>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4413      	add	r3, r2
 8006190:	4a04      	ldr	r2, [pc, #16]	@ (80061a4 <HAL_IncTick+0x24>)
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	2400000c 	.word	0x2400000c
 80061a4:	24004630 	.word	0x24004630

080061a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return uwTick;
 80061ac:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <HAL_GetTick+0x14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	24004630 	.word	0x24004630

080061c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061c8:	f7ff ffee 	bl	80061a8 <HAL_GetTick>
 80061cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d005      	beq.n	80061e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061da:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <HAL_Delay+0x44>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061e6:	bf00      	nop
 80061e8:	f7ff ffde 	bl	80061a8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d8f7      	bhi.n	80061e8 <HAL_Delay+0x28>
  {
  }
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2400000c 	.word	0x2400000c

08006208 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3360      	adds	r3, #96	@ 0x60
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <LL_ADC_SetOffset+0x60>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10b      	bne.n	80062ac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80062aa:	e00b      	b.n	80062c4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	430b      	orrs	r3, r1
 80062be:	431a      	orrs	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	58026000 	.word	0x58026000

080062d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3360      	adds	r3, #96	@ 0x60
 80062e2:	461a      	mov	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	431a      	orrs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	611a      	str	r2, [r3, #16]
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a0c      	ldr	r2, [pc, #48]	@ (8006374 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3360      	adds	r3, #96	@ 0x60
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	431a      	orrs	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	601a      	str	r2, [r3, #0]
  }
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	58026000 	.word	0x58026000

08006378 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a0c      	ldr	r2, [pc, #48]	@ (80063b8 <LL_ADC_SetOffsetSaturation+0x40>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10e      	bne.n	80063aa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3360      	adds	r3, #96	@ 0x60
 8006390:	461a      	mov	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	58026000 	.word	0x58026000

080063bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a0c      	ldr	r2, [pc, #48]	@ (80063fc <LL_ADC_SetOffsetSign+0x40>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10e      	bne.n	80063ee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3360      	adds	r3, #96	@ 0x60
 80063d4:	461a      	mov	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	58026000 	.word	0x58026000

08006400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3360      	adds	r3, #96	@ 0x60
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a0c      	ldr	r2, [pc, #48]	@ (8006450 <LL_ADC_SetOffsetState+0x50>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	431a      	orrs	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8006432:	e007      	b.n	8006444 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	431a      	orrs	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	58026000 	.word	0x58026000

08006454 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3330      	adds	r3, #48	@ 0x30
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	4413      	add	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	211f      	movs	r1, #31
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0e9b      	lsrs	r3, r3, #26
 800648c:	f003 011f 	and.w	r1, r3, #31
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	fa01 f303 	lsl.w	r3, r1, r3
 800649a:	431a      	orrs	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3314      	adds	r3, #20
 80064bc:	461a      	mov	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0e5b      	lsrs	r3, r3, #25
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	4413      	add	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	0d1b      	lsrs	r3, r3, #20
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2107      	movs	r1, #7
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	401a      	ands	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	0d1b      	lsrs	r3, r3, #20
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <LL_ADC_SetChannelSingleDiff+0x78>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d115      	bne.n	8006544 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f003 0318 	and.w	r3, r3, #24
 800652e:	4914      	ldr	r1, [pc, #80]	@ (8006580 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8006530:	40d9      	lsrs	r1, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	400b      	ands	r3, r1
 8006536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653a:	431a      	orrs	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006542:	e014      	b.n	800656e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0318 	and.w	r3, r3, #24
 800655a:	4909      	ldr	r1, [pc, #36]	@ (8006580 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800655c:	40d9      	lsrs	r1, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	400b      	ands	r3, r1
 8006562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006566:	431a      	orrs	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	58026000 	.word	0x58026000
 8006580:	000fffff 	.word	0x000fffff

08006584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	4b04      	ldr	r3, [pc, #16]	@ (80065a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006592:	4013      	ands	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6093      	str	r3, [r2, #8]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	5fffffc0 	.word	0x5fffffc0

080065a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065bc:	d101      	bne.n	80065c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80065de:	4013      	ands	r3, r2
 80065e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	6fffffc0 	.word	0x6fffffc0

080065f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660c:	d101      	bne.n	8006612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <LL_ADC_IsEnabled+0x18>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <LL_ADC_IsEnabled+0x1a>
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b04      	cmp	r3, #4
 8006658:	d101      	bne.n	800665e <LL_ADC_REG_IsConversionOngoing+0x18>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d101      	bne.n	8006684 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b089      	sub	sp, #36	@ 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e1ee      	b.n	8006a8c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fb fded 	bl	800229c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff ff67 	bl	80065a8 <LL_ADC_IsDeepPowerDownEnabled>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff4d 	bl	8006584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff82 	bl	80065f8 <LL_ADC_IsInternalRegulatorEnabled>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d114      	bne.n	8006724 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff ff66 	bl	80065d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006704:	4b8e      	ldr	r3, [pc, #568]	@ (8006940 <HAL_ADC_Init+0x2ac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	099b      	lsrs	r3, r3, #6
 800670a:	4a8e      	ldr	r2, [pc, #568]	@ (8006944 <HAL_ADC_Init+0x2b0>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	3301      	adds	r3, #1
 8006714:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006716:	e002      	b.n	800671e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3b01      	subs	r3, #1
 800671c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f9      	bne.n	8006718 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff ff65 	bl	80065f8 <LL_ADC_IsInternalRegulatorEnabled>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006738:	f043 0210 	orr.w	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006744:	f043 0201 	orr.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff ff76 	bl	8006646 <LL_ADC_REG_IsConversionOngoing>
 800675a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 8188 	bne.w	8006a7a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 8184 	bne.w	8006a7a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006776:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800677a:	f043 0202 	orr.w	r2, r3, #2
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff4a 	bl	8006620 <LL_ADC_IsEnabled>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d136      	bne.n	8006800 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6c      	ldr	r2, [pc, #432]	@ (8006948 <HAL_ADC_Init+0x2b4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_ADC_Init+0x112>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6a      	ldr	r2, [pc, #424]	@ (800694c <HAL_ADC_Init+0x2b8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10e      	bne.n	80067c4 <HAL_ADC_Init+0x130>
 80067a6:	4868      	ldr	r0, [pc, #416]	@ (8006948 <HAL_ADC_Init+0x2b4>)
 80067a8:	f7ff ff3a 	bl	8006620 <LL_ADC_IsEnabled>
 80067ac:	4604      	mov	r4, r0
 80067ae:	4867      	ldr	r0, [pc, #412]	@ (800694c <HAL_ADC_Init+0x2b8>)
 80067b0:	f7ff ff36 	bl	8006620 <LL_ADC_IsEnabled>
 80067b4:	4603      	mov	r3, r0
 80067b6:	4323      	orrs	r3, r4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e008      	b.n	80067d6 <HAL_ADC_Init+0x142>
 80067c4:	4862      	ldr	r0, [pc, #392]	@ (8006950 <HAL_ADC_Init+0x2bc>)
 80067c6:	f7ff ff2b 	bl	8006620 <LL_ADC_IsEnabled>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a5a      	ldr	r2, [pc, #360]	@ (8006948 <HAL_ADC_Init+0x2b4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_ADC_Init+0x15a>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a58      	ldr	r2, [pc, #352]	@ (800694c <HAL_ADC_Init+0x2b8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_Init+0x15e>
 80067ee:	4a59      	ldr	r2, [pc, #356]	@ (8006954 <HAL_ADC_Init+0x2c0>)
 80067f0:	e000      	b.n	80067f4 <HAL_ADC_Init+0x160>
 80067f2:	4a59      	ldr	r2, [pc, #356]	@ (8006958 <HAL_ADC_Init+0x2c4>)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7ff fd04 	bl	8006208 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a52      	ldr	r2, [pc, #328]	@ (8006950 <HAL_ADC_Init+0x2bc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d129      	bne.n	800685e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7e5b      	ldrb	r3, [r3, #25]
 800680e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006814:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800681a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d013      	beq.n	800684c <HAL_ADC_Init+0x1b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d00d      	beq.n	8006848 <HAL_ADC_Init+0x1b4>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b1c      	cmp	r3, #28
 8006832:	d007      	beq.n	8006844 <HAL_ADC_Init+0x1b0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b18      	cmp	r3, #24
 800683a:	d101      	bne.n	8006840 <HAL_ADC_Init+0x1ac>
 800683c:	2318      	movs	r3, #24
 800683e:	e006      	b.n	800684e <HAL_ADC_Init+0x1ba>
 8006840:	2300      	movs	r3, #0
 8006842:	e004      	b.n	800684e <HAL_ADC_Init+0x1ba>
 8006844:	2310      	movs	r3, #16
 8006846:	e002      	b.n	800684e <HAL_ADC_Init+0x1ba>
 8006848:	2308      	movs	r3, #8
 800684a:	e000      	b.n	800684e <HAL_ADC_Init+0x1ba>
 800684c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800684e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006856:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006858:	4313      	orrs	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e00e      	b.n	800687c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7e5b      	ldrb	r3, [r3, #25]
 8006862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800686e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006876:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d106      	bne.n	8006894 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	3b01      	subs	r3, #1
 800688c:	045b      	lsls	r3, r3, #17
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <HAL_ADC_Init+0x2bc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d115      	bne.n	80068e6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	4b26      	ldr	r3, [pc, #152]	@ (800695c <HAL_ADC_Init+0x2c8>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	69b9      	ldr	r1, [r7, #24]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	611a      	str	r2, [r3, #16]
 80068e4:	e009      	b.n	80068fa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006960 <HAL_ADC_Init+0x2cc>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	430b      	orrs	r3, r1
 80068f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fea1 	bl	8006646 <LL_ADC_REG_IsConversionOngoing>
 8006904:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff feae 	bl	800666c <LL_ADC_INJ_IsConversionOngoing>
 8006910:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 808e 	bne.w	8006a36 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 808a 	bne.w	8006a36 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a0a      	ldr	r2, [pc, #40]	@ (8006950 <HAL_ADC_Init+0x2bc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d11b      	bne.n	8006964 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7e1b      	ldrb	r3, [r3, #24]
 8006930:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006938:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e018      	b.n	8006972 <HAL_ADC_Init+0x2de>
 8006940:	24000000 	.word	0x24000000
 8006944:	053e2d63 	.word	0x053e2d63
 8006948:	40022000 	.word	0x40022000
 800694c:	40022100 	.word	0x40022100
 8006950:	58026000 	.word	0x58026000
 8006954:	40022300 	.word	0x40022300
 8006958:	58026300 	.word	0x58026300
 800695c:	fff04007 	.word	0xfff04007
 8006960:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7e1b      	ldrb	r3, [r3, #24]
 8006968:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800696e:	4313      	orrs	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	4b46      	ldr	r3, [pc, #280]	@ (8006a94 <HAL_ADC_Init+0x400>)
 800697a:	4013      	ands	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	69b9      	ldr	r1, [r7, #24]
 8006982:	430b      	orrs	r3, r1
 8006984:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800698c:	2b01      	cmp	r3, #1
 800698e:	d137      	bne.n	8006a00 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a98 <HAL_ADC_Init+0x404>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d116      	bne.n	80069ce <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	4b3d      	ldr	r3, [pc, #244]	@ (8006a9c <HAL_ADC_Init+0x408>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80069be:	430a      	orrs	r2, r1
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	611a      	str	r2, [r3, #16]
 80069cc:	e020      	b.n	8006a10 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	4b32      	ldr	r3, [pc, #200]	@ (8006aa0 <HAL_ADC_Init+0x40c>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069dc:	3a01      	subs	r2, #1
 80069de:	0411      	lsls	r1, r2, #16
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80069e4:	4311      	orrs	r1, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80069f0:	430a      	orrs	r2, r1
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	611a      	str	r2, [r3, #16]
 80069fe:	e007      	b.n	8006a10 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a98 <HAL_ADC_Init+0x404>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d002      	beq.n	8006a36 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fd67 	bl	8007504 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10c      	bne.n	8006a58 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	f023 010f 	bic.w	r1, r3, #15
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a56:	e007      	b.n	8006a68 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 020f 	bic.w	r2, r2, #15
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a78:	e007      	b.n	8006a8a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7e:	f043 0210 	orr.w	r2, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3724      	adds	r7, #36	@ 0x24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd90      	pop	{r4, r7, pc}
 8006a94:	ffffbffc 	.word	0xffffbffc
 8006a98:	58026000 	.word	0x58026000
 8006a9c:	fc00f81f 	.word	0xfc00f81f
 8006aa0:	fc00f81e 	.word	0xfc00f81e

08006aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b0b9      	sub	sp, #228	@ 0xe4
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006abe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4aab      	ldr	r2, [pc, #684]	@ (8006d74 <HAL_ADC_ConfigChannel+0x2d0>)
 8006ac6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d102      	bne.n	8006ad8 <HAL_ADC_ConfigChannel+0x34>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	f000 bcfe 	b.w	80074d4 <HAL_ADC_ConfigChannel+0xa30>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fdae 	bl	8006646 <LL_ADC_REG_IsConversionOngoing>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 84e2 	bne.w	80074b6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	db38      	blt.n	8006b6c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a9e      	ldr	r2, [pc, #632]	@ (8006d78 <HAL_ADC_ConfigChannel+0x2d4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d033      	beq.n	8006b6c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <HAL_ADC_ConfigChannel+0x7e>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	0e9b      	lsrs	r3, r3, #26
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	e01d      	b.n	8006b5e <HAL_ADC_ConfigChannel+0xba>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b2e:	fa93 f3a3 	rbit	r3, r3
 8006b32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8006b46:	2320      	movs	r3, #32
 8006b48:	e004      	b.n	8006b54 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8006b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2201      	movs	r2, #1
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	69d1      	ldr	r1, [r2, #28]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f7ff fc6b 	bl	8006454 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fd5f 	bl	8006646 <LL_ADC_REG_IsConversionOngoing>
 8006b88:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fd6b 	bl	800666c <LL_ADC_INJ_IsConversionOngoing>
 8006b96:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8270 	bne.w	8007084 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f040 826b 	bne.w	8007084 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6819      	ldr	r1, [r3, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f7ff fc76 	bl	80064ac <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8006d78 <HAL_ADC_ConfigChannel+0x2d4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006be4:	e032      	b.n	8006c4c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006be6:	4b65      	ldr	r3, [pc, #404]	@ (8006d7c <HAL_ADC_ConfigChannel+0x2d8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bf2:	d10b      	bne.n	8006c0c <HAL_ADC_ConfigChannel+0x168>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	089b      	lsrs	r3, r3, #2
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	e01d      	b.n	8006c48 <HAL_ADC_ConfigChannel+0x1a4>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <HAL_ADC_ConfigChannel+0x18e>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	695a      	ldr	r2, [r3, #20]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	089b      	lsrs	r3, r3, #2
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	e00a      	b.n	8006c48 <HAL_ADC_ConfigChannel+0x1a4>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d048      	beq.n	8006ce6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	6919      	ldr	r1, [r3, #16]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c64:	f7ff fb04 	bl	8006270 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a42      	ldr	r2, [pc, #264]	@ (8006d78 <HAL_ADC_ConfigChannel+0x2d4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d119      	bne.n	8006ca6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6919      	ldr	r1, [r3, #16]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7ff fb9c 	bl	80063bc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6919      	ldr	r1, [r3, #16]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d102      	bne.n	8006c9c <HAL_ADC_ConfigChannel+0x1f8>
 8006c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c9a:	e000      	b.n	8006c9e <HAL_ADC_ConfigChannel+0x1fa>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7ff fb6a 	bl	8006378 <LL_ADC_SetOffsetSaturation>
 8006ca4:	e1ee      	b.n	8007084 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d102      	bne.n	8006cbe <HAL_ADC_ConfigChannel+0x21a>
 8006cb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006cbc:	e000      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x21c>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f7ff fb37 	bl	8006334 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6919      	ldr	r1, [r3, #16]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	7e1b      	ldrb	r3, [r3, #24]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d102      	bne.n	8006cdc <HAL_ADC_ConfigChannel+0x238>
 8006cd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006cda:	e000      	b.n	8006cde <HAL_ADC_ConfigChannel+0x23a>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7ff fb0e 	bl	8006300 <LL_ADC_SetDataRightShift>
 8006ce4:	e1ce      	b.n	8007084 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a23      	ldr	r2, [pc, #140]	@ (8006d78 <HAL_ADC_ConfigChannel+0x2d4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	f040 8181 	bne.w	8006ff4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff faeb 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <HAL_ADC_ConfigChannel+0x27a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fae0 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006d14:	4603      	mov	r3, r0
 8006d16:	0e9b      	lsrs	r3, r3, #26
 8006d18:	f003 021f 	and.w	r2, r3, #31
 8006d1c:	e01e      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x2b8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fad5 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d34:	fa93 f3a3 	rbit	r3, r3
 8006d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8006d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8006d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	e004      	b.n	8006d5a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8006d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d54:	fab3 f383 	clz	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x2dc>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	0e9b      	lsrs	r3, r3, #26
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	e01e      	b.n	8006db2 <HAL_ADC_ConfigChannel+0x30e>
 8006d74:	47ff0000 	.word	0x47ff0000
 8006d78:	58026000 	.word	0x58026000
 8006d7c:	5c001000 	.word	0x5c001000
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d8c:	fa93 f3a3 	rbit	r3, r3
 8006d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8006da4:	2320      	movs	r3, #32
 8006da6:	e004      	b.n	8006db2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8006da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006dac:	fab3 f383 	clz	r3, r3
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d106      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fb1e 	bl	8006400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fa82 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x34c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2101      	movs	r1, #1
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fa77 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006de6:	4603      	mov	r3, r0
 8006de8:	0e9b      	lsrs	r3, r3, #26
 8006dea:	f003 021f 	and.w	r2, r3, #31
 8006dee:	e01e      	b.n	8006e2e <HAL_ADC_ConfigChannel+0x38a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2101      	movs	r1, #1
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fa6c 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e06:	fa93 f3a3 	rbit	r3, r3
 8006e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8006e1e:	2320      	movs	r3, #32
 8006e20:	e004      	b.n	8006e2c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8006e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e26:	fab3 f383 	clz	r3, r3
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x3a2>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	0e9b      	lsrs	r3, r3, #26
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	e018      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x3d4>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e52:	fa93 f3a3 	rbit	r3, r3
 8006e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8006e6a:	2320      	movs	r3, #32
 8006e6c:	e004      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8006e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e72:	fab3 f383 	clz	r3, r3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d106      	bne.n	8006e8a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2200      	movs	r2, #0
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fabb 	bl	8006400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2102      	movs	r1, #2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fa1f 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <HAL_ADC_ConfigChannel+0x412>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fa14 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006eac:	4603      	mov	r3, r0
 8006eae:	0e9b      	lsrs	r3, r3, #26
 8006eb0:	f003 021f 	and.w	r2, r3, #31
 8006eb4:	e01e      	b.n	8006ef4 <HAL_ADC_ConfigChannel+0x450>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2102      	movs	r1, #2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff fa09 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ecc:	fa93 f3a3 	rbit	r3, r3
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8006ee4:	2320      	movs	r3, #32
 8006ee6:	e004      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8006ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eec:	fab3 f383 	clz	r3, r3
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d105      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x468>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	0e9b      	lsrs	r3, r3, #26
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	e014      	b.n	8006f36 <HAL_ADC_ConfigChannel+0x492>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f14:	fa93 f3a3 	rbit	r3, r3
 8006f18:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006f28:	2320      	movs	r3, #32
 8006f2a:	e004      	b.n	8006f36 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f30:	fab3 f383 	clz	r3, r3
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d106      	bne.n	8006f48 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2102      	movs	r1, #2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fa5c 	bl	8006400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2103      	movs	r1, #3
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff f9c0 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <HAL_ADC_ConfigChannel+0x4d0>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2103      	movs	r1, #3
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff f9b5 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	0e9b      	lsrs	r3, r3, #26
 8006f6e:	f003 021f 	and.w	r2, r3, #31
 8006f72:	e017      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x500>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2103      	movs	r1, #3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff f9aa 	bl	80062d4 <LL_ADC_GetOffsetChannel>
 8006f80:	4603      	mov	r3, r0
 8006f82:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f86:	fa93 f3a3 	rbit	r3, r3
 8006f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8006f96:	2320      	movs	r3, #32
 8006f98:	e003      	b.n	8006fa2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8006f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x518>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	0e9b      	lsrs	r3, r3, #26
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	e011      	b.n	8006fe0 <HAL_ADC_ConfigChannel+0x53c>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fc4:	fa93 f3a3 	rbit	r3, r3
 8006fc8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006fca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	e003      	b.n	8006fe0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8006fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fda:	fab3 f383 	clz	r3, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d14f      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2103      	movs	r1, #3
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fa07 	bl	8006400 <LL_ADC_SetOffsetState>
 8006ff2:	e047      	b.n	8007084 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	069b      	lsls	r3, r3, #26
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007016:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800701e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	069b      	lsls	r3, r3, #26
 8007028:	429a      	cmp	r2, r3
 800702a:	d107      	bne.n	800703c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800703a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	069b      	lsls	r3, r3, #26
 800704c:	429a      	cmp	r2, r3
 800704e:	d107      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800705e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	069b      	lsls	r3, r3, #26
 8007070:	429a      	cmp	r2, r3
 8007072:	d107      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007082:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fac9 	bl	8006620 <LL_ADC_IsEnabled>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 8219 	bne.w	80074c8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7ff fa2e 	bl	8006504 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007334 <HAL_ADC_ConfigChannel+0x890>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f040 812e 	bne.w	8007310 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <HAL_ADC_ConfigChannel+0x638>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0e9b      	lsrs	r3, r3, #26
 80070ca:	3301      	adds	r3, #1
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	bf94      	ite	ls
 80070d4:	2301      	movls	r3, #1
 80070d6:	2300      	movhi	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e019      	b.n	8007110 <HAL_ADC_ConfigChannel+0x66c>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e4:	fa93 f3a3 	rbit	r3, r3
 80070e8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80070ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80070ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80070f4:	2320      	movs	r3, #32
 80070f6:	e003      	b.n	8007100 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80070f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	3301      	adds	r3, #1
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2b09      	cmp	r3, #9
 8007108:	bf94      	ite	ls
 800710a:	2301      	movls	r3, #1
 800710c:	2300      	movhi	r3, #0
 800710e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007110:	2b00      	cmp	r3, #0
 8007112:	d079      	beq.n	8007208 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800711c:	2b00      	cmp	r3, #0
 800711e:	d107      	bne.n	8007130 <HAL_ADC_ConfigChannel+0x68c>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	0e9b      	lsrs	r3, r3, #26
 8007126:	3301      	adds	r3, #1
 8007128:	069b      	lsls	r3, r3, #26
 800712a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800712e:	e015      	b.n	800715c <HAL_ADC_ConfigChannel+0x6b8>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007138:	fa93 f3a3 	rbit	r3, r3
 800713c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800713e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8007148:	2320      	movs	r3, #32
 800714a:	e003      	b.n	8007154 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714e:	fab3 f383 	clz	r3, r3
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3301      	adds	r3, #1
 8007156:	069b      	lsls	r3, r3, #26
 8007158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <HAL_ADC_ConfigChannel+0x6d8>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	0e9b      	lsrs	r3, r3, #26
 800716e:	3301      	adds	r3, #1
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	2101      	movs	r1, #1
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	e017      	b.n	80071ac <HAL_ADC_ConfigChannel+0x708>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007184:	fa93 f3a3 	rbit	r3, r3
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800718a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800718e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8007194:	2320      	movs	r3, #32
 8007196:	e003      	b.n	80071a0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8007198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719a:	fab3 f383 	clz	r3, r3
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	3301      	adds	r3, #1
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	ea42 0103 	orr.w	r1, r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <HAL_ADC_ConfigChannel+0x72e>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	0e9b      	lsrs	r3, r3, #26
 80071c2:	3301      	adds	r3, #1
 80071c4:	f003 021f 	and.w	r2, r3, #31
 80071c8:	4613      	mov	r3, r2
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	4413      	add	r3, r2
 80071ce:	051b      	lsls	r3, r3, #20
 80071d0:	e018      	b.n	8007204 <HAL_ADC_ConfigChannel+0x760>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	fa93 f3a3 	rbit	r3, r3
 80071de:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80071ea:	2320      	movs	r3, #32
 80071ec:	e003      	b.n	80071f6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	3301      	adds	r3, #1
 80071f8:	f003 021f 	and.w	r2, r3, #31
 80071fc:	4613      	mov	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4413      	add	r3, r2
 8007202:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007204:	430b      	orrs	r3, r1
 8007206:	e07e      	b.n	8007306 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <HAL_ADC_ConfigChannel+0x780>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	0e9b      	lsrs	r3, r3, #26
 800721a:	3301      	adds	r3, #1
 800721c:	069b      	lsls	r3, r3, #26
 800721e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007222:	e015      	b.n	8007250 <HAL_ADC_ConfigChannel+0x7ac>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	fa93 f3a3 	rbit	r3, r3
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800723c:	2320      	movs	r3, #32
 800723e:	e003      	b.n	8007248 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	fab3 f383 	clz	r3, r3
 8007246:	b2db      	uxtb	r3, r3
 8007248:	3301      	adds	r3, #1
 800724a:	069b      	lsls	r3, r3, #26
 800724c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x7cc>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	0e9b      	lsrs	r3, r3, #26
 8007262:	3301      	adds	r3, #1
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2101      	movs	r1, #1
 800726a:	fa01 f303 	lsl.w	r3, r1, r3
 800726e:	e017      	b.n	80072a0 <HAL_ADC_ConfigChannel+0x7fc>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	fa93 f3a3 	rbit	r3, r3
 800727c:	61bb      	str	r3, [r7, #24]
  return result;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8007288:	2320      	movs	r3, #32
 800728a:	e003      	b.n	8007294 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	fab3 f383 	clz	r3, r3
 8007292:	b2db      	uxtb	r3, r3
 8007294:	3301      	adds	r3, #1
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2101      	movs	r1, #1
 800729c:	fa01 f303 	lsl.w	r3, r1, r3
 80072a0:	ea42 0103 	orr.w	r1, r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10d      	bne.n	80072cc <HAL_ADC_ConfigChannel+0x828>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0e9b      	lsrs	r3, r3, #26
 80072b6:	3301      	adds	r3, #1
 80072b8:	f003 021f 	and.w	r2, r3, #31
 80072bc:	4613      	mov	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4413      	add	r3, r2
 80072c2:	3b1e      	subs	r3, #30
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072ca:	e01b      	b.n	8007304 <HAL_ADC_ConfigChannel+0x860>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	fa93 f3a3 	rbit	r3, r3
 80072d8:	60fb      	str	r3, [r7, #12]
  return result;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80072e4:	2320      	movs	r3, #32
 80072e6:	e003      	b.n	80072f0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	f003 021f 	and.w	r2, r3, #31
 80072f6:	4613      	mov	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	3b1e      	subs	r3, #30
 80072fe:	051b      	lsls	r3, r3, #20
 8007300:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007304:	430b      	orrs	r3, r1
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	6892      	ldr	r2, [r2, #8]
 800730a:	4619      	mov	r1, r3
 800730c:	f7ff f8ce 	bl	80064ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f280 80d7 	bge.w	80074c8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a06      	ldr	r2, [pc, #24]	@ (8007338 <HAL_ADC_ConfigChannel+0x894>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_ADC_ConfigChannel+0x88a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a04      	ldr	r2, [pc, #16]	@ (800733c <HAL_ADC_ConfigChannel+0x898>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d10a      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x8a0>
 800732e:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <HAL_ADC_ConfigChannel+0x89c>)
 8007330:	e009      	b.n	8007346 <HAL_ADC_ConfigChannel+0x8a2>
 8007332:	bf00      	nop
 8007334:	47ff0000 	.word	0x47ff0000
 8007338:	40022000 	.word	0x40022000
 800733c:	40022100 	.word	0x40022100
 8007340:	40022300 	.word	0x40022300
 8007344:	4b65      	ldr	r3, [pc, #404]	@ (80074dc <HAL_ADC_ConfigChannel+0xa38>)
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe ff84 	bl	8006254 <LL_ADC_GetCommonPathInternalCh>
 800734c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a62      	ldr	r2, [pc, #392]	@ (80074e0 <HAL_ADC_ConfigChannel+0xa3c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_ADC_ConfigChannel+0x8c0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a61      	ldr	r2, [pc, #388]	@ (80074e4 <HAL_ADC_ConfigChannel+0xa40>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10e      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x8de>
 8007364:	485e      	ldr	r0, [pc, #376]	@ (80074e0 <HAL_ADC_ConfigChannel+0xa3c>)
 8007366:	f7ff f95b 	bl	8006620 <LL_ADC_IsEnabled>
 800736a:	4604      	mov	r4, r0
 800736c:	485d      	ldr	r0, [pc, #372]	@ (80074e4 <HAL_ADC_ConfigChannel+0xa40>)
 800736e:	f7ff f957 	bl	8006620 <LL_ADC_IsEnabled>
 8007372:	4603      	mov	r3, r0
 8007374:	4323      	orrs	r3, r4
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf0c      	ite	eq
 800737a:	2301      	moveq	r3, #1
 800737c:	2300      	movne	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	e008      	b.n	8007394 <HAL_ADC_ConfigChannel+0x8f0>
 8007382:	4859      	ldr	r0, [pc, #356]	@ (80074e8 <HAL_ADC_ConfigChannel+0xa44>)
 8007384:	f7ff f94c 	bl	8006620 <LL_ADC_IsEnabled>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8084 	beq.w	80074a2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a53      	ldr	r2, [pc, #332]	@ (80074ec <HAL_ADC_ConfigChannel+0xa48>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d132      	bne.n	800740a <HAL_ADC_ConfigChannel+0x966>
 80073a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d12c      	bne.n	800740a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a4c      	ldr	r2, [pc, #304]	@ (80074e8 <HAL_ADC_ConfigChannel+0xa44>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	f040 8086 	bne.w	80074c8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a47      	ldr	r2, [pc, #284]	@ (80074e0 <HAL_ADC_ConfigChannel+0xa3c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_ADC_ConfigChannel+0x92c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a46      	ldr	r2, [pc, #280]	@ (80074e4 <HAL_ADC_ConfigChannel+0xa40>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d101      	bne.n	80073d4 <HAL_ADC_ConfigChannel+0x930>
 80073d0:	4a47      	ldr	r2, [pc, #284]	@ (80074f0 <HAL_ADC_ConfigChannel+0xa4c>)
 80073d2:	e000      	b.n	80073d6 <HAL_ADC_ConfigChannel+0x932>
 80073d4:	4a41      	ldr	r2, [pc, #260]	@ (80074dc <HAL_ADC_ConfigChannel+0xa38>)
 80073d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7fe ff24 	bl	800622e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073e6:	4b43      	ldr	r3, [pc, #268]	@ (80074f4 <HAL_ADC_ConfigChannel+0xa50>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	099b      	lsrs	r3, r3, #6
 80073ec:	4a42      	ldr	r2, [pc, #264]	@ (80074f8 <HAL_ADC_ConfigChannel+0xa54>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	3301      	adds	r3, #1
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80073fa:	e002      	b.n	8007402 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f9      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007408:	e05e      	b.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a3b      	ldr	r2, [pc, #236]	@ (80074fc <HAL_ADC_ConfigChannel+0xa58>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d120      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x9b2>
 8007414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11a      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a30      	ldr	r2, [pc, #192]	@ (80074e8 <HAL_ADC_ConfigChannel+0xa44>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d14e      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2c      	ldr	r2, [pc, #176]	@ (80074e0 <HAL_ADC_ConfigChannel+0xa3c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_ADC_ConfigChannel+0x99a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2a      	ldr	r2, [pc, #168]	@ (80074e4 <HAL_ADC_ConfigChannel+0xa40>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <HAL_ADC_ConfigChannel+0x99e>
 800743e:	4a2c      	ldr	r2, [pc, #176]	@ (80074f0 <HAL_ADC_ConfigChannel+0xa4c>)
 8007440:	e000      	b.n	8007444 <HAL_ADC_ConfigChannel+0x9a0>
 8007442:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <HAL_ADC_ConfigChannel+0xa38>)
 8007444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fe feed 	bl	800622e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007454:	e038      	b.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a29      	ldr	r2, [pc, #164]	@ (8007500 <HAL_ADC_ConfigChannel+0xa5c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d133      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
 8007460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d12d      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <HAL_ADC_ConfigChannel+0xa44>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d128      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a19      	ldr	r2, [pc, #100]	@ (80074e0 <HAL_ADC_ConfigChannel+0xa3c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_ADC_ConfigChannel+0x9e6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a17      	ldr	r2, [pc, #92]	@ (80074e4 <HAL_ADC_ConfigChannel+0xa40>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d101      	bne.n	800748e <HAL_ADC_ConfigChannel+0x9ea>
 800748a:	4a19      	ldr	r2, [pc, #100]	@ (80074f0 <HAL_ADC_ConfigChannel+0xa4c>)
 800748c:	e000      	b.n	8007490 <HAL_ADC_ConfigChannel+0x9ec>
 800748e:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <HAL_ADC_ConfigChannel+0xa38>)
 8007490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe fec7 	bl	800622e <LL_ADC_SetCommonPathInternalCh>
 80074a0:	e012      	b.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a6:	f043 0220 	orr.w	r2, r3, #32
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80074b4:	e008      	b.n	80074c8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80074d0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	37e4      	adds	r7, #228	@ 0xe4
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd90      	pop	{r4, r7, pc}
 80074dc:	58026300 	.word	0x58026300
 80074e0:	40022000 	.word	0x40022000
 80074e4:	40022100 	.word	0x40022100
 80074e8:	58026000 	.word	0x58026000
 80074ec:	c7520000 	.word	0xc7520000
 80074f0:	40022300 	.word	0x40022300
 80074f4:	24000000 	.word	0x24000000
 80074f8:	053e2d63 	.word	0x053e2d63
 80074fc:	c3210000 	.word	0xc3210000
 8007500:	cb840000 	.word	0xcb840000

08007504 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a6c      	ldr	r2, [pc, #432]	@ (80076c4 <ADC_ConfigureBoostMode+0x1c0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <ADC_ConfigureBoostMode+0x1c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a6b      	ldr	r2, [pc, #428]	@ (80076c8 <ADC_ConfigureBoostMode+0x1c4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d109      	bne.n	8007534 <ADC_ConfigureBoostMode+0x30>
 8007520:	4b6a      	ldr	r3, [pc, #424]	@ (80076cc <ADC_ConfigureBoostMode+0x1c8>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007528:	2b00      	cmp	r3, #0
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e008      	b.n	8007546 <ADC_ConfigureBoostMode+0x42>
 8007534:	4b66      	ldr	r3, [pc, #408]	@ (80076d0 <ADC_ConfigureBoostMode+0x1cc>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01c      	beq.n	8007584 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800754a:	f005 fbff 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800754e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007558:	d010      	beq.n	800757c <ADC_ConfigureBoostMode+0x78>
 800755a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800755e:	d873      	bhi.n	8007648 <ADC_ConfigureBoostMode+0x144>
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007564:	d002      	beq.n	800756c <ADC_ConfigureBoostMode+0x68>
 8007566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800756a:	d16d      	bne.n	8007648 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	fbb2 f3f3 	udiv	r3, r2, r3
 8007578:	60fb      	str	r3, [r7, #12]
        break;
 800757a:	e068      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	60fb      	str	r3, [r7, #12]
        break;
 8007582:	e064      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007584:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	f006 fdda 	bl	800e144 <HAL_RCCEx_GetPeriphCLKFreq>
 8007590:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800759a:	d051      	beq.n	8007640 <ADC_ConfigureBoostMode+0x13c>
 800759c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80075a0:	d854      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80075a6:	d047      	beq.n	8007638 <ADC_ConfigureBoostMode+0x134>
 80075a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80075ac:	d84e      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80075b2:	d03d      	beq.n	8007630 <ADC_ConfigureBoostMode+0x12c>
 80075b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80075b8:	d848      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075be:	d033      	beq.n	8007628 <ADC_ConfigureBoostMode+0x124>
 80075c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c4:	d842      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80075ca:	d029      	beq.n	8007620 <ADC_ConfigureBoostMode+0x11c>
 80075cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80075d0:	d83c      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80075d6:	d01a      	beq.n	800760e <ADC_ConfigureBoostMode+0x10a>
 80075d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80075dc:	d836      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80075e2:	d014      	beq.n	800760e <ADC_ConfigureBoostMode+0x10a>
 80075e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80075e8:	d830      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ee:	d00e      	beq.n	800760e <ADC_ConfigureBoostMode+0x10a>
 80075f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f4:	d82a      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 80075f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075fa:	d008      	beq.n	800760e <ADC_ConfigureBoostMode+0x10a>
 80075fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007600:	d824      	bhi.n	800764c <ADC_ConfigureBoostMode+0x148>
 8007602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007606:	d002      	beq.n	800760e <ADC_ConfigureBoostMode+0x10a>
 8007608:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800760c:	d11e      	bne.n	800764c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	0c9b      	lsrs	r3, r3, #18
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	60fb      	str	r3, [r7, #12]
        break;
 800761e:	e016      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	60fb      	str	r3, [r7, #12]
        break;
 8007626:	e012      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	60fb      	str	r3, [r7, #12]
        break;
 800762e:	e00e      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	099b      	lsrs	r3, r3, #6
 8007634:	60fb      	str	r3, [r7, #12]
        break;
 8007636:	e00a      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	09db      	lsrs	r3, r3, #7
 800763c:	60fb      	str	r3, [r7, #12]
        break;
 800763e:	e006      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	60fb      	str	r3, [r7, #12]
        break;
 8007646:	e002      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
        break;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800764c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4a1f      	ldr	r2, [pc, #124]	@ (80076d4 <ADC_ConfigureBoostMode+0x1d0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d808      	bhi.n	800766e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800766a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800766c:	e025      	b.n	80076ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a19      	ldr	r2, [pc, #100]	@ (80076d8 <ADC_ConfigureBoostMode+0x1d4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d80a      	bhi.n	800768c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007688:	609a      	str	r2, [r3, #8]
}
 800768a:	e016      	b.n	80076ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a13      	ldr	r2, [pc, #76]	@ (80076dc <ADC_ConfigureBoostMode+0x1d8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d80a      	bhi.n	80076aa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	e007      	b.n	80076ba <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40022000 	.word	0x40022000
 80076c8:	40022100 	.word	0x40022100
 80076cc:	40022300 	.word	0x40022300
 80076d0:	58026300 	.word	0x58026300
 80076d4:	005f5e10 	.word	0x005f5e10
 80076d8:	00bebc20 	.word	0x00bebc20
 80076dc:	017d7840 	.word	0x017d7840

080076e0 <LL_ADC_IsEnabled>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <LL_ADC_IsEnabled+0x18>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <LL_ADC_IsEnabled+0x1a>
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <LL_ADC_REG_IsConversionOngoing>:
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b04      	cmp	r3, #4
 8007718:	d101      	bne.n	800771e <LL_ADC_REG_IsConversionOngoing+0x18>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b0a3      	sub	sp, #140	@ 0x8c
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007746:	2302      	movs	r3, #2
 8007748:	e0c1      	b.n	80078ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007752:	2300      	movs	r3, #0
 8007754:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007756:	2300      	movs	r3, #0
 8007758:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a5e      	ldr	r2, [pc, #376]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d102      	bne.n	800776a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007764:	4b5d      	ldr	r3, [pc, #372]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e001      	b.n	800776e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e0a0      	b.n	80078ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ffb9 	bl	8007706 <LL_ADC_REG_IsConversionOngoing>
 8007794:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff ffb2 	bl	8007706 <LL_ADC_REG_IsConversionOngoing>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8081 	bne.w	80078ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80077aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d17c      	bne.n	80078ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a48      	ldr	r2, [pc, #288]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a46      	ldr	r2, [pc, #280]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80077c6:	4b46      	ldr	r3, [pc, #280]	@ (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80077c8:	e000      	b.n	80077cc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80077ca:	4b46      	ldr	r3, [pc, #280]	@ (80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80077cc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d039      	beq.n	800784a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80077d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3a      	ldr	r2, [pc, #232]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a39      	ldr	r2, [pc, #228]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10e      	bne.n	800781a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80077fc:	4836      	ldr	r0, [pc, #216]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80077fe:	f7ff ff6f 	bl	80076e0 <LL_ADC_IsEnabled>
 8007802:	4604      	mov	r4, r0
 8007804:	4835      	ldr	r0, [pc, #212]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007806:	f7ff ff6b 	bl	80076e0 <LL_ADC_IsEnabled>
 800780a:	4603      	mov	r3, r0
 800780c:	4323      	orrs	r3, r4
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	e008      	b.n	800782c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800781a:	4833      	ldr	r0, [pc, #204]	@ (80078e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800781c:	f7ff ff60 	bl	80076e0 <LL_ADC_IsEnabled>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d047      	beq.n	80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007830:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	4b2d      	ldr	r3, [pc, #180]	@ (80078ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007836:	4013      	ands	r3, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	6811      	ldr	r1, [r2, #0]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	6892      	ldr	r2, [r2, #8]
 8007840:	430a      	orrs	r2, r1
 8007842:	431a      	orrs	r2, r3
 8007844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007846:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007848:	e03a      	b.n	80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800784a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007854:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1f      	ldr	r2, [pc, #124]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10e      	bne.n	8007888 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800786a:	481b      	ldr	r0, [pc, #108]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800786c:	f7ff ff38 	bl	80076e0 <LL_ADC_IsEnabled>
 8007870:	4604      	mov	r4, r0
 8007872:	481a      	ldr	r0, [pc, #104]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007874:	f7ff ff34 	bl	80076e0 <LL_ADC_IsEnabled>
 8007878:	4603      	mov	r3, r0
 800787a:	4323      	orrs	r3, r4
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e008      	b.n	800789a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007888:	4817      	ldr	r0, [pc, #92]	@ (80078e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800788a:	f7ff ff29 	bl	80076e0 <LL_ADC_IsEnabled>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d010      	beq.n	80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800789e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	4b12      	ldr	r3, [pc, #72]	@ (80078ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80078a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078aa:	e009      	b.n	80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80078be:	e000      	b.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80078ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	378c      	adds	r7, #140	@ 0x8c
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40022000 	.word	0x40022000
 80078dc:	40022100 	.word	0x40022100
 80078e0:	40022300 	.word	0x40022300
 80078e4:	58026300 	.word	0x58026300
 80078e8:	58026000 	.word	0x58026000
 80078ec:	fffff0e0 	.word	0xfffff0e0

080078f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <__NVIC_SetPriorityGrouping+0x40>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800790c:	4013      	ands	r3, r2
 800790e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007918:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <__NVIC_SetPriorityGrouping+0x44>)
 800791a:	4313      	orrs	r3, r2
 800791c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800791e:	4a04      	ldr	r2, [pc, #16]	@ (8007930 <__NVIC_SetPriorityGrouping+0x40>)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	60d3      	str	r3, [r2, #12]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	e000ed00 	.word	0xe000ed00
 8007934:	05fa0000 	.word	0x05fa0000

08007938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <__NVIC_GetPriorityGrouping+0x18>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	f003 0307 	and.w	r3, r3, #7
}
 8007946:	4618      	mov	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	e000ed00 	.word	0xe000ed00

08007954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800795e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007962:	2b00      	cmp	r3, #0
 8007964:	db0b      	blt.n	800797e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	f003 021f 	and.w	r2, r3, #31
 800796c:	4907      	ldr	r1, [pc, #28]	@ (800798c <__NVIC_EnableIRQ+0x38>)
 800796e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	2001      	movs	r0, #1
 8007976:	fa00 f202 	lsl.w	r2, r0, r2
 800797a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	e000e100 	.word	0xe000e100

08007990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800799c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	db0a      	blt.n	80079ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	490c      	ldr	r1, [pc, #48]	@ (80079dc <__NVIC_SetPriority+0x4c>)
 80079aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079ae:	0112      	lsls	r2, r2, #4
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	440b      	add	r3, r1
 80079b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079b8:	e00a      	b.n	80079d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4908      	ldr	r1, [pc, #32]	@ (80079e0 <__NVIC_SetPriority+0x50>)
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	3b04      	subs	r3, #4
 80079c8:	0112      	lsls	r2, r2, #4
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	440b      	add	r3, r1
 80079ce:	761a      	strb	r2, [r3, #24]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	e000e100 	.word	0xe000e100
 80079e0:	e000ed00 	.word	0xe000ed00

080079e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	@ 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f1c3 0307 	rsb	r3, r3, #7
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	bf28      	it	cs
 8007a02:	2304      	movcs	r3, #4
 8007a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	2b06      	cmp	r3, #6
 8007a0c:	d902      	bls.n	8007a14 <NVIC_EncodePriority+0x30>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3b03      	subs	r3, #3
 8007a12:	e000      	b.n	8007a16 <NVIC_EncodePriority+0x32>
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a18:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43da      	mvns	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	401a      	ands	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	fa01 f303 	lsl.w	r3, r1, r3
 8007a36:	43d9      	mvns	r1, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a3c:	4313      	orrs	r3, r2
         );
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3724      	adds	r7, #36	@ 0x24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a5c:	d301      	bcc.n	8007a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e00f      	b.n	8007a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a62:	4a0a      	ldr	r2, [pc, #40]	@ (8007a8c <SysTick_Config+0x40>)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a6a:	210f      	movs	r1, #15
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	f7ff ff8e 	bl	8007990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <SysTick_Config+0x40>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a7a:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <SysTick_Config+0x40>)
 8007a7c:	2207      	movs	r2, #7
 8007a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	e000e010 	.word	0xe000e010

08007a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ff29 	bl	80078f0 <__NVIC_SetPriorityGrouping>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	4603      	mov	r3, r0
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ab4:	f7ff ff40 	bl	8007938 <__NVIC_GetPriorityGrouping>
 8007ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	6978      	ldr	r0, [r7, #20]
 8007ac0:	f7ff ff90 	bl	80079e4 <NVIC_EncodePriority>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff5f 	bl	8007990 <__NVIC_SetPriority>
}
 8007ad2:	bf00      	nop
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ff33 	bl	8007954 <__NVIC_EnableIRQ>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ffa4 	bl	8007a4c <SysTick_Config>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007b14:	f3bf 8f5f 	dmb	sy
}
 8007b18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007b1a:	4b07      	ldr	r3, [pc, #28]	@ (8007b38 <HAL_MPU_Disable+0x28>)
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	4a06      	ldr	r2, [pc, #24]	@ (8007b38 <HAL_MPU_Disable+0x28>)
 8007b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b24:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007b26:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <HAL_MPU_Disable+0x2c>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
}
 8007b2c:	bf00      	nop
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	e000ed00 	.word	0xe000ed00
 8007b3c:	e000ed90 	.word	0xe000ed90

08007b40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007b48:	4a0b      	ldr	r2, [pc, #44]	@ (8007b78 <HAL_MPU_Enable+0x38>)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007b52:	4b0a      	ldr	r3, [pc, #40]	@ (8007b7c <HAL_MPU_Enable+0x3c>)
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	4a09      	ldr	r2, [pc, #36]	@ (8007b7c <HAL_MPU_Enable+0x3c>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007b5e:	f3bf 8f4f 	dsb	sy
}
 8007b62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b64:	f3bf 8f6f 	isb	sy
}
 8007b68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000ed90 	.word	0xe000ed90
 8007b7c:	e000ed00 	.word	0xe000ed00

08007b80 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	785a      	ldrb	r2, [r3, #1]
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bfc <HAL_MPU_ConfigRegion+0x7c>)
 8007b8e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007b90:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <HAL_MPU_ConfigRegion+0x7c>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <HAL_MPU_ConfigRegion+0x7c>)
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007b9c:	4a17      	ldr	r2, [pc, #92]	@ (8007bfc <HAL_MPU_ConfigRegion+0x7c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7b1b      	ldrb	r3, [r3, #12]
 8007ba8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7adb      	ldrb	r3, [r3, #11]
 8007bae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7a9b      	ldrb	r3, [r3, #10]
 8007bb6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007bb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7b5b      	ldrb	r3, [r3, #13]
 8007bbe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007bc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7b9b      	ldrb	r3, [r3, #14]
 8007bc6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007bc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7bdb      	ldrb	r3, [r3, #15]
 8007bce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007bd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7a5b      	ldrb	r3, [r3, #9]
 8007bd6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7a1b      	ldrb	r3, [r3, #8]
 8007bde:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007be0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007be8:	4a04      	ldr	r2, [pc, #16]	@ (8007bfc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007bea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007bec:	6113      	str	r3, [r2, #16]
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	e000ed90 	.word	0xe000ed90

08007c00 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e014      	b.n	8007c3c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	791b      	ldrb	r3, [r3, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fa fbc8 	bl	80023b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0a2      	b.n	8007da2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	795b      	ldrb	r3, [r3, #5]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_DAC_Start_DMA+0x24>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e09c      	b.n	8007da2 <HAL_DAC_Start_DMA+0x15e>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d129      	bne.n	8007cce <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8007dac <HAL_DAC_Start_DMA+0x168>)
 8007c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4a4a      	ldr	r2, [pc, #296]	@ (8007db0 <HAL_DAC_Start_DMA+0x16c>)
 8007c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	4a49      	ldr	r2, [pc, #292]	@ (8007db4 <HAL_DAC_Start_DMA+0x170>)
 8007c90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ca0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_DAC_Start_DMA+0x6c>
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d005      	beq.n	8007cba <HAL_DAC_Start_DMA+0x76>
 8007cae:	e009      	b.n	8007cc4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	613b      	str	r3, [r7, #16]
        break;
 8007cb8:	e033      	b.n	8007d22 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	613b      	str	r3, [r7, #16]
        break;
 8007cc2:	e02e      	b.n	8007d22 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3310      	adds	r3, #16
 8007cca:	613b      	str	r3, [r7, #16]
        break;
 8007ccc:	e029      	b.n	8007d22 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	4a39      	ldr	r2, [pc, #228]	@ (8007db8 <HAL_DAC_Start_DMA+0x174>)
 8007cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4a38      	ldr	r2, [pc, #224]	@ (8007dbc <HAL_DAC_Start_DMA+0x178>)
 8007cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	4a37      	ldr	r2, [pc, #220]	@ (8007dc0 <HAL_DAC_Start_DMA+0x17c>)
 8007ce4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_DAC_Start_DMA+0xc0>
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d005      	beq.n	8007d0e <HAL_DAC_Start_DMA+0xca>
 8007d02:	e009      	b.n	8007d18 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3314      	adds	r3, #20
 8007d0a:	613b      	str	r3, [r7, #16]
        break;
 8007d0c:	e009      	b.n	8007d22 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3318      	adds	r3, #24
 8007d14:	613b      	str	r3, [r7, #16]
        break;
 8007d16:	e004      	b.n	8007d22 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	331c      	adds	r3, #28
 8007d1e:	613b      	str	r3, [r7, #16]
        break;
 8007d20:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d111      	bne.n	8007d4c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6898      	ldr	r0, [r3, #8]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	f000 fd6d 	bl	8008820 <HAL_DMA_Start_IT>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]
 8007d4a:	e010      	b.n	8007d6e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68d8      	ldr	r0, [r3, #12]
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	f000 fd5b 	bl	8008820 <HAL_DMA_Start_IT>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10c      	bne.n	8007d94 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0310 	and.w	r3, r3, #16
 8007d86:	2201      	movs	r2, #1
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e005      	b.n	8007da0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	f043 0204 	orr.w	r2, r3, #4
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	0800805d 	.word	0x0800805d
 8007db0:	0800807f 	.word	0x0800807f
 8007db4:	0800809b 	.word	0x0800809b
 8007db8:	08008105 	.word	0x08008105
 8007dbc:	08008127 	.word	0x08008127
 8007dc0:	08008143 	.word	0x08008143

08007dc4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	@ 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_DAC_ConfigChannel+0x1e>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e12a      	b.n	8008050 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	795b      	ldrb	r3, [r3, #5]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_DAC_ConfigChannel+0x2e>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e124      	b.n	8008050 <HAL_DAC_ConfigChannel+0x278>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d17a      	bne.n	8007f10 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e1a:	f7fe f9c5 	bl	80061a8 <HAL_GetTick>
 8007e1e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d13d      	bne.n	8007ea2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e26:	e018      	b.n	8007e5a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e28:	f7fe f9be 	bl	80061a8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d911      	bls.n	8007e5a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3c:	4b86      	ldr	r3, [pc, #536]	@ (8008058 <HAL_DAC_ConfigChannel+0x280>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f043 0208 	orr.w	r2, r3, #8
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2203      	movs	r2, #3
 8007e54:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e0fa      	b.n	8008050 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e60:	4b7d      	ldr	r3, [pc, #500]	@ (8008058 <HAL_DAC_ConfigChannel+0x280>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1df      	bne.n	8007e28 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	6992      	ldr	r2, [r2, #24]
 8007e70:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e72:	e020      	b.n	8007eb6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e74:	f7fe f998 	bl	80061a8 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d90f      	bls.n	8007ea2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	da0a      	bge.n	8007ea2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f043 0208 	orr.w	r2, r3, #8
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e0d6      	b.n	8008050 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dbe3      	blt.n	8007e74 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6992      	ldr	r2, [r2, #24]
 8007eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	43db      	mvns	r3, r3
 8007ecc:	ea02 0103 	and.w	r1, r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	409a      	lsls	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	21ff      	movs	r1, #255	@ 0xff
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	ea02 0103 	and.w	r1, r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6a1a      	ldr	r2, [r3, #32]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	409a      	lsls	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d11d      	bne.n	8007f54 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	221f      	movs	r2, #31
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4013      	ands	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2207      	movs	r2, #7
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d102      	bne.n	8007f7e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7c:	e00f      	b.n	8007f9e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d102      	bne.n	8007f8c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007f86:	2301      	movs	r3, #1
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8a:	e008      	b.n	8007f9e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007f94:	2301      	movs	r3, #1
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f98:	e001      	b.n	8007f9e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	43da      	mvns	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	400a      	ands	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	4013      	ands	r3, r2
 8008002:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f003 0310 	and.w	r3, r3, #16
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	fa02 f303 	lsl.w	r3, r2, r3
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	4313      	orrs	r3, r2
 800801a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6819      	ldr	r1, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	22c0      	movs	r2, #192	@ 0xc0
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	43da      	mvns	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	400a      	ands	r2, r1
 800803e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800804c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008050:	4618      	mov	r0, r3
 8008052:	3728      	adds	r7, #40	@ 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20008000 	.word	0x20008000

0800805c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7f9 f8ea 	bl	8001244 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	711a      	strb	r2, [r3, #4]
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7f9 f8cb 	bl	8001228 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f043 0204 	orr.w	r2, r3, #4
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fe85 	bl	8007dc4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	711a      	strb	r2, [r3, #4]
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff ffd8 	bl	80080c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	711a      	strb	r2, [r3, #4]
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008132:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff ffd1 	bl	80080dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f043 0204 	orr.w	r2, r3, #4
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff ffc7 	bl	80080f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	711a      	strb	r2, [r3, #4]
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008178:	f7fe f816 	bl	80061a8 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e312      	b.n	80087ae <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a66      	ldr	r2, [pc, #408]	@ (8008328 <HAL_DMA_Init+0x1b8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d04a      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a65      	ldr	r2, [pc, #404]	@ (800832c <HAL_DMA_Init+0x1bc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d045      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a63      	ldr	r2, [pc, #396]	@ (8008330 <HAL_DMA_Init+0x1c0>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d040      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a62      	ldr	r2, [pc, #392]	@ (8008334 <HAL_DMA_Init+0x1c4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d03b      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a60      	ldr	r2, [pc, #384]	@ (8008338 <HAL_DMA_Init+0x1c8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d036      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a5f      	ldr	r2, [pc, #380]	@ (800833c <HAL_DMA_Init+0x1cc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d031      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008340 <HAL_DMA_Init+0x1d0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d02c      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a5c      	ldr	r2, [pc, #368]	@ (8008344 <HAL_DMA_Init+0x1d4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d027      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a5a      	ldr	r2, [pc, #360]	@ (8008348 <HAL_DMA_Init+0x1d8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a59      	ldr	r2, [pc, #356]	@ (800834c <HAL_DMA_Init+0x1dc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d01d      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a57      	ldr	r2, [pc, #348]	@ (8008350 <HAL_DMA_Init+0x1e0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a56      	ldr	r2, [pc, #344]	@ (8008354 <HAL_DMA_Init+0x1e4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a54      	ldr	r2, [pc, #336]	@ (8008358 <HAL_DMA_Init+0x1e8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a53      	ldr	r2, [pc, #332]	@ (800835c <HAL_DMA_Init+0x1ec>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a51      	ldr	r2, [pc, #324]	@ (8008360 <HAL_DMA_Init+0x1f0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_DMA_Init+0xb8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a50      	ldr	r2, [pc, #320]	@ (8008364 <HAL_DMA_Init+0x1f4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d101      	bne.n	800822c <HAL_DMA_Init+0xbc>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_DMA_Init+0xbe>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 813c 	beq.w	80084ac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a37      	ldr	r2, [pc, #220]	@ (8008328 <HAL_DMA_Init+0x1b8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d04a      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a36      	ldr	r2, [pc, #216]	@ (800832c <HAL_DMA_Init+0x1bc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d045      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a34      	ldr	r2, [pc, #208]	@ (8008330 <HAL_DMA_Init+0x1c0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d040      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a33      	ldr	r2, [pc, #204]	@ (8008334 <HAL_DMA_Init+0x1c4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d03b      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a31      	ldr	r2, [pc, #196]	@ (8008338 <HAL_DMA_Init+0x1c8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d036      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a30      	ldr	r2, [pc, #192]	@ (800833c <HAL_DMA_Init+0x1cc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d031      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2e      	ldr	r2, [pc, #184]	@ (8008340 <HAL_DMA_Init+0x1d0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02c      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2d      	ldr	r2, [pc, #180]	@ (8008344 <HAL_DMA_Init+0x1d4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d027      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2b      	ldr	r2, [pc, #172]	@ (8008348 <HAL_DMA_Init+0x1d8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <HAL_DMA_Init+0x1dc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01d      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <HAL_DMA_Init+0x1e0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <HAL_DMA_Init+0x1e4>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a25      	ldr	r2, [pc, #148]	@ (8008358 <HAL_DMA_Init+0x1e8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a24      	ldr	r2, [pc, #144]	@ (800835c <HAL_DMA_Init+0x1ec>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <HAL_DMA_Init+0x1f0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_DMA_Init+0x174>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a21      	ldr	r2, [pc, #132]	@ (8008364 <HAL_DMA_Init+0x1f4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d108      	bne.n	80082f6 <HAL_DMA_Init+0x186>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e007      	b.n	8008306 <HAL_DMA_Init+0x196>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008306:	e02f      	b.n	8008368 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008308:	f7fd ff4e 	bl	80061a8 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b05      	cmp	r3, #5
 8008314:	d928      	bls.n	8008368 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2203      	movs	r2, #3
 8008320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e242      	b.n	80087ae <HAL_DMA_Init+0x63e>
 8008328:	40020010 	.word	0x40020010
 800832c:	40020028 	.word	0x40020028
 8008330:	40020040 	.word	0x40020040
 8008334:	40020058 	.word	0x40020058
 8008338:	40020070 	.word	0x40020070
 800833c:	40020088 	.word	0x40020088
 8008340:	400200a0 	.word	0x400200a0
 8008344:	400200b8 	.word	0x400200b8
 8008348:	40020410 	.word	0x40020410
 800834c:	40020428 	.word	0x40020428
 8008350:	40020440 	.word	0x40020440
 8008354:	40020458 	.word	0x40020458
 8008358:	40020470 	.word	0x40020470
 800835c:	40020488 	.word	0x40020488
 8008360:	400204a0 	.word	0x400204a0
 8008364:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1c8      	bne.n	8008308 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4b83      	ldr	r3, [pc, #524]	@ (8008590 <HAL_DMA_Init+0x420>)
 8008382:	4013      	ands	r3, r2
 8008384:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800838e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800839a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d107      	bne.n	80083cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c4:	4313      	orrs	r3, r2
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b28      	cmp	r3, #40	@ 0x28
 80083d2:	d903      	bls.n	80083dc <HAL_DMA_Init+0x26c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083da:	d91f      	bls.n	800841c <HAL_DMA_Init+0x2ac>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80083e2:	d903      	bls.n	80083ec <HAL_DMA_Init+0x27c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b42      	cmp	r3, #66	@ 0x42
 80083ea:	d917      	bls.n	800841c <HAL_DMA_Init+0x2ac>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b46      	cmp	r3, #70	@ 0x46
 80083f2:	d903      	bls.n	80083fc <HAL_DMA_Init+0x28c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b48      	cmp	r3, #72	@ 0x48
 80083fa:	d90f      	bls.n	800841c <HAL_DMA_Init+0x2ac>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b4e      	cmp	r3, #78	@ 0x4e
 8008402:	d903      	bls.n	800840c <HAL_DMA_Init+0x29c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b52      	cmp	r3, #82	@ 0x52
 800840a:	d907      	bls.n	800841c <HAL_DMA_Init+0x2ac>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2b73      	cmp	r3, #115	@ 0x73
 8008412:	d905      	bls.n	8008420 <HAL_DMA_Init+0x2b0>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b77      	cmp	r3, #119	@ 0x77
 800841a:	d801      	bhi.n	8008420 <HAL_DMA_Init+0x2b0>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <HAL_DMA_Init+0x2b2>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800842c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	2b04      	cmp	r3, #4
 8008456:	d117      	bne.n	8008488 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00e      	beq.n	8008488 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 fdca 	bl	800a004 <DMA_CheckFifoParam>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e192      	b.n	80087ae <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fd05 	bl	8009ea0 <DMA_CalcBaseAndBitshift>
 8008496:	4603      	mov	r3, r0
 8008498:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800849e:	f003 031f 	and.w	r3, r3, #31
 80084a2:	223f      	movs	r2, #63	@ 0x3f
 80084a4:	409a      	lsls	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	609a      	str	r2, [r3, #8]
 80084aa:	e0c8      	b.n	800863e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a38      	ldr	r2, [pc, #224]	@ (8008594 <HAL_DMA_Init+0x424>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d022      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a37      	ldr	r2, [pc, #220]	@ (8008598 <HAL_DMA_Init+0x428>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d01d      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a35      	ldr	r2, [pc, #212]	@ (800859c <HAL_DMA_Init+0x42c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d018      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a34      	ldr	r2, [pc, #208]	@ (80085a0 <HAL_DMA_Init+0x430>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d013      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a32      	ldr	r2, [pc, #200]	@ (80085a4 <HAL_DMA_Init+0x434>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a31      	ldr	r2, [pc, #196]	@ (80085a8 <HAL_DMA_Init+0x438>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d009      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a2f      	ldr	r2, [pc, #188]	@ (80085ac <HAL_DMA_Init+0x43c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <HAL_DMA_Init+0x38c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a2e      	ldr	r2, [pc, #184]	@ (80085b0 <HAL_DMA_Init+0x440>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d101      	bne.n	8008500 <HAL_DMA_Init+0x390>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <HAL_DMA_Init+0x392>
 8008500:	2300      	movs	r3, #0
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8092 	beq.w	800862c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a21      	ldr	r2, [pc, #132]	@ (8008594 <HAL_DMA_Init+0x424>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d021      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a20      	ldr	r2, [pc, #128]	@ (8008598 <HAL_DMA_Init+0x428>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d01c      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1e      	ldr	r2, [pc, #120]	@ (800859c <HAL_DMA_Init+0x42c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d017      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a1d      	ldr	r2, [pc, #116]	@ (80085a0 <HAL_DMA_Init+0x430>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d012      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1b      	ldr	r2, [pc, #108]	@ (80085a4 <HAL_DMA_Init+0x434>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00d      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a1a      	ldr	r2, [pc, #104]	@ (80085a8 <HAL_DMA_Init+0x438>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d008      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a18      	ldr	r2, [pc, #96]	@ (80085ac <HAL_DMA_Init+0x43c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <HAL_DMA_Init+0x3e6>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a17      	ldr	r2, [pc, #92]	@ (80085b0 <HAL_DMA_Init+0x440>)
 8008554:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4b10      	ldr	r3, [pc, #64]	@ (80085b4 <HAL_DMA_Init+0x444>)
 8008572:	4013      	ands	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b40      	cmp	r3, #64	@ 0x40
 800857c:	d01c      	beq.n	80085b8 <HAL_DMA_Init+0x448>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b80      	cmp	r3, #128	@ 0x80
 8008584:	d102      	bne.n	800858c <HAL_DMA_Init+0x41c>
 8008586:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800858a:	e016      	b.n	80085ba <HAL_DMA_Init+0x44a>
 800858c:	2300      	movs	r3, #0
 800858e:	e014      	b.n	80085ba <HAL_DMA_Init+0x44a>
 8008590:	fe10803f 	.word	0xfe10803f
 8008594:	58025408 	.word	0x58025408
 8008598:	5802541c 	.word	0x5802541c
 800859c:	58025430 	.word	0x58025430
 80085a0:	58025444 	.word	0x58025444
 80085a4:	58025458 	.word	0x58025458
 80085a8:	5802546c 	.word	0x5802546c
 80085ac:	58025480 	.word	0x58025480
 80085b0:	58025494 	.word	0x58025494
 80085b4:	fffe000f 	.word	0xfffe000f
 80085b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68d2      	ldr	r2, [r2, #12]
 80085be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80085c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80085e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80085e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b6e      	ldr	r3, [pc, #440]	@ (80087b8 <HAL_DMA_Init+0x648>)
 8008600:	4413      	add	r3, r2
 8008602:	4a6e      	ldr	r2, [pc, #440]	@ (80087bc <HAL_DMA_Init+0x64c>)
 8008604:	fba2 2303 	umull	r2, r3, r2, r3
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	009a      	lsls	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fc45 	bl	8009ea0 <DMA_CalcBaseAndBitshift>
 8008616:	4603      	mov	r3, r0
 8008618:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2201      	movs	r2, #1
 8008624:	409a      	lsls	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	e008      	b.n	800863e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2240      	movs	r2, #64	@ 0x40
 8008630:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2203      	movs	r2, #3
 8008636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e0b7      	b.n	80087ae <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a5f      	ldr	r2, [pc, #380]	@ (80087c0 <HAL_DMA_Init+0x650>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d072      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a5d      	ldr	r2, [pc, #372]	@ (80087c4 <HAL_DMA_Init+0x654>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d06d      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a5c      	ldr	r2, [pc, #368]	@ (80087c8 <HAL_DMA_Init+0x658>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d068      	beq.n	800872e <HAL_DMA_Init+0x5be>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a5a      	ldr	r2, [pc, #360]	@ (80087cc <HAL_DMA_Init+0x65c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d063      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a59      	ldr	r2, [pc, #356]	@ (80087d0 <HAL_DMA_Init+0x660>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d05e      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a57      	ldr	r2, [pc, #348]	@ (80087d4 <HAL_DMA_Init+0x664>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d059      	beq.n	800872e <HAL_DMA_Init+0x5be>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a56      	ldr	r2, [pc, #344]	@ (80087d8 <HAL_DMA_Init+0x668>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d054      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a54      	ldr	r2, [pc, #336]	@ (80087dc <HAL_DMA_Init+0x66c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d04f      	beq.n	800872e <HAL_DMA_Init+0x5be>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a53      	ldr	r2, [pc, #332]	@ (80087e0 <HAL_DMA_Init+0x670>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d04a      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a51      	ldr	r2, [pc, #324]	@ (80087e4 <HAL_DMA_Init+0x674>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d045      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a50      	ldr	r2, [pc, #320]	@ (80087e8 <HAL_DMA_Init+0x678>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d040      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a4e      	ldr	r2, [pc, #312]	@ (80087ec <HAL_DMA_Init+0x67c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d03b      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a4d      	ldr	r2, [pc, #308]	@ (80087f0 <HAL_DMA_Init+0x680>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d036      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4b      	ldr	r2, [pc, #300]	@ (80087f4 <HAL_DMA_Init+0x684>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d031      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a4a      	ldr	r2, [pc, #296]	@ (80087f8 <HAL_DMA_Init+0x688>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d02c      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a48      	ldr	r2, [pc, #288]	@ (80087fc <HAL_DMA_Init+0x68c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d027      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a47      	ldr	r2, [pc, #284]	@ (8008800 <HAL_DMA_Init+0x690>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d022      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a45      	ldr	r2, [pc, #276]	@ (8008804 <HAL_DMA_Init+0x694>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01d      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a44      	ldr	r2, [pc, #272]	@ (8008808 <HAL_DMA_Init+0x698>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d018      	beq.n	800872e <HAL_DMA_Init+0x5be>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a42      	ldr	r2, [pc, #264]	@ (800880c <HAL_DMA_Init+0x69c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a41      	ldr	r2, [pc, #260]	@ (8008810 <HAL_DMA_Init+0x6a0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00e      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3f      	ldr	r2, [pc, #252]	@ (8008814 <HAL_DMA_Init+0x6a4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_DMA_Init+0x5be>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3e      	ldr	r2, [pc, #248]	@ (8008818 <HAL_DMA_Init+0x6a8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d004      	beq.n	800872e <HAL_DMA_Init+0x5be>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a3c      	ldr	r2, [pc, #240]	@ (800881c <HAL_DMA_Init+0x6ac>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d101      	bne.n	8008732 <HAL_DMA_Init+0x5c2>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <HAL_DMA_Init+0x5c4>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d032      	beq.n	800879e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fcdf 	bl	800a0fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b80      	cmp	r3, #128	@ 0x80
 8008744:	d102      	bne.n	800874c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008760:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d010      	beq.n	800878c <HAL_DMA_Init+0x61c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b08      	cmp	r3, #8
 8008770:	d80c      	bhi.n	800878c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fd5c 	bl	800a230 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	e008      	b.n	800879e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	a7fdabf8 	.word	0xa7fdabf8
 80087bc:	cccccccd 	.word	0xcccccccd
 80087c0:	40020010 	.word	0x40020010
 80087c4:	40020028 	.word	0x40020028
 80087c8:	40020040 	.word	0x40020040
 80087cc:	40020058 	.word	0x40020058
 80087d0:	40020070 	.word	0x40020070
 80087d4:	40020088 	.word	0x40020088
 80087d8:	400200a0 	.word	0x400200a0
 80087dc:	400200b8 	.word	0x400200b8
 80087e0:	40020410 	.word	0x40020410
 80087e4:	40020428 	.word	0x40020428
 80087e8:	40020440 	.word	0x40020440
 80087ec:	40020458 	.word	0x40020458
 80087f0:	40020470 	.word	0x40020470
 80087f4:	40020488 	.word	0x40020488
 80087f8:	400204a0 	.word	0x400204a0
 80087fc:	400204b8 	.word	0x400204b8
 8008800:	58025408 	.word	0x58025408
 8008804:	5802541c 	.word	0x5802541c
 8008808:	58025430 	.word	0x58025430
 800880c:	58025444 	.word	0x58025444
 8008810:	58025458 	.word	0x58025458
 8008814:	5802546c 	.word	0x5802546c
 8008818:	58025480 	.word	0x58025480
 800881c:	58025494 	.word	0x58025494

08008820 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e226      	b.n	8008c8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <HAL_DMA_Start_IT+0x2a>
 8008846:	2302      	movs	r3, #2
 8008848:	e21f      	b.n	8008c8a <HAL_DMA_Start_IT+0x46a>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	f040 820a 	bne.w	8008c74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a68      	ldr	r2, [pc, #416]	@ (8008a14 <HAL_DMA_Start_IT+0x1f4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d04a      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a66      	ldr	r2, [pc, #408]	@ (8008a18 <HAL_DMA_Start_IT+0x1f8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d045      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a65      	ldr	r2, [pc, #404]	@ (8008a1c <HAL_DMA_Start_IT+0x1fc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d040      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a63      	ldr	r2, [pc, #396]	@ (8008a20 <HAL_DMA_Start_IT+0x200>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d03b      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a62      	ldr	r2, [pc, #392]	@ (8008a24 <HAL_DMA_Start_IT+0x204>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d036      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a60      	ldr	r2, [pc, #384]	@ (8008a28 <HAL_DMA_Start_IT+0x208>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d031      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a5f      	ldr	r2, [pc, #380]	@ (8008a2c <HAL_DMA_Start_IT+0x20c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d02c      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a30 <HAL_DMA_Start_IT+0x210>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d027      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a5c      	ldr	r2, [pc, #368]	@ (8008a34 <HAL_DMA_Start_IT+0x214>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d022      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a5a      	ldr	r2, [pc, #360]	@ (8008a38 <HAL_DMA_Start_IT+0x218>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d01d      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a59      	ldr	r2, [pc, #356]	@ (8008a3c <HAL_DMA_Start_IT+0x21c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d018      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a57      	ldr	r2, [pc, #348]	@ (8008a40 <HAL_DMA_Start_IT+0x220>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a56      	ldr	r2, [pc, #344]	@ (8008a44 <HAL_DMA_Start_IT+0x224>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00e      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a54      	ldr	r2, [pc, #336]	@ (8008a48 <HAL_DMA_Start_IT+0x228>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d009      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a53      	ldr	r2, [pc, #332]	@ (8008a4c <HAL_DMA_Start_IT+0x22c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d004      	beq.n	800890e <HAL_DMA_Start_IT+0xee>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a51      	ldr	r2, [pc, #324]	@ (8008a50 <HAL_DMA_Start_IT+0x230>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d108      	bne.n	8008920 <HAL_DMA_Start_IT+0x100>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0201 	bic.w	r2, r2, #1
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e007      	b.n	8008930 <HAL_DMA_Start_IT+0x110>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f001 f906 	bl	8009b48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a34      	ldr	r2, [pc, #208]	@ (8008a14 <HAL_DMA_Start_IT+0x1f4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d04a      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <HAL_DMA_Start_IT+0x1f8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d045      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a31      	ldr	r2, [pc, #196]	@ (8008a1c <HAL_DMA_Start_IT+0x1fc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d040      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a30      	ldr	r2, [pc, #192]	@ (8008a20 <HAL_DMA_Start_IT+0x200>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d03b      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2e      	ldr	r2, [pc, #184]	@ (8008a24 <HAL_DMA_Start_IT+0x204>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d036      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2d      	ldr	r2, [pc, #180]	@ (8008a28 <HAL_DMA_Start_IT+0x208>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d031      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a2c <HAL_DMA_Start_IT+0x20c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d02c      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2a      	ldr	r2, [pc, #168]	@ (8008a30 <HAL_DMA_Start_IT+0x210>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d027      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a28      	ldr	r2, [pc, #160]	@ (8008a34 <HAL_DMA_Start_IT+0x214>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d022      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a27      	ldr	r2, [pc, #156]	@ (8008a38 <HAL_DMA_Start_IT+0x218>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d01d      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a25      	ldr	r2, [pc, #148]	@ (8008a3c <HAL_DMA_Start_IT+0x21c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d018      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a24      	ldr	r2, [pc, #144]	@ (8008a40 <HAL_DMA_Start_IT+0x220>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d013      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a22      	ldr	r2, [pc, #136]	@ (8008a44 <HAL_DMA_Start_IT+0x224>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00e      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a21      	ldr	r2, [pc, #132]	@ (8008a48 <HAL_DMA_Start_IT+0x228>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d009      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1f      	ldr	r2, [pc, #124]	@ (8008a4c <HAL_DMA_Start_IT+0x22c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_DMA_Start_IT+0x1bc>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a50 <HAL_DMA_Start_IT+0x230>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d101      	bne.n	80089e0 <HAL_DMA_Start_IT+0x1c0>
 80089dc:	2301      	movs	r3, #1
 80089de:	e000      	b.n	80089e2 <HAL_DMA_Start_IT+0x1c2>
 80089e0:	2300      	movs	r3, #0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d036      	beq.n	8008a54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f023 021e 	bic.w	r2, r3, #30
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0216 	orr.w	r2, r2, #22
 80089f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03e      	beq.n	8008a80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0208 	orr.w	r2, r2, #8
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e035      	b.n	8008a80 <HAL_DMA_Start_IT+0x260>
 8008a14:	40020010 	.word	0x40020010
 8008a18:	40020028 	.word	0x40020028
 8008a1c:	40020040 	.word	0x40020040
 8008a20:	40020058 	.word	0x40020058
 8008a24:	40020070 	.word	0x40020070
 8008a28:	40020088 	.word	0x40020088
 8008a2c:	400200a0 	.word	0x400200a0
 8008a30:	400200b8 	.word	0x400200b8
 8008a34:	40020410 	.word	0x40020410
 8008a38:	40020428 	.word	0x40020428
 8008a3c:	40020440 	.word	0x40020440
 8008a40:	40020458 	.word	0x40020458
 8008a44:	40020470 	.word	0x40020470
 8008a48:	40020488 	.word	0x40020488
 8008a4c:	400204a0 	.word	0x400204a0
 8008a50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f023 020e 	bic.w	r2, r3, #14
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 020a 	orr.w	r2, r2, #10
 8008a66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0204 	orr.w	r2, r2, #4
 8008a7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a83      	ldr	r2, [pc, #524]	@ (8008c94 <HAL_DMA_Start_IT+0x474>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d072      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a82      	ldr	r2, [pc, #520]	@ (8008c98 <HAL_DMA_Start_IT+0x478>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d06d      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a80      	ldr	r2, [pc, #512]	@ (8008c9c <HAL_DMA_Start_IT+0x47c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d068      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8008ca0 <HAL_DMA_Start_IT+0x480>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d063      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a7d      	ldr	r2, [pc, #500]	@ (8008ca4 <HAL_DMA_Start_IT+0x484>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d05e      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ca8 <HAL_DMA_Start_IT+0x488>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d059      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8008cac <HAL_DMA_Start_IT+0x48c>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d054      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a79      	ldr	r2, [pc, #484]	@ (8008cb0 <HAL_DMA_Start_IT+0x490>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d04f      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a77      	ldr	r2, [pc, #476]	@ (8008cb4 <HAL_DMA_Start_IT+0x494>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d04a      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a76      	ldr	r2, [pc, #472]	@ (8008cb8 <HAL_DMA_Start_IT+0x498>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d045      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a74      	ldr	r2, [pc, #464]	@ (8008cbc <HAL_DMA_Start_IT+0x49c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d040      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a73      	ldr	r2, [pc, #460]	@ (8008cc0 <HAL_DMA_Start_IT+0x4a0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d03b      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a71      	ldr	r2, [pc, #452]	@ (8008cc4 <HAL_DMA_Start_IT+0x4a4>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d036      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a70      	ldr	r2, [pc, #448]	@ (8008cc8 <HAL_DMA_Start_IT+0x4a8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d031      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a6e      	ldr	r2, [pc, #440]	@ (8008ccc <HAL_DMA_Start_IT+0x4ac>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d02c      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8008cd0 <HAL_DMA_Start_IT+0x4b0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d027      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd4 <HAL_DMA_Start_IT+0x4b4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8008cd8 <HAL_DMA_Start_IT+0x4b8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d01d      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a68      	ldr	r2, [pc, #416]	@ (8008cdc <HAL_DMA_Start_IT+0x4bc>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a67      	ldr	r2, [pc, #412]	@ (8008ce0 <HAL_DMA_Start_IT+0x4c0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a65      	ldr	r2, [pc, #404]	@ (8008ce4 <HAL_DMA_Start_IT+0x4c4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a64      	ldr	r2, [pc, #400]	@ (8008ce8 <HAL_DMA_Start_IT+0x4c8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a62      	ldr	r2, [pc, #392]	@ (8008cec <HAL_DMA_Start_IT+0x4cc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_DMA_Start_IT+0x350>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a61      	ldr	r2, [pc, #388]	@ (8008cf0 <HAL_DMA_Start_IT+0x4d0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d101      	bne.n	8008b74 <HAL_DMA_Start_IT+0x354>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <HAL_DMA_Start_IT+0x356>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01a      	beq.n	8008bb0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a37      	ldr	r2, [pc, #220]	@ (8008c94 <HAL_DMA_Start_IT+0x474>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d04a      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a36      	ldr	r2, [pc, #216]	@ (8008c98 <HAL_DMA_Start_IT+0x478>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d045      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a34      	ldr	r2, [pc, #208]	@ (8008c9c <HAL_DMA_Start_IT+0x47c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d040      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a33      	ldr	r2, [pc, #204]	@ (8008ca0 <HAL_DMA_Start_IT+0x480>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d03b      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a31      	ldr	r2, [pc, #196]	@ (8008ca4 <HAL_DMA_Start_IT+0x484>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d036      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a30      	ldr	r2, [pc, #192]	@ (8008ca8 <HAL_DMA_Start_IT+0x488>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d031      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8008cac <HAL_DMA_Start_IT+0x48c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02c      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8008cb0 <HAL_DMA_Start_IT+0x490>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d027      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb4 <HAL_DMA_Start_IT+0x494>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d022      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cb8 <HAL_DMA_Start_IT+0x498>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d01d      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a28      	ldr	r2, [pc, #160]	@ (8008cbc <HAL_DMA_Start_IT+0x49c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d018      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a27      	ldr	r2, [pc, #156]	@ (8008cc0 <HAL_DMA_Start_IT+0x4a0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a25      	ldr	r2, [pc, #148]	@ (8008cc4 <HAL_DMA_Start_IT+0x4a4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00e      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a24      	ldr	r2, [pc, #144]	@ (8008cc8 <HAL_DMA_Start_IT+0x4a8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a22      	ldr	r2, [pc, #136]	@ (8008ccc <HAL_DMA_Start_IT+0x4ac>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_DMA_Start_IT+0x430>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a21      	ldr	r2, [pc, #132]	@ (8008cd0 <HAL_DMA_Start_IT+0x4b0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d108      	bne.n	8008c62 <HAL_DMA_Start_IT+0x442>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e012      	b.n	8008c88 <HAL_DMA_Start_IT+0x468>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0201 	orr.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e009      	b.n	8008c88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40020010 	.word	0x40020010
 8008c98:	40020028 	.word	0x40020028
 8008c9c:	40020040 	.word	0x40020040
 8008ca0:	40020058 	.word	0x40020058
 8008ca4:	40020070 	.word	0x40020070
 8008ca8:	40020088 	.word	0x40020088
 8008cac:	400200a0 	.word	0x400200a0
 8008cb0:	400200b8 	.word	0x400200b8
 8008cb4:	40020410 	.word	0x40020410
 8008cb8:	40020428 	.word	0x40020428
 8008cbc:	40020440 	.word	0x40020440
 8008cc0:	40020458 	.word	0x40020458
 8008cc4:	40020470 	.word	0x40020470
 8008cc8:	40020488 	.word	0x40020488
 8008ccc:	400204a0 	.word	0x400204a0
 8008cd0:	400204b8 	.word	0x400204b8
 8008cd4:	58025408 	.word	0x58025408
 8008cd8:	5802541c 	.word	0x5802541c
 8008cdc:	58025430 	.word	0x58025430
 8008ce0:	58025444 	.word	0x58025444
 8008ce4:	58025458 	.word	0x58025458
 8008ce8:	5802546c 	.word	0x5802546c
 8008cec:	58025480 	.word	0x58025480
 8008cf0:	58025494 	.word	0x58025494

08008cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	@ 0x28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d00:	4b67      	ldr	r3, [pc, #412]	@ (8008ea0 <HAL_DMA_IRQHandler+0x1ac>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a67      	ldr	r2, [pc, #412]	@ (8008ea4 <HAL_DMA_IRQHandler+0x1b0>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	0a9b      	lsrs	r3, r3, #10
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8008ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d04a      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a5d      	ldr	r2, [pc, #372]	@ (8008eac <HAL_DMA_IRQHandler+0x1b8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d045      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8008eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d040      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a5a      	ldr	r2, [pc, #360]	@ (8008eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d03b      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a59      	ldr	r2, [pc, #356]	@ (8008eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d036      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a57      	ldr	r2, [pc, #348]	@ (8008ebc <HAL_DMA_IRQHandler+0x1c8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d031      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a56      	ldr	r2, [pc, #344]	@ (8008ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d02c      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a54      	ldr	r2, [pc, #336]	@ (8008ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d027      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a53      	ldr	r2, [pc, #332]	@ (8008ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d022      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a51      	ldr	r2, [pc, #324]	@ (8008ecc <HAL_DMA_IRQHandler+0x1d8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01d      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a50      	ldr	r2, [pc, #320]	@ (8008ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d018      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a4e      	ldr	r2, [pc, #312]	@ (8008ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a4d      	ldr	r2, [pc, #308]	@ (8008ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00e      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a4b      	ldr	r2, [pc, #300]	@ (8008edc <HAL_DMA_IRQHandler+0x1e8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d009      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a4a      	ldr	r2, [pc, #296]	@ (8008ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d004      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0xd2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a48      	ldr	r2, [pc, #288]	@ (8008ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d101      	bne.n	8008dca <HAL_DMA_IRQHandler+0xd6>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <HAL_DMA_IRQHandler+0xd8>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 842b 	beq.w	8009628 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2208      	movs	r2, #8
 8008ddc:	409a      	lsls	r2, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 80a2 	beq.w	8008f2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a2e      	ldr	r2, [pc, #184]	@ (8008ea8 <HAL_DMA_IRQHandler+0x1b4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d04a      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2d      	ldr	r2, [pc, #180]	@ (8008eac <HAL_DMA_IRQHandler+0x1b8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d045      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2b      	ldr	r2, [pc, #172]	@ (8008eb0 <HAL_DMA_IRQHandler+0x1bc>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d040      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb4 <HAL_DMA_IRQHandler+0x1c0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d03b      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a28      	ldr	r2, [pc, #160]	@ (8008eb8 <HAL_DMA_IRQHandler+0x1c4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d036      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a27      	ldr	r2, [pc, #156]	@ (8008ebc <HAL_DMA_IRQHandler+0x1c8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d031      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a25      	ldr	r2, [pc, #148]	@ (8008ec0 <HAL_DMA_IRQHandler+0x1cc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d02c      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a24      	ldr	r2, [pc, #144]	@ (8008ec4 <HAL_DMA_IRQHandler+0x1d0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d027      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a22      	ldr	r2, [pc, #136]	@ (8008ec8 <HAL_DMA_IRQHandler+0x1d4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d022      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a21      	ldr	r2, [pc, #132]	@ (8008ecc <HAL_DMA_IRQHandler+0x1d8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d01d      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed0 <HAL_DMA_IRQHandler+0x1dc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d018      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <HAL_DMA_IRQHandler+0x1e0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d013      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed8 <HAL_DMA_IRQHandler+0x1e4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00e      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008edc <HAL_DMA_IRQHandler+0x1e8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a19      	ldr	r2, [pc, #100]	@ (8008ee0 <HAL_DMA_IRQHandler+0x1ec>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x194>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a18      	ldr	r2, [pc, #96]	@ (8008ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d12f      	bne.n	8008ee8 <HAL_DMA_IRQHandler+0x1f4>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e02e      	b.n	8008efc <HAL_DMA_IRQHandler+0x208>
 8008e9e:	bf00      	nop
 8008ea0:	24000000 	.word	0x24000000
 8008ea4:	1b4e81b5 	.word	0x1b4e81b5
 8008ea8:	40020010 	.word	0x40020010
 8008eac:	40020028 	.word	0x40020028
 8008eb0:	40020040 	.word	0x40020040
 8008eb4:	40020058 	.word	0x40020058
 8008eb8:	40020070 	.word	0x40020070
 8008ebc:	40020088 	.word	0x40020088
 8008ec0:	400200a0 	.word	0x400200a0
 8008ec4:	400200b8 	.word	0x400200b8
 8008ec8:	40020410 	.word	0x40020410
 8008ecc:	40020428 	.word	0x40020428
 8008ed0:	40020440 	.word	0x40020440
 8008ed4:	40020458 	.word	0x40020458
 8008ed8:	40020470 	.word	0x40020470
 8008edc:	40020488 	.word	0x40020488
 8008ee0:	400204a0 	.word	0x400204a0
 8008ee4:	400204b8 	.word	0x400204b8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2301      	movne	r3, #1
 8008ef8:	2300      	moveq	r3, #0
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d015      	beq.n	8008f2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0204 	bic.w	r2, r2, #4
 8008f0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	2208      	movs	r2, #8
 8008f1a:	409a      	lsls	r2, r3
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f24:	f043 0201 	orr.w	r2, r3, #1
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d06e      	beq.n	8009020 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a69      	ldr	r2, [pc, #420]	@ (80090ec <HAL_DMA_IRQHandler+0x3f8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d04a      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a67      	ldr	r2, [pc, #412]	@ (80090f0 <HAL_DMA_IRQHandler+0x3fc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d045      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a66      	ldr	r2, [pc, #408]	@ (80090f4 <HAL_DMA_IRQHandler+0x400>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d040      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a64      	ldr	r2, [pc, #400]	@ (80090f8 <HAL_DMA_IRQHandler+0x404>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d03b      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a63      	ldr	r2, [pc, #396]	@ (80090fc <HAL_DMA_IRQHandler+0x408>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d036      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a61      	ldr	r2, [pc, #388]	@ (8009100 <HAL_DMA_IRQHandler+0x40c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d031      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a60      	ldr	r2, [pc, #384]	@ (8009104 <HAL_DMA_IRQHandler+0x410>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d02c      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8009108 <HAL_DMA_IRQHandler+0x414>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d027      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a5d      	ldr	r2, [pc, #372]	@ (800910c <HAL_DMA_IRQHandler+0x418>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d022      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8009110 <HAL_DMA_IRQHandler+0x41c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d01d      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a5a      	ldr	r2, [pc, #360]	@ (8009114 <HAL_DMA_IRQHandler+0x420>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d018      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a58      	ldr	r2, [pc, #352]	@ (8009118 <HAL_DMA_IRQHandler+0x424>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a57      	ldr	r2, [pc, #348]	@ (800911c <HAL_DMA_IRQHandler+0x428>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a55      	ldr	r2, [pc, #340]	@ (8009120 <HAL_DMA_IRQHandler+0x42c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a54      	ldr	r2, [pc, #336]	@ (8009124 <HAL_DMA_IRQHandler+0x430>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x2ee>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a52      	ldr	r2, [pc, #328]	@ (8009128 <HAL_DMA_IRQHandler+0x434>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d10a      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x304>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf14      	ite	ne
 8008ff0:	2301      	movne	r3, #1
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	e003      	b.n	8009000 <HAL_DMA_IRQHandler+0x30c>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00d      	beq.n	8009020 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	2201      	movs	r2, #1
 800900e:	409a      	lsls	r2, r3
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009018:	f043 0202 	orr.w	r2, r3, #2
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2204      	movs	r2, #4
 800902a:	409a      	lsls	r2, r3
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	4013      	ands	r3, r2
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 808f 	beq.w	8009154 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a2c      	ldr	r2, [pc, #176]	@ (80090ec <HAL_DMA_IRQHandler+0x3f8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d04a      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a2a      	ldr	r2, [pc, #168]	@ (80090f0 <HAL_DMA_IRQHandler+0x3fc>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d045      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a29      	ldr	r2, [pc, #164]	@ (80090f4 <HAL_DMA_IRQHandler+0x400>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d040      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a27      	ldr	r2, [pc, #156]	@ (80090f8 <HAL_DMA_IRQHandler+0x404>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d03b      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a26      	ldr	r2, [pc, #152]	@ (80090fc <HAL_DMA_IRQHandler+0x408>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d036      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a24      	ldr	r2, [pc, #144]	@ (8009100 <HAL_DMA_IRQHandler+0x40c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d031      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a23      	ldr	r2, [pc, #140]	@ (8009104 <HAL_DMA_IRQHandler+0x410>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d02c      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a21      	ldr	r2, [pc, #132]	@ (8009108 <HAL_DMA_IRQHandler+0x414>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d027      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a20      	ldr	r2, [pc, #128]	@ (800910c <HAL_DMA_IRQHandler+0x418>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d022      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1e      	ldr	r2, [pc, #120]	@ (8009110 <HAL_DMA_IRQHandler+0x41c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d01d      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1d      	ldr	r2, [pc, #116]	@ (8009114 <HAL_DMA_IRQHandler+0x420>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d018      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009118 <HAL_DMA_IRQHandler+0x424>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d013      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1a      	ldr	r2, [pc, #104]	@ (800911c <HAL_DMA_IRQHandler+0x428>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a18      	ldr	r2, [pc, #96]	@ (8009120 <HAL_DMA_IRQHandler+0x42c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a17      	ldr	r2, [pc, #92]	@ (8009124 <HAL_DMA_IRQHandler+0x430>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x3e2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a15      	ldr	r2, [pc, #84]	@ (8009128 <HAL_DMA_IRQHandler+0x434>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d12a      	bne.n	800912c <HAL_DMA_IRQHandler+0x438>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf14      	ite	ne
 80090e4:	2301      	movne	r3, #1
 80090e6:	2300      	moveq	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	e023      	b.n	8009134 <HAL_DMA_IRQHandler+0x440>
 80090ec:	40020010 	.word	0x40020010
 80090f0:	40020028 	.word	0x40020028
 80090f4:	40020040 	.word	0x40020040
 80090f8:	40020058 	.word	0x40020058
 80090fc:	40020070 	.word	0x40020070
 8009100:	40020088 	.word	0x40020088
 8009104:	400200a0 	.word	0x400200a0
 8009108:	400200b8 	.word	0x400200b8
 800910c:	40020410 	.word	0x40020410
 8009110:	40020428 	.word	0x40020428
 8009114:	40020440 	.word	0x40020440
 8009118:	40020458 	.word	0x40020458
 800911c:	40020470 	.word	0x40020470
 8009120:	40020488 	.word	0x40020488
 8009124:	400204a0 	.word	0x400204a0
 8009128:	400204b8 	.word	0x400204b8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00d      	beq.n	8009154 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	2204      	movs	r2, #4
 8009142:	409a      	lsls	r2, r3
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914c:	f043 0204 	orr.w	r2, r3, #4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2210      	movs	r2, #16
 800915e:	409a      	lsls	r2, r3
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	4013      	ands	r3, r2
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80a6 	beq.w	80092b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a85      	ldr	r2, [pc, #532]	@ (8009384 <HAL_DMA_IRQHandler+0x690>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d04a      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a83      	ldr	r2, [pc, #524]	@ (8009388 <HAL_DMA_IRQHandler+0x694>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d045      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a82      	ldr	r2, [pc, #520]	@ (800938c <HAL_DMA_IRQHandler+0x698>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d040      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a80      	ldr	r2, [pc, #512]	@ (8009390 <HAL_DMA_IRQHandler+0x69c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d03b      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a7f      	ldr	r2, [pc, #508]	@ (8009394 <HAL_DMA_IRQHandler+0x6a0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d036      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a7d      	ldr	r2, [pc, #500]	@ (8009398 <HAL_DMA_IRQHandler+0x6a4>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d031      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a7c      	ldr	r2, [pc, #496]	@ (800939c <HAL_DMA_IRQHandler+0x6a8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d02c      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a7a      	ldr	r2, [pc, #488]	@ (80093a0 <HAL_DMA_IRQHandler+0x6ac>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d027      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a79      	ldr	r2, [pc, #484]	@ (80093a4 <HAL_DMA_IRQHandler+0x6b0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d022      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a77      	ldr	r2, [pc, #476]	@ (80093a8 <HAL_DMA_IRQHandler+0x6b4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d01d      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a76      	ldr	r2, [pc, #472]	@ (80093ac <HAL_DMA_IRQHandler+0x6b8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d018      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a74      	ldr	r2, [pc, #464]	@ (80093b0 <HAL_DMA_IRQHandler+0x6bc>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d013      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a73      	ldr	r2, [pc, #460]	@ (80093b4 <HAL_DMA_IRQHandler+0x6c0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00e      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a71      	ldr	r2, [pc, #452]	@ (80093b8 <HAL_DMA_IRQHandler+0x6c4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d009      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a70      	ldr	r2, [pc, #448]	@ (80093bc <HAL_DMA_IRQHandler+0x6c8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d004      	beq.n	800920a <HAL_DMA_IRQHandler+0x516>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a6e      	ldr	r2, [pc, #440]	@ (80093c0 <HAL_DMA_IRQHandler+0x6cc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d10a      	bne.n	8009220 <HAL_DMA_IRQHandler+0x52c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	e009      	b.n	8009234 <HAL_DMA_IRQHandler+0x540>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	bf14      	ite	ne
 800922e:	2301      	movne	r3, #1
 8009230:	2300      	moveq	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d03e      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800923c:	f003 031f 	and.w	r3, r3, #31
 8009240:	2210      	movs	r2, #16
 8009242:	409a      	lsls	r2, r3
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d018      	beq.n	8009288 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d108      	bne.n	8009276 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	d024      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
 8009274:	e01f      	b.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01b      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
 8009286:	e016      	b.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0208 	bic.w	r2, r2, #8
 80092a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	2220      	movs	r2, #32
 80092c0:	409a      	lsls	r2, r3
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8110 	beq.w	80094ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009384 <HAL_DMA_IRQHandler+0x690>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d04a      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a2b      	ldr	r2, [pc, #172]	@ (8009388 <HAL_DMA_IRQHandler+0x694>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d045      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a29      	ldr	r2, [pc, #164]	@ (800938c <HAL_DMA_IRQHandler+0x698>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d040      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a28      	ldr	r2, [pc, #160]	@ (8009390 <HAL_DMA_IRQHandler+0x69c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d03b      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a26      	ldr	r2, [pc, #152]	@ (8009394 <HAL_DMA_IRQHandler+0x6a0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d036      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a25      	ldr	r2, [pc, #148]	@ (8009398 <HAL_DMA_IRQHandler+0x6a4>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d031      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a23      	ldr	r2, [pc, #140]	@ (800939c <HAL_DMA_IRQHandler+0x6a8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d02c      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a22      	ldr	r2, [pc, #136]	@ (80093a0 <HAL_DMA_IRQHandler+0x6ac>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d027      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a20      	ldr	r2, [pc, #128]	@ (80093a4 <HAL_DMA_IRQHandler+0x6b0>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d022      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1f      	ldr	r2, [pc, #124]	@ (80093a8 <HAL_DMA_IRQHandler+0x6b4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d01d      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1d      	ldr	r2, [pc, #116]	@ (80093ac <HAL_DMA_IRQHandler+0x6b8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d018      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a1c      	ldr	r2, [pc, #112]	@ (80093b0 <HAL_DMA_IRQHandler+0x6bc>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1a      	ldr	r2, [pc, #104]	@ (80093b4 <HAL_DMA_IRQHandler+0x6c0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00e      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a19      	ldr	r2, [pc, #100]	@ (80093b8 <HAL_DMA_IRQHandler+0x6c4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d009      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a17      	ldr	r2, [pc, #92]	@ (80093bc <HAL_DMA_IRQHandler+0x6c8>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d004      	beq.n	800936c <HAL_DMA_IRQHandler+0x678>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a16      	ldr	r2, [pc, #88]	@ (80093c0 <HAL_DMA_IRQHandler+0x6cc>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d12b      	bne.n	80093c4 <HAL_DMA_IRQHandler+0x6d0>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0310 	and.w	r3, r3, #16
 8009376:	2b00      	cmp	r3, #0
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	e02a      	b.n	80093d8 <HAL_DMA_IRQHandler+0x6e4>
 8009382:	bf00      	nop
 8009384:	40020010 	.word	0x40020010
 8009388:	40020028 	.word	0x40020028
 800938c:	40020040 	.word	0x40020040
 8009390:	40020058 	.word	0x40020058
 8009394:	40020070 	.word	0x40020070
 8009398:	40020088 	.word	0x40020088
 800939c:	400200a0 	.word	0x400200a0
 80093a0:	400200b8 	.word	0x400200b8
 80093a4:	40020410 	.word	0x40020410
 80093a8:	40020428 	.word	0x40020428
 80093ac:	40020440 	.word	0x40020440
 80093b0:	40020458 	.word	0x40020458
 80093b4:	40020470 	.word	0x40020470
 80093b8:	40020488 	.word	0x40020488
 80093bc:	400204a0 	.word	0x400204a0
 80093c0:	400204b8 	.word	0x400204b8
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bf14      	ite	ne
 80093d2:	2301      	movne	r3, #1
 80093d4:	2300      	moveq	r3, #0
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8087 	beq.w	80094ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093e2:	f003 031f 	and.w	r3, r3, #31
 80093e6:	2220      	movs	r2, #32
 80093e8:	409a      	lsls	r2, r3
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d139      	bne.n	800946e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0216 	bic.w	r2, r2, #22
 8009408:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009418:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <HAL_DMA_IRQHandler+0x736>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 0208 	bic.w	r2, r2, #8
 8009438:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	223f      	movs	r2, #63	@ 0x3f
 8009444:	409a      	lsls	r2, r3
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 834a 	beq.w	8009af8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
          }
          return;
 800946c:	e344      	b.n	8009af8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d018      	beq.n	80094ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d108      	bne.n	800949c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948e:	2b00      	cmp	r3, #0
 8009490:	d02c      	beq.n	80094ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	e027      	b.n	80094ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d023      	beq.n	80094ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
 80094ac:	e01e      	b.n	80094ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10f      	bne.n	80094dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0210 	bic.w	r2, r2, #16
 80094ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8306 	beq.w	8009b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 8088 	beq.w	8009614 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2204      	movs	r2, #4
 8009508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a7a      	ldr	r2, [pc, #488]	@ (80096fc <HAL_DMA_IRQHandler+0xa08>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d04a      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a79      	ldr	r2, [pc, #484]	@ (8009700 <HAL_DMA_IRQHandler+0xa0c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d045      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a77      	ldr	r2, [pc, #476]	@ (8009704 <HAL_DMA_IRQHandler+0xa10>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d040      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a76      	ldr	r2, [pc, #472]	@ (8009708 <HAL_DMA_IRQHandler+0xa14>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d03b      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a74      	ldr	r2, [pc, #464]	@ (800970c <HAL_DMA_IRQHandler+0xa18>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d036      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a73      	ldr	r2, [pc, #460]	@ (8009710 <HAL_DMA_IRQHandler+0xa1c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d031      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a71      	ldr	r2, [pc, #452]	@ (8009714 <HAL_DMA_IRQHandler+0xa20>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d02c      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a70      	ldr	r2, [pc, #448]	@ (8009718 <HAL_DMA_IRQHandler+0xa24>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d027      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a6e      	ldr	r2, [pc, #440]	@ (800971c <HAL_DMA_IRQHandler+0xa28>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d022      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a6d      	ldr	r2, [pc, #436]	@ (8009720 <HAL_DMA_IRQHandler+0xa2c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d01d      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a6b      	ldr	r2, [pc, #428]	@ (8009724 <HAL_DMA_IRQHandler+0xa30>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d018      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a6a      	ldr	r2, [pc, #424]	@ (8009728 <HAL_DMA_IRQHandler+0xa34>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d013      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a68      	ldr	r2, [pc, #416]	@ (800972c <HAL_DMA_IRQHandler+0xa38>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00e      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a67      	ldr	r2, [pc, #412]	@ (8009730 <HAL_DMA_IRQHandler+0xa3c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d009      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a65      	ldr	r2, [pc, #404]	@ (8009734 <HAL_DMA_IRQHandler+0xa40>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_DMA_IRQHandler+0x8b8>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a64      	ldr	r2, [pc, #400]	@ (8009738 <HAL_DMA_IRQHandler+0xa44>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d108      	bne.n	80095be <HAL_DMA_IRQHandler+0x8ca>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e007      	b.n	80095ce <HAL_DMA_IRQHandler+0x8da>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0201 	bic.w	r2, r2, #1
 80095cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d307      	bcc.n	80095ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f2      	bne.n	80095ce <HAL_DMA_IRQHandler+0x8da>
 80095e8:	e000      	b.n	80095ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80095ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2203      	movs	r2, #3
 80095fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009602:	e003      	b.n	800960c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8272 	beq.w	8009b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
 8009626:	e26c      	b.n	8009b02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a43      	ldr	r2, [pc, #268]	@ (800973c <HAL_DMA_IRQHandler+0xa48>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d022      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a42      	ldr	r2, [pc, #264]	@ (8009740 <HAL_DMA_IRQHandler+0xa4c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d01d      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a40      	ldr	r2, [pc, #256]	@ (8009744 <HAL_DMA_IRQHandler+0xa50>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d018      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a3f      	ldr	r2, [pc, #252]	@ (8009748 <HAL_DMA_IRQHandler+0xa54>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a3d      	ldr	r2, [pc, #244]	@ (800974c <HAL_DMA_IRQHandler+0xa58>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00e      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a3c      	ldr	r2, [pc, #240]	@ (8009750 <HAL_DMA_IRQHandler+0xa5c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d009      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a3a      	ldr	r2, [pc, #232]	@ (8009754 <HAL_DMA_IRQHandler+0xa60>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d004      	beq.n	8009678 <HAL_DMA_IRQHandler+0x984>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a39      	ldr	r2, [pc, #228]	@ (8009758 <HAL_DMA_IRQHandler+0xa64>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d101      	bne.n	800967c <HAL_DMA_IRQHandler+0x988>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <HAL_DMA_IRQHandler+0x98a>
 800967c:	2300      	movs	r3, #0
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 823f 	beq.w	8009b02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009690:	f003 031f 	and.w	r3, r3, #31
 8009694:	2204      	movs	r2, #4
 8009696:	409a      	lsls	r2, r3
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	4013      	ands	r3, r2
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 80cd 	beq.w	800983c <HAL_DMA_IRQHandler+0xb48>
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80c7 	beq.w	800983c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096b2:	f003 031f 	and.w	r3, r3, #31
 80096b6:	2204      	movs	r2, #4
 80096b8:	409a      	lsls	r2, r3
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d049      	beq.n	800975c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8210 	beq.w	8009afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096e4:	e20a      	b.n	8009afc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8206 	beq.w	8009afc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096f8:	e200      	b.n	8009afc <HAL_DMA_IRQHandler+0xe08>
 80096fa:	bf00      	nop
 80096fc:	40020010 	.word	0x40020010
 8009700:	40020028 	.word	0x40020028
 8009704:	40020040 	.word	0x40020040
 8009708:	40020058 	.word	0x40020058
 800970c:	40020070 	.word	0x40020070
 8009710:	40020088 	.word	0x40020088
 8009714:	400200a0 	.word	0x400200a0
 8009718:	400200b8 	.word	0x400200b8
 800971c:	40020410 	.word	0x40020410
 8009720:	40020428 	.word	0x40020428
 8009724:	40020440 	.word	0x40020440
 8009728:	40020458 	.word	0x40020458
 800972c:	40020470 	.word	0x40020470
 8009730:	40020488 	.word	0x40020488
 8009734:	400204a0 	.word	0x400204a0
 8009738:	400204b8 	.word	0x400204b8
 800973c:	58025408 	.word	0x58025408
 8009740:	5802541c 	.word	0x5802541c
 8009744:	58025430 	.word	0x58025430
 8009748:	58025444 	.word	0x58025444
 800974c:	58025458 	.word	0x58025458
 8009750:	5802546c 	.word	0x5802546c
 8009754:	58025480 	.word	0x58025480
 8009758:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d160      	bne.n	8009828 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a7f      	ldr	r2, [pc, #508]	@ (8009968 <HAL_DMA_IRQHandler+0xc74>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d04a      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a7d      	ldr	r2, [pc, #500]	@ (800996c <HAL_DMA_IRQHandler+0xc78>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d045      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a7c      	ldr	r2, [pc, #496]	@ (8009970 <HAL_DMA_IRQHandler+0xc7c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d040      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a7a      	ldr	r2, [pc, #488]	@ (8009974 <HAL_DMA_IRQHandler+0xc80>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d03b      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a79      	ldr	r2, [pc, #484]	@ (8009978 <HAL_DMA_IRQHandler+0xc84>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d036      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a77      	ldr	r2, [pc, #476]	@ (800997c <HAL_DMA_IRQHandler+0xc88>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d031      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a76      	ldr	r2, [pc, #472]	@ (8009980 <HAL_DMA_IRQHandler+0xc8c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d02c      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a74      	ldr	r2, [pc, #464]	@ (8009984 <HAL_DMA_IRQHandler+0xc90>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d027      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a73      	ldr	r2, [pc, #460]	@ (8009988 <HAL_DMA_IRQHandler+0xc94>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d022      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a71      	ldr	r2, [pc, #452]	@ (800998c <HAL_DMA_IRQHandler+0xc98>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01d      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a70      	ldr	r2, [pc, #448]	@ (8009990 <HAL_DMA_IRQHandler+0xc9c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d018      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a6e      	ldr	r2, [pc, #440]	@ (8009994 <HAL_DMA_IRQHandler+0xca0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a6d      	ldr	r2, [pc, #436]	@ (8009998 <HAL_DMA_IRQHandler+0xca4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a6b      	ldr	r2, [pc, #428]	@ (800999c <HAL_DMA_IRQHandler+0xca8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a6a      	ldr	r2, [pc, #424]	@ (80099a0 <HAL_DMA_IRQHandler+0xcac>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_DMA_IRQHandler+0xb12>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a68      	ldr	r2, [pc, #416]	@ (80099a4 <HAL_DMA_IRQHandler+0xcb0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d108      	bne.n	8009818 <HAL_DMA_IRQHandler+0xb24>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0208 	bic.w	r2, r2, #8
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e007      	b.n	8009828 <HAL_DMA_IRQHandler+0xb34>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 0204 	bic.w	r2, r2, #4
 8009826:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8165 	beq.w	8009afc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800983a:	e15f      	b.n	8009afc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009840:	f003 031f 	and.w	r3, r3, #31
 8009844:	2202      	movs	r2, #2
 8009846:	409a      	lsls	r2, r3
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80c5 	beq.w	80099dc <HAL_DMA_IRQHandler+0xce8>
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80bf 	beq.w	80099dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009862:	f003 031f 	and.w	r3, r3, #31
 8009866:	2202      	movs	r2, #2
 8009868:	409a      	lsls	r2, r3
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d018      	beq.n	80098aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 813a 	beq.w	8009b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009894:	e134      	b.n	8009b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8130 	beq.w	8009b00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098a8:	e12a      	b.n	8009b00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 8089 	bne.w	80099c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009968 <HAL_DMA_IRQHandler+0xc74>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d04a      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a29      	ldr	r2, [pc, #164]	@ (800996c <HAL_DMA_IRQHandler+0xc78>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d045      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a28      	ldr	r2, [pc, #160]	@ (8009970 <HAL_DMA_IRQHandler+0xc7c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d040      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a26      	ldr	r2, [pc, #152]	@ (8009974 <HAL_DMA_IRQHandler+0xc80>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d03b      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a25      	ldr	r2, [pc, #148]	@ (8009978 <HAL_DMA_IRQHandler+0xc84>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d036      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a23      	ldr	r2, [pc, #140]	@ (800997c <HAL_DMA_IRQHandler+0xc88>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d031      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a22      	ldr	r2, [pc, #136]	@ (8009980 <HAL_DMA_IRQHandler+0xc8c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d02c      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a20      	ldr	r2, [pc, #128]	@ (8009984 <HAL_DMA_IRQHandler+0xc90>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d027      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1f      	ldr	r2, [pc, #124]	@ (8009988 <HAL_DMA_IRQHandler+0xc94>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d022      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a1d      	ldr	r2, [pc, #116]	@ (800998c <HAL_DMA_IRQHandler+0xc98>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01d      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1c      	ldr	r2, [pc, #112]	@ (8009990 <HAL_DMA_IRQHandler+0xc9c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d018      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a1a      	ldr	r2, [pc, #104]	@ (8009994 <HAL_DMA_IRQHandler+0xca0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d013      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a19      	ldr	r2, [pc, #100]	@ (8009998 <HAL_DMA_IRQHandler+0xca4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00e      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a17      	ldr	r2, [pc, #92]	@ (800999c <HAL_DMA_IRQHandler+0xca8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d009      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a16      	ldr	r2, [pc, #88]	@ (80099a0 <HAL_DMA_IRQHandler+0xcac>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d004      	beq.n	8009956 <HAL_DMA_IRQHandler+0xc62>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a14      	ldr	r2, [pc, #80]	@ (80099a4 <HAL_DMA_IRQHandler+0xcb0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d128      	bne.n	80099a8 <HAL_DMA_IRQHandler+0xcb4>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0214 	bic.w	r2, r2, #20
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	e027      	b.n	80099b8 <HAL_DMA_IRQHandler+0xcc4>
 8009968:	40020010 	.word	0x40020010
 800996c:	40020028 	.word	0x40020028
 8009970:	40020040 	.word	0x40020040
 8009974:	40020058 	.word	0x40020058
 8009978:	40020070 	.word	0x40020070
 800997c:	40020088 	.word	0x40020088
 8009980:	400200a0 	.word	0x400200a0
 8009984:	400200b8 	.word	0x400200b8
 8009988:	40020410 	.word	0x40020410
 800998c:	40020428 	.word	0x40020428
 8009990:	40020440 	.word	0x40020440
 8009994:	40020458 	.word	0x40020458
 8009998:	40020470 	.word	0x40020470
 800999c:	40020488 	.word	0x40020488
 80099a0:	400204a0 	.word	0x400204a0
 80099a4:	400204b8 	.word	0x400204b8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 020a 	bic.w	r2, r2, #10
 80099b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8097 	beq.w	8009b00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099da:	e091      	b.n	8009b00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099e0:	f003 031f 	and.w	r3, r3, #31
 80099e4:	2208      	movs	r2, #8
 80099e6:	409a      	lsls	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4013      	ands	r3, r2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 8088 	beq.w	8009b02 <HAL_DMA_IRQHandler+0xe0e>
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 8082 	beq.w	8009b02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a41      	ldr	r2, [pc, #260]	@ (8009b08 <HAL_DMA_IRQHandler+0xe14>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d04a      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b0c <HAL_DMA_IRQHandler+0xe18>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d045      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a3e      	ldr	r2, [pc, #248]	@ (8009b10 <HAL_DMA_IRQHandler+0xe1c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d040      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a3c      	ldr	r2, [pc, #240]	@ (8009b14 <HAL_DMA_IRQHandler+0xe20>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d03b      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8009b18 <HAL_DMA_IRQHandler+0xe24>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d036      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a39      	ldr	r2, [pc, #228]	@ (8009b1c <HAL_DMA_IRQHandler+0xe28>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d031      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a38      	ldr	r2, [pc, #224]	@ (8009b20 <HAL_DMA_IRQHandler+0xe2c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d02c      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a36      	ldr	r2, [pc, #216]	@ (8009b24 <HAL_DMA_IRQHandler+0xe30>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d027      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a35      	ldr	r2, [pc, #212]	@ (8009b28 <HAL_DMA_IRQHandler+0xe34>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d022      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a33      	ldr	r2, [pc, #204]	@ (8009b2c <HAL_DMA_IRQHandler+0xe38>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d01d      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a32      	ldr	r2, [pc, #200]	@ (8009b30 <HAL_DMA_IRQHandler+0xe3c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d018      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a30      	ldr	r2, [pc, #192]	@ (8009b34 <HAL_DMA_IRQHandler+0xe40>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8009b38 <HAL_DMA_IRQHandler+0xe44>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00e      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a2d      	ldr	r2, [pc, #180]	@ (8009b3c <HAL_DMA_IRQHandler+0xe48>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b40 <HAL_DMA_IRQHandler+0xe4c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <HAL_DMA_IRQHandler+0xdaa>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a2a      	ldr	r2, [pc, #168]	@ (8009b44 <HAL_DMA_IRQHandler+0xe50>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d108      	bne.n	8009ab0 <HAL_DMA_IRQHandler+0xdbc>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 021c 	bic.w	r2, r2, #28
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e007      	b.n	8009ac0 <HAL_DMA_IRQHandler+0xdcc>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 020e 	bic.w	r2, r2, #14
 8009abe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	2201      	movs	r2, #1
 8009aca:	409a      	lsls	r2, r3
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	4798      	blx	r3
 8009af6:	e004      	b.n	8009b02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b02:	3728      	adds	r7, #40	@ 0x28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	40020010 	.word	0x40020010
 8009b0c:	40020028 	.word	0x40020028
 8009b10:	40020040 	.word	0x40020040
 8009b14:	40020058 	.word	0x40020058
 8009b18:	40020070 	.word	0x40020070
 8009b1c:	40020088 	.word	0x40020088
 8009b20:	400200a0 	.word	0x400200a0
 8009b24:	400200b8 	.word	0x400200b8
 8009b28:	40020410 	.word	0x40020410
 8009b2c:	40020428 	.word	0x40020428
 8009b30:	40020440 	.word	0x40020440
 8009b34:	40020458 	.word	0x40020458
 8009b38:	40020470 	.word	0x40020470
 8009b3c:	40020488 	.word	0x40020488
 8009b40:	400204a0 	.word	0x400204a0
 8009b44:	400204b8 	.word	0x400204b8

08009b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a7f      	ldr	r2, [pc, #508]	@ (8009d64 <DMA_SetConfig+0x21c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d072      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a7d      	ldr	r2, [pc, #500]	@ (8009d68 <DMA_SetConfig+0x220>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d06d      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a7c      	ldr	r2, [pc, #496]	@ (8009d6c <DMA_SetConfig+0x224>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d068      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a7a      	ldr	r2, [pc, #488]	@ (8009d70 <DMA_SetConfig+0x228>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d063      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a79      	ldr	r2, [pc, #484]	@ (8009d74 <DMA_SetConfig+0x22c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d05e      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a77      	ldr	r2, [pc, #476]	@ (8009d78 <DMA_SetConfig+0x230>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d059      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a76      	ldr	r2, [pc, #472]	@ (8009d7c <DMA_SetConfig+0x234>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d054      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a74      	ldr	r2, [pc, #464]	@ (8009d80 <DMA_SetConfig+0x238>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d04f      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a73      	ldr	r2, [pc, #460]	@ (8009d84 <DMA_SetConfig+0x23c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d04a      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a71      	ldr	r2, [pc, #452]	@ (8009d88 <DMA_SetConfig+0x240>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d045      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a70      	ldr	r2, [pc, #448]	@ (8009d8c <DMA_SetConfig+0x244>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d040      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a6e      	ldr	r2, [pc, #440]	@ (8009d90 <DMA_SetConfig+0x248>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d03b      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a6d      	ldr	r2, [pc, #436]	@ (8009d94 <DMA_SetConfig+0x24c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d036      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a6b      	ldr	r2, [pc, #428]	@ (8009d98 <DMA_SetConfig+0x250>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d031      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a6a      	ldr	r2, [pc, #424]	@ (8009d9c <DMA_SetConfig+0x254>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d02c      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a68      	ldr	r2, [pc, #416]	@ (8009da0 <DMA_SetConfig+0x258>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d027      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a67      	ldr	r2, [pc, #412]	@ (8009da4 <DMA_SetConfig+0x25c>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d022      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a65      	ldr	r2, [pc, #404]	@ (8009da8 <DMA_SetConfig+0x260>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d01d      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a64      	ldr	r2, [pc, #400]	@ (8009dac <DMA_SetConfig+0x264>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d018      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a62      	ldr	r2, [pc, #392]	@ (8009db0 <DMA_SetConfig+0x268>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d013      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a61      	ldr	r2, [pc, #388]	@ (8009db4 <DMA_SetConfig+0x26c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00e      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a5f      	ldr	r2, [pc, #380]	@ (8009db8 <DMA_SetConfig+0x270>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d009      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a5e      	ldr	r2, [pc, #376]	@ (8009dbc <DMA_SetConfig+0x274>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d004      	beq.n	8009c52 <DMA_SetConfig+0x10a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8009dc0 <DMA_SetConfig+0x278>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d101      	bne.n	8009c56 <DMA_SetConfig+0x10e>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <DMA_SetConfig+0x110>
 8009c56:	2300      	movs	r3, #0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00d      	beq.n	8009c78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009c64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009c76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a39      	ldr	r2, [pc, #228]	@ (8009d64 <DMA_SetConfig+0x21c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d04a      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a38      	ldr	r2, [pc, #224]	@ (8009d68 <DMA_SetConfig+0x220>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d045      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a36      	ldr	r2, [pc, #216]	@ (8009d6c <DMA_SetConfig+0x224>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d040      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a35      	ldr	r2, [pc, #212]	@ (8009d70 <DMA_SetConfig+0x228>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d03b      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a33      	ldr	r2, [pc, #204]	@ (8009d74 <DMA_SetConfig+0x22c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d036      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a32      	ldr	r2, [pc, #200]	@ (8009d78 <DMA_SetConfig+0x230>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d031      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a30      	ldr	r2, [pc, #192]	@ (8009d7c <DMA_SetConfig+0x234>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d02c      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8009d80 <DMA_SetConfig+0x238>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d027      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8009d84 <DMA_SetConfig+0x23c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d88 <DMA_SetConfig+0x240>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d8c <DMA_SetConfig+0x244>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a29      	ldr	r2, [pc, #164]	@ (8009d90 <DMA_SetConfig+0x248>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a27      	ldr	r2, [pc, #156]	@ (8009d94 <DMA_SetConfig+0x24c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a26      	ldr	r2, [pc, #152]	@ (8009d98 <DMA_SetConfig+0x250>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a24      	ldr	r2, [pc, #144]	@ (8009d9c <DMA_SetConfig+0x254>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <DMA_SetConfig+0x1d0>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a23      	ldr	r2, [pc, #140]	@ (8009da0 <DMA_SetConfig+0x258>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <DMA_SetConfig+0x1d4>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <DMA_SetConfig+0x1d6>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d059      	beq.n	8009dd6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d26:	f003 031f 	and.w	r3, r3, #31
 8009d2a:	223f      	movs	r2, #63	@ 0x3f
 8009d2c:	409a      	lsls	r2, r3
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b40      	cmp	r3, #64	@ 0x40
 8009d50:	d138      	bne.n	8009dc4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009d62:	e086      	b.n	8009e72 <DMA_SetConfig+0x32a>
 8009d64:	40020010 	.word	0x40020010
 8009d68:	40020028 	.word	0x40020028
 8009d6c:	40020040 	.word	0x40020040
 8009d70:	40020058 	.word	0x40020058
 8009d74:	40020070 	.word	0x40020070
 8009d78:	40020088 	.word	0x40020088
 8009d7c:	400200a0 	.word	0x400200a0
 8009d80:	400200b8 	.word	0x400200b8
 8009d84:	40020410 	.word	0x40020410
 8009d88:	40020428 	.word	0x40020428
 8009d8c:	40020440 	.word	0x40020440
 8009d90:	40020458 	.word	0x40020458
 8009d94:	40020470 	.word	0x40020470
 8009d98:	40020488 	.word	0x40020488
 8009d9c:	400204a0 	.word	0x400204a0
 8009da0:	400204b8 	.word	0x400204b8
 8009da4:	58025408 	.word	0x58025408
 8009da8:	5802541c 	.word	0x5802541c
 8009dac:	58025430 	.word	0x58025430
 8009db0:	58025444 	.word	0x58025444
 8009db4:	58025458 	.word	0x58025458
 8009db8:	5802546c 	.word	0x5802546c
 8009dbc:	58025480 	.word	0x58025480
 8009dc0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
}
 8009dd4:	e04d      	b.n	8009e72 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a29      	ldr	r2, [pc, #164]	@ (8009e80 <DMA_SetConfig+0x338>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d022      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a27      	ldr	r2, [pc, #156]	@ (8009e84 <DMA_SetConfig+0x33c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d01d      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a26      	ldr	r2, [pc, #152]	@ (8009e88 <DMA_SetConfig+0x340>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d018      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a24      	ldr	r2, [pc, #144]	@ (8009e8c <DMA_SetConfig+0x344>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d013      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a23      	ldr	r2, [pc, #140]	@ (8009e90 <DMA_SetConfig+0x348>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00e      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a21      	ldr	r2, [pc, #132]	@ (8009e94 <DMA_SetConfig+0x34c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d009      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a20      	ldr	r2, [pc, #128]	@ (8009e98 <DMA_SetConfig+0x350>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d004      	beq.n	8009e26 <DMA_SetConfig+0x2de>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a1e      	ldr	r2, [pc, #120]	@ (8009e9c <DMA_SetConfig+0x354>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d101      	bne.n	8009e2a <DMA_SetConfig+0x2e2>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <DMA_SetConfig+0x2e4>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d020      	beq.n	8009e72 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e34:	f003 031f 	and.w	r3, r3, #31
 8009e38:	2201      	movs	r2, #1
 8009e3a:	409a      	lsls	r2, r3
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	2b40      	cmp	r3, #64	@ 0x40
 8009e4e:	d108      	bne.n	8009e62 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	60da      	str	r2, [r3, #12]
}
 8009e60:	e007      	b.n	8009e72 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	60da      	str	r2, [r3, #12]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	58025408 	.word	0x58025408
 8009e84:	5802541c 	.word	0x5802541c
 8009e88:	58025430 	.word	0x58025430
 8009e8c:	58025444 	.word	0x58025444
 8009e90:	58025458 	.word	0x58025458
 8009e94:	5802546c 	.word	0x5802546c
 8009e98:	58025480 	.word	0x58025480
 8009e9c:	58025494 	.word	0x58025494

08009ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a42      	ldr	r2, [pc, #264]	@ (8009fb8 <DMA_CalcBaseAndBitshift+0x118>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d04a      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a41      	ldr	r2, [pc, #260]	@ (8009fbc <DMA_CalcBaseAndBitshift+0x11c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d045      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc0 <DMA_CalcBaseAndBitshift+0x120>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d040      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a3e      	ldr	r2, [pc, #248]	@ (8009fc4 <DMA_CalcBaseAndBitshift+0x124>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d03b      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fc8 <DMA_CalcBaseAndBitshift+0x128>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d036      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a3b      	ldr	r2, [pc, #236]	@ (8009fcc <DMA_CalcBaseAndBitshift+0x12c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d031      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a39      	ldr	r2, [pc, #228]	@ (8009fd0 <DMA_CalcBaseAndBitshift+0x130>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d02c      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a38      	ldr	r2, [pc, #224]	@ (8009fd4 <DMA_CalcBaseAndBitshift+0x134>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d027      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a36      	ldr	r2, [pc, #216]	@ (8009fd8 <DMA_CalcBaseAndBitshift+0x138>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d022      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a35      	ldr	r2, [pc, #212]	@ (8009fdc <DMA_CalcBaseAndBitshift+0x13c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d01d      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a33      	ldr	r2, [pc, #204]	@ (8009fe0 <DMA_CalcBaseAndBitshift+0x140>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d018      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a32      	ldr	r2, [pc, #200]	@ (8009fe4 <DMA_CalcBaseAndBitshift+0x144>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d013      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a30      	ldr	r2, [pc, #192]	@ (8009fe8 <DMA_CalcBaseAndBitshift+0x148>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d00e      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8009fec <DMA_CalcBaseAndBitshift+0x14c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d009      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff0 <DMA_CalcBaseAndBitshift+0x150>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d004      	beq.n	8009f48 <DMA_CalcBaseAndBitshift+0xa8>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff4 <DMA_CalcBaseAndBitshift+0x154>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d101      	bne.n	8009f4c <DMA_CalcBaseAndBitshift+0xac>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <DMA_CalcBaseAndBitshift+0xae>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d024      	beq.n	8009f9c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	3b10      	subs	r3, #16
 8009f5a:	4a27      	ldr	r2, [pc, #156]	@ (8009ff8 <DMA_CalcBaseAndBitshift+0x158>)
 8009f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f60:	091b      	lsrs	r3, r3, #4
 8009f62:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	4a24      	ldr	r2, [pc, #144]	@ (8009ffc <DMA_CalcBaseAndBitshift+0x15c>)
 8009f6c:	5cd3      	ldrb	r3, [r2, r3]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d908      	bls.n	8009f8c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b1f      	ldr	r3, [pc, #124]	@ (800a000 <DMA_CalcBaseAndBitshift+0x160>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	1d1a      	adds	r2, r3, #4
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f8a:	e00d      	b.n	8009fa8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b1b      	ldr	r3, [pc, #108]	@ (800a000 <DMA_CalcBaseAndBitshift+0x160>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f9a:	e005      	b.n	8009fa8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	40020010 	.word	0x40020010
 8009fbc:	40020028 	.word	0x40020028
 8009fc0:	40020040 	.word	0x40020040
 8009fc4:	40020058 	.word	0x40020058
 8009fc8:	40020070 	.word	0x40020070
 8009fcc:	40020088 	.word	0x40020088
 8009fd0:	400200a0 	.word	0x400200a0
 8009fd4:	400200b8 	.word	0x400200b8
 8009fd8:	40020410 	.word	0x40020410
 8009fdc:	40020428 	.word	0x40020428
 8009fe0:	40020440 	.word	0x40020440
 8009fe4:	40020458 	.word	0x40020458
 8009fe8:	40020470 	.word	0x40020470
 8009fec:	40020488 	.word	0x40020488
 8009ff0:	400204a0 	.word	0x400204a0
 8009ff4:	400204b8 	.word	0x400204b8
 8009ff8:	aaaaaaab 	.word	0xaaaaaaab
 8009ffc:	0801cba8 	.word	0x0801cba8
 800a000:	fffffc00 	.word	0xfffffc00

0800a004 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d120      	bne.n	800a05a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d858      	bhi.n	800a0d2 <DMA_CheckFifoParam+0xce>
 800a020:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <DMA_CheckFifoParam+0x24>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a04b 	.word	0x0800a04b
 800a030:	0800a039 	.word	0x0800a039
 800a034:	0800a0d3 	.word	0x0800a0d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d048      	beq.n	800a0d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a048:	e045      	b.n	800a0d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a052:	d142      	bne.n	800a0da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a058:	e03f      	b.n	800a0da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a062:	d123      	bne.n	800a0ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d838      	bhi.n	800a0de <DMA_CheckFifoParam+0xda>
 800a06c:	a201      	add	r2, pc, #4	@ (adr r2, 800a074 <DMA_CheckFifoParam+0x70>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a08b 	.word	0x0800a08b
 800a07c:	0800a085 	.word	0x0800a085
 800a080:	0800a09d 	.word	0x0800a09d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
        break;
 800a088:	e030      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d025      	beq.n	800a0e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a09a:	e022      	b.n	800a0e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a0a4:	d11f      	bne.n	800a0e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0aa:	e01c      	b.n	800a0e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d902      	bls.n	800a0ba <DMA_CheckFifoParam+0xb6>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d003      	beq.n	800a0c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a0b8:	e018      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a0be:	e015      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00e      	beq.n	800a0ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d0:	e00b      	b.n	800a0ea <DMA_CheckFifoParam+0xe6>
        break;
 800a0d2:	bf00      	nop
 800a0d4:	e00a      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        break;
 800a0d6:	bf00      	nop
 800a0d8:	e008      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        break;
 800a0da:	bf00      	nop
 800a0dc:	e006      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        break;
 800a0de:	bf00      	nop
 800a0e0:	e004      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <DMA_CheckFifoParam+0xe8>
    break;
 800a0ea:	bf00      	nop
    }
  }

  return status;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop

0800a0fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a38      	ldr	r2, [pc, #224]	@ (800a1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d022      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a36      	ldr	r2, [pc, #216]	@ (800a1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d01d      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a35      	ldr	r2, [pc, #212]	@ (800a1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d018      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a33      	ldr	r2, [pc, #204]	@ (800a1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d013      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a32      	ldr	r2, [pc, #200]	@ (800a200 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00e      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a30      	ldr	r2, [pc, #192]	@ (800a204 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d009      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a2f      	ldr	r2, [pc, #188]	@ (800a208 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d004      	beq.n	800a15a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a2d      	ldr	r2, [pc, #180]	@ (800a20c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d101      	bne.n	800a15e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01a      	beq.n	800a19a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	3b08      	subs	r3, #8
 800a16c:	4a28      	ldr	r2, [pc, #160]	@ (800a210 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a16e:	fba2 2303 	umull	r2, r3, r2, r3
 800a172:	091b      	lsrs	r3, r3, #4
 800a174:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4b26      	ldr	r3, [pc, #152]	@ (800a214 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a17a:	4413      	add	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a24      	ldr	r2, [pc, #144]	@ (800a218 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a188:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f003 031f 	and.w	r3, r3, #31
 800a190:	2201      	movs	r2, #1
 800a192:	409a      	lsls	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a198:	e024      	b.n	800a1e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	3b10      	subs	r3, #16
 800a1a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a21c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a8:	091b      	lsrs	r3, r3, #4
 800a1aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4a1c      	ldr	r2, [pc, #112]	@ (800a220 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d806      	bhi.n	800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a224 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d902      	bls.n	800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4b18      	ldr	r3, [pc, #96]	@ (800a228 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a16      	ldr	r2, [pc, #88]	@ (800a22c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a1d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 031f 	and.w	r3, r3, #31
 800a1dc:	2201      	movs	r2, #1
 800a1de:	409a      	lsls	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a1e4:	bf00      	nop
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	58025408 	.word	0x58025408
 800a1f4:	5802541c 	.word	0x5802541c
 800a1f8:	58025430 	.word	0x58025430
 800a1fc:	58025444 	.word	0x58025444
 800a200:	58025458 	.word	0x58025458
 800a204:	5802546c 	.word	0x5802546c
 800a208:	58025480 	.word	0x58025480
 800a20c:	58025494 	.word	0x58025494
 800a210:	cccccccd 	.word	0xcccccccd
 800a214:	16009600 	.word	0x16009600
 800a218:	58025880 	.word	0x58025880
 800a21c:	aaaaaaab 	.word	0xaaaaaaab
 800a220:	400204b8 	.word	0x400204b8
 800a224:	4002040f 	.word	0x4002040f
 800a228:	10008200 	.word	0x10008200
 800a22c:	40020880 	.word	0x40020880

0800a230 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d04a      	beq.n	800a2dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d847      	bhi.n	800a2dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a25      	ldr	r2, [pc, #148]	@ (800a2e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d022      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a24      	ldr	r2, [pc, #144]	@ (800a2ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d01d      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a22      	ldr	r2, [pc, #136]	@ (800a2f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d018      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a21      	ldr	r2, [pc, #132]	@ (800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d013      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a1f      	ldr	r2, [pc, #124]	@ (800a2f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00e      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a1e      	ldr	r2, [pc, #120]	@ (800a2fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d009      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1c      	ldr	r2, [pc, #112]	@ (800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d101      	bne.n	800a2a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a15      	ldr	r2, [pc, #84]	@ (800a30c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a2b8:	671a      	str	r2, [r3, #112]	@ 0x70
 800a2ba:	e009      	b.n	800a2d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4b14      	ldr	r3, [pc, #80]	@ (800a310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a11      	ldr	r2, [pc, #68]	@ (800a314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a2ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	409a      	lsls	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	58025408 	.word	0x58025408
 800a2ec:	5802541c 	.word	0x5802541c
 800a2f0:	58025430 	.word	0x58025430
 800a2f4:	58025444 	.word	0x58025444
 800a2f8:	58025458 	.word	0x58025458
 800a2fc:	5802546c 	.word	0x5802546c
 800a300:	58025480 	.word	0x58025480
 800a304:	58025494 	.word	0x58025494
 800a308:	1600963f 	.word	0x1600963f
 800a30c:	58025940 	.word	0x58025940
 800a310:	1000823f 	.word	0x1000823f
 800a314:	40020940 	.word	0x40020940

0800a318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a318:	b480      	push	{r7}
 800a31a:	b089      	sub	sp, #36	@ 0x24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a322:	2300      	movs	r3, #0
 800a324:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a326:	4b86      	ldr	r3, [pc, #536]	@ (800a540 <HAL_GPIO_Init+0x228>)
 800a328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a32a:	e18c      	b.n	800a646 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	2101      	movs	r1, #1
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	fa01 f303 	lsl.w	r3, r1, r3
 800a338:	4013      	ands	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 817e 	beq.w	800a640 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f003 0303 	and.w	r3, r3, #3
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d005      	beq.n	800a35c <HAL_GPIO_Init+0x44>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d130      	bne.n	800a3be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	2203      	movs	r2, #3
 800a368:	fa02 f303 	lsl.w	r3, r2, r3
 800a36c:	43db      	mvns	r3, r3
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	4013      	ands	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	fa02 f303 	lsl.w	r3, r2, r3
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	4313      	orrs	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a392:	2201      	movs	r2, #1
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	43db      	mvns	r3, r3
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	091b      	lsrs	r3, r3, #4
 800a3a8:	f003 0201 	and.w	r2, r3, #1
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f003 0303 	and.w	r3, r3, #3
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d017      	beq.n	800a3fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	2203      	movs	r2, #3
 800a3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3da:	43db      	mvns	r3, r3
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d123      	bne.n	800a44e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	08da      	lsrs	r2, r3, #3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3208      	adds	r2, #8
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	220f      	movs	r2, #15
 800a41e:	fa02 f303 	lsl.w	r3, r2, r3
 800a422:	43db      	mvns	r3, r3
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	4013      	ands	r3, r2
 800a428:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	691a      	ldr	r2, [r3, #16]
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	fa02 f303 	lsl.w	r3, r2, r3
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	08da      	lsrs	r2, r3, #3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3208      	adds	r2, #8
 800a448:	69b9      	ldr	r1, [r7, #24]
 800a44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	2203      	movs	r2, #3
 800a45a:	fa02 f303 	lsl.w	r3, r2, r3
 800a45e:	43db      	mvns	r3, r3
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	4013      	ands	r3, r2
 800a464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f003 0203 	and.w	r2, r3, #3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	4313      	orrs	r3, r2
 800a47a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80d8 	beq.w	800a640 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a490:	4b2c      	ldr	r3, [pc, #176]	@ (800a544 <HAL_GPIO_Init+0x22c>)
 800a492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a496:	4a2b      	ldr	r2, [pc, #172]	@ (800a544 <HAL_GPIO_Init+0x22c>)
 800a498:	f043 0302 	orr.w	r3, r3, #2
 800a49c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a4a0:	4b28      	ldr	r3, [pc, #160]	@ (800a544 <HAL_GPIO_Init+0x22c>)
 800a4a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ae:	4a26      	ldr	r2, [pc, #152]	@ (800a548 <HAL_GPIO_Init+0x230>)
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	089b      	lsrs	r3, r3, #2
 800a4b4:	3302      	adds	r3, #2
 800a4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	220f      	movs	r2, #15
 800a4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ca:	43db      	mvns	r3, r3
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a54c <HAL_GPIO_Init+0x234>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d04a      	beq.n	800a570 <HAL_GPIO_Init+0x258>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a550 <HAL_GPIO_Init+0x238>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d02b      	beq.n	800a53a <HAL_GPIO_Init+0x222>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a554 <HAL_GPIO_Init+0x23c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d025      	beq.n	800a536 <HAL_GPIO_Init+0x21e>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <HAL_GPIO_Init+0x240>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d01f      	beq.n	800a532 <HAL_GPIO_Init+0x21a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	@ (800a55c <HAL_GPIO_Init+0x244>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d019      	beq.n	800a52e <HAL_GPIO_Init+0x216>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a18      	ldr	r2, [pc, #96]	@ (800a560 <HAL_GPIO_Init+0x248>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d013      	beq.n	800a52a <HAL_GPIO_Init+0x212>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a17      	ldr	r2, [pc, #92]	@ (800a564 <HAL_GPIO_Init+0x24c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00d      	beq.n	800a526 <HAL_GPIO_Init+0x20e>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a16      	ldr	r2, [pc, #88]	@ (800a568 <HAL_GPIO_Init+0x250>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d007      	beq.n	800a522 <HAL_GPIO_Init+0x20a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a15      	ldr	r2, [pc, #84]	@ (800a56c <HAL_GPIO_Init+0x254>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d101      	bne.n	800a51e <HAL_GPIO_Init+0x206>
 800a51a:	2309      	movs	r3, #9
 800a51c:	e029      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a51e:	230a      	movs	r3, #10
 800a520:	e027      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a522:	2307      	movs	r3, #7
 800a524:	e025      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a526:	2306      	movs	r3, #6
 800a528:	e023      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a52a:	2305      	movs	r3, #5
 800a52c:	e021      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a52e:	2304      	movs	r3, #4
 800a530:	e01f      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a532:	2303      	movs	r3, #3
 800a534:	e01d      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a536:	2302      	movs	r3, #2
 800a538:	e01b      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e019      	b.n	800a572 <HAL_GPIO_Init+0x25a>
 800a53e:	bf00      	nop
 800a540:	58000080 	.word	0x58000080
 800a544:	58024400 	.word	0x58024400
 800a548:	58000400 	.word	0x58000400
 800a54c:	58020000 	.word	0x58020000
 800a550:	58020400 	.word	0x58020400
 800a554:	58020800 	.word	0x58020800
 800a558:	58020c00 	.word	0x58020c00
 800a55c:	58021000 	.word	0x58021000
 800a560:	58021400 	.word	0x58021400
 800a564:	58021800 	.word	0x58021800
 800a568:	58021c00 	.word	0x58021c00
 800a56c:	58022400 	.word	0x58022400
 800a570:	2300      	movs	r3, #0
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	f002 0203 	and.w	r2, r2, #3
 800a578:	0092      	lsls	r2, r2, #2
 800a57a:	4093      	lsls	r3, r2
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	4313      	orrs	r3, r2
 800a580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a582:	4938      	ldr	r1, [pc, #224]	@ (800a664 <HAL_GPIO_Init+0x34c>)
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	3302      	adds	r3, #2
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	43db      	mvns	r3, r3
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a5b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a5be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	43db      	mvns	r3, r3
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a5e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	43db      	mvns	r3, r3
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	4013      	ands	r3, r2
 800a624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	3301      	adds	r3, #1
 800a644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	fa22 f303 	lsr.w	r3, r2, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	f47f ae6b 	bne.w	800a32c <HAL_GPIO_Init+0x14>
  }
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	3724      	adds	r7, #36	@ 0x24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	58000400 	.word	0x58000400

0800a668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	887b      	ldrh	r3, [r7, #2]
 800a67a:	4013      	ands	r3, r2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
 800a684:	e001      	b.n	800a68a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	807b      	strh	r3, [r7, #2]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6a8:	787b      	ldrb	r3, [r7, #1]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6ae:	887a      	ldrh	r2, [r7, #2]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6b4:	e003      	b.n	800a6be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6b6:	887b      	ldrh	r3, [r7, #2]
 800a6b8:	041a      	lsls	r2, r3, #16
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	619a      	str	r2, [r3, #24]
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a6d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a6e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6e8:	88fb      	ldrh	r3, [r7, #6]
 800a6ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7f6 fdb5 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e08b      	b.n	800a82a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7f7 fef4 	bl	8002514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2224      	movs	r2, #36	@ 0x24
 800a730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f022 0201 	bic.w	r2, r2, #1
 800a742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a750:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a760:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d107      	bne.n	800a77a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a776:	609a      	str	r2, [r3, #8]
 800a778:	e006      	b.n	800a788 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a786:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d108      	bne.n	800a7a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	e007      	b.n	800a7b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6859      	ldr	r1, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a834 <HAL_I2C_Init+0x134>)
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691a      	ldr	r2, [r3, #16]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	69d9      	ldr	r1, [r3, #28]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1a      	ldr	r2, [r3, #32]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	02008000 	.word	0x02008000

0800a838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d138      	bne.n	800a8c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a858:	2302      	movs	r3, #2
 800a85a:	e032      	b.n	800a8c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2224      	movs	r2, #36	@ 0x24
 800a868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f022 0201 	bic.w	r2, r2, #1
 800a87a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a88a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0201 	orr.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e000      	b.n	800a8c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8c0:	2302      	movs	r3, #2
  }
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	d139      	bne.n	800a958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e033      	b.n	800a95a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	@ 0x24
 800a8fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0201 	bic.w	r2, r2, #1
 800a910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0201 	orr.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2220      	movs	r2, #32
 800a948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	e000      	b.n	800a95a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a958:	2302      	movs	r3, #2
  }
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af02      	add	r7, sp, #8
 800a96c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e0fe      	b.n	800ab76 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d106      	bne.n	800a992 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f00c fb5f 	bl	8017050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2203      	movs	r2, #3
 800a996:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f008 ff1b 	bl	80137da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7c1a      	ldrb	r2, [r3, #16]
 800a9ac:	f88d 2000 	strb.w	r2, [sp]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9b4:	f008 fdec 	bl	8013590 <USB_CoreInit>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e0d5      	b.n	800ab76 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f008 ff13 	bl	80137fc <USB_SetCurrentMode>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e0c6      	b.n	800ab76 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	e04a      	b.n	800aa84 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a9ee:	7bfa      	ldrb	r2, [r7, #15]
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	3315      	adds	r3, #21
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa02:	7bfa      	ldrb	r2, [r7, #15]
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	4413      	add	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	440b      	add	r3, r1
 800aa10:	3314      	adds	r3, #20
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa16:	7bfa      	ldrb	r2, [r7, #15]
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	b298      	uxth	r0, r3
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	332e      	adds	r3, #46	@ 0x2e
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa2e:	7bfa      	ldrb	r2, [r7, #15]
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3318      	adds	r3, #24
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	331c      	adds	r3, #28
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	3320      	adds	r3, #32
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3324      	adds	r3, #36	@ 0x24
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	3301      	adds	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	791b      	ldrb	r3, [r3, #4]
 800aa88:	7bfa      	ldrb	r2, [r7, #15]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d3af      	bcc.n	800a9ee <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	e044      	b.n	800ab1e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aa94:	7bfa      	ldrb	r2, [r7, #15]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aaaa:	7bfa      	ldrb	r2, [r7, #15]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800aabc:	7bfa      	ldrb	r2, [r7, #15]
 800aabe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aac0:	7bfa      	ldrb	r2, [r7, #15]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aad6:	7bfa      	ldrb	r2, [r7, #15]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aaec:	7bfa      	ldrb	r2, [r7, #15]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab02:	7bfa      	ldrb	r2, [r7, #15]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	791b      	ldrb	r3, [r3, #4]
 800ab22:	7bfa      	ldrb	r2, [r7, #15]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d3b5      	bcc.n	800aa94 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7c1a      	ldrb	r2, [r3, #16]
 800ab30:	f88d 2000 	strb.w	r2, [sp]
 800ab34:	3304      	adds	r3, #4
 800ab36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab38:	f008 feac 	bl	8013894 <USB_DevInit>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2202      	movs	r2, #2
 800ab46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e013      	b.n	800ab76 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7b1b      	ldrb	r3, [r3, #12]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d102      	bne.n	800ab6a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f96d 	bl	800be44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f009 feeb 	bl	801494a <USB_DevDisconnect>

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d101      	bne.n	800ab9a <HAL_PCD_Start+0x1c>
 800ab96:	2302      	movs	r3, #2
 800ab98:	e022      	b.n	800abe0 <HAL_PCD_Start+0x62>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d105      	bne.n	800abc2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f008 fdf6 	bl	80137b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f009 fe99 	bl	8014908 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800abe8:	b590      	push	{r4, r7, lr}
 800abea:	b08d      	sub	sp, #52	@ 0x34
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f009 ff57 	bl	8014ab2 <USB_GetMode>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f040 84b9 	bne.w	800b57e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f009 febb 	bl	801498c <USB_ReadInterrupts>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 84af 	beq.w	800b57c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f009 fea8 	bl	801498c <USB_ReadInterrupts>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d107      	bne.n	800ac56 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	695a      	ldr	r2, [r3, #20]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f002 0202 	and.w	r2, r2, #2
 800ac54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f009 fe96 	bl	801498c <USB_ReadInterrupts>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f003 0310 	and.w	r3, r3, #16
 800ac66:	2b10      	cmp	r3, #16
 800ac68:	d161      	bne.n	800ad2e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0210 	bic.w	r2, r2, #16
 800ac78:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f003 020f 	and.w	r2, r3, #15
 800ac86:	4613      	mov	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	4413      	add	r3, r2
 800ac96:	3304      	adds	r3, #4
 800ac98:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	0c5b      	lsrs	r3, r3, #17
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d124      	bne.n	800acf0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800acac:	4013      	ands	r3, r2
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d035      	beq.n	800ad1e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	6a38      	ldr	r0, [r7, #32]
 800acc6:	f009 fccd 	bl	8014664 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	68da      	ldr	r2, [r3, #12]
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	091b      	lsrs	r3, r3, #4
 800acd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acd6:	441a      	add	r2, r3
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	695a      	ldr	r2, [r3, #20]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	091b      	lsrs	r3, r3, #4
 800ace4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ace8:	441a      	add	r2, r3
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	615a      	str	r2, [r3, #20]
 800acee:	e016      	b.n	800ad1e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	0c5b      	lsrs	r3, r3, #17
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	2b06      	cmp	r3, #6
 800acfa:	d110      	bne.n	800ad1e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ad02:	2208      	movs	r2, #8
 800ad04:	4619      	mov	r1, r3
 800ad06:	6a38      	ldr	r0, [r7, #32]
 800ad08:	f009 fcac 	bl	8014664 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	695a      	ldr	r2, [r3, #20]
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	091b      	lsrs	r3, r3, #4
 800ad14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad18:	441a      	add	r2, r3
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0210 	orr.w	r2, r2, #16
 800ad2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f009 fe2a 	bl	801498c <USB_ReadInterrupts>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ad42:	f040 80a7 	bne.w	800ae94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f009 fe2f 	bl	80149b2 <USB_ReadDevAllOutEpInterrupt>
 800ad54:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800ad56:	e099      	b.n	800ae8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 808e 	beq.w	800ae80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f009 fe53 	bl	8014a1a <USB_ReadDevOutEPInterrupt>
 800ad74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00c      	beq.n	800ad9a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	2301      	movs	r3, #1
 800ad90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ad92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fecf 	bl	800bb38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	f003 0308 	and.w	r3, r3, #8
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00c      	beq.n	800adbe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb0:	461a      	mov	r2, r3
 800adb2:	2308      	movs	r3, #8
 800adb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800adb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 ffa5 	bl	800bd08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d008      	beq.n	800adda <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add4:	461a      	mov	r2, r3
 800add6:	2310      	movs	r3, #16
 800add8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d030      	beq.n	800ae46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adec:	2b80      	cmp	r3, #128	@ 0x80
 800adee:	d109      	bne.n	800ae04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	69fa      	ldr	r2, [r7, #28]
 800adfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ae02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ae04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae06:	4613      	mov	r3, r2
 800ae08:	00db      	lsls	r3, r3, #3
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4413      	add	r3, r2
 800ae16:	3304      	adds	r3, #4
 800ae18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	78db      	ldrb	r3, [r3, #3]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d108      	bne.n	800ae34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2200      	movs	r2, #0
 800ae26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f00c fa06 	bl	8017240 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae40:	461a      	mov	r2, r3
 800ae42:	2302      	movs	r3, #2
 800ae44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d008      	beq.n	800ae62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	2320      	movs	r3, #32
 800ae60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae78:	461a      	mov	r2, r3
 800ae7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae82:	3301      	adds	r3, #1
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	085b      	lsrs	r3, r3, #1
 800ae8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f47f af62 	bne.w	800ad58 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f009 fd77 	bl	801498c <USB_ReadInterrupts>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aea4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aea8:	f040 80db 	bne.w	800b062 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f009 fd98 	bl	80149e6 <USB_ReadDevAllInEpInterrupt>
 800aeb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800aebc:	e0cd      	b.n	800b05a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800aebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 80c2 	beq.w	800b04e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aed0:	b2d2      	uxtb	r2, r2
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f009 fdbe 	bl	8014a56 <USB_ReadDevInEPInterrupt>
 800aeda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d057      	beq.n	800af96 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee8:	f003 030f 	and.w	r3, r3, #15
 800aeec:	2201      	movs	r2, #1
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aefa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	43db      	mvns	r3, r3
 800af00:	69f9      	ldr	r1, [r7, #28]
 800af02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af06:	4013      	ands	r3, r2
 800af08:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af16:	461a      	mov	r2, r3
 800af18:	2301      	movs	r3, #1
 800af1a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	799b      	ldrb	r3, [r3, #6]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d132      	bne.n	800af8a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af28:	4613      	mov	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	440b      	add	r3, r1
 800af32:	3320      	adds	r3, #32
 800af34:	6819      	ldr	r1, [r3, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af3a:	4613      	mov	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4403      	add	r3, r0
 800af44:	331c      	adds	r3, #28
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4419      	add	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af4e:	4613      	mov	r3, r2
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4403      	add	r3, r0
 800af58:	3320      	adds	r3, #32
 800af5a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d113      	bne.n	800af8a <HAL_PCD_IRQHandler+0x3a2>
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af66:	4613      	mov	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3324      	adds	r3, #36	@ 0x24
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d108      	bne.n	800af8a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800af82:	461a      	mov	r2, r3
 800af84:	2101      	movs	r1, #1
 800af86:	f009 fdc7 	bl	8014b18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f00c f8d0 	bl	8017136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f003 0308 	and.w	r3, r3, #8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afac:	461a      	mov	r2, r3
 800afae:	2308      	movs	r3, #8
 800afb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d008      	beq.n	800afce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800afbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc8:	461a      	mov	r2, r3
 800afca:	2310      	movs	r3, #16
 800afcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d008      	beq.n	800afea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe4:	461a      	mov	r2, r3
 800afe6:	2340      	movs	r3, #64	@ 0x40
 800afe8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f003 0302 	and.w	r3, r3, #2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d023      	beq.n	800b03c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800aff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aff6:	6a38      	ldr	r0, [r7, #32]
 800aff8:	f008 fdaa 	bl	8013b50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800affc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800affe:	4613      	mov	r3, r2
 800b000:	00db      	lsls	r3, r3, #3
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	3310      	adds	r3, #16
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	3304      	adds	r3, #4
 800b00e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	78db      	ldrb	r3, [r3, #3]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d108      	bne.n	800b02a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2200      	movs	r2, #0
 800b01c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	b2db      	uxtb	r3, r3
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f00c f91d 	bl	8017264 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b036:	461a      	mov	r2, r3
 800b038:	2302      	movs	r3, #2
 800b03a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b046:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fce8 	bl	800ba1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	3301      	adds	r3, #1
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f47f af2e 	bne.w	800aebe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4618      	mov	r0, r3
 800b068:	f009 fc90 	bl	801498c <USB_ReadInterrupts>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b076:	d122      	bne.n	800b0be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b086:	f023 0301 	bic.w	r3, r3, #1
 800b08a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b092:	2b01      	cmp	r3, #1
 800b094:	d108      	bne.n	800b0a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b09e:	2100      	movs	r1, #0
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fef3 	bl	800be8c <HAL_PCDEx_LPM_Callback>
 800b0a6:	e002      	b.n	800b0ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f00c f8bb 	bl	8017224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695a      	ldr	r2, [r3, #20]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b0bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f009 fc62 	bl	801498c <USB_ReadInterrupts>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0d2:	d112      	bne.n	800b0fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d102      	bne.n	800b0ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f00c f877 	bl	80171d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	695a      	ldr	r2, [r3, #20]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b0f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f009 fc44 	bl	801498c <USB_ReadInterrupts>
 800b104:	4603      	mov	r3, r0
 800b106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b10a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b10e:	d121      	bne.n	800b154 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	695a      	ldr	r2, [r3, #20]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b11e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b126:	2b00      	cmp	r3, #0
 800b128:	d111      	bne.n	800b14e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b138:	089b      	lsrs	r3, r3, #2
 800b13a:	f003 020f 	and.w	r2, r3, #15
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b144:	2101      	movs	r1, #1
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fea0 	bl	800be8c <HAL_PCDEx_LPM_Callback>
 800b14c:	e002      	b.n	800b154 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f00c f842 	bl	80171d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4618      	mov	r0, r3
 800b15a:	f009 fc17 	bl	801498c <USB_ReadInterrupts>
 800b15e:	4603      	mov	r3, r0
 800b160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b168:	f040 80b7 	bne.w	800b2da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	69fa      	ldr	r2, [r7, #28]
 800b176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2110      	movs	r1, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f008 fce2 	bl	8013b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b190:	e046      	b.n	800b220 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1b6:	0151      	lsls	r1, r2, #5
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	440a      	add	r2, r1
 800b1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ea:	0151      	lsls	r1, r2, #5
 800b1ec:	69fa      	ldr	r2, [r7, #28]
 800b1ee:	440a      	add	r2, r1
 800b1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	4413      	add	r3, r2
 800b202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b20a:	0151      	lsls	r1, r2, #5
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	440a      	add	r2, r1
 800b210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b214:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b218:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	3301      	adds	r3, #1
 800b21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	791b      	ldrb	r3, [r3, #4]
 800b224:	461a      	mov	r2, r3
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	4293      	cmp	r3, r2
 800b22a:	d3b2      	bcc.n	800b192 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b23a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b23e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7bdb      	ldrb	r3, [r3, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d016      	beq.n	800b276 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b258:	f043 030b 	orr.w	r3, r3, #11
 800b25c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b26e:	f043 030b 	orr.w	r3, r3, #11
 800b272:	6453      	str	r3, [r2, #68]	@ 0x44
 800b274:	e015      	b.n	800b2a2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b27c:	695a      	ldr	r2, [r3, #20]
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b284:	4619      	mov	r1, r3
 800b286:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b28a:	4313      	orrs	r3, r2
 800b28c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b29c:	f043 030b 	orr.w	r3, r3, #11
 800b2a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2b0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b2b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	f009 fc27 	bl	8014b18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b2d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f009 fb54 	bl	801498c <USB_ReadInterrupts>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2ee:	d123      	bne.n	800b338 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f009 fbeb 	bl	8014ad0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f008 fc9f 	bl	8013c42 <USB_GetDevSpeed>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681c      	ldr	r4, [r3, #0]
 800b310:	f001 fd1c 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800b314:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b31a:	461a      	mov	r2, r3
 800b31c:	4620      	mov	r0, r4
 800b31e:	f008 f9a9 	bl	8013674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f00b ff2f 	bl	8017186 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695a      	ldr	r2, [r3, #20]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b336:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f009 fb25 	bl	801498c <USB_ReadInterrupts>
 800b342:	4603      	mov	r3, r0
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d10a      	bne.n	800b362 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f00b ff0c 	bl	801716a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	695a      	ldr	r2, [r3, #20]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f002 0208 	and.w	r2, r2, #8
 800b360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f009 fb10 	bl	801498c <USB_ReadInterrupts>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b372:	2b80      	cmp	r3, #128	@ 0x80
 800b374:	d123      	bne.n	800b3be <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b382:	2301      	movs	r3, #1
 800b384:	627b      	str	r3, [r7, #36]	@ 0x24
 800b386:	e014      	b.n	800b3b2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b38c:	4613      	mov	r3, r2
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d105      	bne.n	800b3ac <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fb08 	bl	800b9bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	791b      	ldrb	r3, [r3, #4]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d3e4      	bcc.n	800b388 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f009 fae2 	bl	801498c <USB_ReadInterrupts>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3d2:	d13c      	bne.n	800b44e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3d8:	e02b      	b.n	800b432 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d115      	bne.n	800b42c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b400:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b402:	2b00      	cmp	r3, #0
 800b404:	da12      	bge.n	800b42c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b40a:	4613      	mov	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	3317      	adds	r3, #23
 800b416:	2201      	movs	r2, #1
 800b418:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b422:	b2db      	uxtb	r3, r3
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fac8 	bl	800b9bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42e:	3301      	adds	r3, #1
 800b430:	627b      	str	r3, [r7, #36]	@ 0x24
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	461a      	mov	r2, r3
 800b438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d3cd      	bcc.n	800b3da <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	695a      	ldr	r2, [r3, #20]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b44c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4618      	mov	r0, r3
 800b454:	f009 fa9a 	bl	801498c <USB_ReadInterrupts>
 800b458:	4603      	mov	r3, r0
 800b45a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b45e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b462:	d156      	bne.n	800b512 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b464:	2301      	movs	r3, #1
 800b466:	627b      	str	r3, [r7, #36]	@ 0x24
 800b468:	e045      	b.n	800b4f6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b47e:	4613      	mov	r3, r2
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d12e      	bne.n	800b4f0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b492:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b494:	2b00      	cmp	r3, #0
 800b496:	da2b      	bge.n	800b4f0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b4a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d121      	bne.n	800b4f0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b4be:	2201      	movs	r2, #1
 800b4c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b4ec:	6053      	str	r3, [r2, #4]
            break;
 800b4ee:	e008      	b.n	800b502 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	791b      	ldrb	r3, [r3, #4]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d3b3      	bcc.n	800b46a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	695a      	ldr	r2, [r3, #20]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f009 fa38 	bl	801498c <USB_ReadInterrupts>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b526:	d10a      	bne.n	800b53e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f00b fead 	bl	8017288 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	695a      	ldr	r2, [r3, #20]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b53c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f009 fa22 	bl	801498c <USB_ReadInterrupts>
 800b548:	4603      	mov	r3, r0
 800b54a:	f003 0304 	and.w	r3, r3, #4
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d115      	bne.n	800b57e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f00b fe9d 	bl	80172a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6859      	ldr	r1, [r3, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	430a      	orrs	r2, r1
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	e000      	b.n	800b57e <HAL_PCD_IRQHandler+0x996>
      return;
 800b57c:	bf00      	nop
    }
  }
}
 800b57e:	3734      	adds	r7, #52	@ 0x34
 800b580:	46bd      	mov	sp, r7
 800b582:	bd90      	pop	{r4, r7, pc}

0800b584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b596:	2b01      	cmp	r3, #1
 800b598:	d101      	bne.n	800b59e <HAL_PCD_SetAddress+0x1a>
 800b59a:	2302      	movs	r3, #2
 800b59c:	e012      	b.n	800b5c4 <HAL_PCD_SetAddress+0x40>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	78fa      	ldrb	r2, [r7, #3]
 800b5aa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	78fa      	ldrb	r2, [r7, #3]
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f009 f981 	bl	80148bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4603      	mov	r3, r0
 800b5dc:	70fb      	strb	r3, [r7, #3]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	803b      	strh	r3, [r7, #0]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b5ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	da0f      	bge.n	800b612 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	f003 020f 	and.w	r2, r3, #15
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	3310      	adds	r3, #16
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	4413      	add	r3, r2
 800b606:	3304      	adds	r3, #4
 800b608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	705a      	strb	r2, [r3, #1]
 800b610:	e00f      	b.n	800b632 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	f003 020f 	and.w	r2, r3, #15
 800b618:	4613      	mov	r3, r2
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4413      	add	r3, r2
 800b628:	3304      	adds	r3, #4
 800b62a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b632:	78fb      	ldrb	r3, [r7, #3]
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b63e:	883a      	ldrh	r2, [r7, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	78ba      	ldrb	r2, [r7, #2]
 800b648:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b65c:	78bb      	ldrb	r3, [r7, #2]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d102      	bne.n	800b668 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_PCD_EP_Open+0xaa>
 800b672:	2302      	movs	r3, #2
 800b674:	e00e      	b.n	800b694 <HAL_PCD_EP_Open+0xc8>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	4618      	mov	r0, r3
 800b686:	f008 fb01 	bl	8013c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b692:	7afb      	ldrb	r3, [r7, #11]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b6a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	da0f      	bge.n	800b6d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	f003 020f 	and.w	r2, r3, #15
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	3310      	adds	r3, #16
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	705a      	strb	r2, [r3, #1]
 800b6ce:	e00f      	b.n	800b6f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	f003 020f 	and.w	r2, r3, #15
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	f003 030f 	and.w	r3, r3, #15
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b702:	2b01      	cmp	r3, #1
 800b704:	d101      	bne.n	800b70a <HAL_PCD_EP_Close+0x6e>
 800b706:	2302      	movs	r3, #2
 800b708:	e00e      	b.n	800b728 <HAL_PCD_EP_Close+0x8c>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68f9      	ldr	r1, [r7, #12]
 800b718:	4618      	mov	r0, r3
 800b71a:	f008 fb3f 	bl	8013d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	607a      	str	r2, [r7, #4]
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	460b      	mov	r3, r1
 800b73e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	f003 020f 	and.w	r2, r3, #15
 800b746:	4613      	mov	r3, r2
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	3304      	adds	r3, #4
 800b758:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2200      	movs	r2, #0
 800b76a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2200      	movs	r2, #0
 800b770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	f003 030f 	and.w	r3, r3, #15
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	799b      	ldrb	r3, [r3, #6]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d102      	bne.n	800b78c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	799b      	ldrb	r3, [r3, #6]
 800b794:	461a      	mov	r2, r3
 800b796:	6979      	ldr	r1, [r7, #20]
 800b798:	f008 fbdc 	bl	8013f54 <USB_EPStartXfer>

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	f003 020f 	and.w	r2, r3, #15
 800b7b8:	6879      	ldr	r1, [r7, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	00db      	lsls	r3, r3, #3
 800b7be:	4413      	add	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b7c8:	681b      	ldr	r3, [r3, #0]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b086      	sub	sp, #24
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	603b      	str	r3, [r7, #0]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	f003 020f 	and.w	r2, r3, #15
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	3310      	adds	r3, #16
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2200      	movs	r2, #0
 800b80e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2201      	movs	r2, #1
 800b814:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b816:	7afb      	ldrb	r3, [r7, #11]
 800b818:	f003 030f 	and.w	r3, r3, #15
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	799b      	ldrb	r3, [r3, #6]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d102      	bne.n	800b830 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6818      	ldr	r0, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	799b      	ldrb	r3, [r3, #6]
 800b838:	461a      	mov	r2, r3
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	f008 fb8a 	bl	8013f54 <USB_EPStartXfer>

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	460b      	mov	r3, r1
 800b854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b856:	78fb      	ldrb	r3, [r7, #3]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	7912      	ldrb	r2, [r2, #4]
 800b860:	4293      	cmp	r3, r2
 800b862:	d901      	bls.n	800b868 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e04f      	b.n	800b908 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	da0f      	bge.n	800b890 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b870:	78fb      	ldrb	r3, [r7, #3]
 800b872:	f003 020f 	and.w	r2, r3, #15
 800b876:	4613      	mov	r3, r2
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	3310      	adds	r3, #16
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	3304      	adds	r3, #4
 800b886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2201      	movs	r2, #1
 800b88c:	705a      	strb	r2, [r3, #1]
 800b88e:	e00d      	b.n	800b8ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	4613      	mov	r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8b2:	78fb      	ldrb	r3, [r7, #3]
 800b8b4:	f003 030f 	and.w	r3, r3, #15
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_PCD_EP_SetStall+0x82>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e01d      	b.n	800b908 <HAL_PCD_EP_SetStall+0xbe>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68f9      	ldr	r1, [r7, #12]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f008 ff1a 	bl	8014714 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d109      	bne.n	800b8fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6818      	ldr	r0, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7999      	ldrb	r1, [r3, #6]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	f009 f90d 	bl	8014b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	7912      	ldrb	r2, [r2, #4]
 800b926:	4293      	cmp	r3, r2
 800b928:	d901      	bls.n	800b92e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e042      	b.n	800b9b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b92e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	da0f      	bge.n	800b956 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b936:	78fb      	ldrb	r3, [r7, #3]
 800b938:	f003 020f 	and.w	r2, r3, #15
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3310      	adds	r3, #16
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	705a      	strb	r2, [r3, #1]
 800b954:	e00f      	b.n	800b976 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	4613      	mov	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	3304      	adds	r3, #4
 800b96e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	b2da      	uxtb	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <HAL_PCD_EP_ClrStall+0x86>
 800b992:	2302      	movs	r3, #2
 800b994:	e00e      	b.n	800b9b4 <HAL_PCD_EP_ClrStall+0xa4>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68f9      	ldr	r1, [r7, #12]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f008 ff23 	bl	80147f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b9c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	da0c      	bge.n	800b9ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	f003 020f 	and.w	r2, r3, #15
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	3310      	adds	r3, #16
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	e00c      	b.n	800ba04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	f003 020f 	and.w	r2, r3, #15
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4413      	add	r3, r2
 800ba00:	3304      	adds	r3, #4
 800ba02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68f9      	ldr	r1, [r7, #12]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f008 fd42 	bl	8014494 <USB_EPStopXfer>
 800ba10:	4603      	mov	r3, r0
 800ba12:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ba14:	7afb      	ldrb	r3, [r7, #11]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b08a      	sub	sp, #40	@ 0x28
 800ba22:	af02      	add	r7, sp, #8
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	4613      	mov	r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	695a      	ldr	r2, [r3, #20]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d901      	bls.n	800ba56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e06b      	b.n	800bb2e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	691a      	ldr	r2, [r3, #16]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d902      	bls.n	800ba72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	3303      	adds	r3, #3
 800ba76:	089b      	lsrs	r3, r3, #2
 800ba78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ba7a:	e02a      	b.n	800bad2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	691a      	ldr	r2, [r3, #16]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	69fa      	ldr	r2, [r7, #28]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d902      	bls.n	800ba98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	3303      	adds	r3, #3
 800ba9c:	089b      	lsrs	r3, r3, #2
 800ba9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68d9      	ldr	r1, [r3, #12]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	4603      	mov	r3, r0
 800bab4:	6978      	ldr	r0, [r7, #20]
 800bab6:	f008 fd97 	bl	80145e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	695a      	ldr	r2, [r3, #20]
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	441a      	add	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	015a      	lsls	r2, r3, #5
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	4413      	add	r3, r2
 800bada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d809      	bhi.n	800bafc <PCD_WriteEmptyTxFifo+0xde>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	695a      	ldr	r2, [r3, #20]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d203      	bcs.n	800bafc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1bf      	bne.n	800ba7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	691a      	ldr	r2, [r3, #16]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d811      	bhi.n	800bb2c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	2201      	movs	r2, #1
 800bb10:	fa02 f303 	lsl.w	r3, r2, r3
 800bb14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	6939      	ldr	r1, [r7, #16]
 800bb24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb28:	4013      	ands	r3, r2
 800bb2a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3720      	adds	r7, #32
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	333c      	adds	r3, #60	@ 0x3c
 800bb50:	3304      	adds	r3, #4
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	799b      	ldrb	r3, [r3, #6]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d17b      	bne.n	800bc66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f003 0308 	and.w	r3, r3, #8
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d015      	beq.n	800bba4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	4a61      	ldr	r2, [pc, #388]	@ (800bd00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	f240 80b9 	bls.w	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 80b3 	beq.w	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bba0:	6093      	str	r3, [r2, #8]
 800bba2:	e0a7      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f003 0320 	and.w	r3, r3, #32
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d009      	beq.n	800bbc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbba:	461a      	mov	r2, r3
 800bbbc:	2320      	movs	r3, #32
 800bbbe:	6093      	str	r3, [r2, #8]
 800bbc0:	e098      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f040 8093 	bne.w	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	4a4b      	ldr	r2, [pc, #300]	@ (800bd00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d90f      	bls.n	800bbf6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00a      	beq.n	800bbf6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbec:	461a      	mov	r2, r3
 800bbee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbf2:	6093      	str	r3, [r2, #8]
 800bbf4:	e07e      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	4413      	add	r3, r2
 800bc08:	3304      	adds	r3, #4
 800bc0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a1a      	ldr	r2, [r3, #32]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	0159      	lsls	r1, r3, #5
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	440b      	add	r3, r1
 800bc18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc22:	1ad2      	subs	r2, r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d114      	bne.n	800bc58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d109      	bne.n	800bc4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc40:	461a      	mov	r2, r3
 800bc42:	2101      	movs	r1, #1
 800bc44:	f008 ff68 	bl	8014b18 <USB_EP0_OutStart>
 800bc48:	e006      	b.n	800bc58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68da      	ldr	r2, [r3, #12]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	441a      	add	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f00b fa4e 	bl	8017100 <HAL_PCD_DataOutStageCallback>
 800bc64:	e046      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	4a26      	ldr	r2, [pc, #152]	@ (800bd04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d124      	bne.n	800bcb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00a      	beq.n	800bc8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc84:	461a      	mov	r2, r3
 800bc86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc8a:	6093      	str	r3, [r2, #8]
 800bc8c:	e032      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	f003 0320 	and.w	r3, r3, #32
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bca4:	461a      	mov	r2, r3
 800bca6:	2320      	movs	r3, #32
 800bca8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f00b fa25 	bl	8017100 <HAL_PCD_DataOutStageCallback>
 800bcb6:	e01d      	b.n	800bcf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d114      	bne.n	800bce8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	440b      	add	r3, r1
 800bccc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d108      	bne.n	800bce8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bce0:	461a      	mov	r2, r3
 800bce2:	2100      	movs	r1, #0
 800bce4:	f008 ff18 	bl	8014b18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f00b fa06 	bl	8017100 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	4f54300a 	.word	0x4f54300a
 800bd04:	4f54310a 	.word	0x4f54310a

0800bd08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	333c      	adds	r3, #60	@ 0x3c
 800bd20:	3304      	adds	r3, #4
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4a15      	ldr	r2, [pc, #84]	@ (800bd90 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d90e      	bls.n	800bd5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d009      	beq.n	800bd5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	015a      	lsls	r2, r3, #5
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd54:	461a      	mov	r2, r3
 800bd56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f00b f9bd 	bl	80170dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4a0a      	ldr	r2, [pc, #40]	@ (800bd90 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d90c      	bls.n	800bd84 <PCD_EP_OutSetupPacket_int+0x7c>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	799b      	ldrb	r3, [r3, #6]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d108      	bne.n	800bd84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	2101      	movs	r1, #1
 800bd80:	f008 feca 	bl	8014b18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	4f54300a 	.word	0x4f54300a

0800bd94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
 800bda0:	4613      	mov	r3, r2
 800bda2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d107      	bne.n	800bdc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bdb2:	883b      	ldrh	r3, [r7, #0]
 800bdb4:	0419      	lsls	r1, r3, #16
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	629a      	str	r2, [r3, #40]	@ 0x28
 800bdc0:	e028      	b.n	800be14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	0c1b      	lsrs	r3, r3, #16
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]
 800bdd4:	e00d      	b.n	800bdf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	3340      	adds	r3, #64	@ 0x40
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	0c1b      	lsrs	r3, r3, #16
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4413      	add	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	73fb      	strb	r3, [r7, #15]
 800bdf2:	7bfa      	ldrb	r2, [r7, #15]
 800bdf4:	78fb      	ldrb	r3, [r7, #3]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d3ec      	bcc.n	800bdd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bdfc:	883b      	ldrh	r3, [r7, #0]
 800bdfe:	0418      	lsls	r0, r3, #16
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	3b01      	subs	r3, #1
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	4302      	orrs	r2, r0
 800be0c:	3340      	adds	r3, #64	@ 0x40
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	440b      	add	r3, r1
 800be12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	887a      	ldrh	r2, [r7, #2]
 800be34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be72:	4b05      	ldr	r3, [pc, #20]	@ (800be88 <HAL_PCDEx_ActivateLPM+0x44>)
 800be74:	4313      	orrs	r3, r2
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	10000003 	.word	0x10000003

0800be8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800beac:	4b19      	ldr	r3, [pc, #100]	@ (800bf14 <HAL_PWREx_ConfigSupply+0x70>)
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d00a      	beq.n	800bece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800beb8:	4b16      	ldr	r3, [pc, #88]	@ (800bf14 <HAL_PWREx_ConfigSupply+0x70>)
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f003 0307 	and.w	r3, r3, #7
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d001      	beq.n	800beca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e01f      	b.n	800bf0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e01d      	b.n	800bf0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bece:	4b11      	ldr	r3, [pc, #68]	@ (800bf14 <HAL_PWREx_ConfigSupply+0x70>)
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	f023 0207 	bic.w	r2, r3, #7
 800bed6:	490f      	ldr	r1, [pc, #60]	@ (800bf14 <HAL_PWREx_ConfigSupply+0x70>)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bede:	f7fa f963 	bl	80061a8 <HAL_GetTick>
 800bee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bee4:	e009      	b.n	800befa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bee6:	f7fa f95f 	bl	80061a8 <HAL_GetTick>
 800beea:	4602      	mov	r2, r0
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bef4:	d901      	bls.n	800befa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e007      	b.n	800bf0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800befa:	4b06      	ldr	r3, [pc, #24]	@ (800bf14 <HAL_PWREx_ConfigSupply+0x70>)
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf06:	d1ee      	bne.n	800bee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	58024800 	.word	0x58024800

0800bf18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bf1c:	4b05      	ldr	r3, [pc, #20]	@ (800bf34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	4a04      	ldr	r2, [pc, #16]	@ (800bf34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bf22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf26:	60d3      	str	r3, [r2, #12]
}
 800bf28:	bf00      	nop
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	58024800 	.word	0x58024800

0800bf38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08c      	sub	sp, #48	@ 0x30
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e3c8      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 8087 	beq.w	800c066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf58:	4b88      	ldr	r3, [pc, #544]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bf62:	4b86      	ldr	r3, [pc, #536]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf66:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d007      	beq.n	800bf7e <HAL_RCC_OscConfig+0x46>
 800bf6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf70:	2b18      	cmp	r3, #24
 800bf72:	d110      	bne.n	800bf96 <HAL_RCC_OscConfig+0x5e>
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d10b      	bne.n	800bf96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf7e:	4b7f      	ldr	r3, [pc, #508]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d06c      	beq.n	800c064 <HAL_RCC_OscConfig+0x12c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d168      	bne.n	800c064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e3a2      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf9e:	d106      	bne.n	800bfae <HAL_RCC_OscConfig+0x76>
 800bfa0:	4b76      	ldr	r3, [pc, #472]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a75      	ldr	r2, [pc, #468]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfaa:	6013      	str	r3, [r2, #0]
 800bfac:	e02e      	b.n	800c00c <HAL_RCC_OscConfig+0xd4>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10c      	bne.n	800bfd0 <HAL_RCC_OscConfig+0x98>
 800bfb6:	4b71      	ldr	r3, [pc, #452]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a70      	ldr	r2, [pc, #448]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	4b6e      	ldr	r3, [pc, #440]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a6d      	ldr	r2, [pc, #436]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	e01d      	b.n	800c00c <HAL_RCC_OscConfig+0xd4>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bfd8:	d10c      	bne.n	800bff4 <HAL_RCC_OscConfig+0xbc>
 800bfda:	4b68      	ldr	r3, [pc, #416]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a67      	ldr	r2, [pc, #412]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bfe4:	6013      	str	r3, [r2, #0]
 800bfe6:	4b65      	ldr	r3, [pc, #404]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a64      	ldr	r2, [pc, #400]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bfec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	e00b      	b.n	800c00c <HAL_RCC_OscConfig+0xd4>
 800bff4:	4b61      	ldr	r3, [pc, #388]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a60      	ldr	r2, [pc, #384]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800bffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	4b5e      	ldr	r3, [pc, #376]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a5d      	ldr	r2, [pc, #372]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c00a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d013      	beq.n	800c03c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c014:	f7fa f8c8 	bl	80061a8 <HAL_GetTick>
 800c018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c01a:	e008      	b.n	800c02e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c01c:	f7fa f8c4 	bl	80061a8 <HAL_GetTick>
 800c020:	4602      	mov	r2, r0
 800c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	2b64      	cmp	r3, #100	@ 0x64
 800c028:	d901      	bls.n	800c02e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e356      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c02e:	4b53      	ldr	r3, [pc, #332]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0f0      	beq.n	800c01c <HAL_RCC_OscConfig+0xe4>
 800c03a:	e014      	b.n	800c066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c03c:	f7fa f8b4 	bl	80061a8 <HAL_GetTick>
 800c040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c042:	e008      	b.n	800c056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c044:	f7fa f8b0 	bl	80061a8 <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	2b64      	cmp	r3, #100	@ 0x64
 800c050:	d901      	bls.n	800c056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e342      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c056:	4b49      	ldr	r3, [pc, #292]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f0      	bne.n	800c044 <HAL_RCC_OscConfig+0x10c>
 800c062:	e000      	b.n	800c066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 808c 	beq.w	800c18c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c074:	4b41      	ldr	r3, [pc, #260]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c07c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c07e:	4b3f      	ldr	r3, [pc, #252]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c082:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d007      	beq.n	800c09a <HAL_RCC_OscConfig+0x162>
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	2b18      	cmp	r3, #24
 800c08e:	d137      	bne.n	800c100 <HAL_RCC_OscConfig+0x1c8>
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d132      	bne.n	800c100 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c09a:	4b38      	ldr	r3, [pc, #224]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <HAL_RCC_OscConfig+0x17a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e314      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c0b2:	4b32      	ldr	r3, [pc, #200]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f023 0219 	bic.w	r2, r3, #25
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	492f      	ldr	r1, [pc, #188]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c4:	f7fa f870 	bl	80061a8 <HAL_GetTick>
 800c0c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c0ca:	e008      	b.n	800c0de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0cc:	f7fa f86c 	bl	80061a8 <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d901      	bls.n	800c0de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e2fe      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c0de:	4b27      	ldr	r3, [pc, #156]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0f0      	beq.n	800c0cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0ea:	4b24      	ldr	r3, [pc, #144]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	061b      	lsls	r3, r3, #24
 800c0f8:	4920      	ldr	r1, [pc, #128]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c0fe:	e045      	b.n	800c18c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d026      	beq.n	800c156 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c108:	4b1c      	ldr	r3, [pc, #112]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f023 0219 	bic.w	r2, r3, #25
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	4919      	ldr	r1, [pc, #100]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c116:	4313      	orrs	r3, r2
 800c118:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c11a:	f7fa f845 	bl	80061a8 <HAL_GetTick>
 800c11e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c120:	e008      	b.n	800c134 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c122:	f7fa f841 	bl	80061a8 <HAL_GetTick>
 800c126:	4602      	mov	r2, r0
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d901      	bls.n	800c134 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800c130:	2303      	movs	r3, #3
 800c132:	e2d3      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c134:	4b11      	ldr	r3, [pc, #68]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d0f0      	beq.n	800c122 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c140:	4b0e      	ldr	r3, [pc, #56]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	061b      	lsls	r3, r3, #24
 800c14e:	490b      	ldr	r1, [pc, #44]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c150:	4313      	orrs	r3, r2
 800c152:	604b      	str	r3, [r1, #4]
 800c154:	e01a      	b.n	800c18c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c156:	4b09      	ldr	r3, [pc, #36]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a08      	ldr	r2, [pc, #32]	@ (800c17c <HAL_RCC_OscConfig+0x244>)
 800c15c:	f023 0301 	bic.w	r3, r3, #1
 800c160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c162:	f7fa f821 	bl	80061a8 <HAL_GetTick>
 800c166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c168:	e00a      	b.n	800c180 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c16a:	f7fa f81d 	bl	80061a8 <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	2b02      	cmp	r3, #2
 800c176:	d903      	bls.n	800c180 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e2af      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
 800c17c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c180:	4b96      	ldr	r3, [pc, #600]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0304 	and.w	r3, r3, #4
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1ee      	bne.n	800c16a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0310 	and.w	r3, r3, #16
 800c194:	2b00      	cmp	r3, #0
 800c196:	d06a      	beq.n	800c26e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c198:	4b90      	ldr	r3, [pc, #576]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c1a2:	4b8e      	ldr	r3, [pc, #568]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	2b08      	cmp	r3, #8
 800c1ac:	d007      	beq.n	800c1be <HAL_RCC_OscConfig+0x286>
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	2b18      	cmp	r3, #24
 800c1b2:	d11b      	bne.n	800c1ec <HAL_RCC_OscConfig+0x2b4>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f003 0303 	and.w	r3, r3, #3
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d116      	bne.n	800c1ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c1be:	4b87      	ldr	r3, [pc, #540]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x29e>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	69db      	ldr	r3, [r3, #28]
 800c1ce:	2b80      	cmp	r3, #128	@ 0x80
 800c1d0:	d001      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e282      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c1d6:	4b81      	ldr	r3, [pc, #516]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	061b      	lsls	r3, r3, #24
 800c1e4:	497d      	ldr	r1, [pc, #500]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c1ea:	e040      	b.n	800c26e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d023      	beq.n	800c23c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c1f4:	4b79      	ldr	r3, [pc, #484]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a78      	ldr	r2, [pc, #480]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c200:	f7f9 ffd2 	bl	80061a8 <HAL_GetTick>
 800c204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c206:	e008      	b.n	800c21a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c208:	f7f9 ffce 	bl	80061a8 <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	2b02      	cmp	r3, #2
 800c214:	d901      	bls.n	800c21a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e260      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c21a:	4b70      	ldr	r3, [pc, #448]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f0      	beq.n	800c208 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c226:	4b6d      	ldr	r3, [pc, #436]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	061b      	lsls	r3, r3, #24
 800c234:	4969      	ldr	r1, [pc, #420]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c236:	4313      	orrs	r3, r2
 800c238:	60cb      	str	r3, [r1, #12]
 800c23a:	e018      	b.n	800c26e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c23c:	4b67      	ldr	r3, [pc, #412]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a66      	ldr	r2, [pc, #408]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c248:	f7f9 ffae 	bl	80061a8 <HAL_GetTick>
 800c24c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c24e:	e008      	b.n	800c262 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c250:	f7f9 ffaa 	bl	80061a8 <HAL_GetTick>
 800c254:	4602      	mov	r2, r0
 800c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d901      	bls.n	800c262 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800c25e:	2303      	movs	r3, #3
 800c260:	e23c      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c262:	4b5e      	ldr	r3, [pc, #376]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1f0      	bne.n	800c250 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0308 	and.w	r3, r3, #8
 800c276:	2b00      	cmp	r3, #0
 800c278:	d036      	beq.n	800c2e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d019      	beq.n	800c2b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c282:	4b56      	ldr	r3, [pc, #344]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c286:	4a55      	ldr	r2, [pc, #340]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c288:	f043 0301 	orr.w	r3, r3, #1
 800c28c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c28e:	f7f9 ff8b 	bl	80061a8 <HAL_GetTick>
 800c292:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c294:	e008      	b.n	800c2a8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c296:	f7f9 ff87 	bl	80061a8 <HAL_GetTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d901      	bls.n	800c2a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e219      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c2a8:	4b4c      	ldr	r3, [pc, #304]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c2aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ac:	f003 0302 	and.w	r3, r3, #2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0f0      	beq.n	800c296 <HAL_RCC_OscConfig+0x35e>
 800c2b4:	e018      	b.n	800c2e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2b6:	4b49      	ldr	r3, [pc, #292]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ba:	4a48      	ldr	r2, [pc, #288]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c2bc:	f023 0301 	bic.w	r3, r3, #1
 800c2c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2c2:	f7f9 ff71 	bl	80061a8 <HAL_GetTick>
 800c2c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c2c8:	e008      	b.n	800c2dc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2ca:	f7f9 ff6d 	bl	80061a8 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d901      	bls.n	800c2dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e1ff      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c2dc:	4b3f      	ldr	r3, [pc, #252]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f0      	bne.n	800c2ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0320 	and.w	r3, r3, #32
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d036      	beq.n	800c362 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d019      	beq.n	800c330 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c2fc:	4b37      	ldr	r3, [pc, #220]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a36      	ldr	r2, [pc, #216]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c302:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c306:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c308:	f7f9 ff4e 	bl	80061a8 <HAL_GetTick>
 800c30c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c30e:	e008      	b.n	800c322 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c310:	f7f9 ff4a 	bl	80061a8 <HAL_GetTick>
 800c314:	4602      	mov	r2, r0
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d901      	bls.n	800c322 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800c31e:	2303      	movs	r3, #3
 800c320:	e1dc      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c322:	4b2e      	ldr	r3, [pc, #184]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0f0      	beq.n	800c310 <HAL_RCC_OscConfig+0x3d8>
 800c32e:	e018      	b.n	800c362 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c330:	4b2a      	ldr	r3, [pc, #168]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a29      	ldr	r2, [pc, #164]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c33a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c33c:	f7f9 ff34 	bl	80061a8 <HAL_GetTick>
 800c340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c342:	e008      	b.n	800c356 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c344:	f7f9 ff30 	bl	80061a8 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d901      	bls.n	800c356 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e1c2      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c356:	4b21      	ldr	r3, [pc, #132]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f0      	bne.n	800c344 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0304 	and.w	r3, r3, #4
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 8086 	beq.w	800c47c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c370:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e0 <HAL_RCC_OscConfig+0x4a8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a1a      	ldr	r2, [pc, #104]	@ (800c3e0 <HAL_RCC_OscConfig+0x4a8>)
 800c376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c37a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c37c:	f7f9 ff14 	bl	80061a8 <HAL_GetTick>
 800c380:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c382:	e008      	b.n	800c396 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c384:	f7f9 ff10 	bl	80061a8 <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	2b64      	cmp	r3, #100	@ 0x64
 800c390:	d901      	bls.n	800c396 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e1a2      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c396:	4b12      	ldr	r3, [pc, #72]	@ (800c3e0 <HAL_RCC_OscConfig+0x4a8>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d106      	bne.n	800c3b8 <HAL_RCC_OscConfig+0x480>
 800c3aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3ae:	4a0b      	ldr	r2, [pc, #44]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3b0:	f043 0301 	orr.w	r3, r3, #1
 800c3b4:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3b6:	e032      	b.n	800c41e <HAL_RCC_OscConfig+0x4e6>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d111      	bne.n	800c3e4 <HAL_RCC_OscConfig+0x4ac>
 800c3c0:	4b06      	ldr	r3, [pc, #24]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3c4:	4a05      	ldr	r2, [pc, #20]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3c6:	f023 0301 	bic.w	r3, r3, #1
 800c3ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3cc:	4b03      	ldr	r3, [pc, #12]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3d0:	4a02      	ldr	r2, [pc, #8]	@ (800c3dc <HAL_RCC_OscConfig+0x4a4>)
 800c3d2:	f023 0304 	bic.w	r3, r3, #4
 800c3d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3d8:	e021      	b.n	800c41e <HAL_RCC_OscConfig+0x4e6>
 800c3da:	bf00      	nop
 800c3dc:	58024400 	.word	0x58024400
 800c3e0:	58024800 	.word	0x58024800
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	2b05      	cmp	r3, #5
 800c3ea:	d10c      	bne.n	800c406 <HAL_RCC_OscConfig+0x4ce>
 800c3ec:	4b83      	ldr	r3, [pc, #524]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c3ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3f0:	4a82      	ldr	r2, [pc, #520]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c3f2:	f043 0304 	orr.w	r3, r3, #4
 800c3f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3f8:	4b80      	ldr	r3, [pc, #512]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3fc:	4a7f      	ldr	r2, [pc, #508]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	6713      	str	r3, [r2, #112]	@ 0x70
 800c404:	e00b      	b.n	800c41e <HAL_RCC_OscConfig+0x4e6>
 800c406:	4b7d      	ldr	r3, [pc, #500]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c40a:	4a7c      	ldr	r2, [pc, #496]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c40c:	f023 0301 	bic.w	r3, r3, #1
 800c410:	6713      	str	r3, [r2, #112]	@ 0x70
 800c412:	4b7a      	ldr	r3, [pc, #488]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c416:	4a79      	ldr	r2, [pc, #484]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c418:	f023 0304 	bic.w	r3, r3, #4
 800c41c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d015      	beq.n	800c452 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c426:	f7f9 febf 	bl	80061a8 <HAL_GetTick>
 800c42a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c42c:	e00a      	b.n	800c444 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c42e:	f7f9 febb 	bl	80061a8 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d901      	bls.n	800c444 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e14b      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c444:	4b6d      	ldr	r3, [pc, #436]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0ee      	beq.n	800c42e <HAL_RCC_OscConfig+0x4f6>
 800c450:	e014      	b.n	800c47c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c452:	f7f9 fea9 	bl	80061a8 <HAL_GetTick>
 800c456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c458:	e00a      	b.n	800c470 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c45a:	f7f9 fea5 	bl	80061a8 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c468:	4293      	cmp	r3, r2
 800c46a:	d901      	bls.n	800c470 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e135      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c470:	4b62      	ldr	r3, [pc, #392]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1ee      	bne.n	800c45a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 812a 	beq.w	800c6da <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c486:	4b5d      	ldr	r3, [pc, #372]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c48e:	2b18      	cmp	r3, #24
 800c490:	f000 80ba 	beq.w	800c608 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c498:	2b02      	cmp	r3, #2
 800c49a:	f040 8095 	bne.w	800c5c8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c49e:	4b57      	ldr	r3, [pc, #348]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a56      	ldr	r2, [pc, #344]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c4a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c4a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4aa:	f7f9 fe7d 	bl	80061a8 <HAL_GetTick>
 800c4ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c4b0:	e008      	b.n	800c4c4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4b2:	f7f9 fe79 	bl	80061a8 <HAL_GetTick>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d901      	bls.n	800c4c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e10b      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c4c4:	4b4d      	ldr	r3, [pc, #308]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1f0      	bne.n	800c4b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c4d0:	4b4a      	ldr	r3, [pc, #296]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c4d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4d4:	4b4a      	ldr	r3, [pc, #296]	@ (800c600 <HAL_RCC_OscConfig+0x6c8>)
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c4e0:	0112      	lsls	r2, r2, #4
 800c4e2:	430a      	orrs	r2, r1
 800c4e4:	4945      	ldr	r1, [pc, #276]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	628b      	str	r3, [r1, #40]	@ 0x28
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	025b      	lsls	r3, r3, #9
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	431a      	orrs	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c504:	3b01      	subs	r3, #1
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c50c:	431a      	orrs	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c512:	3b01      	subs	r3, #1
 800c514:	061b      	lsls	r3, r3, #24
 800c516:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c51a:	4938      	ldr	r1, [pc, #224]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c51c:	4313      	orrs	r3, r2
 800c51e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c520:	4b36      	ldr	r3, [pc, #216]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c524:	4a35      	ldr	r2, [pc, #212]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c526:	f023 0301 	bic.w	r3, r3, #1
 800c52a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c52c:	4b33      	ldr	r3, [pc, #204]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c52e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c530:	4b34      	ldr	r3, [pc, #208]	@ (800c604 <HAL_RCC_OscConfig+0x6cc>)
 800c532:	4013      	ands	r3, r2
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c538:	00d2      	lsls	r2, r2, #3
 800c53a:	4930      	ldr	r1, [pc, #192]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c53c:	4313      	orrs	r3, r2
 800c53e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c540:	4b2e      	ldr	r3, [pc, #184]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c544:	f023 020c 	bic.w	r2, r3, #12
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54c:	492b      	ldr	r1, [pc, #172]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c552:	4b2a      	ldr	r3, [pc, #168]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c556:	f023 0202 	bic.w	r2, r3, #2
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c55e:	4927      	ldr	r1, [pc, #156]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c560:	4313      	orrs	r3, r2
 800c562:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c564:	4b25      	ldr	r3, [pc, #148]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c568:	4a24      	ldr	r2, [pc, #144]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c56a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c56e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c570:	4b22      	ldr	r3, [pc, #136]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c574:	4a21      	ldr	r2, [pc, #132]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c57a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c57c:	4b1f      	ldr	r3, [pc, #124]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c580:	4a1e      	ldr	r2, [pc, #120]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c582:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c588:	4b1c      	ldr	r3, [pc, #112]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c58e:	f043 0301 	orr.w	r3, r3, #1
 800c592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c594:	4b19      	ldr	r3, [pc, #100]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a18      	ldr	r2, [pc, #96]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c59a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5a0:	f7f9 fe02 	bl	80061a8 <HAL_GetTick>
 800c5a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c5a6:	e008      	b.n	800c5ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5a8:	f7f9 fdfe 	bl	80061a8 <HAL_GetTick>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d901      	bls.n	800c5ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e090      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c5ba:	4b10      	ldr	r3, [pc, #64]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0f0      	beq.n	800c5a8 <HAL_RCC_OscConfig+0x670>
 800c5c6:	e088      	b.n	800c6da <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a0b      	ldr	r2, [pc, #44]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c5ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c5d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d4:	f7f9 fde8 	bl	80061a8 <HAL_GetTick>
 800c5d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c5da:	e008      	b.n	800c5ee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5dc:	f7f9 fde4 	bl	80061a8 <HAL_GetTick>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d901      	bls.n	800c5ee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e076      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c5ee:	4b03      	ldr	r3, [pc, #12]	@ (800c5fc <HAL_RCC_OscConfig+0x6c4>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1f0      	bne.n	800c5dc <HAL_RCC_OscConfig+0x6a4>
 800c5fa:	e06e      	b.n	800c6da <HAL_RCC_OscConfig+0x7a2>
 800c5fc:	58024400 	.word	0x58024400
 800c600:	fffffc0c 	.word	0xfffffc0c
 800c604:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c608:	4b36      	ldr	r3, [pc, #216]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c60e:	4b35      	ldr	r3, [pc, #212]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c612:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d031      	beq.n	800c680 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f003 0203 	and.w	r2, r3, #3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c626:	429a      	cmp	r2, r3
 800c628:	d12a      	bne.n	800c680 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	091b      	lsrs	r3, r3, #4
 800c62e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c636:	429a      	cmp	r2, r3
 800c638:	d122      	bne.n	800c680 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c646:	429a      	cmp	r2, r3
 800c648:	d11a      	bne.n	800c680 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	0a5b      	lsrs	r3, r3, #9
 800c64e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c658:	429a      	cmp	r2, r3
 800c65a:	d111      	bne.n	800c680 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	0c1b      	lsrs	r3, r3, #16
 800c660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c668:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d108      	bne.n	800c680 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	0e1b      	lsrs	r3, r3, #24
 800c672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c67a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d001      	beq.n	800c684 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e02b      	b.n	800c6dc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c684:	4b17      	ldr	r3, [pc, #92]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c688:	08db      	lsrs	r3, r3, #3
 800c68a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c68e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	429a      	cmp	r2, r3
 800c698:	d01f      	beq.n	800c6da <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c69a:	4b12      	ldr	r3, [pc, #72]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69e:	4a11      	ldr	r2, [pc, #68]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c6a0:	f023 0301 	bic.w	r3, r3, #1
 800c6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c6a6:	f7f9 fd7f 	bl	80061a8 <HAL_GetTick>
 800c6aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c6ac:	bf00      	nop
 800c6ae:	f7f9 fd7b 	bl	80061a8 <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d0f9      	beq.n	800c6ae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c6bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6be:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <HAL_RCC_OscConfig+0x7b0>)
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c6c6:	00d2      	lsls	r2, r2, #3
 800c6c8:	4906      	ldr	r1, [pc, #24]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c6ce:	4b05      	ldr	r3, [pc, #20]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	4a04      	ldr	r2, [pc, #16]	@ (800c6e4 <HAL_RCC_OscConfig+0x7ac>)
 800c6d4:	f043 0301 	orr.w	r3, r3, #1
 800c6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3730      	adds	r7, #48	@ 0x30
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	ffff0007 	.word	0xffff0007

0800c6ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e19c      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c700:	4b8a      	ldr	r3, [pc, #552]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 030f 	and.w	r3, r3, #15
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d910      	bls.n	800c730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c70e:	4b87      	ldr	r3, [pc, #540]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f023 020f 	bic.w	r2, r3, #15
 800c716:	4985      	ldr	r1, [pc, #532]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c71e:	4b83      	ldr	r3, [pc, #524]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 030f 	and.w	r3, r3, #15
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d001      	beq.n	800c730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e184      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0304 	and.w	r3, r3, #4
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d010      	beq.n	800c75e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	691a      	ldr	r2, [r3, #16]
 800c740:	4b7b      	ldr	r3, [pc, #492]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c748:	429a      	cmp	r2, r3
 800c74a:	d908      	bls.n	800c75e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c74c:	4b78      	ldr	r3, [pc, #480]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	4975      	ldr	r1, [pc, #468]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c75a:	4313      	orrs	r3, r2
 800c75c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d010      	beq.n	800c78c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695a      	ldr	r2, [r3, #20]
 800c76e:	4b70      	ldr	r3, [pc, #448]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c776:	429a      	cmp	r2, r3
 800c778:	d908      	bls.n	800c78c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c77a:	4b6d      	ldr	r3, [pc, #436]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	496a      	ldr	r1, [pc, #424]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c788:	4313      	orrs	r3, r2
 800c78a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2b00      	cmp	r3, #0
 800c796:	d010      	beq.n	800c7ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	699a      	ldr	r2, [r3, #24]
 800c79c:	4b64      	ldr	r3, [pc, #400]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d908      	bls.n	800c7ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c7a8:	4b61      	ldr	r3, [pc, #388]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	495e      	ldr	r1, [pc, #376]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0320 	and.w	r3, r3, #32
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d010      	beq.n	800c7e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69da      	ldr	r2, [r3, #28]
 800c7ca:	4b59      	ldr	r3, [pc, #356]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d908      	bls.n	800c7e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7d6:	4b56      	ldr	r3, [pc, #344]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	4953      	ldr	r1, [pc, #332]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0302 	and.w	r3, r3, #2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d010      	beq.n	800c816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	4b4d      	ldr	r3, [pc, #308]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	f003 030f 	and.w	r3, r3, #15
 800c800:	429a      	cmp	r2, r3
 800c802:	d908      	bls.n	800c816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c804:	4b4a      	ldr	r3, [pc, #296]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	f023 020f 	bic.w	r2, r3, #15
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	4947      	ldr	r1, [pc, #284]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c812:	4313      	orrs	r3, r2
 800c814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d055      	beq.n	800c8ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c822:	4b43      	ldr	r3, [pc, #268]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	4940      	ldr	r1, [pc, #256]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c830:	4313      	orrs	r3, r2
 800c832:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d107      	bne.n	800c84c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c83c:	4b3c      	ldr	r3, [pc, #240]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d121      	bne.n	800c88c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	e0f6      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	2b03      	cmp	r3, #3
 800c852:	d107      	bne.n	800c864 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c854:	4b36      	ldr	r3, [pc, #216]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d115      	bne.n	800c88c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	e0ea      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d107      	bne.n	800c87c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c86c:	4b30      	ldr	r3, [pc, #192]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c874:	2b00      	cmp	r3, #0
 800c876:	d109      	bne.n	800c88c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e0de      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c87c:	4b2c      	ldr	r3, [pc, #176]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	e0d6      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c88c:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	f023 0207 	bic.w	r2, r3, #7
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	4925      	ldr	r1, [pc, #148]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c89e:	f7f9 fc83 	bl	80061a8 <HAL_GetTick>
 800c8a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8a4:	e00a      	b.n	800c8bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8a6:	f7f9 fc7f 	bl	80061a8 <HAL_GetTick>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d901      	bls.n	800c8bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	e0be      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d1eb      	bne.n	800c8a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 0302 	and.w	r3, r3, #2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d010      	beq.n	800c8fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	4b14      	ldr	r3, [pc, #80]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	f003 030f 	and.w	r3, r3, #15
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d208      	bcs.n	800c8fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8ea:	4b11      	ldr	r3, [pc, #68]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	f023 020f 	bic.w	r2, r3, #15
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	490e      	ldr	r1, [pc, #56]	@ (800c930 <HAL_RCC_ClockConfig+0x244>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 030f 	and.w	r3, r3, #15
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	429a      	cmp	r2, r3
 800c908:	d214      	bcs.n	800c934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c90a:	4b08      	ldr	r3, [pc, #32]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f023 020f 	bic.w	r2, r3, #15
 800c912:	4906      	ldr	r1, [pc, #24]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	4313      	orrs	r3, r2
 800c918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c91a:	4b04      	ldr	r3, [pc, #16]	@ (800c92c <HAL_RCC_ClockConfig+0x240>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 030f 	and.w	r3, r3, #15
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d005      	beq.n	800c934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	e086      	b.n	800ca3a <HAL_RCC_ClockConfig+0x34e>
 800c92c:	52002000 	.word	0x52002000
 800c930:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d010      	beq.n	800c962 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	4b3f      	ldr	r3, [pc, #252]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d208      	bcs.n	800c962 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c950:	4b3c      	ldr	r3, [pc, #240]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	4939      	ldr	r1, [pc, #228]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c95e:	4313      	orrs	r3, r2
 800c960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0308 	and.w	r3, r3, #8
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d010      	beq.n	800c990 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	695a      	ldr	r2, [r3, #20]
 800c972:	4b34      	ldr	r3, [pc, #208]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c974:	69db      	ldr	r3, [r3, #28]
 800c976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d208      	bcs.n	800c990 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c97e:	4b31      	ldr	r3, [pc, #196]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	492e      	ldr	r1, [pc, #184]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 0310 	and.w	r3, r3, #16
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d010      	beq.n	800c9be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	699a      	ldr	r2, [r3, #24]
 800c9a0:	4b28      	ldr	r3, [pc, #160]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9a2:	69db      	ldr	r3, [r3, #28]
 800c9a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d208      	bcs.n	800c9be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c9ac:	4b25      	ldr	r3, [pc, #148]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	4922      	ldr	r1, [pc, #136]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0320 	and.w	r3, r3, #32
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d010      	beq.n	800c9ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	69da      	ldr	r2, [r3, #28]
 800c9ce:	4b1d      	ldr	r3, [pc, #116]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d208      	bcs.n	800c9ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c9da:	4b1a      	ldr	r3, [pc, #104]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	4917      	ldr	r1, [pc, #92]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c9ec:	f000 f834 	bl	800ca58 <HAL_RCC_GetSysClockFreq>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	0a1b      	lsrs	r3, r3, #8
 800c9f8:	f003 030f 	and.w	r3, r3, #15
 800c9fc:	4912      	ldr	r1, [pc, #72]	@ (800ca48 <HAL_RCC_ClockConfig+0x35c>)
 800c9fe:	5ccb      	ldrb	r3, [r1, r3]
 800ca00:	f003 031f 	and.w	r3, r3, #31
 800ca04:	fa22 f303 	lsr.w	r3, r2, r3
 800ca08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ca0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca44 <HAL_RCC_ClockConfig+0x358>)
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	4a0d      	ldr	r2, [pc, #52]	@ (800ca48 <HAL_RCC_ClockConfig+0x35c>)
 800ca14:	5cd3      	ldrb	r3, [r2, r3]
 800ca16:	f003 031f 	and.w	r3, r3, #31
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca20:	4a0a      	ldr	r2, [pc, #40]	@ (800ca4c <HAL_RCC_ClockConfig+0x360>)
 800ca22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ca24:	4a0a      	ldr	r2, [pc, #40]	@ (800ca50 <HAL_RCC_ClockConfig+0x364>)
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ca2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca54 <HAL_RCC_ClockConfig+0x368>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f9 fb70 	bl	8006114 <HAL_InitTick>
 800ca34:	4603      	mov	r3, r0
 800ca36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	58024400 	.word	0x58024400
 800ca48:	0801c6f4 	.word	0x0801c6f4
 800ca4c:	24000004 	.word	0x24000004
 800ca50:	24000000 	.word	0x24000000
 800ca54:	24000008 	.word	0x24000008

0800ca58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b089      	sub	sp, #36	@ 0x24
 800ca5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca5e:	4bb3      	ldr	r3, [pc, #716]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca66:	2b18      	cmp	r3, #24
 800ca68:	f200 8155 	bhi.w	800cd16 <HAL_RCC_GetSysClockFreq+0x2be>
 800ca6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca74 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ca6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca72:	bf00      	nop
 800ca74:	0800cad9 	.word	0x0800cad9
 800ca78:	0800cd17 	.word	0x0800cd17
 800ca7c:	0800cd17 	.word	0x0800cd17
 800ca80:	0800cd17 	.word	0x0800cd17
 800ca84:	0800cd17 	.word	0x0800cd17
 800ca88:	0800cd17 	.word	0x0800cd17
 800ca8c:	0800cd17 	.word	0x0800cd17
 800ca90:	0800cd17 	.word	0x0800cd17
 800ca94:	0800caff 	.word	0x0800caff
 800ca98:	0800cd17 	.word	0x0800cd17
 800ca9c:	0800cd17 	.word	0x0800cd17
 800caa0:	0800cd17 	.word	0x0800cd17
 800caa4:	0800cd17 	.word	0x0800cd17
 800caa8:	0800cd17 	.word	0x0800cd17
 800caac:	0800cd17 	.word	0x0800cd17
 800cab0:	0800cd17 	.word	0x0800cd17
 800cab4:	0800cb05 	.word	0x0800cb05
 800cab8:	0800cd17 	.word	0x0800cd17
 800cabc:	0800cd17 	.word	0x0800cd17
 800cac0:	0800cd17 	.word	0x0800cd17
 800cac4:	0800cd17 	.word	0x0800cd17
 800cac8:	0800cd17 	.word	0x0800cd17
 800cacc:	0800cd17 	.word	0x0800cd17
 800cad0:	0800cd17 	.word	0x0800cd17
 800cad4:	0800cb0b 	.word	0x0800cb0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cad8:	4b94      	ldr	r3, [pc, #592]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d009      	beq.n	800caf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cae4:	4b91      	ldr	r3, [pc, #580]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	08db      	lsrs	r3, r3, #3
 800caea:	f003 0303 	and.w	r3, r3, #3
 800caee:	4a90      	ldr	r2, [pc, #576]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800caf0:	fa22 f303 	lsr.w	r3, r2, r3
 800caf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800caf6:	e111      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800caf8:	4b8d      	ldr	r3, [pc, #564]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cafa:	61bb      	str	r3, [r7, #24]
      break;
 800cafc:	e10e      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800cafe:	4b8d      	ldr	r3, [pc, #564]	@ (800cd34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb00:	61bb      	str	r3, [r7, #24]
      break;
 800cb02:	e10b      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800cb04:	4b8c      	ldr	r3, [pc, #560]	@ (800cd38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800cb06:	61bb      	str	r3, [r7, #24]
      break;
 800cb08:	e108      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb0a:	4b88      	ldr	r3, [pc, #544]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0e:	f003 0303 	and.w	r3, r3, #3
 800cb12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800cb14:	4b85      	ldr	r3, [pc, #532]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb18:	091b      	lsrs	r3, r3, #4
 800cb1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cb20:	4b82      	ldr	r3, [pc, #520]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb2a:	4b80      	ldr	r3, [pc, #512]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2e:	08db      	lsrs	r3, r3, #3
 800cb30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	fb02 f303 	mul.w	r3, r2, r3
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 80e1 	beq.w	800cd10 <HAL_RCC_GetSysClockFreq+0x2b8>
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	f000 8083 	beq.w	800cc5c <HAL_RCC_GetSysClockFreq+0x204>
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	f200 80a1 	bhi.w	800cca0 <HAL_RCC_GetSysClockFreq+0x248>
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <HAL_RCC_GetSysClockFreq+0x114>
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d056      	beq.n	800cc18 <HAL_RCC_GetSysClockFreq+0x1c0>
 800cb6a:	e099      	b.n	800cca0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb6c:	4b6f      	ldr	r3, [pc, #444]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0320 	and.w	r3, r3, #32
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d02d      	beq.n	800cbd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb78:	4b6c      	ldr	r3, [pc, #432]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	08db      	lsrs	r3, r3, #3
 800cb7e:	f003 0303 	and.w	r3, r3, #3
 800cb82:	4a6b      	ldr	r2, [pc, #428]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cb84:	fa22 f303 	lsr.w	r3, r2, r3
 800cb88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	ee07 3a90 	vmov	s15, r3
 800cb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba2:	4b62      	ldr	r3, [pc, #392]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800cd3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cbd2:	e087      	b.n	800cce4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	ee07 3a90 	vmov	s15, r3
 800cbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800cd40 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe6:	4b51      	ldr	r3, [pc, #324]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cbe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800cd3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cc16:	e065      	b.n	800cce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800cd44 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2a:	4b40      	ldr	r3, [pc, #256]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cc3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cd3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cc5a:	e043      	b.n	800cce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800cd48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800cc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6e:	4b2f      	ldr	r3, [pc, #188]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cc82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800cd3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cc9e:	e021      	b.n	800cce4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800cd44 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ccae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb2:	4b1e      	ldr	r3, [pc, #120]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ccc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800cd3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ccca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cce2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cce4:	4b11      	ldr	r3, [pc, #68]	@ (800cd2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cce8:	0a5b      	lsrs	r3, r3, #9
 800ccea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccee:	3301      	adds	r3, #1
 800ccf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	ee07 3a90 	vmov	s15, r3
 800ccf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ccfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd08:	ee17 3a90 	vmov	r3, s15
 800cd0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cd0e:	e005      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61bb      	str	r3, [r7, #24]
      break;
 800cd14:	e002      	b.n	800cd1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cd16:	4b07      	ldr	r3, [pc, #28]	@ (800cd34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cd18:	61bb      	str	r3, [r7, #24]
      break;
 800cd1a:	bf00      	nop
  }

  return sysclockfreq;
 800cd1c:	69bb      	ldr	r3, [r7, #24]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3724      	adds	r7, #36	@ 0x24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	58024400 	.word	0x58024400
 800cd30:	03d09000 	.word	0x03d09000
 800cd34:	003d0900 	.word	0x003d0900
 800cd38:	016e3600 	.word	0x016e3600
 800cd3c:	46000000 	.word	0x46000000
 800cd40:	4c742400 	.word	0x4c742400
 800cd44:	4a742400 	.word	0x4a742400
 800cd48:	4bb71b00 	.word	0x4bb71b00

0800cd4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cd52:	f7ff fe81 	bl	800ca58 <HAL_RCC_GetSysClockFreq>
 800cd56:	4602      	mov	r2, r0
 800cd58:	4b10      	ldr	r3, [pc, #64]	@ (800cd9c <HAL_RCC_GetHCLKFreq+0x50>)
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	0a1b      	lsrs	r3, r3, #8
 800cd5e:	f003 030f 	and.w	r3, r3, #15
 800cd62:	490f      	ldr	r1, [pc, #60]	@ (800cda0 <HAL_RCC_GetHCLKFreq+0x54>)
 800cd64:	5ccb      	ldrb	r3, [r1, r3]
 800cd66:	f003 031f 	and.w	r3, r3, #31
 800cd6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cd70:	4b0a      	ldr	r3, [pc, #40]	@ (800cd9c <HAL_RCC_GetHCLKFreq+0x50>)
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	4a09      	ldr	r2, [pc, #36]	@ (800cda0 <HAL_RCC_GetHCLKFreq+0x54>)
 800cd7a:	5cd3      	ldrb	r3, [r2, r3]
 800cd7c:	f003 031f 	and.w	r3, r3, #31
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	fa22 f303 	lsr.w	r3, r2, r3
 800cd86:	4a07      	ldr	r2, [pc, #28]	@ (800cda4 <HAL_RCC_GetHCLKFreq+0x58>)
 800cd88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cd8a:	4a07      	ldr	r2, [pc, #28]	@ (800cda8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cd90:	4b04      	ldr	r3, [pc, #16]	@ (800cda4 <HAL_RCC_GetHCLKFreq+0x58>)
 800cd92:	681b      	ldr	r3, [r3, #0]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	58024400 	.word	0x58024400
 800cda0:	0801c6f4 	.word	0x0801c6f4
 800cda4:	24000004 	.word	0x24000004
 800cda8:	24000000 	.word	0x24000000

0800cdac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cdb0:	f7ff ffcc 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4b06      	ldr	r3, [pc, #24]	@ (800cdd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	091b      	lsrs	r3, r3, #4
 800cdbc:	f003 0307 	and.w	r3, r3, #7
 800cdc0:	4904      	ldr	r1, [pc, #16]	@ (800cdd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cdc2:	5ccb      	ldrb	r3, [r1, r3]
 800cdc4:	f003 031f 	and.w	r3, r3, #31
 800cdc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	58024400 	.word	0x58024400
 800cdd4:	0801c6f4 	.word	0x0801c6f4

0800cdd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cddc:	f7ff ffb6 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800cde0:	4602      	mov	r2, r0
 800cde2:	4b06      	ldr	r3, [pc, #24]	@ (800cdfc <HAL_RCC_GetPCLK2Freq+0x24>)
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	0a1b      	lsrs	r3, r3, #8
 800cde8:	f003 0307 	and.w	r3, r3, #7
 800cdec:	4904      	ldr	r1, [pc, #16]	@ (800ce00 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cdee:	5ccb      	ldrb	r3, [r1, r3]
 800cdf0:	f003 031f 	and.w	r3, r3, #31
 800cdf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	58024400 	.word	0x58024400
 800ce00:	0801c6f4 	.word	0x0801c6f4

0800ce04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce08:	b0c6      	sub	sp, #280	@ 0x118
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ce10:	2300      	movs	r3, #0
 800ce12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ce16:	2300      	movs	r3, #0
 800ce18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ce28:	2500      	movs	r5, #0
 800ce2a:	ea54 0305 	orrs.w	r3, r4, r5
 800ce2e:	d049      	beq.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ce30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce3a:	d02f      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ce3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce40:	d828      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ce42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce46:	d01a      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ce48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce4c:	d822      	bhi.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ce52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce56:	d007      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ce58:	e01c      	b.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce5a:	4bab      	ldr	r3, [pc, #684]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5e:	4aaa      	ldr	r2, [pc, #680]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ce66:	e01a      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6c:	3308      	adds	r3, #8
 800ce6e:	2102      	movs	r1, #2
 800ce70:	4618      	mov	r0, r3
 800ce72:	f002 fa49 	bl	800f308 <RCCEx_PLL2_Config>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ce7c:	e00f      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce82:	3328      	adds	r3, #40	@ 0x28
 800ce84:	2102      	movs	r1, #2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f002 faf0 	bl	800f46c <RCCEx_PLL3_Config>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ce92:	e004      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce9a:	e000      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ce9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cea6:	4b98      	ldr	r3, [pc, #608]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb4:	4a94      	ldr	r2, [pc, #592]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ceb6:	430b      	orrs	r3, r1
 800ceb8:	6513      	str	r3, [r2, #80]	@ 0x50
 800ceba:	e003      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ced0:	f04f 0900 	mov.w	r9, #0
 800ced4:	ea58 0309 	orrs.w	r3, r8, r9
 800ced8:	d047      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ceda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d82a      	bhi.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cee4:	a201      	add	r2, pc, #4	@ (adr r2, 800ceec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cf01 	.word	0x0800cf01
 800cef0:	0800cf0f 	.word	0x0800cf0f
 800cef4:	0800cf25 	.word	0x0800cf25
 800cef8:	0800cf43 	.word	0x0800cf43
 800cefc:	0800cf43 	.word	0x0800cf43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf00:	4b81      	ldr	r3, [pc, #516]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf04:	4a80      	ldr	r2, [pc, #512]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf0c:	e01a      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf12:	3308      	adds	r3, #8
 800cf14:	2100      	movs	r1, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f002 f9f6 	bl	800f308 <RCCEx_PLL2_Config>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf22:	e00f      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf28:	3328      	adds	r3, #40	@ 0x28
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f002 fa9d 	bl	800f46c <RCCEx_PLL3_Config>
 800cf32:	4603      	mov	r3, r0
 800cf34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf38:	e004      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf40:	e000      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cf42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf4c:	4b6e      	ldr	r3, [pc, #440]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf50:	f023 0107 	bic.w	r1, r3, #7
 800cf54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf5a:	4a6b      	ldr	r2, [pc, #428]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf5c:	430b      	orrs	r3, r1
 800cf5e:	6513      	str	r3, [r2, #80]	@ 0x50
 800cf60:	e003      	b.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cf6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800cf76:	f04f 0b00 	mov.w	fp, #0
 800cf7a:	ea5a 030b 	orrs.w	r3, sl, fp
 800cf7e:	d05b      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cf88:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cf8c:	d03b      	beq.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800cf8e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cf92:	d834      	bhi.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cf94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf98:	d037      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800cf9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf9e:	d82e      	bhi.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cfa0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfa4:	d033      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800cfa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfaa:	d828      	bhi.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cfac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfb0:	d01a      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800cfb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfb6:	d822      	bhi.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800cfbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cfc0:	d007      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800cfc2:	e01c      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfc4:	4b50      	ldr	r3, [pc, #320]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc8:	4a4f      	ldr	r2, [pc, #316]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cfca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cfd0:	e01e      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	2100      	movs	r1, #0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f002 f994 	bl	800f308 <RCCEx_PLL2_Config>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cfe6:	e013      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfec:	3328      	adds	r3, #40	@ 0x28
 800cfee:	2100      	movs	r1, #0
 800cff0:	4618      	mov	r0, r3
 800cff2:	f002 fa3b 	bl	800f46c <RCCEx_PLL3_Config>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cffc:	e008      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d004:	e004      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d006:	bf00      	nop
 800d008:	e002      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d00a:	bf00      	nop
 800d00c:	e000      	b.n	800d010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d00e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10b      	bne.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d018:	4b3b      	ldr	r3, [pc, #236]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d01a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d01c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d028:	4a37      	ldr	r2, [pc, #220]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d02a:	430b      	orrs	r3, r1
 800d02c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d02e:	e003      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d048:	2300      	movs	r3, #0
 800d04a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d04e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d052:	460b      	mov	r3, r1
 800d054:	4313      	orrs	r3, r2
 800d056:	d05d      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d05c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d060:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d064:	d03b      	beq.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800d066:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d06a:	d834      	bhi.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d06c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d070:	d037      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d076:	d82e      	bhi.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d07c:	d033      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800d07e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d082:	d828      	bhi.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d088:	d01a      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800d08a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d08e:	d822      	bhi.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800d094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d098:	d007      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800d09a:	e01c      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d09c:	4b1a      	ldr	r3, [pc, #104]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a0:	4a19      	ldr	r2, [pc, #100]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d0a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d0a8:	e01e      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f002 f928 	bl	800f308 <RCCEx_PLL2_Config>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d0be:	e013      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0c4:	3328      	adds	r3, #40	@ 0x28
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f002 f9cf 	bl	800f46c <RCCEx_PLL3_Config>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d0d4:	e008      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0dc:	e004      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d0de:	bf00      	nop
 800d0e0:	e002      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d0e2:	bf00      	nop
 800d0e4:	e000      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d0e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10d      	bne.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d0f0:	4b05      	ldr	r3, [pc, #20]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d0f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d100:	4a01      	ldr	r2, [pc, #4]	@ (800d108 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d102:	430b      	orrs	r3, r1
 800d104:	6593      	str	r3, [r2, #88]	@ 0x58
 800d106:	e005      	b.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800d108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d10c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d110:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d120:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d124:	2300      	movs	r3, #0
 800d126:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d12a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d12e:	460b      	mov	r3, r1
 800d130:	4313      	orrs	r3, r2
 800d132:	d03a      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800d134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d13a:	2b30      	cmp	r3, #48	@ 0x30
 800d13c:	d01f      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800d13e:	2b30      	cmp	r3, #48	@ 0x30
 800d140:	d819      	bhi.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d142:	2b20      	cmp	r3, #32
 800d144:	d00c      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800d146:	2b20      	cmp	r3, #32
 800d148:	d815      	bhi.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d019      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d14e:	2b10      	cmp	r3, #16
 800d150:	d111      	bne.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d152:	4baa      	ldr	r3, [pc, #680]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d156:	4aa9      	ldr	r2, [pc, #676]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d15e:	e011      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d164:	3308      	adds	r3, #8
 800d166:	2102      	movs	r1, #2
 800d168:	4618      	mov	r0, r3
 800d16a:	f002 f8cd 	bl	800f308 <RCCEx_PLL2_Config>
 800d16e:	4603      	mov	r3, r0
 800d170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d174:	e006      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d17c:	e002      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800d17e:	bf00      	nop
 800d180:	e000      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800d182:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d18c:	4b9b      	ldr	r3, [pc, #620]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d190:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d19a:	4a98      	ldr	r2, [pc, #608]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d19c:	430b      	orrs	r3, r1
 800d19e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d1a0:	e003      	b.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d1b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d1c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	d051      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1d4:	d035      	beq.n	800d242 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800d1d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1da:	d82e      	bhi.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d1dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1e0:	d031      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800d1e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1e6:	d828      	bhi.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d1e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1ec:	d01a      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1f2:	d822      	bhi.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d003      	beq.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800d1f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1fc:	d007      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800d1fe:	e01c      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d200:	4b7e      	ldr	r3, [pc, #504]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d204:	4a7d      	ldr	r2, [pc, #500]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d20a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d20c:	e01c      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d212:	3308      	adds	r3, #8
 800d214:	2100      	movs	r1, #0
 800d216:	4618      	mov	r0, r3
 800d218:	f002 f876 	bl	800f308 <RCCEx_PLL2_Config>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d222:	e011      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d228:	3328      	adds	r3, #40	@ 0x28
 800d22a:	2100      	movs	r1, #0
 800d22c:	4618      	mov	r0, r3
 800d22e:	f002 f91d 	bl	800f46c <RCCEx_PLL3_Config>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d238:	e006      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d240:	e002      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d242:	bf00      	nop
 800d244:	e000      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d250:	4b6a      	ldr	r3, [pc, #424]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d254:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d25e:	4a67      	ldr	r2, [pc, #412]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d260:	430b      	orrs	r3, r1
 800d262:	6513      	str	r3, [r2, #80]	@ 0x50
 800d264:	e003      	b.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d266:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d26a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d27a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d27e:	2300      	movs	r3, #0
 800d280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d284:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d288:	460b      	mov	r3, r1
 800d28a:	4313      	orrs	r3, r2
 800d28c:	d053      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d298:	d033      	beq.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800d29a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d29e:	d82c      	bhi.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d2a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d2a4:	d02f      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800d2a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d2aa:	d826      	bhi.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d2ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d2b0:	d02b      	beq.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800d2b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d2b6:	d820      	bhi.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2bc:	d012      	beq.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800d2be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2c2:	d81a      	bhi.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d022      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800d2c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2cc:	d115      	bne.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f002 f816 	bl	800f308 <RCCEx_PLL2_Config>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d2e2:	e015      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e8:	3328      	adds	r3, #40	@ 0x28
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f002 f8bd 	bl	800f46c <RCCEx_PLL3_Config>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d2f8:	e00a      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d300:	e006      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d302:	bf00      	nop
 800d304:	e004      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d306:	bf00      	nop
 800d308:	e002      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d30a:	bf00      	nop
 800d30c:	e000      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d30e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d318:	4b38      	ldr	r3, [pc, #224]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d31a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d31c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d326:	4a35      	ldr	r2, [pc, #212]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d328:	430b      	orrs	r3, r1
 800d32a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d32c:	e003      	b.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d346:	2300      	movs	r3, #0
 800d348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d34c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d350:	460b      	mov	r3, r1
 800d352:	4313      	orrs	r3, r2
 800d354:	d058      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d35e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d362:	d033      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800d364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d368:	d82c      	bhi.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d36a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d36e:	d02f      	beq.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800d370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d374:	d826      	bhi.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d37a:	d02b      	beq.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800d37c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d380:	d820      	bhi.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d386:	d012      	beq.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d38c:	d81a      	bhi.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d022      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d396:	d115      	bne.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d39c:	3308      	adds	r3, #8
 800d39e:	2101      	movs	r1, #1
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f001 ffb1 	bl	800f308 <RCCEx_PLL2_Config>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d3ac:	e015      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b2:	3328      	adds	r3, #40	@ 0x28
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f002 f858 	bl	800f46c <RCCEx_PLL3_Config>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d3c2:	e00a      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d3ca:	e006      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d3cc:	bf00      	nop
 800d3ce:	e004      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d3d0:	bf00      	nop
 800d3d2:	e002      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d3d4:	bf00      	nop
 800d3d6:	e000      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d3d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10e      	bne.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d3e2:	4b06      	ldr	r3, [pc, #24]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d3f2:	4a02      	ldr	r2, [pc, #8]	@ (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d3f4:	430b      	orrs	r3, r1
 800d3f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3f8:	e006      	b.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d3fa:	bf00      	nop
 800d3fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d404:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d410:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d41e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d422:	460b      	mov	r3, r1
 800d424:	4313      	orrs	r3, r2
 800d426:	d037      	beq.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d42c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d42e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d432:	d00e      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800d434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d438:	d816      	bhi.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d018      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d43e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d442:	d111      	bne.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d444:	4bc4      	ldr	r3, [pc, #784]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d448:	4ac3      	ldr	r2, [pc, #780]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d44a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d44e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d450:	e00f      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d456:	3308      	adds	r3, #8
 800d458:	2101      	movs	r1, #1
 800d45a:	4618      	mov	r0, r3
 800d45c:	f001 ff54 	bl	800f308 <RCCEx_PLL2_Config>
 800d460:	4603      	mov	r3, r0
 800d462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d466:	e004      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d46e:	e000      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800d470:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d476:	2b00      	cmp	r3, #0
 800d478:	d10a      	bne.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d47a:	4bb7      	ldr	r3, [pc, #732]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d47e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d488:	4ab3      	ldr	r2, [pc, #716]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d48a:	430b      	orrs	r3, r1
 800d48c:	6513      	str	r3, [r2, #80]	@ 0x50
 800d48e:	e003      	b.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d4a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d4ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	d039      	beq.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d81c      	bhi.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800d4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c8:	0800d505 	.word	0x0800d505
 800d4cc:	0800d4d9 	.word	0x0800d4d9
 800d4d0:	0800d4e7 	.word	0x0800d4e7
 800d4d4:	0800d505 	.word	0x0800d505
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4d8:	4b9f      	ldr	r3, [pc, #636]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4dc:	4a9e      	ldr	r2, [pc, #632]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d4de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d4e4:	e00f      	b.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	2102      	movs	r1, #2
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f001 ff0a 	bl	800f308 <RCCEx_PLL2_Config>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d4fa:	e004      	b.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d502:	e000      	b.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800d504:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10a      	bne.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d50e:	4b92      	ldr	r3, [pc, #584]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d512:	f023 0103 	bic.w	r1, r3, #3
 800d516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d51c:	4a8e      	ldr	r2, [pc, #568]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d51e:	430b      	orrs	r3, r1
 800d520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d522:	e003      	b.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d53c:	2300      	movs	r3, #0
 800d53e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d542:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d546:	460b      	mov	r3, r1
 800d548:	4313      	orrs	r3, r2
 800d54a:	f000 8099 	beq.w	800d680 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d54e:	4b83      	ldr	r3, [pc, #524]	@ (800d75c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a82      	ldr	r2, [pc, #520]	@ (800d75c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d55a:	f7f8 fe25 	bl	80061a8 <HAL_GetTick>
 800d55e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d562:	e00b      	b.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d564:	f7f8 fe20 	bl	80061a8 <HAL_GetTick>
 800d568:	4602      	mov	r2, r0
 800d56a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	2b64      	cmp	r3, #100	@ 0x64
 800d572:	d903      	bls.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d57a:	e005      	b.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d57c:	4b77      	ldr	r3, [pc, #476]	@ (800d75c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0ed      	beq.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800d588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d173      	bne.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d590:	4b71      	ldr	r3, [pc, #452]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d592:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d59c:	4053      	eors	r3, r2
 800d59e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d015      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d5a6:	4b6c      	ldr	r3, [pc, #432]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d5b2:	4b69      	ldr	r3, [pc, #420]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5b6:	4a68      	ldr	r2, [pc, #416]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d5be:	4b66      	ldr	r3, [pc, #408]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5c2:	4a65      	ldr	r2, [pc, #404]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d5ca:	4a63      	ldr	r2, [pc, #396]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d5d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d5da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5de:	d118      	bne.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e0:	f7f8 fde2 	bl	80061a8 <HAL_GetTick>
 800d5e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d5e8:	e00d      	b.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5ea:	f7f8 fddd 	bl	80061a8 <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d5f4:	1ad2      	subs	r2, r2, r3
 800d5f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d903      	bls.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800d604:	e005      	b.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d606:	4b54      	ldr	r3, [pc, #336]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d60a:	f003 0302 	and.w	r3, r3, #2
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d0eb      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800d612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d616:	2b00      	cmp	r3, #0
 800d618:	d129      	bne.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d62a:	d10e      	bne.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800d62c:	4b4a      	ldr	r3, [pc, #296]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d63c:	091a      	lsrs	r2, r3, #4
 800d63e:	4b48      	ldr	r3, [pc, #288]	@ (800d760 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d640:	4013      	ands	r3, r2
 800d642:	4a45      	ldr	r2, [pc, #276]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d644:	430b      	orrs	r3, r1
 800d646:	6113      	str	r3, [r2, #16]
 800d648:	e005      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800d64a:	4b43      	ldr	r3, [pc, #268]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	4a42      	ldr	r2, [pc, #264]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d650:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d654:	6113      	str	r3, [r2, #16]
 800d656:	4b40      	ldr	r3, [pc, #256]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d658:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d65e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d666:	4a3c      	ldr	r2, [pc, #240]	@ (800d758 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d668:	430b      	orrs	r3, r1
 800d66a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d66c:	e008      	b.n	800d680 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d66e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d672:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800d676:	e003      	b.n	800d680 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d67c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f002 0301 	and.w	r3, r2, #1
 800d68c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d690:	2300      	movs	r3, #0
 800d692:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d696:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d69a:	460b      	mov	r3, r1
 800d69c:	4313      	orrs	r3, r2
 800d69e:	f000 808f 	beq.w	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6a8:	2b28      	cmp	r3, #40	@ 0x28
 800d6aa:	d871      	bhi.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b2:	bf00      	nop
 800d6b4:	0800d799 	.word	0x0800d799
 800d6b8:	0800d791 	.word	0x0800d791
 800d6bc:	0800d791 	.word	0x0800d791
 800d6c0:	0800d791 	.word	0x0800d791
 800d6c4:	0800d791 	.word	0x0800d791
 800d6c8:	0800d791 	.word	0x0800d791
 800d6cc:	0800d791 	.word	0x0800d791
 800d6d0:	0800d791 	.word	0x0800d791
 800d6d4:	0800d765 	.word	0x0800d765
 800d6d8:	0800d791 	.word	0x0800d791
 800d6dc:	0800d791 	.word	0x0800d791
 800d6e0:	0800d791 	.word	0x0800d791
 800d6e4:	0800d791 	.word	0x0800d791
 800d6e8:	0800d791 	.word	0x0800d791
 800d6ec:	0800d791 	.word	0x0800d791
 800d6f0:	0800d791 	.word	0x0800d791
 800d6f4:	0800d77b 	.word	0x0800d77b
 800d6f8:	0800d791 	.word	0x0800d791
 800d6fc:	0800d791 	.word	0x0800d791
 800d700:	0800d791 	.word	0x0800d791
 800d704:	0800d791 	.word	0x0800d791
 800d708:	0800d791 	.word	0x0800d791
 800d70c:	0800d791 	.word	0x0800d791
 800d710:	0800d791 	.word	0x0800d791
 800d714:	0800d799 	.word	0x0800d799
 800d718:	0800d791 	.word	0x0800d791
 800d71c:	0800d791 	.word	0x0800d791
 800d720:	0800d791 	.word	0x0800d791
 800d724:	0800d791 	.word	0x0800d791
 800d728:	0800d791 	.word	0x0800d791
 800d72c:	0800d791 	.word	0x0800d791
 800d730:	0800d791 	.word	0x0800d791
 800d734:	0800d799 	.word	0x0800d799
 800d738:	0800d791 	.word	0x0800d791
 800d73c:	0800d791 	.word	0x0800d791
 800d740:	0800d791 	.word	0x0800d791
 800d744:	0800d791 	.word	0x0800d791
 800d748:	0800d791 	.word	0x0800d791
 800d74c:	0800d791 	.word	0x0800d791
 800d750:	0800d791 	.word	0x0800d791
 800d754:	0800d799 	.word	0x0800d799
 800d758:	58024400 	.word	0x58024400
 800d75c:	58024800 	.word	0x58024800
 800d760:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d768:	3308      	adds	r3, #8
 800d76a:	2101      	movs	r1, #1
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 fdcb 	bl	800f308 <RCCEx_PLL2_Config>
 800d772:	4603      	mov	r3, r0
 800d774:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d778:	e00f      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d77e:	3328      	adds	r3, #40	@ 0x28
 800d780:	2101      	movs	r1, #1
 800d782:	4618      	mov	r0, r3
 800d784:	f001 fe72 	bl	800f46c <RCCEx_PLL3_Config>
 800d788:	4603      	mov	r3, r0
 800d78a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d78e:	e004      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d796:	e000      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d79a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10a      	bne.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d7a2:	4bbf      	ldr	r3, [pc, #764]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7b0:	4abb      	ldr	r2, [pc, #748]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d7b2:	430b      	orrs	r3, r1
 800d7b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800d7b6:	e003      	b.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	f002 0302 	and.w	r3, r2, #2
 800d7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	d041      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7e6:	2b05      	cmp	r3, #5
 800d7e8:	d824      	bhi.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800d7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800d7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f0:	0800d83d 	.word	0x0800d83d
 800d7f4:	0800d809 	.word	0x0800d809
 800d7f8:	0800d81f 	.word	0x0800d81f
 800d7fc:	0800d83d 	.word	0x0800d83d
 800d800:	0800d83d 	.word	0x0800d83d
 800d804:	0800d83d 	.word	0x0800d83d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d80c:	3308      	adds	r3, #8
 800d80e:	2101      	movs	r1, #1
 800d810:	4618      	mov	r0, r3
 800d812:	f001 fd79 	bl	800f308 <RCCEx_PLL2_Config>
 800d816:	4603      	mov	r3, r0
 800d818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d81c:	e00f      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d822:	3328      	adds	r3, #40	@ 0x28
 800d824:	2101      	movs	r1, #1
 800d826:	4618      	mov	r0, r3
 800d828:	f001 fe20 	bl	800f46c <RCCEx_PLL3_Config>
 800d82c:	4603      	mov	r3, r0
 800d82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d832:	e004      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d83a:	e000      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800d83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d83e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10a      	bne.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d846:	4b96      	ldr	r3, [pc, #600]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d84a:	f023 0107 	bic.w	r1, r3, #7
 800d84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d854:	4a92      	ldr	r2, [pc, #584]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d856:	430b      	orrs	r3, r1
 800d858:	6553      	str	r3, [r2, #84]	@ 0x54
 800d85a:	e003      	b.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d85c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f002 0304 	and.w	r3, r2, #4
 800d870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d874:	2300      	movs	r3, #0
 800d876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d87a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d87e:	460b      	mov	r3, r1
 800d880:	4313      	orrs	r3, r2
 800d882:	d044      	beq.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d88c:	2b05      	cmp	r3, #5
 800d88e:	d825      	bhi.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d890:	a201      	add	r2, pc, #4	@ (adr r2, 800d898 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d896:	bf00      	nop
 800d898:	0800d8e5 	.word	0x0800d8e5
 800d89c:	0800d8b1 	.word	0x0800d8b1
 800d8a0:	0800d8c7 	.word	0x0800d8c7
 800d8a4:	0800d8e5 	.word	0x0800d8e5
 800d8a8:	0800d8e5 	.word	0x0800d8e5
 800d8ac:	0800d8e5 	.word	0x0800d8e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f001 fd25 	bl	800f308 <RCCEx_PLL2_Config>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d8c4:	e00f      	b.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ca:	3328      	adds	r3, #40	@ 0x28
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fdcc 	bl	800f46c <RCCEx_PLL3_Config>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d8da:	e004      	b.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d8e2:	e000      	b.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10b      	bne.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d8ee:	4b6c      	ldr	r3, [pc, #432]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8f2:	f023 0107 	bic.w	r1, r3, #7
 800d8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8fe:	4a68      	ldr	r2, [pc, #416]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d900:	430b      	orrs	r3, r1
 800d902:	6593      	str	r3, [r2, #88]	@ 0x58
 800d904:	e003      	b.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d90a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	f002 0320 	and.w	r3, r2, #32
 800d91a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d91e:	2300      	movs	r3, #0
 800d920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d924:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d928:	460b      	mov	r3, r1
 800d92a:	4313      	orrs	r3, r2
 800d92c:	d055      	beq.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d93a:	d033      	beq.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d93c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d940:	d82c      	bhi.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d946:	d02f      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d94c:	d826      	bhi.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d94e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d952:	d02b      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d958:	d820      	bhi.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d95a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d95e:	d012      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d964:	d81a      	bhi.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d022      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d96a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d96e:	d115      	bne.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d974:	3308      	adds	r3, #8
 800d976:	2100      	movs	r1, #0
 800d978:	4618      	mov	r0, r3
 800d97a:	f001 fcc5 	bl	800f308 <RCCEx_PLL2_Config>
 800d97e:	4603      	mov	r3, r0
 800d980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d984:	e015      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d98a:	3328      	adds	r3, #40	@ 0x28
 800d98c:	2102      	movs	r1, #2
 800d98e:	4618      	mov	r0, r3
 800d990:	f001 fd6c 	bl	800f46c <RCCEx_PLL3_Config>
 800d994:	4603      	mov	r3, r0
 800d996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d99a:	e00a      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d9a2:	e006      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d9a4:	bf00      	nop
 800d9a6:	e004      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d9a8:	bf00      	nop
 800d9aa:	e002      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d9ac:	bf00      	nop
 800d9ae:	e000      	b.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10b      	bne.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d9ba:	4b39      	ldr	r3, [pc, #228]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d9ca:	4a35      	ldr	r2, [pc, #212]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d9cc:	430b      	orrs	r3, r1
 800d9ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800d9d0:	e003      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d9e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	d058      	beq.n	800daac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800da06:	d033      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800da08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800da0c:	d82c      	bhi.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800da0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da12:	d02f      	beq.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800da14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da18:	d826      	bhi.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800da1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800da1e:	d02b      	beq.n	800da78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800da20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800da24:	d820      	bhi.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800da26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da2a:	d012      	beq.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800da2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da30:	d81a      	bhi.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800da32:	2b00      	cmp	r3, #0
 800da34:	d022      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800da36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da3a:	d115      	bne.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da40:	3308      	adds	r3, #8
 800da42:	2100      	movs	r1, #0
 800da44:	4618      	mov	r0, r3
 800da46:	f001 fc5f 	bl	800f308 <RCCEx_PLL2_Config>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800da50:	e015      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da56:	3328      	adds	r3, #40	@ 0x28
 800da58:	2102      	movs	r1, #2
 800da5a:	4618      	mov	r0, r3
 800da5c:	f001 fd06 	bl	800f46c <RCCEx_PLL3_Config>
 800da60:	4603      	mov	r3, r0
 800da62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800da66:	e00a      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800da6e:	e006      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800da70:	bf00      	nop
 800da72:	e004      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800da74:	bf00      	nop
 800da76:	e002      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800da78:	bf00      	nop
 800da7a:	e000      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800da7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10e      	bne.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800da86:	4b06      	ldr	r3, [pc, #24]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800da88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800da8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da96:	4a02      	ldr	r2, [pc, #8]	@ (800daa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800da98:	430b      	orrs	r3, r1
 800da9a:	6593      	str	r3, [r2, #88]	@ 0x58
 800da9c:	e006      	b.n	800daac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800da9e:	bf00      	nop
 800daa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800daa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800daac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800dab8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dabc:	2300      	movs	r3, #0
 800dabe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dac2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800dac6:	460b      	mov	r3, r1
 800dac8:	4313      	orrs	r3, r2
 800daca:	d055      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800dacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dad4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800dad8:	d033      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800dada:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800dade:	d82c      	bhi.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800dae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dae4:	d02f      	beq.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800dae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800daea:	d826      	bhi.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800daec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800daf0:	d02b      	beq.n	800db4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800daf2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800daf6:	d820      	bhi.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800daf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dafc:	d012      	beq.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800dafe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db02:	d81a      	bhi.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800db04:	2b00      	cmp	r3, #0
 800db06:	d022      	beq.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800db08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db0c:	d115      	bne.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db12:	3308      	adds	r3, #8
 800db14:	2100      	movs	r1, #0
 800db16:	4618      	mov	r0, r3
 800db18:	f001 fbf6 	bl	800f308 <RCCEx_PLL2_Config>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800db22:	e015      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db28:	3328      	adds	r3, #40	@ 0x28
 800db2a:	2102      	movs	r1, #2
 800db2c:	4618      	mov	r0, r3
 800db2e:	f001 fc9d 	bl	800f46c <RCCEx_PLL3_Config>
 800db32:	4603      	mov	r3, r0
 800db34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800db38:	e00a      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800db40:	e006      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800db42:	bf00      	nop
 800db44:	e004      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800db46:	bf00      	nop
 800db48:	e002      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800db4a:	bf00      	nop
 800db4c:	e000      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800db4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10b      	bne.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800db58:	4ba0      	ldr	r3, [pc, #640]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800db60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db68:	4a9c      	ldr	r2, [pc, #624]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db6a:	430b      	orrs	r3, r1
 800db6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800db6e:	e003      	b.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800db78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f002 0308 	and.w	r3, r2, #8
 800db84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db88:	2300      	movs	r3, #0
 800db8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800db92:	460b      	mov	r3, r1
 800db94:	4313      	orrs	r3, r2
 800db96:	d01e      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800db98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dba4:	d10c      	bne.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbaa:	3328      	adds	r3, #40	@ 0x28
 800dbac:	2102      	movs	r1, #2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 fc5c 	bl	800f46c <RCCEx_PLL3_Config>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d002      	beq.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800dbc0:	4b86      	ldr	r3, [pc, #536]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dbc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbd0:	4a82      	ldr	r2, [pc, #520]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dbd2:	430b      	orrs	r3, r1
 800dbd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	f002 0310 	and.w	r3, r2, #16
 800dbe2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	d01e      	beq.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800dbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc02:	d10c      	bne.n	800dc1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc08:	3328      	adds	r3, #40	@ 0x28
 800dc0a:	2102      	movs	r1, #2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f001 fc2d 	bl	800f46c <RCCEx_PLL3_Config>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dc1e:	4b6f      	ldr	r3, [pc, #444]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dc20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc2e:	4a6b      	ldr	r2, [pc, #428]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dc30:	430b      	orrs	r3, r1
 800dc32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dc40:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc42:	2300      	movs	r3, #0
 800dc44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	d03e      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800dc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc5c:	d022      	beq.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800dc5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc62:	d81b      	bhi.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d003      	beq.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800dc68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc6c:	d00b      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800dc6e:	e015      	b.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc74:	3308      	adds	r3, #8
 800dc76:	2100      	movs	r1, #0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 fb45 	bl	800f308 <RCCEx_PLL2_Config>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dc84:	e00f      	b.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc8a:	3328      	adds	r3, #40	@ 0x28
 800dc8c:	2102      	movs	r1, #2
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f001 fbec 	bl	800f46c <RCCEx_PLL3_Config>
 800dc94:	4603      	mov	r3, r0
 800dc96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dc9a:	e004      	b.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dca2:	e000      	b.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800dca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dcae:	4b4b      	ldr	r3, [pc, #300]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dcb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800dcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dcbe:	4a47      	ldr	r2, [pc, #284]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dcc0:	430b      	orrs	r3, r1
 800dcc2:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcc4:	e003      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800dcda:	673b      	str	r3, [r7, #112]	@ 0x70
 800dcdc:	2300      	movs	r3, #0
 800dcde:	677b      	str	r3, [r7, #116]	@ 0x74
 800dce0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800dce4:	460b      	mov	r3, r1
 800dce6:	4313      	orrs	r3, r2
 800dce8:	d03b      	beq.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800dcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dcf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcf6:	d01f      	beq.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800dcf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcfc:	d818      	bhi.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800dcfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd02:	d003      	beq.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800dd04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd08:	d007      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800dd0a:	e011      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd0c:	4b33      	ldr	r3, [pc, #204]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	4a32      	ldr	r2, [pc, #200]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dd18:	e00f      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd1e:	3328      	adds	r3, #40	@ 0x28
 800dd20:	2101      	movs	r1, #1
 800dd22:	4618      	mov	r0, r3
 800dd24:	f001 fba2 	bl	800f46c <RCCEx_PLL3_Config>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800dd2e:	e004      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dd36:	e000      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800dd38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10b      	bne.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dd42:	4b26      	ldr	r3, [pc, #152]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd52:	4a22      	ldr	r2, [pc, #136]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd54:	430b      	orrs	r3, r1
 800dd56:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd58:	e003      	b.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800dd6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd70:	2300      	movs	r3, #0
 800dd72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	d034      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d003      	beq.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800dd88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd8c:	d007      	beq.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800dd8e:	e011      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd90:	4b12      	ldr	r3, [pc, #72]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd94:	4a11      	ldr	r2, [pc, #68]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dd9c:	e00e      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dda2:	3308      	adds	r3, #8
 800dda4:	2102      	movs	r1, #2
 800dda6:	4618      	mov	r0, r3
 800dda8:	f001 faae 	bl	800f308 <RCCEx_PLL2_Config>
 800ddac:	4603      	mov	r3, r0
 800ddae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ddb2:	e003      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ddba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10d      	bne.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ddc4:	4b05      	ldr	r3, [pc, #20]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ddc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ddcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd2:	4a02      	ldr	r2, [pc, #8]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ddd4:	430b      	orrs	r3, r1
 800ddd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ddd8:	e006      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ddda:	bf00      	nop
 800dddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dde0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dde4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dde8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ddf4:	663b      	str	r3, [r7, #96]	@ 0x60
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ddfa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ddfe:	460b      	mov	r3, r1
 800de00:	4313      	orrs	r3, r2
 800de02:	d00c      	beq.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800de04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de08:	3328      	adds	r3, #40	@ 0x28
 800de0a:	2102      	movs	r1, #2
 800de0c:	4618      	mov	r0, r3
 800de0e:	f001 fb2d 	bl	800f46c <RCCEx_PLL3_Config>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800de2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de2c:	2300      	movs	r3, #0
 800de2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de30:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800de34:	460b      	mov	r3, r1
 800de36:	4313      	orrs	r3, r2
 800de38:	d036      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800de3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de44:	d018      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800de46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de4a:	d811      	bhi.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800de4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de50:	d014      	beq.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800de52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de56:	d80b      	bhi.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d011      	beq.n	800de80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800de5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de60:	d106      	bne.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de62:	4bb7      	ldr	r3, [pc, #732]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800de64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de66:	4ab6      	ldr	r2, [pc, #728]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800de68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800de6e:	e008      	b.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800de76:	e004      	b.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800de78:	bf00      	nop
 800de7a:	e002      	b.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800de7c:	bf00      	nop
 800de7e:	e000      	b.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800de80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10a      	bne.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800de8a:	4bad      	ldr	r3, [pc, #692]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800de8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800de92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de98:	4aa9      	ldr	r2, [pc, #676]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800de9a:	430b      	orrs	r3, r1
 800de9c:	6553      	str	r3, [r2, #84]	@ 0x54
 800de9e:	e003      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800deb4:	653b      	str	r3, [r7, #80]	@ 0x50
 800deb6:	2300      	movs	r3, #0
 800deb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800deba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800debe:	460b      	mov	r3, r1
 800dec0:	4313      	orrs	r3, r2
 800dec2:	d009      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dec4:	4b9e      	ldr	r3, [pc, #632]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dec8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800decc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ded0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ded2:	4a9b      	ldr	r2, [pc, #620]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ded4:	430b      	orrs	r3, r1
 800ded6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ded8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dee6:	2300      	movs	r3, #0
 800dee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800deea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800deee:	460b      	mov	r3, r1
 800def0:	4313      	orrs	r3, r2
 800def2:	d009      	beq.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800def4:	4b92      	ldr	r3, [pc, #584]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800def6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800defc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df02:	4a8f      	ldr	r2, [pc, #572]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df04:	430b      	orrs	r3, r1
 800df06:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800df08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800df14:	643b      	str	r3, [r7, #64]	@ 0x40
 800df16:	2300      	movs	r3, #0
 800df18:	647b      	str	r3, [r7, #68]	@ 0x44
 800df1a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800df1e:	460b      	mov	r3, r1
 800df20:	4313      	orrs	r3, r2
 800df22:	d00e      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800df24:	4b86      	ldr	r3, [pc, #536]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	4a85      	ldr	r2, [pc, #532]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800df2e:	6113      	str	r3, [r2, #16]
 800df30:	4b83      	ldr	r3, [pc, #524]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df32:	6919      	ldr	r1, [r3, #16]
 800df34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800df3c:	4a80      	ldr	r2, [pc, #512]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df3e:	430b      	orrs	r3, r1
 800df40:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800df42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800df4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df50:	2300      	movs	r3, #0
 800df52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df54:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800df58:	460b      	mov	r3, r1
 800df5a:	4313      	orrs	r3, r2
 800df5c:	d009      	beq.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800df5e:	4b78      	ldr	r3, [pc, #480]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800df66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df6c:	4a74      	ldr	r2, [pc, #464]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df6e:	430b      	orrs	r3, r1
 800df70:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800df72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800df7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800df80:	2300      	movs	r3, #0
 800df82:	637b      	str	r3, [r7, #52]	@ 0x34
 800df84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800df88:	460b      	mov	r3, r1
 800df8a:	4313      	orrs	r3, r2
 800df8c:	d00a      	beq.n	800dfa4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800df8e:	4b6c      	ldr	r3, [pc, #432]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800df90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df92:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800df96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df9e:	4a68      	ldr	r2, [pc, #416]	@ (800e140 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dfa0:	430b      	orrs	r3, r1
 800dfa2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	2100      	movs	r1, #0
 800dfae:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfb6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	d011      	beq.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfc4:	3308      	adds	r3, #8
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f001 f99d 	bl	800f308 <RCCEx_PLL2_Config>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800dfd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dfe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	2100      	movs	r1, #0
 800dfee:	6239      	str	r1, [r7, #32]
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dff6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dffa:	460b      	mov	r3, r1
 800dffc:	4313      	orrs	r3, r2
 800dffe:	d011      	beq.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e004:	3308      	adds	r3, #8
 800e006:	2101      	movs	r1, #1
 800e008:	4618      	mov	r0, r3
 800e00a:	f001 f97d 	bl	800f308 <RCCEx_PLL2_Config>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d003      	beq.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e01c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	2100      	movs	r1, #0
 800e02e:	61b9      	str	r1, [r7, #24]
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	61fb      	str	r3, [r7, #28]
 800e036:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e03a:	460b      	mov	r3, r1
 800e03c:	4313      	orrs	r3, r2
 800e03e:	d011      	beq.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e044:	3308      	adds	r3, #8
 800e046:	2102      	movs	r1, #2
 800e048:	4618      	mov	r0, r3
 800e04a:	f001 f95d 	bl	800f308 <RCCEx_PLL2_Config>
 800e04e:	4603      	mov	r3, r0
 800e050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d003      	beq.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06c:	2100      	movs	r1, #0
 800e06e:	6139      	str	r1, [r7, #16]
 800e070:	f003 0308 	and.w	r3, r3, #8
 800e074:	617b      	str	r3, [r7, #20]
 800e076:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e07a:	460b      	mov	r3, r1
 800e07c:	4313      	orrs	r3, r2
 800e07e:	d011      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e084:	3328      	adds	r3, #40	@ 0x28
 800e086:	2100      	movs	r1, #0
 800e088:	4618      	mov	r0, r3
 800e08a:	f001 f9ef 	bl	800f46c <RCCEx_PLL3_Config>
 800e08e:	4603      	mov	r3, r0
 800e090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800e094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e09c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	60b9      	str	r1, [r7, #8]
 800e0b0:	f003 0310 	and.w	r3, r3, #16
 800e0b4:	60fb      	str	r3, [r7, #12]
 800e0b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	d011      	beq.n	800e0e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c4:	3328      	adds	r3, #40	@ 0x28
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f001 f9cf 	bl	800f46c <RCCEx_PLL3_Config>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e0d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d003      	beq.n	800e0e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	6039      	str	r1, [r7, #0]
 800e0f0:	f003 0320 	and.w	r3, r3, #32
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	d011      	beq.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e104:	3328      	adds	r3, #40	@ 0x28
 800e106:	2102      	movs	r1, #2
 800e108:	4618      	mov	r0, r3
 800e10a:	f001 f9af 	bl	800f46c <RCCEx_PLL3_Config>
 800e10e:	4603      	mov	r3, r0
 800e110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e11c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800e124:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e000      	b.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800e130:	2301      	movs	r3, #1
}
 800e132:	4618      	mov	r0, r3
 800e134:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800e138:	46bd      	mov	sp, r7
 800e13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e13e:	bf00      	nop
 800e140:	58024400 	.word	0x58024400

0800e144 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b090      	sub	sp, #64	@ 0x40
 800e148:	af00      	add	r7, sp, #0
 800e14a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e14e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e152:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800e156:	430b      	orrs	r3, r1
 800e158:	f040 8094 	bne.w	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e15c:	4b9b      	ldr	r3, [pc, #620]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e15e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e160:	f003 0307 	and.w	r3, r3, #7
 800e164:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	2b04      	cmp	r3, #4
 800e16a:	f200 8087 	bhi.w	800e27c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e16e:	a201      	add	r2, pc, #4	@ (adr r2, 800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e189 	.word	0x0800e189
 800e178:	0800e1b1 	.word	0x0800e1b1
 800e17c:	0800e1d9 	.word	0x0800e1d9
 800e180:	0800e275 	.word	0x0800e275
 800e184:	0800e201 	.word	0x0800e201
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e188:	4b90      	ldr	r3, [pc, #576]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e194:	d108      	bne.n	800e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 ff62 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1a4:	f000 bc93 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1ac:	f000 bc8f 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1b0:	4b86      	ldr	r3, [pc, #536]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1bc:	d108      	bne.n	800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1be:	f107 0318 	add.w	r3, r7, #24
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 fca6 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1cc:	f000 bc7f 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1d4:	f000 bc7b 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e1d8:	4b7c      	ldr	r3, [pc, #496]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e1e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1e4:	d108      	bne.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1e6:	f107 030c 	add.w	r3, r7, #12
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f000 fde6 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1f4:	f000 bc6b 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1fc:	f000 bc67 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e200:	4b72      	ldr	r3, [pc, #456]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e208:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e20a:	4b70      	ldr	r3, [pc, #448]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	2b04      	cmp	r3, #4
 800e214:	d10c      	bne.n	800e230 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d109      	bne.n	800e230 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e21c:	4b6b      	ldr	r3, [pc, #428]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	08db      	lsrs	r3, r3, #3
 800e222:	f003 0303 	and.w	r3, r3, #3
 800e226:	4a6a      	ldr	r2, [pc, #424]	@ (800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e228:	fa22 f303 	lsr.w	r3, r2, r3
 800e22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e22e:	e01f      	b.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e230:	4b66      	ldr	r3, [pc, #408]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e23c:	d106      	bne.n	800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e244:	d102      	bne.n	800e24c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e246:	4b63      	ldr	r3, [pc, #396]	@ (800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e24a:	e011      	b.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e24c:	4b5f      	ldr	r3, [pc, #380]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e258:	d106      	bne.n	800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e260:	d102      	bne.n	800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e262:	4b5d      	ldr	r3, [pc, #372]	@ (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e266:	e003      	b.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e26c:	f000 bc2f 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e270:	f000 bc2d 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e274:	4b59      	ldr	r3, [pc, #356]	@ (800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e278:	f000 bc29 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e280:	f000 bc25 	b.w	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e288:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e28c:	430b      	orrs	r3, r1
 800e28e:	f040 80a7 	bne.w	800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e292:	4b4e      	ldr	r3, [pc, #312]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e296:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e29a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e29e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2a2:	d054      	beq.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2aa:	f200 808b 	bhi.w	800e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e2b4:	f000 8083 	beq.w	800e3be <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e2be:	f200 8081 	bhi.w	800e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2c8:	d02f      	beq.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2d0:	d878      	bhi.n	800e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d004      	beq.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2de:	d012      	beq.n	800e306 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800e2e0:	e070      	b.n	800e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e2e2:	4b3a      	ldr	r3, [pc, #232]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e2ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e2ee:	d107      	bne.n	800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 feb5 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2fe:	e3e6      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e300:	2300      	movs	r3, #0
 800e302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e304:	e3e3      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e306:	4b31      	ldr	r3, [pc, #196]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e30e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e312:	d107      	bne.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e314:	f107 0318 	add.w	r3, r7, #24
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 fbfb 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e322:	e3d4      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e328:	e3d1      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e32a:	4b28      	ldr	r3, [pc, #160]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e336:	d107      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e338:	f107 030c 	add.w	r3, r7, #12
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 fd3d 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e346:	e3c2      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e34c:	e3bf      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e34e:	4b1f      	ldr	r3, [pc, #124]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e356:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e358:	4b1c      	ldr	r3, [pc, #112]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f003 0304 	and.w	r3, r3, #4
 800e360:	2b04      	cmp	r3, #4
 800e362:	d10c      	bne.n	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800e364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e36a:	4b18      	ldr	r3, [pc, #96]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	08db      	lsrs	r3, r3, #3
 800e370:	f003 0303 	and.w	r3, r3, #3
 800e374:	4a16      	ldr	r2, [pc, #88]	@ (800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e376:	fa22 f303 	lsr.w	r3, r2, r3
 800e37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e37c:	e01e      	b.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e37e:	4b13      	ldr	r3, [pc, #76]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e38a:	d106      	bne.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800e38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e392:	d102      	bne.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e394:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e398:	e010      	b.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e39a:	4b0c      	ldr	r3, [pc, #48]	@ (800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3a6:	d106      	bne.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e3ae:	d102      	bne.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e3b0:	4b09      	ldr	r3, [pc, #36]	@ (800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3b4:	e002      	b.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e3ba:	e388      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e3bc:	e387      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e3be:	4b07      	ldr	r3, [pc, #28]	@ (800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3c2:	e384      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3c8:	e381      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e3ca:	bf00      	nop
 800e3cc:	58024400 	.word	0x58024400
 800e3d0:	03d09000 	.word	0x03d09000
 800e3d4:	003d0900 	.word	0x003d0900
 800e3d8:	016e3600 	.word	0x016e3600
 800e3dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e3e8:	430b      	orrs	r3, r1
 800e3ea:	f040 809c 	bne.w	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e3ee:	4b9e      	ldr	r3, [pc, #632]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e3f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3fe:	d054      	beq.n	800e4aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e402:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e406:	f200 808b 	bhi.w	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e410:	f000 8083 	beq.w	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800e414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e416:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e41a:	f200 8081 	bhi.w	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e424:	d02f      	beq.n	800e486 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e42c:	d878      	bhi.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800e434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e43a:	d012      	beq.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e43c:	e070      	b.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e43e:	4b8a      	ldr	r3, [pc, #552]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e44a:	d107      	bne.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e44c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e450:	4618      	mov	r0, r3
 800e452:	f000 fe07 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e45a:	e338      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e460:	e335      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e462:	4b81      	ldr	r3, [pc, #516]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e46a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e46e:	d107      	bne.n	800e480 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e470:	f107 0318 	add.w	r3, r7, #24
 800e474:	4618      	mov	r0, r3
 800e476:	f000 fb4d 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e47e:	e326      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e484:	e323      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e486:	4b78      	ldr	r3, [pc, #480]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e48e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e492:	d107      	bne.n	800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e494:	f107 030c 	add.w	r3, r7, #12
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 fc8f 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4a2:	e314      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4a8:	e311      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4aa:	4b6f      	ldr	r3, [pc, #444]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e4ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e4b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4b4:	4b6c      	ldr	r3, [pc, #432]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d10c      	bne.n	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d109      	bne.n	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4c6:	4b68      	ldr	r3, [pc, #416]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	08db      	lsrs	r3, r3, #3
 800e4cc:	f003 0303 	and.w	r3, r3, #3
 800e4d0:	4a66      	ldr	r2, [pc, #408]	@ (800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4d8:	e01e      	b.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e4da:	4b63      	ldr	r3, [pc, #396]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4e6:	d106      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800e4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4ee:	d102      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e4f0:	4b5f      	ldr	r3, [pc, #380]	@ (800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4f4:	e010      	b.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e4f6:	4b5c      	ldr	r3, [pc, #368]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e502:	d106      	bne.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800e504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e50a:	d102      	bne.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e50c:	4b59      	ldr	r3, [pc, #356]	@ (800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e510:	e002      	b.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e516:	e2da      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e518:	e2d9      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e51a:	4b57      	ldr	r3, [pc, #348]	@ (800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e51e:	e2d6      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e524:	e2d3      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e52a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e52e:	430b      	orrs	r3, r1
 800e530:	f040 80a7 	bne.w	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e534:	4b4c      	ldr	r3, [pc, #304]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e538:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e53c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e544:	d055      	beq.n	800e5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800e546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e54c:	f200 8096 	bhi.w	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e552:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e556:	f000 8084 	beq.w	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800e55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e560:	f200 808c 	bhi.w	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e56a:	d030      	beq.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e572:	f200 8083 	bhi.w	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d004      	beq.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800e57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e582:	d012      	beq.n	800e5aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800e584:	e07a      	b.n	800e67c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e586:	4b38      	ldr	r3, [pc, #224]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e58e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e592:	d107      	bne.n	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 fd63 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5a2:	e294      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5a8:	e291      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e5b6:	d107      	bne.n	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5b8:	f107 0318 	add.w	r3, r7, #24
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f000 faa9 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5c6:	e282      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5cc:	e27f      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e5ce:	4b26      	ldr	r3, [pc, #152]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e5d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e5da:	d107      	bne.n	800e5ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5dc:	f107 030c 	add.w	r3, r7, #12
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 fbeb 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5ea:	e270      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5f0:	e26d      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e5f2:	4b1d      	ldr	r3, [pc, #116]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e5fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b04      	cmp	r3, #4
 800e606:	d10c      	bne.n	800e622 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800e608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d109      	bne.n	800e622 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e60e:	4b16      	ldr	r3, [pc, #88]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	08db      	lsrs	r3, r3, #3
 800e614:	f003 0303 	and.w	r3, r3, #3
 800e618:	4a14      	ldr	r2, [pc, #80]	@ (800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e61a:	fa22 f303 	lsr.w	r3, r2, r3
 800e61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e620:	e01e      	b.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e622:	4b11      	ldr	r3, [pc, #68]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e62a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e62e:	d106      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800e630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e636:	d102      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e638:	4b0d      	ldr	r3, [pc, #52]	@ (800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e63c:	e010      	b.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e63e:	4b0a      	ldr	r3, [pc, #40]	@ (800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e64a:	d106      	bne.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800e64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e652:	d102      	bne.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e654:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e658:	e002      	b.n	800e660 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e65a:	2300      	movs	r3, #0
 800e65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e65e:	e236      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e660:	e235      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e662:	4b05      	ldr	r3, [pc, #20]	@ (800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e666:	e232      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e668:	58024400 	.word	0x58024400
 800e66c:	03d09000 	.word	0x03d09000
 800e670:	003d0900 	.word	0x003d0900
 800e674:	016e3600 	.word	0x016e3600
 800e678:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e680:	e225      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e686:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800e68a:	430b      	orrs	r3, r1
 800e68c:	f040 8085 	bne.w	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e690:	4b9c      	ldr	r3, [pc, #624]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e694:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e698:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800e69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6a0:	d06b      	beq.n	800e77a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800e6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6a8:	d874      	bhi.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6b0:	d056      	beq.n	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800e6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6b8:	d86c      	bhi.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6c0:	d03b      	beq.n	800e73a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6c8:	d864      	bhi.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6d0:	d021      	beq.n	800e716 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6d8:	d85c      	bhi.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d004      	beq.n	800e6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6e6:	d004      	beq.n	800e6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800e6e8:	e054      	b.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e6ea:	f7fe fb5f 	bl	800cdac <HAL_RCC_GetPCLK1Freq>
 800e6ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6f0:	e1ed      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e6f2:	4b84      	ldr	r3, [pc, #528]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e6fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e6fe:	d107      	bne.n	800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e700:	f107 0318 	add.w	r3, r7, #24
 800e704:	4618      	mov	r0, r3
 800e706:	f000 fa05 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e70e:	e1de      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e714:	e1db      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e716:	4b7b      	ldr	r3, [pc, #492]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e71e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e722:	d107      	bne.n	800e734 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e724:	f107 030c 	add.w	r3, r7, #12
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fb47 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e732:	e1cc      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e738:	e1c9      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e73a:	4b72      	ldr	r3, [pc, #456]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0304 	and.w	r3, r3, #4
 800e742:	2b04      	cmp	r3, #4
 800e744:	d109      	bne.n	800e75a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e746:	4b6f      	ldr	r3, [pc, #444]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	08db      	lsrs	r3, r3, #3
 800e74c:	f003 0303 	and.w	r3, r3, #3
 800e750:	4a6d      	ldr	r2, [pc, #436]	@ (800e908 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e752:	fa22 f303 	lsr.w	r3, r2, r3
 800e756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e758:	e1b9      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e75e:	e1b6      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e760:	4b68      	ldr	r3, [pc, #416]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e76c:	d102      	bne.n	800e774 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800e76e:	4b67      	ldr	r3, [pc, #412]	@ (800e90c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e772:	e1ac      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e778:	e1a9      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e77a:	4b62      	ldr	r3, [pc, #392]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e786:	d102      	bne.n	800e78e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800e788:	4b61      	ldr	r3, [pc, #388]	@ (800e910 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e78c:	e19f      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e792:	e19c      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e798:	e199      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e79e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e7a2:	430b      	orrs	r3, r1
 800e7a4:	d173      	bne.n	800e88e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e7a6:	4b57      	ldr	r3, [pc, #348]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e7ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7b6:	d02f      	beq.n	800e818 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7be:	d863      	bhi.n	800e888 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d004      	beq.n	800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800e7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7cc:	d012      	beq.n	800e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800e7ce:	e05b      	b.n	800e888 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e7d0:	4b4c      	ldr	r3, [pc, #304]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e7dc:	d107      	bne.n	800e7ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7de:	f107 0318 	add.w	r3, r7, #24
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 f996 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ec:	e16f      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7f2:	e16c      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e7f4:	4b43      	ldr	r3, [pc, #268]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e800:	d107      	bne.n	800e812 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e802:	f107 030c 	add.w	r3, r7, #12
 800e806:	4618      	mov	r0, r3
 800e808:	f000 fad8 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e810:	e15d      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e816:	e15a      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e818:	4b3a      	ldr	r3, [pc, #232]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e81a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e81c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e820:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e822:	4b38      	ldr	r3, [pc, #224]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f003 0304 	and.w	r3, r3, #4
 800e82a:	2b04      	cmp	r3, #4
 800e82c:	d10c      	bne.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e830:	2b00      	cmp	r3, #0
 800e832:	d109      	bne.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e834:	4b33      	ldr	r3, [pc, #204]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	08db      	lsrs	r3, r3, #3
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	4a32      	ldr	r2, [pc, #200]	@ (800e908 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e840:	fa22 f303 	lsr.w	r3, r2, r3
 800e844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e846:	e01e      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e848:	4b2e      	ldr	r3, [pc, #184]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e854:	d106      	bne.n	800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800e856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e85c:	d102      	bne.n	800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e85e:	4b2b      	ldr	r3, [pc, #172]	@ (800e90c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e862:	e010      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e864:	4b27      	ldr	r3, [pc, #156]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e86c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e870:	d106      	bne.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800e872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e878:	d102      	bne.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e87a:	4b25      	ldr	r3, [pc, #148]	@ (800e910 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e87e:	e002      	b.n	800e886 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e884:	e123      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e886:	e122      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e88c:	e11f      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e88e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e892:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e896:	430b      	orrs	r3, r1
 800e898:	d13c      	bne.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e89a:	4b1a      	ldr	r3, [pc, #104]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e89c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e89e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d004      	beq.n	800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8b0:	d012      	beq.n	800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800e8b2:	e023      	b.n	800e8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8b4:	4b13      	ldr	r3, [pc, #76]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8c0:	d107      	bne.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 fbcc 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8d0:	e0fd      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8d6:	e0fa      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e8e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e8e4:	d107      	bne.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8e6:	f107 0318 	add.w	r3, r7, #24
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f000 f912 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8f4:	e0eb      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8fa:	e0e8      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e900:	e0e5      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e902:	bf00      	nop
 800e904:	58024400 	.word	0x58024400
 800e908:	03d09000 	.word	0x03d09000
 800e90c:	003d0900 	.word	0x003d0900
 800e910:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e918:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e91c:	430b      	orrs	r3, r1
 800e91e:	f040 8085 	bne.w	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e922:	4b6d      	ldr	r3, [pc, #436]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e926:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e92a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e92e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e932:	d06b      	beq.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e93a:	d874      	bhi.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e93e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e942:	d056      	beq.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800e944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e94a:	d86c      	bhi.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e952:	d03b      	beq.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e95a:	d864      	bhi.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e962:	d021      	beq.n	800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800e964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e96a:	d85c      	bhi.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d004      	beq.n	800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800e972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e978:	d004      	beq.n	800e984 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800e97a:	e054      	b.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e97c:	f000 f8b4 	bl	800eae8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e980:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e982:	e0a4      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e984:	4b54      	ldr	r3, [pc, #336]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e98c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e990:	d107      	bne.n	800e9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f000 f8bc 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9a0:	e095      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9a6:	e092      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e9a8:	4b4b      	ldr	r3, [pc, #300]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9b4:	d107      	bne.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9b6:	f107 030c 	add.w	r3, r7, #12
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 f9fe 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9c4:	e083      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9ca:	e080      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e9cc:	4b42      	ldr	r3, [pc, #264]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b04      	cmp	r3, #4
 800e9d6:	d109      	bne.n	800e9ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9d8:	4b3f      	ldr	r3, [pc, #252]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	08db      	lsrs	r3, r3, #3
 800e9de:	f003 0303 	and.w	r3, r3, #3
 800e9e2:	4a3e      	ldr	r2, [pc, #248]	@ (800eadc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800e9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9ea:	e070      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9f0:	e06d      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e9f2:	4b39      	ldr	r3, [pc, #228]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9fe:	d102      	bne.n	800ea06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ea00:	4b37      	ldr	r3, [pc, #220]	@ (800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ea02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea04:	e063      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea0a:	e060      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea0c:	4b32      	ldr	r3, [pc, #200]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea18:	d102      	bne.n	800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ea1a:	4b32      	ldr	r3, [pc, #200]	@ (800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ea1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea1e:	e056      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea24:	e053      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea2a:	e050      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ea2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ea34:	430b      	orrs	r3, r1
 800ea36:	d148      	bne.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ea38:	4b27      	ldr	r3, [pc, #156]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ea3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ea40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ea42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea48:	d02a      	beq.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea50:	d838      	bhi.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ea52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d004      	beq.n	800ea62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ea58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea5e:	d00d      	beq.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ea60:	e030      	b.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea62:	4b1d      	ldr	r3, [pc, #116]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea6e:	d102      	bne.n	800ea76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ea70:	4b1c      	ldr	r3, [pc, #112]	@ (800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ea72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea74:	e02b      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea7a:	e028      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea7c:	4b16      	ldr	r3, [pc, #88]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea88:	d107      	bne.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 fae8 	bl	800f064 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea98:	e019      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea9e:	e016      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eaa0:	4b0d      	ldr	r3, [pc, #52]	@ (800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eaa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eaac:	d107      	bne.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaae:	f107 0318 	add.w	r3, r7, #24
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 f82e 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eabc:	e007      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eac2:	e004      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eac8:	e001      	b.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800eace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3740      	adds	r7, #64	@ 0x40
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	58024400 	.word	0x58024400
 800eadc:	03d09000 	.word	0x03d09000
 800eae0:	003d0900 	.word	0x003d0900
 800eae4:	016e3600 	.word	0x016e3600

0800eae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eaec:	f7fe f92e 	bl	800cd4c <HAL_RCC_GetHCLKFreq>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	4b06      	ldr	r3, [pc, #24]	@ (800eb0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	091b      	lsrs	r3, r3, #4
 800eaf8:	f003 0307 	and.w	r3, r3, #7
 800eafc:	4904      	ldr	r1, [pc, #16]	@ (800eb10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eafe:	5ccb      	ldrb	r3, [r1, r3]
 800eb00:	f003 031f 	and.w	r3, r3, #31
 800eb04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	58024400 	.word	0x58024400
 800eb10:	0801c6f4 	.word	0x0801c6f4

0800eb14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b089      	sub	sp, #36	@ 0x24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb1c:	4ba1      	ldr	r3, [pc, #644]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb20:	f003 0303 	and.w	r3, r3, #3
 800eb24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eb26:	4b9f      	ldr	r3, [pc, #636]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2a:	0b1b      	lsrs	r3, r3, #12
 800eb2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eb32:	4b9c      	ldr	r3, [pc, #624]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb36:	091b      	lsrs	r3, r3, #4
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800eb3e:	4b99      	ldr	r3, [pc, #612]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb42:	08db      	lsrs	r3, r3, #3
 800eb44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	fb02 f303 	mul.w	r3, r2, r3
 800eb4e:	ee07 3a90 	vmov	s15, r3
 800eb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f000 8111 	beq.w	800ed84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	f000 8083 	beq.w	800ec70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	f200 80a1 	bhi.w	800ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d003      	beq.n	800eb80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d056      	beq.n	800ec2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800eb7e:	e099      	b.n	800ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb80:	4b88      	ldr	r3, [pc, #544]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d02d      	beq.n	800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb8c:	4b85      	ldr	r3, [pc, #532]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	08db      	lsrs	r3, r3, #3
 800eb92:	f003 0303 	and.w	r3, r3, #3
 800eb96:	4a84      	ldr	r2, [pc, #528]	@ (800eda8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800eb98:	fa22 f303 	lsr.w	r3, r2, r3
 800eb9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	ee07 3a90 	vmov	s15, r3
 800eba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	ee07 3a90 	vmov	s15, r3
 800ebae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebb6:	4b7b      	ldr	r3, [pc, #492]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebbe:	ee07 3a90 	vmov	s15, r3
 800ebc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ebce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ebda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ebe6:	e087      	b.n	800ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	ee07 3a90 	vmov	s15, r3
 800ebee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800edb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ebf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebfa:	4b6a      	ldr	r3, [pc, #424]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec02:	ee07 3a90 	vmov	s15, r3
 800ec06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec2a:	e065      	b.n	800ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	ee07 3a90 	vmov	s15, r3
 800ec32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800edb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ec3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec3e:	4b59      	ldr	r3, [pc, #356]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec46:	ee07 3a90 	vmov	s15, r3
 800ec4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec6e:	e043      	b.n	800ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800edb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ec7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec82:	4b48      	ldr	r3, [pc, #288]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec8a:	ee07 3a90 	vmov	s15, r3
 800ec8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecb2:	e021      	b.n	800ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	ee07 3a90 	vmov	s15, r3
 800ecba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800edb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ecc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecc6:	4b37      	ldr	r3, [pc, #220]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecce:	ee07 3a90 	vmov	s15, r3
 800ecd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ece2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ece6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ecf8:	4b2a      	ldr	r3, [pc, #168]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecfc:	0a5b      	lsrs	r3, r3, #9
 800ecfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed02:	ee07 3a90 	vmov	s15, r3
 800ed06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed1e:	ee17 2a90 	vmov	r2, s15
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ed26:	4b1f      	ldr	r3, [pc, #124]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed2a:	0c1b      	lsrs	r3, r3, #16
 800ed2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed30:	ee07 3a90 	vmov	s15, r3
 800ed34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed4c:	ee17 2a90 	vmov	r2, s15
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ed54:	4b13      	ldr	r3, [pc, #76]	@ (800eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed58:	0e1b      	lsrs	r3, r3, #24
 800ed5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed5e:	ee07 3a90 	vmov	s15, r3
 800ed62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed7a:	ee17 2a90 	vmov	r2, s15
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ed82:	e008      	b.n	800ed96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	609a      	str	r2, [r3, #8]
}
 800ed96:	bf00      	nop
 800ed98:	3724      	adds	r7, #36	@ 0x24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	58024400 	.word	0x58024400
 800eda8:	03d09000 	.word	0x03d09000
 800edac:	46000000 	.word	0x46000000
 800edb0:	4c742400 	.word	0x4c742400
 800edb4:	4a742400 	.word	0x4a742400
 800edb8:	4bb71b00 	.word	0x4bb71b00

0800edbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b089      	sub	sp, #36	@ 0x24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800edc4:	4ba1      	ldr	r3, [pc, #644]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc8:	f003 0303 	and.w	r3, r3, #3
 800edcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800edce:	4b9f      	ldr	r3, [pc, #636]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edd2:	0d1b      	lsrs	r3, r3, #20
 800edd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800edd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800edda:	4b9c      	ldr	r3, [pc, #624]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edde:	0a1b      	lsrs	r3, r3, #8
 800ede0:	f003 0301 	and.w	r3, r3, #1
 800ede4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ede6:	4b99      	ldr	r3, [pc, #612]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ede8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edea:	08db      	lsrs	r3, r3, #3
 800edec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	fb02 f303 	mul.w	r3, r2, r3
 800edf6:	ee07 3a90 	vmov	s15, r3
 800edfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f000 8111 	beq.w	800f02c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	f000 8083 	beq.w	800ef18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	f200 80a1 	bhi.w	800ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d056      	beq.n	800eed4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ee26:	e099      	b.n	800ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee28:	4b88      	ldr	r3, [pc, #544]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f003 0320 	and.w	r3, r3, #32
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d02d      	beq.n	800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee34:	4b85      	ldr	r3, [pc, #532]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	08db      	lsrs	r3, r3, #3
 800ee3a:	f003 0303 	and.w	r3, r3, #3
 800ee3e:	4a84      	ldr	r2, [pc, #528]	@ (800f050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ee40:	fa22 f303 	lsr.w	r3, r2, r3
 800ee44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	ee07 3a90 	vmov	s15, r3
 800ee4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	ee07 3a90 	vmov	s15, r3
 800ee56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee5e:	4b7b      	ldr	r3, [pc, #492]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee66:	ee07 3a90 	vmov	s15, r3
 800ee6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ee76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ee82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ee8e:	e087      	b.n	800efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	ee07 3a90 	vmov	s15, r3
 800ee96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f058 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ee9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eea2:	4b6a      	ldr	r3, [pc, #424]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeaa:	ee07 3a90 	vmov	s15, r3
 800eeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eed2:	e065      	b.n	800efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	ee07 3a90 	vmov	s15, r3
 800eeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800eee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eee6:	4b59      	ldr	r3, [pc, #356]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeee:	ee07 3a90 	vmov	s15, r3
 800eef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800eefa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef16:	e043      	b.n	800efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	ee07 3a90 	vmov	s15, r3
 800ef1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ef26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef2a:	4b48      	ldr	r3, [pc, #288]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef32:	ee07 3a90 	vmov	s15, r3
 800ef36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef5a:	e021      	b.n	800efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	ee07 3a90 	vmov	s15, r3
 800ef62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef6e:	4b37      	ldr	r3, [pc, #220]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef76:	ee07 3a90 	vmov	s15, r3
 800ef7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800efa0:	4b2a      	ldr	r3, [pc, #168]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa4:	0a5b      	lsrs	r3, r3, #9
 800efa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efaa:	ee07 3a90 	vmov	s15, r3
 800efae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800efb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efba:	edd7 6a07 	vldr	s13, [r7, #28]
 800efbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efc6:	ee17 2a90 	vmov	r2, s15
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800efce:	4b1f      	ldr	r3, [pc, #124]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efd2:	0c1b      	lsrs	r3, r3, #16
 800efd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efd8:	ee07 3a90 	vmov	s15, r3
 800efdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800efe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800efec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eff4:	ee17 2a90 	vmov	r2, s15
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800effc:	4b13      	ldr	r3, [pc, #76]	@ (800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800effe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f000:	0e1b      	lsrs	r3, r3, #24
 800f002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f006:	ee07 3a90 	vmov	s15, r3
 800f00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f016:	edd7 6a07 	vldr	s13, [r7, #28]
 800f01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f022:	ee17 2a90 	vmov	r2, s15
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f02a:	e008      	b.n	800f03e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	609a      	str	r2, [r3, #8]
}
 800f03e:	bf00      	nop
 800f040:	3724      	adds	r7, #36	@ 0x24
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	58024400 	.word	0x58024400
 800f050:	03d09000 	.word	0x03d09000
 800f054:	46000000 	.word	0x46000000
 800f058:	4c742400 	.word	0x4c742400
 800f05c:	4a742400 	.word	0x4a742400
 800f060:	4bb71b00 	.word	0x4bb71b00

0800f064 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f064:	b480      	push	{r7}
 800f066:	b089      	sub	sp, #36	@ 0x24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f06c:	4ba0      	ldr	r3, [pc, #640]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f070:	f003 0303 	and.w	r3, r3, #3
 800f074:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f076:	4b9e      	ldr	r3, [pc, #632]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f07a:	091b      	lsrs	r3, r3, #4
 800f07c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f080:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f082:	4b9b      	ldr	r3, [pc, #620]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f08c:	4b98      	ldr	r3, [pc, #608]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f090:	08db      	lsrs	r3, r3, #3
 800f092:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f096:	693a      	ldr	r2, [r7, #16]
 800f098:	fb02 f303 	mul.w	r3, r2, r3
 800f09c:	ee07 3a90 	vmov	s15, r3
 800f0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 8111 	beq.w	800f2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	f000 8083 	beq.w	800f1be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	2b02      	cmp	r3, #2
 800f0bc:	f200 80a1 	bhi.w	800f202 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d003      	beq.n	800f0ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d056      	beq.n	800f17a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f0cc:	e099      	b.n	800f202 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0ce:	4b88      	ldr	r3, [pc, #544]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f003 0320 	and.w	r3, r3, #32
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d02d      	beq.n	800f136 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0da:	4b85      	ldr	r3, [pc, #532]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	08db      	lsrs	r3, r3, #3
 800f0e0:	f003 0303 	and.w	r3, r3, #3
 800f0e4:	4a83      	ldr	r2, [pc, #524]	@ (800f2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	ee07 3a90 	vmov	s15, r3
 800f0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	ee07 3a90 	vmov	s15, r3
 800f0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f104:	4b7a      	ldr	r3, [pc, #488]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f10c:	ee07 3a90 	vmov	s15, r3
 800f110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f114:	ed97 6a03 	vldr	s12, [r7, #12]
 800f118:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f11c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f130:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f134:	e087      	b.n	800f246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	ee07 3a90 	vmov	s15, r3
 800f13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f140:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f2fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f148:	4b69      	ldr	r3, [pc, #420]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f150:	ee07 3a90 	vmov	s15, r3
 800f154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f158:	ed97 6a03 	vldr	s12, [r7, #12]
 800f15c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f178:	e065      	b.n	800f246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	ee07 3a90 	vmov	s15, r3
 800f180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f184:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f300 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f18c:	4b58      	ldr	r3, [pc, #352]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f194:	ee07 3a90 	vmov	s15, r3
 800f198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f19c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1bc:	e043      	b.n	800f246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	ee07 3a90 	vmov	s15, r3
 800f1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f304 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f1cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1d0:	4b47      	ldr	r3, [pc, #284]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1d8:	ee07 3a90 	vmov	s15, r3
 800f1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f200:	e021      	b.n	800f246 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	ee07 3a90 	vmov	s15, r3
 800f208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f20c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f2fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f214:	4b36      	ldr	r3, [pc, #216]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f21c:	ee07 3a90 	vmov	s15, r3
 800f220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f224:	ed97 6a03 	vldr	s12, [r7, #12]
 800f228:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f22c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f240:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f244:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f246:	4b2a      	ldr	r3, [pc, #168]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f24a:	0a5b      	lsrs	r3, r3, #9
 800f24c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f250:	ee07 3a90 	vmov	s15, r3
 800f254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f25c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f260:	edd7 6a07 	vldr	s13, [r7, #28]
 800f264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f26c:	ee17 2a90 	vmov	r2, s15
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f274:	4b1e      	ldr	r3, [pc, #120]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f278:	0c1b      	lsrs	r3, r3, #16
 800f27a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f27e:	ee07 3a90 	vmov	s15, r3
 800f282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f29a:	ee17 2a90 	vmov	r2, s15
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f2a2:	4b13      	ldr	r3, [pc, #76]	@ (800f2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2a6:	0e1b      	lsrs	r3, r3, #24
 800f2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2ac:	ee07 3a90 	vmov	s15, r3
 800f2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2c8:	ee17 2a90 	vmov	r2, s15
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f2d0:	e008      	b.n	800f2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	609a      	str	r2, [r3, #8]
}
 800f2e4:	bf00      	nop
 800f2e6:	3724      	adds	r7, #36	@ 0x24
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr
 800f2f0:	58024400 	.word	0x58024400
 800f2f4:	03d09000 	.word	0x03d09000
 800f2f8:	46000000 	.word	0x46000000
 800f2fc:	4c742400 	.word	0x4c742400
 800f300:	4a742400 	.word	0x4a742400
 800f304:	4bb71b00 	.word	0x4bb71b00

0800f308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f316:	4b53      	ldr	r3, [pc, #332]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f31a:	f003 0303 	and.w	r3, r3, #3
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d101      	bne.n	800f326 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e099      	b.n	800f45a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f326:	4b4f      	ldr	r3, [pc, #316]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a4e      	ldr	r2, [pc, #312]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f32c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f332:	f7f6 ff39 	bl	80061a8 <HAL_GetTick>
 800f336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f338:	e008      	b.n	800f34c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f33a:	f7f6 ff35 	bl	80061a8 <HAL_GetTick>
 800f33e:	4602      	mov	r2, r0
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	2b02      	cmp	r3, #2
 800f346:	d901      	bls.n	800f34c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f348:	2303      	movs	r3, #3
 800f34a:	e086      	b.n	800f45a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f34c:	4b45      	ldr	r3, [pc, #276]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1f0      	bne.n	800f33a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f358:	4b42      	ldr	r3, [pc, #264]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f35c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	031b      	lsls	r3, r3, #12
 800f366:	493f      	ldr	r1, [pc, #252]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f368:	4313      	orrs	r3, r2
 800f36a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	3b01      	subs	r3, #1
 800f372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	025b      	lsls	r3, r3, #9
 800f37e:	b29b      	uxth	r3, r3
 800f380:	431a      	orrs	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	3b01      	subs	r3, #1
 800f388:	041b      	lsls	r3, r3, #16
 800f38a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f38e:	431a      	orrs	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	3b01      	subs	r3, #1
 800f396:	061b      	lsls	r3, r3, #24
 800f398:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f39c:	4931      	ldr	r1, [pc, #196]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f3a2:	4b30      	ldr	r3, [pc, #192]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	695b      	ldr	r3, [r3, #20]
 800f3ae:	492d      	ldr	r1, [pc, #180]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b8:	f023 0220 	bic.w	r2, r3, #32
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	4928      	ldr	r1, [pc, #160]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f3c6:	4b27      	ldr	r3, [pc, #156]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ca:	4a26      	ldr	r2, [pc, #152]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3cc:	f023 0310 	bic.w	r3, r3, #16
 800f3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f3d2:	4b24      	ldr	r3, [pc, #144]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f3d6:	4b24      	ldr	r3, [pc, #144]	@ (800f468 <RCCEx_PLL2_Config+0x160>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	69d2      	ldr	r2, [r2, #28]
 800f3de:	00d2      	lsls	r2, r2, #3
 800f3e0:	4920      	ldr	r1, [pc, #128]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f3e6:	4b1f      	ldr	r3, [pc, #124]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3ec:	f043 0310 	orr.w	r3, r3, #16
 800f3f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3fc:	4a19      	ldr	r2, [pc, #100]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f3fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f404:	e00f      	b.n	800f426 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d106      	bne.n	800f41a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f40c:	4b15      	ldr	r3, [pc, #84]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f410:	4a14      	ldr	r2, [pc, #80]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f418:	e005      	b.n	800f426 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f41a:	4b12      	ldr	r3, [pc, #72]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f41e:	4a11      	ldr	r2, [pc, #68]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f424:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f426:	4b0f      	ldr	r3, [pc, #60]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a0e      	ldr	r2, [pc, #56]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f42c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f432:	f7f6 feb9 	bl	80061a8 <HAL_GetTick>
 800f436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f438:	e008      	b.n	800f44c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f43a:	f7f6 feb5 	bl	80061a8 <HAL_GetTick>
 800f43e:	4602      	mov	r2, r0
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	2b02      	cmp	r3, #2
 800f446:	d901      	bls.n	800f44c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f448:	2303      	movs	r3, #3
 800f44a:	e006      	b.n	800f45a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f44c:	4b05      	ldr	r3, [pc, #20]	@ (800f464 <RCCEx_PLL2_Config+0x15c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f454:	2b00      	cmp	r3, #0
 800f456:	d0f0      	beq.n	800f43a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f458:	7bfb      	ldrb	r3, [r7, #15]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3710      	adds	r7, #16
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	58024400 	.word	0x58024400
 800f468:	ffff0007 	.word	0xffff0007

0800f46c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f476:	2300      	movs	r3, #0
 800f478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f47a:	4b53      	ldr	r3, [pc, #332]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47e:	f003 0303 	and.w	r3, r3, #3
 800f482:	2b03      	cmp	r3, #3
 800f484:	d101      	bne.n	800f48a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	e099      	b.n	800f5be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f48a:	4b4f      	ldr	r3, [pc, #316]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4a4e      	ldr	r2, [pc, #312]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f496:	f7f6 fe87 	bl	80061a8 <HAL_GetTick>
 800f49a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f49c:	e008      	b.n	800f4b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f49e:	f7f6 fe83 	bl	80061a8 <HAL_GetTick>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d901      	bls.n	800f4b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f4ac:	2303      	movs	r3, #3
 800f4ae:	e086      	b.n	800f5be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4b0:	4b45      	ldr	r3, [pc, #276]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1f0      	bne.n	800f49e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f4bc:	4b42      	ldr	r3, [pc, #264]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	051b      	lsls	r3, r3, #20
 800f4ca:	493f      	ldr	r1, [pc, #252]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	628b      	str	r3, [r1, #40]	@ 0x28
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	025b      	lsls	r3, r3, #9
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	041b      	lsls	r3, r3, #16
 800f4ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f4f2:	431a      	orrs	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	061b      	lsls	r3, r3, #24
 800f4fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f500:	4931      	ldr	r1, [pc, #196]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f502:	4313      	orrs	r3, r2
 800f504:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f506:	4b30      	ldr	r3, [pc, #192]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	492d      	ldr	r1, [pc, #180]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f514:	4313      	orrs	r3, r2
 800f516:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f518:	4b2b      	ldr	r3, [pc, #172]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	4928      	ldr	r1, [pc, #160]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f526:	4313      	orrs	r3, r2
 800f528:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f52a:	4b27      	ldr	r3, [pc, #156]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f52e:	4a26      	ldr	r2, [pc, #152]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f534:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f536:	4b24      	ldr	r3, [pc, #144]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f53a:	4b24      	ldr	r3, [pc, #144]	@ (800f5cc <RCCEx_PLL3_Config+0x160>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	69d2      	ldr	r2, [r2, #28]
 800f542:	00d2      	lsls	r2, r2, #3
 800f544:	4920      	ldr	r1, [pc, #128]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f546:	4313      	orrs	r3, r2
 800f548:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f54a:	4b1f      	ldr	r3, [pc, #124]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54e:	4a1e      	ldr	r2, [pc, #120]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f554:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d106      	bne.n	800f56a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f55c:	4b1a      	ldr	r3, [pc, #104]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f560:	4a19      	ldr	r2, [pc, #100]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f562:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f568:	e00f      	b.n	800f58a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d106      	bne.n	800f57e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f570:	4b15      	ldr	r3, [pc, #84]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f574:	4a14      	ldr	r2, [pc, #80]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f576:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f57a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f57c:	e005      	b.n	800f58a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f57e:	4b12      	ldr	r3, [pc, #72]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f582:	4a11      	ldr	r2, [pc, #68]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f584:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f588:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f58a:	4b0f      	ldr	r3, [pc, #60]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a0e      	ldr	r2, [pc, #56]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f596:	f7f6 fe07 	bl	80061a8 <HAL_GetTick>
 800f59a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f59c:	e008      	b.n	800f5b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f59e:	f7f6 fe03 	bl	80061a8 <HAL_GetTick>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d901      	bls.n	800f5b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	e006      	b.n	800f5be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5b0:	4b05      	ldr	r3, [pc, #20]	@ (800f5c8 <RCCEx_PLL3_Config+0x15c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d0f0      	beq.n	800f59e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	58024400 	.word	0x58024400
 800f5cc:	ffff0007 	.word	0xffff0007

0800f5d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e10f      	b.n	800f802 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a87      	ldr	r2, [pc, #540]	@ (800f80c <HAL_SPI_Init+0x23c>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d00f      	beq.n	800f612 <HAL_SPI_Init+0x42>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a86      	ldr	r2, [pc, #536]	@ (800f810 <HAL_SPI_Init+0x240>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d00a      	beq.n	800f612 <HAL_SPI_Init+0x42>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a84      	ldr	r2, [pc, #528]	@ (800f814 <HAL_SPI_Init+0x244>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d005      	beq.n	800f612 <HAL_SPI_Init+0x42>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	2b0f      	cmp	r3, #15
 800f60c:	d901      	bls.n	800f612 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	e0f7      	b.n	800f802 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fef6 	bl	8010404 <SPI_GetPacketSize>
 800f618:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	4a7b      	ldr	r2, [pc, #492]	@ (800f80c <HAL_SPI_Init+0x23c>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d00c      	beq.n	800f63e <HAL_SPI_Init+0x6e>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a79      	ldr	r2, [pc, #484]	@ (800f810 <HAL_SPI_Init+0x240>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d007      	beq.n	800f63e <HAL_SPI_Init+0x6e>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a78      	ldr	r2, [pc, #480]	@ (800f814 <HAL_SPI_Init+0x244>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d002      	beq.n	800f63e <HAL_SPI_Init+0x6e>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2b08      	cmp	r3, #8
 800f63c:	d811      	bhi.n	800f662 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f642:	4a72      	ldr	r2, [pc, #456]	@ (800f80c <HAL_SPI_Init+0x23c>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d009      	beq.n	800f65c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a70      	ldr	r2, [pc, #448]	@ (800f810 <HAL_SPI_Init+0x240>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d004      	beq.n	800f65c <HAL_SPI_Init+0x8c>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a6f      	ldr	r2, [pc, #444]	@ (800f814 <HAL_SPI_Init+0x244>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d104      	bne.n	800f666 <HAL_SPI_Init+0x96>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b10      	cmp	r3, #16
 800f660:	d901      	bls.n	800f666 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e0cd      	b.n	800f802 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7f2 ffb4 	bl	80025e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2202      	movs	r2, #2
 800f684:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f022 0201 	bic.w	r2, r2, #1
 800f696:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f6a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	699b      	ldr	r3, [r3, #24]
 800f6a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6ac:	d119      	bne.n	800f6e2 <HAL_SPI_Init+0x112>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f6b6:	d103      	bne.n	800f6c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d008      	beq.n	800f6d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10c      	bne.n	800f6e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f6cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6d0:	d107      	bne.n	800f6e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f6e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00f      	beq.n	800f70e <HAL_SPI_Init+0x13e>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	2b06      	cmp	r3, #6
 800f6f4:	d90b      	bls.n	800f70e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	430a      	orrs	r2, r1
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	e007      	b.n	800f71e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f71c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	69da      	ldr	r2, [r3, #28]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f726:	431a      	orrs	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	431a      	orrs	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f730:	ea42 0103 	orr.w	r1, r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68da      	ldr	r2, [r3, #12]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	430a      	orrs	r2, r1
 800f73e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f748:	431a      	orrs	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f74e:	431a      	orrs	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	431a      	orrs	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	691b      	ldr	r3, [r3, #16]
 800f75a:	431a      	orrs	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	431a      	orrs	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	431a      	orrs	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	431a      	orrs	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f772:	431a      	orrs	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	431a      	orrs	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f77e:	ea42 0103 	orr.w	r1, r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	430a      	orrs	r2, r1
 800f78c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d113      	bne.n	800f7be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f7a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f7bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f022 0201 	bic.w	r2, r2, #1
 800f7cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00a      	beq.n	800f7f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	40013000 	.word	0x40013000
 800f810:	40003800 	.word	0x40003800
 800f814:	40003c00 	.word	0x40003c00

0800f818 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af02      	add	r7, sp, #8
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	4613      	mov	r3, r2
 800f826:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3320      	adds	r3, #32
 800f82e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f830:	f7f6 fcba 	bl	80061a8 <HAL_GetTick>
 800f834:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d001      	beq.n	800f846 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f842:	2302      	movs	r3, #2
 800f844:	e1d1      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d002      	beq.n	800f852 <HAL_SPI_Transmit+0x3a>
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	e1c9      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d101      	bne.n	800f864 <HAL_SPI_Transmit+0x4c>
 800f860:	2302      	movs	r3, #2
 800f862:	e1c2      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2203      	movs	r2, #3
 800f870:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	88fa      	ldrh	r2, [r7, #6]
 800f886:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	88fa      	ldrh	r2, [r7, #6]
 800f88e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f8bc:	d108      	bne.n	800f8d0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	e009      	b.n	800f8e4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f8e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	4b96      	ldr	r3, [pc, #600]	@ (800fb44 <HAL_SPI_Transmit+0x32c>)
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	88f9      	ldrh	r1, [r7, #6]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	6812      	ldr	r2, [r2, #0]
 800f8f4:	430b      	orrs	r3, r1
 800f8f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f042 0201 	orr.w	r2, r2, #1
 800f906:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f910:	d107      	bne.n	800f922 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	2b0f      	cmp	r3, #15
 800f928:	d947      	bls.n	800f9ba <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f92a:	e03f      	b.n	800f9ac <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	695b      	ldr	r3, [r3, #20]
 800f932:	f003 0302 	and.w	r3, r3, #2
 800f936:	2b02      	cmp	r3, #2
 800f938:	d114      	bne.n	800f964 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f94a:	1d1a      	adds	r2, r3, #4
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f956:	b29b      	uxth	r3, r3
 800f958:	3b01      	subs	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f962:	e023      	b.n	800f9ac <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f964:	f7f6 fc20 	bl	80061a8 <HAL_GetTick>
 800f968:	4602      	mov	r2, r0
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	429a      	cmp	r2, r3
 800f972:	d803      	bhi.n	800f97c <HAL_SPI_Transmit+0x164>
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	d102      	bne.n	800f982 <HAL_SPI_Transmit+0x16a>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d114      	bne.n	800f9ac <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f000 fc70 	bl	8010268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f98e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2201      	movs	r2, #1
 800f99c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	e11e      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1b9      	bne.n	800f92c <HAL_SPI_Transmit+0x114>
 800f9b8:	e0f1      	b.n	800fb9e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	2b07      	cmp	r3, #7
 800f9c0:	f240 80e6 	bls.w	800fb90 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f9c4:	e05d      	b.n	800fa82 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	695b      	ldr	r3, [r3, #20]
 800f9cc:	f003 0302 	and.w	r3, r3, #2
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d132      	bne.n	800fa3a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d918      	bls.n	800fa12 <HAL_SPI_Transmit+0x1fa>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d014      	beq.n	800fa12 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	6812      	ldr	r2, [r2, #0]
 800f9f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9f8:	1d1a      	adds	r2, r3, #4
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	3b02      	subs	r3, #2
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fa10:	e037      	b.n	800fa82 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa16:	881a      	ldrh	r2, [r3, #0]
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa20:	1c9a      	adds	r2, r3, #2
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fa38:	e023      	b.n	800fa82 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa3a:	f7f6 fbb5 	bl	80061a8 <HAL_GetTick>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d803      	bhi.n	800fa52 <HAL_SPI_Transmit+0x23a>
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa50:	d102      	bne.n	800fa58 <HAL_SPI_Transmit+0x240>
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d114      	bne.n	800fa82 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fc05 	bl	8010268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800fa7e:	2303      	movs	r3, #3
 800fa80:	e0b3      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d19b      	bne.n	800f9c6 <HAL_SPI_Transmit+0x1ae>
 800fa8e:	e086      	b.n	800fb9e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	695b      	ldr	r3, [r3, #20]
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	d154      	bne.n	800fb48 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	2b03      	cmp	r3, #3
 800faa8:	d918      	bls.n	800fadc <HAL_SPI_Transmit+0x2c4>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faae:	2b40      	cmp	r3, #64	@ 0x40
 800fab0:	d914      	bls.n	800fadc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	6812      	ldr	r2, [r2, #0]
 800fabc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fac2:	1d1a      	adds	r2, r3, #4
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800face:	b29b      	uxth	r3, r3
 800fad0:	3b04      	subs	r3, #4
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fada:	e059      	b.n	800fb90 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d917      	bls.n	800fb18 <HAL_SPI_Transmit+0x300>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faec:	2b00      	cmp	r3, #0
 800faee:	d013      	beq.n	800fb18 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800faf4:	881a      	ldrh	r2, [r3, #0]
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fafe:	1c9a      	adds	r2, r3, #2
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	3b02      	subs	r3, #2
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fb16:	e03b      	b.n	800fb90 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3320      	adds	r3, #32
 800fb22:	7812      	ldrb	r2, [r2, #0]
 800fb24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb2a:	1c5a      	adds	r2, r3, #1
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fb42:	e025      	b.n	800fb90 <HAL_SPI_Transmit+0x378>
 800fb44:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb48:	f7f6 fb2e 	bl	80061a8 <HAL_GetTick>
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d803      	bhi.n	800fb60 <HAL_SPI_Transmit+0x348>
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5e:	d102      	bne.n	800fb66 <HAL_SPI_Transmit+0x34e>
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d114      	bne.n	800fb90 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f000 fb7e 	bl	8010268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800fb8c:	2303      	movs	r3, #3
 800fb8e:	e02c      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f47f af79 	bne.w	800fa90 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	2200      	movs	r2, #0
 800fba6:	2108      	movs	r1, #8
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 fbfd 	bl	80103a8 <SPI_WaitOnFlagUntilTimeout>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d007      	beq.n	800fbc4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbba:	f043 0220 	orr.w	r2, r3, #32
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f000 fb4f 	bl	8010268 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800fbe8:	2300      	movs	r3, #0
  }
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop

0800fbf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08e      	sub	sp, #56	@ 0x38
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
 800fc00:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3320      	adds	r3, #32
 800fc08:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	3330      	adds	r3, #48	@ 0x30
 800fc10:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc16:	095b      	lsrs	r3, r3, #5
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fc1e:	f7f6 fac3 	bl	80061a8 <HAL_GetTick>
 800fc22:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800fc24:	887b      	ldrh	r3, [r7, #2]
 800fc26:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800fc28:	887b      	ldrh	r3, [r7, #2]
 800fc2a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d001      	beq.n	800fc3c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e310      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d005      	beq.n	800fc4e <HAL_SPI_TransmitReceive+0x5a>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d002      	beq.n	800fc4e <HAL_SPI_TransmitReceive+0x5a>
 800fc48:	887b      	ldrh	r3, [r7, #2]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d101      	bne.n	800fc52 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e305      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d101      	bne.n	800fc60 <HAL_SPI_TransmitReceive+0x6c>
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	e2fe      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2201      	movs	r2, #1
 800fc64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2205      	movs	r2, #5
 800fc6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	887a      	ldrh	r2, [r7, #2]
 800fc82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	887a      	ldrh	r2, [r7, #2]
 800fc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	887a      	ldrh	r2, [r7, #2]
 800fc98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	887a      	ldrh	r2, [r7, #2]
 800fca0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2200      	movs	r2, #0
 800fcae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68da      	ldr	r2, [r3, #12]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800fcbe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a70      	ldr	r2, [pc, #448]	@ (800fe88 <HAL_SPI_TransmitReceive+0x294>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d009      	beq.n	800fcde <HAL_SPI_TransmitReceive+0xea>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a6f      	ldr	r2, [pc, #444]	@ (800fe8c <HAL_SPI_TransmitReceive+0x298>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d004      	beq.n	800fcde <HAL_SPI_TransmitReceive+0xea>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a6d      	ldr	r2, [pc, #436]	@ (800fe90 <HAL_SPI_TransmitReceive+0x29c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d102      	bne.n	800fce4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800fcde:	2310      	movs	r3, #16
 800fce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fce2:	e001      	b.n	800fce8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800fce4:	2308      	movs	r3, #8
 800fce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	4b69      	ldr	r3, [pc, #420]	@ (800fe94 <HAL_SPI_TransmitReceive+0x2a0>)
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	8879      	ldrh	r1, [r7, #2]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	6812      	ldr	r2, [r2, #0]
 800fcf8:	430b      	orrs	r3, r1
 800fcfa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f042 0201 	orr.w	r2, r2, #1
 800fd0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fd14:	d107      	bne.n	800fd26 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	2b0f      	cmp	r3, #15
 800fd2c:	f240 80a2 	bls.w	800fe74 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800fd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd32:	089b      	lsrs	r3, r3, #2
 800fd34:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd36:	e094      	b.n	800fe62 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	695b      	ldr	r3, [r3, #20]
 800fd3e:	f003 0302 	and.w	r3, r3, #2
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d120      	bne.n	800fd88 <HAL_SPI_TransmitReceive+0x194>
 800fd46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d01d      	beq.n	800fd88 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fd4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fd4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d217      	bcs.n	800fd88 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6812      	ldr	r2, [r2, #0]
 800fd62:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd68:	1d1a      	adds	r2, r3, #4
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	3b01      	subs	r3, #1
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd86:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	695b      	ldr	r3, [r3, #20]
 800fd8e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fd90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d065      	beq.n	800fe62 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	695b      	ldr	r3, [r3, #20]
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d118      	bne.n	800fdd6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdb4:	1d1a      	adds	r2, r3, #4
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdd4:	e045      	b.n	800fe62 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fdd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fdd8:	8bfb      	ldrh	r3, [r7, #30]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d21d      	bcs.n	800fe1a <HAL_SPI_TransmitReceive+0x226>
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d018      	beq.n	800fe1a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdf2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdf8:	1d1a      	adds	r2, r3, #4
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	3b01      	subs	r3, #1
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe16:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fe18:	e023      	b.n	800fe62 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe1a:	f7f6 f9c5 	bl	80061a8 <HAL_GetTick>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d803      	bhi.n	800fe32 <HAL_SPI_TransmitReceive+0x23e>
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe30:	d102      	bne.n	800fe38 <HAL_SPI_TransmitReceive+0x244>
 800fe32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d114      	bne.n	800fe62 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	f000 fa15 	bl	8010268 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2201      	movs	r2, #1
 800fe52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	e1fd      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f47f af67 	bne.w	800fd38 <HAL_SPI_TransmitReceive+0x144>
 800fe6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f47f af63 	bne.w	800fd38 <HAL_SPI_TransmitReceive+0x144>
 800fe72:	e1ce      	b.n	8010212 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	2b07      	cmp	r3, #7
 800fe7a:	f240 81c2 	bls.w	8010202 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800fe7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe80:	085b      	lsrs	r3, r3, #1
 800fe82:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe84:	e0c9      	b.n	801001a <HAL_SPI_TransmitReceive+0x426>
 800fe86:	bf00      	nop
 800fe88:	40013000 	.word	0x40013000
 800fe8c:	40003800 	.word	0x40003800
 800fe90:	40003c00 	.word	0x40003c00
 800fe94:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	695b      	ldr	r3, [r3, #20]
 800fe9e:	f003 0302 	and.w	r3, r3, #2
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d11f      	bne.n	800fee6 <HAL_SPI_TransmitReceive+0x2f2>
 800fea6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d01c      	beq.n	800fee6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800feac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800feae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800feb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d216      	bcs.n	800fee6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800febc:	881a      	ldrh	r2, [r3, #0]
 800febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fec6:	1c9a      	adds	r2, r3, #2
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	3b01      	subs	r3, #1
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fee4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	695b      	ldr	r3, [r3, #20]
 800feec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800feee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8092 	beq.w	801001a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	695b      	ldr	r3, [r3, #20]
 800fefc:	f003 0301 	and.w	r3, r3, #1
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d118      	bne.n	800ff36 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff08:	6a3a      	ldr	r2, [r7, #32]
 800ff0a:	8812      	ldrh	r2, [r2, #0]
 800ff0c:	b292      	uxth	r2, r2
 800ff0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff14:	1c9a      	adds	r2, r3, #2
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	3b01      	subs	r3, #1
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff32:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ff34:	e071      	b.n	801001a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ff36:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ff38:	8bfb      	ldrh	r3, [r7, #30]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d228      	bcs.n	800ff90 <HAL_SPI_TransmitReceive+0x39c>
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d023      	beq.n	800ff90 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff4c:	6a3a      	ldr	r2, [r7, #32]
 800ff4e:	8812      	ldrh	r2, [r2, #0]
 800ff50:	b292      	uxth	r2, r2
 800ff52:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff58:	1c9a      	adds	r2, r3, #2
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff62:	6a3a      	ldr	r2, [r7, #32]
 800ff64:	8812      	ldrh	r2, [r2, #0]
 800ff66:	b292      	uxth	r2, r2
 800ff68:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff6e:	1c9a      	adds	r2, r3, #2
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	3b02      	subs	r3, #2
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff8c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ff8e:	e044      	b.n	801001a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ff90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d11d      	bne.n	800ffd2 <HAL_SPI_TransmitReceive+0x3de>
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d018      	beq.n	800ffd2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffa4:	6a3a      	ldr	r2, [r7, #32]
 800ffa6:	8812      	ldrh	r2, [r2, #0]
 800ffa8:	b292      	uxth	r2, r2
 800ffaa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffb0:	1c9a      	adds	r2, r3, #2
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ffd0:	e023      	b.n	801001a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffd2:	f7f6 f8e9 	bl	80061a8 <HAL_GetTick>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d803      	bhi.n	800ffea <HAL_SPI_TransmitReceive+0x3f6>
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe8:	d102      	bne.n	800fff0 <HAL_SPI_TransmitReceive+0x3fc>
 800ffea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d114      	bne.n	801001a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f000 f939 	bl	8010268 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fffc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e121      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801001a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801001c:	2b00      	cmp	r3, #0
 801001e:	f47f af3b 	bne.w	800fe98 <HAL_SPI_TransmitReceive+0x2a4>
 8010022:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010024:	2b00      	cmp	r3, #0
 8010026:	f47f af37 	bne.w	800fe98 <HAL_SPI_TransmitReceive+0x2a4>
 801002a:	e0f2      	b.n	8010212 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	f003 0302 	and.w	r3, r3, #2
 8010036:	2b02      	cmp	r3, #2
 8010038:	d121      	bne.n	801007e <HAL_SPI_TransmitReceive+0x48a>
 801003a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01e      	beq.n	801007e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010040:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010042:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010048:	429a      	cmp	r2, r3
 801004a:	d218      	bcs.n	801007e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3320      	adds	r3, #32
 8010056:	7812      	ldrb	r2, [r2, #0]
 8010058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801006a:	b29b      	uxth	r3, r3
 801006c:	3b01      	subs	r3, #1
 801006e:	b29a      	uxth	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801007c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010086:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010088:	2b00      	cmp	r3, #0
 801008a:	f000 80ba 	beq.w	8010202 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	695b      	ldr	r3, [r3, #20]
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	2b01      	cmp	r3, #1
 801009a:	d11b      	bne.n	80100d4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100a8:	7812      	ldrb	r2, [r2, #0]
 80100aa:	b2d2      	uxtb	r2, r2
 80100ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100b2:	1c5a      	adds	r2, r3, #1
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80100be:	b29b      	uxth	r3, r3
 80100c0:	3b01      	subs	r3, #1
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80100d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80100d2:	e096      	b.n	8010202 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80100d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80100d6:	8bfb      	ldrh	r3, [r7, #30]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d24a      	bcs.n	8010172 <HAL_SPI_TransmitReceive+0x57e>
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d045      	beq.n	8010172 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100f2:	7812      	ldrb	r2, [r2, #0]
 80100f4:	b2d2      	uxtb	r2, r2
 80100f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801010e:	7812      	ldrb	r2, [r2, #0]
 8010110:	b2d2      	uxtb	r2, r2
 8010112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801012a:	7812      	ldrb	r2, [r2, #0]
 801012c:	b2d2      	uxtb	r2, r2
 801012e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010146:	7812      	ldrb	r2, [r2, #0]
 8010148:	b2d2      	uxtb	r2, r2
 801014a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010150:	1c5a      	adds	r2, r3, #1
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801015c:	b29b      	uxth	r3, r3
 801015e:	3b04      	subs	r3, #4
 8010160:	b29a      	uxth	r2, r3
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801016e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010170:	e047      	b.n	8010202 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010172:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010174:	2b03      	cmp	r3, #3
 8010176:	d820      	bhi.n	80101ba <HAL_SPI_TransmitReceive+0x5c6>
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801017e:	2b00      	cmp	r3, #0
 8010180:	d01b      	beq.n	80101ba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801018e:	7812      	ldrb	r2, [r2, #0]
 8010190:	b2d2      	uxtb	r2, r2
 8010192:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010198:	1c5a      	adds	r2, r3, #1
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	3b01      	subs	r3, #1
 80101a8:	b29a      	uxth	r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80101b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80101b8:	e023      	b.n	8010202 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101ba:	f7f5 fff5 	bl	80061a8 <HAL_GetTick>
 80101be:	4602      	mov	r2, r0
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d803      	bhi.n	80101d2 <HAL_SPI_TransmitReceive+0x5de>
 80101ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d0:	d102      	bne.n	80101d8 <HAL_SPI_TransmitReceive+0x5e4>
 80101d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d114      	bne.n	8010202 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f000 f845 	bl	8010268 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80101e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80101fe:	2303      	movs	r3, #3
 8010200:	e02d      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010202:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010204:	2b00      	cmp	r3, #0
 8010206:	f47f af11 	bne.w	801002c <HAL_SPI_TransmitReceive+0x438>
 801020a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801020c:	2b00      	cmp	r3, #0
 801020e:	f47f af0d 	bne.w	801002c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010218:	2200      	movs	r2, #0
 801021a:	2108      	movs	r1, #8
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 f8c3 	bl	80103a8 <SPI_WaitOnFlagUntilTimeout>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d007      	beq.n	8010238 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801022e:	f043 0220 	orr.w	r2, r3, #32
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f000 f815 	bl	8010268 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2200      	movs	r2, #0
 801024a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	e000      	b.n	801025e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 801025c:	2300      	movs	r3, #0
  }
}
 801025e:	4618      	mov	r0, r3
 8010260:	3730      	adds	r7, #48	@ 0x30
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop

08010268 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	695b      	ldr	r3, [r3, #20]
 8010276:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	699a      	ldr	r2, [r3, #24]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f042 0208 	orr.w	r2, r2, #8
 8010286:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f042 0210 	orr.w	r2, r2, #16
 8010296:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f022 0201 	bic.w	r2, r2, #1
 80102a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	6919      	ldr	r1, [r3, #16]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	4b3c      	ldr	r3, [pc, #240]	@ (80103a4 <SPI_CloseTransfer+0x13c>)
 80102b4:	400b      	ands	r3, r1
 80102b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	689a      	ldr	r2, [r3, #8]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80102c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	2b04      	cmp	r3, #4
 80102d2:	d014      	beq.n	80102fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f003 0320 	and.w	r3, r3, #32
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00f      	beq.n	80102fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	699a      	ldr	r2, [r3, #24]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f042 0220 	orr.w	r2, r2, #32
 80102fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010304:	b2db      	uxtb	r3, r3
 8010306:	2b03      	cmp	r3, #3
 8010308:	d014      	beq.n	8010334 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00f      	beq.n	8010334 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801031a:	f043 0204 	orr.w	r2, r3, #4
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	699a      	ldr	r2, [r3, #24]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010332:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00f      	beq.n	801035e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010344:	f043 0201 	orr.w	r2, r3, #1
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	699a      	ldr	r2, [r3, #24]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801035c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00f      	beq.n	8010388 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801036e:	f043 0208 	orr.w	r2, r3, #8
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	699a      	ldr	r2, [r3, #24]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010386:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010398:	bf00      	nop
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	fffffc90 	.word	0xfffffc90

080103a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	4613      	mov	r3, r2
 80103b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80103b8:	e010      	b.n	80103dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103ba:	f7f5 fef5 	bl	80061a8 <HAL_GetTick>
 80103be:	4602      	mov	r2, r0
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	1ad3      	subs	r3, r2, r3
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d803      	bhi.n	80103d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d0:	d102      	bne.n	80103d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d101      	bne.n	80103dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80103d8:	2303      	movs	r3, #3
 80103da:	e00f      	b.n	80103fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	695a      	ldr	r2, [r3, #20]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	4013      	ands	r3, r2
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	bf0c      	ite	eq
 80103ec:	2301      	moveq	r3, #1
 80103ee:	2300      	movne	r3, #0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	461a      	mov	r2, r3
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d0df      	beq.n	80103ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010410:	095b      	lsrs	r3, r3, #5
 8010412:	3301      	adds	r3, #1
 8010414:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	3301      	adds	r3, #1
 801041c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	3307      	adds	r3, #7
 8010422:	08db      	lsrs	r3, r3, #3
 8010424:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	fb02 f303 	mul.w	r3, r2, r3
}
 801042e:	4618      	mov	r0, r3
 8010430:	3714      	adds	r7, #20
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b082      	sub	sp, #8
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010448:	2301      	movs	r3, #1
 801044a:	e049      	b.n	80104e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d106      	bne.n	8010466 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7f2 f9c9 	bl	80027f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2202      	movs	r2, #2
 801046a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3304      	adds	r3, #4
 8010476:	4619      	mov	r1, r3
 8010478:	4610      	mov	r0, r2
 801047a:	f001 f9a3 	bl	80117c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2201      	movs	r2, #1
 8010482:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2201      	movs	r2, #1
 801048a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2201      	movs	r2, #1
 8010492:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2201      	movs	r2, #1
 801049a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2201      	movs	r2, #1
 80104a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2201      	movs	r2, #1
 80104c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2201      	movs	r2, #1
 80104ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80104de:	2300      	movs	r3, #0
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d001      	beq.n	8010500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80104fc:	2301      	movs	r3, #1
 80104fe:	e056      	b.n	80105ae <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2202      	movs	r2, #2
 8010504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a2b      	ldr	r2, [pc, #172]	@ (80105bc <HAL_TIM_Base_Start+0xd4>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d02c      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801051a:	d027      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a27      	ldr	r2, [pc, #156]	@ (80105c0 <HAL_TIM_Base_Start+0xd8>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d022      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a26      	ldr	r2, [pc, #152]	@ (80105c4 <HAL_TIM_Base_Start+0xdc>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d01d      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a24      	ldr	r2, [pc, #144]	@ (80105c8 <HAL_TIM_Base_Start+0xe0>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d018      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4a23      	ldr	r2, [pc, #140]	@ (80105cc <HAL_TIM_Base_Start+0xe4>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d013      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4a21      	ldr	r2, [pc, #132]	@ (80105d0 <HAL_TIM_Base_Start+0xe8>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d00e      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4a20      	ldr	r2, [pc, #128]	@ (80105d4 <HAL_TIM_Base_Start+0xec>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d009      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a1e      	ldr	r2, [pc, #120]	@ (80105d8 <HAL_TIM_Base_Start+0xf0>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d004      	beq.n	801056c <HAL_TIM_Base_Start+0x84>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4a1d      	ldr	r2, [pc, #116]	@ (80105dc <HAL_TIM_Base_Start+0xf4>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d115      	bne.n	8010598 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	689a      	ldr	r2, [r3, #8]
 8010572:	4b1b      	ldr	r3, [pc, #108]	@ (80105e0 <HAL_TIM_Base_Start+0xf8>)
 8010574:	4013      	ands	r3, r2
 8010576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b06      	cmp	r3, #6
 801057c:	d015      	beq.n	80105aa <HAL_TIM_Base_Start+0xc2>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010584:	d011      	beq.n	80105aa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f042 0201 	orr.w	r2, r2, #1
 8010594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010596:	e008      	b.n	80105aa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f042 0201 	orr.w	r2, r2, #1
 80105a6:	601a      	str	r2, [r3, #0]
 80105a8:	e000      	b.n	80105ac <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3714      	adds	r7, #20
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	40010000 	.word	0x40010000
 80105c0:	40000400 	.word	0x40000400
 80105c4:	40000800 	.word	0x40000800
 80105c8:	40000c00 	.word	0x40000c00
 80105cc:	40010400 	.word	0x40010400
 80105d0:	40001800 	.word	0x40001800
 80105d4:	40014000 	.word	0x40014000
 80105d8:	4000e000 	.word	0x4000e000
 80105dc:	4000e400 	.word	0x4000e400
 80105e0:	00010007 	.word	0x00010007

080105e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d001      	beq.n	80105fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e05e      	b.n	80106ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2202      	movs	r2, #2
 8010600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	68da      	ldr	r2, [r3, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f042 0201 	orr.w	r2, r2, #1
 8010612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a2b      	ldr	r2, [pc, #172]	@ (80106c8 <HAL_TIM_Base_Start_IT+0xe4>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d02c      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010626:	d027      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a27      	ldr	r2, [pc, #156]	@ (80106cc <HAL_TIM_Base_Start_IT+0xe8>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d022      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a26      	ldr	r2, [pc, #152]	@ (80106d0 <HAL_TIM_Base_Start_IT+0xec>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d01d      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a24      	ldr	r2, [pc, #144]	@ (80106d4 <HAL_TIM_Base_Start_IT+0xf0>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d018      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4a23      	ldr	r2, [pc, #140]	@ (80106d8 <HAL_TIM_Base_Start_IT+0xf4>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d013      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4a21      	ldr	r2, [pc, #132]	@ (80106dc <HAL_TIM_Base_Start_IT+0xf8>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d00e      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a20      	ldr	r2, [pc, #128]	@ (80106e0 <HAL_TIM_Base_Start_IT+0xfc>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d009      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a1e      	ldr	r2, [pc, #120]	@ (80106e4 <HAL_TIM_Base_Start_IT+0x100>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d004      	beq.n	8010678 <HAL_TIM_Base_Start_IT+0x94>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a1d      	ldr	r2, [pc, #116]	@ (80106e8 <HAL_TIM_Base_Start_IT+0x104>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d115      	bne.n	80106a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	689a      	ldr	r2, [r3, #8]
 801067e:	4b1b      	ldr	r3, [pc, #108]	@ (80106ec <HAL_TIM_Base_Start_IT+0x108>)
 8010680:	4013      	ands	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2b06      	cmp	r3, #6
 8010688:	d015      	beq.n	80106b6 <HAL_TIM_Base_Start_IT+0xd2>
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010690:	d011      	beq.n	80106b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f042 0201 	orr.w	r2, r2, #1
 80106a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106a2:	e008      	b.n	80106b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f042 0201 	orr.w	r2, r2, #1
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	e000      	b.n	80106b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3714      	adds	r7, #20
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	40010000 	.word	0x40010000
 80106cc:	40000400 	.word	0x40000400
 80106d0:	40000800 	.word	0x40000800
 80106d4:	40000c00 	.word	0x40000c00
 80106d8:	40010400 	.word	0x40010400
 80106dc:	40001800 	.word	0x40001800
 80106e0:	40014000 	.word	0x40014000
 80106e4:	4000e000 	.word	0x4000e000
 80106e8:	4000e400 	.word	0x4000e400
 80106ec:	00010007 	.word	0x00010007

080106f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d101      	bne.n	8010702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	e049      	b.n	8010796 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f841 	bl	801079e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2202      	movs	r2, #2
 8010720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3304      	adds	r3, #4
 801072c:	4619      	mov	r1, r3
 801072e:	4610      	mov	r0, r2
 8010730:	f001 f848 	bl	80117c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801079e:	b480      	push	{r7}
 80107a0:	b083      	sub	sp, #12
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
	...

080107b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d109      	bne.n	80107d8 <HAL_TIM_PWM_Start+0x24>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	bf14      	ite	ne
 80107d0:	2301      	movne	r3, #1
 80107d2:	2300      	moveq	r3, #0
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	e03c      	b.n	8010852 <HAL_TIM_PWM_Start+0x9e>
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2b04      	cmp	r3, #4
 80107dc:	d109      	bne.n	80107f2 <HAL_TIM_PWM_Start+0x3e>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	bf14      	ite	ne
 80107ea:	2301      	movne	r3, #1
 80107ec:	2300      	moveq	r3, #0
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	e02f      	b.n	8010852 <HAL_TIM_PWM_Start+0x9e>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b08      	cmp	r3, #8
 80107f6:	d109      	bne.n	801080c <HAL_TIM_PWM_Start+0x58>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	2b01      	cmp	r3, #1
 8010802:	bf14      	ite	ne
 8010804:	2301      	movne	r3, #1
 8010806:	2300      	moveq	r3, #0
 8010808:	b2db      	uxtb	r3, r3
 801080a:	e022      	b.n	8010852 <HAL_TIM_PWM_Start+0x9e>
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2b0c      	cmp	r3, #12
 8010810:	d109      	bne.n	8010826 <HAL_TIM_PWM_Start+0x72>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010818:	b2db      	uxtb	r3, r3
 801081a:	2b01      	cmp	r3, #1
 801081c:	bf14      	ite	ne
 801081e:	2301      	movne	r3, #1
 8010820:	2300      	moveq	r3, #0
 8010822:	b2db      	uxtb	r3, r3
 8010824:	e015      	b.n	8010852 <HAL_TIM_PWM_Start+0x9e>
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b10      	cmp	r3, #16
 801082a:	d109      	bne.n	8010840 <HAL_TIM_PWM_Start+0x8c>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b01      	cmp	r3, #1
 8010836:	bf14      	ite	ne
 8010838:	2301      	movne	r3, #1
 801083a:	2300      	moveq	r3, #0
 801083c:	b2db      	uxtb	r3, r3
 801083e:	e008      	b.n	8010852 <HAL_TIM_PWM_Start+0x9e>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010846:	b2db      	uxtb	r3, r3
 8010848:	2b01      	cmp	r3, #1
 801084a:	bf14      	ite	ne
 801084c:	2301      	movne	r3, #1
 801084e:	2300      	moveq	r3, #0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	e0ab      	b.n	80109b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d104      	bne.n	801086a <HAL_TIM_PWM_Start+0xb6>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2202      	movs	r2, #2
 8010864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010868:	e023      	b.n	80108b2 <HAL_TIM_PWM_Start+0xfe>
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b04      	cmp	r3, #4
 801086e:	d104      	bne.n	801087a <HAL_TIM_PWM_Start+0xc6>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2202      	movs	r2, #2
 8010874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010878:	e01b      	b.n	80108b2 <HAL_TIM_PWM_Start+0xfe>
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b08      	cmp	r3, #8
 801087e:	d104      	bne.n	801088a <HAL_TIM_PWM_Start+0xd6>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2202      	movs	r2, #2
 8010884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010888:	e013      	b.n	80108b2 <HAL_TIM_PWM_Start+0xfe>
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b0c      	cmp	r3, #12
 801088e:	d104      	bne.n	801089a <HAL_TIM_PWM_Start+0xe6>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2202      	movs	r2, #2
 8010894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010898:	e00b      	b.n	80108b2 <HAL_TIM_PWM_Start+0xfe>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	2b10      	cmp	r3, #16
 801089e:	d104      	bne.n	80108aa <HAL_TIM_PWM_Start+0xf6>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2202      	movs	r2, #2
 80108a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80108a8:	e003      	b.n	80108b2 <HAL_TIM_PWM_Start+0xfe>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2202      	movs	r2, #2
 80108ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2201      	movs	r2, #1
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f001 fba8 	bl	8012010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a3d      	ldr	r2, [pc, #244]	@ (80109bc <HAL_TIM_PWM_Start+0x208>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d013      	beq.n	80108f2 <HAL_TIM_PWM_Start+0x13e>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a3c      	ldr	r2, [pc, #240]	@ (80109c0 <HAL_TIM_PWM_Start+0x20c>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d00e      	beq.n	80108f2 <HAL_TIM_PWM_Start+0x13e>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a3a      	ldr	r2, [pc, #232]	@ (80109c4 <HAL_TIM_PWM_Start+0x210>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d009      	beq.n	80108f2 <HAL_TIM_PWM_Start+0x13e>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a39      	ldr	r2, [pc, #228]	@ (80109c8 <HAL_TIM_PWM_Start+0x214>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d004      	beq.n	80108f2 <HAL_TIM_PWM_Start+0x13e>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a37      	ldr	r2, [pc, #220]	@ (80109cc <HAL_TIM_PWM_Start+0x218>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d101      	bne.n	80108f6 <HAL_TIM_PWM_Start+0x142>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e000      	b.n	80108f8 <HAL_TIM_PWM_Start+0x144>
 80108f6:	2300      	movs	r3, #0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d007      	beq.n	801090c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801090a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a2a      	ldr	r2, [pc, #168]	@ (80109bc <HAL_TIM_PWM_Start+0x208>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d02c      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801091e:	d027      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a2a      	ldr	r2, [pc, #168]	@ (80109d0 <HAL_TIM_PWM_Start+0x21c>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d022      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a29      	ldr	r2, [pc, #164]	@ (80109d4 <HAL_TIM_PWM_Start+0x220>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d01d      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a27      	ldr	r2, [pc, #156]	@ (80109d8 <HAL_TIM_PWM_Start+0x224>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d018      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4a1f      	ldr	r2, [pc, #124]	@ (80109c0 <HAL_TIM_PWM_Start+0x20c>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d013      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a23      	ldr	r2, [pc, #140]	@ (80109dc <HAL_TIM_PWM_Start+0x228>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d00e      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a1b      	ldr	r2, [pc, #108]	@ (80109c4 <HAL_TIM_PWM_Start+0x210>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d009      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a1f      	ldr	r2, [pc, #124]	@ (80109e0 <HAL_TIM_PWM_Start+0x22c>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d004      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1bc>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a1e      	ldr	r2, [pc, #120]	@ (80109e4 <HAL_TIM_PWM_Start+0x230>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d115      	bne.n	801099c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	689a      	ldr	r2, [r3, #8]
 8010976:	4b1c      	ldr	r3, [pc, #112]	@ (80109e8 <HAL_TIM_PWM_Start+0x234>)
 8010978:	4013      	ands	r3, r2
 801097a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b06      	cmp	r3, #6
 8010980:	d015      	beq.n	80109ae <HAL_TIM_PWM_Start+0x1fa>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010988:	d011      	beq.n	80109ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f042 0201 	orr.w	r2, r2, #1
 8010998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801099a:	e008      	b.n	80109ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f042 0201 	orr.w	r2, r2, #1
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	e000      	b.n	80109b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80109b0:	2300      	movs	r3, #0
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3710      	adds	r7, #16
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	40010000 	.word	0x40010000
 80109c0:	40010400 	.word	0x40010400
 80109c4:	40014000 	.word	0x40014000
 80109c8:	40014400 	.word	0x40014400
 80109cc:	40014800 	.word	0x40014800
 80109d0:	40000400 	.word	0x40000400
 80109d4:	40000800 	.word	0x40000800
 80109d8:	40000c00 	.word	0x40000c00
 80109dc:	40001800 	.word	0x40001800
 80109e0:	4000e000 	.word	0x4000e000
 80109e4:	4000e400 	.word	0x4000e400
 80109e8:	00010007 	.word	0x00010007

080109ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	2200      	movs	r2, #0
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f001 fb06 	bl	8012010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a3e      	ldr	r2, [pc, #248]	@ (8010b04 <HAL_TIM_PWM_Stop+0x118>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d013      	beq.n	8010a36 <HAL_TIM_PWM_Stop+0x4a>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4a3d      	ldr	r2, [pc, #244]	@ (8010b08 <HAL_TIM_PWM_Stop+0x11c>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d00e      	beq.n	8010a36 <HAL_TIM_PWM_Stop+0x4a>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8010b0c <HAL_TIM_PWM_Stop+0x120>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d009      	beq.n	8010a36 <HAL_TIM_PWM_Stop+0x4a>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a3a      	ldr	r2, [pc, #232]	@ (8010b10 <HAL_TIM_PWM_Stop+0x124>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d004      	beq.n	8010a36 <HAL_TIM_PWM_Stop+0x4a>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4a38      	ldr	r2, [pc, #224]	@ (8010b14 <HAL_TIM_PWM_Stop+0x128>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d101      	bne.n	8010a3a <HAL_TIM_PWM_Stop+0x4e>
 8010a36:	2301      	movs	r3, #1
 8010a38:	e000      	b.n	8010a3c <HAL_TIM_PWM_Stop+0x50>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d017      	beq.n	8010a70 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6a1a      	ldr	r2, [r3, #32]
 8010a46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010a4a:	4013      	ands	r3, r2
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10f      	bne.n	8010a70 <HAL_TIM_PWM_Stop+0x84>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6a1a      	ldr	r2, [r3, #32]
 8010a56:	f240 4344 	movw	r3, #1092	@ 0x444
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d107      	bne.n	8010a70 <HAL_TIM_PWM_Stop+0x84>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	6a1a      	ldr	r2, [r3, #32]
 8010a76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10f      	bne.n	8010aa0 <HAL_TIM_PWM_Stop+0xb4>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6a1a      	ldr	r2, [r3, #32]
 8010a86:	f240 4344 	movw	r3, #1092	@ 0x444
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d107      	bne.n	8010aa0 <HAL_TIM_PWM_Stop+0xb4>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f022 0201 	bic.w	r2, r2, #1
 8010a9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d104      	bne.n	8010ab0 <HAL_TIM_PWM_Stop+0xc4>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010aae:	e023      	b.n	8010af8 <HAL_TIM_PWM_Stop+0x10c>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b04      	cmp	r3, #4
 8010ab4:	d104      	bne.n	8010ac0 <HAL_TIM_PWM_Stop+0xd4>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2201      	movs	r2, #1
 8010aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010abe:	e01b      	b.n	8010af8 <HAL_TIM_PWM_Stop+0x10c>
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	2b08      	cmp	r3, #8
 8010ac4:	d104      	bne.n	8010ad0 <HAL_TIM_PWM_Stop+0xe4>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010ace:	e013      	b.n	8010af8 <HAL_TIM_PWM_Stop+0x10c>
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	2b0c      	cmp	r3, #12
 8010ad4:	d104      	bne.n	8010ae0 <HAL_TIM_PWM_Stop+0xf4>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2201      	movs	r2, #1
 8010ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010ade:	e00b      	b.n	8010af8 <HAL_TIM_PWM_Stop+0x10c>
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b10      	cmp	r3, #16
 8010ae4:	d104      	bne.n	8010af0 <HAL_TIM_PWM_Stop+0x104>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010aee:	e003      	b.n	8010af8 <HAL_TIM_PWM_Stop+0x10c>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	40010000 	.word	0x40010000
 8010b08:	40010400 	.word	0x40010400
 8010b0c:	40014000 	.word	0x40014000
 8010b10:	40014400 	.word	0x40014400
 8010b14:	40014800 	.word	0x40014800

08010b18 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
 8010b24:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d109      	bne.n	8010b44 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	bf0c      	ite	eq
 8010b3c:	2301      	moveq	r3, #1
 8010b3e:	2300      	movne	r3, #0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	e03c      	b.n	8010bbe <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	2b04      	cmp	r3, #4
 8010b48:	d109      	bne.n	8010b5e <HAL_TIM_PWM_Start_DMA+0x46>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	bf0c      	ite	eq
 8010b56:	2301      	moveq	r3, #1
 8010b58:	2300      	movne	r3, #0
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	e02f      	b.n	8010bbe <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b08      	cmp	r3, #8
 8010b62:	d109      	bne.n	8010b78 <HAL_TIM_PWM_Start_DMA+0x60>
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	bf0c      	ite	eq
 8010b70:	2301      	moveq	r3, #1
 8010b72:	2300      	movne	r3, #0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	e022      	b.n	8010bbe <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	2b0c      	cmp	r3, #12
 8010b7c:	d109      	bne.n	8010b92 <HAL_TIM_PWM_Start_DMA+0x7a>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	bf0c      	ite	eq
 8010b8a:	2301      	moveq	r3, #1
 8010b8c:	2300      	movne	r3, #0
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	e015      	b.n	8010bbe <HAL_TIM_PWM_Start_DMA+0xa6>
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	2b10      	cmp	r3, #16
 8010b96:	d109      	bne.n	8010bac <HAL_TIM_PWM_Start_DMA+0x94>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	bf0c      	ite	eq
 8010ba4:	2301      	moveq	r3, #1
 8010ba6:	2300      	movne	r3, #0
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	e008      	b.n	8010bbe <HAL_TIM_PWM_Start_DMA+0xa6>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	bf0c      	ite	eq
 8010bb8:	2301      	moveq	r3, #1
 8010bba:	2300      	movne	r3, #0
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010bc2:	2302      	movs	r3, #2
 8010bc4:	e1ba      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d109      	bne.n	8010be0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	bf0c      	ite	eq
 8010bd8:	2301      	moveq	r3, #1
 8010bda:	2300      	movne	r3, #0
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	e03c      	b.n	8010c5a <HAL_TIM_PWM_Start_DMA+0x142>
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b04      	cmp	r3, #4
 8010be4:	d109      	bne.n	8010bfa <HAL_TIM_PWM_Start_DMA+0xe2>
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	bf0c      	ite	eq
 8010bf2:	2301      	moveq	r3, #1
 8010bf4:	2300      	movne	r3, #0
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	e02f      	b.n	8010c5a <HAL_TIM_PWM_Start_DMA+0x142>
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2b08      	cmp	r3, #8
 8010bfe:	d109      	bne.n	8010c14 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	bf0c      	ite	eq
 8010c0c:	2301      	moveq	r3, #1
 8010c0e:	2300      	movne	r3, #0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	e022      	b.n	8010c5a <HAL_TIM_PWM_Start_DMA+0x142>
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	2b0c      	cmp	r3, #12
 8010c18:	d109      	bne.n	8010c2e <HAL_TIM_PWM_Start_DMA+0x116>
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	bf0c      	ite	eq
 8010c26:	2301      	moveq	r3, #1
 8010c28:	2300      	movne	r3, #0
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	e015      	b.n	8010c5a <HAL_TIM_PWM_Start_DMA+0x142>
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	2b10      	cmp	r3, #16
 8010c32:	d109      	bne.n	8010c48 <HAL_TIM_PWM_Start_DMA+0x130>
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	bf0c      	ite	eq
 8010c40:	2301      	moveq	r3, #1
 8010c42:	2300      	movne	r3, #0
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	e008      	b.n	8010c5a <HAL_TIM_PWM_Start_DMA+0x142>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	bf0c      	ite	eq
 8010c54:	2301      	moveq	r3, #1
 8010c56:	2300      	movne	r3, #0
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d034      	beq.n	8010cc8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <HAL_TIM_PWM_Start_DMA+0x152>
 8010c64:	887b      	ldrh	r3, [r7, #2]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e166      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d104      	bne.n	8010c7e <HAL_TIM_PWM_Start_DMA+0x166>
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2202      	movs	r2, #2
 8010c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c7c:	e026      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	d104      	bne.n	8010c8e <HAL_TIM_PWM_Start_DMA+0x176>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2202      	movs	r2, #2
 8010c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c8c:	e01e      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	2b08      	cmp	r3, #8
 8010c92:	d104      	bne.n	8010c9e <HAL_TIM_PWM_Start_DMA+0x186>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2202      	movs	r2, #2
 8010c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010c9c:	e016      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b0c      	cmp	r3, #12
 8010ca2:	d104      	bne.n	8010cae <HAL_TIM_PWM_Start_DMA+0x196>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2202      	movs	r2, #2
 8010ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010cac:	e00e      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	2b10      	cmp	r3, #16
 8010cb2:	d104      	bne.n	8010cbe <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2202      	movs	r2, #2
 8010cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010cbc:	e006      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2202      	movs	r2, #2
 8010cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010cc6:	e001      	b.n	8010ccc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	e137      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	2b0c      	cmp	r3, #12
 8010cd0:	f200 80ae 	bhi.w	8010e30 <HAL_TIM_PWM_Start_DMA+0x318>
 8010cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8010cdc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cda:	bf00      	nop
 8010cdc:	08010d11 	.word	0x08010d11
 8010ce0:	08010e31 	.word	0x08010e31
 8010ce4:	08010e31 	.word	0x08010e31
 8010ce8:	08010e31 	.word	0x08010e31
 8010cec:	08010d59 	.word	0x08010d59
 8010cf0:	08010e31 	.word	0x08010e31
 8010cf4:	08010e31 	.word	0x08010e31
 8010cf8:	08010e31 	.word	0x08010e31
 8010cfc:	08010da1 	.word	0x08010da1
 8010d00:	08010e31 	.word	0x08010e31
 8010d04:	08010e31 	.word	0x08010e31
 8010d08:	08010e31 	.word	0x08010e31
 8010d0c:	08010de9 	.word	0x08010de9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d14:	4a8b      	ldr	r2, [pc, #556]	@ (8010f44 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d16:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d1c:	4a8a      	ldr	r2, [pc, #552]	@ (8010f48 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d24:	4a89      	ldr	r2, [pc, #548]	@ (8010f4c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d26:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010d2c:	6879      	ldr	r1, [r7, #4]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3334      	adds	r3, #52	@ 0x34
 8010d34:	461a      	mov	r2, r3
 8010d36:	887b      	ldrh	r3, [r7, #2]
 8010d38:	f7f7 fd72 	bl	8008820 <HAL_DMA_Start_IT>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d001      	beq.n	8010d46 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d42:	2301      	movs	r3, #1
 8010d44:	e0fa      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68da      	ldr	r2, [r3, #12]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d54:	60da      	str	r2, [r3, #12]
      break;
 8010d56:	e06e      	b.n	8010e36 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d5c:	4a79      	ldr	r2, [pc, #484]	@ (8010f44 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d64:	4a78      	ldr	r2, [pc, #480]	@ (8010f48 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010d66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d6c:	4a77      	ldr	r2, [pc, #476]	@ (8010f4c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010d74:	6879      	ldr	r1, [r7, #4]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	3338      	adds	r3, #56	@ 0x38
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	887b      	ldrh	r3, [r7, #2]
 8010d80:	f7f7 fd4e 	bl	8008820 <HAL_DMA_Start_IT>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e0d6      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	68da      	ldr	r2, [r3, #12]
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010d9c:	60da      	str	r2, [r3, #12]
      break;
 8010d9e:	e04a      	b.n	8010e36 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010da4:	4a67      	ldr	r2, [pc, #412]	@ (8010f44 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010da6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dac:	4a66      	ldr	r2, [pc, #408]	@ (8010f48 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010dae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db4:	4a65      	ldr	r2, [pc, #404]	@ (8010f4c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010db6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010dbc:	6879      	ldr	r1, [r7, #4]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	333c      	adds	r3, #60	@ 0x3c
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	887b      	ldrh	r3, [r7, #2]
 8010dc8:	f7f7 fd2a 	bl	8008820 <HAL_DMA_Start_IT>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e0b2      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68da      	ldr	r2, [r3, #12]
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010de4:	60da      	str	r2, [r3, #12]
      break;
 8010de6:	e026      	b.n	8010e36 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dec:	4a55      	ldr	r2, [pc, #340]	@ (8010f44 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010dee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010df4:	4a54      	ldr	r2, [pc, #336]	@ (8010f48 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010df6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dfc:	4a53      	ldr	r2, [pc, #332]	@ (8010f4c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010dfe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010e04:	6879      	ldr	r1, [r7, #4]
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3340      	adds	r3, #64	@ 0x40
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	887b      	ldrh	r3, [r7, #2]
 8010e10:	f7f7 fd06 	bl	8008820 <HAL_DMA_Start_IT>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d001      	beq.n	8010e1e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	e08e      	b.n	8010f3c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68da      	ldr	r2, [r3, #12]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010e2c:	60da      	str	r2, [r3, #12]
      break;
 8010e2e:	e002      	b.n	8010e36 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010e30:	2301      	movs	r3, #1
 8010e32:	75fb      	strb	r3, [r7, #23]
      break;
 8010e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e36:	7dfb      	ldrb	r3, [r7, #23]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d17e      	bne.n	8010f3a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2201      	movs	r2, #1
 8010e42:	68b9      	ldr	r1, [r7, #8]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 f8e3 	bl	8012010 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a40      	ldr	r2, [pc, #256]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d013      	beq.n	8010e7c <HAL_TIM_PWM_Start_DMA+0x364>
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a3e      	ldr	r2, [pc, #248]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d00e      	beq.n	8010e7c <HAL_TIM_PWM_Start_DMA+0x364>
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a3d      	ldr	r2, [pc, #244]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d009      	beq.n	8010e7c <HAL_TIM_PWM_Start_DMA+0x364>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8010f5c <HAL_TIM_PWM_Start_DMA+0x444>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d004      	beq.n	8010e7c <HAL_TIM_PWM_Start_DMA+0x364>
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a3a      	ldr	r2, [pc, #232]	@ (8010f60 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d101      	bne.n	8010e80 <HAL_TIM_PWM_Start_DMA+0x368>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	e000      	b.n	8010e82 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010e80:	2300      	movs	r3, #0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d007      	beq.n	8010e96 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8010f50 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d02c      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ea8:	d027      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a2d      	ldr	r2, [pc, #180]	@ (8010f64 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d022      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8010f68 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d01d      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8010f6c <HAL_TIM_PWM_Start_DMA+0x454>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d018      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a21      	ldr	r2, [pc, #132]	@ (8010f54 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d013      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a26      	ldr	r2, [pc, #152]	@ (8010f70 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d00e      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8010f58 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d009      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a22      	ldr	r2, [pc, #136]	@ (8010f74 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d004      	beq.n	8010efa <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a20      	ldr	r2, [pc, #128]	@ (8010f78 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d115      	bne.n	8010f26 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	689a      	ldr	r2, [r3, #8]
 8010f00:	4b1e      	ldr	r3, [pc, #120]	@ (8010f7c <HAL_TIM_PWM_Start_DMA+0x464>)
 8010f02:	4013      	ands	r3, r2
 8010f04:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	2b06      	cmp	r3, #6
 8010f0a:	d015      	beq.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x420>
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f12:	d011      	beq.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f042 0201 	orr.w	r2, r2, #1
 8010f22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f24:	e008      	b.n	8010f38 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f042 0201 	orr.w	r2, r2, #1
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	e000      	b.n	8010f3a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3718      	adds	r7, #24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	080116b3 	.word	0x080116b3
 8010f48:	0801175b 	.word	0x0801175b
 8010f4c:	08011621 	.word	0x08011621
 8010f50:	40010000 	.word	0x40010000
 8010f54:	40010400 	.word	0x40010400
 8010f58:	40014000 	.word	0x40014000
 8010f5c:	40014400 	.word	0x40014400
 8010f60:	40014800 	.word	0x40014800
 8010f64:	40000400 	.word	0x40000400
 8010f68:	40000800 	.word	0x40000800
 8010f6c:	40000c00 	.word	0x40000c00
 8010f70:	40001800 	.word	0x40001800
 8010f74:	4000e000 	.word	0x4000e000
 8010f78:	4000e400 	.word	0x4000e400
 8010f7c:	00010007 	.word	0x00010007

08010f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d020      	beq.n	8010fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f003 0302 	and.w	r3, r3, #2
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d01b      	beq.n	8010fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f06f 0202 	mvn.w	r2, #2
 8010fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	699b      	ldr	r3, [r3, #24]
 8010fc2:	f003 0303 	and.w	r3, r3, #3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d003      	beq.n	8010fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 faf6 	bl	80115bc <HAL_TIM_IC_CaptureCallback>
 8010fd0:	e005      	b.n	8010fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 fae8 	bl	80115a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 faf9 	bl	80115d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f003 0304 	and.w	r3, r3, #4
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d020      	beq.n	8011030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f003 0304 	and.w	r3, r3, #4
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01b      	beq.n	8011030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f06f 0204 	mvn.w	r2, #4
 8011000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2202      	movs	r2, #2
 8011006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	699b      	ldr	r3, [r3, #24]
 801100e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 fad0 	bl	80115bc <HAL_TIM_IC_CaptureCallback>
 801101c:	e005      	b.n	801102a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 fac2 	bl	80115a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 fad3 	bl	80115d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	f003 0308 	and.w	r3, r3, #8
 8011036:	2b00      	cmp	r3, #0
 8011038:	d020      	beq.n	801107c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f003 0308 	and.w	r3, r3, #8
 8011040:	2b00      	cmp	r3, #0
 8011042:	d01b      	beq.n	801107c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f06f 0208 	mvn.w	r2, #8
 801104c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2204      	movs	r2, #4
 8011052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	f003 0303 	and.w	r3, r3, #3
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 faaa 	bl	80115bc <HAL_TIM_IC_CaptureCallback>
 8011068:	e005      	b.n	8011076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 fa9c 	bl	80115a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 faad 	bl	80115d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	f003 0310 	and.w	r3, r3, #16
 8011082:	2b00      	cmp	r3, #0
 8011084:	d020      	beq.n	80110c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	f003 0310 	and.w	r3, r3, #16
 801108c:	2b00      	cmp	r3, #0
 801108e:	d01b      	beq.n	80110c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f06f 0210 	mvn.w	r2, #16
 8011098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2208      	movs	r2, #8
 801109e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	69db      	ldr	r3, [r3, #28]
 80110a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d003      	beq.n	80110b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 fa84 	bl	80115bc <HAL_TIM_IC_CaptureCallback>
 80110b4:	e005      	b.n	80110c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 fa76 	bl	80115a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fa87 	bl	80115d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2200      	movs	r2, #0
 80110c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	f003 0301 	and.w	r3, r3, #1
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00c      	beq.n	80110ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d007      	beq.n	80110ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f06f 0201 	mvn.w	r2, #1
 80110e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7f0 f890 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d104      	bne.n	8011100 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00c      	beq.n	801111a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011106:	2b00      	cmp	r3, #0
 8011108:	d007      	beq.n	801111a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8011112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f001 f847 	bl	80121a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00c      	beq.n	801113e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801112a:	2b00      	cmp	r3, #0
 801112c:	d007      	beq.n	801113e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f001 f83f 	bl	80121bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00c      	beq.n	8011162 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801114e:	2b00      	cmp	r3, #0
 8011150:	d007      	beq.n	8011162 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801115a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fa4b 	bl	80115f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	f003 0320 	and.w	r3, r3, #32
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00c      	beq.n	8011186 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f003 0320 	and.w	r3, r3, #32
 8011172:	2b00      	cmp	r3, #0
 8011174:	d007      	beq.n	8011186 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f06f 0220 	mvn.w	r2, #32
 801117e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f001 f807 	bl	8012194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011186:	bf00      	nop
 8011188:	3710      	adds	r7, #16
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
	...

08011190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801119c:	2300      	movs	r3, #0
 801119e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	d101      	bne.n	80111ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80111aa:	2302      	movs	r3, #2
 80111ac:	e0ff      	b.n	80113ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2201      	movs	r2, #1
 80111b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b14      	cmp	r3, #20
 80111ba:	f200 80f0 	bhi.w	801139e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80111be:	a201      	add	r2, pc, #4	@ (adr r2, 80111c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80111c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c4:	08011219 	.word	0x08011219
 80111c8:	0801139f 	.word	0x0801139f
 80111cc:	0801139f 	.word	0x0801139f
 80111d0:	0801139f 	.word	0x0801139f
 80111d4:	08011259 	.word	0x08011259
 80111d8:	0801139f 	.word	0x0801139f
 80111dc:	0801139f 	.word	0x0801139f
 80111e0:	0801139f 	.word	0x0801139f
 80111e4:	0801129b 	.word	0x0801129b
 80111e8:	0801139f 	.word	0x0801139f
 80111ec:	0801139f 	.word	0x0801139f
 80111f0:	0801139f 	.word	0x0801139f
 80111f4:	080112db 	.word	0x080112db
 80111f8:	0801139f 	.word	0x0801139f
 80111fc:	0801139f 	.word	0x0801139f
 8011200:	0801139f 	.word	0x0801139f
 8011204:	0801131d 	.word	0x0801131d
 8011208:	0801139f 	.word	0x0801139f
 801120c:	0801139f 	.word	0x0801139f
 8011210:	0801139f 	.word	0x0801139f
 8011214:	0801135d 	.word	0x0801135d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68b9      	ldr	r1, [r7, #8]
 801121e:	4618      	mov	r0, r3
 8011220:	f000 fb82 	bl	8011928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	699a      	ldr	r2, [r3, #24]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f042 0208 	orr.w	r2, r2, #8
 8011232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	699a      	ldr	r2, [r3, #24]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f022 0204 	bic.w	r2, r2, #4
 8011242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6999      	ldr	r1, [r3, #24]
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	691a      	ldr	r2, [r3, #16]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	430a      	orrs	r2, r1
 8011254:	619a      	str	r2, [r3, #24]
      break;
 8011256:	e0a5      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	4618      	mov	r0, r3
 8011260:	f000 fbf2 	bl	8011a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	699a      	ldr	r2, [r3, #24]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	699a      	ldr	r2, [r3, #24]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	6999      	ldr	r1, [r3, #24]
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	021a      	lsls	r2, r3, #8
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	430a      	orrs	r2, r1
 8011296:	619a      	str	r2, [r3, #24]
      break;
 8011298:	e084      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68b9      	ldr	r1, [r7, #8]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 fc5b 	bl	8011b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	69da      	ldr	r2, [r3, #28]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f042 0208 	orr.w	r2, r2, #8
 80112b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	69da      	ldr	r2, [r3, #28]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f022 0204 	bic.w	r2, r2, #4
 80112c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	69d9      	ldr	r1, [r3, #28]
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	691a      	ldr	r2, [r3, #16]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	430a      	orrs	r2, r1
 80112d6:	61da      	str	r2, [r3, #28]
      break;
 80112d8:	e064      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	68b9      	ldr	r1, [r7, #8]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f000 fcc3 	bl	8011c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	69da      	ldr	r2, [r3, #28]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	69da      	ldr	r2, [r3, #28]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	69d9      	ldr	r1, [r3, #28]
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	691b      	ldr	r3, [r3, #16]
 8011310:	021a      	lsls	r2, r3, #8
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	430a      	orrs	r2, r1
 8011318:	61da      	str	r2, [r3, #28]
      break;
 801131a:	e043      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	68b9      	ldr	r1, [r7, #8]
 8011322:	4618      	mov	r0, r3
 8011324:	f000 fd0c 	bl	8011d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f042 0208 	orr.w	r2, r2, #8
 8011336:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f022 0204 	bic.w	r2, r2, #4
 8011346:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	691a      	ldr	r2, [r3, #16]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	430a      	orrs	r2, r1
 8011358:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801135a:	e023      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68b9      	ldr	r1, [r7, #8]
 8011362:	4618      	mov	r0, r3
 8011364:	f000 fd50 	bl	8011e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011376:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011386:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	021a      	lsls	r2, r3, #8
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	430a      	orrs	r2, r1
 801139a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801139c:	e002      	b.n	80113a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	75fb      	strb	r3, [r7, #23]
      break;
 80113a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80113ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3718      	adds	r7, #24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop

080113b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80113c2:	2300      	movs	r3, #0
 80113c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d101      	bne.n	80113d4 <HAL_TIM_ConfigClockSource+0x1c>
 80113d0:	2302      	movs	r3, #2
 80113d2:	e0dc      	b.n	801158e <HAL_TIM_ConfigClockSource+0x1d6>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2201      	movs	r2, #1
 80113d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2202      	movs	r2, #2
 80113e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	4b6a      	ldr	r3, [pc, #424]	@ (8011598 <HAL_TIM_ConfigClockSource+0x1e0>)
 80113f0:	4013      	ands	r3, r2
 80113f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80113fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	68ba      	ldr	r2, [r7, #8]
 8011402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4a64      	ldr	r2, [pc, #400]	@ (801159c <HAL_TIM_ConfigClockSource+0x1e4>)
 801140a:	4293      	cmp	r3, r2
 801140c:	f000 80a9 	beq.w	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011410:	4a62      	ldr	r2, [pc, #392]	@ (801159c <HAL_TIM_ConfigClockSource+0x1e4>)
 8011412:	4293      	cmp	r3, r2
 8011414:	f200 80ae 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011418:	4a61      	ldr	r2, [pc, #388]	@ (80115a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801141a:	4293      	cmp	r3, r2
 801141c:	f000 80a1 	beq.w	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011420:	4a5f      	ldr	r2, [pc, #380]	@ (80115a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011422:	4293      	cmp	r3, r2
 8011424:	f200 80a6 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011428:	4a5e      	ldr	r2, [pc, #376]	@ (80115a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801142a:	4293      	cmp	r3, r2
 801142c:	f000 8099 	beq.w	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011430:	4a5c      	ldr	r2, [pc, #368]	@ (80115a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011432:	4293      	cmp	r3, r2
 8011434:	f200 809e 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011438:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801143c:	f000 8091 	beq.w	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011440:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011444:	f200 8096 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801144c:	f000 8089 	beq.w	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011454:	f200 808e 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801145c:	d03e      	beq.n	80114dc <HAL_TIM_ConfigClockSource+0x124>
 801145e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011462:	f200 8087 	bhi.w	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801146a:	f000 8086 	beq.w	801157a <HAL_TIM_ConfigClockSource+0x1c2>
 801146e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011472:	d87f      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011474:	2b70      	cmp	r3, #112	@ 0x70
 8011476:	d01a      	beq.n	80114ae <HAL_TIM_ConfigClockSource+0xf6>
 8011478:	2b70      	cmp	r3, #112	@ 0x70
 801147a:	d87b      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 801147c:	2b60      	cmp	r3, #96	@ 0x60
 801147e:	d050      	beq.n	8011522 <HAL_TIM_ConfigClockSource+0x16a>
 8011480:	2b60      	cmp	r3, #96	@ 0x60
 8011482:	d877      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011484:	2b50      	cmp	r3, #80	@ 0x50
 8011486:	d03c      	beq.n	8011502 <HAL_TIM_ConfigClockSource+0x14a>
 8011488:	2b50      	cmp	r3, #80	@ 0x50
 801148a:	d873      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 801148c:	2b40      	cmp	r3, #64	@ 0x40
 801148e:	d058      	beq.n	8011542 <HAL_TIM_ConfigClockSource+0x18a>
 8011490:	2b40      	cmp	r3, #64	@ 0x40
 8011492:	d86f      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 8011494:	2b30      	cmp	r3, #48	@ 0x30
 8011496:	d064      	beq.n	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 8011498:	2b30      	cmp	r3, #48	@ 0x30
 801149a:	d86b      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 801149c:	2b20      	cmp	r3, #32
 801149e:	d060      	beq.n	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 80114a0:	2b20      	cmp	r3, #32
 80114a2:	d867      	bhi.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d05c      	beq.n	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 80114a8:	2b10      	cmp	r3, #16
 80114aa:	d05a      	beq.n	8011562 <HAL_TIM_ConfigClockSource+0x1aa>
 80114ac:	e062      	b.n	8011574 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80114be:	f000 fd87 	bl	8011fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80114d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	68ba      	ldr	r2, [r7, #8]
 80114d8:	609a      	str	r2, [r3, #8]
      break;
 80114da:	e04f      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80114ec:	f000 fd70 	bl	8011fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	689a      	ldr	r2, [r3, #8]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80114fe:	609a      	str	r2, [r3, #8]
      break;
 8011500:	e03c      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801150e:	461a      	mov	r2, r3
 8011510:	f000 fce0 	bl	8011ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2150      	movs	r1, #80	@ 0x50
 801151a:	4618      	mov	r0, r3
 801151c:	f000 fd3a 	bl	8011f94 <TIM_ITRx_SetConfig>
      break;
 8011520:	e02c      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801152e:	461a      	mov	r2, r3
 8011530:	f000 fcff 	bl	8011f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2160      	movs	r1, #96	@ 0x60
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fd2a 	bl	8011f94 <TIM_ITRx_SetConfig>
      break;
 8011540:	e01c      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801154e:	461a      	mov	r2, r3
 8011550:	f000 fcc0 	bl	8011ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2140      	movs	r1, #64	@ 0x40
 801155a:	4618      	mov	r0, r3
 801155c:	f000 fd1a 	bl	8011f94 <TIM_ITRx_SetConfig>
      break;
 8011560:	e00c      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4619      	mov	r1, r3
 801156c:	4610      	mov	r0, r2
 801156e:	f000 fd11 	bl	8011f94 <TIM_ITRx_SetConfig>
      break;
 8011572:	e003      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	73fb      	strb	r3, [r7, #15]
      break;
 8011578:	e000      	b.n	801157c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801157a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2201      	movs	r2, #1
 8011580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801158c:	7bfb      	ldrb	r3, [r7, #15]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	ffceff88 	.word	0xffceff88
 801159c:	00100040 	.word	0x00100040
 80115a0:	00100030 	.word	0x00100030
 80115a4:	00100020 	.word	0x00100020

080115a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011614:	bf00      	nop
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801162c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	429a      	cmp	r2, r3
 8011636:	d107      	bne.n	8011648 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2201      	movs	r2, #1
 801163c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2201      	movs	r2, #1
 8011642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011646:	e02a      	b.n	801169e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	429a      	cmp	r2, r3
 8011650:	d107      	bne.n	8011662 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2202      	movs	r2, #2
 8011656:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2201      	movs	r2, #1
 801165c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011660:	e01d      	b.n	801169e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	429a      	cmp	r2, r3
 801166a:	d107      	bne.n	801167c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2204      	movs	r2, #4
 8011670:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2201      	movs	r2, #1
 8011676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801167a:	e010      	b.n	801169e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	429a      	cmp	r2, r3
 8011684:	d107      	bne.n	8011696 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2208      	movs	r2, #8
 801168a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2201      	movs	r2, #1
 8011690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011694:	e003      	b.n	801169e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2201      	movs	r2, #1
 801169a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7ff ffb4 	bl	801160c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2200      	movs	r2, #0
 80116a8:	771a      	strb	r2, [r3, #28]
}
 80116aa:	bf00      	nop
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b084      	sub	sp, #16
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d10b      	bne.n	80116e2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2201      	movs	r2, #1
 80116ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	69db      	ldr	r3, [r3, #28]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d136      	bne.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80116e0:	e031      	b.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d10b      	bne.n	8011704 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2202      	movs	r2, #2
 80116f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	69db      	ldr	r3, [r3, #28]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d125      	bne.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2201      	movs	r2, #1
 80116fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011702:	e020      	b.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	429a      	cmp	r2, r3
 801170c:	d10b      	bne.n	8011726 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2204      	movs	r2, #4
 8011712:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	69db      	ldr	r3, [r3, #28]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d114      	bne.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2201      	movs	r2, #1
 8011720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011724:	e00f      	b.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d10a      	bne.n	8011746 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2208      	movs	r2, #8
 8011734:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	69db      	ldr	r3, [r3, #28]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d103      	bne.n	8011746 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2201      	movs	r2, #1
 8011742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f7ff ff42 	bl	80115d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2200      	movs	r2, #0
 8011750:	771a      	strb	r2, [r3, #28]
}
 8011752:	bf00      	nop
 8011754:	3710      	adds	r7, #16
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b084      	sub	sp, #16
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011766:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	429a      	cmp	r2, r3
 8011770:	d103      	bne.n	801177a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2201      	movs	r2, #1
 8011776:	771a      	strb	r2, [r3, #28]
 8011778:	e019      	b.n	80117ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	429a      	cmp	r2, r3
 8011782:	d103      	bne.n	801178c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2202      	movs	r2, #2
 8011788:	771a      	strb	r2, [r3, #28]
 801178a:	e010      	b.n	80117ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	429a      	cmp	r2, r3
 8011794:	d103      	bne.n	801179e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2204      	movs	r2, #4
 801179a:	771a      	strb	r2, [r3, #28]
 801179c:	e007      	b.n	80117ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d102      	bne.n	80117ae <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2208      	movs	r2, #8
 80117ac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80117ae:	68f8      	ldr	r0, [r7, #12]
 80117b0:	f7ff ff18 	bl	80115e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2200      	movs	r2, #0
 80117b8:	771a      	strb	r2, [r3, #28]
}
 80117ba:	bf00      	nop
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
	...

080117c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a4a      	ldr	r2, [pc, #296]	@ (8011900 <TIM_Base_SetConfig+0x13c>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d013      	beq.n	8011804 <TIM_Base_SetConfig+0x40>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80117e2:	d00f      	beq.n	8011804 <TIM_Base_SetConfig+0x40>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a47      	ldr	r2, [pc, #284]	@ (8011904 <TIM_Base_SetConfig+0x140>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d00b      	beq.n	8011804 <TIM_Base_SetConfig+0x40>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4a46      	ldr	r2, [pc, #280]	@ (8011908 <TIM_Base_SetConfig+0x144>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d007      	beq.n	8011804 <TIM_Base_SetConfig+0x40>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4a45      	ldr	r2, [pc, #276]	@ (801190c <TIM_Base_SetConfig+0x148>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d003      	beq.n	8011804 <TIM_Base_SetConfig+0x40>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4a44      	ldr	r2, [pc, #272]	@ (8011910 <TIM_Base_SetConfig+0x14c>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d108      	bne.n	8011816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801180a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	4313      	orrs	r3, r2
 8011814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a39      	ldr	r2, [pc, #228]	@ (8011900 <TIM_Base_SetConfig+0x13c>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d027      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011824:	d023      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a36      	ldr	r2, [pc, #216]	@ (8011904 <TIM_Base_SetConfig+0x140>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d01f      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a35      	ldr	r2, [pc, #212]	@ (8011908 <TIM_Base_SetConfig+0x144>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d01b      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a34      	ldr	r2, [pc, #208]	@ (801190c <TIM_Base_SetConfig+0x148>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d017      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a33      	ldr	r2, [pc, #204]	@ (8011910 <TIM_Base_SetConfig+0x14c>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d013      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4a32      	ldr	r2, [pc, #200]	@ (8011914 <TIM_Base_SetConfig+0x150>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d00f      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4a31      	ldr	r2, [pc, #196]	@ (8011918 <TIM_Base_SetConfig+0x154>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d00b      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4a30      	ldr	r2, [pc, #192]	@ (801191c <TIM_Base_SetConfig+0x158>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d007      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4a2f      	ldr	r2, [pc, #188]	@ (8011920 <TIM_Base_SetConfig+0x15c>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d003      	beq.n	801186e <TIM_Base_SetConfig+0xaa>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a2e      	ldr	r2, [pc, #184]	@ (8011924 <TIM_Base_SetConfig+0x160>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d108      	bne.n	8011880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4313      	orrs	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	4313      	orrs	r3, r2
 801188c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	689a      	ldr	r2, [r3, #8]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4a16      	ldr	r2, [pc, #88]	@ (8011900 <TIM_Base_SetConfig+0x13c>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d00f      	beq.n	80118cc <TIM_Base_SetConfig+0x108>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4a18      	ldr	r2, [pc, #96]	@ (8011910 <TIM_Base_SetConfig+0x14c>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d00b      	beq.n	80118cc <TIM_Base_SetConfig+0x108>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4a17      	ldr	r2, [pc, #92]	@ (8011914 <TIM_Base_SetConfig+0x150>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d007      	beq.n	80118cc <TIM_Base_SetConfig+0x108>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a16      	ldr	r2, [pc, #88]	@ (8011918 <TIM_Base_SetConfig+0x154>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d003      	beq.n	80118cc <TIM_Base_SetConfig+0x108>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a15      	ldr	r2, [pc, #84]	@ (801191c <TIM_Base_SetConfig+0x158>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d103      	bne.n	80118d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	691a      	ldr	r2, [r3, #16]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	691b      	ldr	r3, [r3, #16]
 80118de:	f003 0301 	and.w	r3, r3, #1
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d105      	bne.n	80118f2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	f023 0201 	bic.w	r2, r3, #1
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	611a      	str	r2, [r3, #16]
  }
}
 80118f2:	bf00      	nop
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	40010000 	.word	0x40010000
 8011904:	40000400 	.word	0x40000400
 8011908:	40000800 	.word	0x40000800
 801190c:	40000c00 	.word	0x40000c00
 8011910:	40010400 	.word	0x40010400
 8011914:	40014000 	.word	0x40014000
 8011918:	40014400 	.word	0x40014400
 801191c:	40014800 	.word	0x40014800
 8011920:	4000e000 	.word	0x4000e000
 8011924:	4000e400 	.word	0x4000e400

08011928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011928:	b480      	push	{r7}
 801192a:	b087      	sub	sp, #28
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a1b      	ldr	r3, [r3, #32]
 8011936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6a1b      	ldr	r3, [r3, #32]
 801193c:	f023 0201 	bic.w	r2, r3, #1
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	4b37      	ldr	r3, [pc, #220]	@ (8011a30 <TIM_OC1_SetConfig+0x108>)
 8011954:	4013      	ands	r3, r2
 8011956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f023 0303 	bic.w	r3, r3, #3
 801195e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	68fa      	ldr	r2, [r7, #12]
 8011966:	4313      	orrs	r3, r2
 8011968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	f023 0302 	bic.w	r3, r3, #2
 8011970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	4313      	orrs	r3, r2
 801197a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4a2d      	ldr	r2, [pc, #180]	@ (8011a34 <TIM_OC1_SetConfig+0x10c>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d00f      	beq.n	80119a4 <TIM_OC1_SetConfig+0x7c>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4a2c      	ldr	r2, [pc, #176]	@ (8011a38 <TIM_OC1_SetConfig+0x110>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d00b      	beq.n	80119a4 <TIM_OC1_SetConfig+0x7c>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4a2b      	ldr	r2, [pc, #172]	@ (8011a3c <TIM_OC1_SetConfig+0x114>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d007      	beq.n	80119a4 <TIM_OC1_SetConfig+0x7c>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4a2a      	ldr	r2, [pc, #168]	@ (8011a40 <TIM_OC1_SetConfig+0x118>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d003      	beq.n	80119a4 <TIM_OC1_SetConfig+0x7c>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4a29      	ldr	r2, [pc, #164]	@ (8011a44 <TIM_OC1_SetConfig+0x11c>)
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d10c      	bne.n	80119be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	f023 0308 	bic.w	r3, r3, #8
 80119aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	697a      	ldr	r2, [r7, #20]
 80119b2:	4313      	orrs	r3, r2
 80119b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f023 0304 	bic.w	r3, r3, #4
 80119bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4a1c      	ldr	r2, [pc, #112]	@ (8011a34 <TIM_OC1_SetConfig+0x10c>)
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d00f      	beq.n	80119e6 <TIM_OC1_SetConfig+0xbe>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4a1b      	ldr	r2, [pc, #108]	@ (8011a38 <TIM_OC1_SetConfig+0x110>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d00b      	beq.n	80119e6 <TIM_OC1_SetConfig+0xbe>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	4a1a      	ldr	r2, [pc, #104]	@ (8011a3c <TIM_OC1_SetConfig+0x114>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d007      	beq.n	80119e6 <TIM_OC1_SetConfig+0xbe>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	4a19      	ldr	r2, [pc, #100]	@ (8011a40 <TIM_OC1_SetConfig+0x118>)
 80119da:	4293      	cmp	r3, r2
 80119dc:	d003      	beq.n	80119e6 <TIM_OC1_SetConfig+0xbe>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	4a18      	ldr	r2, [pc, #96]	@ (8011a44 <TIM_OC1_SetConfig+0x11c>)
 80119e2:	4293      	cmp	r3, r2
 80119e4:	d111      	bne.n	8011a0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80119ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80119f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	695b      	ldr	r3, [r3, #20]
 80119fa:	693a      	ldr	r2, [r7, #16]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	699b      	ldr	r3, [r3, #24]
 8011a04:	693a      	ldr	r2, [r7, #16]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	693a      	ldr	r2, [r7, #16]
 8011a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68fa      	ldr	r2, [r7, #12]
 8011a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	697a      	ldr	r2, [r7, #20]
 8011a22:	621a      	str	r2, [r3, #32]
}
 8011a24:	bf00      	nop
 8011a26:	371c      	adds	r7, #28
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	fffeff8f 	.word	0xfffeff8f
 8011a34:	40010000 	.word	0x40010000
 8011a38:	40010400 	.word	0x40010400
 8011a3c:	40014000 	.word	0x40014000
 8011a40:	40014400 	.word	0x40014400
 8011a44:	40014800 	.word	0x40014800

08011a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6a1b      	ldr	r3, [r3, #32]
 8011a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	f023 0210 	bic.w	r2, r3, #16
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	4b34      	ldr	r3, [pc, #208]	@ (8011b44 <TIM_OC2_SetConfig+0xfc>)
 8011a74:	4013      	ands	r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	021b      	lsls	r3, r3, #8
 8011a86:	68fa      	ldr	r2, [r7, #12]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	f023 0320 	bic.w	r3, r3, #32
 8011a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	011b      	lsls	r3, r3, #4
 8011a9a:	697a      	ldr	r2, [r7, #20]
 8011a9c:	4313      	orrs	r3, r2
 8011a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4a29      	ldr	r2, [pc, #164]	@ (8011b48 <TIM_OC2_SetConfig+0x100>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d003      	beq.n	8011ab0 <TIM_OC2_SetConfig+0x68>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a28      	ldr	r2, [pc, #160]	@ (8011b4c <TIM_OC2_SetConfig+0x104>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d10d      	bne.n	8011acc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	011b      	lsls	r3, r3, #4
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a1e      	ldr	r2, [pc, #120]	@ (8011b48 <TIM_OC2_SetConfig+0x100>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d00f      	beq.n	8011af4 <TIM_OC2_SetConfig+0xac>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8011b4c <TIM_OC2_SetConfig+0x104>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d00b      	beq.n	8011af4 <TIM_OC2_SetConfig+0xac>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4a1c      	ldr	r2, [pc, #112]	@ (8011b50 <TIM_OC2_SetConfig+0x108>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d007      	beq.n	8011af4 <TIM_OC2_SetConfig+0xac>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8011b54 <TIM_OC2_SetConfig+0x10c>)
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	d003      	beq.n	8011af4 <TIM_OC2_SetConfig+0xac>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4a1a      	ldr	r2, [pc, #104]	@ (8011b58 <TIM_OC2_SetConfig+0x110>)
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d113      	bne.n	8011b1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	693a      	ldr	r2, [r7, #16]
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	699b      	ldr	r3, [r3, #24]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	693a      	ldr	r2, [r7, #16]
 8011b18:	4313      	orrs	r3, r2
 8011b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	68fa      	ldr	r2, [r7, #12]
 8011b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	685a      	ldr	r2, [r3, #4]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	697a      	ldr	r2, [r7, #20]
 8011b34:	621a      	str	r2, [r3, #32]
}
 8011b36:	bf00      	nop
 8011b38:	371c      	adds	r7, #28
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	feff8fff 	.word	0xfeff8fff
 8011b48:	40010000 	.word	0x40010000
 8011b4c:	40010400 	.word	0x40010400
 8011b50:	40014000 	.word	0x40014000
 8011b54:	40014400 	.word	0x40014400
 8011b58:	40014800 	.word	0x40014800

08011b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b087      	sub	sp, #28
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6a1b      	ldr	r3, [r3, #32]
 8011b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a1b      	ldr	r3, [r3, #32]
 8011b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	69db      	ldr	r3, [r3, #28]
 8011b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b84:	68fa      	ldr	r2, [r7, #12]
 8011b86:	4b33      	ldr	r3, [pc, #204]	@ (8011c54 <TIM_OC3_SetConfig+0xf8>)
 8011b88:	4013      	ands	r3, r2
 8011b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f023 0303 	bic.w	r3, r3, #3
 8011b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	689b      	ldr	r3, [r3, #8]
 8011baa:	021b      	lsls	r3, r3, #8
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4a28      	ldr	r2, [pc, #160]	@ (8011c58 <TIM_OC3_SetConfig+0xfc>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d003      	beq.n	8011bc2 <TIM_OC3_SetConfig+0x66>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4a27      	ldr	r2, [pc, #156]	@ (8011c5c <TIM_OC3_SetConfig+0x100>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d10d      	bne.n	8011bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	021b      	lsls	r3, r3, #8
 8011bd0:	697a      	ldr	r2, [r7, #20]
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a1d      	ldr	r2, [pc, #116]	@ (8011c58 <TIM_OC3_SetConfig+0xfc>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d00f      	beq.n	8011c06 <TIM_OC3_SetConfig+0xaa>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a1c      	ldr	r2, [pc, #112]	@ (8011c5c <TIM_OC3_SetConfig+0x100>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d00b      	beq.n	8011c06 <TIM_OC3_SetConfig+0xaa>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8011c60 <TIM_OC3_SetConfig+0x104>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d007      	beq.n	8011c06 <TIM_OC3_SetConfig+0xaa>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8011c64 <TIM_OC3_SetConfig+0x108>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d003      	beq.n	8011c06 <TIM_OC3_SetConfig+0xaa>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4a19      	ldr	r2, [pc, #100]	@ (8011c68 <TIM_OC3_SetConfig+0x10c>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d113      	bne.n	8011c2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	695b      	ldr	r3, [r3, #20]
 8011c1a:	011b      	lsls	r3, r3, #4
 8011c1c:	693a      	ldr	r2, [r7, #16]
 8011c1e:	4313      	orrs	r3, r2
 8011c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	699b      	ldr	r3, [r3, #24]
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	693a      	ldr	r2, [r7, #16]
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	693a      	ldr	r2, [r7, #16]
 8011c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	68fa      	ldr	r2, [r7, #12]
 8011c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	685a      	ldr	r2, [r3, #4]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	697a      	ldr	r2, [r7, #20]
 8011c46:	621a      	str	r2, [r3, #32]
}
 8011c48:	bf00      	nop
 8011c4a:	371c      	adds	r7, #28
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	fffeff8f 	.word	0xfffeff8f
 8011c58:	40010000 	.word	0x40010000
 8011c5c:	40010400 	.word	0x40010400
 8011c60:	40014000 	.word	0x40014000
 8011c64:	40014400 	.word	0x40014400
 8011c68:	40014800 	.word	0x40014800

08011c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a1b      	ldr	r3, [r3, #32]
 8011c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6a1b      	ldr	r3, [r3, #32]
 8011c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	69db      	ldr	r3, [r3, #28]
 8011c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	4b24      	ldr	r3, [pc, #144]	@ (8011d28 <TIM_OC4_SetConfig+0xbc>)
 8011c98:	4013      	ands	r3, r2
 8011c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	021b      	lsls	r3, r3, #8
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	689b      	ldr	r3, [r3, #8]
 8011cbc:	031b      	lsls	r3, r3, #12
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	4313      	orrs	r3, r2
 8011cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a19      	ldr	r2, [pc, #100]	@ (8011d2c <TIM_OC4_SetConfig+0xc0>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d00f      	beq.n	8011cec <TIM_OC4_SetConfig+0x80>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4a18      	ldr	r2, [pc, #96]	@ (8011d30 <TIM_OC4_SetConfig+0xc4>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d00b      	beq.n	8011cec <TIM_OC4_SetConfig+0x80>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	4a17      	ldr	r2, [pc, #92]	@ (8011d34 <TIM_OC4_SetConfig+0xc8>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d007      	beq.n	8011cec <TIM_OC4_SetConfig+0x80>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	4a16      	ldr	r2, [pc, #88]	@ (8011d38 <TIM_OC4_SetConfig+0xcc>)
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d003      	beq.n	8011cec <TIM_OC4_SetConfig+0x80>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4a15      	ldr	r2, [pc, #84]	@ (8011d3c <TIM_OC4_SetConfig+0xd0>)
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d109      	bne.n	8011d00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	695b      	ldr	r3, [r3, #20]
 8011cf8:	019b      	lsls	r3, r3, #6
 8011cfa:	697a      	ldr	r2, [r7, #20]
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	697a      	ldr	r2, [r7, #20]
 8011d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	693a      	ldr	r2, [r7, #16]
 8011d18:	621a      	str	r2, [r3, #32]
}
 8011d1a:	bf00      	nop
 8011d1c:	371c      	adds	r7, #28
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	feff8fff 	.word	0xfeff8fff
 8011d2c:	40010000 	.word	0x40010000
 8011d30:	40010400 	.word	0x40010400
 8011d34:	40014000 	.word	0x40014000
 8011d38:	40014400 	.word	0x40014400
 8011d3c:	40014800 	.word	0x40014800

08011d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a1b      	ldr	r3, [r3, #32]
 8011d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6a1b      	ldr	r3, [r3, #32]
 8011d54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	4b21      	ldr	r3, [pc, #132]	@ (8011df0 <TIM_OC5_SetConfig+0xb0>)
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	4313      	orrs	r3, r2
 8011d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	041b      	lsls	r3, r3, #16
 8011d88:	693a      	ldr	r2, [r7, #16]
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	4a18      	ldr	r2, [pc, #96]	@ (8011df4 <TIM_OC5_SetConfig+0xb4>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d00f      	beq.n	8011db6 <TIM_OC5_SetConfig+0x76>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4a17      	ldr	r2, [pc, #92]	@ (8011df8 <TIM_OC5_SetConfig+0xb8>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d00b      	beq.n	8011db6 <TIM_OC5_SetConfig+0x76>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	4a16      	ldr	r2, [pc, #88]	@ (8011dfc <TIM_OC5_SetConfig+0xbc>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d007      	beq.n	8011db6 <TIM_OC5_SetConfig+0x76>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	4a15      	ldr	r2, [pc, #84]	@ (8011e00 <TIM_OC5_SetConfig+0xc0>)
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d003      	beq.n	8011db6 <TIM_OC5_SetConfig+0x76>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4a14      	ldr	r2, [pc, #80]	@ (8011e04 <TIM_OC5_SetConfig+0xc4>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d109      	bne.n	8011dca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	695b      	ldr	r3, [r3, #20]
 8011dc2:	021b      	lsls	r3, r3, #8
 8011dc4:	697a      	ldr	r2, [r7, #20]
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	697a      	ldr	r2, [r7, #20]
 8011dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	685a      	ldr	r2, [r3, #4]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	693a      	ldr	r2, [r7, #16]
 8011de2:	621a      	str	r2, [r3, #32]
}
 8011de4:	bf00      	nop
 8011de6:	371c      	adds	r7, #28
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	fffeff8f 	.word	0xfffeff8f
 8011df4:	40010000 	.word	0x40010000
 8011df8:	40010400 	.word	0x40010400
 8011dfc:	40014000 	.word	0x40014000
 8011e00:	40014400 	.word	0x40014400
 8011e04:	40014800 	.word	0x40014800

08011e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b087      	sub	sp, #28
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6a1b      	ldr	r3, [r3, #32]
 8011e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a1b      	ldr	r3, [r3, #32]
 8011e1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	4b22      	ldr	r3, [pc, #136]	@ (8011ebc <TIM_OC6_SetConfig+0xb4>)
 8011e34:	4013      	ands	r3, r2
 8011e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	021b      	lsls	r3, r3, #8
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	4313      	orrs	r3, r2
 8011e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	051b      	lsls	r3, r3, #20
 8011e52:	693a      	ldr	r2, [r7, #16]
 8011e54:	4313      	orrs	r3, r2
 8011e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4a19      	ldr	r2, [pc, #100]	@ (8011ec0 <TIM_OC6_SetConfig+0xb8>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d00f      	beq.n	8011e80 <TIM_OC6_SetConfig+0x78>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	4a18      	ldr	r2, [pc, #96]	@ (8011ec4 <TIM_OC6_SetConfig+0xbc>)
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d00b      	beq.n	8011e80 <TIM_OC6_SetConfig+0x78>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4a17      	ldr	r2, [pc, #92]	@ (8011ec8 <TIM_OC6_SetConfig+0xc0>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d007      	beq.n	8011e80 <TIM_OC6_SetConfig+0x78>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	4a16      	ldr	r2, [pc, #88]	@ (8011ecc <TIM_OC6_SetConfig+0xc4>)
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d003      	beq.n	8011e80 <TIM_OC6_SetConfig+0x78>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	4a15      	ldr	r2, [pc, #84]	@ (8011ed0 <TIM_OC6_SetConfig+0xc8>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d109      	bne.n	8011e94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011e86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	695b      	ldr	r3, [r3, #20]
 8011e8c:	029b      	lsls	r3, r3, #10
 8011e8e:	697a      	ldr	r2, [r7, #20]
 8011e90:	4313      	orrs	r3, r2
 8011e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	697a      	ldr	r2, [r7, #20]
 8011e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	685a      	ldr	r2, [r3, #4]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	621a      	str	r2, [r3, #32]
}
 8011eae:	bf00      	nop
 8011eb0:	371c      	adds	r7, #28
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	feff8fff 	.word	0xfeff8fff
 8011ec0:	40010000 	.word	0x40010000
 8011ec4:	40010400 	.word	0x40010400
 8011ec8:	40014000 	.word	0x40014000
 8011ecc:	40014400 	.word	0x40014400
 8011ed0:	40014800 	.word	0x40014800

08011ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b087      	sub	sp, #28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	60b9      	str	r1, [r7, #8]
 8011ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6a1b      	ldr	r3, [r3, #32]
 8011ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6a1b      	ldr	r3, [r3, #32]
 8011eea:	f023 0201 	bic.w	r2, r3, #1
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	011b      	lsls	r3, r3, #4
 8011f04:	693a      	ldr	r2, [r7, #16]
 8011f06:	4313      	orrs	r3, r2
 8011f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	f023 030a 	bic.w	r3, r3, #10
 8011f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011f12:	697a      	ldr	r2, [r7, #20]
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	4313      	orrs	r3, r2
 8011f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	693a      	ldr	r2, [r7, #16]
 8011f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	697a      	ldr	r2, [r7, #20]
 8011f24:	621a      	str	r2, [r3, #32]
}
 8011f26:	bf00      	nop
 8011f28:	371c      	adds	r7, #28
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011f32:	b480      	push	{r7}
 8011f34:	b087      	sub	sp, #28
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	60f8      	str	r0, [r7, #12]
 8011f3a:	60b9      	str	r1, [r7, #8]
 8011f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	6a1b      	ldr	r3, [r3, #32]
 8011f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	6a1b      	ldr	r3, [r3, #32]
 8011f48:	f023 0210 	bic.w	r2, r3, #16
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	031b      	lsls	r3, r3, #12
 8011f62:	693a      	ldr	r2, [r7, #16]
 8011f64:	4313      	orrs	r3, r2
 8011f66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011f6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	011b      	lsls	r3, r3, #4
 8011f74:	697a      	ldr	r2, [r7, #20]
 8011f76:	4313      	orrs	r3, r2
 8011f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	693a      	ldr	r2, [r7, #16]
 8011f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	697a      	ldr	r2, [r7, #20]
 8011f84:	621a      	str	r2, [r3, #32]
}
 8011f86:	bf00      	nop
 8011f88:	371c      	adds	r7, #28
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
	...

08011f94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	689b      	ldr	r3, [r3, #8]
 8011fa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011fa4:	68fa      	ldr	r2, [r7, #12]
 8011fa6:	4b09      	ldr	r3, [pc, #36]	@ (8011fcc <TIM_ITRx_SetConfig+0x38>)
 8011fa8:	4013      	ands	r3, r2
 8011faa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011fac:	683a      	ldr	r2, [r7, #0]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	f043 0307 	orr.w	r3, r3, #7
 8011fb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	609a      	str	r2, [r3, #8]
}
 8011fbe:	bf00      	nop
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	ffcfff8f 	.word	0xffcfff8f

08011fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b087      	sub	sp, #28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
 8011fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	021a      	lsls	r2, r3, #8
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	431a      	orrs	r2, r3
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	697a      	ldr	r2, [r7, #20]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	609a      	str	r2, [r3, #8]
}
 8012004:	bf00      	nop
 8012006:	371c      	adds	r7, #28
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012010:	b480      	push	{r7}
 8012012:	b087      	sub	sp, #28
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	f003 031f 	and.w	r3, r3, #31
 8012022:	2201      	movs	r2, #1
 8012024:	fa02 f303 	lsl.w	r3, r2, r3
 8012028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6a1a      	ldr	r2, [r3, #32]
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	43db      	mvns	r3, r3
 8012032:	401a      	ands	r2, r3
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6a1a      	ldr	r2, [r3, #32]
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	f003 031f 	and.w	r3, r3, #31
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	fa01 f303 	lsl.w	r3, r1, r3
 8012048:	431a      	orrs	r2, r3
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	621a      	str	r2, [r3, #32]
}
 801204e:	bf00      	nop
 8012050:	371c      	adds	r7, #28
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr
	...

0801205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801205c:	b480      	push	{r7}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801206c:	2b01      	cmp	r3, #1
 801206e:	d101      	bne.n	8012074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012070:	2302      	movs	r3, #2
 8012072:	e077      	b.n	8012164 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2201      	movs	r2, #1
 8012078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2202      	movs	r2, #2
 8012080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	689b      	ldr	r3, [r3, #8]
 8012092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a35      	ldr	r2, [pc, #212]	@ (8012170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d004      	beq.n	80120a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	4a34      	ldr	r2, [pc, #208]	@ (8012174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d108      	bne.n	80120ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80120ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	4313      	orrs	r3, r2
 80120b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80120c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	68fa      	ldr	r2, [r7, #12]
 80120c8:	4313      	orrs	r3, r2
 80120ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a25      	ldr	r2, [pc, #148]	@ (8012170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d02c      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120e6:	d027      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4a22      	ldr	r2, [pc, #136]	@ (8012178 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d022      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4a21      	ldr	r2, [pc, #132]	@ (801217c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d01d      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4a1f      	ldr	r2, [pc, #124]	@ (8012180 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d018      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a1a      	ldr	r2, [pc, #104]	@ (8012174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801210c:	4293      	cmp	r3, r2
 801210e:	d013      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	4a1b      	ldr	r2, [pc, #108]	@ (8012184 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012116:	4293      	cmp	r3, r2
 8012118:	d00e      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	4a1a      	ldr	r2, [pc, #104]	@ (8012188 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012120:	4293      	cmp	r3, r2
 8012122:	d009      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4a18      	ldr	r2, [pc, #96]	@ (801218c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801212a:	4293      	cmp	r3, r2
 801212c:	d004      	beq.n	8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4a17      	ldr	r2, [pc, #92]	@ (8012190 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012134:	4293      	cmp	r3, r2
 8012136:	d10c      	bne.n	8012152 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801213e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	4313      	orrs	r3, r2
 8012148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	68ba      	ldr	r2, [r7, #8]
 8012150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2201      	movs	r2, #1
 8012156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012162:	2300      	movs	r3, #0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3714      	adds	r7, #20
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	40010000 	.word	0x40010000
 8012174:	40010400 	.word	0x40010400
 8012178:	40000400 	.word	0x40000400
 801217c:	40000800 	.word	0x40000800
 8012180:	40000c00 	.word	0x40000c00
 8012184:	40001800 	.word	0x40001800
 8012188:	40014000 	.word	0x40014000
 801218c:	4000e000 	.word	0x4000e000
 8012190:	4000e400 	.word	0x4000e400

08012194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801219c:	bf00      	nop
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr

080121a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80121c4:	bf00      	nop
 80121c6:	370c      	adds	r7, #12
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80121de:	2301      	movs	r3, #1
 80121e0:	e042      	b.n	8012268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d106      	bne.n	80121fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7f0 fc03 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2224      	movs	r2, #36	@ 0x24
 80121fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f022 0201 	bic.w	r2, r2, #1
 8012210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012216:	2b00      	cmp	r3, #0
 8012218:	d002      	beq.n	8012220 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fe94 	bl	8012f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f825 	bl	8012270 <UART_SetConfig>
 8012226:	4603      	mov	r3, r0
 8012228:	2b01      	cmp	r3, #1
 801222a:	d101      	bne.n	8012230 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801222c:	2301      	movs	r3, #1
 801222e:	e01b      	b.n	8012268 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801223e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801224e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f042 0201 	orr.w	r2, r2, #1
 801225e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 ff13 	bl	801308c <UART_CheckIdleState>
 8012266:	4603      	mov	r3, r0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012274:	b092      	sub	sp, #72	@ 0x48
 8012276:	af00      	add	r7, sp, #0
 8012278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	689a      	ldr	r2, [r3, #8]
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	691b      	ldr	r3, [r3, #16]
 8012288:	431a      	orrs	r2, r3
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	695b      	ldr	r3, [r3, #20]
 801228e:	431a      	orrs	r2, r3
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	69db      	ldr	r3, [r3, #28]
 8012294:	4313      	orrs	r3, r2
 8012296:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	4bbe      	ldr	r3, [pc, #760]	@ (8012598 <UART_SetConfig+0x328>)
 80122a0:	4013      	ands	r3, r2
 80122a2:	697a      	ldr	r2, [r7, #20]
 80122a4:	6812      	ldr	r2, [r2, #0]
 80122a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80122a8:	430b      	orrs	r3, r1
 80122aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	68da      	ldr	r2, [r3, #12]
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	430a      	orrs	r2, r1
 80122c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4ab3      	ldr	r2, [pc, #716]	@ (801259c <UART_SetConfig+0x32c>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d004      	beq.n	80122dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	6a1b      	ldr	r3, [r3, #32]
 80122d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122d8:	4313      	orrs	r3, r2
 80122da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	689a      	ldr	r2, [r3, #8]
 80122e2:	4baf      	ldr	r3, [pc, #700]	@ (80125a0 <UART_SetConfig+0x330>)
 80122e4:	4013      	ands	r3, r2
 80122e6:	697a      	ldr	r2, [r7, #20]
 80122e8:	6812      	ldr	r2, [r2, #0]
 80122ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80122ec:	430b      	orrs	r3, r1
 80122ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122f6:	f023 010f 	bic.w	r1, r3, #15
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	430a      	orrs	r2, r1
 8012304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	4aa6      	ldr	r2, [pc, #664]	@ (80125a4 <UART_SetConfig+0x334>)
 801230c:	4293      	cmp	r3, r2
 801230e:	d177      	bne.n	8012400 <UART_SetConfig+0x190>
 8012310:	4ba5      	ldr	r3, [pc, #660]	@ (80125a8 <UART_SetConfig+0x338>)
 8012312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012318:	2b28      	cmp	r3, #40	@ 0x28
 801231a:	d86d      	bhi.n	80123f8 <UART_SetConfig+0x188>
 801231c:	a201      	add	r2, pc, #4	@ (adr r2, 8012324 <UART_SetConfig+0xb4>)
 801231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012322:	bf00      	nop
 8012324:	080123c9 	.word	0x080123c9
 8012328:	080123f9 	.word	0x080123f9
 801232c:	080123f9 	.word	0x080123f9
 8012330:	080123f9 	.word	0x080123f9
 8012334:	080123f9 	.word	0x080123f9
 8012338:	080123f9 	.word	0x080123f9
 801233c:	080123f9 	.word	0x080123f9
 8012340:	080123f9 	.word	0x080123f9
 8012344:	080123d1 	.word	0x080123d1
 8012348:	080123f9 	.word	0x080123f9
 801234c:	080123f9 	.word	0x080123f9
 8012350:	080123f9 	.word	0x080123f9
 8012354:	080123f9 	.word	0x080123f9
 8012358:	080123f9 	.word	0x080123f9
 801235c:	080123f9 	.word	0x080123f9
 8012360:	080123f9 	.word	0x080123f9
 8012364:	080123d9 	.word	0x080123d9
 8012368:	080123f9 	.word	0x080123f9
 801236c:	080123f9 	.word	0x080123f9
 8012370:	080123f9 	.word	0x080123f9
 8012374:	080123f9 	.word	0x080123f9
 8012378:	080123f9 	.word	0x080123f9
 801237c:	080123f9 	.word	0x080123f9
 8012380:	080123f9 	.word	0x080123f9
 8012384:	080123e1 	.word	0x080123e1
 8012388:	080123f9 	.word	0x080123f9
 801238c:	080123f9 	.word	0x080123f9
 8012390:	080123f9 	.word	0x080123f9
 8012394:	080123f9 	.word	0x080123f9
 8012398:	080123f9 	.word	0x080123f9
 801239c:	080123f9 	.word	0x080123f9
 80123a0:	080123f9 	.word	0x080123f9
 80123a4:	080123e9 	.word	0x080123e9
 80123a8:	080123f9 	.word	0x080123f9
 80123ac:	080123f9 	.word	0x080123f9
 80123b0:	080123f9 	.word	0x080123f9
 80123b4:	080123f9 	.word	0x080123f9
 80123b8:	080123f9 	.word	0x080123f9
 80123bc:	080123f9 	.word	0x080123f9
 80123c0:	080123f9 	.word	0x080123f9
 80123c4:	080123f1 	.word	0x080123f1
 80123c8:	2301      	movs	r3, #1
 80123ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ce:	e326      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123d0:	2304      	movs	r3, #4
 80123d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123d6:	e322      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123d8:	2308      	movs	r3, #8
 80123da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123de:	e31e      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123e0:	2310      	movs	r3, #16
 80123e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123e6:	e31a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123e8:	2320      	movs	r3, #32
 80123ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ee:	e316      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123f0:	2340      	movs	r3, #64	@ 0x40
 80123f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123f6:	e312      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80123f8:	2380      	movs	r3, #128	@ 0x80
 80123fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123fe:	e30e      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a69      	ldr	r2, [pc, #420]	@ (80125ac <UART_SetConfig+0x33c>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d130      	bne.n	801246c <UART_SetConfig+0x1fc>
 801240a:	4b67      	ldr	r3, [pc, #412]	@ (80125a8 <UART_SetConfig+0x338>)
 801240c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801240e:	f003 0307 	and.w	r3, r3, #7
 8012412:	2b05      	cmp	r3, #5
 8012414:	d826      	bhi.n	8012464 <UART_SetConfig+0x1f4>
 8012416:	a201      	add	r2, pc, #4	@ (adr r2, 801241c <UART_SetConfig+0x1ac>)
 8012418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801241c:	08012435 	.word	0x08012435
 8012420:	0801243d 	.word	0x0801243d
 8012424:	08012445 	.word	0x08012445
 8012428:	0801244d 	.word	0x0801244d
 801242c:	08012455 	.word	0x08012455
 8012430:	0801245d 	.word	0x0801245d
 8012434:	2300      	movs	r3, #0
 8012436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801243a:	e2f0      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801243c:	2304      	movs	r3, #4
 801243e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012442:	e2ec      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012444:	2308      	movs	r3, #8
 8012446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801244a:	e2e8      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801244c:	2310      	movs	r3, #16
 801244e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012452:	e2e4      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012454:	2320      	movs	r3, #32
 8012456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801245a:	e2e0      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801245c:	2340      	movs	r3, #64	@ 0x40
 801245e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012462:	e2dc      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012464:	2380      	movs	r3, #128	@ 0x80
 8012466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801246a:	e2d8      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a4f      	ldr	r2, [pc, #316]	@ (80125b0 <UART_SetConfig+0x340>)
 8012472:	4293      	cmp	r3, r2
 8012474:	d130      	bne.n	80124d8 <UART_SetConfig+0x268>
 8012476:	4b4c      	ldr	r3, [pc, #304]	@ (80125a8 <UART_SetConfig+0x338>)
 8012478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801247a:	f003 0307 	and.w	r3, r3, #7
 801247e:	2b05      	cmp	r3, #5
 8012480:	d826      	bhi.n	80124d0 <UART_SetConfig+0x260>
 8012482:	a201      	add	r2, pc, #4	@ (adr r2, 8012488 <UART_SetConfig+0x218>)
 8012484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012488:	080124a1 	.word	0x080124a1
 801248c:	080124a9 	.word	0x080124a9
 8012490:	080124b1 	.word	0x080124b1
 8012494:	080124b9 	.word	0x080124b9
 8012498:	080124c1 	.word	0x080124c1
 801249c:	080124c9 	.word	0x080124c9
 80124a0:	2300      	movs	r3, #0
 80124a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124a6:	e2ba      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124a8:	2304      	movs	r3, #4
 80124aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ae:	e2b6      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124b0:	2308      	movs	r3, #8
 80124b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124b6:	e2b2      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124b8:	2310      	movs	r3, #16
 80124ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124be:	e2ae      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124c0:	2320      	movs	r3, #32
 80124c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124c6:	e2aa      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124c8:	2340      	movs	r3, #64	@ 0x40
 80124ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ce:	e2a6      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124d0:	2380      	movs	r3, #128	@ 0x80
 80124d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124d6:	e2a2      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a35      	ldr	r2, [pc, #212]	@ (80125b4 <UART_SetConfig+0x344>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d130      	bne.n	8012544 <UART_SetConfig+0x2d4>
 80124e2:	4b31      	ldr	r3, [pc, #196]	@ (80125a8 <UART_SetConfig+0x338>)
 80124e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124e6:	f003 0307 	and.w	r3, r3, #7
 80124ea:	2b05      	cmp	r3, #5
 80124ec:	d826      	bhi.n	801253c <UART_SetConfig+0x2cc>
 80124ee:	a201      	add	r2, pc, #4	@ (adr r2, 80124f4 <UART_SetConfig+0x284>)
 80124f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f4:	0801250d 	.word	0x0801250d
 80124f8:	08012515 	.word	0x08012515
 80124fc:	0801251d 	.word	0x0801251d
 8012500:	08012525 	.word	0x08012525
 8012504:	0801252d 	.word	0x0801252d
 8012508:	08012535 	.word	0x08012535
 801250c:	2300      	movs	r3, #0
 801250e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012512:	e284      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012514:	2304      	movs	r3, #4
 8012516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801251a:	e280      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801251c:	2308      	movs	r3, #8
 801251e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012522:	e27c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012524:	2310      	movs	r3, #16
 8012526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801252a:	e278      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801252c:	2320      	movs	r3, #32
 801252e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012532:	e274      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012534:	2340      	movs	r3, #64	@ 0x40
 8012536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801253a:	e270      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801253c:	2380      	movs	r3, #128	@ 0x80
 801253e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012542:	e26c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4a1b      	ldr	r2, [pc, #108]	@ (80125b8 <UART_SetConfig+0x348>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d142      	bne.n	80125d4 <UART_SetConfig+0x364>
 801254e:	4b16      	ldr	r3, [pc, #88]	@ (80125a8 <UART_SetConfig+0x338>)
 8012550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012552:	f003 0307 	and.w	r3, r3, #7
 8012556:	2b05      	cmp	r3, #5
 8012558:	d838      	bhi.n	80125cc <UART_SetConfig+0x35c>
 801255a:	a201      	add	r2, pc, #4	@ (adr r2, 8012560 <UART_SetConfig+0x2f0>)
 801255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012560:	08012579 	.word	0x08012579
 8012564:	08012581 	.word	0x08012581
 8012568:	08012589 	.word	0x08012589
 801256c:	08012591 	.word	0x08012591
 8012570:	080125bd 	.word	0x080125bd
 8012574:	080125c5 	.word	0x080125c5
 8012578:	2300      	movs	r3, #0
 801257a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801257e:	e24e      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012580:	2304      	movs	r3, #4
 8012582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012586:	e24a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012588:	2308      	movs	r3, #8
 801258a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801258e:	e246      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012590:	2310      	movs	r3, #16
 8012592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012596:	e242      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012598:	cfff69f3 	.word	0xcfff69f3
 801259c:	58000c00 	.word	0x58000c00
 80125a0:	11fff4ff 	.word	0x11fff4ff
 80125a4:	40011000 	.word	0x40011000
 80125a8:	58024400 	.word	0x58024400
 80125ac:	40004400 	.word	0x40004400
 80125b0:	40004800 	.word	0x40004800
 80125b4:	40004c00 	.word	0x40004c00
 80125b8:	40005000 	.word	0x40005000
 80125bc:	2320      	movs	r3, #32
 80125be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125c2:	e22c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80125c4:	2340      	movs	r3, #64	@ 0x40
 80125c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125ca:	e228      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80125cc:	2380      	movs	r3, #128	@ 0x80
 80125ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125d2:	e224      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4ab1      	ldr	r2, [pc, #708]	@ (80128a0 <UART_SetConfig+0x630>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d176      	bne.n	80126cc <UART_SetConfig+0x45c>
 80125de:	4bb1      	ldr	r3, [pc, #708]	@ (80128a4 <UART_SetConfig+0x634>)
 80125e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80125e6:	2b28      	cmp	r3, #40	@ 0x28
 80125e8:	d86c      	bhi.n	80126c4 <UART_SetConfig+0x454>
 80125ea:	a201      	add	r2, pc, #4	@ (adr r2, 80125f0 <UART_SetConfig+0x380>)
 80125ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125f0:	08012695 	.word	0x08012695
 80125f4:	080126c5 	.word	0x080126c5
 80125f8:	080126c5 	.word	0x080126c5
 80125fc:	080126c5 	.word	0x080126c5
 8012600:	080126c5 	.word	0x080126c5
 8012604:	080126c5 	.word	0x080126c5
 8012608:	080126c5 	.word	0x080126c5
 801260c:	080126c5 	.word	0x080126c5
 8012610:	0801269d 	.word	0x0801269d
 8012614:	080126c5 	.word	0x080126c5
 8012618:	080126c5 	.word	0x080126c5
 801261c:	080126c5 	.word	0x080126c5
 8012620:	080126c5 	.word	0x080126c5
 8012624:	080126c5 	.word	0x080126c5
 8012628:	080126c5 	.word	0x080126c5
 801262c:	080126c5 	.word	0x080126c5
 8012630:	080126a5 	.word	0x080126a5
 8012634:	080126c5 	.word	0x080126c5
 8012638:	080126c5 	.word	0x080126c5
 801263c:	080126c5 	.word	0x080126c5
 8012640:	080126c5 	.word	0x080126c5
 8012644:	080126c5 	.word	0x080126c5
 8012648:	080126c5 	.word	0x080126c5
 801264c:	080126c5 	.word	0x080126c5
 8012650:	080126ad 	.word	0x080126ad
 8012654:	080126c5 	.word	0x080126c5
 8012658:	080126c5 	.word	0x080126c5
 801265c:	080126c5 	.word	0x080126c5
 8012660:	080126c5 	.word	0x080126c5
 8012664:	080126c5 	.word	0x080126c5
 8012668:	080126c5 	.word	0x080126c5
 801266c:	080126c5 	.word	0x080126c5
 8012670:	080126b5 	.word	0x080126b5
 8012674:	080126c5 	.word	0x080126c5
 8012678:	080126c5 	.word	0x080126c5
 801267c:	080126c5 	.word	0x080126c5
 8012680:	080126c5 	.word	0x080126c5
 8012684:	080126c5 	.word	0x080126c5
 8012688:	080126c5 	.word	0x080126c5
 801268c:	080126c5 	.word	0x080126c5
 8012690:	080126bd 	.word	0x080126bd
 8012694:	2301      	movs	r3, #1
 8012696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801269a:	e1c0      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801269c:	2304      	movs	r3, #4
 801269e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126a2:	e1bc      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126a4:	2308      	movs	r3, #8
 80126a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126aa:	e1b8      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126ac:	2310      	movs	r3, #16
 80126ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126b2:	e1b4      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126b4:	2320      	movs	r3, #32
 80126b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ba:	e1b0      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126bc:	2340      	movs	r3, #64	@ 0x40
 80126be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126c2:	e1ac      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126c4:	2380      	movs	r3, #128	@ 0x80
 80126c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ca:	e1a8      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a75      	ldr	r2, [pc, #468]	@ (80128a8 <UART_SetConfig+0x638>)
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d130      	bne.n	8012738 <UART_SetConfig+0x4c8>
 80126d6:	4b73      	ldr	r3, [pc, #460]	@ (80128a4 <UART_SetConfig+0x634>)
 80126d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126da:	f003 0307 	and.w	r3, r3, #7
 80126de:	2b05      	cmp	r3, #5
 80126e0:	d826      	bhi.n	8012730 <UART_SetConfig+0x4c0>
 80126e2:	a201      	add	r2, pc, #4	@ (adr r2, 80126e8 <UART_SetConfig+0x478>)
 80126e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e8:	08012701 	.word	0x08012701
 80126ec:	08012709 	.word	0x08012709
 80126f0:	08012711 	.word	0x08012711
 80126f4:	08012719 	.word	0x08012719
 80126f8:	08012721 	.word	0x08012721
 80126fc:	08012729 	.word	0x08012729
 8012700:	2300      	movs	r3, #0
 8012702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012706:	e18a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012708:	2304      	movs	r3, #4
 801270a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801270e:	e186      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012710:	2308      	movs	r3, #8
 8012712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012716:	e182      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012718:	2310      	movs	r3, #16
 801271a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801271e:	e17e      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012720:	2320      	movs	r3, #32
 8012722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012726:	e17a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012728:	2340      	movs	r3, #64	@ 0x40
 801272a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801272e:	e176      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012730:	2380      	movs	r3, #128	@ 0x80
 8012732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012736:	e172      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4a5b      	ldr	r2, [pc, #364]	@ (80128ac <UART_SetConfig+0x63c>)
 801273e:	4293      	cmp	r3, r2
 8012740:	d130      	bne.n	80127a4 <UART_SetConfig+0x534>
 8012742:	4b58      	ldr	r3, [pc, #352]	@ (80128a4 <UART_SetConfig+0x634>)
 8012744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012746:	f003 0307 	and.w	r3, r3, #7
 801274a:	2b05      	cmp	r3, #5
 801274c:	d826      	bhi.n	801279c <UART_SetConfig+0x52c>
 801274e:	a201      	add	r2, pc, #4	@ (adr r2, 8012754 <UART_SetConfig+0x4e4>)
 8012750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012754:	0801276d 	.word	0x0801276d
 8012758:	08012775 	.word	0x08012775
 801275c:	0801277d 	.word	0x0801277d
 8012760:	08012785 	.word	0x08012785
 8012764:	0801278d 	.word	0x0801278d
 8012768:	08012795 	.word	0x08012795
 801276c:	2300      	movs	r3, #0
 801276e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012772:	e154      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012774:	2304      	movs	r3, #4
 8012776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801277a:	e150      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801277c:	2308      	movs	r3, #8
 801277e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012782:	e14c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012784:	2310      	movs	r3, #16
 8012786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801278a:	e148      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801278c:	2320      	movs	r3, #32
 801278e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012792:	e144      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012794:	2340      	movs	r3, #64	@ 0x40
 8012796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801279a:	e140      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801279c:	2380      	movs	r3, #128	@ 0x80
 801279e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80127a2:	e13c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4a41      	ldr	r2, [pc, #260]	@ (80128b0 <UART_SetConfig+0x640>)
 80127aa:	4293      	cmp	r3, r2
 80127ac:	f040 8082 	bne.w	80128b4 <UART_SetConfig+0x644>
 80127b0:	4b3c      	ldr	r3, [pc, #240]	@ (80128a4 <UART_SetConfig+0x634>)
 80127b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80127b8:	2b28      	cmp	r3, #40	@ 0x28
 80127ba:	d86d      	bhi.n	8012898 <UART_SetConfig+0x628>
 80127bc:	a201      	add	r2, pc, #4	@ (adr r2, 80127c4 <UART_SetConfig+0x554>)
 80127be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c2:	bf00      	nop
 80127c4:	08012869 	.word	0x08012869
 80127c8:	08012899 	.word	0x08012899
 80127cc:	08012899 	.word	0x08012899
 80127d0:	08012899 	.word	0x08012899
 80127d4:	08012899 	.word	0x08012899
 80127d8:	08012899 	.word	0x08012899
 80127dc:	08012899 	.word	0x08012899
 80127e0:	08012899 	.word	0x08012899
 80127e4:	08012871 	.word	0x08012871
 80127e8:	08012899 	.word	0x08012899
 80127ec:	08012899 	.word	0x08012899
 80127f0:	08012899 	.word	0x08012899
 80127f4:	08012899 	.word	0x08012899
 80127f8:	08012899 	.word	0x08012899
 80127fc:	08012899 	.word	0x08012899
 8012800:	08012899 	.word	0x08012899
 8012804:	08012879 	.word	0x08012879
 8012808:	08012899 	.word	0x08012899
 801280c:	08012899 	.word	0x08012899
 8012810:	08012899 	.word	0x08012899
 8012814:	08012899 	.word	0x08012899
 8012818:	08012899 	.word	0x08012899
 801281c:	08012899 	.word	0x08012899
 8012820:	08012899 	.word	0x08012899
 8012824:	08012881 	.word	0x08012881
 8012828:	08012899 	.word	0x08012899
 801282c:	08012899 	.word	0x08012899
 8012830:	08012899 	.word	0x08012899
 8012834:	08012899 	.word	0x08012899
 8012838:	08012899 	.word	0x08012899
 801283c:	08012899 	.word	0x08012899
 8012840:	08012899 	.word	0x08012899
 8012844:	08012889 	.word	0x08012889
 8012848:	08012899 	.word	0x08012899
 801284c:	08012899 	.word	0x08012899
 8012850:	08012899 	.word	0x08012899
 8012854:	08012899 	.word	0x08012899
 8012858:	08012899 	.word	0x08012899
 801285c:	08012899 	.word	0x08012899
 8012860:	08012899 	.word	0x08012899
 8012864:	08012891 	.word	0x08012891
 8012868:	2301      	movs	r3, #1
 801286a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801286e:	e0d6      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012870:	2304      	movs	r3, #4
 8012872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012876:	e0d2      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012878:	2308      	movs	r3, #8
 801287a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801287e:	e0ce      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012880:	2310      	movs	r3, #16
 8012882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012886:	e0ca      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012888:	2320      	movs	r3, #32
 801288a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801288e:	e0c6      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012890:	2340      	movs	r3, #64	@ 0x40
 8012892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012896:	e0c2      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012898:	2380      	movs	r3, #128	@ 0x80
 801289a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801289e:	e0be      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80128a0:	40011400 	.word	0x40011400
 80128a4:	58024400 	.word	0x58024400
 80128a8:	40007800 	.word	0x40007800
 80128ac:	40007c00 	.word	0x40007c00
 80128b0:	40011800 	.word	0x40011800
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	4aad      	ldr	r2, [pc, #692]	@ (8012b70 <UART_SetConfig+0x900>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	d176      	bne.n	80129ac <UART_SetConfig+0x73c>
 80128be:	4bad      	ldr	r3, [pc, #692]	@ (8012b74 <UART_SetConfig+0x904>)
 80128c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80128c6:	2b28      	cmp	r3, #40	@ 0x28
 80128c8:	d86c      	bhi.n	80129a4 <UART_SetConfig+0x734>
 80128ca:	a201      	add	r2, pc, #4	@ (adr r2, 80128d0 <UART_SetConfig+0x660>)
 80128cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d0:	08012975 	.word	0x08012975
 80128d4:	080129a5 	.word	0x080129a5
 80128d8:	080129a5 	.word	0x080129a5
 80128dc:	080129a5 	.word	0x080129a5
 80128e0:	080129a5 	.word	0x080129a5
 80128e4:	080129a5 	.word	0x080129a5
 80128e8:	080129a5 	.word	0x080129a5
 80128ec:	080129a5 	.word	0x080129a5
 80128f0:	0801297d 	.word	0x0801297d
 80128f4:	080129a5 	.word	0x080129a5
 80128f8:	080129a5 	.word	0x080129a5
 80128fc:	080129a5 	.word	0x080129a5
 8012900:	080129a5 	.word	0x080129a5
 8012904:	080129a5 	.word	0x080129a5
 8012908:	080129a5 	.word	0x080129a5
 801290c:	080129a5 	.word	0x080129a5
 8012910:	08012985 	.word	0x08012985
 8012914:	080129a5 	.word	0x080129a5
 8012918:	080129a5 	.word	0x080129a5
 801291c:	080129a5 	.word	0x080129a5
 8012920:	080129a5 	.word	0x080129a5
 8012924:	080129a5 	.word	0x080129a5
 8012928:	080129a5 	.word	0x080129a5
 801292c:	080129a5 	.word	0x080129a5
 8012930:	0801298d 	.word	0x0801298d
 8012934:	080129a5 	.word	0x080129a5
 8012938:	080129a5 	.word	0x080129a5
 801293c:	080129a5 	.word	0x080129a5
 8012940:	080129a5 	.word	0x080129a5
 8012944:	080129a5 	.word	0x080129a5
 8012948:	080129a5 	.word	0x080129a5
 801294c:	080129a5 	.word	0x080129a5
 8012950:	08012995 	.word	0x08012995
 8012954:	080129a5 	.word	0x080129a5
 8012958:	080129a5 	.word	0x080129a5
 801295c:	080129a5 	.word	0x080129a5
 8012960:	080129a5 	.word	0x080129a5
 8012964:	080129a5 	.word	0x080129a5
 8012968:	080129a5 	.word	0x080129a5
 801296c:	080129a5 	.word	0x080129a5
 8012970:	0801299d 	.word	0x0801299d
 8012974:	2301      	movs	r3, #1
 8012976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801297a:	e050      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801297c:	2304      	movs	r3, #4
 801297e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012982:	e04c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012984:	2308      	movs	r3, #8
 8012986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801298a:	e048      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801298c:	2310      	movs	r3, #16
 801298e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012992:	e044      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012994:	2320      	movs	r3, #32
 8012996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801299a:	e040      	b.n	8012a1e <UART_SetConfig+0x7ae>
 801299c:	2340      	movs	r3, #64	@ 0x40
 801299e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129a2:	e03c      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80129a4:	2380      	movs	r3, #128	@ 0x80
 80129a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129aa:	e038      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a71      	ldr	r2, [pc, #452]	@ (8012b78 <UART_SetConfig+0x908>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d130      	bne.n	8012a18 <UART_SetConfig+0x7a8>
 80129b6:	4b6f      	ldr	r3, [pc, #444]	@ (8012b74 <UART_SetConfig+0x904>)
 80129b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129ba:	f003 0307 	and.w	r3, r3, #7
 80129be:	2b05      	cmp	r3, #5
 80129c0:	d826      	bhi.n	8012a10 <UART_SetConfig+0x7a0>
 80129c2:	a201      	add	r2, pc, #4	@ (adr r2, 80129c8 <UART_SetConfig+0x758>)
 80129c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c8:	080129e1 	.word	0x080129e1
 80129cc:	080129e9 	.word	0x080129e9
 80129d0:	080129f1 	.word	0x080129f1
 80129d4:	080129f9 	.word	0x080129f9
 80129d8:	08012a01 	.word	0x08012a01
 80129dc:	08012a09 	.word	0x08012a09
 80129e0:	2302      	movs	r3, #2
 80129e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129e6:	e01a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80129e8:	2304      	movs	r3, #4
 80129ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ee:	e016      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80129f0:	2308      	movs	r3, #8
 80129f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129f6:	e012      	b.n	8012a1e <UART_SetConfig+0x7ae>
 80129f8:	2310      	movs	r3, #16
 80129fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129fe:	e00e      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012a00:	2320      	movs	r3, #32
 8012a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a06:	e00a      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012a08:	2340      	movs	r3, #64	@ 0x40
 8012a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a0e:	e006      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012a10:	2380      	movs	r3, #128	@ 0x80
 8012a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a16:	e002      	b.n	8012a1e <UART_SetConfig+0x7ae>
 8012a18:	2380      	movs	r3, #128	@ 0x80
 8012a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a55      	ldr	r2, [pc, #340]	@ (8012b78 <UART_SetConfig+0x908>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	f040 80f8 	bne.w	8012c1a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012a2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012a2e:	2b20      	cmp	r3, #32
 8012a30:	dc46      	bgt.n	8012ac0 <UART_SetConfig+0x850>
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	db75      	blt.n	8012b22 <UART_SetConfig+0x8b2>
 8012a36:	3b02      	subs	r3, #2
 8012a38:	2b1e      	cmp	r3, #30
 8012a3a:	d872      	bhi.n	8012b22 <UART_SetConfig+0x8b2>
 8012a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8012a44 <UART_SetConfig+0x7d4>)
 8012a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a42:	bf00      	nop
 8012a44:	08012ac7 	.word	0x08012ac7
 8012a48:	08012b23 	.word	0x08012b23
 8012a4c:	08012acf 	.word	0x08012acf
 8012a50:	08012b23 	.word	0x08012b23
 8012a54:	08012b23 	.word	0x08012b23
 8012a58:	08012b23 	.word	0x08012b23
 8012a5c:	08012adf 	.word	0x08012adf
 8012a60:	08012b23 	.word	0x08012b23
 8012a64:	08012b23 	.word	0x08012b23
 8012a68:	08012b23 	.word	0x08012b23
 8012a6c:	08012b23 	.word	0x08012b23
 8012a70:	08012b23 	.word	0x08012b23
 8012a74:	08012b23 	.word	0x08012b23
 8012a78:	08012b23 	.word	0x08012b23
 8012a7c:	08012aef 	.word	0x08012aef
 8012a80:	08012b23 	.word	0x08012b23
 8012a84:	08012b23 	.word	0x08012b23
 8012a88:	08012b23 	.word	0x08012b23
 8012a8c:	08012b23 	.word	0x08012b23
 8012a90:	08012b23 	.word	0x08012b23
 8012a94:	08012b23 	.word	0x08012b23
 8012a98:	08012b23 	.word	0x08012b23
 8012a9c:	08012b23 	.word	0x08012b23
 8012aa0:	08012b23 	.word	0x08012b23
 8012aa4:	08012b23 	.word	0x08012b23
 8012aa8:	08012b23 	.word	0x08012b23
 8012aac:	08012b23 	.word	0x08012b23
 8012ab0:	08012b23 	.word	0x08012b23
 8012ab4:	08012b23 	.word	0x08012b23
 8012ab8:	08012b23 	.word	0x08012b23
 8012abc:	08012b15 	.word	0x08012b15
 8012ac0:	2b40      	cmp	r3, #64	@ 0x40
 8012ac2:	d02a      	beq.n	8012b1a <UART_SetConfig+0x8aa>
 8012ac4:	e02d      	b.n	8012b22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012ac6:	f7fc f80f 	bl	800eae8 <HAL_RCCEx_GetD3PCLK1Freq>
 8012aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012acc:	e02f      	b.n	8012b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fc f81e 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012adc:	e027      	b.n	8012b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ade:	f107 0318 	add.w	r3, r7, #24
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fc f96a 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012aec:	e01f      	b.n	8012b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012aee:	4b21      	ldr	r3, [pc, #132]	@ (8012b74 <UART_SetConfig+0x904>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f003 0320 	and.w	r3, r3, #32
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d009      	beq.n	8012b0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012afa:	4b1e      	ldr	r3, [pc, #120]	@ (8012b74 <UART_SetConfig+0x904>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	08db      	lsrs	r3, r3, #3
 8012b00:	f003 0303 	and.w	r3, r3, #3
 8012b04:	4a1d      	ldr	r2, [pc, #116]	@ (8012b7c <UART_SetConfig+0x90c>)
 8012b06:	fa22 f303 	lsr.w	r3, r2, r3
 8012b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b0c:	e00f      	b.n	8012b2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8012b7c <UART_SetConfig+0x90c>)
 8012b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b12:	e00c      	b.n	8012b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012b14:	4b1a      	ldr	r3, [pc, #104]	@ (8012b80 <UART_SetConfig+0x910>)
 8012b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b18:	e009      	b.n	8012b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b20:	e005      	b.n	8012b2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012b22:	2300      	movs	r3, #0
 8012b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012b26:	2301      	movs	r3, #1
 8012b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f000 81ee 	beq.w	8012f12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b3a:	4a12      	ldr	r2, [pc, #72]	@ (8012b84 <UART_SetConfig+0x914>)
 8012b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b40:	461a      	mov	r2, r3
 8012b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b48:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	685a      	ldr	r2, [r3, #4]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	005b      	lsls	r3, r3, #1
 8012b52:	4413      	add	r3, r2
 8012b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d305      	bcc.n	8012b66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d910      	bls.n	8012b88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012b66:	2301      	movs	r3, #1
 8012b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012b6c:	e1d1      	b.n	8012f12 <UART_SetConfig+0xca2>
 8012b6e:	bf00      	nop
 8012b70:	40011c00 	.word	0x40011c00
 8012b74:	58024400 	.word	0x58024400
 8012b78:	58000c00 	.word	0x58000c00
 8012b7c:	03d09000 	.word	0x03d09000
 8012b80:	003d0900 	.word	0x003d0900
 8012b84:	0801cbb0 	.word	0x0801cbb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	60bb      	str	r3, [r7, #8]
 8012b8e:	60fa      	str	r2, [r7, #12]
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b94:	4ac0      	ldr	r2, [pc, #768]	@ (8012e98 <UART_SetConfig+0xc28>)
 8012b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	603b      	str	r3, [r7, #0]
 8012ba0:	607a      	str	r2, [r7, #4]
 8012ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012baa:	f7ed fdd5 	bl	8000758 <__aeabi_uldivmod>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	4610      	mov	r0, r2
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	f04f 0200 	mov.w	r2, #0
 8012bba:	f04f 0300 	mov.w	r3, #0
 8012bbe:	020b      	lsls	r3, r1, #8
 8012bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012bc4:	0202      	lsls	r2, r0, #8
 8012bc6:	6979      	ldr	r1, [r7, #20]
 8012bc8:	6849      	ldr	r1, [r1, #4]
 8012bca:	0849      	lsrs	r1, r1, #1
 8012bcc:	2000      	movs	r0, #0
 8012bce:	460c      	mov	r4, r1
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	eb12 0804 	adds.w	r8, r2, r4
 8012bd6:	eb43 0905 	adc.w	r9, r3, r5
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	469a      	mov	sl, r3
 8012be2:	4693      	mov	fp, r2
 8012be4:	4652      	mov	r2, sl
 8012be6:	465b      	mov	r3, fp
 8012be8:	4640      	mov	r0, r8
 8012bea:	4649      	mov	r1, r9
 8012bec:	f7ed fdb4 	bl	8000758 <__aeabi_uldivmod>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012bfe:	d308      	bcc.n	8012c12 <UART_SetConfig+0x9a2>
 8012c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c06:	d204      	bcs.n	8012c12 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012c0e:	60da      	str	r2, [r3, #12]
 8012c10:	e17f      	b.n	8012f12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012c12:	2301      	movs	r3, #1
 8012c14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012c18:	e17b      	b.n	8012f12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	69db      	ldr	r3, [r3, #28]
 8012c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012c22:	f040 80bd 	bne.w	8012da0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012c26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012c2a:	2b20      	cmp	r3, #32
 8012c2c:	dc48      	bgt.n	8012cc0 <UART_SetConfig+0xa50>
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	db7b      	blt.n	8012d2a <UART_SetConfig+0xaba>
 8012c32:	2b20      	cmp	r3, #32
 8012c34:	d879      	bhi.n	8012d2a <UART_SetConfig+0xaba>
 8012c36:	a201      	add	r2, pc, #4	@ (adr r2, 8012c3c <UART_SetConfig+0x9cc>)
 8012c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c3c:	08012cc7 	.word	0x08012cc7
 8012c40:	08012ccf 	.word	0x08012ccf
 8012c44:	08012d2b 	.word	0x08012d2b
 8012c48:	08012d2b 	.word	0x08012d2b
 8012c4c:	08012cd7 	.word	0x08012cd7
 8012c50:	08012d2b 	.word	0x08012d2b
 8012c54:	08012d2b 	.word	0x08012d2b
 8012c58:	08012d2b 	.word	0x08012d2b
 8012c5c:	08012ce7 	.word	0x08012ce7
 8012c60:	08012d2b 	.word	0x08012d2b
 8012c64:	08012d2b 	.word	0x08012d2b
 8012c68:	08012d2b 	.word	0x08012d2b
 8012c6c:	08012d2b 	.word	0x08012d2b
 8012c70:	08012d2b 	.word	0x08012d2b
 8012c74:	08012d2b 	.word	0x08012d2b
 8012c78:	08012d2b 	.word	0x08012d2b
 8012c7c:	08012cf7 	.word	0x08012cf7
 8012c80:	08012d2b 	.word	0x08012d2b
 8012c84:	08012d2b 	.word	0x08012d2b
 8012c88:	08012d2b 	.word	0x08012d2b
 8012c8c:	08012d2b 	.word	0x08012d2b
 8012c90:	08012d2b 	.word	0x08012d2b
 8012c94:	08012d2b 	.word	0x08012d2b
 8012c98:	08012d2b 	.word	0x08012d2b
 8012c9c:	08012d2b 	.word	0x08012d2b
 8012ca0:	08012d2b 	.word	0x08012d2b
 8012ca4:	08012d2b 	.word	0x08012d2b
 8012ca8:	08012d2b 	.word	0x08012d2b
 8012cac:	08012d2b 	.word	0x08012d2b
 8012cb0:	08012d2b 	.word	0x08012d2b
 8012cb4:	08012d2b 	.word	0x08012d2b
 8012cb8:	08012d2b 	.word	0x08012d2b
 8012cbc:	08012d1d 	.word	0x08012d1d
 8012cc0:	2b40      	cmp	r3, #64	@ 0x40
 8012cc2:	d02e      	beq.n	8012d22 <UART_SetConfig+0xab2>
 8012cc4:	e031      	b.n	8012d2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012cc6:	f7fa f871 	bl	800cdac <HAL_RCC_GetPCLK1Freq>
 8012cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012ccc:	e033      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012cce:	f7fa f883 	bl	800cdd8 <HAL_RCC_GetPCLK2Freq>
 8012cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012cd4:	e02f      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fb ff1a 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ce4:	e027      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ce6:	f107 0318 	add.w	r3, r7, #24
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fc f866 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cf4:	e01f      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012cf6:	4b69      	ldr	r3, [pc, #420]	@ (8012e9c <UART_SetConfig+0xc2c>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f003 0320 	and.w	r3, r3, #32
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d009      	beq.n	8012d16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012d02:	4b66      	ldr	r3, [pc, #408]	@ (8012e9c <UART_SetConfig+0xc2c>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	08db      	lsrs	r3, r3, #3
 8012d08:	f003 0303 	and.w	r3, r3, #3
 8012d0c:	4a64      	ldr	r2, [pc, #400]	@ (8012ea0 <UART_SetConfig+0xc30>)
 8012d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8012d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012d14:	e00f      	b.n	8012d36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012d16:	4b62      	ldr	r3, [pc, #392]	@ (8012ea0 <UART_SetConfig+0xc30>)
 8012d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d1a:	e00c      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012d1c:	4b61      	ldr	r3, [pc, #388]	@ (8012ea4 <UART_SetConfig+0xc34>)
 8012d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d20:	e009      	b.n	8012d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d28:	e005      	b.n	8012d36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f000 80ea 	beq.w	8012f12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d42:	4a55      	ldr	r2, [pc, #340]	@ (8012e98 <UART_SetConfig+0xc28>)
 8012d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d50:	005a      	lsls	r2, r3, #1
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	085b      	lsrs	r3, r3, #1
 8012d58:	441a      	add	r2, r3
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d66:	2b0f      	cmp	r3, #15
 8012d68:	d916      	bls.n	8012d98 <UART_SetConfig+0xb28>
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d70:	d212      	bcs.n	8012d98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	f023 030f 	bic.w	r3, r3, #15
 8012d7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d7e:	085b      	lsrs	r3, r3, #1
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	f003 0307 	and.w	r3, r3, #7
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012d94:	60da      	str	r2, [r3, #12]
 8012d96:	e0bc      	b.n	8012f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012d9e:	e0b8      	b.n	8012f12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012da0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012da4:	2b20      	cmp	r3, #32
 8012da6:	dc4b      	bgt.n	8012e40 <UART_SetConfig+0xbd0>
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f2c0 8087 	blt.w	8012ebc <UART_SetConfig+0xc4c>
 8012dae:	2b20      	cmp	r3, #32
 8012db0:	f200 8084 	bhi.w	8012ebc <UART_SetConfig+0xc4c>
 8012db4:	a201      	add	r2, pc, #4	@ (adr r2, 8012dbc <UART_SetConfig+0xb4c>)
 8012db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dba:	bf00      	nop
 8012dbc:	08012e47 	.word	0x08012e47
 8012dc0:	08012e4f 	.word	0x08012e4f
 8012dc4:	08012ebd 	.word	0x08012ebd
 8012dc8:	08012ebd 	.word	0x08012ebd
 8012dcc:	08012e57 	.word	0x08012e57
 8012dd0:	08012ebd 	.word	0x08012ebd
 8012dd4:	08012ebd 	.word	0x08012ebd
 8012dd8:	08012ebd 	.word	0x08012ebd
 8012ddc:	08012e67 	.word	0x08012e67
 8012de0:	08012ebd 	.word	0x08012ebd
 8012de4:	08012ebd 	.word	0x08012ebd
 8012de8:	08012ebd 	.word	0x08012ebd
 8012dec:	08012ebd 	.word	0x08012ebd
 8012df0:	08012ebd 	.word	0x08012ebd
 8012df4:	08012ebd 	.word	0x08012ebd
 8012df8:	08012ebd 	.word	0x08012ebd
 8012dfc:	08012e77 	.word	0x08012e77
 8012e00:	08012ebd 	.word	0x08012ebd
 8012e04:	08012ebd 	.word	0x08012ebd
 8012e08:	08012ebd 	.word	0x08012ebd
 8012e0c:	08012ebd 	.word	0x08012ebd
 8012e10:	08012ebd 	.word	0x08012ebd
 8012e14:	08012ebd 	.word	0x08012ebd
 8012e18:	08012ebd 	.word	0x08012ebd
 8012e1c:	08012ebd 	.word	0x08012ebd
 8012e20:	08012ebd 	.word	0x08012ebd
 8012e24:	08012ebd 	.word	0x08012ebd
 8012e28:	08012ebd 	.word	0x08012ebd
 8012e2c:	08012ebd 	.word	0x08012ebd
 8012e30:	08012ebd 	.word	0x08012ebd
 8012e34:	08012ebd 	.word	0x08012ebd
 8012e38:	08012ebd 	.word	0x08012ebd
 8012e3c:	08012eaf 	.word	0x08012eaf
 8012e40:	2b40      	cmp	r3, #64	@ 0x40
 8012e42:	d037      	beq.n	8012eb4 <UART_SetConfig+0xc44>
 8012e44:	e03a      	b.n	8012ebc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012e46:	f7f9 ffb1 	bl	800cdac <HAL_RCC_GetPCLK1Freq>
 8012e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e4c:	e03c      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012e4e:	f7f9 ffc3 	bl	800cdd8 <HAL_RCC_GetPCLK2Freq>
 8012e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e54:	e038      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fb fe5a 	bl	800eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e64:	e030      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e66:	f107 0318 	add.w	r3, r7, #24
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fb ffa6 	bl	800edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e74:	e028      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e76:	4b09      	ldr	r3, [pc, #36]	@ (8012e9c <UART_SetConfig+0xc2c>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f003 0320 	and.w	r3, r3, #32
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d012      	beq.n	8012ea8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e82:	4b06      	ldr	r3, [pc, #24]	@ (8012e9c <UART_SetConfig+0xc2c>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	08db      	lsrs	r3, r3, #3
 8012e88:	f003 0303 	and.w	r3, r3, #3
 8012e8c:	4a04      	ldr	r2, [pc, #16]	@ (8012ea0 <UART_SetConfig+0xc30>)
 8012e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8012e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e94:	e018      	b.n	8012ec8 <UART_SetConfig+0xc58>
 8012e96:	bf00      	nop
 8012e98:	0801cbb0 	.word	0x0801cbb0
 8012e9c:	58024400 	.word	0x58024400
 8012ea0:	03d09000 	.word	0x03d09000
 8012ea4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012ea8:	4b24      	ldr	r3, [pc, #144]	@ (8012f3c <UART_SetConfig+0xccc>)
 8012eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012eac:	e00c      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012eae:	4b24      	ldr	r3, [pc, #144]	@ (8012f40 <UART_SetConfig+0xcd0>)
 8012eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012eb2:	e009      	b.n	8012ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012eba:	e005      	b.n	8012ec8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8012ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d021      	beq.n	8012f12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8012f44 <UART_SetConfig+0xcd4>)
 8012ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	085b      	lsrs	r3, r3, #1
 8012ee6:	441a      	add	r2, r3
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef4:	2b0f      	cmp	r3, #15
 8012ef6:	d909      	bls.n	8012f0c <UART_SetConfig+0xc9c>
 8012ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012efe:	d205      	bcs.n	8012f0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	60da      	str	r2, [r3, #12]
 8012f0a:	e002      	b.n	8012f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	2201      	movs	r2, #1
 8012f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	2200      	movs	r2, #0
 8012f26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012f2e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3748      	adds	r7, #72	@ 0x48
 8012f36:	46bd      	mov	sp, r7
 8012f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f3c:	03d09000 	.word	0x03d09000
 8012f40:	003d0900 	.word	0x003d0900
 8012f44:	0801cbb0 	.word	0x0801cbb0

08012f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f54:	f003 0308 	and.w	r3, r3, #8
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00a      	beq.n	8012f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	430a      	orrs	r2, r1
 8012f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f76:	f003 0301 	and.w	r3, r3, #1
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d00a      	beq.n	8012f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	430a      	orrs	r2, r1
 8012f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f98:	f003 0302 	and.w	r3, r3, #2
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00a      	beq.n	8012fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	430a      	orrs	r2, r1
 8012fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fba:	f003 0304 	and.w	r3, r3, #4
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00a      	beq.n	8012fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	430a      	orrs	r2, r1
 8012fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fdc:	f003 0310 	and.w	r3, r3, #16
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00a      	beq.n	8012ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	689b      	ldr	r3, [r3, #8]
 8012fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	430a      	orrs	r2, r1
 8012ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ffe:	f003 0320 	and.w	r3, r3, #32
 8013002:	2b00      	cmp	r3, #0
 8013004:	d00a      	beq.n	801301c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	689b      	ldr	r3, [r3, #8]
 801300c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	430a      	orrs	r2, r1
 801301a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013024:	2b00      	cmp	r3, #0
 8013026:	d01a      	beq.n	801305e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	430a      	orrs	r2, r1
 801303c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013046:	d10a      	bne.n	801305e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	430a      	orrs	r2, r1
 801305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00a      	beq.n	8013080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	430a      	orrs	r2, r1
 801307e:	605a      	str	r2, [r3, #4]
  }
}
 8013080:	bf00      	nop
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr

0801308c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b098      	sub	sp, #96	@ 0x60
 8013090:	af02      	add	r7, sp, #8
 8013092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801309c:	f7f3 f884 	bl	80061a8 <HAL_GetTick>
 80130a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f003 0308 	and.w	r3, r3, #8
 80130ac:	2b08      	cmp	r3, #8
 80130ae:	d12f      	bne.n	8013110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80130b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80130b4:	9300      	str	r3, [sp, #0]
 80130b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130b8:	2200      	movs	r2, #0
 80130ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 f88e 	bl	80131e0 <UART_WaitOnFlagUntilTimeout>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d022      	beq.n	8013110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d2:	e853 3f00 	ldrex	r3, [r3]
 80130d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80130d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80130de:	653b      	str	r3, [r7, #80]	@ 0x50
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	461a      	mov	r2, r3
 80130e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80130ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80130ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80130f0:	e841 2300 	strex	r3, r2, [r1]
 80130f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80130f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d1e6      	bne.n	80130ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2220      	movs	r2, #32
 8013100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2200      	movs	r2, #0
 8013108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801310c:	2303      	movs	r3, #3
 801310e:	e063      	b.n	80131d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f003 0304 	and.w	r3, r3, #4
 801311a:	2b04      	cmp	r3, #4
 801311c:	d149      	bne.n	80131b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801311e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013126:	2200      	movs	r2, #0
 8013128:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 f857 	bl	80131e0 <UART_WaitOnFlagUntilTimeout>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	d03c      	beq.n	80131b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013140:	e853 3f00 	ldrex	r3, [r3]
 8013144:	623b      	str	r3, [r7, #32]
   return(result);
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801314c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	461a      	mov	r2, r3
 8013154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013156:	633b      	str	r3, [r7, #48]	@ 0x30
 8013158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801315a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801315c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801315e:	e841 2300 	strex	r3, r2, [r1]
 8013162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013166:	2b00      	cmp	r3, #0
 8013168:	d1e6      	bne.n	8013138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	3308      	adds	r3, #8
 8013170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	e853 3f00 	ldrex	r3, [r3]
 8013178:	60fb      	str	r3, [r7, #12]
   return(result);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	f023 0301 	bic.w	r3, r3, #1
 8013180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	3308      	adds	r3, #8
 8013188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801318a:	61fa      	str	r2, [r7, #28]
 801318c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801318e:	69b9      	ldr	r1, [r7, #24]
 8013190:	69fa      	ldr	r2, [r7, #28]
 8013192:	e841 2300 	strex	r3, r2, [r1]
 8013196:	617b      	str	r3, [r7, #20]
   return(result);
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1e5      	bne.n	801316a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2220      	movs	r2, #32
 80131a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2200      	movs	r2, #0
 80131aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80131ae:	2303      	movs	r3, #3
 80131b0:	e012      	b.n	80131d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2220      	movs	r2, #32
 80131b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2220      	movs	r2, #32
 80131be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2200      	movs	r2, #0
 80131cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80131d6:	2300      	movs	r3, #0
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3758      	adds	r7, #88	@ 0x58
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	4613      	mov	r3, r2
 80131ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80131f0:	e04f      	b.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131f8:	d04b      	beq.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80131fa:	f7f2 ffd5 	bl	80061a8 <HAL_GetTick>
 80131fe:	4602      	mov	r2, r0
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	1ad3      	subs	r3, r2, r3
 8013204:	69ba      	ldr	r2, [r7, #24]
 8013206:	429a      	cmp	r2, r3
 8013208:	d302      	bcc.n	8013210 <UART_WaitOnFlagUntilTimeout+0x30>
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d101      	bne.n	8013214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013210:	2303      	movs	r3, #3
 8013212:	e04e      	b.n	80132b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f003 0304 	and.w	r3, r3, #4
 801321e:	2b00      	cmp	r3, #0
 8013220:	d037      	beq.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2b80      	cmp	r3, #128	@ 0x80
 8013226:	d034      	beq.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	2b40      	cmp	r3, #64	@ 0x40
 801322c:	d031      	beq.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	69db      	ldr	r3, [r3, #28]
 8013234:	f003 0308 	and.w	r3, r3, #8
 8013238:	2b08      	cmp	r3, #8
 801323a:	d110      	bne.n	801325e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2208      	movs	r2, #8
 8013242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f000 f839 	bl	80132bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2208      	movs	r2, #8
 801324e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801325a:	2301      	movs	r3, #1
 801325c:	e029      	b.n	80132b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	69db      	ldr	r3, [r3, #28]
 8013264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801326c:	d111      	bne.n	8013292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013278:	68f8      	ldr	r0, [r7, #12]
 801327a:	f000 f81f 	bl	80132bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2220      	movs	r2, #32
 8013282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2200      	movs	r2, #0
 801328a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801328e:	2303      	movs	r3, #3
 8013290:	e00f      	b.n	80132b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	69da      	ldr	r2, [r3, #28]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	4013      	ands	r3, r2
 801329c:	68ba      	ldr	r2, [r7, #8]
 801329e:	429a      	cmp	r2, r3
 80132a0:	bf0c      	ite	eq
 80132a2:	2301      	moveq	r3, #1
 80132a4:	2300      	movne	r3, #0
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	461a      	mov	r2, r3
 80132aa:	79fb      	ldrb	r3, [r7, #7]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d0a0      	beq.n	80131f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3710      	adds	r7, #16
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
	...

080132bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80132bc:	b480      	push	{r7}
 80132be:	b095      	sub	sp, #84	@ 0x54
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132cc:	e853 3f00 	ldrex	r3, [r3]
 80132d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80132d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80132d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	461a      	mov	r2, r3
 80132e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80132e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80132e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80132ea:	e841 2300 	strex	r3, r2, [r1]
 80132ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80132f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d1e6      	bne.n	80132c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	3308      	adds	r3, #8
 80132fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132fe:	6a3b      	ldr	r3, [r7, #32]
 8013300:	e853 3f00 	ldrex	r3, [r3]
 8013304:	61fb      	str	r3, [r7, #28]
   return(result);
 8013306:	69fa      	ldr	r2, [r7, #28]
 8013308:	4b1e      	ldr	r3, [pc, #120]	@ (8013384 <UART_EndRxTransfer+0xc8>)
 801330a:	4013      	ands	r3, r2
 801330c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	3308      	adds	r3, #8
 8013314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801331a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801331c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801331e:	e841 2300 	strex	r3, r2, [r1]
 8013322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013326:	2b00      	cmp	r3, #0
 8013328:	d1e5      	bne.n	80132f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801332e:	2b01      	cmp	r3, #1
 8013330:	d118      	bne.n	8013364 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	e853 3f00 	ldrex	r3, [r3]
 801333e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	f023 0310 	bic.w	r3, r3, #16
 8013346:	647b      	str	r3, [r7, #68]	@ 0x44
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	461a      	mov	r2, r3
 801334e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013350:	61bb      	str	r3, [r7, #24]
 8013352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013354:	6979      	ldr	r1, [r7, #20]
 8013356:	69ba      	ldr	r2, [r7, #24]
 8013358:	e841 2300 	strex	r3, r2, [r1]
 801335c:	613b      	str	r3, [r7, #16]
   return(result);
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1e6      	bne.n	8013332 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2220      	movs	r2, #32
 8013368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2200      	movs	r2, #0
 8013376:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013378:	bf00      	nop
 801337a:	3754      	adds	r7, #84	@ 0x54
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	effffffe 	.word	0xeffffffe

08013388 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013396:	2b01      	cmp	r3, #1
 8013398:	d101      	bne.n	801339e <HAL_UARTEx_DisableFifoMode+0x16>
 801339a:	2302      	movs	r3, #2
 801339c:	e027      	b.n	80133ee <HAL_UARTEx_DisableFifoMode+0x66>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2201      	movs	r2, #1
 80133a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2224      	movs	r2, #36	@ 0x24
 80133aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f022 0201 	bic.w	r2, r2, #1
 80133c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80133cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2200      	movs	r2, #0
 80133d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2220      	movs	r2, #32
 80133e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3714      	adds	r7, #20
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b084      	sub	sp, #16
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
 8013402:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801340a:	2b01      	cmp	r3, #1
 801340c:	d101      	bne.n	8013412 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801340e:	2302      	movs	r3, #2
 8013410:	e02d      	b.n	801346e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2201      	movs	r2, #1
 8013416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2224      	movs	r2, #36	@ 0x24
 801341e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f022 0201 	bic.w	r2, r2, #1
 8013438:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	689b      	ldr	r3, [r3, #8]
 8013440:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	683a      	ldr	r2, [r7, #0]
 801344a:	430a      	orrs	r2, r1
 801344c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 f850 	bl	80134f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2220      	movs	r2, #32
 8013460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801346c:	2300      	movs	r3, #0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}

08013476 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013476:	b580      	push	{r7, lr}
 8013478:	b084      	sub	sp, #16
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013486:	2b01      	cmp	r3, #1
 8013488:	d101      	bne.n	801348e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801348a:	2302      	movs	r3, #2
 801348c:	e02d      	b.n	80134ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2201      	movs	r2, #1
 8013492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2224      	movs	r2, #36	@ 0x24
 801349a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f022 0201 	bic.w	r2, r2, #1
 80134b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	683a      	ldr	r2, [r7, #0]
 80134c6:	430a      	orrs	r2, r1
 80134c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 f812 	bl	80134f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2220      	movs	r2, #32
 80134dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
	...

080134f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b085      	sub	sp, #20
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013500:	2b00      	cmp	r3, #0
 8013502:	d108      	bne.n	8013516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2201      	movs	r2, #1
 8013508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2201      	movs	r2, #1
 8013510:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013514:	e031      	b.n	801357a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013516:	2310      	movs	r3, #16
 8013518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801351a:	2310      	movs	r3, #16
 801351c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	0e5b      	lsrs	r3, r3, #25
 8013526:	b2db      	uxtb	r3, r3
 8013528:	f003 0307 	and.w	r3, r3, #7
 801352c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	689b      	ldr	r3, [r3, #8]
 8013534:	0f5b      	lsrs	r3, r3, #29
 8013536:	b2db      	uxtb	r3, r3
 8013538:	f003 0307 	and.w	r3, r3, #7
 801353c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801353e:	7bbb      	ldrb	r3, [r7, #14]
 8013540:	7b3a      	ldrb	r2, [r7, #12]
 8013542:	4911      	ldr	r1, [pc, #68]	@ (8013588 <UARTEx_SetNbDataToProcess+0x94>)
 8013544:	5c8a      	ldrb	r2, [r1, r2]
 8013546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801354a:	7b3a      	ldrb	r2, [r7, #12]
 801354c:	490f      	ldr	r1, [pc, #60]	@ (801358c <UARTEx_SetNbDataToProcess+0x98>)
 801354e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013550:	fb93 f3f2 	sdiv	r3, r3, r2
 8013554:	b29a      	uxth	r2, r3
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801355c:	7bfb      	ldrb	r3, [r7, #15]
 801355e:	7b7a      	ldrb	r2, [r7, #13]
 8013560:	4909      	ldr	r1, [pc, #36]	@ (8013588 <UARTEx_SetNbDataToProcess+0x94>)
 8013562:	5c8a      	ldrb	r2, [r1, r2]
 8013564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013568:	7b7a      	ldrb	r2, [r7, #13]
 801356a:	4908      	ldr	r1, [pc, #32]	@ (801358c <UARTEx_SetNbDataToProcess+0x98>)
 801356c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801356e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801357a:	bf00      	nop
 801357c:	3714      	adds	r7, #20
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	0801cbc8 	.word	0x0801cbc8
 801358c:	0801cbd0 	.word	0x0801cbd0

08013590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013590:	b084      	sub	sp, #16
 8013592:	b580      	push	{r7, lr}
 8013594:	b084      	sub	sp, #16
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
 801359a:	f107 001c 	add.w	r0, r7, #28
 801359e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80135a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d121      	bne.n	80135ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	68da      	ldr	r2, [r3, #12]
 80135ba:	4b2c      	ldr	r3, [pc, #176]	@ (801366c <USB_CoreInit+0xdc>)
 80135bc:	4013      	ands	r3, r2
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80135ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d105      	bne.n	80135e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f001 faf6 	bl	8014bd4 <USB_CoreReset>
 80135e8:	4603      	mov	r3, r0
 80135ea:	73fb      	strb	r3, [r7, #15]
 80135ec:	e01b      	b.n	8013626 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f001 faea 	bl	8014bd4 <USB_CoreReset>
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013604:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013608:	2b00      	cmp	r3, #0
 801360a:	d106      	bne.n	801361a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013610:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	639a      	str	r2, [r3, #56]	@ 0x38
 8013618:	e005      	b.n	8013626 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801361e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013626:	7fbb      	ldrb	r3, [r7, #30]
 8013628:	2b01      	cmp	r3, #1
 801362a:	d116      	bne.n	801365a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013630:	b29a      	uxth	r2, r3
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801363a:	4b0d      	ldr	r3, [pc, #52]	@ (8013670 <USB_CoreInit+0xe0>)
 801363c:	4313      	orrs	r3, r2
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	f043 0206 	orr.w	r2, r3, #6
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	f043 0220 	orr.w	r2, r3, #32
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801365a:	7bfb      	ldrb	r3, [r7, #15]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013666:	b004      	add	sp, #16
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	ffbdffbf 	.word	0xffbdffbf
 8013670:	03ee0000 	.word	0x03ee0000

08013674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013674:	b480      	push	{r7}
 8013676:	b087      	sub	sp, #28
 8013678:	af00      	add	r7, sp, #0
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	4613      	mov	r3, r2
 8013680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013682:	79fb      	ldrb	r3, [r7, #7]
 8013684:	2b02      	cmp	r3, #2
 8013686:	d165      	bne.n	8013754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	4a41      	ldr	r2, [pc, #260]	@ (8013790 <USB_SetTurnaroundTime+0x11c>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d906      	bls.n	801369e <USB_SetTurnaroundTime+0x2a>
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	4a40      	ldr	r2, [pc, #256]	@ (8013794 <USB_SetTurnaroundTime+0x120>)
 8013694:	4293      	cmp	r3, r2
 8013696:	d202      	bcs.n	801369e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013698:	230f      	movs	r3, #15
 801369a:	617b      	str	r3, [r7, #20]
 801369c:	e062      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	4a3c      	ldr	r2, [pc, #240]	@ (8013794 <USB_SetTurnaroundTime+0x120>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d306      	bcc.n	80136b4 <USB_SetTurnaroundTime+0x40>
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	4a3b      	ldr	r2, [pc, #236]	@ (8013798 <USB_SetTurnaroundTime+0x124>)
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d202      	bcs.n	80136b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80136ae:	230e      	movs	r3, #14
 80136b0:	617b      	str	r3, [r7, #20]
 80136b2:	e057      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	4a38      	ldr	r2, [pc, #224]	@ (8013798 <USB_SetTurnaroundTime+0x124>)
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d306      	bcc.n	80136ca <USB_SetTurnaroundTime+0x56>
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	4a37      	ldr	r2, [pc, #220]	@ (801379c <USB_SetTurnaroundTime+0x128>)
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d202      	bcs.n	80136ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80136c4:	230d      	movs	r3, #13
 80136c6:	617b      	str	r3, [r7, #20]
 80136c8:	e04c      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	4a33      	ldr	r2, [pc, #204]	@ (801379c <USB_SetTurnaroundTime+0x128>)
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d306      	bcc.n	80136e0 <USB_SetTurnaroundTime+0x6c>
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	4a32      	ldr	r2, [pc, #200]	@ (80137a0 <USB_SetTurnaroundTime+0x12c>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d802      	bhi.n	80136e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80136da:	230c      	movs	r3, #12
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	e041      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	4a2f      	ldr	r2, [pc, #188]	@ (80137a0 <USB_SetTurnaroundTime+0x12c>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d906      	bls.n	80136f6 <USB_SetTurnaroundTime+0x82>
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	4a2e      	ldr	r2, [pc, #184]	@ (80137a4 <USB_SetTurnaroundTime+0x130>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d802      	bhi.n	80136f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80136f0:	230b      	movs	r3, #11
 80136f2:	617b      	str	r3, [r7, #20]
 80136f4:	e036      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	4a2a      	ldr	r2, [pc, #168]	@ (80137a4 <USB_SetTurnaroundTime+0x130>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d906      	bls.n	801370c <USB_SetTurnaroundTime+0x98>
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	4a29      	ldr	r2, [pc, #164]	@ (80137a8 <USB_SetTurnaroundTime+0x134>)
 8013702:	4293      	cmp	r3, r2
 8013704:	d802      	bhi.n	801370c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013706:	230a      	movs	r3, #10
 8013708:	617b      	str	r3, [r7, #20]
 801370a:	e02b      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	4a26      	ldr	r2, [pc, #152]	@ (80137a8 <USB_SetTurnaroundTime+0x134>)
 8013710:	4293      	cmp	r3, r2
 8013712:	d906      	bls.n	8013722 <USB_SetTurnaroundTime+0xae>
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	4a25      	ldr	r2, [pc, #148]	@ (80137ac <USB_SetTurnaroundTime+0x138>)
 8013718:	4293      	cmp	r3, r2
 801371a:	d202      	bcs.n	8013722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801371c:	2309      	movs	r3, #9
 801371e:	617b      	str	r3, [r7, #20]
 8013720:	e020      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	4a21      	ldr	r2, [pc, #132]	@ (80137ac <USB_SetTurnaroundTime+0x138>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d306      	bcc.n	8013738 <USB_SetTurnaroundTime+0xc4>
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	4a20      	ldr	r2, [pc, #128]	@ (80137b0 <USB_SetTurnaroundTime+0x13c>)
 801372e:	4293      	cmp	r3, r2
 8013730:	d802      	bhi.n	8013738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013732:	2308      	movs	r3, #8
 8013734:	617b      	str	r3, [r7, #20]
 8013736:	e015      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	4a1d      	ldr	r2, [pc, #116]	@ (80137b0 <USB_SetTurnaroundTime+0x13c>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d906      	bls.n	801374e <USB_SetTurnaroundTime+0xda>
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	4a1c      	ldr	r2, [pc, #112]	@ (80137b4 <USB_SetTurnaroundTime+0x140>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d202      	bcs.n	801374e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013748:	2307      	movs	r3, #7
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	e00a      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801374e:	2306      	movs	r3, #6
 8013750:	617b      	str	r3, [r7, #20]
 8013752:	e007      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013754:	79fb      	ldrb	r3, [r7, #7]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d102      	bne.n	8013760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801375a:	2309      	movs	r3, #9
 801375c:	617b      	str	r3, [r7, #20]
 801375e:	e001      	b.n	8013764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013760:	2309      	movs	r3, #9
 8013762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	68da      	ldr	r2, [r3, #12]
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	029b      	lsls	r3, r3, #10
 8013778:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801377c:	431a      	orrs	r2, r3
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013782:	2300      	movs	r3, #0
}
 8013784:	4618      	mov	r0, r3
 8013786:	371c      	adds	r7, #28
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr
 8013790:	00d8acbf 	.word	0x00d8acbf
 8013794:	00e4e1c0 	.word	0x00e4e1c0
 8013798:	00f42400 	.word	0x00f42400
 801379c:	01067380 	.word	0x01067380
 80137a0:	011a499f 	.word	0x011a499f
 80137a4:	01312cff 	.word	0x01312cff
 80137a8:	014ca43f 	.word	0x014ca43f
 80137ac:	016e3600 	.word	0x016e3600
 80137b0:	01a6ab1f 	.word	0x01a6ab1f
 80137b4:	01e84800 	.word	0x01e84800

080137b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	689b      	ldr	r3, [r3, #8]
 80137c4:	f043 0201 	orr.w	r2, r3, #1
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80137cc:	2300      	movs	r3, #0
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr

080137da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80137da:	b480      	push	{r7}
 80137dc:	b083      	sub	sp, #12
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	f023 0201 	bic.w	r2, r3, #1
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80137ee:	2300      	movs	r3, #0
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	370c      	adds	r7, #12
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr

080137fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	460b      	mov	r3, r1
 8013806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013808:	2300      	movs	r3, #0
 801380a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013818:	78fb      	ldrb	r3, [r7, #3]
 801381a:	2b01      	cmp	r3, #1
 801381c:	d115      	bne.n	801384a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801382a:	200a      	movs	r0, #10
 801382c:	f7f2 fcc8 	bl	80061c0 <HAL_Delay>
      ms += 10U;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	330a      	adds	r3, #10
 8013834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f001 f93b 	bl	8014ab2 <USB_GetMode>
 801383c:	4603      	mov	r3, r0
 801383e:	2b01      	cmp	r3, #1
 8013840:	d01e      	beq.n	8013880 <USB_SetCurrentMode+0x84>
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2bc7      	cmp	r3, #199	@ 0xc7
 8013846:	d9f0      	bls.n	801382a <USB_SetCurrentMode+0x2e>
 8013848:	e01a      	b.n	8013880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801384a:	78fb      	ldrb	r3, [r7, #3]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d115      	bne.n	801387c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801385c:	200a      	movs	r0, #10
 801385e:	f7f2 fcaf 	bl	80061c0 <HAL_Delay>
      ms += 10U;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	330a      	adds	r3, #10
 8013866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f001 f922 	bl	8014ab2 <USB_GetMode>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d005      	beq.n	8013880 <USB_SetCurrentMode+0x84>
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2bc7      	cmp	r3, #199	@ 0xc7
 8013878:	d9f0      	bls.n	801385c <USB_SetCurrentMode+0x60>
 801387a:	e001      	b.n	8013880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801387c:	2301      	movs	r3, #1
 801387e:	e005      	b.n	801388c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2bc8      	cmp	r3, #200	@ 0xc8
 8013884:	d101      	bne.n	801388a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013886:	2301      	movs	r3, #1
 8013888:	e000      	b.n	801388c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801388a:	2300      	movs	r3, #0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3710      	adds	r7, #16
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013894:	b084      	sub	sp, #16
 8013896:	b580      	push	{r7, lr}
 8013898:	b086      	sub	sp, #24
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80138a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80138a6:	2300      	movs	r3, #0
 80138a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80138ae:	2300      	movs	r3, #0
 80138b0:	613b      	str	r3, [r7, #16]
 80138b2:	e009      	b.n	80138c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	3340      	adds	r3, #64	@ 0x40
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	4413      	add	r3, r2
 80138be:	2200      	movs	r2, #0
 80138c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	3301      	adds	r3, #1
 80138c6:	613b      	str	r3, [r7, #16]
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	2b0e      	cmp	r3, #14
 80138cc:	d9f2      	bls.n	80138b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80138ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d11c      	bne.n	8013910 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	68fa      	ldr	r2, [r7, #12]
 80138e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80138e4:	f043 0302 	orr.w	r3, r3, #2
 80138e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	601a      	str	r2, [r3, #0]
 801390e:	e005      	b.n	801391c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013914:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013922:	461a      	mov	r2, r3
 8013924:	2300      	movs	r3, #0
 8013926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013928:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801392c:	2b01      	cmp	r3, #1
 801392e:	d10d      	bne.n	801394c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013934:	2b00      	cmp	r3, #0
 8013936:	d104      	bne.n	8013942 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013938:	2100      	movs	r1, #0
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f000 f968 	bl	8013c10 <USB_SetDevSpeed>
 8013940:	e008      	b.n	8013954 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013942:	2101      	movs	r1, #1
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f000 f963 	bl	8013c10 <USB_SetDevSpeed>
 801394a:	e003      	b.n	8013954 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801394c:	2103      	movs	r1, #3
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f000 f95e 	bl	8013c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013954:	2110      	movs	r1, #16
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f000 f8fa 	bl	8013b50 <USB_FlushTxFifo>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d001      	beq.n	8013966 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8013962:	2301      	movs	r3, #1
 8013964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f000 f924 	bl	8013bb4 <USB_FlushRxFifo>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d001      	beq.n	8013976 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801397c:	461a      	mov	r2, r3
 801397e:	2300      	movs	r3, #0
 8013980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013988:	461a      	mov	r2, r3
 801398a:	2300      	movs	r3, #0
 801398c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013994:	461a      	mov	r2, r3
 8013996:	2300      	movs	r3, #0
 8013998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801399a:	2300      	movs	r3, #0
 801399c:	613b      	str	r3, [r7, #16]
 801399e:	e043      	b.n	8013a28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	015a      	lsls	r2, r3, #5
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80139b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80139b6:	d118      	bne.n	80139ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10a      	bne.n	80139d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	015a      	lsls	r2, r3, #5
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	4413      	add	r3, r2
 80139c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139ca:	461a      	mov	r2, r3
 80139cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80139d0:	6013      	str	r3, [r2, #0]
 80139d2:	e013      	b.n	80139fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	015a      	lsls	r2, r3, #5
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4413      	add	r3, r2
 80139dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139e0:	461a      	mov	r2, r3
 80139e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80139e6:	6013      	str	r3, [r2, #0]
 80139e8:	e008      	b.n	80139fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	015a      	lsls	r2, r3, #5
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	4413      	add	r3, r2
 80139f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139f6:	461a      	mov	r2, r3
 80139f8:	2300      	movs	r3, #0
 80139fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	015a      	lsls	r2, r3, #5
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a08:	461a      	mov	r2, r3
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	015a      	lsls	r2, r3, #5
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	4413      	add	r3, r2
 8013a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	3301      	adds	r3, #1
 8013a26:	613b      	str	r3, [r7, #16]
 8013a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d3b5      	bcc.n	80139a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a34:	2300      	movs	r3, #0
 8013a36:	613b      	str	r3, [r7, #16]
 8013a38:	e043      	b.n	8013ac2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	015a      	lsls	r2, r3, #5
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	4413      	add	r3, r2
 8013a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013a50:	d118      	bne.n	8013a84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d10a      	bne.n	8013a6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	015a      	lsls	r2, r3, #5
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	4413      	add	r3, r2
 8013a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a64:	461a      	mov	r2, r3
 8013a66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8013a6a:	6013      	str	r3, [r2, #0]
 8013a6c:	e013      	b.n	8013a96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	015a      	lsls	r2, r3, #5
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	4413      	add	r3, r2
 8013a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013a80:	6013      	str	r3, [r2, #0]
 8013a82:	e008      	b.n	8013a96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a90:	461a      	mov	r2, r3
 8013a92:	2300      	movs	r3, #0
 8013a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	015a      	lsls	r2, r3, #5
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	015a      	lsls	r2, r3, #5
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	4413      	add	r3, r2
 8013ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	3301      	adds	r3, #1
 8013ac0:	613b      	str	r3, [r7, #16]
 8013ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d3b5      	bcc.n	8013a3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8013aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d105      	bne.n	8013b04 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	699b      	ldr	r3, [r3, #24]
 8013afc:	f043 0210 	orr.w	r2, r3, #16
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	699a      	ldr	r2, [r3, #24]
 8013b08:	4b0f      	ldr	r3, [pc, #60]	@ (8013b48 <USB_DevInit+0x2b4>)
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013b10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d005      	beq.n	8013b24 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	f043 0208 	orr.w	r2, r3, #8
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013b24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d105      	bne.n	8013b38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	699a      	ldr	r2, [r3, #24]
 8013b30:	4b06      	ldr	r3, [pc, #24]	@ (8013b4c <USB_DevInit+0x2b8>)
 8013b32:	4313      	orrs	r3, r2
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3718      	adds	r7, #24
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b44:	b004      	add	sp, #16
 8013b46:	4770      	bx	lr
 8013b48:	803c3800 	.word	0x803c3800
 8013b4c:	40000004 	.word	0x40000004

08013b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013b50:	b480      	push	{r7}
 8013b52:	b085      	sub	sp, #20
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	3301      	adds	r3, #1
 8013b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013b6a:	d901      	bls.n	8013b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013b6c:	2303      	movs	r3, #3
 8013b6e:	e01b      	b.n	8013ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	691b      	ldr	r3, [r3, #16]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	daf2      	bge.n	8013b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	019b      	lsls	r3, r3, #6
 8013b80:	f043 0220 	orr.w	r2, r3, #32
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013b94:	d901      	bls.n	8013b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013b96:	2303      	movs	r3, #3
 8013b98:	e006      	b.n	8013ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	691b      	ldr	r3, [r3, #16]
 8013b9e:	f003 0320 	and.w	r3, r3, #32
 8013ba2:	2b20      	cmp	r3, #32
 8013ba4:	d0f0      	beq.n	8013b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013ba6:	2300      	movs	r3, #0
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3714      	adds	r7, #20
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013bcc:	d901      	bls.n	8013bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013bce:	2303      	movs	r3, #3
 8013bd0:	e018      	b.n	8013c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	691b      	ldr	r3, [r3, #16]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	daf2      	bge.n	8013bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2210      	movs	r2, #16
 8013be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	3301      	adds	r3, #1
 8013be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013bf0:	d901      	bls.n	8013bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013bf2:	2303      	movs	r3, #3
 8013bf4:	e006      	b.n	8013c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	f003 0310 	and.w	r3, r3, #16
 8013bfe:	2b10      	cmp	r3, #16
 8013c00:	d0f0      	beq.n	8013be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013c02:	2300      	movs	r3, #0
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3714      	adds	r7, #20
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b085      	sub	sp, #20
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	78fb      	ldrb	r3, [r7, #3]
 8013c2a:	68f9      	ldr	r1, [r7, #12]
 8013c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013c30:	4313      	orrs	r3, r2
 8013c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013c34:	2300      	movs	r3, #0
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3714      	adds	r7, #20
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr

08013c42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8013c42:	b480      	push	{r7}
 8013c44:	b087      	sub	sp, #28
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013c54:	689b      	ldr	r3, [r3, #8]
 8013c56:	f003 0306 	and.w	r3, r3, #6
 8013c5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d102      	bne.n	8013c68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013c62:	2300      	movs	r3, #0
 8013c64:	75fb      	strb	r3, [r7, #23]
 8013c66:	e00a      	b.n	8013c7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2b02      	cmp	r3, #2
 8013c6c:	d002      	beq.n	8013c74 <USB_GetDevSpeed+0x32>
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	2b06      	cmp	r3, #6
 8013c72:	d102      	bne.n	8013c7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013c74:	2302      	movs	r3, #2
 8013c76:	75fb      	strb	r3, [r7, #23]
 8013c78:	e001      	b.n	8013c7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013c7a:	230f      	movs	r3, #15
 8013c7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	371c      	adds	r7, #28
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	785b      	ldrb	r3, [r3, #1]
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d139      	bne.n	8013d1c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013cae:	69da      	ldr	r2, [r3, #28]
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	f003 030f 	and.w	r3, r3, #15
 8013cb8:	2101      	movs	r1, #1
 8013cba:	fa01 f303 	lsl.w	r3, r1, r3
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	68f9      	ldr	r1, [r7, #12]
 8013cc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	015a      	lsls	r2, r3, #5
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d153      	bne.n	8013d88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	015a      	lsls	r2, r3, #5
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	689b      	ldr	r3, [r3, #8]
 8013cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	791b      	ldrb	r3, [r3, #4]
 8013cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	059b      	lsls	r3, r3, #22
 8013d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d04:	431a      	orrs	r2, r3
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	0159      	lsls	r1, r3, #5
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	440b      	add	r3, r1
 8013d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013d12:	4619      	mov	r1, r3
 8013d14:	4b20      	ldr	r3, [pc, #128]	@ (8013d98 <USB_ActivateEndpoint+0x10c>)
 8013d16:	4313      	orrs	r3, r2
 8013d18:	600b      	str	r3, [r1, #0]
 8013d1a:	e035      	b.n	8013d88 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013d22:	69da      	ldr	r2, [r3, #28]
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	f003 030f 	and.w	r3, r3, #15
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8013d32:	041b      	lsls	r3, r3, #16
 8013d34:	68f9      	ldr	r1, [r7, #12]
 8013d36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013d3a:	4313      	orrs	r3, r2
 8013d3c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	015a      	lsls	r2, r3, #5
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	4413      	add	r3, r2
 8013d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d119      	bne.n	8013d88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	015a      	lsls	r2, r3, #5
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	4413      	add	r3, r2
 8013d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	689b      	ldr	r3, [r3, #8]
 8013d66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	791b      	ldrb	r3, [r3, #4]
 8013d6e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013d70:	430b      	orrs	r3, r1
 8013d72:	431a      	orrs	r2, r3
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	0159      	lsls	r1, r3, #5
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	440b      	add	r3, r1
 8013d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d80:	4619      	mov	r1, r3
 8013d82:	4b05      	ldr	r3, [pc, #20]	@ (8013d98 <USB_ActivateEndpoint+0x10c>)
 8013d84:	4313      	orrs	r3, r2
 8013d86:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3714      	adds	r7, #20
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	10008000 	.word	0x10008000

08013d9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	b085      	sub	sp, #20
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	785b      	ldrb	r3, [r3, #1]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d161      	bne.n	8013e7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	015a      	lsls	r2, r3, #5
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013dce:	d11f      	bne.n	8013e10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	015a      	lsls	r2, r3, #5
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	68ba      	ldr	r2, [r7, #8]
 8013de0:	0151      	lsls	r1, r2, #5
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	440a      	add	r2, r1
 8013de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013dea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013dee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	015a      	lsls	r2, r3, #5
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	4413      	add	r3, r2
 8013df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	68ba      	ldr	r2, [r7, #8]
 8013e00:	0151      	lsls	r1, r2, #5
 8013e02:	68fa      	ldr	r2, [r7, #12]
 8013e04:	440a      	add	r2, r1
 8013e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	f003 030f 	and.w	r3, r3, #15
 8013e20:	2101      	movs	r1, #1
 8013e22:	fa01 f303 	lsl.w	r3, r1, r3
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	43db      	mvns	r3, r3
 8013e2a:	68f9      	ldr	r1, [r7, #12]
 8013e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013e30:	4013      	ands	r3, r2
 8013e32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013e3a:	69da      	ldr	r2, [r3, #28]
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	f003 030f 	and.w	r3, r3, #15
 8013e44:	2101      	movs	r1, #1
 8013e46:	fa01 f303 	lsl.w	r3, r1, r3
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	43db      	mvns	r3, r3
 8013e4e:	68f9      	ldr	r1, [r7, #12]
 8013e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013e54:	4013      	ands	r3, r2
 8013e56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	015a      	lsls	r2, r3, #5
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	4413      	add	r3, r2
 8013e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e64:	681a      	ldr	r2, [r3, #0]
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	0159      	lsls	r1, r3, #5
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	440b      	add	r3, r1
 8013e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013e72:	4619      	mov	r1, r3
 8013e74:	4b35      	ldr	r3, [pc, #212]	@ (8013f4c <USB_DeactivateEndpoint+0x1b0>)
 8013e76:	4013      	ands	r3, r2
 8013e78:	600b      	str	r3, [r1, #0]
 8013e7a:	e060      	b.n	8013f3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	015a      	lsls	r2, r3, #5
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	4413      	add	r3, r2
 8013e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013e92:	d11f      	bne.n	8013ed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	015a      	lsls	r2, r3, #5
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	68ba      	ldr	r2, [r7, #8]
 8013ea4:	0151      	lsls	r1, r2, #5
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	440a      	add	r2, r1
 8013eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013eae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013eb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	015a      	lsls	r2, r3, #5
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	4413      	add	r3, r2
 8013ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68ba      	ldr	r2, [r7, #8]
 8013ec4:	0151      	lsls	r1, r2, #5
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	440a      	add	r2, r1
 8013eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ece:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	f003 030f 	and.w	r3, r3, #15
 8013ee4:	2101      	movs	r1, #1
 8013ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8013eea:	041b      	lsls	r3, r3, #16
 8013eec:	43db      	mvns	r3, r3
 8013eee:	68f9      	ldr	r1, [r7, #12]
 8013ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013ef4:	4013      	ands	r3, r2
 8013ef6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013efe:	69da      	ldr	r2, [r3, #28]
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	f003 030f 	and.w	r3, r3, #15
 8013f08:	2101      	movs	r1, #1
 8013f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8013f0e:	041b      	lsls	r3, r3, #16
 8013f10:	43db      	mvns	r3, r3
 8013f12:	68f9      	ldr	r1, [r7, #12]
 8013f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013f18:	4013      	ands	r3, r2
 8013f1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	015a      	lsls	r2, r3, #5
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	4413      	add	r3, r2
 8013f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	0159      	lsls	r1, r3, #5
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	440b      	add	r3, r1
 8013f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f36:	4619      	mov	r1, r3
 8013f38:	4b05      	ldr	r3, [pc, #20]	@ (8013f50 <USB_DeactivateEndpoint+0x1b4>)
 8013f3a:	4013      	ands	r3, r2
 8013f3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3714      	adds	r7, #20
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr
 8013f4c:	ec337800 	.word	0xec337800
 8013f50:	eff37800 	.word	0xeff37800

08013f54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08a      	sub	sp, #40	@ 0x28
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	785b      	ldrb	r3, [r3, #1]
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	f040 8181 	bne.w	8014278 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d132      	bne.n	8013fe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	015a      	lsls	r2, r3, #5
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	4413      	add	r3, r2
 8013f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f8a:	691a      	ldr	r2, [r3, #16]
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	0159      	lsls	r1, r3, #5
 8013f90:	69fb      	ldr	r3, [r7, #28]
 8013f92:	440b      	add	r3, r1
 8013f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f98:	4619      	mov	r1, r3
 8013f9a:	4ba5      	ldr	r3, [pc, #660]	@ (8014230 <USB_EPStartXfer+0x2dc>)
 8013f9c:	4013      	ands	r3, r2
 8013f9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	015a      	lsls	r2, r3, #5
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fac:	691b      	ldr	r3, [r3, #16]
 8013fae:	69ba      	ldr	r2, [r7, #24]
 8013fb0:	0151      	lsls	r1, r2, #5
 8013fb2:	69fa      	ldr	r2, [r7, #28]
 8013fb4:	440a      	add	r2, r1
 8013fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013fba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fcc:	691a      	ldr	r2, [r3, #16]
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	0159      	lsls	r1, r3, #5
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	440b      	add	r3, r1
 8013fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fda:	4619      	mov	r1, r3
 8013fdc:	4b95      	ldr	r3, [pc, #596]	@ (8014234 <USB_EPStartXfer+0x2e0>)
 8013fde:	4013      	ands	r3, r2
 8013fe0:	610b      	str	r3, [r1, #16]
 8013fe2:	e092      	b.n	801410a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	015a      	lsls	r2, r3, #5
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	4413      	add	r3, r2
 8013fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ff0:	691a      	ldr	r2, [r3, #16]
 8013ff2:	69bb      	ldr	r3, [r7, #24]
 8013ff4:	0159      	lsls	r1, r3, #5
 8013ff6:	69fb      	ldr	r3, [r7, #28]
 8013ff8:	440b      	add	r3, r1
 8013ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ffe:	4619      	mov	r1, r3
 8014000:	4b8c      	ldr	r3, [pc, #560]	@ (8014234 <USB_EPStartXfer+0x2e0>)
 8014002:	4013      	ands	r3, r2
 8014004:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	015a      	lsls	r2, r3, #5
 801400a:	69fb      	ldr	r3, [r7, #28]
 801400c:	4413      	add	r3, r2
 801400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014012:	691a      	ldr	r2, [r3, #16]
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	0159      	lsls	r1, r3, #5
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	440b      	add	r3, r1
 801401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014020:	4619      	mov	r1, r3
 8014022:	4b83      	ldr	r3, [pc, #524]	@ (8014230 <USB_EPStartXfer+0x2dc>)
 8014024:	4013      	ands	r3, r2
 8014026:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d11a      	bne.n	8014064 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	691a      	ldr	r2, [r3, #16]
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	429a      	cmp	r2, r3
 8014038:	d903      	bls.n	8014042 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	689a      	ldr	r2, [r3, #8]
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	015a      	lsls	r2, r3, #5
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	4413      	add	r3, r2
 801404a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801404e:	691b      	ldr	r3, [r3, #16]
 8014050:	69ba      	ldr	r2, [r7, #24]
 8014052:	0151      	lsls	r1, r2, #5
 8014054:	69fa      	ldr	r2, [r7, #28]
 8014056:	440a      	add	r2, r1
 8014058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801405c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014060:	6113      	str	r3, [r2, #16]
 8014062:	e01b      	b.n	801409c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014064:	69bb      	ldr	r3, [r7, #24]
 8014066:	015a      	lsls	r2, r3, #5
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	4413      	add	r3, r2
 801406c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014070:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	6919      	ldr	r1, [r3, #16]
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	689b      	ldr	r3, [r3, #8]
 801407a:	440b      	add	r3, r1
 801407c:	1e59      	subs	r1, r3, #1
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	fbb1 f3f3 	udiv	r3, r1, r3
 8014086:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014088:	4b6b      	ldr	r3, [pc, #428]	@ (8014238 <USB_EPStartXfer+0x2e4>)
 801408a:	400b      	ands	r3, r1
 801408c:	69b9      	ldr	r1, [r7, #24]
 801408e:	0148      	lsls	r0, r1, #5
 8014090:	69f9      	ldr	r1, [r7, #28]
 8014092:	4401      	add	r1, r0
 8014094:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014098:	4313      	orrs	r3, r2
 801409a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	015a      	lsls	r2, r3, #5
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	4413      	add	r3, r2
 80140a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80140a8:	691a      	ldr	r2, [r3, #16]
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	691b      	ldr	r3, [r3, #16]
 80140ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80140b2:	69b9      	ldr	r1, [r7, #24]
 80140b4:	0148      	lsls	r0, r1, #5
 80140b6:	69f9      	ldr	r1, [r7, #28]
 80140b8:	4401      	add	r1, r0
 80140ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80140be:	4313      	orrs	r3, r2
 80140c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	791b      	ldrb	r3, [r3, #4]
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d11f      	bne.n	801410a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	015a      	lsls	r2, r3, #5
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	4413      	add	r3, r2
 80140d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80140d6:	691b      	ldr	r3, [r3, #16]
 80140d8:	69ba      	ldr	r2, [r7, #24]
 80140da:	0151      	lsls	r1, r2, #5
 80140dc:	69fa      	ldr	r2, [r7, #28]
 80140de:	440a      	add	r2, r1
 80140e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80140e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80140e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	015a      	lsls	r2, r3, #5
 80140ee:	69fb      	ldr	r3, [r7, #28]
 80140f0:	4413      	add	r3, r2
 80140f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80140f6:	691b      	ldr	r3, [r3, #16]
 80140f8:	69ba      	ldr	r2, [r7, #24]
 80140fa:	0151      	lsls	r1, r2, #5
 80140fc:	69fa      	ldr	r2, [r7, #28]
 80140fe:	440a      	add	r2, r1
 8014100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014104:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801410a:	79fb      	ldrb	r3, [r7, #7]
 801410c:	2b01      	cmp	r3, #1
 801410e:	d14b      	bne.n	80141a8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	69db      	ldr	r3, [r3, #28]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d009      	beq.n	801412c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	015a      	lsls	r2, r3, #5
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	4413      	add	r3, r2
 8014120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014124:	461a      	mov	r2, r3
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	69db      	ldr	r3, [r3, #28]
 801412a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	791b      	ldrb	r3, [r3, #4]
 8014130:	2b01      	cmp	r3, #1
 8014132:	d128      	bne.n	8014186 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801413a:	689b      	ldr	r3, [r3, #8]
 801413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014140:	2b00      	cmp	r3, #0
 8014142:	d110      	bne.n	8014166 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	015a      	lsls	r2, r3, #5
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	4413      	add	r3, r2
 801414c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	69ba      	ldr	r2, [r7, #24]
 8014154:	0151      	lsls	r1, r2, #5
 8014156:	69fa      	ldr	r2, [r7, #28]
 8014158:	440a      	add	r2, r1
 801415a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801415e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014162:	6013      	str	r3, [r2, #0]
 8014164:	e00f      	b.n	8014186 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	015a      	lsls	r2, r3, #5
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	4413      	add	r3, r2
 801416e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	69ba      	ldr	r2, [r7, #24]
 8014176:	0151      	lsls	r1, r2, #5
 8014178:	69fa      	ldr	r2, [r7, #28]
 801417a:	440a      	add	r2, r1
 801417c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	015a      	lsls	r2, r3, #5
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	4413      	add	r3, r2
 801418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	69ba      	ldr	r2, [r7, #24]
 8014196:	0151      	lsls	r1, r2, #5
 8014198:	69fa      	ldr	r2, [r7, #28]
 801419a:	440a      	add	r2, r1
 801419c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80141a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80141a4:	6013      	str	r3, [r2, #0]
 80141a6:	e16a      	b.n	801447e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	015a      	lsls	r2, r3, #5
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	4413      	add	r3, r2
 80141b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	69ba      	ldr	r2, [r7, #24]
 80141b8:	0151      	lsls	r1, r2, #5
 80141ba:	69fa      	ldr	r2, [r7, #28]
 80141bc:	440a      	add	r2, r1
 80141be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80141c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80141c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	791b      	ldrb	r3, [r3, #4]
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d015      	beq.n	80141fc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	691b      	ldr	r3, [r3, #16]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f000 8152 	beq.w	801447e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	f003 030f 	and.w	r3, r3, #15
 80141ea:	2101      	movs	r1, #1
 80141ec:	fa01 f303 	lsl.w	r3, r1, r3
 80141f0:	69f9      	ldr	r1, [r7, #28]
 80141f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80141f6:	4313      	orrs	r3, r2
 80141f8:	634b      	str	r3, [r1, #52]	@ 0x34
 80141fa:	e140      	b.n	801447e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014208:	2b00      	cmp	r3, #0
 801420a:	d117      	bne.n	801423c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	015a      	lsls	r2, r3, #5
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	4413      	add	r3, r2
 8014214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	69ba      	ldr	r2, [r7, #24]
 801421c:	0151      	lsls	r1, r2, #5
 801421e:	69fa      	ldr	r2, [r7, #28]
 8014220:	440a      	add	r2, r1
 8014222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014226:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801422a:	6013      	str	r3, [r2, #0]
 801422c:	e016      	b.n	801425c <USB_EPStartXfer+0x308>
 801422e:	bf00      	nop
 8014230:	e007ffff 	.word	0xe007ffff
 8014234:	fff80000 	.word	0xfff80000
 8014238:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	015a      	lsls	r2, r3, #5
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	4413      	add	r3, r2
 8014244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	69ba      	ldr	r2, [r7, #24]
 801424c:	0151      	lsls	r1, r2, #5
 801424e:	69fa      	ldr	r2, [r7, #28]
 8014250:	440a      	add	r2, r1
 8014252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801425a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	68d9      	ldr	r1, [r3, #12]
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	691b      	ldr	r3, [r3, #16]
 8014268:	b298      	uxth	r0, r3
 801426a:	79fb      	ldrb	r3, [r7, #7]
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	4603      	mov	r3, r0
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f000 f9b9 	bl	80145e8 <USB_WritePacket>
 8014276:	e102      	b.n	801447e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	015a      	lsls	r2, r3, #5
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	4413      	add	r3, r2
 8014280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014284:	691a      	ldr	r2, [r3, #16]
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	0159      	lsls	r1, r3, #5
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	440b      	add	r3, r1
 801428e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014292:	4619      	mov	r1, r3
 8014294:	4b7c      	ldr	r3, [pc, #496]	@ (8014488 <USB_EPStartXfer+0x534>)
 8014296:	4013      	ands	r3, r2
 8014298:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	015a      	lsls	r2, r3, #5
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	4413      	add	r3, r2
 80142a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142a6:	691a      	ldr	r2, [r3, #16]
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	0159      	lsls	r1, r3, #5
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	440b      	add	r3, r1
 80142b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142b4:	4619      	mov	r1, r3
 80142b6:	4b75      	ldr	r3, [pc, #468]	@ (801448c <USB_EPStartXfer+0x538>)
 80142b8:	4013      	ands	r3, r2
 80142ba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d12f      	bne.n	8014322 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d003      	beq.n	80142d2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	689a      	ldr	r2, [r3, #8]
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	689a      	ldr	r2, [r3, #8]
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	015a      	lsls	r2, r3, #5
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	4413      	add	r3, r2
 80142e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142e6:	691a      	ldr	r2, [r3, #16]
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	6a1b      	ldr	r3, [r3, #32]
 80142ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80142f0:	69b9      	ldr	r1, [r7, #24]
 80142f2:	0148      	lsls	r0, r1, #5
 80142f4:	69f9      	ldr	r1, [r7, #28]
 80142f6:	4401      	add	r1, r0
 80142f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80142fc:	4313      	orrs	r3, r2
 80142fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	015a      	lsls	r2, r3, #5
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	4413      	add	r3, r2
 8014308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	0151      	lsls	r1, r2, #5
 8014312:	69fa      	ldr	r2, [r7, #28]
 8014314:	440a      	add	r2, r1
 8014316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801431a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801431e:	6113      	str	r3, [r2, #16]
 8014320:	e05f      	b.n	80143e2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d123      	bne.n	8014372 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	015a      	lsls	r2, r3, #5
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	4413      	add	r3, r2
 8014332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014336:	691a      	ldr	r2, [r3, #16]
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	689b      	ldr	r3, [r3, #8]
 801433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014340:	69b9      	ldr	r1, [r7, #24]
 8014342:	0148      	lsls	r0, r1, #5
 8014344:	69f9      	ldr	r1, [r7, #28]
 8014346:	4401      	add	r1, r0
 8014348:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801434c:	4313      	orrs	r3, r2
 801434e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	015a      	lsls	r2, r3, #5
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	4413      	add	r3, r2
 8014358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801435c:	691b      	ldr	r3, [r3, #16]
 801435e:	69ba      	ldr	r2, [r7, #24]
 8014360:	0151      	lsls	r1, r2, #5
 8014362:	69fa      	ldr	r2, [r7, #28]
 8014364:	440a      	add	r2, r1
 8014366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801436a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801436e:	6113      	str	r3, [r2, #16]
 8014370:	e037      	b.n	80143e2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	691a      	ldr	r2, [r3, #16]
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	689b      	ldr	r3, [r3, #8]
 801437a:	4413      	add	r3, r2
 801437c:	1e5a      	subs	r2, r3, #1
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	fbb2 f3f3 	udiv	r3, r2, r3
 8014386:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	8afa      	ldrh	r2, [r7, #22]
 801438e:	fb03 f202 	mul.w	r2, r3, r2
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	015a      	lsls	r2, r3, #5
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	4413      	add	r3, r2
 801439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143a2:	691a      	ldr	r2, [r3, #16]
 80143a4:	8afb      	ldrh	r3, [r7, #22]
 80143a6:	04d9      	lsls	r1, r3, #19
 80143a8:	4b39      	ldr	r3, [pc, #228]	@ (8014490 <USB_EPStartXfer+0x53c>)
 80143aa:	400b      	ands	r3, r1
 80143ac:	69b9      	ldr	r1, [r7, #24]
 80143ae:	0148      	lsls	r0, r1, #5
 80143b0:	69f9      	ldr	r1, [r7, #28]
 80143b2:	4401      	add	r1, r0
 80143b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80143b8:	4313      	orrs	r3, r2
 80143ba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	015a      	lsls	r2, r3, #5
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	4413      	add	r3, r2
 80143c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143c8:	691a      	ldr	r2, [r3, #16]
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	6a1b      	ldr	r3, [r3, #32]
 80143ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143d2:	69b9      	ldr	r1, [r7, #24]
 80143d4:	0148      	lsls	r0, r1, #5
 80143d6:	69f9      	ldr	r1, [r7, #28]
 80143d8:	4401      	add	r1, r0
 80143da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80143de:	4313      	orrs	r3, r2
 80143e0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80143e2:	79fb      	ldrb	r3, [r7, #7]
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d10d      	bne.n	8014404 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d009      	beq.n	8014404 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	68d9      	ldr	r1, [r3, #12]
 80143f4:	69bb      	ldr	r3, [r7, #24]
 80143f6:	015a      	lsls	r2, r3, #5
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	4413      	add	r3, r2
 80143fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014400:	460a      	mov	r2, r1
 8014402:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	791b      	ldrb	r3, [r3, #4]
 8014408:	2b01      	cmp	r3, #1
 801440a:	d128      	bne.n	801445e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014418:	2b00      	cmp	r3, #0
 801441a:	d110      	bne.n	801443e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	015a      	lsls	r2, r3, #5
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	4413      	add	r3, r2
 8014424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	69ba      	ldr	r2, [r7, #24]
 801442c:	0151      	lsls	r1, r2, #5
 801442e:	69fa      	ldr	r2, [r7, #28]
 8014430:	440a      	add	r2, r1
 8014432:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801443a:	6013      	str	r3, [r2, #0]
 801443c:	e00f      	b.n	801445e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801443e:	69bb      	ldr	r3, [r7, #24]
 8014440:	015a      	lsls	r2, r3, #5
 8014442:	69fb      	ldr	r3, [r7, #28]
 8014444:	4413      	add	r3, r2
 8014446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	69ba      	ldr	r2, [r7, #24]
 801444e:	0151      	lsls	r1, r2, #5
 8014450:	69fa      	ldr	r2, [r7, #28]
 8014452:	440a      	add	r2, r1
 8014454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801445c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	015a      	lsls	r2, r3, #5
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	4413      	add	r3, r2
 8014466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	69ba      	ldr	r2, [r7, #24]
 801446e:	0151      	lsls	r1, r2, #5
 8014470:	69fa      	ldr	r2, [r7, #28]
 8014472:	440a      	add	r2, r1
 8014474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014478:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801447c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801447e:	2300      	movs	r3, #0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3720      	adds	r7, #32
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	fff80000 	.word	0xfff80000
 801448c:	e007ffff 	.word	0xe007ffff
 8014490:	1ff80000 	.word	0x1ff80000

08014494 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014494:	b480      	push	{r7}
 8014496:	b087      	sub	sp, #28
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801449e:	2300      	movs	r3, #0
 80144a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80144a2:	2300      	movs	r3, #0
 80144a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	785b      	ldrb	r3, [r3, #1]
 80144ae:	2b01      	cmp	r3, #1
 80144b0:	d14a      	bne.n	8014548 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	015a      	lsls	r2, r3, #5
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	4413      	add	r3, r2
 80144bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144ca:	f040 8086 	bne.w	80145da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	015a      	lsls	r2, r3, #5
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	4413      	add	r3, r2
 80144d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	683a      	ldr	r2, [r7, #0]
 80144e0:	7812      	ldrb	r2, [r2, #0]
 80144e2:	0151      	lsls	r1, r2, #5
 80144e4:	693a      	ldr	r2, [r7, #16]
 80144e6:	440a      	add	r2, r1
 80144e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80144ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80144f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	015a      	lsls	r2, r3, #5
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	4413      	add	r3, r2
 80144fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	7812      	ldrb	r2, [r2, #0]
 8014506:	0151      	lsls	r1, r2, #5
 8014508:	693a      	ldr	r2, [r7, #16]
 801450a:	440a      	add	r2, r1
 801450c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	3301      	adds	r3, #1
 801451a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014522:	4293      	cmp	r3, r2
 8014524:	d902      	bls.n	801452c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014526:	2301      	movs	r3, #1
 8014528:	75fb      	strb	r3, [r7, #23]
          break;
 801452a:	e056      	b.n	80145da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	015a      	lsls	r2, r3, #5
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	4413      	add	r3, r2
 8014536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014544:	d0e7      	beq.n	8014516 <USB_EPStopXfer+0x82>
 8014546:	e048      	b.n	80145da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	015a      	lsls	r2, r3, #5
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	4413      	add	r3, r2
 8014552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801455c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014560:	d13b      	bne.n	80145da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	4413      	add	r3, r2
 801456c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	683a      	ldr	r2, [r7, #0]
 8014574:	7812      	ldrb	r2, [r2, #0]
 8014576:	0151      	lsls	r1, r2, #5
 8014578:	693a      	ldr	r2, [r7, #16]
 801457a:	440a      	add	r2, r1
 801457c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014584:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	015a      	lsls	r2, r3, #5
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	4413      	add	r3, r2
 8014590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	683a      	ldr	r2, [r7, #0]
 8014598:	7812      	ldrb	r2, [r2, #0]
 801459a:	0151      	lsls	r1, r2, #5
 801459c:	693a      	ldr	r2, [r7, #16]
 801459e:	440a      	add	r2, r1
 80145a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80145a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80145a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	3301      	adds	r3, #1
 80145ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d902      	bls.n	80145c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80145ba:	2301      	movs	r3, #1
 80145bc:	75fb      	strb	r3, [r7, #23]
          break;
 80145be:	e00c      	b.n	80145da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	015a      	lsls	r2, r3, #5
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	4413      	add	r3, r2
 80145ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145d8:	d0e7      	beq.n	80145aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80145da:	7dfb      	ldrb	r3, [r7, #23]
}
 80145dc:	4618      	mov	r0, r3
 80145de:	371c      	adds	r7, #28
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr

080145e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80145e8:	b480      	push	{r7}
 80145ea:	b089      	sub	sp, #36	@ 0x24
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	4611      	mov	r1, r2
 80145f4:	461a      	mov	r2, r3
 80145f6:	460b      	mov	r3, r1
 80145f8:	71fb      	strb	r3, [r7, #7]
 80145fa:	4613      	mov	r3, r2
 80145fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801460a:	2b00      	cmp	r3, #0
 801460c:	d123      	bne.n	8014656 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801460e:	88bb      	ldrh	r3, [r7, #4]
 8014610:	3303      	adds	r3, #3
 8014612:	089b      	lsrs	r3, r3, #2
 8014614:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014616:	2300      	movs	r3, #0
 8014618:	61bb      	str	r3, [r7, #24]
 801461a:	e018      	b.n	801464e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801461c:	79fb      	ldrb	r3, [r7, #7]
 801461e:	031a      	lsls	r2, r3, #12
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	4413      	add	r3, r2
 8014624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014628:	461a      	mov	r2, r3
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	3301      	adds	r3, #1
 8014634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	3301      	adds	r3, #1
 801463a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	3301      	adds	r3, #1
 8014640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014642:	69fb      	ldr	r3, [r7, #28]
 8014644:	3301      	adds	r3, #1
 8014646:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	3301      	adds	r3, #1
 801464c:	61bb      	str	r3, [r7, #24]
 801464e:	69ba      	ldr	r2, [r7, #24]
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	429a      	cmp	r2, r3
 8014654:	d3e2      	bcc.n	801461c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014656:	2300      	movs	r3, #0
}
 8014658:	4618      	mov	r0, r3
 801465a:	3724      	adds	r7, #36	@ 0x24
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014664:	b480      	push	{r7}
 8014666:	b08b      	sub	sp, #44	@ 0x2c
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	4613      	mov	r3, r2
 8014670:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801467a:	88fb      	ldrh	r3, [r7, #6]
 801467c:	089b      	lsrs	r3, r3, #2
 801467e:	b29b      	uxth	r3, r3
 8014680:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014682:	88fb      	ldrh	r3, [r7, #6]
 8014684:	f003 0303 	and.w	r3, r3, #3
 8014688:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801468a:	2300      	movs	r3, #0
 801468c:	623b      	str	r3, [r7, #32]
 801468e:	e014      	b.n	80146ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801469a:	601a      	str	r2, [r3, #0]
    pDest++;
 801469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801469e:	3301      	adds	r3, #1
 80146a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a4:	3301      	adds	r3, #1
 80146a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146aa:	3301      	adds	r3, #1
 80146ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80146ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b0:	3301      	adds	r3, #1
 80146b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80146b4:	6a3b      	ldr	r3, [r7, #32]
 80146b6:	3301      	adds	r3, #1
 80146b8:	623b      	str	r3, [r7, #32]
 80146ba:	6a3a      	ldr	r2, [r7, #32]
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d3e6      	bcc.n	8014690 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80146c2:	8bfb      	ldrh	r3, [r7, #30]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d01e      	beq.n	8014706 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80146c8:	2300      	movs	r3, #0
 80146ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80146d2:	461a      	mov	r2, r3
 80146d4:	f107 0310 	add.w	r3, r7, #16
 80146d8:	6812      	ldr	r2, [r2, #0]
 80146da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80146dc:	693a      	ldr	r2, [r7, #16]
 80146de:	6a3b      	ldr	r3, [r7, #32]
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	fa22 f303 	lsr.w	r3, r2, r3
 80146e8:	b2da      	uxtb	r2, r3
 80146ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ec:	701a      	strb	r2, [r3, #0]
      i++;
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	3301      	adds	r3, #1
 80146f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80146f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f6:	3301      	adds	r3, #1
 80146f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80146fa:	8bfb      	ldrh	r3, [r7, #30]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014700:	8bfb      	ldrh	r3, [r7, #30]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d1ea      	bne.n	80146dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014708:	4618      	mov	r0, r3
 801470a:	372c      	adds	r7, #44	@ 0x2c
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014714:	b480      	push	{r7}
 8014716:	b085      	sub	sp, #20
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	785b      	ldrb	r3, [r3, #1]
 801472c:	2b01      	cmp	r3, #1
 801472e:	d12c      	bne.n	801478a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	015a      	lsls	r2, r3, #5
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	4413      	add	r3, r2
 8014738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	db12      	blt.n	8014768 <USB_EPSetStall+0x54>
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d00f      	beq.n	8014768 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	015a      	lsls	r2, r3, #5
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	4413      	add	r3, r2
 8014750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	0151      	lsls	r1, r2, #5
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	440a      	add	r2, r1
 801475e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014766:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	015a      	lsls	r2, r3, #5
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	4413      	add	r3, r2
 8014770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	68ba      	ldr	r2, [r7, #8]
 8014778:	0151      	lsls	r1, r2, #5
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	440a      	add	r2, r1
 801477e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	e02b      	b.n	80147e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	015a      	lsls	r2, r3, #5
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	4413      	add	r3, r2
 8014792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	db12      	blt.n	80147c2 <USB_EPSetStall+0xae>
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00f      	beq.n	80147c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	015a      	lsls	r2, r3, #5
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	4413      	add	r3, r2
 80147aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	0151      	lsls	r1, r2, #5
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	440a      	add	r2, r1
 80147b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80147bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80147c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	015a      	lsls	r2, r3, #5
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	4413      	add	r3, r2
 80147ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	68ba      	ldr	r2, [r7, #8]
 80147d2:	0151      	lsls	r1, r2, #5
 80147d4:	68fa      	ldr	r2, [r7, #12]
 80147d6:	440a      	add	r2, r1
 80147d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80147dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80147e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147e2:	2300      	movs	r3, #0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3714      	adds	r7, #20
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80147f0:	b480      	push	{r7}
 80147f2:	b085      	sub	sp, #20
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	785b      	ldrb	r3, [r3, #1]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d128      	bne.n	801485e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	68ba      	ldr	r2, [r7, #8]
 801481c:	0151      	lsls	r1, r2, #5
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	440a      	add	r2, r1
 8014822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801482a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	791b      	ldrb	r3, [r3, #4]
 8014830:	2b03      	cmp	r3, #3
 8014832:	d003      	beq.n	801483c <USB_EPClearStall+0x4c>
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	791b      	ldrb	r3, [r3, #4]
 8014838:	2b02      	cmp	r3, #2
 801483a:	d138      	bne.n	80148ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	015a      	lsls	r2, r3, #5
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	4413      	add	r3, r2
 8014844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	68ba      	ldr	r2, [r7, #8]
 801484c:	0151      	lsls	r1, r2, #5
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	440a      	add	r2, r1
 8014852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801485a:	6013      	str	r3, [r2, #0]
 801485c:	e027      	b.n	80148ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	015a      	lsls	r2, r3, #5
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	4413      	add	r3, r2
 8014866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	68ba      	ldr	r2, [r7, #8]
 801486e:	0151      	lsls	r1, r2, #5
 8014870:	68fa      	ldr	r2, [r7, #12]
 8014872:	440a      	add	r2, r1
 8014874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014878:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801487c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	791b      	ldrb	r3, [r3, #4]
 8014882:	2b03      	cmp	r3, #3
 8014884:	d003      	beq.n	801488e <USB_EPClearStall+0x9e>
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	791b      	ldrb	r3, [r3, #4]
 801488a:	2b02      	cmp	r3, #2
 801488c:	d10f      	bne.n	80148ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	015a      	lsls	r2, r3, #5
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	0151      	lsls	r1, r2, #5
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	440a      	add	r2, r1
 80148a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80148ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80148ae:	2300      	movs	r3, #0
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3714      	adds	r7, #20
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80148bc:	b480      	push	{r7}
 80148be:	b085      	sub	sp, #20
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	460b      	mov	r3, r1
 80148c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	68fa      	ldr	r2, [r7, #12]
 80148d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80148da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80148de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	78fb      	ldrb	r3, [r7, #3]
 80148ea:	011b      	lsls	r3, r3, #4
 80148ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80148f0:	68f9      	ldr	r1, [r7, #12]
 80148f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148f6:	4313      	orrs	r3, r2
 80148f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80148fa:	2300      	movs	r3, #0
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3714      	adds	r7, #20
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr

08014908 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014922:	f023 0303 	bic.w	r3, r3, #3
 8014926:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014936:	f023 0302 	bic.w	r3, r3, #2
 801493a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801493c:	2300      	movs	r3, #0
}
 801493e:	4618      	mov	r0, r3
 8014940:	3714      	adds	r7, #20
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr

0801494a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801494a:	b480      	push	{r7}
 801494c:	b085      	sub	sp, #20
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	68fa      	ldr	r2, [r7, #12]
 8014960:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014964:	f023 0303 	bic.w	r3, r3, #3
 8014968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014978:	f043 0302 	orr.w	r3, r3, #2
 801497c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	695b      	ldr	r3, [r3, #20]
 8014998:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	699b      	ldr	r3, [r3, #24]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	4013      	ands	r3, r2
 80149a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80149a4:	68fb      	ldr	r3, [r7, #12]
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3714      	adds	r7, #20
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr

080149b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80149b2:	b480      	push	{r7}
 80149b4:	b085      	sub	sp, #20
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149c4:	699b      	ldr	r3, [r3, #24]
 80149c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ce:	69db      	ldr	r3, [r3, #28]
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	4013      	ands	r3, r2
 80149d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	0c1b      	lsrs	r3, r3, #16
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3714      	adds	r7, #20
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr

080149e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80149e6:	b480      	push	{r7}
 80149e8:	b085      	sub	sp, #20
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149f8:	699b      	ldr	r3, [r3, #24]
 80149fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a02:	69db      	ldr	r3, [r3, #28]
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	4013      	ands	r3, r2
 8014a08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	b29b      	uxth	r3, r3
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3714      	adds	r7, #20
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a1a:	b480      	push	{r7}
 8014a1c:	b085      	sub	sp, #20
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
 8014a22:	460b      	mov	r3, r1
 8014a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014a2a:	78fb      	ldrb	r3, [r7, #3]
 8014a2c:	015a      	lsls	r2, r3, #5
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	4413      	add	r3, r2
 8014a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a40:	695b      	ldr	r3, [r3, #20]
 8014a42:	68ba      	ldr	r2, [r7, #8]
 8014a44:	4013      	ands	r3, r2
 8014a46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014a48:	68bb      	ldr	r3, [r7, #8]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3714      	adds	r7, #20
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a56:	b480      	push	{r7}
 8014a58:	b087      	sub	sp, #28
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	460b      	mov	r3, r1
 8014a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a6c:	691b      	ldr	r3, [r3, #16]
 8014a6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014a7a:	78fb      	ldrb	r3, [r7, #3]
 8014a7c:	f003 030f 	and.w	r3, r3, #15
 8014a80:	68fa      	ldr	r2, [r7, #12]
 8014a82:	fa22 f303 	lsr.w	r3, r2, r3
 8014a86:	01db      	lsls	r3, r3, #7
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	693a      	ldr	r2, [r7, #16]
 8014a8c:	4313      	orrs	r3, r2
 8014a8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014a90:	78fb      	ldrb	r3, [r7, #3]
 8014a92:	015a      	lsls	r2, r3, #5
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	4413      	add	r3, r2
 8014a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	693a      	ldr	r2, [r7, #16]
 8014aa0:	4013      	ands	r3, r2
 8014aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014aa4:	68bb      	ldr	r3, [r7, #8]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	371c      	adds	r7, #28
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	695b      	ldr	r3, [r3, #20]
 8014abe:	f003 0301 	and.w	r3, r3, #1
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	370c      	adds	r7, #12
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
	...

08014ad0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b085      	sub	sp, #20
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aea:	4619      	mov	r1, r3
 8014aec:	4b09      	ldr	r3, [pc, #36]	@ (8014b14 <USB_ActivateSetup+0x44>)
 8014aee:	4013      	ands	r3, r2
 8014af0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014b06:	2300      	movs	r3, #0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3714      	adds	r7, #20
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr
 8014b14:	fffff800 	.word	0xfffff800

08014b18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b087      	sub	sp, #28
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	460b      	mov	r3, r1
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	333c      	adds	r3, #60	@ 0x3c
 8014b2e:	3304      	adds	r3, #4
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	4a26      	ldr	r2, [pc, #152]	@ (8014bd0 <USB_EP0_OutStart+0xb8>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d90a      	bls.n	8014b52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014b4c:	d101      	bne.n	8014b52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	e037      	b.n	8014bc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b58:	461a      	mov	r2, r3
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	697a      	ldr	r2, [r7, #20]
 8014b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b78:	691b      	ldr	r3, [r3, #16]
 8014b7a:	697a      	ldr	r2, [r7, #20]
 8014b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b80:	f043 0318 	orr.w	r3, r3, #24
 8014b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b8c:	691b      	ldr	r3, [r3, #16]
 8014b8e:	697a      	ldr	r2, [r7, #20]
 8014b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8014b98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014b9a:	7afb      	ldrb	r3, [r7, #11]
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d10f      	bne.n	8014bc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014bba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8014bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014bc0:	2300      	movs	r3, #0
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	371c      	adds	r7, #28
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr
 8014bce:	bf00      	nop
 8014bd0:	4f54300a 	.word	0x4f54300a

08014bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	b085      	sub	sp, #20
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	3301      	adds	r3, #1
 8014be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014bec:	d901      	bls.n	8014bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014bee:	2303      	movs	r3, #3
 8014bf0:	e01b      	b.n	8014c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	691b      	ldr	r3, [r3, #16]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	daf2      	bge.n	8014be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	f043 0201 	orr.w	r2, r3, #1
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014c16:	d901      	bls.n	8014c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014c18:	2303      	movs	r3, #3
 8014c1a:	e006      	b.n	8014c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	691b      	ldr	r3, [r3, #16]
 8014c20:	f003 0301 	and.w	r3, r3, #1
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d0f0      	beq.n	8014c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3714      	adds	r7, #20
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr
	...

08014c38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014c44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8014c48:	f002 fcca 	bl	80175e0 <USBD_static_malloc>
 8014c4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d109      	bne.n	8014c68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	32b0      	adds	r2, #176	@ 0xb0
 8014c5e:	2100      	movs	r1, #0
 8014c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014c64:	2302      	movs	r3, #2
 8014c66:	e0d4      	b.n	8014e12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014c68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	68f8      	ldr	r0, [r7, #12]
 8014c70:	f004 f89f 	bl	8018db2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	32b0      	adds	r2, #176	@ 0xb0
 8014c7e:	68f9      	ldr	r1, [r7, #12]
 8014c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	32b0      	adds	r2, #176	@ 0xb0
 8014c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	7c1b      	ldrb	r3, [r3, #16]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d138      	bne.n	8014d12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8014e1c <USBD_CDC_Init+0x1e4>)
 8014ca2:	7819      	ldrb	r1, [r3, #0]
 8014ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014ca8:	2202      	movs	r2, #2
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f002 fb75 	bl	801739a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8014e1c <USBD_CDC_Init+0x1e4>)
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	f003 020f 	and.w	r2, r3, #15
 8014cb8:	6879      	ldr	r1, [r7, #4]
 8014cba:	4613      	mov	r3, r2
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	4413      	add	r3, r2
 8014cc0:	009b      	lsls	r3, r3, #2
 8014cc2:	440b      	add	r3, r1
 8014cc4:	3324      	adds	r3, #36	@ 0x24
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014cca:	4b55      	ldr	r3, [pc, #340]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014ccc:	7819      	ldrb	r1, [r3, #0]
 8014cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014cd2:	2202      	movs	r2, #2
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f002 fb60 	bl	801739a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014cda:	4b51      	ldr	r3, [pc, #324]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	f003 020f 	and.w	r2, r3, #15
 8014ce2:	6879      	ldr	r1, [r7, #4]
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	4413      	add	r3, r2
 8014cea:	009b      	lsls	r3, r3, #2
 8014cec:	440b      	add	r3, r1
 8014cee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8014e24 <USBD_CDC_Init+0x1ec>)
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	f003 020f 	and.w	r2, r3, #15
 8014cfe:	6879      	ldr	r1, [r7, #4]
 8014d00:	4613      	mov	r3, r2
 8014d02:	009b      	lsls	r3, r3, #2
 8014d04:	4413      	add	r3, r2
 8014d06:	009b      	lsls	r3, r3, #2
 8014d08:	440b      	add	r3, r1
 8014d0a:	3326      	adds	r3, #38	@ 0x26
 8014d0c:	2210      	movs	r2, #16
 8014d0e:	801a      	strh	r2, [r3, #0]
 8014d10:	e035      	b.n	8014d7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d12:	4b42      	ldr	r3, [pc, #264]	@ (8014e1c <USBD_CDC_Init+0x1e4>)
 8014d14:	7819      	ldrb	r1, [r3, #0]
 8014d16:	2340      	movs	r3, #64	@ 0x40
 8014d18:	2202      	movs	r2, #2
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f002 fb3d 	bl	801739a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d20:	4b3e      	ldr	r3, [pc, #248]	@ (8014e1c <USBD_CDC_Init+0x1e4>)
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	f003 020f 	and.w	r2, r3, #15
 8014d28:	6879      	ldr	r1, [r7, #4]
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4413      	add	r3, r2
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	440b      	add	r3, r1
 8014d34:	3324      	adds	r3, #36	@ 0x24
 8014d36:	2201      	movs	r2, #1
 8014d38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d3a:	4b39      	ldr	r3, [pc, #228]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014d3c:	7819      	ldrb	r1, [r3, #0]
 8014d3e:	2340      	movs	r3, #64	@ 0x40
 8014d40:	2202      	movs	r2, #2
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f002 fb29 	bl	801739a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d48:	4b35      	ldr	r3, [pc, #212]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	f003 020f 	and.w	r2, r3, #15
 8014d50:	6879      	ldr	r1, [r7, #4]
 8014d52:	4613      	mov	r3, r2
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	4413      	add	r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	440b      	add	r3, r1
 8014d5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014d60:	2201      	movs	r2, #1
 8014d62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d64:	4b2f      	ldr	r3, [pc, #188]	@ (8014e24 <USBD_CDC_Init+0x1ec>)
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	f003 020f 	and.w	r2, r3, #15
 8014d6c:	6879      	ldr	r1, [r7, #4]
 8014d6e:	4613      	mov	r3, r2
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	4413      	add	r3, r2
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	440b      	add	r3, r1
 8014d78:	3326      	adds	r3, #38	@ 0x26
 8014d7a:	2210      	movs	r2, #16
 8014d7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d7e:	4b29      	ldr	r3, [pc, #164]	@ (8014e24 <USBD_CDC_Init+0x1ec>)
 8014d80:	7819      	ldrb	r1, [r3, #0]
 8014d82:	2308      	movs	r3, #8
 8014d84:	2203      	movs	r2, #3
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f002 fb07 	bl	801739a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014d8c:	4b25      	ldr	r3, [pc, #148]	@ (8014e24 <USBD_CDC_Init+0x1ec>)
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	f003 020f 	and.w	r2, r3, #15
 8014d94:	6879      	ldr	r1, [r7, #4]
 8014d96:	4613      	mov	r3, r2
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	4413      	add	r3, r2
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	440b      	add	r3, r1
 8014da0:	3324      	adds	r3, #36	@ 0x24
 8014da2:	2201      	movs	r2, #1
 8014da4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2200      	movs	r2, #0
 8014daa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	33b0      	adds	r3, #176	@ 0xb0
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	4413      	add	r3, r2
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d101      	bne.n	8014de0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014ddc:	2302      	movs	r3, #2
 8014dde:	e018      	b.n	8014e12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	7c1b      	ldrb	r3, [r3, #16]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d10a      	bne.n	8014dfe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014de8:	4b0d      	ldr	r3, [pc, #52]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014dea:	7819      	ldrb	r1, [r3, #0]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f002 fbbe 	bl	8017578 <USBD_LL_PrepareReceive>
 8014dfc:	e008      	b.n	8014e10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014dfe:	4b08      	ldr	r3, [pc, #32]	@ (8014e20 <USBD_CDC_Init+0x1e8>)
 8014e00:	7819      	ldrb	r1, [r3, #0]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014e08:	2340      	movs	r3, #64	@ 0x40
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f002 fbb4 	bl	8017578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e10:	2300      	movs	r3, #0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	24000097 	.word	0x24000097
 8014e20:	24000098 	.word	0x24000098
 8014e24:	24000099 	.word	0x24000099

08014e28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	460b      	mov	r3, r1
 8014e32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014e34:	4b3a      	ldr	r3, [pc, #232]	@ (8014f20 <USBD_CDC_DeInit+0xf8>)
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f002 fad3 	bl	80173e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014e40:	4b37      	ldr	r3, [pc, #220]	@ (8014f20 <USBD_CDC_DeInit+0xf8>)
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	f003 020f 	and.w	r2, r3, #15
 8014e48:	6879      	ldr	r1, [r7, #4]
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	4413      	add	r3, r2
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	440b      	add	r3, r1
 8014e54:	3324      	adds	r3, #36	@ 0x24
 8014e56:	2200      	movs	r2, #0
 8014e58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014e5a:	4b32      	ldr	r3, [pc, #200]	@ (8014f24 <USBD_CDC_DeInit+0xfc>)
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f002 fac0 	bl	80173e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014e66:	4b2f      	ldr	r3, [pc, #188]	@ (8014f24 <USBD_CDC_DeInit+0xfc>)
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	f003 020f 	and.w	r2, r3, #15
 8014e6e:	6879      	ldr	r1, [r7, #4]
 8014e70:	4613      	mov	r3, r2
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4413      	add	r3, r2
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	440b      	add	r3, r1
 8014e7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014e7e:	2200      	movs	r2, #0
 8014e80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014e82:	4b29      	ldr	r3, [pc, #164]	@ (8014f28 <USBD_CDC_DeInit+0x100>)
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f002 faac 	bl	80173e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014e8e:	4b26      	ldr	r3, [pc, #152]	@ (8014f28 <USBD_CDC_DeInit+0x100>)
 8014e90:	781b      	ldrb	r3, [r3, #0]
 8014e92:	f003 020f 	and.w	r2, r3, #15
 8014e96:	6879      	ldr	r1, [r7, #4]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	4413      	add	r3, r2
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	440b      	add	r3, r1
 8014ea2:	3324      	adds	r3, #36	@ 0x24
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8014f28 <USBD_CDC_DeInit+0x100>)
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	f003 020f 	and.w	r2, r3, #15
 8014eb0:	6879      	ldr	r1, [r7, #4]
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	009b      	lsls	r3, r3, #2
 8014eb6:	4413      	add	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	440b      	add	r3, r1
 8014ebc:	3326      	adds	r3, #38	@ 0x26
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	32b0      	adds	r2, #176	@ 0xb0
 8014ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d01f      	beq.n	8014f14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	33b0      	adds	r3, #176	@ 0xb0
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	32b0      	adds	r2, #176	@ 0xb0
 8014ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f002 fb80 	bl	80175fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	32b0      	adds	r2, #176	@ 0xb0
 8014f06:	2100      	movs	r1, #0
 8014f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014f14:	2300      	movs	r3, #0
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3708      	adds	r7, #8
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	24000097 	.word	0x24000097
 8014f24:	24000098 	.word	0x24000098
 8014f28:	24000099 	.word	0x24000099

08014f2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b086      	sub	sp, #24
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	32b0      	adds	r2, #176	@ 0xb0
 8014f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014f46:	2300      	movs	r3, #0
 8014f48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d101      	bne.n	8014f5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014f58:	2303      	movs	r3, #3
 8014f5a:	e0bf      	b.n	80150dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d050      	beq.n	801500a <USBD_CDC_Setup+0xde>
 8014f68:	2b20      	cmp	r3, #32
 8014f6a:	f040 80af 	bne.w	80150cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	88db      	ldrh	r3, [r3, #6]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d03a      	beq.n	8014fec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	b25b      	sxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	da1b      	bge.n	8014fb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	33b0      	adds	r3, #176	@ 0xb0
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	4413      	add	r3, r2
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014f96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f98:	683a      	ldr	r2, [r7, #0]
 8014f9a:	88d2      	ldrh	r2, [r2, #6]
 8014f9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	88db      	ldrh	r3, [r3, #6]
 8014fa2:	2b07      	cmp	r3, #7
 8014fa4:	bf28      	it	cs
 8014fa6:	2307      	movcs	r3, #7
 8014fa8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	89fa      	ldrh	r2, [r7, #14]
 8014fae:	4619      	mov	r1, r3
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f001 fdbd 	bl	8016b30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014fb6:	e090      	b.n	80150da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	785a      	ldrb	r2, [r3, #1]
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	88db      	ldrh	r3, [r3, #6]
 8014fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8014fc8:	d803      	bhi.n	8014fd2 <USBD_CDC_Setup+0xa6>
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	88db      	ldrh	r3, [r3, #6]
 8014fce:	b2da      	uxtb	r2, r3
 8014fd0:	e000      	b.n	8014fd4 <USBD_CDC_Setup+0xa8>
 8014fd2:	2240      	movs	r2, #64	@ 0x40
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014fda:	6939      	ldr	r1, [r7, #16]
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f001 fdcf 	bl	8016b88 <USBD_CtlPrepareRx>
      break;
 8014fea:	e076      	b.n	80150da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	33b0      	adds	r3, #176	@ 0xb0
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	4413      	add	r3, r2
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	689b      	ldr	r3, [r3, #8]
 8014ffe:	683a      	ldr	r2, [r7, #0]
 8015000:	7850      	ldrb	r0, [r2, #1]
 8015002:	2200      	movs	r2, #0
 8015004:	6839      	ldr	r1, [r7, #0]
 8015006:	4798      	blx	r3
      break;
 8015008:	e067      	b.n	80150da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	785b      	ldrb	r3, [r3, #1]
 801500e:	2b0b      	cmp	r3, #11
 8015010:	d851      	bhi.n	80150b6 <USBD_CDC_Setup+0x18a>
 8015012:	a201      	add	r2, pc, #4	@ (adr r2, 8015018 <USBD_CDC_Setup+0xec>)
 8015014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015018:	08015049 	.word	0x08015049
 801501c:	080150c5 	.word	0x080150c5
 8015020:	080150b7 	.word	0x080150b7
 8015024:	080150b7 	.word	0x080150b7
 8015028:	080150b7 	.word	0x080150b7
 801502c:	080150b7 	.word	0x080150b7
 8015030:	080150b7 	.word	0x080150b7
 8015034:	080150b7 	.word	0x080150b7
 8015038:	080150b7 	.word	0x080150b7
 801503c:	080150b7 	.word	0x080150b7
 8015040:	08015073 	.word	0x08015073
 8015044:	0801509d 	.word	0x0801509d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801504e:	b2db      	uxtb	r3, r3
 8015050:	2b03      	cmp	r3, #3
 8015052:	d107      	bne.n	8015064 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015054:	f107 030a 	add.w	r3, r7, #10
 8015058:	2202      	movs	r2, #2
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f001 fd67 	bl	8016b30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015062:	e032      	b.n	80150ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f001 fce5 	bl	8016a36 <USBD_CtlError>
            ret = USBD_FAIL;
 801506c:	2303      	movs	r3, #3
 801506e:	75fb      	strb	r3, [r7, #23]
          break;
 8015070:	e02b      	b.n	80150ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015078:	b2db      	uxtb	r3, r3
 801507a:	2b03      	cmp	r3, #3
 801507c:	d107      	bne.n	801508e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801507e:	f107 030d 	add.w	r3, r7, #13
 8015082:	2201      	movs	r2, #1
 8015084:	4619      	mov	r1, r3
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f001 fd52 	bl	8016b30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801508c:	e01d      	b.n	80150ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f001 fcd0 	bl	8016a36 <USBD_CtlError>
            ret = USBD_FAIL;
 8015096:	2303      	movs	r3, #3
 8015098:	75fb      	strb	r3, [r7, #23]
          break;
 801509a:	e016      	b.n	80150ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	2b03      	cmp	r3, #3
 80150a6:	d00f      	beq.n	80150c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80150a8:	6839      	ldr	r1, [r7, #0]
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f001 fcc3 	bl	8016a36 <USBD_CtlError>
            ret = USBD_FAIL;
 80150b0:	2303      	movs	r3, #3
 80150b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80150b4:	e008      	b.n	80150c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f001 fcbc 	bl	8016a36 <USBD_CtlError>
          ret = USBD_FAIL;
 80150be:	2303      	movs	r3, #3
 80150c0:	75fb      	strb	r3, [r7, #23]
          break;
 80150c2:	e002      	b.n	80150ca <USBD_CDC_Setup+0x19e>
          break;
 80150c4:	bf00      	nop
 80150c6:	e008      	b.n	80150da <USBD_CDC_Setup+0x1ae>
          break;
 80150c8:	bf00      	nop
      }
      break;
 80150ca:	e006      	b.n	80150da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80150cc:	6839      	ldr	r1, [r7, #0]
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f001 fcb1 	bl	8016a36 <USBD_CtlError>
      ret = USBD_FAIL;
 80150d4:	2303      	movs	r3, #3
 80150d6:	75fb      	strb	r3, [r7, #23]
      break;
 80150d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80150da:	7dfb      	ldrb	r3, [r7, #23]
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3718      	adds	r7, #24
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	460b      	mov	r3, r1
 80150ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	32b0      	adds	r2, #176	@ 0xb0
 8015102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d101      	bne.n	801510e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801510a:	2303      	movs	r3, #3
 801510c:	e065      	b.n	80151da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	32b0      	adds	r2, #176	@ 0xb0
 8015118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801511c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801511e:	78fb      	ldrb	r3, [r7, #3]
 8015120:	f003 020f 	and.w	r2, r3, #15
 8015124:	6879      	ldr	r1, [r7, #4]
 8015126:	4613      	mov	r3, r2
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	4413      	add	r3, r2
 801512c:	009b      	lsls	r3, r3, #2
 801512e:	440b      	add	r3, r1
 8015130:	3318      	adds	r3, #24
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d02f      	beq.n	8015198 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015138:	78fb      	ldrb	r3, [r7, #3]
 801513a:	f003 020f 	and.w	r2, r3, #15
 801513e:	6879      	ldr	r1, [r7, #4]
 8015140:	4613      	mov	r3, r2
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	440b      	add	r3, r1
 801514a:	3318      	adds	r3, #24
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	78fb      	ldrb	r3, [r7, #3]
 8015150:	f003 010f 	and.w	r1, r3, #15
 8015154:	68f8      	ldr	r0, [r7, #12]
 8015156:	460b      	mov	r3, r1
 8015158:	00db      	lsls	r3, r3, #3
 801515a:	440b      	add	r3, r1
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	4403      	add	r3, r0
 8015160:	331c      	adds	r3, #28
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	fbb2 f1f3 	udiv	r1, r2, r3
 8015168:	fb01 f303 	mul.w	r3, r1, r3
 801516c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801516e:	2b00      	cmp	r3, #0
 8015170:	d112      	bne.n	8015198 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015172:	78fb      	ldrb	r3, [r7, #3]
 8015174:	f003 020f 	and.w	r2, r3, #15
 8015178:	6879      	ldr	r1, [r7, #4]
 801517a:	4613      	mov	r3, r2
 801517c:	009b      	lsls	r3, r3, #2
 801517e:	4413      	add	r3, r2
 8015180:	009b      	lsls	r3, r3, #2
 8015182:	440b      	add	r3, r1
 8015184:	3318      	adds	r3, #24
 8015186:	2200      	movs	r2, #0
 8015188:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801518a:	78f9      	ldrb	r1, [r7, #3]
 801518c:	2300      	movs	r3, #0
 801518e:	2200      	movs	r2, #0
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f002 f9d0 	bl	8017536 <USBD_LL_Transmit>
 8015196:	e01f      	b.n	80151d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	2200      	movs	r2, #0
 801519c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151a6:	687a      	ldr	r2, [r7, #4]
 80151a8:	33b0      	adds	r3, #176	@ 0xb0
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d010      	beq.n	80151d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	33b0      	adds	r3, #176	@ 0xb0
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	4413      	add	r3, r2
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	691b      	ldr	r3, [r3, #16]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80151d4:	78fa      	ldrb	r2, [r7, #3]
 80151d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80151d8:	2300      	movs	r3, #0
}
 80151da:	4618      	mov	r0, r3
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b084      	sub	sp, #16
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
 80151ea:	460b      	mov	r3, r1
 80151ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	32b0      	adds	r2, #176	@ 0xb0
 80151f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	32b0      	adds	r2, #176	@ 0xb0
 8015208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d101      	bne.n	8015214 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015210:	2303      	movs	r3, #3
 8015212:	e01a      	b.n	801524a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015214:	78fb      	ldrb	r3, [r7, #3]
 8015216:	4619      	mov	r1, r3
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f002 f9ce 	bl	80175ba <USBD_LL_GetRxDataSize>
 801521e:	4602      	mov	r2, r0
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	33b0      	adds	r3, #176	@ 0xb0
 8015230:	009b      	lsls	r3, r3, #2
 8015232:	4413      	add	r3, r2
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015244:	4611      	mov	r1, r2
 8015246:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015248:	2300      	movs	r3, #0
}
 801524a:	4618      	mov	r0, r3
 801524c:	3710      	adds	r7, #16
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}

08015252 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015252:	b580      	push	{r7, lr}
 8015254:	b084      	sub	sp, #16
 8015256:	af00      	add	r7, sp, #0
 8015258:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	32b0      	adds	r2, #176	@ 0xb0
 8015264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015268:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d101      	bne.n	8015274 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015270:	2303      	movs	r3, #3
 8015272:	e024      	b.n	80152be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801527a:	687a      	ldr	r2, [r7, #4]
 801527c:	33b0      	adds	r3, #176	@ 0xb0
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	4413      	add	r3, r2
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d019      	beq.n	80152bc <USBD_CDC_EP0_RxReady+0x6a>
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801528e:	2bff      	cmp	r3, #255	@ 0xff
 8015290:	d014      	beq.n	80152bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015298:	687a      	ldr	r2, [r7, #4]
 801529a:	33b0      	adds	r3, #176	@ 0xb0
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	4413      	add	r3, r2
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	689b      	ldr	r3, [r3, #8]
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80152aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80152b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	22ff      	movs	r2, #255	@ 0xff
 80152b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3710      	adds	r7, #16
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
	...

080152c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b086      	sub	sp, #24
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152d0:	2182      	movs	r1, #130	@ 0x82
 80152d2:	4818      	ldr	r0, [pc, #96]	@ (8015334 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152d4:	f000 fd4f 	bl	8015d76 <USBD_GetEpDesc>
 80152d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152da:	2101      	movs	r1, #1
 80152dc:	4815      	ldr	r0, [pc, #84]	@ (8015334 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152de:	f000 fd4a 	bl	8015d76 <USBD_GetEpDesc>
 80152e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80152e4:	2181      	movs	r1, #129	@ 0x81
 80152e6:	4813      	ldr	r0, [pc, #76]	@ (8015334 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152e8:	f000 fd45 	bl	8015d76 <USBD_GetEpDesc>
 80152ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d002      	beq.n	80152fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	2210      	movs	r2, #16
 80152f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d006      	beq.n	801530e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015300:	693b      	ldr	r3, [r7, #16]
 8015302:	2200      	movs	r2, #0
 8015304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015308:	711a      	strb	r2, [r3, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d006      	beq.n	8015322 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2200      	movs	r2, #0
 8015318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801531c:	711a      	strb	r2, [r3, #4]
 801531e:	2200      	movs	r2, #0
 8015320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2243      	movs	r2, #67	@ 0x43
 8015326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015328:	4b02      	ldr	r3, [pc, #8]	@ (8015334 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801532a:	4618      	mov	r0, r3
 801532c:	3718      	adds	r7, #24
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	24000054 	.word	0x24000054

08015338 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b086      	sub	sp, #24
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015340:	2182      	movs	r1, #130	@ 0x82
 8015342:	4818      	ldr	r0, [pc, #96]	@ (80153a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015344:	f000 fd17 	bl	8015d76 <USBD_GetEpDesc>
 8015348:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801534a:	2101      	movs	r1, #1
 801534c:	4815      	ldr	r0, [pc, #84]	@ (80153a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801534e:	f000 fd12 	bl	8015d76 <USBD_GetEpDesc>
 8015352:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015354:	2181      	movs	r1, #129	@ 0x81
 8015356:	4813      	ldr	r0, [pc, #76]	@ (80153a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015358:	f000 fd0d 	bl	8015d76 <USBD_GetEpDesc>
 801535c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d002      	beq.n	801536a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	2210      	movs	r2, #16
 8015368:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d006      	beq.n	801537e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	2200      	movs	r2, #0
 8015374:	711a      	strb	r2, [r3, #4]
 8015376:	2200      	movs	r2, #0
 8015378:	f042 0202 	orr.w	r2, r2, #2
 801537c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d006      	beq.n	8015392 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2200      	movs	r2, #0
 8015388:	711a      	strb	r2, [r3, #4]
 801538a:	2200      	movs	r2, #0
 801538c:	f042 0202 	orr.w	r2, r2, #2
 8015390:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2243      	movs	r2, #67	@ 0x43
 8015396:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015398:	4b02      	ldr	r3, [pc, #8]	@ (80153a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801539a:	4618      	mov	r0, r3
 801539c:	3718      	adds	r7, #24
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	24000054 	.word	0x24000054

080153a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80153b0:	2182      	movs	r1, #130	@ 0x82
 80153b2:	4818      	ldr	r0, [pc, #96]	@ (8015414 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153b4:	f000 fcdf 	bl	8015d76 <USBD_GetEpDesc>
 80153b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153ba:	2101      	movs	r1, #1
 80153bc:	4815      	ldr	r0, [pc, #84]	@ (8015414 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153be:	f000 fcda 	bl	8015d76 <USBD_GetEpDesc>
 80153c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153c4:	2181      	movs	r1, #129	@ 0x81
 80153c6:	4813      	ldr	r0, [pc, #76]	@ (8015414 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153c8:	f000 fcd5 	bl	8015d76 <USBD_GetEpDesc>
 80153cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d002      	beq.n	80153da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	2210      	movs	r2, #16
 80153d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d006      	beq.n	80153ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80153e8:	711a      	strb	r2, [r3, #4]
 80153ea:	2200      	movs	r2, #0
 80153ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d006      	beq.n	8015402 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80153fc:	711a      	strb	r2, [r3, #4]
 80153fe:	2200      	movs	r2, #0
 8015400:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2243      	movs	r2, #67	@ 0x43
 8015406:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015408:	4b02      	ldr	r3, [pc, #8]	@ (8015414 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801540a:	4618      	mov	r0, r3
 801540c:	3718      	adds	r7, #24
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	24000054 	.word	0x24000054

08015418 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	220a      	movs	r2, #10
 8015424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015426:	4b03      	ldr	r3, [pc, #12]	@ (8015434 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015428:	4618      	mov	r0, r3
 801542a:	370c      	adds	r7, #12
 801542c:	46bd      	mov	sp, r7
 801542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015432:	4770      	bx	lr
 8015434:	24000010 	.word	0x24000010

08015438 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015438:	b480      	push	{r7}
 801543a:	b083      	sub	sp, #12
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d101      	bne.n	801544c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015448:	2303      	movs	r3, #3
 801544a:	e009      	b.n	8015460 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	33b0      	adds	r3, #176	@ 0xb0
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	4413      	add	r3, r2
 801545a:	683a      	ldr	r2, [r7, #0]
 801545c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr

0801546c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801546c:	b480      	push	{r7}
 801546e:	b087      	sub	sp, #28
 8015470:	af00      	add	r7, sp, #0
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	60b9      	str	r1, [r7, #8]
 8015476:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	32b0      	adds	r2, #176	@ 0xb0
 8015482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015486:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801548e:	2303      	movs	r3, #3
 8015490:	e008      	b.n	80154a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	68ba      	ldr	r2, [r7, #8]
 8015496:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80154a2:	2300      	movs	r3, #0
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	371c      	adds	r7, #28
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr

080154b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b085      	sub	sp, #20
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	32b0      	adds	r2, #176	@ 0xb0
 80154c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80154d0:	2303      	movs	r3, #3
 80154d2:	e004      	b.n	80154de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	683a      	ldr	r2, [r7, #0]
 80154d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3714      	adds	r7, #20
 80154e2:	46bd      	mov	sp, r7
 80154e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e8:	4770      	bx	lr
	...

080154ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	32b0      	adds	r2, #176	@ 0xb0
 80154fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015502:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015504:	2301      	movs	r3, #1
 8015506:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801550e:	2303      	movs	r3, #3
 8015510:	e025      	b.n	801555e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015518:	2b00      	cmp	r3, #0
 801551a:	d11f      	bne.n	801555c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	2201      	movs	r2, #1
 8015520:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015524:	4b10      	ldr	r3, [pc, #64]	@ (8015568 <USBD_CDC_TransmitPacket+0x7c>)
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	f003 020f 	and.w	r2, r3, #15
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	4613      	mov	r3, r2
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	4413      	add	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4403      	add	r3, r0
 801553e:	3318      	adds	r3, #24
 8015540:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015542:	4b09      	ldr	r3, [pc, #36]	@ (8015568 <USBD_CDC_TransmitPacket+0x7c>)
 8015544:	7819      	ldrb	r1, [r3, #0]
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f001 ffef 	bl	8017536 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015558:	2300      	movs	r3, #0
 801555a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801555c:	7bfb      	ldrb	r3, [r7, #15]
}
 801555e:	4618      	mov	r0, r3
 8015560:	3710      	adds	r7, #16
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	24000097 	.word	0x24000097

0801556c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b084      	sub	sp, #16
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	32b0      	adds	r2, #176	@ 0xb0
 801557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015582:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	32b0      	adds	r2, #176	@ 0xb0
 801558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d101      	bne.n	801559a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015596:	2303      	movs	r3, #3
 8015598:	e018      	b.n	80155cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	7c1b      	ldrb	r3, [r3, #16]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d10a      	bne.n	80155b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155a2:	4b0c      	ldr	r3, [pc, #48]	@ (80155d4 <USBD_CDC_ReceivePacket+0x68>)
 80155a4:	7819      	ldrb	r1, [r3, #0]
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80155ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f001 ffe1 	bl	8017578 <USBD_LL_PrepareReceive>
 80155b6:	e008      	b.n	80155ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155b8:	4b06      	ldr	r3, [pc, #24]	@ (80155d4 <USBD_CDC_ReceivePacket+0x68>)
 80155ba:	7819      	ldrb	r1, [r3, #0]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80155c2:	2340      	movs	r3, #64	@ 0x40
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f001 ffd7 	bl	8017578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155ca:	2300      	movs	r3, #0
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	24000098 	.word	0x24000098

080155d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b086      	sub	sp, #24
 80155dc:	af00      	add	r7, sp, #0
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	4613      	mov	r3, r2
 80155e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80155ec:	2303      	movs	r3, #3
 80155ee:	e01f      	b.n	8015630 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	2200      	movs	r2, #0
 80155f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2200      	movs	r2, #0
 80155fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2200      	movs	r2, #0
 8015604:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d003      	beq.n	8015616 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	68ba      	ldr	r2, [r7, #8]
 8015612:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2201      	movs	r2, #1
 801561a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	79fa      	ldrb	r2, [r7, #7]
 8015622:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	f001 fe4b 	bl	80172c0 <USBD_LL_Init>
 801562a:	4603      	mov	r3, r0
 801562c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3718      	adds	r7, #24
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015642:	2300      	movs	r3, #0
 8015644:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d101      	bne.n	8015650 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801564c:	2303      	movs	r3, #3
 801564e:	e025      	b.n	801569c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	32ae      	adds	r2, #174	@ 0xae
 8015662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00f      	beq.n	801568c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	32ae      	adds	r2, #174	@ 0xae
 8015676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801567c:	f107 020e 	add.w	r2, r7, #14
 8015680:	4610      	mov	r0, r2
 8015682:	4798      	blx	r3
 8015684:	4602      	mov	r2, r0
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015692:	1c5a      	adds	r2, r3, #1
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3710      	adds	r7, #16
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f001 fe59 	bl	8017364 <USBD_LL_Start>
 80156b2:	4603      	mov	r3, r0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80156bc:	b480      	push	{r7}
 80156be:	b083      	sub	sp, #12
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	370c      	adds	r7, #12
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr

080156d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b084      	sub	sp, #16
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	6078      	str	r0, [r7, #4]
 80156da:	460b      	mov	r3, r1
 80156dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d009      	beq.n	8015700 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	78fa      	ldrb	r2, [r7, #3]
 80156f6:	4611      	mov	r1, r2
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	4798      	blx	r3
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015700:	7bfb      	ldrb	r3, [r7, #15]
}
 8015702:	4618      	mov	r0, r3
 8015704:	3710      	adds	r7, #16
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}

0801570a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801570a:	b580      	push	{r7, lr}
 801570c:	b084      	sub	sp, #16
 801570e:	af00      	add	r7, sp, #0
 8015710:	6078      	str	r0, [r7, #4]
 8015712:	460b      	mov	r3, r1
 8015714:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015716:	2300      	movs	r3, #0
 8015718:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	78fa      	ldrb	r2, [r7, #3]
 8015724:	4611      	mov	r1, r2
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	4798      	blx	r3
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015730:	2303      	movs	r3, #3
 8015732:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015734:	7bfb      	ldrb	r3, [r7, #15]
}
 8015736:	4618      	mov	r0, r3
 8015738:	3710      	adds	r7, #16
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}

0801573e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801573e:	b580      	push	{r7, lr}
 8015740:	b084      	sub	sp, #16
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
 8015746:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801574e:	6839      	ldr	r1, [r7, #0]
 8015750:	4618      	mov	r0, r3
 8015752:	f001 f936 	bl	80169c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2201      	movs	r2, #1
 801575a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8015764:	461a      	mov	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8015772:	f003 031f 	and.w	r3, r3, #31
 8015776:	2b02      	cmp	r3, #2
 8015778:	d01a      	beq.n	80157b0 <USBD_LL_SetupStage+0x72>
 801577a:	2b02      	cmp	r3, #2
 801577c:	d822      	bhi.n	80157c4 <USBD_LL_SetupStage+0x86>
 801577e:	2b00      	cmp	r3, #0
 8015780:	d002      	beq.n	8015788 <USBD_LL_SetupStage+0x4a>
 8015782:	2b01      	cmp	r3, #1
 8015784:	d00a      	beq.n	801579c <USBD_LL_SetupStage+0x5e>
 8015786:	e01d      	b.n	80157c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801578e:	4619      	mov	r1, r3
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f000 fb63 	bl	8015e5c <USBD_StdDevReq>
 8015796:	4603      	mov	r3, r0
 8015798:	73fb      	strb	r3, [r7, #15]
      break;
 801579a:	e020      	b.n	80157de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80157a2:	4619      	mov	r1, r3
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f000 fbcb 	bl	8015f40 <USBD_StdItfReq>
 80157aa:	4603      	mov	r3, r0
 80157ac:	73fb      	strb	r3, [r7, #15]
      break;
 80157ae:	e016      	b.n	80157de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80157b6:	4619      	mov	r1, r3
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f000 fc2d 	bl	8016018 <USBD_StdEPReq>
 80157be:	4603      	mov	r3, r0
 80157c0:	73fb      	strb	r3, [r7, #15]
      break;
 80157c2:	e00c      	b.n	80157de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80157ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	4619      	mov	r1, r3
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f001 fe26 	bl	8017424 <USBD_LL_StallEP>
 80157d8:	4603      	mov	r3, r0
 80157da:	73fb      	strb	r3, [r7, #15]
      break;
 80157dc:	bf00      	nop
  }

  return ret;
 80157de:	7bfb      	ldrb	r3, [r7, #15]
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b086      	sub	sp, #24
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	460b      	mov	r3, r1
 80157f2:	607a      	str	r2, [r7, #4]
 80157f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80157fa:	7afb      	ldrb	r3, [r7, #11]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d16e      	bne.n	80158de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8015806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801580e:	2b03      	cmp	r3, #3
 8015810:	f040 8098 	bne.w	8015944 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	689a      	ldr	r2, [r3, #8]
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	429a      	cmp	r2, r3
 801581e:	d913      	bls.n	8015848 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	689a      	ldr	r2, [r3, #8]
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	1ad2      	subs	r2, r2, r3
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	68da      	ldr	r2, [r3, #12]
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	689b      	ldr	r3, [r3, #8]
 8015836:	4293      	cmp	r3, r2
 8015838:	bf28      	it	cs
 801583a:	4613      	movcs	r3, r2
 801583c:	461a      	mov	r2, r3
 801583e:	6879      	ldr	r1, [r7, #4]
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f001 f9be 	bl	8016bc2 <USBD_CtlContinueRx>
 8015846:	e07d      	b.n	8015944 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801584e:	f003 031f 	and.w	r3, r3, #31
 8015852:	2b02      	cmp	r3, #2
 8015854:	d014      	beq.n	8015880 <USBD_LL_DataOutStage+0x98>
 8015856:	2b02      	cmp	r3, #2
 8015858:	d81d      	bhi.n	8015896 <USBD_LL_DataOutStage+0xae>
 801585a:	2b00      	cmp	r3, #0
 801585c:	d002      	beq.n	8015864 <USBD_LL_DataOutStage+0x7c>
 801585e:	2b01      	cmp	r3, #1
 8015860:	d003      	beq.n	801586a <USBD_LL_DataOutStage+0x82>
 8015862:	e018      	b.n	8015896 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015864:	2300      	movs	r3, #0
 8015866:	75bb      	strb	r3, [r7, #22]
            break;
 8015868:	e018      	b.n	801589c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015870:	b2db      	uxtb	r3, r3
 8015872:	4619      	mov	r1, r3
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f000 fa64 	bl	8015d42 <USBD_CoreFindIF>
 801587a:	4603      	mov	r3, r0
 801587c:	75bb      	strb	r3, [r7, #22]
            break;
 801587e:	e00d      	b.n	801589c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015886:	b2db      	uxtb	r3, r3
 8015888:	4619      	mov	r1, r3
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f000 fa66 	bl	8015d5c <USBD_CoreFindEP>
 8015890:	4603      	mov	r3, r0
 8015892:	75bb      	strb	r3, [r7, #22]
            break;
 8015894:	e002      	b.n	801589c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015896:	2300      	movs	r3, #0
 8015898:	75bb      	strb	r3, [r7, #22]
            break;
 801589a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801589c:	7dbb      	ldrb	r3, [r7, #22]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d119      	bne.n	80158d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	2b03      	cmp	r3, #3
 80158ac:	d113      	bne.n	80158d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80158ae:	7dba      	ldrb	r2, [r7, #22]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	32ae      	adds	r2, #174	@ 0xae
 80158b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158b8:	691b      	ldr	r3, [r3, #16]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d00b      	beq.n	80158d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80158be:	7dba      	ldrb	r2, [r7, #22]
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80158c6:	7dba      	ldrb	r2, [r7, #22]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	32ae      	adds	r2, #174	@ 0xae
 80158cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	68f8      	ldr	r0, [r7, #12]
 80158d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80158d6:	68f8      	ldr	r0, [r7, #12]
 80158d8:	f001 f984 	bl	8016be4 <USBD_CtlSendStatus>
 80158dc:	e032      	b.n	8015944 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80158de:	7afb      	ldrb	r3, [r7, #11]
 80158e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	4619      	mov	r1, r3
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f000 fa37 	bl	8015d5c <USBD_CoreFindEP>
 80158ee:	4603      	mov	r3, r0
 80158f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80158f2:	7dbb      	ldrb	r3, [r7, #22]
 80158f4:	2bff      	cmp	r3, #255	@ 0xff
 80158f6:	d025      	beq.n	8015944 <USBD_LL_DataOutStage+0x15c>
 80158f8:	7dbb      	ldrb	r3, [r7, #22]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d122      	bne.n	8015944 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015904:	b2db      	uxtb	r3, r3
 8015906:	2b03      	cmp	r3, #3
 8015908:	d117      	bne.n	801593a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801590a:	7dba      	ldrb	r2, [r7, #22]
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	32ae      	adds	r2, #174	@ 0xae
 8015910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015914:	699b      	ldr	r3, [r3, #24]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00f      	beq.n	801593a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801591a:	7dba      	ldrb	r2, [r7, #22]
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015922:	7dba      	ldrb	r2, [r7, #22]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	32ae      	adds	r2, #174	@ 0xae
 8015928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801592c:	699b      	ldr	r3, [r3, #24]
 801592e:	7afa      	ldrb	r2, [r7, #11]
 8015930:	4611      	mov	r1, r2
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	4798      	blx	r3
 8015936:	4603      	mov	r3, r0
 8015938:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801593a:	7dfb      	ldrb	r3, [r7, #23]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d001      	beq.n	8015944 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015940:	7dfb      	ldrb	r3, [r7, #23]
 8015942:	e000      	b.n	8015946 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015944:	2300      	movs	r3, #0
}
 8015946:	4618      	mov	r0, r3
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}

0801594e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b086      	sub	sp, #24
 8015952:	af00      	add	r7, sp, #0
 8015954:	60f8      	str	r0, [r7, #12]
 8015956:	460b      	mov	r3, r1
 8015958:	607a      	str	r2, [r7, #4]
 801595a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801595c:	7afb      	ldrb	r3, [r7, #11]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d16f      	bne.n	8015a42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	3314      	adds	r3, #20
 8015966:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801596e:	2b02      	cmp	r3, #2
 8015970:	d15a      	bne.n	8015a28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	689a      	ldr	r2, [r3, #8]
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	429a      	cmp	r2, r3
 801597c:	d914      	bls.n	80159a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	689a      	ldr	r2, [r3, #8]
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	1ad2      	subs	r2, r2, r3
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	689b      	ldr	r3, [r3, #8]
 8015990:	461a      	mov	r2, r3
 8015992:	6879      	ldr	r1, [r7, #4]
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f001 f8e6 	bl	8016b66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801599a:	2300      	movs	r3, #0
 801599c:	2200      	movs	r2, #0
 801599e:	2100      	movs	r1, #0
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f001 fde9 	bl	8017578 <USBD_LL_PrepareReceive>
 80159a6:	e03f      	b.n	8015a28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	68da      	ldr	r2, [r3, #12]
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	689b      	ldr	r3, [r3, #8]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d11c      	bne.n	80159ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	685a      	ldr	r2, [r3, #4]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80159bc:	429a      	cmp	r2, r3
 80159be:	d316      	bcc.n	80159ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	685a      	ldr	r2, [r3, #4]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d20f      	bcs.n	80159ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80159ce:	2200      	movs	r2, #0
 80159d0:	2100      	movs	r1, #0
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f001 f8c7 	bl	8016b66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2200      	movs	r2, #0
 80159dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159e0:	2300      	movs	r3, #0
 80159e2:	2200      	movs	r2, #0
 80159e4:	2100      	movs	r1, #0
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	f001 fdc6 	bl	8017578 <USBD_LL_PrepareReceive>
 80159ec:	e01c      	b.n	8015a28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	2b03      	cmp	r3, #3
 80159f8:	d10f      	bne.n	8015a1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d009      	beq.n	8015a1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	68f8      	ldr	r0, [r7, #12]
 8015a18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a1a:	2180      	movs	r1, #128	@ 0x80
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f001 fd01 	bl	8017424 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f001 f8f1 	bl	8016c0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d03a      	beq.n	8015aa8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ff fe42 	bl	80156bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8015a40:	e032      	b.n	8015aa8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015a42:	7afb      	ldrb	r3, [r7, #11]
 8015a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	68f8      	ldr	r0, [r7, #12]
 8015a4e:	f000 f985 	bl	8015d5c <USBD_CoreFindEP>
 8015a52:	4603      	mov	r3, r0
 8015a54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a56:	7dfb      	ldrb	r3, [r7, #23]
 8015a58:	2bff      	cmp	r3, #255	@ 0xff
 8015a5a:	d025      	beq.n	8015aa8 <USBD_LL_DataInStage+0x15a>
 8015a5c:	7dfb      	ldrb	r3, [r7, #23]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d122      	bne.n	8015aa8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	d11c      	bne.n	8015aa8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015a6e:	7dfa      	ldrb	r2, [r7, #23]
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	32ae      	adds	r2, #174	@ 0xae
 8015a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a78:	695b      	ldr	r3, [r3, #20]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d014      	beq.n	8015aa8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015a7e:	7dfa      	ldrb	r2, [r7, #23]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a86:	7dfa      	ldrb	r2, [r7, #23]
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	32ae      	adds	r2, #174	@ 0xae
 8015a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a90:	695b      	ldr	r3, [r3, #20]
 8015a92:	7afa      	ldrb	r2, [r7, #11]
 8015a94:	4611      	mov	r1, r2
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	4798      	blx	r3
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015a9e:	7dbb      	ldrb	r3, [r7, #22]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d001      	beq.n	8015aa8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015aa4:	7dbb      	ldrb	r3, [r7, #22]
 8015aa6:	e000      	b.n	8015aaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015aa8:	2300      	movs	r3, #0
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3718      	adds	r7, #24
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}

08015ab2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015ab2:	b580      	push	{r7, lr}
 8015ab4:	b084      	sub	sp, #16
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015aba:	2300      	movs	r3, #0
 8015abc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d014      	beq.n	8015b18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d00e      	beq.n	8015b18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	6852      	ldr	r2, [r2, #4]
 8015b06:	b2d2      	uxtb	r2, r2
 8015b08:	4611      	mov	r1, r2
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	4798      	blx	r3
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d001      	beq.n	8015b18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015b14:	2303      	movs	r3, #3
 8015b16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b18:	2340      	movs	r3, #64	@ 0x40
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	2100      	movs	r1, #0
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f001 fc3b 	bl	801739a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2201      	movs	r2, #1
 8015b28:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2240      	movs	r2, #64	@ 0x40
 8015b30:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b34:	2340      	movs	r3, #64	@ 0x40
 8015b36:	2200      	movs	r2, #0
 8015b38:	2180      	movs	r1, #128	@ 0x80
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f001 fc2d 	bl	801739a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2201      	movs	r2, #1
 8015b44:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2240      	movs	r2, #64	@ 0x40
 8015b4a:	621a      	str	r2, [r3, #32]

  return ret;
 8015b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3710      	adds	r7, #16
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b56:	b480      	push	{r7}
 8015b58:	b083      	sub	sp, #12
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	78fa      	ldrb	r2, [r7, #3]
 8015b66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b68:	2300      	movs	r3, #0
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	370c      	adds	r7, #12
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b74:	4770      	bx	lr

08015b76 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b76:	b480      	push	{r7}
 8015b78:	b083      	sub	sp, #12
 8015b7a:	af00      	add	r7, sp, #0
 8015b7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	2b04      	cmp	r3, #4
 8015b88:	d006      	beq.n	8015b98 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2204      	movs	r2, #4
 8015b9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015ba0:	2300      	movs	r3, #0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	370c      	adds	r7, #12
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr

08015bae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bae:	b480      	push	{r7}
 8015bb0:	b083      	sub	sp, #12
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	2b04      	cmp	r3, #4
 8015bc0:	d106      	bne.n	8015bd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015bc8:	b2da      	uxtb	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015bd0:	2300      	movs	r3, #0
}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr

08015bde <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015bde:	b580      	push	{r7, lr}
 8015be0:	b082      	sub	sp, #8
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b03      	cmp	r3, #3
 8015bf0:	d110      	bne.n	8015c14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d00b      	beq.n	8015c14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c02:	69db      	ldr	r3, [r3, #28]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d005      	beq.n	8015c14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015c0e:	69db      	ldr	r3, [r3, #28]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b082      	sub	sp, #8
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	460b      	mov	r3, r1
 8015c28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	32ae      	adds	r2, #174	@ 0xae
 8015c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d101      	bne.n	8015c40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c3c:	2303      	movs	r3, #3
 8015c3e:	e01c      	b.n	8015c7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	2b03      	cmp	r3, #3
 8015c4a:	d115      	bne.n	8015c78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	32ae      	adds	r2, #174	@ 0xae
 8015c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c5a:	6a1b      	ldr	r3, [r3, #32]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d00b      	beq.n	8015c78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	32ae      	adds	r2, #174	@ 0xae
 8015c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c6e:	6a1b      	ldr	r3, [r3, #32]
 8015c70:	78fa      	ldrb	r2, [r7, #3]
 8015c72:	4611      	mov	r1, r2
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3708      	adds	r7, #8
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}

08015c82 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b082      	sub	sp, #8
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	32ae      	adds	r2, #174	@ 0xae
 8015c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d101      	bne.n	8015ca4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015ca0:	2303      	movs	r3, #3
 8015ca2:	e01c      	b.n	8015cde <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b03      	cmp	r3, #3
 8015cae:	d115      	bne.n	8015cdc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	32ae      	adds	r2, #174	@ 0xae
 8015cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00b      	beq.n	8015cdc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	32ae      	adds	r2, #174	@ 0xae
 8015cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cd4:	78fa      	ldrb	r2, [r7, #3]
 8015cd6:	4611      	mov	r1, r2
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015cdc:	2300      	movs	r3, #0
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3708      	adds	r7, #8
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}

08015ce6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015ce6:	b480      	push	{r7}
 8015ce8:	b083      	sub	sp, #12
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015cee:	2300      	movs	r3, #0
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	370c      	adds	r7, #12
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfa:	4770      	bx	lr

08015cfc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d04:	2300      	movs	r3, #0
 8015d06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d00e      	beq.n	8015d38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	6852      	ldr	r2, [r2, #4]
 8015d26:	b2d2      	uxtb	r2, r2
 8015d28:	4611      	mov	r1, r2
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	4798      	blx	r3
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015d34:	2303      	movs	r3, #3
 8015d36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3710      	adds	r7, #16
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}

08015d42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d42:	b480      	push	{r7}
 8015d44:	b083      	sub	sp, #12
 8015d46:	af00      	add	r7, sp, #0
 8015d48:	6078      	str	r0, [r7, #4]
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	370c      	adds	r7, #12
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr

08015d5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b083      	sub	sp, #12
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	460b      	mov	r3, r1
 8015d66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	370c      	adds	r7, #12
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr

08015d76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015d76:	b580      	push	{r7, lr}
 8015d78:	b086      	sub	sp, #24
 8015d7a:	af00      	add	r7, sp, #0
 8015d7c:	6078      	str	r0, [r7, #4]
 8015d7e:	460b      	mov	r3, r1
 8015d80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	885b      	ldrh	r3, [r3, #2]
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	7812      	ldrb	r2, [r2, #0]
 8015d98:	4293      	cmp	r3, r2
 8015d9a:	d91f      	bls.n	8015ddc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	781b      	ldrb	r3, [r3, #0]
 8015da0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015da2:	e013      	b.n	8015dcc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015da4:	f107 030a 	add.w	r3, r7, #10
 8015da8:	4619      	mov	r1, r3
 8015daa:	6978      	ldr	r0, [r7, #20]
 8015dac:	f000 f81b 	bl	8015de6 <USBD_GetNextDesc>
 8015db0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	785b      	ldrb	r3, [r3, #1]
 8015db6:	2b05      	cmp	r3, #5
 8015db8:	d108      	bne.n	8015dcc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	789b      	ldrb	r3, [r3, #2]
 8015dc2:	78fa      	ldrb	r2, [r7, #3]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d008      	beq.n	8015dda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	885b      	ldrh	r3, [r3, #2]
 8015dd0:	b29a      	uxth	r2, r3
 8015dd2:	897b      	ldrh	r3, [r7, #10]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d8e5      	bhi.n	8015da4 <USBD_GetEpDesc+0x2e>
 8015dd8:	e000      	b.n	8015ddc <USBD_GetEpDesc+0x66>
          break;
 8015dda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015ddc:	693b      	ldr	r3, [r7, #16]
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3718      	adds	r7, #24
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}

08015de6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015de6:	b480      	push	{r7}
 8015de8:	b085      	sub	sp, #20
 8015dea:	af00      	add	r7, sp, #0
 8015dec:	6078      	str	r0, [r7, #4]
 8015dee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	881b      	ldrh	r3, [r3, #0]
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	7812      	ldrb	r2, [r2, #0]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	461a      	mov	r2, r3
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015e10:	68fb      	ldr	r3, [r7, #12]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3714      	adds	r7, #20
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr

08015e1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015e1e:	b480      	push	{r7}
 8015e20:	b087      	sub	sp, #28
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	3301      	adds	r3, #1
 8015e34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015e3c:	8a3b      	ldrh	r3, [r7, #16]
 8015e3e:	021b      	lsls	r3, r3, #8
 8015e40:	b21a      	sxth	r2, r3
 8015e42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e46:	4313      	orrs	r3, r2
 8015e48:	b21b      	sxth	r3, r3
 8015e4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	371c      	adds	r7, #28
 8015e52:	46bd      	mov	sp, r7
 8015e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e58:	4770      	bx	lr
	...

08015e5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015e72:	2b40      	cmp	r3, #64	@ 0x40
 8015e74:	d005      	beq.n	8015e82 <USBD_StdDevReq+0x26>
 8015e76:	2b40      	cmp	r3, #64	@ 0x40
 8015e78:	d857      	bhi.n	8015f2a <USBD_StdDevReq+0xce>
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00f      	beq.n	8015e9e <USBD_StdDevReq+0x42>
 8015e7e:	2b20      	cmp	r3, #32
 8015e80:	d153      	bne.n	8015f2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	32ae      	adds	r2, #174	@ 0xae
 8015e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	6839      	ldr	r1, [r7, #0]
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	4798      	blx	r3
 8015e98:	4603      	mov	r3, r0
 8015e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8015e9c:	e04a      	b.n	8015f34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	785b      	ldrb	r3, [r3, #1]
 8015ea2:	2b09      	cmp	r3, #9
 8015ea4:	d83b      	bhi.n	8015f1e <USBD_StdDevReq+0xc2>
 8015ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8015eac <USBD_StdDevReq+0x50>)
 8015ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eac:	08015f01 	.word	0x08015f01
 8015eb0:	08015f15 	.word	0x08015f15
 8015eb4:	08015f1f 	.word	0x08015f1f
 8015eb8:	08015f0b 	.word	0x08015f0b
 8015ebc:	08015f1f 	.word	0x08015f1f
 8015ec0:	08015edf 	.word	0x08015edf
 8015ec4:	08015ed5 	.word	0x08015ed5
 8015ec8:	08015f1f 	.word	0x08015f1f
 8015ecc:	08015ef7 	.word	0x08015ef7
 8015ed0:	08015ee9 	.word	0x08015ee9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 fa3c 	bl	8016354 <USBD_GetDescriptor>
          break;
 8015edc:	e024      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015ede:	6839      	ldr	r1, [r7, #0]
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f000 fbcb 	bl	801667c <USBD_SetAddress>
          break;
 8015ee6:	e01f      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 fc0a 	bl	8016704 <USBD_SetConfig>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8015ef4:	e018      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015ef6:	6839      	ldr	r1, [r7, #0]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fcad 	bl	8016858 <USBD_GetConfig>
          break;
 8015efe:	e013      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fcde 	bl	80168c4 <USBD_GetStatus>
          break;
 8015f08:	e00e      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f0a:	6839      	ldr	r1, [r7, #0]
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 fd0d 	bl	801692c <USBD_SetFeature>
          break;
 8015f12:	e009      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fd31 	bl	801697e <USBD_ClrFeature>
          break;
 8015f1c:	e004      	b.n	8015f28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015f1e:	6839      	ldr	r1, [r7, #0]
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 fd88 	bl	8016a36 <USBD_CtlError>
          break;
 8015f26:	bf00      	nop
      }
      break;
 8015f28:	e004      	b.n	8015f34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 fd82 	bl	8016a36 <USBD_CtlError>
      break;
 8015f32:	bf00      	nop
  }

  return ret;
 8015f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3710      	adds	r7, #16
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop

08015f40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015f56:	2b40      	cmp	r3, #64	@ 0x40
 8015f58:	d005      	beq.n	8015f66 <USBD_StdItfReq+0x26>
 8015f5a:	2b40      	cmp	r3, #64	@ 0x40
 8015f5c:	d852      	bhi.n	8016004 <USBD_StdItfReq+0xc4>
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d001      	beq.n	8015f66 <USBD_StdItfReq+0x26>
 8015f62:	2b20      	cmp	r3, #32
 8015f64:	d14e      	bne.n	8016004 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	3b01      	subs	r3, #1
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d840      	bhi.n	8015ff6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	889b      	ldrh	r3, [r3, #4]
 8015f78:	b2db      	uxtb	r3, r3
 8015f7a:	2b01      	cmp	r3, #1
 8015f7c:	d836      	bhi.n	8015fec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	889b      	ldrh	r3, [r3, #4]
 8015f82:	b2db      	uxtb	r3, r3
 8015f84:	4619      	mov	r1, r3
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff fedb 	bl	8015d42 <USBD_CoreFindIF>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
 8015f92:	2bff      	cmp	r3, #255	@ 0xff
 8015f94:	d01d      	beq.n	8015fd2 <USBD_StdItfReq+0x92>
 8015f96:	7bbb      	ldrb	r3, [r7, #14]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d11a      	bne.n	8015fd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015f9c:	7bba      	ldrb	r2, [r7, #14]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	32ae      	adds	r2, #174	@ 0xae
 8015fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa6:	689b      	ldr	r3, [r3, #8]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d00f      	beq.n	8015fcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015fac:	7bba      	ldrb	r2, [r7, #14]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015fb4:	7bba      	ldrb	r2, [r7, #14]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	32ae      	adds	r2, #174	@ 0xae
 8015fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	6839      	ldr	r1, [r7, #0]
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	4798      	blx	r3
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fca:	e004      	b.n	8015fd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015fcc:	2303      	movs	r3, #3
 8015fce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fd0:	e001      	b.n	8015fd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015fd2:	2303      	movs	r3, #3
 8015fd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	88db      	ldrh	r3, [r3, #6]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d110      	bne.n	8016000 <USBD_StdItfReq+0xc0>
 8015fde:	7bfb      	ldrb	r3, [r7, #15]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10d      	bne.n	8016000 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f000 fdfd 	bl	8016be4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015fea:	e009      	b.n	8016000 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015fec:	6839      	ldr	r1, [r7, #0]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fd21 	bl	8016a36 <USBD_CtlError>
          break;
 8015ff4:	e004      	b.n	8016000 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fd1c 	bl	8016a36 <USBD_CtlError>
          break;
 8015ffe:	e000      	b.n	8016002 <USBD_StdItfReq+0xc2>
          break;
 8016000:	bf00      	nop
      }
      break;
 8016002:	e004      	b.n	801600e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016004:	6839      	ldr	r1, [r7, #0]
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 fd15 	bl	8016a36 <USBD_CtlError>
      break;
 801600c:	bf00      	nop
  }

  return ret;
 801600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016010:	4618      	mov	r0, r3
 8016012:	3710      	adds	r7, #16
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}

08016018 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016022:	2300      	movs	r3, #0
 8016024:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	889b      	ldrh	r3, [r3, #4]
 801602a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016034:	2b40      	cmp	r3, #64	@ 0x40
 8016036:	d007      	beq.n	8016048 <USBD_StdEPReq+0x30>
 8016038:	2b40      	cmp	r3, #64	@ 0x40
 801603a:	f200 817f 	bhi.w	801633c <USBD_StdEPReq+0x324>
 801603e:	2b00      	cmp	r3, #0
 8016040:	d02a      	beq.n	8016098 <USBD_StdEPReq+0x80>
 8016042:	2b20      	cmp	r3, #32
 8016044:	f040 817a 	bne.w	801633c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016048:	7bbb      	ldrb	r3, [r7, #14]
 801604a:	4619      	mov	r1, r3
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7ff fe85 	bl	8015d5c <USBD_CoreFindEP>
 8016052:	4603      	mov	r3, r0
 8016054:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016056:	7b7b      	ldrb	r3, [r7, #13]
 8016058:	2bff      	cmp	r3, #255	@ 0xff
 801605a:	f000 8174 	beq.w	8016346 <USBD_StdEPReq+0x32e>
 801605e:	7b7b      	ldrb	r3, [r7, #13]
 8016060:	2b00      	cmp	r3, #0
 8016062:	f040 8170 	bne.w	8016346 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016066:	7b7a      	ldrb	r2, [r7, #13]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801606e:	7b7a      	ldrb	r2, [r7, #13]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	32ae      	adds	r2, #174	@ 0xae
 8016074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016078:	689b      	ldr	r3, [r3, #8]
 801607a:	2b00      	cmp	r3, #0
 801607c:	f000 8163 	beq.w	8016346 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016080:	7b7a      	ldrb	r2, [r7, #13]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	32ae      	adds	r2, #174	@ 0xae
 8016086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801608a:	689b      	ldr	r3, [r3, #8]
 801608c:	6839      	ldr	r1, [r7, #0]
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	4798      	blx	r3
 8016092:	4603      	mov	r3, r0
 8016094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016096:	e156      	b.n	8016346 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	785b      	ldrb	r3, [r3, #1]
 801609c:	2b03      	cmp	r3, #3
 801609e:	d008      	beq.n	80160b2 <USBD_StdEPReq+0x9a>
 80160a0:	2b03      	cmp	r3, #3
 80160a2:	f300 8145 	bgt.w	8016330 <USBD_StdEPReq+0x318>
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f000 809b 	beq.w	80161e2 <USBD_StdEPReq+0x1ca>
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d03c      	beq.n	801612a <USBD_StdEPReq+0x112>
 80160b0:	e13e      	b.n	8016330 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b02      	cmp	r3, #2
 80160bc:	d002      	beq.n	80160c4 <USBD_StdEPReq+0xac>
 80160be:	2b03      	cmp	r3, #3
 80160c0:	d016      	beq.n	80160f0 <USBD_StdEPReq+0xd8>
 80160c2:	e02c      	b.n	801611e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80160c4:	7bbb      	ldrb	r3, [r7, #14]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00d      	beq.n	80160e6 <USBD_StdEPReq+0xce>
 80160ca:	7bbb      	ldrb	r3, [r7, #14]
 80160cc:	2b80      	cmp	r3, #128	@ 0x80
 80160ce:	d00a      	beq.n	80160e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80160d0:	7bbb      	ldrb	r3, [r7, #14]
 80160d2:	4619      	mov	r1, r3
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f001 f9a5 	bl	8017424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80160da:	2180      	movs	r1, #128	@ 0x80
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f001 f9a1 	bl	8017424 <USBD_LL_StallEP>
 80160e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80160e4:	e020      	b.n	8016128 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 fca4 	bl	8016a36 <USBD_CtlError>
              break;
 80160ee:	e01b      	b.n	8016128 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	885b      	ldrh	r3, [r3, #2]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d10e      	bne.n	8016116 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80160f8:	7bbb      	ldrb	r3, [r7, #14]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00b      	beq.n	8016116 <USBD_StdEPReq+0xfe>
 80160fe:	7bbb      	ldrb	r3, [r7, #14]
 8016100:	2b80      	cmp	r3, #128	@ 0x80
 8016102:	d008      	beq.n	8016116 <USBD_StdEPReq+0xfe>
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	88db      	ldrh	r3, [r3, #6]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d104      	bne.n	8016116 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801610c:	7bbb      	ldrb	r3, [r7, #14]
 801610e:	4619      	mov	r1, r3
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f001 f987 	bl	8017424 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f000 fd64 	bl	8016be4 <USBD_CtlSendStatus>

              break;
 801611c:	e004      	b.n	8016128 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801611e:	6839      	ldr	r1, [r7, #0]
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 fc88 	bl	8016a36 <USBD_CtlError>
              break;
 8016126:	bf00      	nop
          }
          break;
 8016128:	e107      	b.n	801633a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016130:	b2db      	uxtb	r3, r3
 8016132:	2b02      	cmp	r3, #2
 8016134:	d002      	beq.n	801613c <USBD_StdEPReq+0x124>
 8016136:	2b03      	cmp	r3, #3
 8016138:	d016      	beq.n	8016168 <USBD_StdEPReq+0x150>
 801613a:	e04b      	b.n	80161d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801613c:	7bbb      	ldrb	r3, [r7, #14]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d00d      	beq.n	801615e <USBD_StdEPReq+0x146>
 8016142:	7bbb      	ldrb	r3, [r7, #14]
 8016144:	2b80      	cmp	r3, #128	@ 0x80
 8016146:	d00a      	beq.n	801615e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016148:	7bbb      	ldrb	r3, [r7, #14]
 801614a:	4619      	mov	r1, r3
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f001 f969 	bl	8017424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016152:	2180      	movs	r1, #128	@ 0x80
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f001 f965 	bl	8017424 <USBD_LL_StallEP>
 801615a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801615c:	e040      	b.n	80161e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801615e:	6839      	ldr	r1, [r7, #0]
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 fc68 	bl	8016a36 <USBD_CtlError>
              break;
 8016166:	e03b      	b.n	80161e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	885b      	ldrh	r3, [r3, #2]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d136      	bne.n	80161de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016170:	7bbb      	ldrb	r3, [r7, #14]
 8016172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016176:	2b00      	cmp	r3, #0
 8016178:	d004      	beq.n	8016184 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801617a:	7bbb      	ldrb	r3, [r7, #14]
 801617c:	4619      	mov	r1, r3
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f001 f96f 	bl	8017462 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f000 fd2d 	bl	8016be4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801618a:	7bbb      	ldrb	r3, [r7, #14]
 801618c:	4619      	mov	r1, r3
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff fde4 	bl	8015d5c <USBD_CoreFindEP>
 8016194:	4603      	mov	r3, r0
 8016196:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016198:	7b7b      	ldrb	r3, [r7, #13]
 801619a:	2bff      	cmp	r3, #255	@ 0xff
 801619c:	d01f      	beq.n	80161de <USBD_StdEPReq+0x1c6>
 801619e:	7b7b      	ldrb	r3, [r7, #13]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d11c      	bne.n	80161de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80161a4:	7b7a      	ldrb	r2, [r7, #13]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80161ac:	7b7a      	ldrb	r2, [r7, #13]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	32ae      	adds	r2, #174	@ 0xae
 80161b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161b6:	689b      	ldr	r3, [r3, #8]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d010      	beq.n	80161de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80161bc:	7b7a      	ldrb	r2, [r7, #13]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	32ae      	adds	r2, #174	@ 0xae
 80161c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161c6:	689b      	ldr	r3, [r3, #8]
 80161c8:	6839      	ldr	r1, [r7, #0]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	4798      	blx	r3
 80161ce:	4603      	mov	r3, r0
 80161d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80161d2:	e004      	b.n	80161de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80161d4:	6839      	ldr	r1, [r7, #0]
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 fc2d 	bl	8016a36 <USBD_CtlError>
              break;
 80161dc:	e000      	b.n	80161e0 <USBD_StdEPReq+0x1c8>
              break;
 80161de:	bf00      	nop
          }
          break;
 80161e0:	e0ab      	b.n	801633a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	d002      	beq.n	80161f4 <USBD_StdEPReq+0x1dc>
 80161ee:	2b03      	cmp	r3, #3
 80161f0:	d032      	beq.n	8016258 <USBD_StdEPReq+0x240>
 80161f2:	e097      	b.n	8016324 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161f4:	7bbb      	ldrb	r3, [r7, #14]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d007      	beq.n	801620a <USBD_StdEPReq+0x1f2>
 80161fa:	7bbb      	ldrb	r3, [r7, #14]
 80161fc:	2b80      	cmp	r3, #128	@ 0x80
 80161fe:	d004      	beq.n	801620a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016200:	6839      	ldr	r1, [r7, #0]
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fc17 	bl	8016a36 <USBD_CtlError>
                break;
 8016208:	e091      	b.n	801632e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801620a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801620e:	2b00      	cmp	r3, #0
 8016210:	da0b      	bge.n	801622a <USBD_StdEPReq+0x212>
 8016212:	7bbb      	ldrb	r3, [r7, #14]
 8016214:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016218:	4613      	mov	r3, r2
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	4413      	add	r3, r2
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	3310      	adds	r3, #16
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	4413      	add	r3, r2
 8016226:	3304      	adds	r3, #4
 8016228:	e00b      	b.n	8016242 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801622a:	7bbb      	ldrb	r3, [r7, #14]
 801622c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016230:	4613      	mov	r3, r2
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	4413      	add	r3, r2
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	4413      	add	r3, r2
 8016240:	3304      	adds	r3, #4
 8016242:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	2200      	movs	r2, #0
 8016248:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	2202      	movs	r2, #2
 801624e:	4619      	mov	r1, r3
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f000 fc6d 	bl	8016b30 <USBD_CtlSendData>
              break;
 8016256:	e06a      	b.n	801632e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801625c:	2b00      	cmp	r3, #0
 801625e:	da11      	bge.n	8016284 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016260:	7bbb      	ldrb	r3, [r7, #14]
 8016262:	f003 020f 	and.w	r2, r3, #15
 8016266:	6879      	ldr	r1, [r7, #4]
 8016268:	4613      	mov	r3, r2
 801626a:	009b      	lsls	r3, r3, #2
 801626c:	4413      	add	r3, r2
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	440b      	add	r3, r1
 8016272:	3324      	adds	r3, #36	@ 0x24
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d117      	bne.n	80162aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801627a:	6839      	ldr	r1, [r7, #0]
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 fbda 	bl	8016a36 <USBD_CtlError>
                  break;
 8016282:	e054      	b.n	801632e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016284:	7bbb      	ldrb	r3, [r7, #14]
 8016286:	f003 020f 	and.w	r2, r3, #15
 801628a:	6879      	ldr	r1, [r7, #4]
 801628c:	4613      	mov	r3, r2
 801628e:	009b      	lsls	r3, r3, #2
 8016290:	4413      	add	r3, r2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	440b      	add	r3, r1
 8016296:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801629a:	881b      	ldrh	r3, [r3, #0]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d104      	bne.n	80162aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162a0:	6839      	ldr	r1, [r7, #0]
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f000 fbc7 	bl	8016a36 <USBD_CtlError>
                  break;
 80162a8:	e041      	b.n	801632e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	da0b      	bge.n	80162ca <USBD_StdEPReq+0x2b2>
 80162b2:	7bbb      	ldrb	r3, [r7, #14]
 80162b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80162b8:	4613      	mov	r3, r2
 80162ba:	009b      	lsls	r3, r3, #2
 80162bc:	4413      	add	r3, r2
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	3310      	adds	r3, #16
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	4413      	add	r3, r2
 80162c6:	3304      	adds	r3, #4
 80162c8:	e00b      	b.n	80162e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80162ca:	7bbb      	ldrb	r3, [r7, #14]
 80162cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162d0:	4613      	mov	r3, r2
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	4413      	add	r3, r2
 80162e0:	3304      	adds	r3, #4
 80162e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80162e4:	7bbb      	ldrb	r3, [r7, #14]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d002      	beq.n	80162f0 <USBD_StdEPReq+0x2d8>
 80162ea:	7bbb      	ldrb	r3, [r7, #14]
 80162ec:	2b80      	cmp	r3, #128	@ 0x80
 80162ee:	d103      	bne.n	80162f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	2200      	movs	r2, #0
 80162f4:	601a      	str	r2, [r3, #0]
 80162f6:	e00e      	b.n	8016316 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80162f8:	7bbb      	ldrb	r3, [r7, #14]
 80162fa:	4619      	mov	r1, r3
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f001 f8cf 	bl	80174a0 <USBD_LL_IsStallEP>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d003      	beq.n	8016310 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2201      	movs	r2, #1
 801630c:	601a      	str	r2, [r3, #0]
 801630e:	e002      	b.n	8016316 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	2200      	movs	r2, #0
 8016314:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	2202      	movs	r2, #2
 801631a:	4619      	mov	r1, r3
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 fc07 	bl	8016b30 <USBD_CtlSendData>
              break;
 8016322:	e004      	b.n	801632e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016324:	6839      	ldr	r1, [r7, #0]
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f000 fb85 	bl	8016a36 <USBD_CtlError>
              break;
 801632c:	bf00      	nop
          }
          break;
 801632e:	e004      	b.n	801633a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016330:	6839      	ldr	r1, [r7, #0]
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 fb7f 	bl	8016a36 <USBD_CtlError>
          break;
 8016338:	bf00      	nop
      }
      break;
 801633a:	e005      	b.n	8016348 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801633c:	6839      	ldr	r1, [r7, #0]
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f000 fb79 	bl	8016a36 <USBD_CtlError>
      break;
 8016344:	e000      	b.n	8016348 <USBD_StdEPReq+0x330>
      break;
 8016346:	bf00      	nop
  }

  return ret;
 8016348:	7bfb      	ldrb	r3, [r7, #15]
}
 801634a:	4618      	mov	r0, r3
 801634c:	3710      	adds	r7, #16
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
	...

08016354 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801635e:	2300      	movs	r3, #0
 8016360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016362:	2300      	movs	r3, #0
 8016364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016366:	2300      	movs	r3, #0
 8016368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	885b      	ldrh	r3, [r3, #2]
 801636e:	0a1b      	lsrs	r3, r3, #8
 8016370:	b29b      	uxth	r3, r3
 8016372:	3b01      	subs	r3, #1
 8016374:	2b0e      	cmp	r3, #14
 8016376:	f200 8152 	bhi.w	801661e <USBD_GetDescriptor+0x2ca>
 801637a:	a201      	add	r2, pc, #4	@ (adr r2, 8016380 <USBD_GetDescriptor+0x2c>)
 801637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016380:	080163f1 	.word	0x080163f1
 8016384:	08016409 	.word	0x08016409
 8016388:	08016449 	.word	0x08016449
 801638c:	0801661f 	.word	0x0801661f
 8016390:	0801661f 	.word	0x0801661f
 8016394:	080165bf 	.word	0x080165bf
 8016398:	080165eb 	.word	0x080165eb
 801639c:	0801661f 	.word	0x0801661f
 80163a0:	0801661f 	.word	0x0801661f
 80163a4:	0801661f 	.word	0x0801661f
 80163a8:	0801661f 	.word	0x0801661f
 80163ac:	0801661f 	.word	0x0801661f
 80163b0:	0801661f 	.word	0x0801661f
 80163b4:	0801661f 	.word	0x0801661f
 80163b8:	080163bd 	.word	0x080163bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80163c2:	69db      	ldr	r3, [r3, #28]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d00b      	beq.n	80163e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80163ce:	69db      	ldr	r3, [r3, #28]
 80163d0:	687a      	ldr	r2, [r7, #4]
 80163d2:	7c12      	ldrb	r2, [r2, #16]
 80163d4:	f107 0108 	add.w	r1, r7, #8
 80163d8:	4610      	mov	r0, r2
 80163da:	4798      	blx	r3
 80163dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163de:	e126      	b.n	801662e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80163e0:	6839      	ldr	r1, [r7, #0]
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f000 fb27 	bl	8016a36 <USBD_CtlError>
        err++;
 80163e8:	7afb      	ldrb	r3, [r7, #11]
 80163ea:	3301      	adds	r3, #1
 80163ec:	72fb      	strb	r3, [r7, #11]
      break;
 80163ee:	e11e      	b.n	801662e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	7c12      	ldrb	r2, [r2, #16]
 80163fc:	f107 0108 	add.w	r1, r7, #8
 8016400:	4610      	mov	r0, r2
 8016402:	4798      	blx	r3
 8016404:	60f8      	str	r0, [r7, #12]
      break;
 8016406:	e112      	b.n	801662e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	7c1b      	ldrb	r3, [r3, #16]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d10d      	bne.n	801642c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016418:	f107 0208 	add.w	r2, r7, #8
 801641c:	4610      	mov	r0, r2
 801641e:	4798      	blx	r3
 8016420:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	3301      	adds	r3, #1
 8016426:	2202      	movs	r2, #2
 8016428:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801642a:	e100      	b.n	801662e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016434:	f107 0208 	add.w	r2, r7, #8
 8016438:	4610      	mov	r0, r2
 801643a:	4798      	blx	r3
 801643c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	3301      	adds	r3, #1
 8016442:	2202      	movs	r2, #2
 8016444:	701a      	strb	r2, [r3, #0]
      break;
 8016446:	e0f2      	b.n	801662e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	885b      	ldrh	r3, [r3, #2]
 801644c:	b2db      	uxtb	r3, r3
 801644e:	2b05      	cmp	r3, #5
 8016450:	f200 80ac 	bhi.w	80165ac <USBD_GetDescriptor+0x258>
 8016454:	a201      	add	r2, pc, #4	@ (adr r2, 801645c <USBD_GetDescriptor+0x108>)
 8016456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801645a:	bf00      	nop
 801645c:	08016475 	.word	0x08016475
 8016460:	080164a9 	.word	0x080164a9
 8016464:	080164dd 	.word	0x080164dd
 8016468:	08016511 	.word	0x08016511
 801646c:	08016545 	.word	0x08016545
 8016470:	08016579 	.word	0x08016579
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d00b      	beq.n	8016498 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	687a      	ldr	r2, [r7, #4]
 801648a:	7c12      	ldrb	r2, [r2, #16]
 801648c:	f107 0108 	add.w	r1, r7, #8
 8016490:	4610      	mov	r0, r2
 8016492:	4798      	blx	r3
 8016494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016496:	e091      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016498:	6839      	ldr	r1, [r7, #0]
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f000 facb 	bl	8016a36 <USBD_CtlError>
            err++;
 80164a0:	7afb      	ldrb	r3, [r7, #11]
 80164a2:	3301      	adds	r3, #1
 80164a4:	72fb      	strb	r3, [r7, #11]
          break;
 80164a6:	e089      	b.n	80165bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164ae:	689b      	ldr	r3, [r3, #8]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d00b      	beq.n	80164cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164ba:	689b      	ldr	r3, [r3, #8]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	7c12      	ldrb	r2, [r2, #16]
 80164c0:	f107 0108 	add.w	r1, r7, #8
 80164c4:	4610      	mov	r0, r2
 80164c6:	4798      	blx	r3
 80164c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164ca:	e077      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164cc:	6839      	ldr	r1, [r7, #0]
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fab1 	bl	8016a36 <USBD_CtlError>
            err++;
 80164d4:	7afb      	ldrb	r3, [r7, #11]
 80164d6:	3301      	adds	r3, #1
 80164d8:	72fb      	strb	r3, [r7, #11]
          break;
 80164da:	e06f      	b.n	80165bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d00b      	beq.n	8016500 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80164ee:	68db      	ldr	r3, [r3, #12]
 80164f0:	687a      	ldr	r2, [r7, #4]
 80164f2:	7c12      	ldrb	r2, [r2, #16]
 80164f4:	f107 0108 	add.w	r1, r7, #8
 80164f8:	4610      	mov	r0, r2
 80164fa:	4798      	blx	r3
 80164fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164fe:	e05d      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016500:	6839      	ldr	r1, [r7, #0]
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f000 fa97 	bl	8016a36 <USBD_CtlError>
            err++;
 8016508:	7afb      	ldrb	r3, [r7, #11]
 801650a:	3301      	adds	r3, #1
 801650c:	72fb      	strb	r3, [r7, #11]
          break;
 801650e:	e055      	b.n	80165bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016516:	691b      	ldr	r3, [r3, #16]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d00b      	beq.n	8016534 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016522:	691b      	ldr	r3, [r3, #16]
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	7c12      	ldrb	r2, [r2, #16]
 8016528:	f107 0108 	add.w	r1, r7, #8
 801652c:	4610      	mov	r0, r2
 801652e:	4798      	blx	r3
 8016530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016532:	e043      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016534:	6839      	ldr	r1, [r7, #0]
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f000 fa7d 	bl	8016a36 <USBD_CtlError>
            err++;
 801653c:	7afb      	ldrb	r3, [r7, #11]
 801653e:	3301      	adds	r3, #1
 8016540:	72fb      	strb	r3, [r7, #11]
          break;
 8016542:	e03b      	b.n	80165bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801654a:	695b      	ldr	r3, [r3, #20]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00b      	beq.n	8016568 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016556:	695b      	ldr	r3, [r3, #20]
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	7c12      	ldrb	r2, [r2, #16]
 801655c:	f107 0108 	add.w	r1, r7, #8
 8016560:	4610      	mov	r0, r2
 8016562:	4798      	blx	r3
 8016564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016566:	e029      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016568:	6839      	ldr	r1, [r7, #0]
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f000 fa63 	bl	8016a36 <USBD_CtlError>
            err++;
 8016570:	7afb      	ldrb	r3, [r7, #11]
 8016572:	3301      	adds	r3, #1
 8016574:	72fb      	strb	r3, [r7, #11]
          break;
 8016576:	e021      	b.n	80165bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801657e:	699b      	ldr	r3, [r3, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d00b      	beq.n	801659c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801658a:	699b      	ldr	r3, [r3, #24]
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	7c12      	ldrb	r2, [r2, #16]
 8016590:	f107 0108 	add.w	r1, r7, #8
 8016594:	4610      	mov	r0, r2
 8016596:	4798      	blx	r3
 8016598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801659a:	e00f      	b.n	80165bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801659c:	6839      	ldr	r1, [r7, #0]
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f000 fa49 	bl	8016a36 <USBD_CtlError>
            err++;
 80165a4:	7afb      	ldrb	r3, [r7, #11]
 80165a6:	3301      	adds	r3, #1
 80165a8:	72fb      	strb	r3, [r7, #11]
          break;
 80165aa:	e007      	b.n	80165bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80165ac:	6839      	ldr	r1, [r7, #0]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 fa41 	bl	8016a36 <USBD_CtlError>
          err++;
 80165b4:	7afb      	ldrb	r3, [r7, #11]
 80165b6:	3301      	adds	r3, #1
 80165b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80165ba:	bf00      	nop
      }
      break;
 80165bc:	e037      	b.n	801662e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	7c1b      	ldrb	r3, [r3, #16]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d109      	bne.n	80165da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80165ce:	f107 0208 	add.w	r2, r7, #8
 80165d2:	4610      	mov	r0, r2
 80165d4:	4798      	blx	r3
 80165d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165d8:	e029      	b.n	801662e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 fa2a 	bl	8016a36 <USBD_CtlError>
        err++;
 80165e2:	7afb      	ldrb	r3, [r7, #11]
 80165e4:	3301      	adds	r3, #1
 80165e6:	72fb      	strb	r3, [r7, #11]
      break;
 80165e8:	e021      	b.n	801662e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	7c1b      	ldrb	r3, [r3, #16]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d10d      	bne.n	801660e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165fa:	f107 0208 	add.w	r2, r7, #8
 80165fe:	4610      	mov	r0, r2
 8016600:	4798      	blx	r3
 8016602:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	3301      	adds	r3, #1
 8016608:	2207      	movs	r2, #7
 801660a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801660c:	e00f      	b.n	801662e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801660e:	6839      	ldr	r1, [r7, #0]
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f000 fa10 	bl	8016a36 <USBD_CtlError>
        err++;
 8016616:	7afb      	ldrb	r3, [r7, #11]
 8016618:	3301      	adds	r3, #1
 801661a:	72fb      	strb	r3, [r7, #11]
      break;
 801661c:	e007      	b.n	801662e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801661e:	6839      	ldr	r1, [r7, #0]
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 fa08 	bl	8016a36 <USBD_CtlError>
      err++;
 8016626:	7afb      	ldrb	r3, [r7, #11]
 8016628:	3301      	adds	r3, #1
 801662a:	72fb      	strb	r3, [r7, #11]
      break;
 801662c:	bf00      	nop
  }

  if (err != 0U)
 801662e:	7afb      	ldrb	r3, [r7, #11]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d11e      	bne.n	8016672 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	88db      	ldrh	r3, [r3, #6]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d016      	beq.n	801666a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801663c:	893b      	ldrh	r3, [r7, #8]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d00e      	beq.n	8016660 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	88da      	ldrh	r2, [r3, #6]
 8016646:	893b      	ldrh	r3, [r7, #8]
 8016648:	4293      	cmp	r3, r2
 801664a:	bf28      	it	cs
 801664c:	4613      	movcs	r3, r2
 801664e:	b29b      	uxth	r3, r3
 8016650:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016652:	893b      	ldrh	r3, [r7, #8]
 8016654:	461a      	mov	r2, r3
 8016656:	68f9      	ldr	r1, [r7, #12]
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f000 fa69 	bl	8016b30 <USBD_CtlSendData>
 801665e:	e009      	b.n	8016674 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016660:	6839      	ldr	r1, [r7, #0]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 f9e7 	bl	8016a36 <USBD_CtlError>
 8016668:	e004      	b.n	8016674 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f000 faba 	bl	8016be4 <USBD_CtlSendStatus>
 8016670:	e000      	b.n	8016674 <USBD_GetDescriptor+0x320>
    return;
 8016672:	bf00      	nop
  }
}
 8016674:	3710      	adds	r7, #16
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop

0801667c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b084      	sub	sp, #16
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	889b      	ldrh	r3, [r3, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d131      	bne.n	80166f2 <USBD_SetAddress+0x76>
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	88db      	ldrh	r3, [r3, #6]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d12d      	bne.n	80166f2 <USBD_SetAddress+0x76>
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	885b      	ldrh	r3, [r3, #2]
 801669a:	2b7f      	cmp	r3, #127	@ 0x7f
 801669c:	d829      	bhi.n	80166f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	885b      	ldrh	r3, [r3, #2]
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80166a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	2b03      	cmp	r3, #3
 80166b4:	d104      	bne.n	80166c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80166b6:	6839      	ldr	r1, [r7, #0]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 f9bc 	bl	8016a36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166be:	e01d      	b.n	80166fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	7bfa      	ldrb	r2, [r7, #15]
 80166c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80166c8:	7bfb      	ldrb	r3, [r7, #15]
 80166ca:	4619      	mov	r1, r3
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f000 ff13 	bl	80174f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f000 fa86 	bl	8016be4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80166d8:	7bfb      	ldrb	r3, [r7, #15]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d004      	beq.n	80166e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2202      	movs	r2, #2
 80166e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166e6:	e009      	b.n	80166fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2201      	movs	r2, #1
 80166ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166f0:	e004      	b.n	80166fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80166f2:	6839      	ldr	r1, [r7, #0]
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 f99e 	bl	8016a36 <USBD_CtlError>
  }
}
 80166fa:	bf00      	nop
 80166fc:	bf00      	nop
 80166fe:	3710      	adds	r7, #16
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801670e:	2300      	movs	r3, #0
 8016710:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	885b      	ldrh	r3, [r3, #2]
 8016716:	b2da      	uxtb	r2, r3
 8016718:	4b4e      	ldr	r3, [pc, #312]	@ (8016854 <USBD_SetConfig+0x150>)
 801671a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801671c:	4b4d      	ldr	r3, [pc, #308]	@ (8016854 <USBD_SetConfig+0x150>)
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	2b01      	cmp	r3, #1
 8016722:	d905      	bls.n	8016730 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016724:	6839      	ldr	r1, [r7, #0]
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f000 f985 	bl	8016a36 <USBD_CtlError>
    return USBD_FAIL;
 801672c:	2303      	movs	r3, #3
 801672e:	e08c      	b.n	801684a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016736:	b2db      	uxtb	r3, r3
 8016738:	2b02      	cmp	r3, #2
 801673a:	d002      	beq.n	8016742 <USBD_SetConfig+0x3e>
 801673c:	2b03      	cmp	r3, #3
 801673e:	d029      	beq.n	8016794 <USBD_SetConfig+0x90>
 8016740:	e075      	b.n	801682e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016742:	4b44      	ldr	r3, [pc, #272]	@ (8016854 <USBD_SetConfig+0x150>)
 8016744:	781b      	ldrb	r3, [r3, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d020      	beq.n	801678c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801674a:	4b42      	ldr	r3, [pc, #264]	@ (8016854 <USBD_SetConfig+0x150>)
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	461a      	mov	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016754:	4b3f      	ldr	r3, [pc, #252]	@ (8016854 <USBD_SetConfig+0x150>)
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	4619      	mov	r1, r3
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7fe ffb9 	bl	80156d2 <USBD_SetClassConfig>
 8016760:	4603      	mov	r3, r0
 8016762:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016764:	7bfb      	ldrb	r3, [r7, #15]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d008      	beq.n	801677c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801676a:	6839      	ldr	r1, [r7, #0]
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 f962 	bl	8016a36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2202      	movs	r2, #2
 8016776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801677a:	e065      	b.n	8016848 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 fa31 	bl	8016be4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2203      	movs	r2, #3
 8016786:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801678a:	e05d      	b.n	8016848 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f000 fa29 	bl	8016be4 <USBD_CtlSendStatus>
      break;
 8016792:	e059      	b.n	8016848 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016794:	4b2f      	ldr	r3, [pc, #188]	@ (8016854 <USBD_SetConfig+0x150>)
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d112      	bne.n	80167c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2202      	movs	r2, #2
 80167a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80167a4:	4b2b      	ldr	r3, [pc, #172]	@ (8016854 <USBD_SetConfig+0x150>)
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	461a      	mov	r2, r3
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167ae:	4b29      	ldr	r3, [pc, #164]	@ (8016854 <USBD_SetConfig+0x150>)
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	4619      	mov	r1, r3
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7fe ffa8 	bl	801570a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 fa12 	bl	8016be4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167c0:	e042      	b.n	8016848 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80167c2:	4b24      	ldr	r3, [pc, #144]	@ (8016854 <USBD_SetConfig+0x150>)
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	461a      	mov	r2, r3
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d02a      	beq.n	8016826 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	685b      	ldr	r3, [r3, #4]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	4619      	mov	r1, r3
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7fe ff96 	bl	801570a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80167de:	4b1d      	ldr	r3, [pc, #116]	@ (8016854 <USBD_SetConfig+0x150>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016854 <USBD_SetConfig+0x150>)
 80167ea:	781b      	ldrb	r3, [r3, #0]
 80167ec:	4619      	mov	r1, r3
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f7fe ff6f 	bl	80156d2 <USBD_SetClassConfig>
 80167f4:	4603      	mov	r3, r0
 80167f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80167f8:	7bfb      	ldrb	r3, [r7, #15]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d00f      	beq.n	801681e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80167fe:	6839      	ldr	r1, [r7, #0]
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f000 f918 	bl	8016a36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	b2db      	uxtb	r3, r3
 801680c:	4619      	mov	r1, r3
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f7fe ff7b 	bl	801570a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2202      	movs	r2, #2
 8016818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801681c:	e014      	b.n	8016848 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 f9e0 	bl	8016be4 <USBD_CtlSendStatus>
      break;
 8016824:	e010      	b.n	8016848 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f000 f9dc 	bl	8016be4 <USBD_CtlSendStatus>
      break;
 801682c:	e00c      	b.n	8016848 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801682e:	6839      	ldr	r1, [r7, #0]
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f000 f900 	bl	8016a36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016836:	4b07      	ldr	r3, [pc, #28]	@ (8016854 <USBD_SetConfig+0x150>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7fe ff64 	bl	801570a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016842:	2303      	movs	r3, #3
 8016844:	73fb      	strb	r3, [r7, #15]
      break;
 8016846:	bf00      	nop
  }

  return ret;
 8016848:	7bfb      	ldrb	r3, [r7, #15]
}
 801684a:	4618      	mov	r0, r3
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	24004634 	.word	0x24004634

08016858 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	88db      	ldrh	r3, [r3, #6]
 8016866:	2b01      	cmp	r3, #1
 8016868:	d004      	beq.n	8016874 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f8e2 	bl	8016a36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016872:	e023      	b.n	80168bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801687a:	b2db      	uxtb	r3, r3
 801687c:	2b02      	cmp	r3, #2
 801687e:	dc02      	bgt.n	8016886 <USBD_GetConfig+0x2e>
 8016880:	2b00      	cmp	r3, #0
 8016882:	dc03      	bgt.n	801688c <USBD_GetConfig+0x34>
 8016884:	e015      	b.n	80168b2 <USBD_GetConfig+0x5a>
 8016886:	2b03      	cmp	r3, #3
 8016888:	d00b      	beq.n	80168a2 <USBD_GetConfig+0x4a>
 801688a:	e012      	b.n	80168b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2200      	movs	r2, #0
 8016890:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	3308      	adds	r3, #8
 8016896:	2201      	movs	r2, #1
 8016898:	4619      	mov	r1, r3
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f000 f948 	bl	8016b30 <USBD_CtlSendData>
        break;
 80168a0:	e00c      	b.n	80168bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	3304      	adds	r3, #4
 80168a6:	2201      	movs	r2, #1
 80168a8:	4619      	mov	r1, r3
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 f940 	bl	8016b30 <USBD_CtlSendData>
        break;
 80168b0:	e004      	b.n	80168bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80168b2:	6839      	ldr	r1, [r7, #0]
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f000 f8be 	bl	8016a36 <USBD_CtlError>
        break;
 80168ba:	bf00      	nop
}
 80168bc:	bf00      	nop
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	3b01      	subs	r3, #1
 80168d8:	2b02      	cmp	r3, #2
 80168da:	d81e      	bhi.n	801691a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	88db      	ldrh	r3, [r3, #6]
 80168e0:	2b02      	cmp	r3, #2
 80168e2:	d004      	beq.n	80168ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80168e4:	6839      	ldr	r1, [r7, #0]
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f000 f8a5 	bl	8016a36 <USBD_CtlError>
        break;
 80168ec:	e01a      	b.n	8016924 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2201      	movs	r2, #1
 80168f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d005      	beq.n	801690a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	68db      	ldr	r3, [r3, #12]
 8016902:	f043 0202 	orr.w	r2, r3, #2
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	330c      	adds	r3, #12
 801690e:	2202      	movs	r2, #2
 8016910:	4619      	mov	r1, r3
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f000 f90c 	bl	8016b30 <USBD_CtlSendData>
      break;
 8016918:	e004      	b.n	8016924 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801691a:	6839      	ldr	r1, [r7, #0]
 801691c:	6878      	ldr	r0, [r7, #4]
 801691e:	f000 f88a 	bl	8016a36 <USBD_CtlError>
      break;
 8016922:	bf00      	nop
  }
}
 8016924:	bf00      	nop
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}

0801692c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	885b      	ldrh	r3, [r3, #2]
 801693a:	2b01      	cmp	r3, #1
 801693c:	d107      	bne.n	801694e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2201      	movs	r2, #1
 8016942:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f000 f94c 	bl	8016be4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801694c:	e013      	b.n	8016976 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	885b      	ldrh	r3, [r3, #2]
 8016952:	2b02      	cmp	r3, #2
 8016954:	d10b      	bne.n	801696e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	889b      	ldrh	r3, [r3, #4]
 801695a:	0a1b      	lsrs	r3, r3, #8
 801695c:	b29b      	uxth	r3, r3
 801695e:	b2da      	uxtb	r2, r3
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f000 f93c 	bl	8016be4 <USBD_CtlSendStatus>
}
 801696c:	e003      	b.n	8016976 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801696e:	6839      	ldr	r1, [r7, #0]
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f860 	bl	8016a36 <USBD_CtlError>
}
 8016976:	bf00      	nop
 8016978:	3708      	adds	r7, #8
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}

0801697e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801697e:	b580      	push	{r7, lr}
 8016980:	b082      	sub	sp, #8
 8016982:	af00      	add	r7, sp, #0
 8016984:	6078      	str	r0, [r7, #4]
 8016986:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801698e:	b2db      	uxtb	r3, r3
 8016990:	3b01      	subs	r3, #1
 8016992:	2b02      	cmp	r3, #2
 8016994:	d80b      	bhi.n	80169ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	885b      	ldrh	r3, [r3, #2]
 801699a:	2b01      	cmp	r3, #1
 801699c:	d10c      	bne.n	80169b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 f91c 	bl	8016be4 <USBD_CtlSendStatus>
      }
      break;
 80169ac:	e004      	b.n	80169b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80169ae:	6839      	ldr	r1, [r7, #0]
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f000 f840 	bl	8016a36 <USBD_CtlError>
      break;
 80169b6:	e000      	b.n	80169ba <USBD_ClrFeature+0x3c>
      break;
 80169b8:	bf00      	nop
  }
}
 80169ba:	bf00      	nop
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b084      	sub	sp, #16
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	781a      	ldrb	r2, [r3, #0]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	3301      	adds	r3, #1
 80169dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	781a      	ldrb	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	3301      	adds	r3, #1
 80169ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80169ec:	68f8      	ldr	r0, [r7, #12]
 80169ee:	f7ff fa16 	bl	8015e1e <SWAPBYTE>
 80169f2:	4603      	mov	r3, r0
 80169f4:	461a      	mov	r2, r3
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	3301      	adds	r3, #1
 80169fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	3301      	adds	r3, #1
 8016a04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a06:	68f8      	ldr	r0, [r7, #12]
 8016a08:	f7ff fa09 	bl	8015e1e <SWAPBYTE>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	461a      	mov	r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	3301      	adds	r3, #1
 8016a18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a20:	68f8      	ldr	r0, [r7, #12]
 8016a22:	f7ff f9fc 	bl	8015e1e <SWAPBYTE>
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	80da      	strh	r2, [r3, #6]
}
 8016a2e:	bf00      	nop
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}

08016a36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b082      	sub	sp, #8
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	6078      	str	r0, [r7, #4]
 8016a3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a40:	2180      	movs	r1, #128	@ 0x80
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f000 fcee 	bl	8017424 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a48:	2100      	movs	r1, #0
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f000 fcea 	bl	8017424 <USBD_LL_StallEP>
}
 8016a50:	bf00      	nop
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b086      	sub	sp, #24
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a64:	2300      	movs	r3, #0
 8016a66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d042      	beq.n	8016af4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8016a72:	6938      	ldr	r0, [r7, #16]
 8016a74:	f000 f842 	bl	8016afc <USBD_GetLen>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	005b      	lsls	r3, r3, #1
 8016a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a82:	d808      	bhi.n	8016a96 <USBD_GetString+0x3e>
 8016a84:	6938      	ldr	r0, [r7, #16]
 8016a86:	f000 f839 	bl	8016afc <USBD_GetLen>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	3301      	adds	r3, #1
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	005b      	lsls	r3, r3, #1
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	e001      	b.n	8016a9a <USBD_GetString+0x42>
 8016a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a9e:	7dfb      	ldrb	r3, [r7, #23]
 8016aa0:	68ba      	ldr	r2, [r7, #8]
 8016aa2:	4413      	add	r3, r2
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	7812      	ldrb	r2, [r2, #0]
 8016aa8:	701a      	strb	r2, [r3, #0]
  idx++;
 8016aaa:	7dfb      	ldrb	r3, [r7, #23]
 8016aac:	3301      	adds	r3, #1
 8016aae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016ab0:	7dfb      	ldrb	r3, [r7, #23]
 8016ab2:	68ba      	ldr	r2, [r7, #8]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	2203      	movs	r2, #3
 8016ab8:	701a      	strb	r2, [r3, #0]
  idx++;
 8016aba:	7dfb      	ldrb	r3, [r7, #23]
 8016abc:	3301      	adds	r3, #1
 8016abe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ac0:	e013      	b.n	8016aea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8016ac2:	7dfb      	ldrb	r3, [r7, #23]
 8016ac4:	68ba      	ldr	r2, [r7, #8]
 8016ac6:	4413      	add	r3, r2
 8016ac8:	693a      	ldr	r2, [r7, #16]
 8016aca:	7812      	ldrb	r2, [r2, #0]
 8016acc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016ace:	693b      	ldr	r3, [r7, #16]
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	613b      	str	r3, [r7, #16]
    idx++;
 8016ad4:	7dfb      	ldrb	r3, [r7, #23]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016ada:	7dfb      	ldrb	r3, [r7, #23]
 8016adc:	68ba      	ldr	r2, [r7, #8]
 8016ade:	4413      	add	r3, r2
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	701a      	strb	r2, [r3, #0]
    idx++;
 8016ae4:	7dfb      	ldrb	r3, [r7, #23]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1e7      	bne.n	8016ac2 <USBD_GetString+0x6a>
 8016af2:	e000      	b.n	8016af6 <USBD_GetString+0x9e>
    return;
 8016af4:	bf00      	nop
  }
}
 8016af6:	3718      	adds	r7, #24
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016afc:	b480      	push	{r7}
 8016afe:	b085      	sub	sp, #20
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b04:	2300      	movs	r3, #0
 8016b06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b0c:	e005      	b.n	8016b1a <USBD_GetLen+0x1e>
  {
    len++;
 8016b0e:	7bfb      	ldrb	r3, [r7, #15]
 8016b10:	3301      	adds	r3, #1
 8016b12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b14:	68bb      	ldr	r3, [r7, #8]
 8016b16:	3301      	adds	r3, #1
 8016b18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b1a:	68bb      	ldr	r3, [r7, #8]
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d1f5      	bne.n	8016b0e <USBD_GetLen+0x12>
  }

  return len;
 8016b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3714      	adds	r7, #20
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2e:	4770      	bx	lr

08016b30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2202      	movs	r2, #2
 8016b40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	68ba      	ldr	r2, [r7, #8]
 8016b54:	2100      	movs	r1, #0
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	f000 fced 	bl	8017536 <USBD_LL_Transmit>

  return USBD_OK;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3710      	adds	r7, #16
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b084      	sub	sp, #16
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	60f8      	str	r0, [r7, #12]
 8016b6e:	60b9      	str	r1, [r7, #8]
 8016b70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	68ba      	ldr	r2, [r7, #8]
 8016b76:	2100      	movs	r1, #0
 8016b78:	68f8      	ldr	r0, [r7, #12]
 8016b7a:	f000 fcdc 	bl	8017536 <USBD_LL_Transmit>

  return USBD_OK;
 8016b7e:	2300      	movs	r3, #0
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3710      	adds	r7, #16
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2203      	movs	r2, #3
 8016b98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	687a      	ldr	r2, [r7, #4]
 8016ba0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	68ba      	ldr	r2, [r7, #8]
 8016bb0:	2100      	movs	r1, #0
 8016bb2:	68f8      	ldr	r0, [r7, #12]
 8016bb4:	f000 fce0 	bl	8017578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bb8:	2300      	movs	r3, #0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b084      	sub	sp, #16
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	60f8      	str	r0, [r7, #12]
 8016bca:	60b9      	str	r1, [r7, #8]
 8016bcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	68ba      	ldr	r2, [r7, #8]
 8016bd2:	2100      	movs	r1, #0
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f000 fccf 	bl	8017578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bda:	2300      	movs	r3, #0
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3710      	adds	r7, #16
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2204      	movs	r2, #4
 8016bf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	2100      	movs	r1, #0
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fc9b 	bl	8017536 <USBD_LL_Transmit>

  return USBD_OK;
 8016c00:	2300      	movs	r3, #0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b082      	sub	sp, #8
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2205      	movs	r2, #5
 8016c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	2100      	movs	r1, #0
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 fca9 	bl	8017578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c26:	2300      	movs	r3, #0
}
 8016c28:	4618      	mov	r0, r3
 8016c2a:	3708      	adds	r7, #8
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016c34:	2201      	movs	r2, #1
 8016c36:	4913      	ldr	r1, [pc, #76]	@ (8016c84 <MX_USB_DEVICE_Init+0x54>)
 8016c38:	4813      	ldr	r0, [pc, #76]	@ (8016c88 <MX_USB_DEVICE_Init+0x58>)
 8016c3a:	f7fe fccd 	bl	80155d8 <USBD_Init>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d001      	beq.n	8016c48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c44:	f7eb fa68 	bl	8002118 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016c48:	4910      	ldr	r1, [pc, #64]	@ (8016c8c <MX_USB_DEVICE_Init+0x5c>)
 8016c4a:	480f      	ldr	r0, [pc, #60]	@ (8016c88 <MX_USB_DEVICE_Init+0x58>)
 8016c4c:	f7fe fcf4 	bl	8015638 <USBD_RegisterClass>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d001      	beq.n	8016c5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c56:	f7eb fa5f 	bl	8002118 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016c5a:	490d      	ldr	r1, [pc, #52]	@ (8016c90 <MX_USB_DEVICE_Init+0x60>)
 8016c5c:	480a      	ldr	r0, [pc, #40]	@ (8016c88 <MX_USB_DEVICE_Init+0x58>)
 8016c5e:	f7fe fbeb 	bl	8015438 <USBD_CDC_RegisterInterface>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d001      	beq.n	8016c6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c68:	f7eb fa56 	bl	8002118 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016c6c:	4806      	ldr	r0, [pc, #24]	@ (8016c88 <MX_USB_DEVICE_Init+0x58>)
 8016c6e:	f7fe fd19 	bl	80156a4 <USBD_Start>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d001      	beq.n	8016c7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016c78:	f7eb fa4e 	bl	8002118 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016c7c:	f7f5 f94c 	bl	800bf18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016c80:	bf00      	nop
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	240000b0 	.word	0x240000b0
 8016c88:	24004638 	.word	0x24004638
 8016c8c:	2400001c 	.word	0x2400001c
 8016c90:	2400009c 	.word	0x2400009c

08016c94 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016c98:	2200      	movs	r2, #0
 8016c9a:	4905      	ldr	r1, [pc, #20]	@ (8016cb0 <CDC_Init_HS+0x1c>)
 8016c9c:	4805      	ldr	r0, [pc, #20]	@ (8016cb4 <CDC_Init_HS+0x20>)
 8016c9e:	f7fe fbe5 	bl	801546c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016ca2:	4905      	ldr	r1, [pc, #20]	@ (8016cb8 <CDC_Init_HS+0x24>)
 8016ca4:	4803      	ldr	r0, [pc, #12]	@ (8016cb4 <CDC_Init_HS+0x20>)
 8016ca6:	f7fe fc03 	bl	80154b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016caa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	24005114 	.word	0x24005114
 8016cb4:	24004638 	.word	0x24004638
 8016cb8:	24004914 	.word	0x24004914

08016cbc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016cc0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	6039      	str	r1, [r7, #0]
 8016cd6:	71fb      	strb	r3, [r7, #7]
 8016cd8:	4613      	mov	r3, r2
 8016cda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016cdc:	79fb      	ldrb	r3, [r7, #7]
 8016cde:	2b23      	cmp	r3, #35	@ 0x23
 8016ce0:	d84a      	bhi.n	8016d78 <CDC_Control_HS+0xac>
 8016ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8016ce8 <CDC_Control_HS+0x1c>)
 8016ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce8:	08016d79 	.word	0x08016d79
 8016cec:	08016d79 	.word	0x08016d79
 8016cf0:	08016d79 	.word	0x08016d79
 8016cf4:	08016d79 	.word	0x08016d79
 8016cf8:	08016d79 	.word	0x08016d79
 8016cfc:	08016d79 	.word	0x08016d79
 8016d00:	08016d79 	.word	0x08016d79
 8016d04:	08016d79 	.word	0x08016d79
 8016d08:	08016d79 	.word	0x08016d79
 8016d0c:	08016d79 	.word	0x08016d79
 8016d10:	08016d79 	.word	0x08016d79
 8016d14:	08016d79 	.word	0x08016d79
 8016d18:	08016d79 	.word	0x08016d79
 8016d1c:	08016d79 	.word	0x08016d79
 8016d20:	08016d79 	.word	0x08016d79
 8016d24:	08016d79 	.word	0x08016d79
 8016d28:	08016d79 	.word	0x08016d79
 8016d2c:	08016d79 	.word	0x08016d79
 8016d30:	08016d79 	.word	0x08016d79
 8016d34:	08016d79 	.word	0x08016d79
 8016d38:	08016d79 	.word	0x08016d79
 8016d3c:	08016d79 	.word	0x08016d79
 8016d40:	08016d79 	.word	0x08016d79
 8016d44:	08016d79 	.word	0x08016d79
 8016d48:	08016d79 	.word	0x08016d79
 8016d4c:	08016d79 	.word	0x08016d79
 8016d50:	08016d79 	.word	0x08016d79
 8016d54:	08016d79 	.word	0x08016d79
 8016d58:	08016d79 	.word	0x08016d79
 8016d5c:	08016d79 	.word	0x08016d79
 8016d60:	08016d79 	.word	0x08016d79
 8016d64:	08016d79 	.word	0x08016d79
 8016d68:	08016d79 	.word	0x08016d79
 8016d6c:	08016d79 	.word	0x08016d79
 8016d70:	08016d79 	.word	0x08016d79
 8016d74:	08016d79 	.word	0x08016d79
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016d78:	bf00      	nop
  }

  return (USBD_OK);
 8016d7a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	370c      	adds	r7, #12
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016d92:	6879      	ldr	r1, [r7, #4]
 8016d94:	4808      	ldr	r0, [pc, #32]	@ (8016db8 <CDC_Receive_HS+0x30>)
 8016d96:	f7fe fb8b 	bl	80154b0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016d9a:	4807      	ldr	r0, [pc, #28]	@ (8016db8 <CDC_Receive_HS+0x30>)
 8016d9c:	f7fe fbe6 	bl	801556c <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	461a      	mov	r2, r3
 8016da6:	6879      	ldr	r1, [r7, #4]
 8016da8:	4804      	ldr	r0, [pc, #16]	@ (8016dbc <CDC_Receive_HS+0x34>)
 8016daa:	f7ed fc3d 	bl	8004628 <VibeCheckShell_PutInput>

	return (USBD_OK);
 8016dae:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3708      	adds	r7, #8
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	24004638 	.word	0x24004638
 8016dbc:	24000988 	.word	0x24000988

08016dc0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
 8016dc8:	460b      	mov	r3, r1
 8016dca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8016e08 <CDC_Transmit_HS+0x48>)
 8016dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016dd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d001      	beq.n	8016de6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016de2:	2301      	movs	r3, #1
 8016de4:	e00b      	b.n	8016dfe <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016de6:	887b      	ldrh	r3, [r7, #2]
 8016de8:	461a      	mov	r2, r3
 8016dea:	6879      	ldr	r1, [r7, #4]
 8016dec:	4806      	ldr	r0, [pc, #24]	@ (8016e08 <CDC_Transmit_HS+0x48>)
 8016dee:	f7fe fb3d 	bl	801546c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016df2:	4805      	ldr	r0, [pc, #20]	@ (8016e08 <CDC_Transmit_HS+0x48>)
 8016df4:	f7fe fb7a 	bl	80154ec <USBD_CDC_TransmitPacket>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	24004638 	.word	0x24004638

08016e0c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	b087      	sub	sp, #28
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	4613      	mov	r3, r2
 8016e18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	371c      	adds	r7, #28
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr
	...

08016e30 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e30:	b480      	push	{r7}
 8016e32:	b083      	sub	sp, #12
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	6039      	str	r1, [r7, #0]
 8016e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	2212      	movs	r2, #18
 8016e40:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016e42:	4b03      	ldr	r3, [pc, #12]	@ (8016e50 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	370c      	adds	r7, #12
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4e:	4770      	bx	lr
 8016e50:	240000d0 	.word	0x240000d0

08016e54 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e54:	b480      	push	{r7}
 8016e56:	b083      	sub	sp, #12
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	6039      	str	r1, [r7, #0]
 8016e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	2204      	movs	r2, #4
 8016e64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e66:	4b03      	ldr	r3, [pc, #12]	@ (8016e74 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	370c      	adds	r7, #12
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr
 8016e74:	240000e4 	.word	0x240000e4

08016e78 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	4603      	mov	r3, r0
 8016e80:	6039      	str	r1, [r7, #0]
 8016e82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016e84:	79fb      	ldrb	r3, [r7, #7]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d105      	bne.n	8016e96 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016e8a:	683a      	ldr	r2, [r7, #0]
 8016e8c:	4907      	ldr	r1, [pc, #28]	@ (8016eac <USBD_HS_ProductStrDescriptor+0x34>)
 8016e8e:	4808      	ldr	r0, [pc, #32]	@ (8016eb0 <USBD_HS_ProductStrDescriptor+0x38>)
 8016e90:	f7ff fde2 	bl	8016a58 <USBD_GetString>
 8016e94:	e004      	b.n	8016ea0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016e96:	683a      	ldr	r2, [r7, #0]
 8016e98:	4904      	ldr	r1, [pc, #16]	@ (8016eac <USBD_HS_ProductStrDescriptor+0x34>)
 8016e9a:	4805      	ldr	r0, [pc, #20]	@ (8016eb0 <USBD_HS_ProductStrDescriptor+0x38>)
 8016e9c:	f7ff fddc 	bl	8016a58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ea0:	4b02      	ldr	r3, [pc, #8]	@ (8016eac <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	24005914 	.word	0x24005914
 8016eb0:	0801c6c0 	.word	0x0801c6c0

08016eb4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	4603      	mov	r3, r0
 8016ebc:	6039      	str	r1, [r7, #0]
 8016ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016ec0:	683a      	ldr	r2, [r7, #0]
 8016ec2:	4904      	ldr	r1, [pc, #16]	@ (8016ed4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016ec4:	4804      	ldr	r0, [pc, #16]	@ (8016ed8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016ec6:	f7ff fdc7 	bl	8016a58 <USBD_GetString>
  return USBD_StrDesc;
 8016eca:	4b02      	ldr	r3, [pc, #8]	@ (8016ed4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3708      	adds	r7, #8
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	24005914 	.word	0x24005914
 8016ed8:	0801c6cc 	.word	0x0801c6cc

08016edc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	6039      	str	r1, [r7, #0]
 8016ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	221a      	movs	r2, #26
 8016eec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016eee:	f000 f843 	bl	8016f78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016ef2:	4b02      	ldr	r3, [pc, #8]	@ (8016efc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	240000e8 	.word	0x240000e8

08016f00 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	4603      	mov	r3, r0
 8016f08:	6039      	str	r1, [r7, #0]
 8016f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f0c:	79fb      	ldrb	r3, [r7, #7]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d105      	bne.n	8016f1e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f12:	683a      	ldr	r2, [r7, #0]
 8016f14:	4907      	ldr	r1, [pc, #28]	@ (8016f34 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f16:	4808      	ldr	r0, [pc, #32]	@ (8016f38 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f18:	f7ff fd9e 	bl	8016a58 <USBD_GetString>
 8016f1c:	e004      	b.n	8016f28 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	4904      	ldr	r1, [pc, #16]	@ (8016f34 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f22:	4805      	ldr	r0, [pc, #20]	@ (8016f38 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f24:	f7ff fd98 	bl	8016a58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f28:	4b02      	ldr	r3, [pc, #8]	@ (8016f34 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	24005914 	.word	0x24005914
 8016f38:	0801c6d8 	.word	0x0801c6d8

08016f3c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b082      	sub	sp, #8
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	4603      	mov	r3, r0
 8016f44:	6039      	str	r1, [r7, #0]
 8016f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f48:	79fb      	ldrb	r3, [r7, #7]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d105      	bne.n	8016f5a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016f4e:	683a      	ldr	r2, [r7, #0]
 8016f50:	4907      	ldr	r1, [pc, #28]	@ (8016f70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016f52:	4808      	ldr	r0, [pc, #32]	@ (8016f74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016f54:	f7ff fd80 	bl	8016a58 <USBD_GetString>
 8016f58:	e004      	b.n	8016f64 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	4904      	ldr	r1, [pc, #16]	@ (8016f70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016f5e:	4805      	ldr	r0, [pc, #20]	@ (8016f74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016f60:	f7ff fd7a 	bl	8016a58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f64:	4b02      	ldr	r3, [pc, #8]	@ (8016f70 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3708      	adds	r7, #8
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	24005914 	.word	0x24005914
 8016f74:	0801c6e4 	.word	0x0801c6e4

08016f78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b084      	sub	sp, #16
 8016f7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016fbc <Get_SerialNum+0x44>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016f84:	4b0e      	ldr	r3, [pc, #56]	@ (8016fc0 <Get_SerialNum+0x48>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8016fc4 <Get_SerialNum+0x4c>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016f90:	68fa      	ldr	r2, [r7, #12]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	4413      	add	r3, r2
 8016f96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d009      	beq.n	8016fb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016f9e:	2208      	movs	r2, #8
 8016fa0:	4909      	ldr	r1, [pc, #36]	@ (8016fc8 <Get_SerialNum+0x50>)
 8016fa2:	68f8      	ldr	r0, [r7, #12]
 8016fa4:	f000 f814 	bl	8016fd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016fa8:	2204      	movs	r2, #4
 8016faa:	4908      	ldr	r1, [pc, #32]	@ (8016fcc <Get_SerialNum+0x54>)
 8016fac:	68b8      	ldr	r0, [r7, #8]
 8016fae:	f000 f80f 	bl	8016fd0 <IntToUnicode>
  }
}
 8016fb2:	bf00      	nop
 8016fb4:	3710      	adds	r7, #16
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	1ff1e800 	.word	0x1ff1e800
 8016fc0:	1ff1e804 	.word	0x1ff1e804
 8016fc4:	1ff1e808 	.word	0x1ff1e808
 8016fc8:	240000ea 	.word	0x240000ea
 8016fcc:	240000fa 	.word	0x240000fa

08016fd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b087      	sub	sp, #28
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	60f8      	str	r0, [r7, #12]
 8016fd8:	60b9      	str	r1, [r7, #8]
 8016fda:	4613      	mov	r3, r2
 8016fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	75fb      	strb	r3, [r7, #23]
 8016fe6:	e027      	b.n	8017038 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	0f1b      	lsrs	r3, r3, #28
 8016fec:	2b09      	cmp	r3, #9
 8016fee:	d80b      	bhi.n	8017008 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	0f1b      	lsrs	r3, r3, #28
 8016ff4:	b2da      	uxtb	r2, r3
 8016ff6:	7dfb      	ldrb	r3, [r7, #23]
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	440b      	add	r3, r1
 8017000:	3230      	adds	r2, #48	@ 0x30
 8017002:	b2d2      	uxtb	r2, r2
 8017004:	701a      	strb	r2, [r3, #0]
 8017006:	e00a      	b.n	801701e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	0f1b      	lsrs	r3, r3, #28
 801700c:	b2da      	uxtb	r2, r3
 801700e:	7dfb      	ldrb	r3, [r7, #23]
 8017010:	005b      	lsls	r3, r3, #1
 8017012:	4619      	mov	r1, r3
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	440b      	add	r3, r1
 8017018:	3237      	adds	r2, #55	@ 0x37
 801701a:	b2d2      	uxtb	r2, r2
 801701c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	011b      	lsls	r3, r3, #4
 8017022:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017024:	7dfb      	ldrb	r3, [r7, #23]
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	3301      	adds	r3, #1
 801702a:	68ba      	ldr	r2, [r7, #8]
 801702c:	4413      	add	r3, r2
 801702e:	2200      	movs	r2, #0
 8017030:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017032:	7dfb      	ldrb	r3, [r7, #23]
 8017034:	3301      	adds	r3, #1
 8017036:	75fb      	strb	r3, [r7, #23]
 8017038:	7dfa      	ldrb	r2, [r7, #23]
 801703a:	79fb      	ldrb	r3, [r7, #7]
 801703c:	429a      	cmp	r2, r3
 801703e:	d3d3      	bcc.n	8016fe8 <IntToUnicode+0x18>
  }
}
 8017040:	bf00      	nop
 8017042:	bf00      	nop
 8017044:	371c      	adds	r7, #28
 8017046:	46bd      	mov	sp, r7
 8017048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704c:	4770      	bx	lr
	...

08017050 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b0b2      	sub	sp, #200	@ 0xc8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017058:	f107 0310 	add.w	r3, r7, #16
 801705c:	22b8      	movs	r2, #184	@ 0xb8
 801705e:	2100      	movs	r1, #0
 8017060:	4618      	mov	r0, r3
 8017062:	f001 fea6 	bl	8018db2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	4a1a      	ldr	r2, [pc, #104]	@ (80170d4 <HAL_PCD_MspInit+0x84>)
 801706c:	4293      	cmp	r3, r2
 801706e:	d12c      	bne.n	80170ca <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017070:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017074:	f04f 0300 	mov.w	r3, #0
 8017078:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801707c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017080:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017084:	f107 0310 	add.w	r3, r7, #16
 8017088:	4618      	mov	r0, r3
 801708a:	f7f5 febb 	bl	800ce04 <HAL_RCCEx_PeriphCLKConfig>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d001      	beq.n	8017098 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017094:	f7eb f840 	bl	8002118 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017098:	f7f4 ff3e 	bl	800bf18 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801709c:	4b0e      	ldr	r3, [pc, #56]	@ (80170d8 <HAL_PCD_MspInit+0x88>)
 801709e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80170a2:	4a0d      	ldr	r2, [pc, #52]	@ (80170d8 <HAL_PCD_MspInit+0x88>)
 80170a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80170a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80170ac:	4b0a      	ldr	r3, [pc, #40]	@ (80170d8 <HAL_PCD_MspInit+0x88>)
 80170ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80170b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80170b6:	60fb      	str	r3, [r7, #12]
 80170b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80170ba:	2200      	movs	r2, #0
 80170bc:	2100      	movs	r1, #0
 80170be:	204d      	movs	r0, #77	@ 0x4d
 80170c0:	f7f0 fcf1 	bl	8007aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80170c4:	204d      	movs	r0, #77	@ 0x4d
 80170c6:	f7f0 fd08 	bl	8007ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80170ca:	bf00      	nop
 80170cc:	37c8      	adds	r7, #200	@ 0xc8
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}
 80170d2:	bf00      	nop
 80170d4:	40040000 	.word	0x40040000
 80170d8:	58024400 	.word	0x58024400

080170dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80170f0:	4619      	mov	r1, r3
 80170f2:	4610      	mov	r0, r2
 80170f4:	f7fe fb23 	bl	801573e <USBD_LL_SetupStage>
}
 80170f8:	bf00      	nop
 80170fa:	3708      	adds	r7, #8
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	460b      	mov	r3, r1
 801710a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017112:	78fa      	ldrb	r2, [r7, #3]
 8017114:	6879      	ldr	r1, [r7, #4]
 8017116:	4613      	mov	r3, r2
 8017118:	00db      	lsls	r3, r3, #3
 801711a:	4413      	add	r3, r2
 801711c:	009b      	lsls	r3, r3, #2
 801711e:	440b      	add	r3, r1
 8017120:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	78fb      	ldrb	r3, [r7, #3]
 8017128:	4619      	mov	r1, r3
 801712a:	f7fe fb5d 	bl	80157e8 <USBD_LL_DataOutStage>
}
 801712e:	bf00      	nop
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017136:	b580      	push	{r7, lr}
 8017138:	b082      	sub	sp, #8
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
 801713e:	460b      	mov	r3, r1
 8017140:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017148:	78fa      	ldrb	r2, [r7, #3]
 801714a:	6879      	ldr	r1, [r7, #4]
 801714c:	4613      	mov	r3, r2
 801714e:	00db      	lsls	r3, r3, #3
 8017150:	4413      	add	r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	440b      	add	r3, r1
 8017156:	3320      	adds	r3, #32
 8017158:	681a      	ldr	r2, [r3, #0]
 801715a:	78fb      	ldrb	r3, [r7, #3]
 801715c:	4619      	mov	r1, r3
 801715e:	f7fe fbf6 	bl	801594e <USBD_LL_DataInStage>
}
 8017162:	bf00      	nop
 8017164:	3708      	adds	r7, #8
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}

0801716a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801716a:	b580      	push	{r7, lr}
 801716c:	b082      	sub	sp, #8
 801716e:	af00      	add	r7, sp, #0
 8017170:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017178:	4618      	mov	r0, r3
 801717a:	f7fe fd30 	bl	8015bde <USBD_LL_SOF>
}
 801717e:	bf00      	nop
 8017180:	3708      	adds	r7, #8
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b084      	sub	sp, #16
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801718e:	2301      	movs	r3, #1
 8017190:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	79db      	ldrb	r3, [r3, #7]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d102      	bne.n	80171a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801719a:	2300      	movs	r3, #0
 801719c:	73fb      	strb	r3, [r7, #15]
 801719e:	e008      	b.n	80171b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	79db      	ldrb	r3, [r3, #7]
 80171a4:	2b02      	cmp	r3, #2
 80171a6:	d102      	bne.n	80171ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80171a8:	2301      	movs	r3, #1
 80171aa:	73fb      	strb	r3, [r7, #15]
 80171ac:	e001      	b.n	80171b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80171ae:	f7ea ffb3 	bl	8002118 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80171b8:	7bfa      	ldrb	r2, [r7, #15]
 80171ba:	4611      	mov	r1, r2
 80171bc:	4618      	mov	r0, r3
 80171be:	f7fe fcca 	bl	8015b56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fe fc72 	bl	8015ab2 <USBD_LL_Reset>
}
 80171ce:	bf00      	nop
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
	...

080171d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7fe fcc5 	bl	8015b76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	6812      	ldr	r2, [r2, #0]
 80171fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80171fe:	f043 0301 	orr.w	r3, r3, #1
 8017202:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	7adb      	ldrb	r3, [r3, #11]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d005      	beq.n	8017218 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801720c:	4b04      	ldr	r3, [pc, #16]	@ (8017220 <HAL_PCD_SuspendCallback+0x48>)
 801720e:	691b      	ldr	r3, [r3, #16]
 8017210:	4a03      	ldr	r2, [pc, #12]	@ (8017220 <HAL_PCD_SuspendCallback+0x48>)
 8017212:	f043 0306 	orr.w	r3, r3, #6
 8017216:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017218:	bf00      	nop
 801721a:	3708      	adds	r7, #8
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}
 8017220:	e000ed00 	.word	0xe000ed00

08017224 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017232:	4618      	mov	r0, r3
 8017234:	f7fe fcbb 	bl	8015bae <USBD_LL_Resume>
}
 8017238:	bf00      	nop
 801723a:	3708      	adds	r7, #8
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}

08017240 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	460b      	mov	r3, r1
 801724a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017252:	78fa      	ldrb	r2, [r7, #3]
 8017254:	4611      	mov	r1, r2
 8017256:	4618      	mov	r0, r3
 8017258:	f7fe fd13 	bl	8015c82 <USBD_LL_IsoOUTIncomplete>
}
 801725c:	bf00      	nop
 801725e:	3708      	adds	r7, #8
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	460b      	mov	r3, r1
 801726e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017276:	78fa      	ldrb	r2, [r7, #3]
 8017278:	4611      	mov	r1, r2
 801727a:	4618      	mov	r0, r3
 801727c:	f7fe fccf 	bl	8015c1e <USBD_LL_IsoINIncomplete>
}
 8017280:	bf00      	nop
 8017282:	3708      	adds	r7, #8
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}

08017288 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017296:	4618      	mov	r0, r3
 8017298:	f7fe fd25 	bl	8015ce6 <USBD_LL_DevConnected>
}
 801729c:	bf00      	nop
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fe fd22 	bl	8015cfc <USBD_LL_DevDisconnected>
}
 80172b8:	bf00      	nop
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d140      	bne.n	8017352 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80172d0:	4a22      	ldr	r2, [pc, #136]	@ (801735c <USBD_LL_Init+0x9c>)
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	4a20      	ldr	r2, [pc, #128]	@ (801735c <USBD_LL_Init+0x9c>)
 80172dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80172e0:	4b1e      	ldr	r3, [pc, #120]	@ (801735c <USBD_LL_Init+0x9c>)
 80172e2:	4a1f      	ldr	r2, [pc, #124]	@ (8017360 <USBD_LL_Init+0xa0>)
 80172e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80172e6:	4b1d      	ldr	r3, [pc, #116]	@ (801735c <USBD_LL_Init+0x9c>)
 80172e8:	2209      	movs	r2, #9
 80172ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80172ec:	4b1b      	ldr	r3, [pc, #108]	@ (801735c <USBD_LL_Init+0x9c>)
 80172ee:	2202      	movs	r2, #2
 80172f0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80172f2:	4b1a      	ldr	r3, [pc, #104]	@ (801735c <USBD_LL_Init+0x9c>)
 80172f4:	2200      	movs	r2, #0
 80172f6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80172f8:	4b18      	ldr	r3, [pc, #96]	@ (801735c <USBD_LL_Init+0x9c>)
 80172fa:	2202      	movs	r2, #2
 80172fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80172fe:	4b17      	ldr	r3, [pc, #92]	@ (801735c <USBD_LL_Init+0x9c>)
 8017300:	2200      	movs	r2, #0
 8017302:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017304:	4b15      	ldr	r3, [pc, #84]	@ (801735c <USBD_LL_Init+0x9c>)
 8017306:	2200      	movs	r2, #0
 8017308:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801730a:	4b14      	ldr	r3, [pc, #80]	@ (801735c <USBD_LL_Init+0x9c>)
 801730c:	2200      	movs	r2, #0
 801730e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017310:	4b12      	ldr	r3, [pc, #72]	@ (801735c <USBD_LL_Init+0x9c>)
 8017312:	2200      	movs	r2, #0
 8017314:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017316:	4b11      	ldr	r3, [pc, #68]	@ (801735c <USBD_LL_Init+0x9c>)
 8017318:	2200      	movs	r2, #0
 801731a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801731c:	4b0f      	ldr	r3, [pc, #60]	@ (801735c <USBD_LL_Init+0x9c>)
 801731e:	2200      	movs	r2, #0
 8017320:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017322:	480e      	ldr	r0, [pc, #56]	@ (801735c <USBD_LL_Init+0x9c>)
 8017324:	f7f3 fb1f 	bl	800a966 <HAL_PCD_Init>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d001      	beq.n	8017332 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801732e:	f7ea fef3 	bl	8002118 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017332:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017336:	4809      	ldr	r0, [pc, #36]	@ (801735c <USBD_LL_Init+0x9c>)
 8017338:	f7f4 fd73 	bl	800be22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801733c:	2280      	movs	r2, #128	@ 0x80
 801733e:	2100      	movs	r1, #0
 8017340:	4806      	ldr	r0, [pc, #24]	@ (801735c <USBD_LL_Init+0x9c>)
 8017342:	f7f4 fd27 	bl	800bd94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017346:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801734a:	2101      	movs	r1, #1
 801734c:	4803      	ldr	r0, [pc, #12]	@ (801735c <USBD_LL_Init+0x9c>)
 801734e:	f7f4 fd21 	bl	800bd94 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017352:	2300      	movs	r3, #0
}
 8017354:	4618      	mov	r0, r3
 8017356:	3708      	adds	r7, #8
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}
 801735c:	24005b14 	.word	0x24005b14
 8017360:	40040000 	.word	0x40040000

08017364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b084      	sub	sp, #16
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801736c:	2300      	movs	r3, #0
 801736e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017370:	2300      	movs	r3, #0
 8017372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801737a:	4618      	mov	r0, r3
 801737c:	f7f3 fbff 	bl	800ab7e <HAL_PCD_Start>
 8017380:	4603      	mov	r3, r0
 8017382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017384:	7bfb      	ldrb	r3, [r7, #15]
 8017386:	4618      	mov	r0, r3
 8017388:	f000 f942 	bl	8017610 <USBD_Get_USB_Status>
 801738c:	4603      	mov	r3, r0
 801738e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017390:	7bbb      	ldrb	r3, [r7, #14]
}
 8017392:	4618      	mov	r0, r3
 8017394:	3710      	adds	r7, #16
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}

0801739a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b084      	sub	sp, #16
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
 80173a2:	4608      	mov	r0, r1
 80173a4:	4611      	mov	r1, r2
 80173a6:	461a      	mov	r2, r3
 80173a8:	4603      	mov	r3, r0
 80173aa:	70fb      	strb	r3, [r7, #3]
 80173ac:	460b      	mov	r3, r1
 80173ae:	70bb      	strb	r3, [r7, #2]
 80173b0:	4613      	mov	r3, r2
 80173b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173b4:	2300      	movs	r3, #0
 80173b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173b8:	2300      	movs	r3, #0
 80173ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80173c2:	78bb      	ldrb	r3, [r7, #2]
 80173c4:	883a      	ldrh	r2, [r7, #0]
 80173c6:	78f9      	ldrb	r1, [r7, #3]
 80173c8:	f7f4 f900 	bl	800b5cc <HAL_PCD_EP_Open>
 80173cc:	4603      	mov	r3, r0
 80173ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173d0:	7bfb      	ldrb	r3, [r7, #15]
 80173d2:	4618      	mov	r0, r3
 80173d4:	f000 f91c 	bl	8017610 <USBD_Get_USB_Status>
 80173d8:	4603      	mov	r3, r0
 80173da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3710      	adds	r7, #16
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}

080173e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80173e6:	b580      	push	{r7, lr}
 80173e8:	b084      	sub	sp, #16
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	6078      	str	r0, [r7, #4]
 80173ee:	460b      	mov	r3, r1
 80173f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173f2:	2300      	movs	r3, #0
 80173f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173f6:	2300      	movs	r3, #0
 80173f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017400:	78fa      	ldrb	r2, [r7, #3]
 8017402:	4611      	mov	r1, r2
 8017404:	4618      	mov	r0, r3
 8017406:	f7f4 f949 	bl	800b69c <HAL_PCD_EP_Close>
 801740a:	4603      	mov	r3, r0
 801740c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801740e:	7bfb      	ldrb	r3, [r7, #15]
 8017410:	4618      	mov	r0, r3
 8017412:	f000 f8fd 	bl	8017610 <USBD_Get_USB_Status>
 8017416:	4603      	mov	r3, r0
 8017418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801741a:	7bbb      	ldrb	r3, [r7, #14]
}
 801741c:	4618      	mov	r0, r3
 801741e:	3710      	adds	r7, #16
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b084      	sub	sp, #16
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	460b      	mov	r3, r1
 801742e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017430:	2300      	movs	r3, #0
 8017432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017434:	2300      	movs	r3, #0
 8017436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801743e:	78fa      	ldrb	r2, [r7, #3]
 8017440:	4611      	mov	r1, r2
 8017442:	4618      	mov	r0, r3
 8017444:	f7f4 fa01 	bl	800b84a <HAL_PCD_EP_SetStall>
 8017448:	4603      	mov	r3, r0
 801744a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801744c:	7bfb      	ldrb	r3, [r7, #15]
 801744e:	4618      	mov	r0, r3
 8017450:	f000 f8de 	bl	8017610 <USBD_Get_USB_Status>
 8017454:	4603      	mov	r3, r0
 8017456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017458:	7bbb      	ldrb	r3, [r7, #14]
}
 801745a:	4618      	mov	r0, r3
 801745c:	3710      	adds	r7, #16
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}

08017462 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017462:	b580      	push	{r7, lr}
 8017464:	b084      	sub	sp, #16
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
 801746a:	460b      	mov	r3, r1
 801746c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801746e:	2300      	movs	r3, #0
 8017470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017472:	2300      	movs	r3, #0
 8017474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801747c:	78fa      	ldrb	r2, [r7, #3]
 801747e:	4611      	mov	r1, r2
 8017480:	4618      	mov	r0, r3
 8017482:	f7f4 fa45 	bl	800b910 <HAL_PCD_EP_ClrStall>
 8017486:	4603      	mov	r3, r0
 8017488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801748a:	7bfb      	ldrb	r3, [r7, #15]
 801748c:	4618      	mov	r0, r3
 801748e:	f000 f8bf 	bl	8017610 <USBD_Get_USB_Status>
 8017492:	4603      	mov	r3, r0
 8017494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017496:	7bbb      	ldrb	r3, [r7, #14]
}
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174a0:	b480      	push	{r7}
 80174a2:	b085      	sub	sp, #20
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	460b      	mov	r3, r1
 80174aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80174b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80174b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	da0b      	bge.n	80174d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80174bc:	78fb      	ldrb	r3, [r7, #3]
 80174be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80174c2:	68f9      	ldr	r1, [r7, #12]
 80174c4:	4613      	mov	r3, r2
 80174c6:	00db      	lsls	r3, r3, #3
 80174c8:	4413      	add	r3, r2
 80174ca:	009b      	lsls	r3, r3, #2
 80174cc:	440b      	add	r3, r1
 80174ce:	3316      	adds	r3, #22
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	e00b      	b.n	80174ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80174d4:	78fb      	ldrb	r3, [r7, #3]
 80174d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80174da:	68f9      	ldr	r1, [r7, #12]
 80174dc:	4613      	mov	r3, r2
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	4413      	add	r3, r2
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	440b      	add	r3, r1
 80174e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80174ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174ec:	4618      	mov	r0, r3
 80174ee:	3714      	adds	r7, #20
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr

080174f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b084      	sub	sp, #16
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	460b      	mov	r3, r1
 8017502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017504:	2300      	movs	r3, #0
 8017506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017508:	2300      	movs	r3, #0
 801750a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017512:	78fa      	ldrb	r2, [r7, #3]
 8017514:	4611      	mov	r1, r2
 8017516:	4618      	mov	r0, r3
 8017518:	f7f4 f834 	bl	800b584 <HAL_PCD_SetAddress>
 801751c:	4603      	mov	r3, r0
 801751e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017520:	7bfb      	ldrb	r3, [r7, #15]
 8017522:	4618      	mov	r0, r3
 8017524:	f000 f874 	bl	8017610 <USBD_Get_USB_Status>
 8017528:	4603      	mov	r3, r0
 801752a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801752c:	7bbb      	ldrb	r3, [r7, #14]
}
 801752e:	4618      	mov	r0, r3
 8017530:	3710      	adds	r7, #16
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}

08017536 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017536:	b580      	push	{r7, lr}
 8017538:	b086      	sub	sp, #24
 801753a:	af00      	add	r7, sp, #0
 801753c:	60f8      	str	r0, [r7, #12]
 801753e:	607a      	str	r2, [r7, #4]
 8017540:	603b      	str	r3, [r7, #0]
 8017542:	460b      	mov	r3, r1
 8017544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017546:	2300      	movs	r3, #0
 8017548:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801754a:	2300      	movs	r3, #0
 801754c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017554:	7af9      	ldrb	r1, [r7, #11]
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	f7f4 f93c 	bl	800b7d6 <HAL_PCD_EP_Transmit>
 801755e:	4603      	mov	r3, r0
 8017560:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017562:	7dfb      	ldrb	r3, [r7, #23]
 8017564:	4618      	mov	r0, r3
 8017566:	f000 f853 	bl	8017610 <USBD_Get_USB_Status>
 801756a:	4603      	mov	r3, r0
 801756c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801756e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017570:	4618      	mov	r0, r3
 8017572:	3718      	adds	r7, #24
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b086      	sub	sp, #24
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	607a      	str	r2, [r7, #4]
 8017582:	603b      	str	r3, [r7, #0]
 8017584:	460b      	mov	r3, r1
 8017586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017588:	2300      	movs	r3, #0
 801758a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801758c:	2300      	movs	r3, #0
 801758e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017596:	7af9      	ldrb	r1, [r7, #11]
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	f7f4 f8c8 	bl	800b730 <HAL_PCD_EP_Receive>
 80175a0:	4603      	mov	r3, r0
 80175a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175a4:	7dfb      	ldrb	r3, [r7, #23]
 80175a6:	4618      	mov	r0, r3
 80175a8:	f000 f832 	bl	8017610 <USBD_Get_USB_Status>
 80175ac:	4603      	mov	r3, r0
 80175ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80175b2:	4618      	mov	r0, r3
 80175b4:	3718      	adds	r7, #24
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}

080175ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175ba:	b580      	push	{r7, lr}
 80175bc:	b082      	sub	sp, #8
 80175be:	af00      	add	r7, sp, #0
 80175c0:	6078      	str	r0, [r7, #4]
 80175c2:	460b      	mov	r3, r1
 80175c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80175cc:	78fa      	ldrb	r2, [r7, #3]
 80175ce:	4611      	mov	r1, r2
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7f4 f8e8 	bl	800b7a6 <HAL_PCD_EP_GetRxCount>
 80175d6:	4603      	mov	r3, r0
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80175e8:	4b03      	ldr	r3, [pc, #12]	@ (80175f8 <USBD_static_malloc+0x18>)
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	370c      	adds	r7, #12
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr
 80175f6:	bf00      	nop
 80175f8:	24005ff8 	.word	0x24005ff8

080175fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017604:	bf00      	nop
 8017606:	370c      	adds	r7, #12
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017610:	b480      	push	{r7}
 8017612:	b085      	sub	sp, #20
 8017614:	af00      	add	r7, sp, #0
 8017616:	4603      	mov	r3, r0
 8017618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801761a:	2300      	movs	r3, #0
 801761c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801761e:	79fb      	ldrb	r3, [r7, #7]
 8017620:	2b03      	cmp	r3, #3
 8017622:	d817      	bhi.n	8017654 <USBD_Get_USB_Status+0x44>
 8017624:	a201      	add	r2, pc, #4	@ (adr r2, 801762c <USBD_Get_USB_Status+0x1c>)
 8017626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801762a:	bf00      	nop
 801762c:	0801763d 	.word	0x0801763d
 8017630:	08017643 	.word	0x08017643
 8017634:	08017649 	.word	0x08017649
 8017638:	0801764f 	.word	0x0801764f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801763c:	2300      	movs	r3, #0
 801763e:	73fb      	strb	r3, [r7, #15]
    break;
 8017640:	e00b      	b.n	801765a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017642:	2303      	movs	r3, #3
 8017644:	73fb      	strb	r3, [r7, #15]
    break;
 8017646:	e008      	b.n	801765a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017648:	2301      	movs	r3, #1
 801764a:	73fb      	strb	r3, [r7, #15]
    break;
 801764c:	e005      	b.n	801765a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801764e:	2303      	movs	r3, #3
 8017650:	73fb      	strb	r3, [r7, #15]
    break;
 8017652:	e002      	b.n	801765a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017654:	2303      	movs	r3, #3
 8017656:	73fb      	strb	r3, [r7, #15]
    break;
 8017658:	bf00      	nop
  }
  return usb_status;
 801765a:	7bfb      	ldrb	r3, [r7, #15]
}
 801765c:	4618      	mov	r0, r3
 801765e:	3714      	adds	r7, #20
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <atof>:
 8017668:	2100      	movs	r1, #0
 801766a:	f000 bdb7 	b.w	80181dc <strtod>

0801766e <atoi>:
 801766e:	220a      	movs	r2, #10
 8017670:	2100      	movs	r1, #0
 8017672:	f000 be39 	b.w	80182e8 <strtol>

08017676 <sulp>:
 8017676:	b570      	push	{r4, r5, r6, lr}
 8017678:	4604      	mov	r4, r0
 801767a:	460d      	mov	r5, r1
 801767c:	4616      	mov	r6, r2
 801767e:	ec45 4b10 	vmov	d0, r4, r5
 8017682:	f003 f9eb 	bl	801aa5c <__ulp>
 8017686:	b17e      	cbz	r6, 80176a8 <sulp+0x32>
 8017688:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801768c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017690:	2b00      	cmp	r3, #0
 8017692:	dd09      	ble.n	80176a8 <sulp+0x32>
 8017694:	051b      	lsls	r3, r3, #20
 8017696:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801769a:	2000      	movs	r0, #0
 801769c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80176a0:	ec41 0b17 	vmov	d7, r0, r1
 80176a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80176a8:	bd70      	pop	{r4, r5, r6, pc}
 80176aa:	0000      	movs	r0, r0
 80176ac:	0000      	movs	r0, r0
	...

080176b0 <_strtod_l>:
 80176b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b4:	ed2d 8b0a 	vpush	{d8-d12}
 80176b8:	b097      	sub	sp, #92	@ 0x5c
 80176ba:	4688      	mov	r8, r1
 80176bc:	920e      	str	r2, [sp, #56]	@ 0x38
 80176be:	2200      	movs	r2, #0
 80176c0:	9212      	str	r2, [sp, #72]	@ 0x48
 80176c2:	9005      	str	r0, [sp, #20]
 80176c4:	f04f 0a00 	mov.w	sl, #0
 80176c8:	f04f 0b00 	mov.w	fp, #0
 80176cc:	460a      	mov	r2, r1
 80176ce:	9211      	str	r2, [sp, #68]	@ 0x44
 80176d0:	7811      	ldrb	r1, [r2, #0]
 80176d2:	292b      	cmp	r1, #43	@ 0x2b
 80176d4:	d04c      	beq.n	8017770 <_strtod_l+0xc0>
 80176d6:	d839      	bhi.n	801774c <_strtod_l+0x9c>
 80176d8:	290d      	cmp	r1, #13
 80176da:	d833      	bhi.n	8017744 <_strtod_l+0x94>
 80176dc:	2908      	cmp	r1, #8
 80176de:	d833      	bhi.n	8017748 <_strtod_l+0x98>
 80176e0:	2900      	cmp	r1, #0
 80176e2:	d03c      	beq.n	801775e <_strtod_l+0xae>
 80176e4:	2200      	movs	r2, #0
 80176e6:	9208      	str	r2, [sp, #32]
 80176e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80176ea:	782a      	ldrb	r2, [r5, #0]
 80176ec:	2a30      	cmp	r2, #48	@ 0x30
 80176ee:	f040 80b5 	bne.w	801785c <_strtod_l+0x1ac>
 80176f2:	786a      	ldrb	r2, [r5, #1]
 80176f4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80176f8:	2a58      	cmp	r2, #88	@ 0x58
 80176fa:	d170      	bne.n	80177de <_strtod_l+0x12e>
 80176fc:	9302      	str	r3, [sp, #8]
 80176fe:	9b08      	ldr	r3, [sp, #32]
 8017700:	9301      	str	r3, [sp, #4]
 8017702:	ab12      	add	r3, sp, #72	@ 0x48
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	4a8b      	ldr	r2, [pc, #556]	@ (8017934 <_strtod_l+0x284>)
 8017708:	9805      	ldr	r0, [sp, #20]
 801770a:	ab13      	add	r3, sp, #76	@ 0x4c
 801770c:	a911      	add	r1, sp, #68	@ 0x44
 801770e:	f002 fa97 	bl	8019c40 <__gethex>
 8017712:	f010 060f 	ands.w	r6, r0, #15
 8017716:	4604      	mov	r4, r0
 8017718:	d005      	beq.n	8017726 <_strtod_l+0x76>
 801771a:	2e06      	cmp	r6, #6
 801771c:	d12a      	bne.n	8017774 <_strtod_l+0xc4>
 801771e:	3501      	adds	r5, #1
 8017720:	2300      	movs	r3, #0
 8017722:	9511      	str	r5, [sp, #68]	@ 0x44
 8017724:	9308      	str	r3, [sp, #32]
 8017726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017728:	2b00      	cmp	r3, #0
 801772a:	f040 852f 	bne.w	801818c <_strtod_l+0xadc>
 801772e:	9b08      	ldr	r3, [sp, #32]
 8017730:	ec4b ab10 	vmov	d0, sl, fp
 8017734:	b1cb      	cbz	r3, 801776a <_strtod_l+0xba>
 8017736:	eeb1 0b40 	vneg.f64	d0, d0
 801773a:	b017      	add	sp, #92	@ 0x5c
 801773c:	ecbd 8b0a 	vpop	{d8-d12}
 8017740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017744:	2920      	cmp	r1, #32
 8017746:	d1cd      	bne.n	80176e4 <_strtod_l+0x34>
 8017748:	3201      	adds	r2, #1
 801774a:	e7c0      	b.n	80176ce <_strtod_l+0x1e>
 801774c:	292d      	cmp	r1, #45	@ 0x2d
 801774e:	d1c9      	bne.n	80176e4 <_strtod_l+0x34>
 8017750:	2101      	movs	r1, #1
 8017752:	9108      	str	r1, [sp, #32]
 8017754:	1c51      	adds	r1, r2, #1
 8017756:	9111      	str	r1, [sp, #68]	@ 0x44
 8017758:	7852      	ldrb	r2, [r2, #1]
 801775a:	2a00      	cmp	r2, #0
 801775c:	d1c4      	bne.n	80176e8 <_strtod_l+0x38>
 801775e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017760:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017764:	2b00      	cmp	r3, #0
 8017766:	f040 850f 	bne.w	8018188 <_strtod_l+0xad8>
 801776a:	ec4b ab10 	vmov	d0, sl, fp
 801776e:	e7e4      	b.n	801773a <_strtod_l+0x8a>
 8017770:	2100      	movs	r1, #0
 8017772:	e7ee      	b.n	8017752 <_strtod_l+0xa2>
 8017774:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017776:	b13a      	cbz	r2, 8017788 <_strtod_l+0xd8>
 8017778:	2135      	movs	r1, #53	@ 0x35
 801777a:	a814      	add	r0, sp, #80	@ 0x50
 801777c:	f003 fa65 	bl	801ac4a <__copybits>
 8017780:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017782:	9805      	ldr	r0, [sp, #20]
 8017784:	f002 fe36 	bl	801a3f4 <_Bfree>
 8017788:	1e73      	subs	r3, r6, #1
 801778a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801778c:	2b04      	cmp	r3, #4
 801778e:	d806      	bhi.n	801779e <_strtod_l+0xee>
 8017790:	e8df f003 	tbb	[pc, r3]
 8017794:	201d0314 	.word	0x201d0314
 8017798:	14          	.byte	0x14
 8017799:	00          	.byte	0x00
 801779a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801779e:	05e3      	lsls	r3, r4, #23
 80177a0:	bf48      	it	mi
 80177a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80177a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80177aa:	0d1b      	lsrs	r3, r3, #20
 80177ac:	051b      	lsls	r3, r3, #20
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d1b9      	bne.n	8017726 <_strtod_l+0x76>
 80177b2:	f001 fb6f 	bl	8018e94 <__errno>
 80177b6:	2322      	movs	r3, #34	@ 0x22
 80177b8:	6003      	str	r3, [r0, #0]
 80177ba:	e7b4      	b.n	8017726 <_strtod_l+0x76>
 80177bc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80177c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80177c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80177c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80177cc:	e7e7      	b.n	801779e <_strtod_l+0xee>
 80177ce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801793c <_strtod_l+0x28c>
 80177d2:	e7e4      	b.n	801779e <_strtod_l+0xee>
 80177d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80177d8:	f04f 3aff 	mov.w	sl, #4294967295
 80177dc:	e7df      	b.n	801779e <_strtod_l+0xee>
 80177de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80177e0:	1c5a      	adds	r2, r3, #1
 80177e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80177e4:	785b      	ldrb	r3, [r3, #1]
 80177e6:	2b30      	cmp	r3, #48	@ 0x30
 80177e8:	d0f9      	beq.n	80177de <_strtod_l+0x12e>
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d09b      	beq.n	8017726 <_strtod_l+0x76>
 80177ee:	2301      	movs	r3, #1
 80177f0:	2600      	movs	r6, #0
 80177f2:	9307      	str	r3, [sp, #28]
 80177f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80177f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80177f8:	46b1      	mov	r9, r6
 80177fa:	4635      	mov	r5, r6
 80177fc:	220a      	movs	r2, #10
 80177fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017800:	7804      	ldrb	r4, [r0, #0]
 8017802:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017806:	b2d9      	uxtb	r1, r3
 8017808:	2909      	cmp	r1, #9
 801780a:	d929      	bls.n	8017860 <_strtod_l+0x1b0>
 801780c:	494a      	ldr	r1, [pc, #296]	@ (8017938 <_strtod_l+0x288>)
 801780e:	2201      	movs	r2, #1
 8017810:	f001 fae4 	bl	8018ddc <strncmp>
 8017814:	b378      	cbz	r0, 8017876 <_strtod_l+0x1c6>
 8017816:	2000      	movs	r0, #0
 8017818:	4622      	mov	r2, r4
 801781a:	462b      	mov	r3, r5
 801781c:	4607      	mov	r7, r0
 801781e:	9006      	str	r0, [sp, #24]
 8017820:	2a65      	cmp	r2, #101	@ 0x65
 8017822:	d001      	beq.n	8017828 <_strtod_l+0x178>
 8017824:	2a45      	cmp	r2, #69	@ 0x45
 8017826:	d117      	bne.n	8017858 <_strtod_l+0x1a8>
 8017828:	b91b      	cbnz	r3, 8017832 <_strtod_l+0x182>
 801782a:	9b07      	ldr	r3, [sp, #28]
 801782c:	4303      	orrs	r3, r0
 801782e:	d096      	beq.n	801775e <_strtod_l+0xae>
 8017830:	2300      	movs	r3, #0
 8017832:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8017836:	f108 0201 	add.w	r2, r8, #1
 801783a:	9211      	str	r2, [sp, #68]	@ 0x44
 801783c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017840:	2a2b      	cmp	r2, #43	@ 0x2b
 8017842:	d06b      	beq.n	801791c <_strtod_l+0x26c>
 8017844:	2a2d      	cmp	r2, #45	@ 0x2d
 8017846:	d071      	beq.n	801792c <_strtod_l+0x27c>
 8017848:	f04f 0e00 	mov.w	lr, #0
 801784c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017850:	2c09      	cmp	r4, #9
 8017852:	d979      	bls.n	8017948 <_strtod_l+0x298>
 8017854:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017858:	2400      	movs	r4, #0
 801785a:	e094      	b.n	8017986 <_strtod_l+0x2d6>
 801785c:	2300      	movs	r3, #0
 801785e:	e7c7      	b.n	80177f0 <_strtod_l+0x140>
 8017860:	2d08      	cmp	r5, #8
 8017862:	f100 0001 	add.w	r0, r0, #1
 8017866:	bfd4      	ite	le
 8017868:	fb02 3909 	mlale	r9, r2, r9, r3
 801786c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8017870:	3501      	adds	r5, #1
 8017872:	9011      	str	r0, [sp, #68]	@ 0x44
 8017874:	e7c3      	b.n	80177fe <_strtod_l+0x14e>
 8017876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017878:	1c5a      	adds	r2, r3, #1
 801787a:	9211      	str	r2, [sp, #68]	@ 0x44
 801787c:	785a      	ldrb	r2, [r3, #1]
 801787e:	b375      	cbz	r5, 80178de <_strtod_l+0x22e>
 8017880:	4607      	mov	r7, r0
 8017882:	462b      	mov	r3, r5
 8017884:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017888:	2909      	cmp	r1, #9
 801788a:	d913      	bls.n	80178b4 <_strtod_l+0x204>
 801788c:	2101      	movs	r1, #1
 801788e:	9106      	str	r1, [sp, #24]
 8017890:	e7c6      	b.n	8017820 <_strtod_l+0x170>
 8017892:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017894:	1c5a      	adds	r2, r3, #1
 8017896:	9211      	str	r2, [sp, #68]	@ 0x44
 8017898:	785a      	ldrb	r2, [r3, #1]
 801789a:	3001      	adds	r0, #1
 801789c:	2a30      	cmp	r2, #48	@ 0x30
 801789e:	d0f8      	beq.n	8017892 <_strtod_l+0x1e2>
 80178a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80178a4:	2b08      	cmp	r3, #8
 80178a6:	f200 8476 	bhi.w	8018196 <_strtod_l+0xae6>
 80178aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80178ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80178ae:	4607      	mov	r7, r0
 80178b0:	2000      	movs	r0, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	3a30      	subs	r2, #48	@ 0x30
 80178b6:	f100 0101 	add.w	r1, r0, #1
 80178ba:	d023      	beq.n	8017904 <_strtod_l+0x254>
 80178bc:	440f      	add	r7, r1
 80178be:	eb00 0c03 	add.w	ip, r0, r3
 80178c2:	4619      	mov	r1, r3
 80178c4:	240a      	movs	r4, #10
 80178c6:	4561      	cmp	r1, ip
 80178c8:	d10b      	bne.n	80178e2 <_strtod_l+0x232>
 80178ca:	1c5c      	adds	r4, r3, #1
 80178cc:	4403      	add	r3, r0
 80178ce:	2b08      	cmp	r3, #8
 80178d0:	4404      	add	r4, r0
 80178d2:	dc11      	bgt.n	80178f8 <_strtod_l+0x248>
 80178d4:	230a      	movs	r3, #10
 80178d6:	fb03 2909 	mla	r9, r3, r9, r2
 80178da:	2100      	movs	r1, #0
 80178dc:	e013      	b.n	8017906 <_strtod_l+0x256>
 80178de:	4628      	mov	r0, r5
 80178e0:	e7dc      	b.n	801789c <_strtod_l+0x1ec>
 80178e2:	2908      	cmp	r1, #8
 80178e4:	f101 0101 	add.w	r1, r1, #1
 80178e8:	dc02      	bgt.n	80178f0 <_strtod_l+0x240>
 80178ea:	fb04 f909 	mul.w	r9, r4, r9
 80178ee:	e7ea      	b.n	80178c6 <_strtod_l+0x216>
 80178f0:	2910      	cmp	r1, #16
 80178f2:	bfd8      	it	le
 80178f4:	4366      	mulle	r6, r4
 80178f6:	e7e6      	b.n	80178c6 <_strtod_l+0x216>
 80178f8:	2b0f      	cmp	r3, #15
 80178fa:	dcee      	bgt.n	80178da <_strtod_l+0x22a>
 80178fc:	230a      	movs	r3, #10
 80178fe:	fb03 2606 	mla	r6, r3, r6, r2
 8017902:	e7ea      	b.n	80178da <_strtod_l+0x22a>
 8017904:	461c      	mov	r4, r3
 8017906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017908:	1c5a      	adds	r2, r3, #1
 801790a:	9211      	str	r2, [sp, #68]	@ 0x44
 801790c:	785a      	ldrb	r2, [r3, #1]
 801790e:	4608      	mov	r0, r1
 8017910:	4623      	mov	r3, r4
 8017912:	e7b7      	b.n	8017884 <_strtod_l+0x1d4>
 8017914:	2301      	movs	r3, #1
 8017916:	2700      	movs	r7, #0
 8017918:	9306      	str	r3, [sp, #24]
 801791a:	e786      	b.n	801782a <_strtod_l+0x17a>
 801791c:	f04f 0e00 	mov.w	lr, #0
 8017920:	f108 0202 	add.w	r2, r8, #2
 8017924:	9211      	str	r2, [sp, #68]	@ 0x44
 8017926:	f898 2002 	ldrb.w	r2, [r8, #2]
 801792a:	e78f      	b.n	801784c <_strtod_l+0x19c>
 801792c:	f04f 0e01 	mov.w	lr, #1
 8017930:	e7f6      	b.n	8017920 <_strtod_l+0x270>
 8017932:	bf00      	nop
 8017934:	0801cbf0 	.word	0x0801cbf0
 8017938:	0801cbd8 	.word	0x0801cbd8
 801793c:	7ff00000 	.word	0x7ff00000
 8017940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017942:	1c54      	adds	r4, r2, #1
 8017944:	9411      	str	r4, [sp, #68]	@ 0x44
 8017946:	7852      	ldrb	r2, [r2, #1]
 8017948:	2a30      	cmp	r2, #48	@ 0x30
 801794a:	d0f9      	beq.n	8017940 <_strtod_l+0x290>
 801794c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8017950:	2c08      	cmp	r4, #8
 8017952:	d881      	bhi.n	8017858 <_strtod_l+0x1a8>
 8017954:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8017958:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801795a:	9209      	str	r2, [sp, #36]	@ 0x24
 801795c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801795e:	1c51      	adds	r1, r2, #1
 8017960:	9111      	str	r1, [sp, #68]	@ 0x44
 8017962:	7852      	ldrb	r2, [r2, #1]
 8017964:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017968:	2c09      	cmp	r4, #9
 801796a:	d938      	bls.n	80179de <_strtod_l+0x32e>
 801796c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801796e:	1b0c      	subs	r4, r1, r4
 8017970:	2c08      	cmp	r4, #8
 8017972:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017976:	dc02      	bgt.n	801797e <_strtod_l+0x2ce>
 8017978:	4564      	cmp	r4, ip
 801797a:	bfa8      	it	ge
 801797c:	4664      	movge	r4, ip
 801797e:	f1be 0f00 	cmp.w	lr, #0
 8017982:	d000      	beq.n	8017986 <_strtod_l+0x2d6>
 8017984:	4264      	negs	r4, r4
 8017986:	2b00      	cmp	r3, #0
 8017988:	d14e      	bne.n	8017a28 <_strtod_l+0x378>
 801798a:	9b07      	ldr	r3, [sp, #28]
 801798c:	4318      	orrs	r0, r3
 801798e:	f47f aeca 	bne.w	8017726 <_strtod_l+0x76>
 8017992:	9b06      	ldr	r3, [sp, #24]
 8017994:	2b00      	cmp	r3, #0
 8017996:	f47f aee2 	bne.w	801775e <_strtod_l+0xae>
 801799a:	2a69      	cmp	r2, #105	@ 0x69
 801799c:	d027      	beq.n	80179ee <_strtod_l+0x33e>
 801799e:	dc24      	bgt.n	80179ea <_strtod_l+0x33a>
 80179a0:	2a49      	cmp	r2, #73	@ 0x49
 80179a2:	d024      	beq.n	80179ee <_strtod_l+0x33e>
 80179a4:	2a4e      	cmp	r2, #78	@ 0x4e
 80179a6:	f47f aeda 	bne.w	801775e <_strtod_l+0xae>
 80179aa:	4997      	ldr	r1, [pc, #604]	@ (8017c08 <_strtod_l+0x558>)
 80179ac:	a811      	add	r0, sp, #68	@ 0x44
 80179ae:	f002 fb69 	bl	801a084 <__match>
 80179b2:	2800      	cmp	r0, #0
 80179b4:	f43f aed3 	beq.w	801775e <_strtod_l+0xae>
 80179b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	2b28      	cmp	r3, #40	@ 0x28
 80179be:	d12d      	bne.n	8017a1c <_strtod_l+0x36c>
 80179c0:	4992      	ldr	r1, [pc, #584]	@ (8017c0c <_strtod_l+0x55c>)
 80179c2:	aa14      	add	r2, sp, #80	@ 0x50
 80179c4:	a811      	add	r0, sp, #68	@ 0x44
 80179c6:	f002 fb71 	bl	801a0ac <__hexnan>
 80179ca:	2805      	cmp	r0, #5
 80179cc:	d126      	bne.n	8017a1c <_strtod_l+0x36c>
 80179ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80179d0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80179d4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80179d8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80179dc:	e6a3      	b.n	8017726 <_strtod_l+0x76>
 80179de:	240a      	movs	r4, #10
 80179e0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80179e4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80179e8:	e7b8      	b.n	801795c <_strtod_l+0x2ac>
 80179ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80179ec:	e7db      	b.n	80179a6 <_strtod_l+0x2f6>
 80179ee:	4988      	ldr	r1, [pc, #544]	@ (8017c10 <_strtod_l+0x560>)
 80179f0:	a811      	add	r0, sp, #68	@ 0x44
 80179f2:	f002 fb47 	bl	801a084 <__match>
 80179f6:	2800      	cmp	r0, #0
 80179f8:	f43f aeb1 	beq.w	801775e <_strtod_l+0xae>
 80179fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80179fe:	4985      	ldr	r1, [pc, #532]	@ (8017c14 <_strtod_l+0x564>)
 8017a00:	3b01      	subs	r3, #1
 8017a02:	a811      	add	r0, sp, #68	@ 0x44
 8017a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8017a06:	f002 fb3d 	bl	801a084 <__match>
 8017a0a:	b910      	cbnz	r0, 8017a12 <_strtod_l+0x362>
 8017a0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017a0e:	3301      	adds	r3, #1
 8017a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8017a12:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8017c28 <_strtod_l+0x578>
 8017a16:	f04f 0a00 	mov.w	sl, #0
 8017a1a:	e684      	b.n	8017726 <_strtod_l+0x76>
 8017a1c:	487e      	ldr	r0, [pc, #504]	@ (8017c18 <_strtod_l+0x568>)
 8017a1e:	f001 fa77 	bl	8018f10 <nan>
 8017a22:	ec5b ab10 	vmov	sl, fp, d0
 8017a26:	e67e      	b.n	8017726 <_strtod_l+0x76>
 8017a28:	ee07 9a90 	vmov	s15, r9
 8017a2c:	1be2      	subs	r2, r4, r7
 8017a2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017a32:	2d00      	cmp	r5, #0
 8017a34:	bf08      	it	eq
 8017a36:	461d      	moveq	r5, r3
 8017a38:	2b10      	cmp	r3, #16
 8017a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	bfa8      	it	ge
 8017a40:	2210      	movge	r2, #16
 8017a42:	2b09      	cmp	r3, #9
 8017a44:	ec5b ab17 	vmov	sl, fp, d7
 8017a48:	dc15      	bgt.n	8017a76 <_strtod_l+0x3c6>
 8017a4a:	1be1      	subs	r1, r4, r7
 8017a4c:	2900      	cmp	r1, #0
 8017a4e:	f43f ae6a 	beq.w	8017726 <_strtod_l+0x76>
 8017a52:	eba4 0107 	sub.w	r1, r4, r7
 8017a56:	dd72      	ble.n	8017b3e <_strtod_l+0x48e>
 8017a58:	2916      	cmp	r1, #22
 8017a5a:	dc59      	bgt.n	8017b10 <_strtod_l+0x460>
 8017a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8017c1c <_strtod_l+0x56c>)
 8017a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a64:	ed93 7b00 	vldr	d7, [r3]
 8017a68:	ec4b ab16 	vmov	d6, sl, fp
 8017a6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a70:	ec5b ab17 	vmov	sl, fp, d7
 8017a74:	e657      	b.n	8017726 <_strtod_l+0x76>
 8017a76:	4969      	ldr	r1, [pc, #420]	@ (8017c1c <_strtod_l+0x56c>)
 8017a78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017a7c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017a80:	ee06 6a90 	vmov	s13, r6
 8017a84:	2b0f      	cmp	r3, #15
 8017a86:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017a8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017a8e:	ec5b ab16 	vmov	sl, fp, d6
 8017a92:	ddda      	ble.n	8017a4a <_strtod_l+0x39a>
 8017a94:	1a9a      	subs	r2, r3, r2
 8017a96:	1be1      	subs	r1, r4, r7
 8017a98:	440a      	add	r2, r1
 8017a9a:	2a00      	cmp	r2, #0
 8017a9c:	f340 8094 	ble.w	8017bc8 <_strtod_l+0x518>
 8017aa0:	f012 000f 	ands.w	r0, r2, #15
 8017aa4:	d00a      	beq.n	8017abc <_strtod_l+0x40c>
 8017aa6:	495d      	ldr	r1, [pc, #372]	@ (8017c1c <_strtod_l+0x56c>)
 8017aa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017aac:	ed91 7b00 	vldr	d7, [r1]
 8017ab0:	ec4b ab16 	vmov	d6, sl, fp
 8017ab4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ab8:	ec5b ab17 	vmov	sl, fp, d7
 8017abc:	f032 020f 	bics.w	r2, r2, #15
 8017ac0:	d073      	beq.n	8017baa <_strtod_l+0x4fa>
 8017ac2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017ac6:	dd47      	ble.n	8017b58 <_strtod_l+0x4a8>
 8017ac8:	2400      	movs	r4, #0
 8017aca:	4625      	mov	r5, r4
 8017acc:	9407      	str	r4, [sp, #28]
 8017ace:	4626      	mov	r6, r4
 8017ad0:	9a05      	ldr	r2, [sp, #20]
 8017ad2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017c28 <_strtod_l+0x578>
 8017ad6:	2322      	movs	r3, #34	@ 0x22
 8017ad8:	6013      	str	r3, [r2, #0]
 8017ada:	f04f 0a00 	mov.w	sl, #0
 8017ade:	9b07      	ldr	r3, [sp, #28]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f43f ae20 	beq.w	8017726 <_strtod_l+0x76>
 8017ae6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017ae8:	9805      	ldr	r0, [sp, #20]
 8017aea:	f002 fc83 	bl	801a3f4 <_Bfree>
 8017aee:	9805      	ldr	r0, [sp, #20]
 8017af0:	4631      	mov	r1, r6
 8017af2:	f002 fc7f 	bl	801a3f4 <_Bfree>
 8017af6:	9805      	ldr	r0, [sp, #20]
 8017af8:	4629      	mov	r1, r5
 8017afa:	f002 fc7b 	bl	801a3f4 <_Bfree>
 8017afe:	9907      	ldr	r1, [sp, #28]
 8017b00:	9805      	ldr	r0, [sp, #20]
 8017b02:	f002 fc77 	bl	801a3f4 <_Bfree>
 8017b06:	9805      	ldr	r0, [sp, #20]
 8017b08:	4621      	mov	r1, r4
 8017b0a:	f002 fc73 	bl	801a3f4 <_Bfree>
 8017b0e:	e60a      	b.n	8017726 <_strtod_l+0x76>
 8017b10:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017b14:	1be0      	subs	r0, r4, r7
 8017b16:	4281      	cmp	r1, r0
 8017b18:	dbbc      	blt.n	8017a94 <_strtod_l+0x3e4>
 8017b1a:	4a40      	ldr	r2, [pc, #256]	@ (8017c1c <_strtod_l+0x56c>)
 8017b1c:	f1c3 030f 	rsb	r3, r3, #15
 8017b20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017b24:	ed91 7b00 	vldr	d7, [r1]
 8017b28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017b2a:	ec4b ab16 	vmov	d6, sl, fp
 8017b2e:	1acb      	subs	r3, r1, r3
 8017b30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017b34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017b38:	ed92 6b00 	vldr	d6, [r2]
 8017b3c:	e796      	b.n	8017a6c <_strtod_l+0x3bc>
 8017b3e:	3116      	adds	r1, #22
 8017b40:	dba8      	blt.n	8017a94 <_strtod_l+0x3e4>
 8017b42:	4b36      	ldr	r3, [pc, #216]	@ (8017c1c <_strtod_l+0x56c>)
 8017b44:	1b3c      	subs	r4, r7, r4
 8017b46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8017b4a:	ed94 7b00 	vldr	d7, [r4]
 8017b4e:	ec4b ab16 	vmov	d6, sl, fp
 8017b52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017b56:	e78b      	b.n	8017a70 <_strtod_l+0x3c0>
 8017b58:	2000      	movs	r0, #0
 8017b5a:	ec4b ab17 	vmov	d7, sl, fp
 8017b5e:	4e30      	ldr	r6, [pc, #192]	@ (8017c20 <_strtod_l+0x570>)
 8017b60:	1112      	asrs	r2, r2, #4
 8017b62:	4601      	mov	r1, r0
 8017b64:	2a01      	cmp	r2, #1
 8017b66:	dc23      	bgt.n	8017bb0 <_strtod_l+0x500>
 8017b68:	b108      	cbz	r0, 8017b6e <_strtod_l+0x4be>
 8017b6a:	ec5b ab17 	vmov	sl, fp, d7
 8017b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8017c20 <_strtod_l+0x570>)
 8017b70:	482c      	ldr	r0, [pc, #176]	@ (8017c24 <_strtod_l+0x574>)
 8017b72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017b76:	ed92 7b00 	vldr	d7, [r2]
 8017b7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8017b7e:	ec4b ab16 	vmov	d6, sl, fp
 8017b82:	4a29      	ldr	r2, [pc, #164]	@ (8017c28 <_strtod_l+0x578>)
 8017b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017b88:	ee17 1a90 	vmov	r1, s15
 8017b8c:	400a      	ands	r2, r1
 8017b8e:	4282      	cmp	r2, r0
 8017b90:	ec5b ab17 	vmov	sl, fp, d7
 8017b94:	d898      	bhi.n	8017ac8 <_strtod_l+0x418>
 8017b96:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8017b9a:	4282      	cmp	r2, r0
 8017b9c:	bf86      	itte	hi
 8017b9e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8017c2c <_strtod_l+0x57c>
 8017ba2:	f04f 3aff 	movhi.w	sl, #4294967295
 8017ba6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8017baa:	2200      	movs	r2, #0
 8017bac:	9206      	str	r2, [sp, #24]
 8017bae:	e076      	b.n	8017c9e <_strtod_l+0x5ee>
 8017bb0:	f012 0f01 	tst.w	r2, #1
 8017bb4:	d004      	beq.n	8017bc0 <_strtod_l+0x510>
 8017bb6:	ed96 6b00 	vldr	d6, [r6]
 8017bba:	2001      	movs	r0, #1
 8017bbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017bc0:	3101      	adds	r1, #1
 8017bc2:	1052      	asrs	r2, r2, #1
 8017bc4:	3608      	adds	r6, #8
 8017bc6:	e7cd      	b.n	8017b64 <_strtod_l+0x4b4>
 8017bc8:	d0ef      	beq.n	8017baa <_strtod_l+0x4fa>
 8017bca:	4252      	negs	r2, r2
 8017bcc:	f012 000f 	ands.w	r0, r2, #15
 8017bd0:	d00a      	beq.n	8017be8 <_strtod_l+0x538>
 8017bd2:	4912      	ldr	r1, [pc, #72]	@ (8017c1c <_strtod_l+0x56c>)
 8017bd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017bd8:	ed91 7b00 	vldr	d7, [r1]
 8017bdc:	ec4b ab16 	vmov	d6, sl, fp
 8017be0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017be4:	ec5b ab17 	vmov	sl, fp, d7
 8017be8:	1112      	asrs	r2, r2, #4
 8017bea:	d0de      	beq.n	8017baa <_strtod_l+0x4fa>
 8017bec:	2a1f      	cmp	r2, #31
 8017bee:	dd1f      	ble.n	8017c30 <_strtod_l+0x580>
 8017bf0:	2400      	movs	r4, #0
 8017bf2:	4625      	mov	r5, r4
 8017bf4:	9407      	str	r4, [sp, #28]
 8017bf6:	4626      	mov	r6, r4
 8017bf8:	9a05      	ldr	r2, [sp, #20]
 8017bfa:	2322      	movs	r3, #34	@ 0x22
 8017bfc:	f04f 0a00 	mov.w	sl, #0
 8017c00:	f04f 0b00 	mov.w	fp, #0
 8017c04:	6013      	str	r3, [r2, #0]
 8017c06:	e76a      	b.n	8017ade <_strtod_l+0x42e>
 8017c08:	0801cd3e 	.word	0x0801cd3e
 8017c0c:	0801cbdc 	.word	0x0801cbdc
 8017c10:	0801cd36 	.word	0x0801cd36
 8017c14:	0801cd70 	.word	0x0801cd70
 8017c18:	0801cffc 	.word	0x0801cffc
 8017c1c:	0801cee8 	.word	0x0801cee8
 8017c20:	0801cec0 	.word	0x0801cec0
 8017c24:	7ca00000 	.word	0x7ca00000
 8017c28:	7ff00000 	.word	0x7ff00000
 8017c2c:	7fefffff 	.word	0x7fefffff
 8017c30:	f012 0110 	ands.w	r1, r2, #16
 8017c34:	bf18      	it	ne
 8017c36:	216a      	movne	r1, #106	@ 0x6a
 8017c38:	9106      	str	r1, [sp, #24]
 8017c3a:	ec4b ab17 	vmov	d7, sl, fp
 8017c3e:	49b0      	ldr	r1, [pc, #704]	@ (8017f00 <_strtod_l+0x850>)
 8017c40:	2000      	movs	r0, #0
 8017c42:	07d6      	lsls	r6, r2, #31
 8017c44:	d504      	bpl.n	8017c50 <_strtod_l+0x5a0>
 8017c46:	ed91 6b00 	vldr	d6, [r1]
 8017c4a:	2001      	movs	r0, #1
 8017c4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c50:	1052      	asrs	r2, r2, #1
 8017c52:	f101 0108 	add.w	r1, r1, #8
 8017c56:	d1f4      	bne.n	8017c42 <_strtod_l+0x592>
 8017c58:	b108      	cbz	r0, 8017c5e <_strtod_l+0x5ae>
 8017c5a:	ec5b ab17 	vmov	sl, fp, d7
 8017c5e:	9a06      	ldr	r2, [sp, #24]
 8017c60:	b1b2      	cbz	r2, 8017c90 <_strtod_l+0x5e0>
 8017c62:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017c66:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8017c6a:	2a00      	cmp	r2, #0
 8017c6c:	4658      	mov	r0, fp
 8017c6e:	dd0f      	ble.n	8017c90 <_strtod_l+0x5e0>
 8017c70:	2a1f      	cmp	r2, #31
 8017c72:	dd55      	ble.n	8017d20 <_strtod_l+0x670>
 8017c74:	2a34      	cmp	r2, #52	@ 0x34
 8017c76:	bfde      	ittt	le
 8017c78:	f04f 32ff 	movle.w	r2, #4294967295
 8017c7c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017c80:	408a      	lslle	r2, r1
 8017c82:	f04f 0a00 	mov.w	sl, #0
 8017c86:	bfcc      	ite	gt
 8017c88:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017c8c:	ea02 0b00 	andle.w	fp, r2, r0
 8017c90:	ec4b ab17 	vmov	d7, sl, fp
 8017c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c9c:	d0a8      	beq.n	8017bf0 <_strtod_l+0x540>
 8017c9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ca0:	9805      	ldr	r0, [sp, #20]
 8017ca2:	f8cd 9000 	str.w	r9, [sp]
 8017ca6:	462a      	mov	r2, r5
 8017ca8:	f002 fc0c 	bl	801a4c4 <__s2b>
 8017cac:	9007      	str	r0, [sp, #28]
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	f43f af0a 	beq.w	8017ac8 <_strtod_l+0x418>
 8017cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cb6:	1b3f      	subs	r7, r7, r4
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	bfb4      	ite	lt
 8017cbc:	463b      	movlt	r3, r7
 8017cbe:	2300      	movge	r3, #0
 8017cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8017cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cc4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017ef0 <_strtod_l+0x840>
 8017cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ccc:	2400      	movs	r4, #0
 8017cce:	930d      	str	r3, [sp, #52]	@ 0x34
 8017cd0:	4625      	mov	r5, r4
 8017cd2:	9b07      	ldr	r3, [sp, #28]
 8017cd4:	9805      	ldr	r0, [sp, #20]
 8017cd6:	6859      	ldr	r1, [r3, #4]
 8017cd8:	f002 fb4c 	bl	801a374 <_Balloc>
 8017cdc:	4606      	mov	r6, r0
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	f43f aef6 	beq.w	8017ad0 <_strtod_l+0x420>
 8017ce4:	9b07      	ldr	r3, [sp, #28]
 8017ce6:	691a      	ldr	r2, [r3, #16]
 8017ce8:	ec4b ab19 	vmov	d9, sl, fp
 8017cec:	3202      	adds	r2, #2
 8017cee:	f103 010c 	add.w	r1, r3, #12
 8017cf2:	0092      	lsls	r2, r2, #2
 8017cf4:	300c      	adds	r0, #12
 8017cf6:	f001 f8fa 	bl	8018eee <memcpy>
 8017cfa:	eeb0 0b49 	vmov.f64	d0, d9
 8017cfe:	9805      	ldr	r0, [sp, #20]
 8017d00:	aa14      	add	r2, sp, #80	@ 0x50
 8017d02:	a913      	add	r1, sp, #76	@ 0x4c
 8017d04:	f002 ff1a 	bl	801ab3c <__d2b>
 8017d08:	9012      	str	r0, [sp, #72]	@ 0x48
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	f43f aee0 	beq.w	8017ad0 <_strtod_l+0x420>
 8017d10:	9805      	ldr	r0, [sp, #20]
 8017d12:	2101      	movs	r1, #1
 8017d14:	f002 fc6c 	bl	801a5f0 <__i2b>
 8017d18:	4605      	mov	r5, r0
 8017d1a:	b940      	cbnz	r0, 8017d2e <_strtod_l+0x67e>
 8017d1c:	2500      	movs	r5, #0
 8017d1e:	e6d7      	b.n	8017ad0 <_strtod_l+0x420>
 8017d20:	f04f 31ff 	mov.w	r1, #4294967295
 8017d24:	fa01 f202 	lsl.w	r2, r1, r2
 8017d28:	ea02 0a0a 	and.w	sl, r2, sl
 8017d2c:	e7b0      	b.n	8017c90 <_strtod_l+0x5e0>
 8017d2e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8017d30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017d32:	2f00      	cmp	r7, #0
 8017d34:	bfab      	itete	ge
 8017d36:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8017d38:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8017d3a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8017d3e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8017d42:	bfac      	ite	ge
 8017d44:	eb07 0903 	addge.w	r9, r7, r3
 8017d48:	eba3 0807 	sublt.w	r8, r3, r7
 8017d4c:	9b06      	ldr	r3, [sp, #24]
 8017d4e:	1aff      	subs	r7, r7, r3
 8017d50:	4417      	add	r7, r2
 8017d52:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8017d56:	4a6b      	ldr	r2, [pc, #428]	@ (8017f04 <_strtod_l+0x854>)
 8017d58:	3f01      	subs	r7, #1
 8017d5a:	4297      	cmp	r7, r2
 8017d5c:	da51      	bge.n	8017e02 <_strtod_l+0x752>
 8017d5e:	1bd1      	subs	r1, r2, r7
 8017d60:	291f      	cmp	r1, #31
 8017d62:	eba3 0301 	sub.w	r3, r3, r1
 8017d66:	f04f 0201 	mov.w	r2, #1
 8017d6a:	dc3e      	bgt.n	8017dea <_strtod_l+0x73a>
 8017d6c:	408a      	lsls	r2, r1
 8017d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017d70:	2200      	movs	r2, #0
 8017d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017d74:	eb09 0703 	add.w	r7, r9, r3
 8017d78:	4498      	add	r8, r3
 8017d7a:	9b06      	ldr	r3, [sp, #24]
 8017d7c:	45b9      	cmp	r9, r7
 8017d7e:	4498      	add	r8, r3
 8017d80:	464b      	mov	r3, r9
 8017d82:	bfa8      	it	ge
 8017d84:	463b      	movge	r3, r7
 8017d86:	4543      	cmp	r3, r8
 8017d88:	bfa8      	it	ge
 8017d8a:	4643      	movge	r3, r8
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	bfc2      	ittt	gt
 8017d90:	1aff      	subgt	r7, r7, r3
 8017d92:	eba8 0803 	subgt.w	r8, r8, r3
 8017d96:	eba9 0903 	subgt.w	r9, r9, r3
 8017d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	dd16      	ble.n	8017dce <_strtod_l+0x71e>
 8017da0:	4629      	mov	r1, r5
 8017da2:	9805      	ldr	r0, [sp, #20]
 8017da4:	461a      	mov	r2, r3
 8017da6:	f002 fce3 	bl	801a770 <__pow5mult>
 8017daa:	4605      	mov	r5, r0
 8017dac:	2800      	cmp	r0, #0
 8017dae:	d0b5      	beq.n	8017d1c <_strtod_l+0x66c>
 8017db0:	4601      	mov	r1, r0
 8017db2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017db4:	9805      	ldr	r0, [sp, #20]
 8017db6:	f002 fc31 	bl	801a61c <__multiply>
 8017dba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	f43f ae87 	beq.w	8017ad0 <_strtod_l+0x420>
 8017dc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017dc4:	9805      	ldr	r0, [sp, #20]
 8017dc6:	f002 fb15 	bl	801a3f4 <_Bfree>
 8017dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017dcc:	9312      	str	r3, [sp, #72]	@ 0x48
 8017dce:	2f00      	cmp	r7, #0
 8017dd0:	dc1b      	bgt.n	8017e0a <_strtod_l+0x75a>
 8017dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	dd21      	ble.n	8017e1c <_strtod_l+0x76c>
 8017dd8:	4631      	mov	r1, r6
 8017dda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ddc:	9805      	ldr	r0, [sp, #20]
 8017dde:	f002 fcc7 	bl	801a770 <__pow5mult>
 8017de2:	4606      	mov	r6, r0
 8017de4:	b9d0      	cbnz	r0, 8017e1c <_strtod_l+0x76c>
 8017de6:	2600      	movs	r6, #0
 8017de8:	e672      	b.n	8017ad0 <_strtod_l+0x420>
 8017dea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8017dee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017df2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017df6:	37e2      	adds	r7, #226	@ 0xe2
 8017df8:	fa02 f107 	lsl.w	r1, r2, r7
 8017dfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017dfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8017e00:	e7b8      	b.n	8017d74 <_strtod_l+0x6c4>
 8017e02:	2200      	movs	r2, #0
 8017e04:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017e06:	2201      	movs	r2, #1
 8017e08:	e7f9      	b.n	8017dfe <_strtod_l+0x74e>
 8017e0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017e0c:	9805      	ldr	r0, [sp, #20]
 8017e0e:	463a      	mov	r2, r7
 8017e10:	f002 fd08 	bl	801a824 <__lshift>
 8017e14:	9012      	str	r0, [sp, #72]	@ 0x48
 8017e16:	2800      	cmp	r0, #0
 8017e18:	d1db      	bne.n	8017dd2 <_strtod_l+0x722>
 8017e1a:	e659      	b.n	8017ad0 <_strtod_l+0x420>
 8017e1c:	f1b8 0f00 	cmp.w	r8, #0
 8017e20:	dd07      	ble.n	8017e32 <_strtod_l+0x782>
 8017e22:	4631      	mov	r1, r6
 8017e24:	9805      	ldr	r0, [sp, #20]
 8017e26:	4642      	mov	r2, r8
 8017e28:	f002 fcfc 	bl	801a824 <__lshift>
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	2800      	cmp	r0, #0
 8017e30:	d0d9      	beq.n	8017de6 <_strtod_l+0x736>
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	dd08      	ble.n	8017e4a <_strtod_l+0x79a>
 8017e38:	4629      	mov	r1, r5
 8017e3a:	9805      	ldr	r0, [sp, #20]
 8017e3c:	464a      	mov	r2, r9
 8017e3e:	f002 fcf1 	bl	801a824 <__lshift>
 8017e42:	4605      	mov	r5, r0
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f43f ae43 	beq.w	8017ad0 <_strtod_l+0x420>
 8017e4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017e4c:	9805      	ldr	r0, [sp, #20]
 8017e4e:	4632      	mov	r2, r6
 8017e50:	f002 fd70 	bl	801a934 <__mdiff>
 8017e54:	4604      	mov	r4, r0
 8017e56:	2800      	cmp	r0, #0
 8017e58:	f43f ae3a 	beq.w	8017ad0 <_strtod_l+0x420>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017e62:	60c3      	str	r3, [r0, #12]
 8017e64:	4629      	mov	r1, r5
 8017e66:	f002 fd49 	bl	801a8fc <__mcmp>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	da4e      	bge.n	8017f0c <_strtod_l+0x85c>
 8017e6e:	ea58 080a 	orrs.w	r8, r8, sl
 8017e72:	d174      	bne.n	8017f5e <_strtod_l+0x8ae>
 8017e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d170      	bne.n	8017f5e <_strtod_l+0x8ae>
 8017e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017e80:	0d1b      	lsrs	r3, r3, #20
 8017e82:	051b      	lsls	r3, r3, #20
 8017e84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017e88:	d969      	bls.n	8017f5e <_strtod_l+0x8ae>
 8017e8a:	6963      	ldr	r3, [r4, #20]
 8017e8c:	b913      	cbnz	r3, 8017e94 <_strtod_l+0x7e4>
 8017e8e:	6923      	ldr	r3, [r4, #16]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	dd64      	ble.n	8017f5e <_strtod_l+0x8ae>
 8017e94:	4621      	mov	r1, r4
 8017e96:	2201      	movs	r2, #1
 8017e98:	9805      	ldr	r0, [sp, #20]
 8017e9a:	f002 fcc3 	bl	801a824 <__lshift>
 8017e9e:	4629      	mov	r1, r5
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	f002 fd2b 	bl	801a8fc <__mcmp>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	dd59      	ble.n	8017f5e <_strtod_l+0x8ae>
 8017eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017eae:	9a06      	ldr	r2, [sp, #24]
 8017eb0:	0d1b      	lsrs	r3, r3, #20
 8017eb2:	051b      	lsls	r3, r3, #20
 8017eb4:	2a00      	cmp	r2, #0
 8017eb6:	d070      	beq.n	8017f9a <_strtod_l+0x8ea>
 8017eb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017ebc:	d86d      	bhi.n	8017f9a <_strtod_l+0x8ea>
 8017ebe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017ec2:	f67f ae99 	bls.w	8017bf8 <_strtod_l+0x548>
 8017ec6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017ef8 <_strtod_l+0x848>
 8017eca:	ec4b ab16 	vmov	d6, sl, fp
 8017ece:	4b0e      	ldr	r3, [pc, #56]	@ (8017f08 <_strtod_l+0x858>)
 8017ed0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017ed4:	ee17 2a90 	vmov	r2, s15
 8017ed8:	4013      	ands	r3, r2
 8017eda:	ec5b ab17 	vmov	sl, fp, d7
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	f47f ae01 	bne.w	8017ae6 <_strtod_l+0x436>
 8017ee4:	9a05      	ldr	r2, [sp, #20]
 8017ee6:	2322      	movs	r3, #34	@ 0x22
 8017ee8:	6013      	str	r3, [r2, #0]
 8017eea:	e5fc      	b.n	8017ae6 <_strtod_l+0x436>
 8017eec:	f3af 8000 	nop.w
 8017ef0:	ffc00000 	.word	0xffc00000
 8017ef4:	41dfffff 	.word	0x41dfffff
 8017ef8:	00000000 	.word	0x00000000
 8017efc:	39500000 	.word	0x39500000
 8017f00:	0801cc08 	.word	0x0801cc08
 8017f04:	fffffc02 	.word	0xfffffc02
 8017f08:	7ff00000 	.word	0x7ff00000
 8017f0c:	46d9      	mov	r9, fp
 8017f0e:	d15d      	bne.n	8017fcc <_strtod_l+0x91c>
 8017f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f14:	f1b8 0f00 	cmp.w	r8, #0
 8017f18:	d02a      	beq.n	8017f70 <_strtod_l+0x8c0>
 8017f1a:	4aab      	ldr	r2, [pc, #684]	@ (80181c8 <_strtod_l+0xb18>)
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	d12a      	bne.n	8017f76 <_strtod_l+0x8c6>
 8017f20:	9b06      	ldr	r3, [sp, #24]
 8017f22:	4652      	mov	r2, sl
 8017f24:	b1fb      	cbz	r3, 8017f66 <_strtod_l+0x8b6>
 8017f26:	4ba9      	ldr	r3, [pc, #676]	@ (80181cc <_strtod_l+0xb1c>)
 8017f28:	ea0b 0303 	and.w	r3, fp, r3
 8017f2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017f30:	f04f 31ff 	mov.w	r1, #4294967295
 8017f34:	d81a      	bhi.n	8017f6c <_strtod_l+0x8bc>
 8017f36:	0d1b      	lsrs	r3, r3, #20
 8017f38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d118      	bne.n	8017f76 <_strtod_l+0x8c6>
 8017f44:	4ba2      	ldr	r3, [pc, #648]	@ (80181d0 <_strtod_l+0xb20>)
 8017f46:	4599      	cmp	r9, r3
 8017f48:	d102      	bne.n	8017f50 <_strtod_l+0x8a0>
 8017f4a:	3201      	adds	r2, #1
 8017f4c:	f43f adc0 	beq.w	8017ad0 <_strtod_l+0x420>
 8017f50:	4b9e      	ldr	r3, [pc, #632]	@ (80181cc <_strtod_l+0xb1c>)
 8017f52:	ea09 0303 	and.w	r3, r9, r3
 8017f56:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8017f5a:	f04f 0a00 	mov.w	sl, #0
 8017f5e:	9b06      	ldr	r3, [sp, #24]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d1b0      	bne.n	8017ec6 <_strtod_l+0x816>
 8017f64:	e5bf      	b.n	8017ae6 <_strtod_l+0x436>
 8017f66:	f04f 33ff 	mov.w	r3, #4294967295
 8017f6a:	e7e9      	b.n	8017f40 <_strtod_l+0x890>
 8017f6c:	460b      	mov	r3, r1
 8017f6e:	e7e7      	b.n	8017f40 <_strtod_l+0x890>
 8017f70:	ea53 030a 	orrs.w	r3, r3, sl
 8017f74:	d099      	beq.n	8017eaa <_strtod_l+0x7fa>
 8017f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f78:	b1c3      	cbz	r3, 8017fac <_strtod_l+0x8fc>
 8017f7a:	ea13 0f09 	tst.w	r3, r9
 8017f7e:	d0ee      	beq.n	8017f5e <_strtod_l+0x8ae>
 8017f80:	9a06      	ldr	r2, [sp, #24]
 8017f82:	4650      	mov	r0, sl
 8017f84:	4659      	mov	r1, fp
 8017f86:	f1b8 0f00 	cmp.w	r8, #0
 8017f8a:	d013      	beq.n	8017fb4 <_strtod_l+0x904>
 8017f8c:	f7ff fb73 	bl	8017676 <sulp>
 8017f90:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017f94:	ec5b ab17 	vmov	sl, fp, d7
 8017f98:	e7e1      	b.n	8017f5e <_strtod_l+0x8ae>
 8017f9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017f9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017fa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017fa6:	f04f 3aff 	mov.w	sl, #4294967295
 8017faa:	e7d8      	b.n	8017f5e <_strtod_l+0x8ae>
 8017fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fae:	ea13 0f0a 	tst.w	r3, sl
 8017fb2:	e7e4      	b.n	8017f7e <_strtod_l+0x8ce>
 8017fb4:	f7ff fb5f 	bl	8017676 <sulp>
 8017fb8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8017fbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc4:	ec5b ab10 	vmov	sl, fp, d0
 8017fc8:	d1c9      	bne.n	8017f5e <_strtod_l+0x8ae>
 8017fca:	e615      	b.n	8017bf8 <_strtod_l+0x548>
 8017fcc:	4629      	mov	r1, r5
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f002 fe0c 	bl	801abec <__ratio>
 8017fd4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017fd8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe0:	d85d      	bhi.n	801809e <_strtod_l+0x9ee>
 8017fe2:	f1b8 0f00 	cmp.w	r8, #0
 8017fe6:	d164      	bne.n	80180b2 <_strtod_l+0xa02>
 8017fe8:	f1ba 0f00 	cmp.w	sl, #0
 8017fec:	d14b      	bne.n	8018086 <_strtod_l+0x9d6>
 8017fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ff2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d160      	bne.n	80180bc <_strtod_l+0xa0c>
 8017ffa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8017ffe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018006:	d401      	bmi.n	801800c <_strtod_l+0x95c>
 8018008:	ee20 8b08 	vmul.f64	d8, d0, d8
 801800c:	eeb1 ab48 	vneg.f64	d10, d8
 8018010:	486e      	ldr	r0, [pc, #440]	@ (80181cc <_strtod_l+0xb1c>)
 8018012:	4970      	ldr	r1, [pc, #448]	@ (80181d4 <_strtod_l+0xb24>)
 8018014:	ea09 0700 	and.w	r7, r9, r0
 8018018:	428f      	cmp	r7, r1
 801801a:	ec53 2b1a 	vmov	r2, r3, d10
 801801e:	d17d      	bne.n	801811c <_strtod_l+0xa6c>
 8018020:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8018024:	ec4b ab1c 	vmov	d12, sl, fp
 8018028:	eeb0 0b4c 	vmov.f64	d0, d12
 801802c:	f002 fd16 	bl	801aa5c <__ulp>
 8018030:	4866      	ldr	r0, [pc, #408]	@ (80181cc <_strtod_l+0xb1c>)
 8018032:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8018036:	ee1c 3a90 	vmov	r3, s25
 801803a:	4a67      	ldr	r2, [pc, #412]	@ (80181d8 <_strtod_l+0xb28>)
 801803c:	ea03 0100 	and.w	r1, r3, r0
 8018040:	4291      	cmp	r1, r2
 8018042:	ec5b ab1c 	vmov	sl, fp, d12
 8018046:	d93c      	bls.n	80180c2 <_strtod_l+0xa12>
 8018048:	ee19 2a90 	vmov	r2, s19
 801804c:	4b60      	ldr	r3, [pc, #384]	@ (80181d0 <_strtod_l+0xb20>)
 801804e:	429a      	cmp	r2, r3
 8018050:	d104      	bne.n	801805c <_strtod_l+0x9ac>
 8018052:	ee19 3a10 	vmov	r3, s18
 8018056:	3301      	adds	r3, #1
 8018058:	f43f ad3a 	beq.w	8017ad0 <_strtod_l+0x420>
 801805c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80181d0 <_strtod_l+0xb20>
 8018060:	f04f 3aff 	mov.w	sl, #4294967295
 8018064:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018066:	9805      	ldr	r0, [sp, #20]
 8018068:	f002 f9c4 	bl	801a3f4 <_Bfree>
 801806c:	9805      	ldr	r0, [sp, #20]
 801806e:	4631      	mov	r1, r6
 8018070:	f002 f9c0 	bl	801a3f4 <_Bfree>
 8018074:	9805      	ldr	r0, [sp, #20]
 8018076:	4629      	mov	r1, r5
 8018078:	f002 f9bc 	bl	801a3f4 <_Bfree>
 801807c:	9805      	ldr	r0, [sp, #20]
 801807e:	4621      	mov	r1, r4
 8018080:	f002 f9b8 	bl	801a3f4 <_Bfree>
 8018084:	e625      	b.n	8017cd2 <_strtod_l+0x622>
 8018086:	f1ba 0f01 	cmp.w	sl, #1
 801808a:	d103      	bne.n	8018094 <_strtod_l+0x9e4>
 801808c:	f1bb 0f00 	cmp.w	fp, #0
 8018090:	f43f adb2 	beq.w	8017bf8 <_strtod_l+0x548>
 8018094:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018098:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801809c:	e7b8      	b.n	8018010 <_strtod_l+0x960>
 801809e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80180a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80180a6:	f1b8 0f00 	cmp.w	r8, #0
 80180aa:	d0af      	beq.n	801800c <_strtod_l+0x95c>
 80180ac:	eeb0 ab48 	vmov.f64	d10, d8
 80180b0:	e7ae      	b.n	8018010 <_strtod_l+0x960>
 80180b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80180b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80180ba:	e7a9      	b.n	8018010 <_strtod_l+0x960>
 80180bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80180c0:	e7a6      	b.n	8018010 <_strtod_l+0x960>
 80180c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80180c6:	9b06      	ldr	r3, [sp, #24]
 80180c8:	46d9      	mov	r9, fp
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d1ca      	bne.n	8018064 <_strtod_l+0x9b4>
 80180ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80180d2:	0d1b      	lsrs	r3, r3, #20
 80180d4:	051b      	lsls	r3, r3, #20
 80180d6:	429f      	cmp	r7, r3
 80180d8:	d1c4      	bne.n	8018064 <_strtod_l+0x9b4>
 80180da:	ec51 0b18 	vmov	r0, r1, d8
 80180de:	f7e8 fb53 	bl	8000788 <__aeabi_d2lz>
 80180e2:	f7e8 fb0b 	bl	80006fc <__aeabi_l2d>
 80180e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80180ea:	ec41 0b17 	vmov	d7, r0, r1
 80180ee:	ea49 090a 	orr.w	r9, r9, sl
 80180f2:	ea59 0908 	orrs.w	r9, r9, r8
 80180f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80180fa:	d03c      	beq.n	8018176 <_strtod_l+0xac6>
 80180fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80181b0 <_strtod_l+0xb00>
 8018100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018108:	f53f aced 	bmi.w	8017ae6 <_strtod_l+0x436>
 801810c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80181b8 <_strtod_l+0xb08>
 8018110:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018118:	dda4      	ble.n	8018064 <_strtod_l+0x9b4>
 801811a:	e4e4      	b.n	8017ae6 <_strtod_l+0x436>
 801811c:	9906      	ldr	r1, [sp, #24]
 801811e:	b1e1      	cbz	r1, 801815a <_strtod_l+0xaaa>
 8018120:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8018124:	d819      	bhi.n	801815a <_strtod_l+0xaaa>
 8018126:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801812a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801812e:	d811      	bhi.n	8018154 <_strtod_l+0xaa4>
 8018130:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018134:	ee18 3a10 	vmov	r3, s16
 8018138:	2b01      	cmp	r3, #1
 801813a:	bf38      	it	cc
 801813c:	2301      	movcc	r3, #1
 801813e:	ee08 3a10 	vmov	s16, r3
 8018142:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018146:	f1b8 0f00 	cmp.w	r8, #0
 801814a:	d111      	bne.n	8018170 <_strtod_l+0xac0>
 801814c:	eeb1 7b48 	vneg.f64	d7, d8
 8018150:	ec53 2b17 	vmov	r2, r3, d7
 8018154:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018158:	1bcb      	subs	r3, r1, r7
 801815a:	eeb0 0b49 	vmov.f64	d0, d9
 801815e:	ec43 2b1a 	vmov	d10, r2, r3
 8018162:	f002 fc7b 	bl	801aa5c <__ulp>
 8018166:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801816a:	ec5b ab19 	vmov	sl, fp, d9
 801816e:	e7aa      	b.n	80180c6 <_strtod_l+0xa16>
 8018170:	eeb0 7b48 	vmov.f64	d7, d8
 8018174:	e7ec      	b.n	8018150 <_strtod_l+0xaa0>
 8018176:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80181c0 <_strtod_l+0xb10>
 801817a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801817e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018182:	f57f af6f 	bpl.w	8018064 <_strtod_l+0x9b4>
 8018186:	e4ae      	b.n	8017ae6 <_strtod_l+0x436>
 8018188:	2300      	movs	r3, #0
 801818a:	9308      	str	r3, [sp, #32]
 801818c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801818e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018190:	6013      	str	r3, [r2, #0]
 8018192:	f7ff bacc 	b.w	801772e <_strtod_l+0x7e>
 8018196:	2a65      	cmp	r2, #101	@ 0x65
 8018198:	f43f abbc 	beq.w	8017914 <_strtod_l+0x264>
 801819c:	2a45      	cmp	r2, #69	@ 0x45
 801819e:	f43f abb9 	beq.w	8017914 <_strtod_l+0x264>
 80181a2:	2301      	movs	r3, #1
 80181a4:	9306      	str	r3, [sp, #24]
 80181a6:	f7ff bbf0 	b.w	801798a <_strtod_l+0x2da>
 80181aa:	bf00      	nop
 80181ac:	f3af 8000 	nop.w
 80181b0:	94a03595 	.word	0x94a03595
 80181b4:	3fdfffff 	.word	0x3fdfffff
 80181b8:	35afe535 	.word	0x35afe535
 80181bc:	3fe00000 	.word	0x3fe00000
 80181c0:	94a03595 	.word	0x94a03595
 80181c4:	3fcfffff 	.word	0x3fcfffff
 80181c8:	000fffff 	.word	0x000fffff
 80181cc:	7ff00000 	.word	0x7ff00000
 80181d0:	7fefffff 	.word	0x7fefffff
 80181d4:	7fe00000 	.word	0x7fe00000
 80181d8:	7c9fffff 	.word	0x7c9fffff

080181dc <strtod>:
 80181dc:	460a      	mov	r2, r1
 80181de:	4601      	mov	r1, r0
 80181e0:	4802      	ldr	r0, [pc, #8]	@ (80181ec <strtod+0x10>)
 80181e2:	4b03      	ldr	r3, [pc, #12]	@ (80181f0 <strtod+0x14>)
 80181e4:	6800      	ldr	r0, [r0, #0]
 80181e6:	f7ff ba63 	b.w	80176b0 <_strtod_l>
 80181ea:	bf00      	nop
 80181ec:	2400027c 	.word	0x2400027c
 80181f0:	24000110 	.word	0x24000110

080181f4 <_strtol_l.constprop.0>:
 80181f4:	2b24      	cmp	r3, #36	@ 0x24
 80181f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181fa:	4686      	mov	lr, r0
 80181fc:	4690      	mov	r8, r2
 80181fe:	d801      	bhi.n	8018204 <_strtol_l.constprop.0+0x10>
 8018200:	2b01      	cmp	r3, #1
 8018202:	d106      	bne.n	8018212 <_strtol_l.constprop.0+0x1e>
 8018204:	f000 fe46 	bl	8018e94 <__errno>
 8018208:	2316      	movs	r3, #22
 801820a:	6003      	str	r3, [r0, #0]
 801820c:	2000      	movs	r0, #0
 801820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018212:	4834      	ldr	r0, [pc, #208]	@ (80182e4 <_strtol_l.constprop.0+0xf0>)
 8018214:	460d      	mov	r5, r1
 8018216:	462a      	mov	r2, r5
 8018218:	f815 4b01 	ldrb.w	r4, [r5], #1
 801821c:	5d06      	ldrb	r6, [r0, r4]
 801821e:	f016 0608 	ands.w	r6, r6, #8
 8018222:	d1f8      	bne.n	8018216 <_strtol_l.constprop.0+0x22>
 8018224:	2c2d      	cmp	r4, #45	@ 0x2d
 8018226:	d12d      	bne.n	8018284 <_strtol_l.constprop.0+0x90>
 8018228:	782c      	ldrb	r4, [r5, #0]
 801822a:	2601      	movs	r6, #1
 801822c:	1c95      	adds	r5, r2, #2
 801822e:	f033 0210 	bics.w	r2, r3, #16
 8018232:	d109      	bne.n	8018248 <_strtol_l.constprop.0+0x54>
 8018234:	2c30      	cmp	r4, #48	@ 0x30
 8018236:	d12a      	bne.n	801828e <_strtol_l.constprop.0+0x9a>
 8018238:	782a      	ldrb	r2, [r5, #0]
 801823a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801823e:	2a58      	cmp	r2, #88	@ 0x58
 8018240:	d125      	bne.n	801828e <_strtol_l.constprop.0+0x9a>
 8018242:	786c      	ldrb	r4, [r5, #1]
 8018244:	2310      	movs	r3, #16
 8018246:	3502      	adds	r5, #2
 8018248:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801824c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018250:	2200      	movs	r2, #0
 8018252:	fbbc f9f3 	udiv	r9, ip, r3
 8018256:	4610      	mov	r0, r2
 8018258:	fb03 ca19 	mls	sl, r3, r9, ip
 801825c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018260:	2f09      	cmp	r7, #9
 8018262:	d81b      	bhi.n	801829c <_strtol_l.constprop.0+0xa8>
 8018264:	463c      	mov	r4, r7
 8018266:	42a3      	cmp	r3, r4
 8018268:	dd27      	ble.n	80182ba <_strtol_l.constprop.0+0xc6>
 801826a:	1c57      	adds	r7, r2, #1
 801826c:	d007      	beq.n	801827e <_strtol_l.constprop.0+0x8a>
 801826e:	4581      	cmp	r9, r0
 8018270:	d320      	bcc.n	80182b4 <_strtol_l.constprop.0+0xc0>
 8018272:	d101      	bne.n	8018278 <_strtol_l.constprop.0+0x84>
 8018274:	45a2      	cmp	sl, r4
 8018276:	db1d      	blt.n	80182b4 <_strtol_l.constprop.0+0xc0>
 8018278:	fb00 4003 	mla	r0, r0, r3, r4
 801827c:	2201      	movs	r2, #1
 801827e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018282:	e7eb      	b.n	801825c <_strtol_l.constprop.0+0x68>
 8018284:	2c2b      	cmp	r4, #43	@ 0x2b
 8018286:	bf04      	itt	eq
 8018288:	782c      	ldrbeq	r4, [r5, #0]
 801828a:	1c95      	addeq	r5, r2, #2
 801828c:	e7cf      	b.n	801822e <_strtol_l.constprop.0+0x3a>
 801828e:	2b00      	cmp	r3, #0
 8018290:	d1da      	bne.n	8018248 <_strtol_l.constprop.0+0x54>
 8018292:	2c30      	cmp	r4, #48	@ 0x30
 8018294:	bf0c      	ite	eq
 8018296:	2308      	moveq	r3, #8
 8018298:	230a      	movne	r3, #10
 801829a:	e7d5      	b.n	8018248 <_strtol_l.constprop.0+0x54>
 801829c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80182a0:	2f19      	cmp	r7, #25
 80182a2:	d801      	bhi.n	80182a8 <_strtol_l.constprop.0+0xb4>
 80182a4:	3c37      	subs	r4, #55	@ 0x37
 80182a6:	e7de      	b.n	8018266 <_strtol_l.constprop.0+0x72>
 80182a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80182ac:	2f19      	cmp	r7, #25
 80182ae:	d804      	bhi.n	80182ba <_strtol_l.constprop.0+0xc6>
 80182b0:	3c57      	subs	r4, #87	@ 0x57
 80182b2:	e7d8      	b.n	8018266 <_strtol_l.constprop.0+0x72>
 80182b4:	f04f 32ff 	mov.w	r2, #4294967295
 80182b8:	e7e1      	b.n	801827e <_strtol_l.constprop.0+0x8a>
 80182ba:	1c53      	adds	r3, r2, #1
 80182bc:	d108      	bne.n	80182d0 <_strtol_l.constprop.0+0xdc>
 80182be:	2322      	movs	r3, #34	@ 0x22
 80182c0:	f8ce 3000 	str.w	r3, [lr]
 80182c4:	4660      	mov	r0, ip
 80182c6:	f1b8 0f00 	cmp.w	r8, #0
 80182ca:	d0a0      	beq.n	801820e <_strtol_l.constprop.0+0x1a>
 80182cc:	1e69      	subs	r1, r5, #1
 80182ce:	e006      	b.n	80182de <_strtol_l.constprop.0+0xea>
 80182d0:	b106      	cbz	r6, 80182d4 <_strtol_l.constprop.0+0xe0>
 80182d2:	4240      	negs	r0, r0
 80182d4:	f1b8 0f00 	cmp.w	r8, #0
 80182d8:	d099      	beq.n	801820e <_strtol_l.constprop.0+0x1a>
 80182da:	2a00      	cmp	r2, #0
 80182dc:	d1f6      	bne.n	80182cc <_strtol_l.constprop.0+0xd8>
 80182de:	f8c8 1000 	str.w	r1, [r8]
 80182e2:	e794      	b.n	801820e <_strtol_l.constprop.0+0x1a>
 80182e4:	0801cc31 	.word	0x0801cc31

080182e8 <strtol>:
 80182e8:	4613      	mov	r3, r2
 80182ea:	460a      	mov	r2, r1
 80182ec:	4601      	mov	r1, r0
 80182ee:	4802      	ldr	r0, [pc, #8]	@ (80182f8 <strtol+0x10>)
 80182f0:	6800      	ldr	r0, [r0, #0]
 80182f2:	f7ff bf7f 	b.w	80181f4 <_strtol_l.constprop.0>
 80182f6:	bf00      	nop
 80182f8:	2400027c 	.word	0x2400027c

080182fc <__cvt>:
 80182fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182fe:	ed2d 8b02 	vpush	{d8}
 8018302:	eeb0 8b40 	vmov.f64	d8, d0
 8018306:	b085      	sub	sp, #20
 8018308:	4617      	mov	r7, r2
 801830a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801830c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801830e:	ee18 2a90 	vmov	r2, s17
 8018312:	f025 0520 	bic.w	r5, r5, #32
 8018316:	2a00      	cmp	r2, #0
 8018318:	bfb6      	itet	lt
 801831a:	222d      	movlt	r2, #45	@ 0x2d
 801831c:	2200      	movge	r2, #0
 801831e:	eeb1 8b40 	vneglt.f64	d8, d0
 8018322:	2d46      	cmp	r5, #70	@ 0x46
 8018324:	460c      	mov	r4, r1
 8018326:	701a      	strb	r2, [r3, #0]
 8018328:	d004      	beq.n	8018334 <__cvt+0x38>
 801832a:	2d45      	cmp	r5, #69	@ 0x45
 801832c:	d100      	bne.n	8018330 <__cvt+0x34>
 801832e:	3401      	adds	r4, #1
 8018330:	2102      	movs	r1, #2
 8018332:	e000      	b.n	8018336 <__cvt+0x3a>
 8018334:	2103      	movs	r1, #3
 8018336:	ab03      	add	r3, sp, #12
 8018338:	9301      	str	r3, [sp, #4]
 801833a:	ab02      	add	r3, sp, #8
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	4622      	mov	r2, r4
 8018340:	4633      	mov	r3, r6
 8018342:	eeb0 0b48 	vmov.f64	d0, d8
 8018346:	f000 fe73 	bl	8019030 <_dtoa_r>
 801834a:	2d47      	cmp	r5, #71	@ 0x47
 801834c:	d114      	bne.n	8018378 <__cvt+0x7c>
 801834e:	07fb      	lsls	r3, r7, #31
 8018350:	d50a      	bpl.n	8018368 <__cvt+0x6c>
 8018352:	1902      	adds	r2, r0, r4
 8018354:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801835c:	bf08      	it	eq
 801835e:	9203      	streq	r2, [sp, #12]
 8018360:	2130      	movs	r1, #48	@ 0x30
 8018362:	9b03      	ldr	r3, [sp, #12]
 8018364:	4293      	cmp	r3, r2
 8018366:	d319      	bcc.n	801839c <__cvt+0xa0>
 8018368:	9b03      	ldr	r3, [sp, #12]
 801836a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801836c:	1a1b      	subs	r3, r3, r0
 801836e:	6013      	str	r3, [r2, #0]
 8018370:	b005      	add	sp, #20
 8018372:	ecbd 8b02 	vpop	{d8}
 8018376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018378:	2d46      	cmp	r5, #70	@ 0x46
 801837a:	eb00 0204 	add.w	r2, r0, r4
 801837e:	d1e9      	bne.n	8018354 <__cvt+0x58>
 8018380:	7803      	ldrb	r3, [r0, #0]
 8018382:	2b30      	cmp	r3, #48	@ 0x30
 8018384:	d107      	bne.n	8018396 <__cvt+0x9a>
 8018386:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838e:	bf1c      	itt	ne
 8018390:	f1c4 0401 	rsbne	r4, r4, #1
 8018394:	6034      	strne	r4, [r6, #0]
 8018396:	6833      	ldr	r3, [r6, #0]
 8018398:	441a      	add	r2, r3
 801839a:	e7db      	b.n	8018354 <__cvt+0x58>
 801839c:	1c5c      	adds	r4, r3, #1
 801839e:	9403      	str	r4, [sp, #12]
 80183a0:	7019      	strb	r1, [r3, #0]
 80183a2:	e7de      	b.n	8018362 <__cvt+0x66>

080183a4 <__exponent>:
 80183a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183a6:	2900      	cmp	r1, #0
 80183a8:	bfba      	itte	lt
 80183aa:	4249      	neglt	r1, r1
 80183ac:	232d      	movlt	r3, #45	@ 0x2d
 80183ae:	232b      	movge	r3, #43	@ 0x2b
 80183b0:	2909      	cmp	r1, #9
 80183b2:	7002      	strb	r2, [r0, #0]
 80183b4:	7043      	strb	r3, [r0, #1]
 80183b6:	dd29      	ble.n	801840c <__exponent+0x68>
 80183b8:	f10d 0307 	add.w	r3, sp, #7
 80183bc:	461d      	mov	r5, r3
 80183be:	270a      	movs	r7, #10
 80183c0:	461a      	mov	r2, r3
 80183c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80183c6:	fb07 1416 	mls	r4, r7, r6, r1
 80183ca:	3430      	adds	r4, #48	@ 0x30
 80183cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80183d0:	460c      	mov	r4, r1
 80183d2:	2c63      	cmp	r4, #99	@ 0x63
 80183d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80183d8:	4631      	mov	r1, r6
 80183da:	dcf1      	bgt.n	80183c0 <__exponent+0x1c>
 80183dc:	3130      	adds	r1, #48	@ 0x30
 80183de:	1e94      	subs	r4, r2, #2
 80183e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80183e4:	1c41      	adds	r1, r0, #1
 80183e6:	4623      	mov	r3, r4
 80183e8:	42ab      	cmp	r3, r5
 80183ea:	d30a      	bcc.n	8018402 <__exponent+0x5e>
 80183ec:	f10d 0309 	add.w	r3, sp, #9
 80183f0:	1a9b      	subs	r3, r3, r2
 80183f2:	42ac      	cmp	r4, r5
 80183f4:	bf88      	it	hi
 80183f6:	2300      	movhi	r3, #0
 80183f8:	3302      	adds	r3, #2
 80183fa:	4403      	add	r3, r0
 80183fc:	1a18      	subs	r0, r3, r0
 80183fe:	b003      	add	sp, #12
 8018400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018402:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018406:	f801 6f01 	strb.w	r6, [r1, #1]!
 801840a:	e7ed      	b.n	80183e8 <__exponent+0x44>
 801840c:	2330      	movs	r3, #48	@ 0x30
 801840e:	3130      	adds	r1, #48	@ 0x30
 8018410:	7083      	strb	r3, [r0, #2]
 8018412:	70c1      	strb	r1, [r0, #3]
 8018414:	1d03      	adds	r3, r0, #4
 8018416:	e7f1      	b.n	80183fc <__exponent+0x58>

08018418 <_printf_float>:
 8018418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801841c:	b08d      	sub	sp, #52	@ 0x34
 801841e:	460c      	mov	r4, r1
 8018420:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018424:	4616      	mov	r6, r2
 8018426:	461f      	mov	r7, r3
 8018428:	4605      	mov	r5, r0
 801842a:	f000 fce9 	bl	8018e00 <_localeconv_r>
 801842e:	f8d0 b000 	ldr.w	fp, [r0]
 8018432:	4658      	mov	r0, fp
 8018434:	f7e7 ffcc 	bl	80003d0 <strlen>
 8018438:	2300      	movs	r3, #0
 801843a:	930a      	str	r3, [sp, #40]	@ 0x28
 801843c:	f8d8 3000 	ldr.w	r3, [r8]
 8018440:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018444:	6822      	ldr	r2, [r4, #0]
 8018446:	9005      	str	r0, [sp, #20]
 8018448:	3307      	adds	r3, #7
 801844a:	f023 0307 	bic.w	r3, r3, #7
 801844e:	f103 0108 	add.w	r1, r3, #8
 8018452:	f8c8 1000 	str.w	r1, [r8]
 8018456:	ed93 0b00 	vldr	d0, [r3]
 801845a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80186b8 <_printf_float+0x2a0>
 801845e:	eeb0 7bc0 	vabs.f64	d7, d0
 8018462:	eeb4 7b46 	vcmp.f64	d7, d6
 8018466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801846a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801846e:	dd24      	ble.n	80184ba <_printf_float+0xa2>
 8018470:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018478:	d502      	bpl.n	8018480 <_printf_float+0x68>
 801847a:	232d      	movs	r3, #45	@ 0x2d
 801847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018480:	498f      	ldr	r1, [pc, #572]	@ (80186c0 <_printf_float+0x2a8>)
 8018482:	4b90      	ldr	r3, [pc, #576]	@ (80186c4 <_printf_float+0x2ac>)
 8018484:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8018488:	bf94      	ite	ls
 801848a:	4688      	movls	r8, r1
 801848c:	4698      	movhi	r8, r3
 801848e:	f022 0204 	bic.w	r2, r2, #4
 8018492:	2303      	movs	r3, #3
 8018494:	6123      	str	r3, [r4, #16]
 8018496:	6022      	str	r2, [r4, #0]
 8018498:	f04f 0a00 	mov.w	sl, #0
 801849c:	9700      	str	r7, [sp, #0]
 801849e:	4633      	mov	r3, r6
 80184a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80184a2:	4621      	mov	r1, r4
 80184a4:	4628      	mov	r0, r5
 80184a6:	f000 f9d1 	bl	801884c <_printf_common>
 80184aa:	3001      	adds	r0, #1
 80184ac:	f040 8089 	bne.w	80185c2 <_printf_float+0x1aa>
 80184b0:	f04f 30ff 	mov.w	r0, #4294967295
 80184b4:	b00d      	add	sp, #52	@ 0x34
 80184b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80184be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184c2:	d709      	bvc.n	80184d8 <_printf_float+0xc0>
 80184c4:	ee10 3a90 	vmov	r3, s1
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	bfbc      	itt	lt
 80184cc:	232d      	movlt	r3, #45	@ 0x2d
 80184ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80184d2:	497d      	ldr	r1, [pc, #500]	@ (80186c8 <_printf_float+0x2b0>)
 80184d4:	4b7d      	ldr	r3, [pc, #500]	@ (80186cc <_printf_float+0x2b4>)
 80184d6:	e7d5      	b.n	8018484 <_printf_float+0x6c>
 80184d8:	6863      	ldr	r3, [r4, #4]
 80184da:	1c59      	adds	r1, r3, #1
 80184dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80184e0:	d139      	bne.n	8018556 <_printf_float+0x13e>
 80184e2:	2306      	movs	r3, #6
 80184e4:	6063      	str	r3, [r4, #4]
 80184e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80184ea:	2300      	movs	r3, #0
 80184ec:	6022      	str	r2, [r4, #0]
 80184ee:	9303      	str	r3, [sp, #12]
 80184f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80184f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80184f6:	ab09      	add	r3, sp, #36	@ 0x24
 80184f8:	9300      	str	r3, [sp, #0]
 80184fa:	6861      	ldr	r1, [r4, #4]
 80184fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018500:	4628      	mov	r0, r5
 8018502:	f7ff fefb 	bl	80182fc <__cvt>
 8018506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801850a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801850c:	4680      	mov	r8, r0
 801850e:	d129      	bne.n	8018564 <_printf_float+0x14c>
 8018510:	1cc8      	adds	r0, r1, #3
 8018512:	db02      	blt.n	801851a <_printf_float+0x102>
 8018514:	6863      	ldr	r3, [r4, #4]
 8018516:	4299      	cmp	r1, r3
 8018518:	dd41      	ble.n	801859e <_printf_float+0x186>
 801851a:	f1a9 0902 	sub.w	r9, r9, #2
 801851e:	fa5f f989 	uxtb.w	r9, r9
 8018522:	3901      	subs	r1, #1
 8018524:	464a      	mov	r2, r9
 8018526:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801852a:	9109      	str	r1, [sp, #36]	@ 0x24
 801852c:	f7ff ff3a 	bl	80183a4 <__exponent>
 8018530:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018532:	1813      	adds	r3, r2, r0
 8018534:	2a01      	cmp	r2, #1
 8018536:	4682      	mov	sl, r0
 8018538:	6123      	str	r3, [r4, #16]
 801853a:	dc02      	bgt.n	8018542 <_printf_float+0x12a>
 801853c:	6822      	ldr	r2, [r4, #0]
 801853e:	07d2      	lsls	r2, r2, #31
 8018540:	d501      	bpl.n	8018546 <_printf_float+0x12e>
 8018542:	3301      	adds	r3, #1
 8018544:	6123      	str	r3, [r4, #16]
 8018546:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801854a:	2b00      	cmp	r3, #0
 801854c:	d0a6      	beq.n	801849c <_printf_float+0x84>
 801854e:	232d      	movs	r3, #45	@ 0x2d
 8018550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018554:	e7a2      	b.n	801849c <_printf_float+0x84>
 8018556:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801855a:	d1c4      	bne.n	80184e6 <_printf_float+0xce>
 801855c:	2b00      	cmp	r3, #0
 801855e:	d1c2      	bne.n	80184e6 <_printf_float+0xce>
 8018560:	2301      	movs	r3, #1
 8018562:	e7bf      	b.n	80184e4 <_printf_float+0xcc>
 8018564:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018568:	d9db      	bls.n	8018522 <_printf_float+0x10a>
 801856a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801856e:	d118      	bne.n	80185a2 <_printf_float+0x18a>
 8018570:	2900      	cmp	r1, #0
 8018572:	6863      	ldr	r3, [r4, #4]
 8018574:	dd0b      	ble.n	801858e <_printf_float+0x176>
 8018576:	6121      	str	r1, [r4, #16]
 8018578:	b913      	cbnz	r3, 8018580 <_printf_float+0x168>
 801857a:	6822      	ldr	r2, [r4, #0]
 801857c:	07d0      	lsls	r0, r2, #31
 801857e:	d502      	bpl.n	8018586 <_printf_float+0x16e>
 8018580:	3301      	adds	r3, #1
 8018582:	440b      	add	r3, r1
 8018584:	6123      	str	r3, [r4, #16]
 8018586:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018588:	f04f 0a00 	mov.w	sl, #0
 801858c:	e7db      	b.n	8018546 <_printf_float+0x12e>
 801858e:	b913      	cbnz	r3, 8018596 <_printf_float+0x17e>
 8018590:	6822      	ldr	r2, [r4, #0]
 8018592:	07d2      	lsls	r2, r2, #31
 8018594:	d501      	bpl.n	801859a <_printf_float+0x182>
 8018596:	3302      	adds	r3, #2
 8018598:	e7f4      	b.n	8018584 <_printf_float+0x16c>
 801859a:	2301      	movs	r3, #1
 801859c:	e7f2      	b.n	8018584 <_printf_float+0x16c>
 801859e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80185a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80185a4:	4299      	cmp	r1, r3
 80185a6:	db05      	blt.n	80185b4 <_printf_float+0x19c>
 80185a8:	6823      	ldr	r3, [r4, #0]
 80185aa:	6121      	str	r1, [r4, #16]
 80185ac:	07d8      	lsls	r0, r3, #31
 80185ae:	d5ea      	bpl.n	8018586 <_printf_float+0x16e>
 80185b0:	1c4b      	adds	r3, r1, #1
 80185b2:	e7e7      	b.n	8018584 <_printf_float+0x16c>
 80185b4:	2900      	cmp	r1, #0
 80185b6:	bfd4      	ite	le
 80185b8:	f1c1 0202 	rsble	r2, r1, #2
 80185bc:	2201      	movgt	r2, #1
 80185be:	4413      	add	r3, r2
 80185c0:	e7e0      	b.n	8018584 <_printf_float+0x16c>
 80185c2:	6823      	ldr	r3, [r4, #0]
 80185c4:	055a      	lsls	r2, r3, #21
 80185c6:	d407      	bmi.n	80185d8 <_printf_float+0x1c0>
 80185c8:	6923      	ldr	r3, [r4, #16]
 80185ca:	4642      	mov	r2, r8
 80185cc:	4631      	mov	r1, r6
 80185ce:	4628      	mov	r0, r5
 80185d0:	47b8      	blx	r7
 80185d2:	3001      	adds	r0, #1
 80185d4:	d12a      	bne.n	801862c <_printf_float+0x214>
 80185d6:	e76b      	b.n	80184b0 <_printf_float+0x98>
 80185d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80185dc:	f240 80e0 	bls.w	80187a0 <_printf_float+0x388>
 80185e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80185e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80185e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ec:	d133      	bne.n	8018656 <_printf_float+0x23e>
 80185ee:	4a38      	ldr	r2, [pc, #224]	@ (80186d0 <_printf_float+0x2b8>)
 80185f0:	2301      	movs	r3, #1
 80185f2:	4631      	mov	r1, r6
 80185f4:	4628      	mov	r0, r5
 80185f6:	47b8      	blx	r7
 80185f8:	3001      	adds	r0, #1
 80185fa:	f43f af59 	beq.w	80184b0 <_printf_float+0x98>
 80185fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018602:	4543      	cmp	r3, r8
 8018604:	db02      	blt.n	801860c <_printf_float+0x1f4>
 8018606:	6823      	ldr	r3, [r4, #0]
 8018608:	07d8      	lsls	r0, r3, #31
 801860a:	d50f      	bpl.n	801862c <_printf_float+0x214>
 801860c:	9b05      	ldr	r3, [sp, #20]
 801860e:	465a      	mov	r2, fp
 8018610:	4631      	mov	r1, r6
 8018612:	4628      	mov	r0, r5
 8018614:	47b8      	blx	r7
 8018616:	3001      	adds	r0, #1
 8018618:	f43f af4a 	beq.w	80184b0 <_printf_float+0x98>
 801861c:	f04f 0900 	mov.w	r9, #0
 8018620:	f108 38ff 	add.w	r8, r8, #4294967295
 8018624:	f104 0a1a 	add.w	sl, r4, #26
 8018628:	45c8      	cmp	r8, r9
 801862a:	dc09      	bgt.n	8018640 <_printf_float+0x228>
 801862c:	6823      	ldr	r3, [r4, #0]
 801862e:	079b      	lsls	r3, r3, #30
 8018630:	f100 8107 	bmi.w	8018842 <_printf_float+0x42a>
 8018634:	68e0      	ldr	r0, [r4, #12]
 8018636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018638:	4298      	cmp	r0, r3
 801863a:	bfb8      	it	lt
 801863c:	4618      	movlt	r0, r3
 801863e:	e739      	b.n	80184b4 <_printf_float+0x9c>
 8018640:	2301      	movs	r3, #1
 8018642:	4652      	mov	r2, sl
 8018644:	4631      	mov	r1, r6
 8018646:	4628      	mov	r0, r5
 8018648:	47b8      	blx	r7
 801864a:	3001      	adds	r0, #1
 801864c:	f43f af30 	beq.w	80184b0 <_printf_float+0x98>
 8018650:	f109 0901 	add.w	r9, r9, #1
 8018654:	e7e8      	b.n	8018628 <_printf_float+0x210>
 8018656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018658:	2b00      	cmp	r3, #0
 801865a:	dc3b      	bgt.n	80186d4 <_printf_float+0x2bc>
 801865c:	4a1c      	ldr	r2, [pc, #112]	@ (80186d0 <_printf_float+0x2b8>)
 801865e:	2301      	movs	r3, #1
 8018660:	4631      	mov	r1, r6
 8018662:	4628      	mov	r0, r5
 8018664:	47b8      	blx	r7
 8018666:	3001      	adds	r0, #1
 8018668:	f43f af22 	beq.w	80184b0 <_printf_float+0x98>
 801866c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018670:	ea59 0303 	orrs.w	r3, r9, r3
 8018674:	d102      	bne.n	801867c <_printf_float+0x264>
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	07d9      	lsls	r1, r3, #31
 801867a:	d5d7      	bpl.n	801862c <_printf_float+0x214>
 801867c:	9b05      	ldr	r3, [sp, #20]
 801867e:	465a      	mov	r2, fp
 8018680:	4631      	mov	r1, r6
 8018682:	4628      	mov	r0, r5
 8018684:	47b8      	blx	r7
 8018686:	3001      	adds	r0, #1
 8018688:	f43f af12 	beq.w	80184b0 <_printf_float+0x98>
 801868c:	f04f 0a00 	mov.w	sl, #0
 8018690:	f104 0b1a 	add.w	fp, r4, #26
 8018694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018696:	425b      	negs	r3, r3
 8018698:	4553      	cmp	r3, sl
 801869a:	dc01      	bgt.n	80186a0 <_printf_float+0x288>
 801869c:	464b      	mov	r3, r9
 801869e:	e794      	b.n	80185ca <_printf_float+0x1b2>
 80186a0:	2301      	movs	r3, #1
 80186a2:	465a      	mov	r2, fp
 80186a4:	4631      	mov	r1, r6
 80186a6:	4628      	mov	r0, r5
 80186a8:	47b8      	blx	r7
 80186aa:	3001      	adds	r0, #1
 80186ac:	f43f af00 	beq.w	80184b0 <_printf_float+0x98>
 80186b0:	f10a 0a01 	add.w	sl, sl, #1
 80186b4:	e7ee      	b.n	8018694 <_printf_float+0x27c>
 80186b6:	bf00      	nop
 80186b8:	ffffffff 	.word	0xffffffff
 80186bc:	7fefffff 	.word	0x7fefffff
 80186c0:	0801cd31 	.word	0x0801cd31
 80186c4:	0801cd35 	.word	0x0801cd35
 80186c8:	0801cd39 	.word	0x0801cd39
 80186cc:	0801cd3d 	.word	0x0801cd3d
 80186d0:	0801cd41 	.word	0x0801cd41
 80186d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80186d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80186da:	4553      	cmp	r3, sl
 80186dc:	bfa8      	it	ge
 80186de:	4653      	movge	r3, sl
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	4699      	mov	r9, r3
 80186e4:	dc37      	bgt.n	8018756 <_printf_float+0x33e>
 80186e6:	2300      	movs	r3, #0
 80186e8:	9307      	str	r3, [sp, #28]
 80186ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80186ee:	f104 021a 	add.w	r2, r4, #26
 80186f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80186f4:	9907      	ldr	r1, [sp, #28]
 80186f6:	9306      	str	r3, [sp, #24]
 80186f8:	eba3 0309 	sub.w	r3, r3, r9
 80186fc:	428b      	cmp	r3, r1
 80186fe:	dc31      	bgt.n	8018764 <_printf_float+0x34c>
 8018700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018702:	459a      	cmp	sl, r3
 8018704:	dc3b      	bgt.n	801877e <_printf_float+0x366>
 8018706:	6823      	ldr	r3, [r4, #0]
 8018708:	07da      	lsls	r2, r3, #31
 801870a:	d438      	bmi.n	801877e <_printf_float+0x366>
 801870c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801870e:	ebaa 0903 	sub.w	r9, sl, r3
 8018712:	9b06      	ldr	r3, [sp, #24]
 8018714:	ebaa 0303 	sub.w	r3, sl, r3
 8018718:	4599      	cmp	r9, r3
 801871a:	bfa8      	it	ge
 801871c:	4699      	movge	r9, r3
 801871e:	f1b9 0f00 	cmp.w	r9, #0
 8018722:	dc34      	bgt.n	801878e <_printf_float+0x376>
 8018724:	f04f 0800 	mov.w	r8, #0
 8018728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801872c:	f104 0b1a 	add.w	fp, r4, #26
 8018730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018732:	ebaa 0303 	sub.w	r3, sl, r3
 8018736:	eba3 0309 	sub.w	r3, r3, r9
 801873a:	4543      	cmp	r3, r8
 801873c:	f77f af76 	ble.w	801862c <_printf_float+0x214>
 8018740:	2301      	movs	r3, #1
 8018742:	465a      	mov	r2, fp
 8018744:	4631      	mov	r1, r6
 8018746:	4628      	mov	r0, r5
 8018748:	47b8      	blx	r7
 801874a:	3001      	adds	r0, #1
 801874c:	f43f aeb0 	beq.w	80184b0 <_printf_float+0x98>
 8018750:	f108 0801 	add.w	r8, r8, #1
 8018754:	e7ec      	b.n	8018730 <_printf_float+0x318>
 8018756:	4642      	mov	r2, r8
 8018758:	4631      	mov	r1, r6
 801875a:	4628      	mov	r0, r5
 801875c:	47b8      	blx	r7
 801875e:	3001      	adds	r0, #1
 8018760:	d1c1      	bne.n	80186e6 <_printf_float+0x2ce>
 8018762:	e6a5      	b.n	80184b0 <_printf_float+0x98>
 8018764:	2301      	movs	r3, #1
 8018766:	4631      	mov	r1, r6
 8018768:	4628      	mov	r0, r5
 801876a:	9206      	str	r2, [sp, #24]
 801876c:	47b8      	blx	r7
 801876e:	3001      	adds	r0, #1
 8018770:	f43f ae9e 	beq.w	80184b0 <_printf_float+0x98>
 8018774:	9b07      	ldr	r3, [sp, #28]
 8018776:	9a06      	ldr	r2, [sp, #24]
 8018778:	3301      	adds	r3, #1
 801877a:	9307      	str	r3, [sp, #28]
 801877c:	e7b9      	b.n	80186f2 <_printf_float+0x2da>
 801877e:	9b05      	ldr	r3, [sp, #20]
 8018780:	465a      	mov	r2, fp
 8018782:	4631      	mov	r1, r6
 8018784:	4628      	mov	r0, r5
 8018786:	47b8      	blx	r7
 8018788:	3001      	adds	r0, #1
 801878a:	d1bf      	bne.n	801870c <_printf_float+0x2f4>
 801878c:	e690      	b.n	80184b0 <_printf_float+0x98>
 801878e:	9a06      	ldr	r2, [sp, #24]
 8018790:	464b      	mov	r3, r9
 8018792:	4442      	add	r2, r8
 8018794:	4631      	mov	r1, r6
 8018796:	4628      	mov	r0, r5
 8018798:	47b8      	blx	r7
 801879a:	3001      	adds	r0, #1
 801879c:	d1c2      	bne.n	8018724 <_printf_float+0x30c>
 801879e:	e687      	b.n	80184b0 <_printf_float+0x98>
 80187a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80187a4:	f1b9 0f01 	cmp.w	r9, #1
 80187a8:	dc01      	bgt.n	80187ae <_printf_float+0x396>
 80187aa:	07db      	lsls	r3, r3, #31
 80187ac:	d536      	bpl.n	801881c <_printf_float+0x404>
 80187ae:	2301      	movs	r3, #1
 80187b0:	4642      	mov	r2, r8
 80187b2:	4631      	mov	r1, r6
 80187b4:	4628      	mov	r0, r5
 80187b6:	47b8      	blx	r7
 80187b8:	3001      	adds	r0, #1
 80187ba:	f43f ae79 	beq.w	80184b0 <_printf_float+0x98>
 80187be:	9b05      	ldr	r3, [sp, #20]
 80187c0:	465a      	mov	r2, fp
 80187c2:	4631      	mov	r1, r6
 80187c4:	4628      	mov	r0, r5
 80187c6:	47b8      	blx	r7
 80187c8:	3001      	adds	r0, #1
 80187ca:	f43f ae71 	beq.w	80184b0 <_printf_float+0x98>
 80187ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80187d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80187d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187da:	f109 39ff 	add.w	r9, r9, #4294967295
 80187de:	d018      	beq.n	8018812 <_printf_float+0x3fa>
 80187e0:	464b      	mov	r3, r9
 80187e2:	f108 0201 	add.w	r2, r8, #1
 80187e6:	4631      	mov	r1, r6
 80187e8:	4628      	mov	r0, r5
 80187ea:	47b8      	blx	r7
 80187ec:	3001      	adds	r0, #1
 80187ee:	d10c      	bne.n	801880a <_printf_float+0x3f2>
 80187f0:	e65e      	b.n	80184b0 <_printf_float+0x98>
 80187f2:	2301      	movs	r3, #1
 80187f4:	465a      	mov	r2, fp
 80187f6:	4631      	mov	r1, r6
 80187f8:	4628      	mov	r0, r5
 80187fa:	47b8      	blx	r7
 80187fc:	3001      	adds	r0, #1
 80187fe:	f43f ae57 	beq.w	80184b0 <_printf_float+0x98>
 8018802:	f108 0801 	add.w	r8, r8, #1
 8018806:	45c8      	cmp	r8, r9
 8018808:	dbf3      	blt.n	80187f2 <_printf_float+0x3da>
 801880a:	4653      	mov	r3, sl
 801880c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018810:	e6dc      	b.n	80185cc <_printf_float+0x1b4>
 8018812:	f04f 0800 	mov.w	r8, #0
 8018816:	f104 0b1a 	add.w	fp, r4, #26
 801881a:	e7f4      	b.n	8018806 <_printf_float+0x3ee>
 801881c:	2301      	movs	r3, #1
 801881e:	4642      	mov	r2, r8
 8018820:	e7e1      	b.n	80187e6 <_printf_float+0x3ce>
 8018822:	2301      	movs	r3, #1
 8018824:	464a      	mov	r2, r9
 8018826:	4631      	mov	r1, r6
 8018828:	4628      	mov	r0, r5
 801882a:	47b8      	blx	r7
 801882c:	3001      	adds	r0, #1
 801882e:	f43f ae3f 	beq.w	80184b0 <_printf_float+0x98>
 8018832:	f108 0801 	add.w	r8, r8, #1
 8018836:	68e3      	ldr	r3, [r4, #12]
 8018838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801883a:	1a5b      	subs	r3, r3, r1
 801883c:	4543      	cmp	r3, r8
 801883e:	dcf0      	bgt.n	8018822 <_printf_float+0x40a>
 8018840:	e6f8      	b.n	8018634 <_printf_float+0x21c>
 8018842:	f04f 0800 	mov.w	r8, #0
 8018846:	f104 0919 	add.w	r9, r4, #25
 801884a:	e7f4      	b.n	8018836 <_printf_float+0x41e>

0801884c <_printf_common>:
 801884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018850:	4616      	mov	r6, r2
 8018852:	4698      	mov	r8, r3
 8018854:	688a      	ldr	r2, [r1, #8]
 8018856:	690b      	ldr	r3, [r1, #16]
 8018858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801885c:	4293      	cmp	r3, r2
 801885e:	bfb8      	it	lt
 8018860:	4613      	movlt	r3, r2
 8018862:	6033      	str	r3, [r6, #0]
 8018864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018868:	4607      	mov	r7, r0
 801886a:	460c      	mov	r4, r1
 801886c:	b10a      	cbz	r2, 8018872 <_printf_common+0x26>
 801886e:	3301      	adds	r3, #1
 8018870:	6033      	str	r3, [r6, #0]
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	0699      	lsls	r1, r3, #26
 8018876:	bf42      	ittt	mi
 8018878:	6833      	ldrmi	r3, [r6, #0]
 801887a:	3302      	addmi	r3, #2
 801887c:	6033      	strmi	r3, [r6, #0]
 801887e:	6825      	ldr	r5, [r4, #0]
 8018880:	f015 0506 	ands.w	r5, r5, #6
 8018884:	d106      	bne.n	8018894 <_printf_common+0x48>
 8018886:	f104 0a19 	add.w	sl, r4, #25
 801888a:	68e3      	ldr	r3, [r4, #12]
 801888c:	6832      	ldr	r2, [r6, #0]
 801888e:	1a9b      	subs	r3, r3, r2
 8018890:	42ab      	cmp	r3, r5
 8018892:	dc26      	bgt.n	80188e2 <_printf_common+0x96>
 8018894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018898:	6822      	ldr	r2, [r4, #0]
 801889a:	3b00      	subs	r3, #0
 801889c:	bf18      	it	ne
 801889e:	2301      	movne	r3, #1
 80188a0:	0692      	lsls	r2, r2, #26
 80188a2:	d42b      	bmi.n	80188fc <_printf_common+0xb0>
 80188a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80188a8:	4641      	mov	r1, r8
 80188aa:	4638      	mov	r0, r7
 80188ac:	47c8      	blx	r9
 80188ae:	3001      	adds	r0, #1
 80188b0:	d01e      	beq.n	80188f0 <_printf_common+0xa4>
 80188b2:	6823      	ldr	r3, [r4, #0]
 80188b4:	6922      	ldr	r2, [r4, #16]
 80188b6:	f003 0306 	and.w	r3, r3, #6
 80188ba:	2b04      	cmp	r3, #4
 80188bc:	bf02      	ittt	eq
 80188be:	68e5      	ldreq	r5, [r4, #12]
 80188c0:	6833      	ldreq	r3, [r6, #0]
 80188c2:	1aed      	subeq	r5, r5, r3
 80188c4:	68a3      	ldr	r3, [r4, #8]
 80188c6:	bf0c      	ite	eq
 80188c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188cc:	2500      	movne	r5, #0
 80188ce:	4293      	cmp	r3, r2
 80188d0:	bfc4      	itt	gt
 80188d2:	1a9b      	subgt	r3, r3, r2
 80188d4:	18ed      	addgt	r5, r5, r3
 80188d6:	2600      	movs	r6, #0
 80188d8:	341a      	adds	r4, #26
 80188da:	42b5      	cmp	r5, r6
 80188dc:	d11a      	bne.n	8018914 <_printf_common+0xc8>
 80188de:	2000      	movs	r0, #0
 80188e0:	e008      	b.n	80188f4 <_printf_common+0xa8>
 80188e2:	2301      	movs	r3, #1
 80188e4:	4652      	mov	r2, sl
 80188e6:	4641      	mov	r1, r8
 80188e8:	4638      	mov	r0, r7
 80188ea:	47c8      	blx	r9
 80188ec:	3001      	adds	r0, #1
 80188ee:	d103      	bne.n	80188f8 <_printf_common+0xac>
 80188f0:	f04f 30ff 	mov.w	r0, #4294967295
 80188f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188f8:	3501      	adds	r5, #1
 80188fa:	e7c6      	b.n	801888a <_printf_common+0x3e>
 80188fc:	18e1      	adds	r1, r4, r3
 80188fe:	1c5a      	adds	r2, r3, #1
 8018900:	2030      	movs	r0, #48	@ 0x30
 8018902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018906:	4422      	add	r2, r4
 8018908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801890c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018910:	3302      	adds	r3, #2
 8018912:	e7c7      	b.n	80188a4 <_printf_common+0x58>
 8018914:	2301      	movs	r3, #1
 8018916:	4622      	mov	r2, r4
 8018918:	4641      	mov	r1, r8
 801891a:	4638      	mov	r0, r7
 801891c:	47c8      	blx	r9
 801891e:	3001      	adds	r0, #1
 8018920:	d0e6      	beq.n	80188f0 <_printf_common+0xa4>
 8018922:	3601      	adds	r6, #1
 8018924:	e7d9      	b.n	80188da <_printf_common+0x8e>
	...

08018928 <_printf_i>:
 8018928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801892c:	7e0f      	ldrb	r7, [r1, #24]
 801892e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018930:	2f78      	cmp	r7, #120	@ 0x78
 8018932:	4691      	mov	r9, r2
 8018934:	4680      	mov	r8, r0
 8018936:	460c      	mov	r4, r1
 8018938:	469a      	mov	sl, r3
 801893a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801893e:	d807      	bhi.n	8018950 <_printf_i+0x28>
 8018940:	2f62      	cmp	r7, #98	@ 0x62
 8018942:	d80a      	bhi.n	801895a <_printf_i+0x32>
 8018944:	2f00      	cmp	r7, #0
 8018946:	f000 80d2 	beq.w	8018aee <_printf_i+0x1c6>
 801894a:	2f58      	cmp	r7, #88	@ 0x58
 801894c:	f000 80b9 	beq.w	8018ac2 <_printf_i+0x19a>
 8018950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018958:	e03a      	b.n	80189d0 <_printf_i+0xa8>
 801895a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801895e:	2b15      	cmp	r3, #21
 8018960:	d8f6      	bhi.n	8018950 <_printf_i+0x28>
 8018962:	a101      	add	r1, pc, #4	@ (adr r1, 8018968 <_printf_i+0x40>)
 8018964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018968:	080189c1 	.word	0x080189c1
 801896c:	080189d5 	.word	0x080189d5
 8018970:	08018951 	.word	0x08018951
 8018974:	08018951 	.word	0x08018951
 8018978:	08018951 	.word	0x08018951
 801897c:	08018951 	.word	0x08018951
 8018980:	080189d5 	.word	0x080189d5
 8018984:	08018951 	.word	0x08018951
 8018988:	08018951 	.word	0x08018951
 801898c:	08018951 	.word	0x08018951
 8018990:	08018951 	.word	0x08018951
 8018994:	08018ad5 	.word	0x08018ad5
 8018998:	080189ff 	.word	0x080189ff
 801899c:	08018a8f 	.word	0x08018a8f
 80189a0:	08018951 	.word	0x08018951
 80189a4:	08018951 	.word	0x08018951
 80189a8:	08018af7 	.word	0x08018af7
 80189ac:	08018951 	.word	0x08018951
 80189b0:	080189ff 	.word	0x080189ff
 80189b4:	08018951 	.word	0x08018951
 80189b8:	08018951 	.word	0x08018951
 80189bc:	08018a97 	.word	0x08018a97
 80189c0:	6833      	ldr	r3, [r6, #0]
 80189c2:	1d1a      	adds	r2, r3, #4
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	6032      	str	r2, [r6, #0]
 80189c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80189cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80189d0:	2301      	movs	r3, #1
 80189d2:	e09d      	b.n	8018b10 <_printf_i+0x1e8>
 80189d4:	6833      	ldr	r3, [r6, #0]
 80189d6:	6820      	ldr	r0, [r4, #0]
 80189d8:	1d19      	adds	r1, r3, #4
 80189da:	6031      	str	r1, [r6, #0]
 80189dc:	0606      	lsls	r6, r0, #24
 80189de:	d501      	bpl.n	80189e4 <_printf_i+0xbc>
 80189e0:	681d      	ldr	r5, [r3, #0]
 80189e2:	e003      	b.n	80189ec <_printf_i+0xc4>
 80189e4:	0645      	lsls	r5, r0, #25
 80189e6:	d5fb      	bpl.n	80189e0 <_printf_i+0xb8>
 80189e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80189ec:	2d00      	cmp	r5, #0
 80189ee:	da03      	bge.n	80189f8 <_printf_i+0xd0>
 80189f0:	232d      	movs	r3, #45	@ 0x2d
 80189f2:	426d      	negs	r5, r5
 80189f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189f8:	4859      	ldr	r0, [pc, #356]	@ (8018b60 <_printf_i+0x238>)
 80189fa:	230a      	movs	r3, #10
 80189fc:	e011      	b.n	8018a22 <_printf_i+0xfa>
 80189fe:	6821      	ldr	r1, [r4, #0]
 8018a00:	6833      	ldr	r3, [r6, #0]
 8018a02:	0608      	lsls	r0, r1, #24
 8018a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8018a08:	d402      	bmi.n	8018a10 <_printf_i+0xe8>
 8018a0a:	0649      	lsls	r1, r1, #25
 8018a0c:	bf48      	it	mi
 8018a0e:	b2ad      	uxthmi	r5, r5
 8018a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8018a12:	4853      	ldr	r0, [pc, #332]	@ (8018b60 <_printf_i+0x238>)
 8018a14:	6033      	str	r3, [r6, #0]
 8018a16:	bf14      	ite	ne
 8018a18:	230a      	movne	r3, #10
 8018a1a:	2308      	moveq	r3, #8
 8018a1c:	2100      	movs	r1, #0
 8018a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018a22:	6866      	ldr	r6, [r4, #4]
 8018a24:	60a6      	str	r6, [r4, #8]
 8018a26:	2e00      	cmp	r6, #0
 8018a28:	bfa2      	ittt	ge
 8018a2a:	6821      	ldrge	r1, [r4, #0]
 8018a2c:	f021 0104 	bicge.w	r1, r1, #4
 8018a30:	6021      	strge	r1, [r4, #0]
 8018a32:	b90d      	cbnz	r5, 8018a38 <_printf_i+0x110>
 8018a34:	2e00      	cmp	r6, #0
 8018a36:	d04b      	beq.n	8018ad0 <_printf_i+0x1a8>
 8018a38:	4616      	mov	r6, r2
 8018a3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a3e:	fb03 5711 	mls	r7, r3, r1, r5
 8018a42:	5dc7      	ldrb	r7, [r0, r7]
 8018a44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018a48:	462f      	mov	r7, r5
 8018a4a:	42bb      	cmp	r3, r7
 8018a4c:	460d      	mov	r5, r1
 8018a4e:	d9f4      	bls.n	8018a3a <_printf_i+0x112>
 8018a50:	2b08      	cmp	r3, #8
 8018a52:	d10b      	bne.n	8018a6c <_printf_i+0x144>
 8018a54:	6823      	ldr	r3, [r4, #0]
 8018a56:	07df      	lsls	r7, r3, #31
 8018a58:	d508      	bpl.n	8018a6c <_printf_i+0x144>
 8018a5a:	6923      	ldr	r3, [r4, #16]
 8018a5c:	6861      	ldr	r1, [r4, #4]
 8018a5e:	4299      	cmp	r1, r3
 8018a60:	bfde      	ittt	le
 8018a62:	2330      	movle	r3, #48	@ 0x30
 8018a64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a6c:	1b92      	subs	r2, r2, r6
 8018a6e:	6122      	str	r2, [r4, #16]
 8018a70:	f8cd a000 	str.w	sl, [sp]
 8018a74:	464b      	mov	r3, r9
 8018a76:	aa03      	add	r2, sp, #12
 8018a78:	4621      	mov	r1, r4
 8018a7a:	4640      	mov	r0, r8
 8018a7c:	f7ff fee6 	bl	801884c <_printf_common>
 8018a80:	3001      	adds	r0, #1
 8018a82:	d14a      	bne.n	8018b1a <_printf_i+0x1f2>
 8018a84:	f04f 30ff 	mov.w	r0, #4294967295
 8018a88:	b004      	add	sp, #16
 8018a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a8e:	6823      	ldr	r3, [r4, #0]
 8018a90:	f043 0320 	orr.w	r3, r3, #32
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	4833      	ldr	r0, [pc, #204]	@ (8018b64 <_printf_i+0x23c>)
 8018a98:	2778      	movs	r7, #120	@ 0x78
 8018a9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018a9e:	6823      	ldr	r3, [r4, #0]
 8018aa0:	6831      	ldr	r1, [r6, #0]
 8018aa2:	061f      	lsls	r7, r3, #24
 8018aa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8018aa8:	d402      	bmi.n	8018ab0 <_printf_i+0x188>
 8018aaa:	065f      	lsls	r7, r3, #25
 8018aac:	bf48      	it	mi
 8018aae:	b2ad      	uxthmi	r5, r5
 8018ab0:	6031      	str	r1, [r6, #0]
 8018ab2:	07d9      	lsls	r1, r3, #31
 8018ab4:	bf44      	itt	mi
 8018ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8018aba:	6023      	strmi	r3, [r4, #0]
 8018abc:	b11d      	cbz	r5, 8018ac6 <_printf_i+0x19e>
 8018abe:	2310      	movs	r3, #16
 8018ac0:	e7ac      	b.n	8018a1c <_printf_i+0xf4>
 8018ac2:	4827      	ldr	r0, [pc, #156]	@ (8018b60 <_printf_i+0x238>)
 8018ac4:	e7e9      	b.n	8018a9a <_printf_i+0x172>
 8018ac6:	6823      	ldr	r3, [r4, #0]
 8018ac8:	f023 0320 	bic.w	r3, r3, #32
 8018acc:	6023      	str	r3, [r4, #0]
 8018ace:	e7f6      	b.n	8018abe <_printf_i+0x196>
 8018ad0:	4616      	mov	r6, r2
 8018ad2:	e7bd      	b.n	8018a50 <_printf_i+0x128>
 8018ad4:	6833      	ldr	r3, [r6, #0]
 8018ad6:	6825      	ldr	r5, [r4, #0]
 8018ad8:	6961      	ldr	r1, [r4, #20]
 8018ada:	1d18      	adds	r0, r3, #4
 8018adc:	6030      	str	r0, [r6, #0]
 8018ade:	062e      	lsls	r6, r5, #24
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	d501      	bpl.n	8018ae8 <_printf_i+0x1c0>
 8018ae4:	6019      	str	r1, [r3, #0]
 8018ae6:	e002      	b.n	8018aee <_printf_i+0x1c6>
 8018ae8:	0668      	lsls	r0, r5, #25
 8018aea:	d5fb      	bpl.n	8018ae4 <_printf_i+0x1bc>
 8018aec:	8019      	strh	r1, [r3, #0]
 8018aee:	2300      	movs	r3, #0
 8018af0:	6123      	str	r3, [r4, #16]
 8018af2:	4616      	mov	r6, r2
 8018af4:	e7bc      	b.n	8018a70 <_printf_i+0x148>
 8018af6:	6833      	ldr	r3, [r6, #0]
 8018af8:	1d1a      	adds	r2, r3, #4
 8018afa:	6032      	str	r2, [r6, #0]
 8018afc:	681e      	ldr	r6, [r3, #0]
 8018afe:	6862      	ldr	r2, [r4, #4]
 8018b00:	2100      	movs	r1, #0
 8018b02:	4630      	mov	r0, r6
 8018b04:	f7e7 fc14 	bl	8000330 <memchr>
 8018b08:	b108      	cbz	r0, 8018b0e <_printf_i+0x1e6>
 8018b0a:	1b80      	subs	r0, r0, r6
 8018b0c:	6060      	str	r0, [r4, #4]
 8018b0e:	6863      	ldr	r3, [r4, #4]
 8018b10:	6123      	str	r3, [r4, #16]
 8018b12:	2300      	movs	r3, #0
 8018b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b18:	e7aa      	b.n	8018a70 <_printf_i+0x148>
 8018b1a:	6923      	ldr	r3, [r4, #16]
 8018b1c:	4632      	mov	r2, r6
 8018b1e:	4649      	mov	r1, r9
 8018b20:	4640      	mov	r0, r8
 8018b22:	47d0      	blx	sl
 8018b24:	3001      	adds	r0, #1
 8018b26:	d0ad      	beq.n	8018a84 <_printf_i+0x15c>
 8018b28:	6823      	ldr	r3, [r4, #0]
 8018b2a:	079b      	lsls	r3, r3, #30
 8018b2c:	d413      	bmi.n	8018b56 <_printf_i+0x22e>
 8018b2e:	68e0      	ldr	r0, [r4, #12]
 8018b30:	9b03      	ldr	r3, [sp, #12]
 8018b32:	4298      	cmp	r0, r3
 8018b34:	bfb8      	it	lt
 8018b36:	4618      	movlt	r0, r3
 8018b38:	e7a6      	b.n	8018a88 <_printf_i+0x160>
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	4632      	mov	r2, r6
 8018b3e:	4649      	mov	r1, r9
 8018b40:	4640      	mov	r0, r8
 8018b42:	47d0      	blx	sl
 8018b44:	3001      	adds	r0, #1
 8018b46:	d09d      	beq.n	8018a84 <_printf_i+0x15c>
 8018b48:	3501      	adds	r5, #1
 8018b4a:	68e3      	ldr	r3, [r4, #12]
 8018b4c:	9903      	ldr	r1, [sp, #12]
 8018b4e:	1a5b      	subs	r3, r3, r1
 8018b50:	42ab      	cmp	r3, r5
 8018b52:	dcf2      	bgt.n	8018b3a <_printf_i+0x212>
 8018b54:	e7eb      	b.n	8018b2e <_printf_i+0x206>
 8018b56:	2500      	movs	r5, #0
 8018b58:	f104 0619 	add.w	r6, r4, #25
 8018b5c:	e7f5      	b.n	8018b4a <_printf_i+0x222>
 8018b5e:	bf00      	nop
 8018b60:	0801cd43 	.word	0x0801cd43
 8018b64:	0801cd54 	.word	0x0801cd54

08018b68 <std>:
 8018b68:	2300      	movs	r3, #0
 8018b6a:	b510      	push	{r4, lr}
 8018b6c:	4604      	mov	r4, r0
 8018b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8018b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b76:	6083      	str	r3, [r0, #8]
 8018b78:	8181      	strh	r1, [r0, #12]
 8018b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8018b7c:	81c2      	strh	r2, [r0, #14]
 8018b7e:	6183      	str	r3, [r0, #24]
 8018b80:	4619      	mov	r1, r3
 8018b82:	2208      	movs	r2, #8
 8018b84:	305c      	adds	r0, #92	@ 0x5c
 8018b86:	f000 f914 	bl	8018db2 <memset>
 8018b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8018bc0 <std+0x58>)
 8018b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8018b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8018bc4 <std+0x5c>)
 8018b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018b92:	4b0d      	ldr	r3, [pc, #52]	@ (8018bc8 <std+0x60>)
 8018b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018b96:	4b0d      	ldr	r3, [pc, #52]	@ (8018bcc <std+0x64>)
 8018b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8018b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8018bd0 <std+0x68>)
 8018b9c:	6224      	str	r4, [r4, #32]
 8018b9e:	429c      	cmp	r4, r3
 8018ba0:	d006      	beq.n	8018bb0 <std+0x48>
 8018ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018ba6:	4294      	cmp	r4, r2
 8018ba8:	d002      	beq.n	8018bb0 <std+0x48>
 8018baa:	33d0      	adds	r3, #208	@ 0xd0
 8018bac:	429c      	cmp	r4, r3
 8018bae:	d105      	bne.n	8018bbc <std+0x54>
 8018bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bb8:	f000 b996 	b.w	8018ee8 <__retarget_lock_init_recursive>
 8018bbc:	bd10      	pop	{r4, pc}
 8018bbe:	bf00      	nop
 8018bc0:	08018d2d 	.word	0x08018d2d
 8018bc4:	08018d4f 	.word	0x08018d4f
 8018bc8:	08018d87 	.word	0x08018d87
 8018bcc:	08018dab 	.word	0x08018dab
 8018bd0:	24006218 	.word	0x24006218

08018bd4 <stdio_exit_handler>:
 8018bd4:	4a02      	ldr	r2, [pc, #8]	@ (8018be0 <stdio_exit_handler+0xc>)
 8018bd6:	4903      	ldr	r1, [pc, #12]	@ (8018be4 <stdio_exit_handler+0x10>)
 8018bd8:	4803      	ldr	r0, [pc, #12]	@ (8018be8 <stdio_exit_handler+0x14>)
 8018bda:	f000 b869 	b.w	8018cb0 <_fwalk_sglue>
 8018bde:	bf00      	nop
 8018be0:	24000104 	.word	0x24000104
 8018be4:	0801b0a5 	.word	0x0801b0a5
 8018be8:	24000280 	.word	0x24000280

08018bec <cleanup_stdio>:
 8018bec:	6841      	ldr	r1, [r0, #4]
 8018bee:	4b0c      	ldr	r3, [pc, #48]	@ (8018c20 <cleanup_stdio+0x34>)
 8018bf0:	4299      	cmp	r1, r3
 8018bf2:	b510      	push	{r4, lr}
 8018bf4:	4604      	mov	r4, r0
 8018bf6:	d001      	beq.n	8018bfc <cleanup_stdio+0x10>
 8018bf8:	f002 fa54 	bl	801b0a4 <_fflush_r>
 8018bfc:	68a1      	ldr	r1, [r4, #8]
 8018bfe:	4b09      	ldr	r3, [pc, #36]	@ (8018c24 <cleanup_stdio+0x38>)
 8018c00:	4299      	cmp	r1, r3
 8018c02:	d002      	beq.n	8018c0a <cleanup_stdio+0x1e>
 8018c04:	4620      	mov	r0, r4
 8018c06:	f002 fa4d 	bl	801b0a4 <_fflush_r>
 8018c0a:	68e1      	ldr	r1, [r4, #12]
 8018c0c:	4b06      	ldr	r3, [pc, #24]	@ (8018c28 <cleanup_stdio+0x3c>)
 8018c0e:	4299      	cmp	r1, r3
 8018c10:	d004      	beq.n	8018c1c <cleanup_stdio+0x30>
 8018c12:	4620      	mov	r0, r4
 8018c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c18:	f002 ba44 	b.w	801b0a4 <_fflush_r>
 8018c1c:	bd10      	pop	{r4, pc}
 8018c1e:	bf00      	nop
 8018c20:	24006218 	.word	0x24006218
 8018c24:	24006280 	.word	0x24006280
 8018c28:	240062e8 	.word	0x240062e8

08018c2c <global_stdio_init.part.0>:
 8018c2c:	b510      	push	{r4, lr}
 8018c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8018c5c <global_stdio_init.part.0+0x30>)
 8018c30:	4c0b      	ldr	r4, [pc, #44]	@ (8018c60 <global_stdio_init.part.0+0x34>)
 8018c32:	4a0c      	ldr	r2, [pc, #48]	@ (8018c64 <global_stdio_init.part.0+0x38>)
 8018c34:	601a      	str	r2, [r3, #0]
 8018c36:	4620      	mov	r0, r4
 8018c38:	2200      	movs	r2, #0
 8018c3a:	2104      	movs	r1, #4
 8018c3c:	f7ff ff94 	bl	8018b68 <std>
 8018c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018c44:	2201      	movs	r2, #1
 8018c46:	2109      	movs	r1, #9
 8018c48:	f7ff ff8e 	bl	8018b68 <std>
 8018c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018c50:	2202      	movs	r2, #2
 8018c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c56:	2112      	movs	r1, #18
 8018c58:	f7ff bf86 	b.w	8018b68 <std>
 8018c5c:	24006350 	.word	0x24006350
 8018c60:	24006218 	.word	0x24006218
 8018c64:	08018bd5 	.word	0x08018bd5

08018c68 <__sfp_lock_acquire>:
 8018c68:	4801      	ldr	r0, [pc, #4]	@ (8018c70 <__sfp_lock_acquire+0x8>)
 8018c6a:	f000 b93e 	b.w	8018eea <__retarget_lock_acquire_recursive>
 8018c6e:	bf00      	nop
 8018c70:	24006359 	.word	0x24006359

08018c74 <__sfp_lock_release>:
 8018c74:	4801      	ldr	r0, [pc, #4]	@ (8018c7c <__sfp_lock_release+0x8>)
 8018c76:	f000 b939 	b.w	8018eec <__retarget_lock_release_recursive>
 8018c7a:	bf00      	nop
 8018c7c:	24006359 	.word	0x24006359

08018c80 <__sinit>:
 8018c80:	b510      	push	{r4, lr}
 8018c82:	4604      	mov	r4, r0
 8018c84:	f7ff fff0 	bl	8018c68 <__sfp_lock_acquire>
 8018c88:	6a23      	ldr	r3, [r4, #32]
 8018c8a:	b11b      	cbz	r3, 8018c94 <__sinit+0x14>
 8018c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c90:	f7ff bff0 	b.w	8018c74 <__sfp_lock_release>
 8018c94:	4b04      	ldr	r3, [pc, #16]	@ (8018ca8 <__sinit+0x28>)
 8018c96:	6223      	str	r3, [r4, #32]
 8018c98:	4b04      	ldr	r3, [pc, #16]	@ (8018cac <__sinit+0x2c>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d1f5      	bne.n	8018c8c <__sinit+0xc>
 8018ca0:	f7ff ffc4 	bl	8018c2c <global_stdio_init.part.0>
 8018ca4:	e7f2      	b.n	8018c8c <__sinit+0xc>
 8018ca6:	bf00      	nop
 8018ca8:	08018bed 	.word	0x08018bed
 8018cac:	24006350 	.word	0x24006350

08018cb0 <_fwalk_sglue>:
 8018cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cb4:	4607      	mov	r7, r0
 8018cb6:	4688      	mov	r8, r1
 8018cb8:	4614      	mov	r4, r2
 8018cba:	2600      	movs	r6, #0
 8018cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8018cc4:	d505      	bpl.n	8018cd2 <_fwalk_sglue+0x22>
 8018cc6:	6824      	ldr	r4, [r4, #0]
 8018cc8:	2c00      	cmp	r4, #0
 8018cca:	d1f7      	bne.n	8018cbc <_fwalk_sglue+0xc>
 8018ccc:	4630      	mov	r0, r6
 8018cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cd2:	89ab      	ldrh	r3, [r5, #12]
 8018cd4:	2b01      	cmp	r3, #1
 8018cd6:	d907      	bls.n	8018ce8 <_fwalk_sglue+0x38>
 8018cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018cdc:	3301      	adds	r3, #1
 8018cde:	d003      	beq.n	8018ce8 <_fwalk_sglue+0x38>
 8018ce0:	4629      	mov	r1, r5
 8018ce2:	4638      	mov	r0, r7
 8018ce4:	47c0      	blx	r8
 8018ce6:	4306      	orrs	r6, r0
 8018ce8:	3568      	adds	r5, #104	@ 0x68
 8018cea:	e7e9      	b.n	8018cc0 <_fwalk_sglue+0x10>

08018cec <siprintf>:
 8018cec:	b40e      	push	{r1, r2, r3}
 8018cee:	b500      	push	{lr}
 8018cf0:	b09c      	sub	sp, #112	@ 0x70
 8018cf2:	ab1d      	add	r3, sp, #116	@ 0x74
 8018cf4:	9002      	str	r0, [sp, #8]
 8018cf6:	9006      	str	r0, [sp, #24]
 8018cf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018cfc:	4809      	ldr	r0, [pc, #36]	@ (8018d24 <siprintf+0x38>)
 8018cfe:	9107      	str	r1, [sp, #28]
 8018d00:	9104      	str	r1, [sp, #16]
 8018d02:	4909      	ldr	r1, [pc, #36]	@ (8018d28 <siprintf+0x3c>)
 8018d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d08:	9105      	str	r1, [sp, #20]
 8018d0a:	6800      	ldr	r0, [r0, #0]
 8018d0c:	9301      	str	r3, [sp, #4]
 8018d0e:	a902      	add	r1, sp, #8
 8018d10:	f002 f848 	bl	801ada4 <_svfiprintf_r>
 8018d14:	9b02      	ldr	r3, [sp, #8]
 8018d16:	2200      	movs	r2, #0
 8018d18:	701a      	strb	r2, [r3, #0]
 8018d1a:	b01c      	add	sp, #112	@ 0x70
 8018d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d20:	b003      	add	sp, #12
 8018d22:	4770      	bx	lr
 8018d24:	2400027c 	.word	0x2400027c
 8018d28:	ffff0208 	.word	0xffff0208

08018d2c <__sread>:
 8018d2c:	b510      	push	{r4, lr}
 8018d2e:	460c      	mov	r4, r1
 8018d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d34:	f000 f88a 	bl	8018e4c <_read_r>
 8018d38:	2800      	cmp	r0, #0
 8018d3a:	bfab      	itete	ge
 8018d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8018d40:	181b      	addge	r3, r3, r0
 8018d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018d46:	bfac      	ite	ge
 8018d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018d4a:	81a3      	strhlt	r3, [r4, #12]
 8018d4c:	bd10      	pop	{r4, pc}

08018d4e <__swrite>:
 8018d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d52:	461f      	mov	r7, r3
 8018d54:	898b      	ldrh	r3, [r1, #12]
 8018d56:	05db      	lsls	r3, r3, #23
 8018d58:	4605      	mov	r5, r0
 8018d5a:	460c      	mov	r4, r1
 8018d5c:	4616      	mov	r6, r2
 8018d5e:	d505      	bpl.n	8018d6c <__swrite+0x1e>
 8018d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d64:	2302      	movs	r3, #2
 8018d66:	2200      	movs	r2, #0
 8018d68:	f000 f85e 	bl	8018e28 <_lseek_r>
 8018d6c:	89a3      	ldrh	r3, [r4, #12]
 8018d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018d76:	81a3      	strh	r3, [r4, #12]
 8018d78:	4632      	mov	r2, r6
 8018d7a:	463b      	mov	r3, r7
 8018d7c:	4628      	mov	r0, r5
 8018d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d82:	f000 b875 	b.w	8018e70 <_write_r>

08018d86 <__sseek>:
 8018d86:	b510      	push	{r4, lr}
 8018d88:	460c      	mov	r4, r1
 8018d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d8e:	f000 f84b 	bl	8018e28 <_lseek_r>
 8018d92:	1c43      	adds	r3, r0, #1
 8018d94:	89a3      	ldrh	r3, [r4, #12]
 8018d96:	bf15      	itete	ne
 8018d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018da2:	81a3      	strheq	r3, [r4, #12]
 8018da4:	bf18      	it	ne
 8018da6:	81a3      	strhne	r3, [r4, #12]
 8018da8:	bd10      	pop	{r4, pc}

08018daa <__sclose>:
 8018daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dae:	f000 b82b 	b.w	8018e08 <_close_r>

08018db2 <memset>:
 8018db2:	4402      	add	r2, r0
 8018db4:	4603      	mov	r3, r0
 8018db6:	4293      	cmp	r3, r2
 8018db8:	d100      	bne.n	8018dbc <memset+0xa>
 8018dba:	4770      	bx	lr
 8018dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8018dc0:	e7f9      	b.n	8018db6 <memset+0x4>

08018dc2 <strchr>:
 8018dc2:	b2c9      	uxtb	r1, r1
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018dcc:	b112      	cbz	r2, 8018dd4 <strchr+0x12>
 8018dce:	428a      	cmp	r2, r1
 8018dd0:	d1f9      	bne.n	8018dc6 <strchr+0x4>
 8018dd2:	4770      	bx	lr
 8018dd4:	2900      	cmp	r1, #0
 8018dd6:	bf18      	it	ne
 8018dd8:	2000      	movne	r0, #0
 8018dda:	4770      	bx	lr

08018ddc <strncmp>:
 8018ddc:	b510      	push	{r4, lr}
 8018dde:	b16a      	cbz	r2, 8018dfc <strncmp+0x20>
 8018de0:	3901      	subs	r1, #1
 8018de2:	1884      	adds	r4, r0, r2
 8018de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018de8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d103      	bne.n	8018df8 <strncmp+0x1c>
 8018df0:	42a0      	cmp	r0, r4
 8018df2:	d001      	beq.n	8018df8 <strncmp+0x1c>
 8018df4:	2a00      	cmp	r2, #0
 8018df6:	d1f5      	bne.n	8018de4 <strncmp+0x8>
 8018df8:	1ad0      	subs	r0, r2, r3
 8018dfa:	bd10      	pop	{r4, pc}
 8018dfc:	4610      	mov	r0, r2
 8018dfe:	e7fc      	b.n	8018dfa <strncmp+0x1e>

08018e00 <_localeconv_r>:
 8018e00:	4800      	ldr	r0, [pc, #0]	@ (8018e04 <_localeconv_r+0x4>)
 8018e02:	4770      	bx	lr
 8018e04:	24000200 	.word	0x24000200

08018e08 <_close_r>:
 8018e08:	b538      	push	{r3, r4, r5, lr}
 8018e0a:	4d06      	ldr	r5, [pc, #24]	@ (8018e24 <_close_r+0x1c>)
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	4604      	mov	r4, r0
 8018e10:	4608      	mov	r0, r1
 8018e12:	602b      	str	r3, [r5, #0]
 8018e14:	f7e9 ff94 	bl	8002d40 <_close>
 8018e18:	1c43      	adds	r3, r0, #1
 8018e1a:	d102      	bne.n	8018e22 <_close_r+0x1a>
 8018e1c:	682b      	ldr	r3, [r5, #0]
 8018e1e:	b103      	cbz	r3, 8018e22 <_close_r+0x1a>
 8018e20:	6023      	str	r3, [r4, #0]
 8018e22:	bd38      	pop	{r3, r4, r5, pc}
 8018e24:	24006354 	.word	0x24006354

08018e28 <_lseek_r>:
 8018e28:	b538      	push	{r3, r4, r5, lr}
 8018e2a:	4d07      	ldr	r5, [pc, #28]	@ (8018e48 <_lseek_r+0x20>)
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	4608      	mov	r0, r1
 8018e30:	4611      	mov	r1, r2
 8018e32:	2200      	movs	r2, #0
 8018e34:	602a      	str	r2, [r5, #0]
 8018e36:	461a      	mov	r2, r3
 8018e38:	f7e9 ffa9 	bl	8002d8e <_lseek>
 8018e3c:	1c43      	adds	r3, r0, #1
 8018e3e:	d102      	bne.n	8018e46 <_lseek_r+0x1e>
 8018e40:	682b      	ldr	r3, [r5, #0]
 8018e42:	b103      	cbz	r3, 8018e46 <_lseek_r+0x1e>
 8018e44:	6023      	str	r3, [r4, #0]
 8018e46:	bd38      	pop	{r3, r4, r5, pc}
 8018e48:	24006354 	.word	0x24006354

08018e4c <_read_r>:
 8018e4c:	b538      	push	{r3, r4, r5, lr}
 8018e4e:	4d07      	ldr	r5, [pc, #28]	@ (8018e6c <_read_r+0x20>)
 8018e50:	4604      	mov	r4, r0
 8018e52:	4608      	mov	r0, r1
 8018e54:	4611      	mov	r1, r2
 8018e56:	2200      	movs	r2, #0
 8018e58:	602a      	str	r2, [r5, #0]
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	f7e9 ff37 	bl	8002cce <_read>
 8018e60:	1c43      	adds	r3, r0, #1
 8018e62:	d102      	bne.n	8018e6a <_read_r+0x1e>
 8018e64:	682b      	ldr	r3, [r5, #0]
 8018e66:	b103      	cbz	r3, 8018e6a <_read_r+0x1e>
 8018e68:	6023      	str	r3, [r4, #0]
 8018e6a:	bd38      	pop	{r3, r4, r5, pc}
 8018e6c:	24006354 	.word	0x24006354

08018e70 <_write_r>:
 8018e70:	b538      	push	{r3, r4, r5, lr}
 8018e72:	4d07      	ldr	r5, [pc, #28]	@ (8018e90 <_write_r+0x20>)
 8018e74:	4604      	mov	r4, r0
 8018e76:	4608      	mov	r0, r1
 8018e78:	4611      	mov	r1, r2
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	602a      	str	r2, [r5, #0]
 8018e7e:	461a      	mov	r2, r3
 8018e80:	f7e9 ff42 	bl	8002d08 <_write>
 8018e84:	1c43      	adds	r3, r0, #1
 8018e86:	d102      	bne.n	8018e8e <_write_r+0x1e>
 8018e88:	682b      	ldr	r3, [r5, #0]
 8018e8a:	b103      	cbz	r3, 8018e8e <_write_r+0x1e>
 8018e8c:	6023      	str	r3, [r4, #0]
 8018e8e:	bd38      	pop	{r3, r4, r5, pc}
 8018e90:	24006354 	.word	0x24006354

08018e94 <__errno>:
 8018e94:	4b01      	ldr	r3, [pc, #4]	@ (8018e9c <__errno+0x8>)
 8018e96:	6818      	ldr	r0, [r3, #0]
 8018e98:	4770      	bx	lr
 8018e9a:	bf00      	nop
 8018e9c:	2400027c 	.word	0x2400027c

08018ea0 <__libc_init_array>:
 8018ea0:	b570      	push	{r4, r5, r6, lr}
 8018ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8018ed8 <__libc_init_array+0x38>)
 8018ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8018edc <__libc_init_array+0x3c>)
 8018ea6:	1b64      	subs	r4, r4, r5
 8018ea8:	10a4      	asrs	r4, r4, #2
 8018eaa:	2600      	movs	r6, #0
 8018eac:	42a6      	cmp	r6, r4
 8018eae:	d109      	bne.n	8018ec4 <__libc_init_array+0x24>
 8018eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8018ee0 <__libc_init_array+0x40>)
 8018eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8018ee4 <__libc_init_array+0x44>)
 8018eb4:	f003 fb18 	bl	801c4e8 <_init>
 8018eb8:	1b64      	subs	r4, r4, r5
 8018eba:	10a4      	asrs	r4, r4, #2
 8018ebc:	2600      	movs	r6, #0
 8018ebe:	42a6      	cmp	r6, r4
 8018ec0:	d105      	bne.n	8018ece <__libc_init_array+0x2e>
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}
 8018ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ec8:	4798      	blx	r3
 8018eca:	3601      	adds	r6, #1
 8018ecc:	e7ee      	b.n	8018eac <__libc_init_array+0xc>
 8018ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ed2:	4798      	blx	r3
 8018ed4:	3601      	adds	r6, #1
 8018ed6:	e7f2      	b.n	8018ebe <__libc_init_array+0x1e>
 8018ed8:	0801d320 	.word	0x0801d320
 8018edc:	0801d320 	.word	0x0801d320
 8018ee0:	0801d320 	.word	0x0801d320
 8018ee4:	0801d324 	.word	0x0801d324

08018ee8 <__retarget_lock_init_recursive>:
 8018ee8:	4770      	bx	lr

08018eea <__retarget_lock_acquire_recursive>:
 8018eea:	4770      	bx	lr

08018eec <__retarget_lock_release_recursive>:
 8018eec:	4770      	bx	lr

08018eee <memcpy>:
 8018eee:	440a      	add	r2, r1
 8018ef0:	4291      	cmp	r1, r2
 8018ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8018ef6:	d100      	bne.n	8018efa <memcpy+0xc>
 8018ef8:	4770      	bx	lr
 8018efa:	b510      	push	{r4, lr}
 8018efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f04:	4291      	cmp	r1, r2
 8018f06:	d1f9      	bne.n	8018efc <memcpy+0xe>
 8018f08:	bd10      	pop	{r4, pc}
 8018f0a:	0000      	movs	r0, r0
 8018f0c:	0000      	movs	r0, r0
	...

08018f10 <nan>:
 8018f10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018f18 <nan+0x8>
 8018f14:	4770      	bx	lr
 8018f16:	bf00      	nop
 8018f18:	00000000 	.word	0x00000000
 8018f1c:	7ff80000 	.word	0x7ff80000

08018f20 <quorem>:
 8018f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f24:	6903      	ldr	r3, [r0, #16]
 8018f26:	690c      	ldr	r4, [r1, #16]
 8018f28:	42a3      	cmp	r3, r4
 8018f2a:	4607      	mov	r7, r0
 8018f2c:	db7e      	blt.n	801902c <quorem+0x10c>
 8018f2e:	3c01      	subs	r4, #1
 8018f30:	f101 0814 	add.w	r8, r1, #20
 8018f34:	00a3      	lsls	r3, r4, #2
 8018f36:	f100 0514 	add.w	r5, r0, #20
 8018f3a:	9300      	str	r3, [sp, #0]
 8018f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f40:	9301      	str	r3, [sp, #4]
 8018f42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018f52:	fbb2 f6f3 	udiv	r6, r2, r3
 8018f56:	d32e      	bcc.n	8018fb6 <quorem+0x96>
 8018f58:	f04f 0a00 	mov.w	sl, #0
 8018f5c:	46c4      	mov	ip, r8
 8018f5e:	46ae      	mov	lr, r5
 8018f60:	46d3      	mov	fp, sl
 8018f62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018f66:	b298      	uxth	r0, r3
 8018f68:	fb06 a000 	mla	r0, r6, r0, sl
 8018f6c:	0c02      	lsrs	r2, r0, #16
 8018f6e:	0c1b      	lsrs	r3, r3, #16
 8018f70:	fb06 2303 	mla	r3, r6, r3, r2
 8018f74:	f8de 2000 	ldr.w	r2, [lr]
 8018f78:	b280      	uxth	r0, r0
 8018f7a:	b292      	uxth	r2, r2
 8018f7c:	1a12      	subs	r2, r2, r0
 8018f7e:	445a      	add	r2, fp
 8018f80:	f8de 0000 	ldr.w	r0, [lr]
 8018f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018f88:	b29b      	uxth	r3, r3
 8018f8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8018f8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018f92:	b292      	uxth	r2, r2
 8018f94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018f98:	45e1      	cmp	r9, ip
 8018f9a:	f84e 2b04 	str.w	r2, [lr], #4
 8018f9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018fa2:	d2de      	bcs.n	8018f62 <quorem+0x42>
 8018fa4:	9b00      	ldr	r3, [sp, #0]
 8018fa6:	58eb      	ldr	r3, [r5, r3]
 8018fa8:	b92b      	cbnz	r3, 8018fb6 <quorem+0x96>
 8018faa:	9b01      	ldr	r3, [sp, #4]
 8018fac:	3b04      	subs	r3, #4
 8018fae:	429d      	cmp	r5, r3
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	d32f      	bcc.n	8019014 <quorem+0xf4>
 8018fb4:	613c      	str	r4, [r7, #16]
 8018fb6:	4638      	mov	r0, r7
 8018fb8:	f001 fca0 	bl	801a8fc <__mcmp>
 8018fbc:	2800      	cmp	r0, #0
 8018fbe:	db25      	blt.n	801900c <quorem+0xec>
 8018fc0:	4629      	mov	r1, r5
 8018fc2:	2000      	movs	r0, #0
 8018fc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8018fc8:	f8d1 c000 	ldr.w	ip, [r1]
 8018fcc:	fa1f fe82 	uxth.w	lr, r2
 8018fd0:	fa1f f38c 	uxth.w	r3, ip
 8018fd4:	eba3 030e 	sub.w	r3, r3, lr
 8018fd8:	4403      	add	r3, r0
 8018fda:	0c12      	lsrs	r2, r2, #16
 8018fdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018fe0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fea:	45c1      	cmp	r9, r8
 8018fec:	f841 3b04 	str.w	r3, [r1], #4
 8018ff0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018ff4:	d2e6      	bcs.n	8018fc4 <quorem+0xa4>
 8018ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018ffe:	b922      	cbnz	r2, 801900a <quorem+0xea>
 8019000:	3b04      	subs	r3, #4
 8019002:	429d      	cmp	r5, r3
 8019004:	461a      	mov	r2, r3
 8019006:	d30b      	bcc.n	8019020 <quorem+0x100>
 8019008:	613c      	str	r4, [r7, #16]
 801900a:	3601      	adds	r6, #1
 801900c:	4630      	mov	r0, r6
 801900e:	b003      	add	sp, #12
 8019010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019014:	6812      	ldr	r2, [r2, #0]
 8019016:	3b04      	subs	r3, #4
 8019018:	2a00      	cmp	r2, #0
 801901a:	d1cb      	bne.n	8018fb4 <quorem+0x94>
 801901c:	3c01      	subs	r4, #1
 801901e:	e7c6      	b.n	8018fae <quorem+0x8e>
 8019020:	6812      	ldr	r2, [r2, #0]
 8019022:	3b04      	subs	r3, #4
 8019024:	2a00      	cmp	r2, #0
 8019026:	d1ef      	bne.n	8019008 <quorem+0xe8>
 8019028:	3c01      	subs	r4, #1
 801902a:	e7ea      	b.n	8019002 <quorem+0xe2>
 801902c:	2000      	movs	r0, #0
 801902e:	e7ee      	b.n	801900e <quorem+0xee>

08019030 <_dtoa_r>:
 8019030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019034:	ed2d 8b02 	vpush	{d8}
 8019038:	69c7      	ldr	r7, [r0, #28]
 801903a:	b091      	sub	sp, #68	@ 0x44
 801903c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019040:	ec55 4b10 	vmov	r4, r5, d0
 8019044:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019046:	9107      	str	r1, [sp, #28]
 8019048:	4681      	mov	r9, r0
 801904a:	9209      	str	r2, [sp, #36]	@ 0x24
 801904c:	930d      	str	r3, [sp, #52]	@ 0x34
 801904e:	b97f      	cbnz	r7, 8019070 <_dtoa_r+0x40>
 8019050:	2010      	movs	r0, #16
 8019052:	f001 f8c7 	bl	801a1e4 <malloc>
 8019056:	4602      	mov	r2, r0
 8019058:	f8c9 001c 	str.w	r0, [r9, #28]
 801905c:	b920      	cbnz	r0, 8019068 <_dtoa_r+0x38>
 801905e:	4ba0      	ldr	r3, [pc, #640]	@ (80192e0 <_dtoa_r+0x2b0>)
 8019060:	21ef      	movs	r1, #239	@ 0xef
 8019062:	48a0      	ldr	r0, [pc, #640]	@ (80192e4 <_dtoa_r+0x2b4>)
 8019064:	f002 f870 	bl	801b148 <__assert_func>
 8019068:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801906c:	6007      	str	r7, [r0, #0]
 801906e:	60c7      	str	r7, [r0, #12]
 8019070:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019074:	6819      	ldr	r1, [r3, #0]
 8019076:	b159      	cbz	r1, 8019090 <_dtoa_r+0x60>
 8019078:	685a      	ldr	r2, [r3, #4]
 801907a:	604a      	str	r2, [r1, #4]
 801907c:	2301      	movs	r3, #1
 801907e:	4093      	lsls	r3, r2
 8019080:	608b      	str	r3, [r1, #8]
 8019082:	4648      	mov	r0, r9
 8019084:	f001 f9b6 	bl	801a3f4 <_Bfree>
 8019088:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801908c:	2200      	movs	r2, #0
 801908e:	601a      	str	r2, [r3, #0]
 8019090:	1e2b      	subs	r3, r5, #0
 8019092:	bfbb      	ittet	lt
 8019094:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019098:	9303      	strlt	r3, [sp, #12]
 801909a:	2300      	movge	r3, #0
 801909c:	2201      	movlt	r2, #1
 801909e:	bfac      	ite	ge
 80190a0:	6033      	strge	r3, [r6, #0]
 80190a2:	6032      	strlt	r2, [r6, #0]
 80190a4:	4b90      	ldr	r3, [pc, #576]	@ (80192e8 <_dtoa_r+0x2b8>)
 80190a6:	9e03      	ldr	r6, [sp, #12]
 80190a8:	43b3      	bics	r3, r6
 80190aa:	d110      	bne.n	80190ce <_dtoa_r+0x9e>
 80190ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 80190b2:	6013      	str	r3, [r2, #0]
 80190b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80190b8:	4323      	orrs	r3, r4
 80190ba:	f000 84de 	beq.w	8019a7a <_dtoa_r+0xa4a>
 80190be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80190c0:	4f8a      	ldr	r7, [pc, #552]	@ (80192ec <_dtoa_r+0x2bc>)
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	f000 84e0 	beq.w	8019a88 <_dtoa_r+0xa58>
 80190c8:	1cfb      	adds	r3, r7, #3
 80190ca:	f000 bcdb 	b.w	8019a84 <_dtoa_r+0xa54>
 80190ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 80190d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80190d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190da:	d10a      	bne.n	80190f2 <_dtoa_r+0xc2>
 80190dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190de:	2301      	movs	r3, #1
 80190e0:	6013      	str	r3, [r2, #0]
 80190e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80190e4:	b113      	cbz	r3, 80190ec <_dtoa_r+0xbc>
 80190e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80190e8:	4b81      	ldr	r3, [pc, #516]	@ (80192f0 <_dtoa_r+0x2c0>)
 80190ea:	6013      	str	r3, [r2, #0]
 80190ec:	4f81      	ldr	r7, [pc, #516]	@ (80192f4 <_dtoa_r+0x2c4>)
 80190ee:	f000 bccb 	b.w	8019a88 <_dtoa_r+0xa58>
 80190f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80190f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80190f6:	4648      	mov	r0, r9
 80190f8:	eeb0 0b48 	vmov.f64	d0, d8
 80190fc:	f001 fd1e 	bl	801ab3c <__d2b>
 8019100:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019106:	9001      	str	r0, [sp, #4]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d045      	beq.n	8019198 <_dtoa_r+0x168>
 801910c:	eeb0 7b48 	vmov.f64	d7, d8
 8019110:	ee18 1a90 	vmov	r1, s17
 8019114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019118:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801911c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019120:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019124:	2500      	movs	r5, #0
 8019126:	ee07 1a90 	vmov	s15, r1
 801912a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801912e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80192c8 <_dtoa_r+0x298>
 8019132:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019136:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80192d0 <_dtoa_r+0x2a0>
 801913a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801913e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80192d8 <_dtoa_r+0x2a8>
 8019142:	ee07 3a90 	vmov	s15, r3
 8019146:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801914a:	eeb0 7b46 	vmov.f64	d7, d6
 801914e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019152:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019156:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801915e:	ee16 8a90 	vmov	r8, s13
 8019162:	d508      	bpl.n	8019176 <_dtoa_r+0x146>
 8019164:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019168:	eeb4 6b47 	vcmp.f64	d6, d7
 801916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019170:	bf18      	it	ne
 8019172:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019176:	f1b8 0f16 	cmp.w	r8, #22
 801917a:	d82b      	bhi.n	80191d4 <_dtoa_r+0x1a4>
 801917c:	495e      	ldr	r1, [pc, #376]	@ (80192f8 <_dtoa_r+0x2c8>)
 801917e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019182:	ed91 7b00 	vldr	d7, [r1]
 8019186:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801918e:	d501      	bpl.n	8019194 <_dtoa_r+0x164>
 8019190:	f108 38ff 	add.w	r8, r8, #4294967295
 8019194:	2100      	movs	r1, #0
 8019196:	e01e      	b.n	80191d6 <_dtoa_r+0x1a6>
 8019198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801919a:	4413      	add	r3, r2
 801919c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80191a0:	2920      	cmp	r1, #32
 80191a2:	bfc1      	itttt	gt
 80191a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80191a8:	408e      	lslgt	r6, r1
 80191aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80191ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 80191b2:	bfd6      	itet	le
 80191b4:	f1c1 0120 	rsble	r1, r1, #32
 80191b8:	4331      	orrgt	r1, r6
 80191ba:	fa04 f101 	lslle.w	r1, r4, r1
 80191be:	ee07 1a90 	vmov	s15, r1
 80191c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80191c6:	3b01      	subs	r3, #1
 80191c8:	ee17 1a90 	vmov	r1, s15
 80191cc:	2501      	movs	r5, #1
 80191ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80191d2:	e7a8      	b.n	8019126 <_dtoa_r+0xf6>
 80191d4:	2101      	movs	r1, #1
 80191d6:	1ad2      	subs	r2, r2, r3
 80191d8:	1e53      	subs	r3, r2, #1
 80191da:	9306      	str	r3, [sp, #24]
 80191dc:	bf45      	ittet	mi
 80191de:	f1c2 0301 	rsbmi	r3, r2, #1
 80191e2:	9305      	strmi	r3, [sp, #20]
 80191e4:	2300      	movpl	r3, #0
 80191e6:	2300      	movmi	r3, #0
 80191e8:	bf4c      	ite	mi
 80191ea:	9306      	strmi	r3, [sp, #24]
 80191ec:	9305      	strpl	r3, [sp, #20]
 80191ee:	f1b8 0f00 	cmp.w	r8, #0
 80191f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80191f4:	db18      	blt.n	8019228 <_dtoa_r+0x1f8>
 80191f6:	9b06      	ldr	r3, [sp, #24]
 80191f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80191fc:	4443      	add	r3, r8
 80191fe:	9306      	str	r3, [sp, #24]
 8019200:	2300      	movs	r3, #0
 8019202:	9a07      	ldr	r2, [sp, #28]
 8019204:	2a09      	cmp	r2, #9
 8019206:	d849      	bhi.n	801929c <_dtoa_r+0x26c>
 8019208:	2a05      	cmp	r2, #5
 801920a:	bfc4      	itt	gt
 801920c:	3a04      	subgt	r2, #4
 801920e:	9207      	strgt	r2, [sp, #28]
 8019210:	9a07      	ldr	r2, [sp, #28]
 8019212:	f1a2 0202 	sub.w	r2, r2, #2
 8019216:	bfcc      	ite	gt
 8019218:	2400      	movgt	r4, #0
 801921a:	2401      	movle	r4, #1
 801921c:	2a03      	cmp	r2, #3
 801921e:	d848      	bhi.n	80192b2 <_dtoa_r+0x282>
 8019220:	e8df f002 	tbb	[pc, r2]
 8019224:	3a2c2e0b 	.word	0x3a2c2e0b
 8019228:	9b05      	ldr	r3, [sp, #20]
 801922a:	2200      	movs	r2, #0
 801922c:	eba3 0308 	sub.w	r3, r3, r8
 8019230:	9305      	str	r3, [sp, #20]
 8019232:	920a      	str	r2, [sp, #40]	@ 0x28
 8019234:	f1c8 0300 	rsb	r3, r8, #0
 8019238:	e7e3      	b.n	8019202 <_dtoa_r+0x1d2>
 801923a:	2200      	movs	r2, #0
 801923c:	9208      	str	r2, [sp, #32]
 801923e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019240:	2a00      	cmp	r2, #0
 8019242:	dc39      	bgt.n	80192b8 <_dtoa_r+0x288>
 8019244:	f04f 0b01 	mov.w	fp, #1
 8019248:	46da      	mov	sl, fp
 801924a:	465a      	mov	r2, fp
 801924c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019250:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019254:	2100      	movs	r1, #0
 8019256:	2004      	movs	r0, #4
 8019258:	f100 0614 	add.w	r6, r0, #20
 801925c:	4296      	cmp	r6, r2
 801925e:	d930      	bls.n	80192c2 <_dtoa_r+0x292>
 8019260:	6079      	str	r1, [r7, #4]
 8019262:	4648      	mov	r0, r9
 8019264:	9304      	str	r3, [sp, #16]
 8019266:	f001 f885 	bl	801a374 <_Balloc>
 801926a:	9b04      	ldr	r3, [sp, #16]
 801926c:	4607      	mov	r7, r0
 801926e:	2800      	cmp	r0, #0
 8019270:	d146      	bne.n	8019300 <_dtoa_r+0x2d0>
 8019272:	4b22      	ldr	r3, [pc, #136]	@ (80192fc <_dtoa_r+0x2cc>)
 8019274:	4602      	mov	r2, r0
 8019276:	f240 11af 	movw	r1, #431	@ 0x1af
 801927a:	e6f2      	b.n	8019062 <_dtoa_r+0x32>
 801927c:	2201      	movs	r2, #1
 801927e:	e7dd      	b.n	801923c <_dtoa_r+0x20c>
 8019280:	2200      	movs	r2, #0
 8019282:	9208      	str	r2, [sp, #32]
 8019284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019286:	eb08 0b02 	add.w	fp, r8, r2
 801928a:	f10b 0a01 	add.w	sl, fp, #1
 801928e:	4652      	mov	r2, sl
 8019290:	2a01      	cmp	r2, #1
 8019292:	bfb8      	it	lt
 8019294:	2201      	movlt	r2, #1
 8019296:	e7db      	b.n	8019250 <_dtoa_r+0x220>
 8019298:	2201      	movs	r2, #1
 801929a:	e7f2      	b.n	8019282 <_dtoa_r+0x252>
 801929c:	2401      	movs	r4, #1
 801929e:	2200      	movs	r2, #0
 80192a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80192a4:	f04f 3bff 	mov.w	fp, #4294967295
 80192a8:	2100      	movs	r1, #0
 80192aa:	46da      	mov	sl, fp
 80192ac:	2212      	movs	r2, #18
 80192ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80192b0:	e7ce      	b.n	8019250 <_dtoa_r+0x220>
 80192b2:	2201      	movs	r2, #1
 80192b4:	9208      	str	r2, [sp, #32]
 80192b6:	e7f5      	b.n	80192a4 <_dtoa_r+0x274>
 80192b8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80192bc:	46da      	mov	sl, fp
 80192be:	465a      	mov	r2, fp
 80192c0:	e7c6      	b.n	8019250 <_dtoa_r+0x220>
 80192c2:	3101      	adds	r1, #1
 80192c4:	0040      	lsls	r0, r0, #1
 80192c6:	e7c7      	b.n	8019258 <_dtoa_r+0x228>
 80192c8:	636f4361 	.word	0x636f4361
 80192cc:	3fd287a7 	.word	0x3fd287a7
 80192d0:	8b60c8b3 	.word	0x8b60c8b3
 80192d4:	3fc68a28 	.word	0x3fc68a28
 80192d8:	509f79fb 	.word	0x509f79fb
 80192dc:	3fd34413 	.word	0x3fd34413
 80192e0:	0801cd7a 	.word	0x0801cd7a
 80192e4:	0801cd91 	.word	0x0801cd91
 80192e8:	7ff00000 	.word	0x7ff00000
 80192ec:	0801cd76 	.word	0x0801cd76
 80192f0:	0801cd42 	.word	0x0801cd42
 80192f4:	0801cd41 	.word	0x0801cd41
 80192f8:	0801cee8 	.word	0x0801cee8
 80192fc:	0801cde9 	.word	0x0801cde9
 8019300:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019304:	f1ba 0f0e 	cmp.w	sl, #14
 8019308:	6010      	str	r0, [r2, #0]
 801930a:	d86f      	bhi.n	80193ec <_dtoa_r+0x3bc>
 801930c:	2c00      	cmp	r4, #0
 801930e:	d06d      	beq.n	80193ec <_dtoa_r+0x3bc>
 8019310:	f1b8 0f00 	cmp.w	r8, #0
 8019314:	f340 80c2 	ble.w	801949c <_dtoa_r+0x46c>
 8019318:	4aca      	ldr	r2, [pc, #808]	@ (8019644 <_dtoa_r+0x614>)
 801931a:	f008 010f 	and.w	r1, r8, #15
 801931e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019322:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019326:	ed92 7b00 	vldr	d7, [r2]
 801932a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801932e:	f000 80a9 	beq.w	8019484 <_dtoa_r+0x454>
 8019332:	4ac5      	ldr	r2, [pc, #788]	@ (8019648 <_dtoa_r+0x618>)
 8019334:	ed92 6b08 	vldr	d6, [r2, #32]
 8019338:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801933c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019340:	f001 010f 	and.w	r1, r1, #15
 8019344:	2203      	movs	r2, #3
 8019346:	48c0      	ldr	r0, [pc, #768]	@ (8019648 <_dtoa_r+0x618>)
 8019348:	2900      	cmp	r1, #0
 801934a:	f040 809d 	bne.w	8019488 <_dtoa_r+0x458>
 801934e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019352:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019356:	ed8d 7b02 	vstr	d7, [sp, #8]
 801935a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801935c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019360:	2900      	cmp	r1, #0
 8019362:	f000 80c1 	beq.w	80194e8 <_dtoa_r+0x4b8>
 8019366:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801936a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019372:	f140 80b9 	bpl.w	80194e8 <_dtoa_r+0x4b8>
 8019376:	f1ba 0f00 	cmp.w	sl, #0
 801937a:	f000 80b5 	beq.w	80194e8 <_dtoa_r+0x4b8>
 801937e:	f1bb 0f00 	cmp.w	fp, #0
 8019382:	dd31      	ble.n	80193e8 <_dtoa_r+0x3b8>
 8019384:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019388:	ee27 7b06 	vmul.f64	d7, d7, d6
 801938c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019390:	f108 31ff 	add.w	r1, r8, #4294967295
 8019394:	9104      	str	r1, [sp, #16]
 8019396:	3201      	adds	r2, #1
 8019398:	465c      	mov	r4, fp
 801939a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801939e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80193a2:	ee07 2a90 	vmov	s15, r2
 80193a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80193aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80193ae:	ee15 2a90 	vmov	r2, s11
 80193b2:	ec51 0b15 	vmov	r0, r1, d5
 80193b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80193ba:	2c00      	cmp	r4, #0
 80193bc:	f040 8098 	bne.w	80194f0 <_dtoa_r+0x4c0>
 80193c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80193c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80193c8:	ec41 0b17 	vmov	d7, r0, r1
 80193cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193d4:	f300 8261 	bgt.w	801989a <_dtoa_r+0x86a>
 80193d8:	eeb1 7b47 	vneg.f64	d7, d7
 80193dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e4:	f100 80f5 	bmi.w	80195d2 <_dtoa_r+0x5a2>
 80193e8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80193ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80193ee:	2a00      	cmp	r2, #0
 80193f0:	f2c0 812c 	blt.w	801964c <_dtoa_r+0x61c>
 80193f4:	f1b8 0f0e 	cmp.w	r8, #14
 80193f8:	f300 8128 	bgt.w	801964c <_dtoa_r+0x61c>
 80193fc:	4b91      	ldr	r3, [pc, #580]	@ (8019644 <_dtoa_r+0x614>)
 80193fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019402:	ed93 6b00 	vldr	d6, [r3]
 8019406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019408:	2b00      	cmp	r3, #0
 801940a:	da03      	bge.n	8019414 <_dtoa_r+0x3e4>
 801940c:	f1ba 0f00 	cmp.w	sl, #0
 8019410:	f340 80d2 	ble.w	80195b8 <_dtoa_r+0x588>
 8019414:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019418:	ed9d 7b02 	vldr	d7, [sp, #8]
 801941c:	463e      	mov	r6, r7
 801941e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019422:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019426:	ee15 3a10 	vmov	r3, s10
 801942a:	3330      	adds	r3, #48	@ 0x30
 801942c:	f806 3b01 	strb.w	r3, [r6], #1
 8019430:	1bf3      	subs	r3, r6, r7
 8019432:	459a      	cmp	sl, r3
 8019434:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019438:	eea3 7b46 	vfms.f64	d7, d3, d6
 801943c:	f040 80f8 	bne.w	8019630 <_dtoa_r+0x600>
 8019440:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019444:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801944c:	f300 80dd 	bgt.w	801960a <_dtoa_r+0x5da>
 8019450:	eeb4 7b46 	vcmp.f64	d7, d6
 8019454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019458:	d104      	bne.n	8019464 <_dtoa_r+0x434>
 801945a:	ee15 3a10 	vmov	r3, s10
 801945e:	07db      	lsls	r3, r3, #31
 8019460:	f100 80d3 	bmi.w	801960a <_dtoa_r+0x5da>
 8019464:	9901      	ldr	r1, [sp, #4]
 8019466:	4648      	mov	r0, r9
 8019468:	f000 ffc4 	bl	801a3f4 <_Bfree>
 801946c:	2300      	movs	r3, #0
 801946e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019470:	7033      	strb	r3, [r6, #0]
 8019472:	f108 0301 	add.w	r3, r8, #1
 8019476:	6013      	str	r3, [r2, #0]
 8019478:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801947a:	2b00      	cmp	r3, #0
 801947c:	f000 8304 	beq.w	8019a88 <_dtoa_r+0xa58>
 8019480:	601e      	str	r6, [r3, #0]
 8019482:	e301      	b.n	8019a88 <_dtoa_r+0xa58>
 8019484:	2202      	movs	r2, #2
 8019486:	e75e      	b.n	8019346 <_dtoa_r+0x316>
 8019488:	07cc      	lsls	r4, r1, #31
 801948a:	d504      	bpl.n	8019496 <_dtoa_r+0x466>
 801948c:	ed90 6b00 	vldr	d6, [r0]
 8019490:	3201      	adds	r2, #1
 8019492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019496:	1049      	asrs	r1, r1, #1
 8019498:	3008      	adds	r0, #8
 801949a:	e755      	b.n	8019348 <_dtoa_r+0x318>
 801949c:	d022      	beq.n	80194e4 <_dtoa_r+0x4b4>
 801949e:	f1c8 0100 	rsb	r1, r8, #0
 80194a2:	4a68      	ldr	r2, [pc, #416]	@ (8019644 <_dtoa_r+0x614>)
 80194a4:	f001 000f 	and.w	r0, r1, #15
 80194a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80194ac:	ed92 7b00 	vldr	d7, [r2]
 80194b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80194b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80194b8:	4863      	ldr	r0, [pc, #396]	@ (8019648 <_dtoa_r+0x618>)
 80194ba:	1109      	asrs	r1, r1, #4
 80194bc:	2400      	movs	r4, #0
 80194be:	2202      	movs	r2, #2
 80194c0:	b929      	cbnz	r1, 80194ce <_dtoa_r+0x49e>
 80194c2:	2c00      	cmp	r4, #0
 80194c4:	f43f af49 	beq.w	801935a <_dtoa_r+0x32a>
 80194c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80194cc:	e745      	b.n	801935a <_dtoa_r+0x32a>
 80194ce:	07ce      	lsls	r6, r1, #31
 80194d0:	d505      	bpl.n	80194de <_dtoa_r+0x4ae>
 80194d2:	ed90 6b00 	vldr	d6, [r0]
 80194d6:	3201      	adds	r2, #1
 80194d8:	2401      	movs	r4, #1
 80194da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80194de:	1049      	asrs	r1, r1, #1
 80194e0:	3008      	adds	r0, #8
 80194e2:	e7ed      	b.n	80194c0 <_dtoa_r+0x490>
 80194e4:	2202      	movs	r2, #2
 80194e6:	e738      	b.n	801935a <_dtoa_r+0x32a>
 80194e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80194ec:	4654      	mov	r4, sl
 80194ee:	e754      	b.n	801939a <_dtoa_r+0x36a>
 80194f0:	4a54      	ldr	r2, [pc, #336]	@ (8019644 <_dtoa_r+0x614>)
 80194f2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80194f6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80194fa:	9a08      	ldr	r2, [sp, #32]
 80194fc:	ec41 0b17 	vmov	d7, r0, r1
 8019500:	443c      	add	r4, r7
 8019502:	b34a      	cbz	r2, 8019558 <_dtoa_r+0x528>
 8019504:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8019508:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801950c:	463e      	mov	r6, r7
 801950e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019512:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019516:	ee35 7b47 	vsub.f64	d7, d5, d7
 801951a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801951e:	ee14 2a90 	vmov	r2, s9
 8019522:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019526:	3230      	adds	r2, #48	@ 0x30
 8019528:	ee36 6b45 	vsub.f64	d6, d6, d5
 801952c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019534:	f806 2b01 	strb.w	r2, [r6], #1
 8019538:	d438      	bmi.n	80195ac <_dtoa_r+0x57c>
 801953a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801953e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019546:	d462      	bmi.n	801960e <_dtoa_r+0x5de>
 8019548:	42a6      	cmp	r6, r4
 801954a:	f43f af4d 	beq.w	80193e8 <_dtoa_r+0x3b8>
 801954e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019552:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019556:	e7e0      	b.n	801951a <_dtoa_r+0x4ea>
 8019558:	4621      	mov	r1, r4
 801955a:	463e      	mov	r6, r7
 801955c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019560:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019564:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019568:	ee14 2a90 	vmov	r2, s9
 801956c:	3230      	adds	r2, #48	@ 0x30
 801956e:	f806 2b01 	strb.w	r2, [r6], #1
 8019572:	42a6      	cmp	r6, r4
 8019574:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019578:	ee36 6b45 	vsub.f64	d6, d6, d5
 801957c:	d119      	bne.n	80195b2 <_dtoa_r+0x582>
 801957e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019582:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019586:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801958a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958e:	dc3e      	bgt.n	801960e <_dtoa_r+0x5de>
 8019590:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019594:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801959c:	f57f af24 	bpl.w	80193e8 <_dtoa_r+0x3b8>
 80195a0:	460e      	mov	r6, r1
 80195a2:	3901      	subs	r1, #1
 80195a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80195a8:	2b30      	cmp	r3, #48	@ 0x30
 80195aa:	d0f9      	beq.n	80195a0 <_dtoa_r+0x570>
 80195ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80195b0:	e758      	b.n	8019464 <_dtoa_r+0x434>
 80195b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80195b6:	e7d5      	b.n	8019564 <_dtoa_r+0x534>
 80195b8:	d10b      	bne.n	80195d2 <_dtoa_r+0x5a2>
 80195ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80195be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80195c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80195c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80195ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ce:	f2c0 8161 	blt.w	8019894 <_dtoa_r+0x864>
 80195d2:	2400      	movs	r4, #0
 80195d4:	4625      	mov	r5, r4
 80195d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195d8:	43db      	mvns	r3, r3
 80195da:	9304      	str	r3, [sp, #16]
 80195dc:	463e      	mov	r6, r7
 80195de:	f04f 0800 	mov.w	r8, #0
 80195e2:	4621      	mov	r1, r4
 80195e4:	4648      	mov	r0, r9
 80195e6:	f000 ff05 	bl	801a3f4 <_Bfree>
 80195ea:	2d00      	cmp	r5, #0
 80195ec:	d0de      	beq.n	80195ac <_dtoa_r+0x57c>
 80195ee:	f1b8 0f00 	cmp.w	r8, #0
 80195f2:	d005      	beq.n	8019600 <_dtoa_r+0x5d0>
 80195f4:	45a8      	cmp	r8, r5
 80195f6:	d003      	beq.n	8019600 <_dtoa_r+0x5d0>
 80195f8:	4641      	mov	r1, r8
 80195fa:	4648      	mov	r0, r9
 80195fc:	f000 fefa 	bl	801a3f4 <_Bfree>
 8019600:	4629      	mov	r1, r5
 8019602:	4648      	mov	r0, r9
 8019604:	f000 fef6 	bl	801a3f4 <_Bfree>
 8019608:	e7d0      	b.n	80195ac <_dtoa_r+0x57c>
 801960a:	f8cd 8010 	str.w	r8, [sp, #16]
 801960e:	4633      	mov	r3, r6
 8019610:	461e      	mov	r6, r3
 8019612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019616:	2a39      	cmp	r2, #57	@ 0x39
 8019618:	d106      	bne.n	8019628 <_dtoa_r+0x5f8>
 801961a:	429f      	cmp	r7, r3
 801961c:	d1f8      	bne.n	8019610 <_dtoa_r+0x5e0>
 801961e:	9a04      	ldr	r2, [sp, #16]
 8019620:	3201      	adds	r2, #1
 8019622:	9204      	str	r2, [sp, #16]
 8019624:	2230      	movs	r2, #48	@ 0x30
 8019626:	703a      	strb	r2, [r7, #0]
 8019628:	781a      	ldrb	r2, [r3, #0]
 801962a:	3201      	adds	r2, #1
 801962c:	701a      	strb	r2, [r3, #0]
 801962e:	e7bd      	b.n	80195ac <_dtoa_r+0x57c>
 8019630:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019634:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963c:	f47f aeef 	bne.w	801941e <_dtoa_r+0x3ee>
 8019640:	e710      	b.n	8019464 <_dtoa_r+0x434>
 8019642:	bf00      	nop
 8019644:	0801cee8 	.word	0x0801cee8
 8019648:	0801cec0 	.word	0x0801cec0
 801964c:	9908      	ldr	r1, [sp, #32]
 801964e:	2900      	cmp	r1, #0
 8019650:	f000 80e3 	beq.w	801981a <_dtoa_r+0x7ea>
 8019654:	9907      	ldr	r1, [sp, #28]
 8019656:	2901      	cmp	r1, #1
 8019658:	f300 80c8 	bgt.w	80197ec <_dtoa_r+0x7bc>
 801965c:	2d00      	cmp	r5, #0
 801965e:	f000 80c1 	beq.w	80197e4 <_dtoa_r+0x7b4>
 8019662:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019666:	9e05      	ldr	r6, [sp, #20]
 8019668:	461c      	mov	r4, r3
 801966a:	9304      	str	r3, [sp, #16]
 801966c:	9b05      	ldr	r3, [sp, #20]
 801966e:	4413      	add	r3, r2
 8019670:	9305      	str	r3, [sp, #20]
 8019672:	9b06      	ldr	r3, [sp, #24]
 8019674:	2101      	movs	r1, #1
 8019676:	4413      	add	r3, r2
 8019678:	4648      	mov	r0, r9
 801967a:	9306      	str	r3, [sp, #24]
 801967c:	f000 ffb8 	bl	801a5f0 <__i2b>
 8019680:	9b04      	ldr	r3, [sp, #16]
 8019682:	4605      	mov	r5, r0
 8019684:	b166      	cbz	r6, 80196a0 <_dtoa_r+0x670>
 8019686:	9a06      	ldr	r2, [sp, #24]
 8019688:	2a00      	cmp	r2, #0
 801968a:	dd09      	ble.n	80196a0 <_dtoa_r+0x670>
 801968c:	42b2      	cmp	r2, r6
 801968e:	9905      	ldr	r1, [sp, #20]
 8019690:	bfa8      	it	ge
 8019692:	4632      	movge	r2, r6
 8019694:	1a89      	subs	r1, r1, r2
 8019696:	9105      	str	r1, [sp, #20]
 8019698:	9906      	ldr	r1, [sp, #24]
 801969a:	1ab6      	subs	r6, r6, r2
 801969c:	1a8a      	subs	r2, r1, r2
 801969e:	9206      	str	r2, [sp, #24]
 80196a0:	b1fb      	cbz	r3, 80196e2 <_dtoa_r+0x6b2>
 80196a2:	9a08      	ldr	r2, [sp, #32]
 80196a4:	2a00      	cmp	r2, #0
 80196a6:	f000 80bc 	beq.w	8019822 <_dtoa_r+0x7f2>
 80196aa:	b19c      	cbz	r4, 80196d4 <_dtoa_r+0x6a4>
 80196ac:	4629      	mov	r1, r5
 80196ae:	4622      	mov	r2, r4
 80196b0:	4648      	mov	r0, r9
 80196b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80196b4:	f001 f85c 	bl	801a770 <__pow5mult>
 80196b8:	9a01      	ldr	r2, [sp, #4]
 80196ba:	4601      	mov	r1, r0
 80196bc:	4605      	mov	r5, r0
 80196be:	4648      	mov	r0, r9
 80196c0:	f000 ffac 	bl	801a61c <__multiply>
 80196c4:	9901      	ldr	r1, [sp, #4]
 80196c6:	9004      	str	r0, [sp, #16]
 80196c8:	4648      	mov	r0, r9
 80196ca:	f000 fe93 	bl	801a3f4 <_Bfree>
 80196ce:	9a04      	ldr	r2, [sp, #16]
 80196d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80196d2:	9201      	str	r2, [sp, #4]
 80196d4:	1b1a      	subs	r2, r3, r4
 80196d6:	d004      	beq.n	80196e2 <_dtoa_r+0x6b2>
 80196d8:	9901      	ldr	r1, [sp, #4]
 80196da:	4648      	mov	r0, r9
 80196dc:	f001 f848 	bl	801a770 <__pow5mult>
 80196e0:	9001      	str	r0, [sp, #4]
 80196e2:	2101      	movs	r1, #1
 80196e4:	4648      	mov	r0, r9
 80196e6:	f000 ff83 	bl	801a5f0 <__i2b>
 80196ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80196ec:	4604      	mov	r4, r0
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f000 81d0 	beq.w	8019a94 <_dtoa_r+0xa64>
 80196f4:	461a      	mov	r2, r3
 80196f6:	4601      	mov	r1, r0
 80196f8:	4648      	mov	r0, r9
 80196fa:	f001 f839 	bl	801a770 <__pow5mult>
 80196fe:	9b07      	ldr	r3, [sp, #28]
 8019700:	2b01      	cmp	r3, #1
 8019702:	4604      	mov	r4, r0
 8019704:	f300 8095 	bgt.w	8019832 <_dtoa_r+0x802>
 8019708:	9b02      	ldr	r3, [sp, #8]
 801970a:	2b00      	cmp	r3, #0
 801970c:	f040 808b 	bne.w	8019826 <_dtoa_r+0x7f6>
 8019710:	9b03      	ldr	r3, [sp, #12]
 8019712:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019716:	2a00      	cmp	r2, #0
 8019718:	f040 8087 	bne.w	801982a <_dtoa_r+0x7fa>
 801971c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019720:	0d12      	lsrs	r2, r2, #20
 8019722:	0512      	lsls	r2, r2, #20
 8019724:	2a00      	cmp	r2, #0
 8019726:	f000 8082 	beq.w	801982e <_dtoa_r+0x7fe>
 801972a:	9b05      	ldr	r3, [sp, #20]
 801972c:	3301      	adds	r3, #1
 801972e:	9305      	str	r3, [sp, #20]
 8019730:	9b06      	ldr	r3, [sp, #24]
 8019732:	3301      	adds	r3, #1
 8019734:	9306      	str	r3, [sp, #24]
 8019736:	2301      	movs	r3, #1
 8019738:	930b      	str	r3, [sp, #44]	@ 0x2c
 801973a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801973c:	2b00      	cmp	r3, #0
 801973e:	f000 81af 	beq.w	8019aa0 <_dtoa_r+0xa70>
 8019742:	6922      	ldr	r2, [r4, #16]
 8019744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019748:	6910      	ldr	r0, [r2, #16]
 801974a:	f000 ff05 	bl	801a558 <__hi0bits>
 801974e:	f1c0 0020 	rsb	r0, r0, #32
 8019752:	9b06      	ldr	r3, [sp, #24]
 8019754:	4418      	add	r0, r3
 8019756:	f010 001f 	ands.w	r0, r0, #31
 801975a:	d076      	beq.n	801984a <_dtoa_r+0x81a>
 801975c:	f1c0 0220 	rsb	r2, r0, #32
 8019760:	2a04      	cmp	r2, #4
 8019762:	dd69      	ble.n	8019838 <_dtoa_r+0x808>
 8019764:	9b05      	ldr	r3, [sp, #20]
 8019766:	f1c0 001c 	rsb	r0, r0, #28
 801976a:	4403      	add	r3, r0
 801976c:	9305      	str	r3, [sp, #20]
 801976e:	9b06      	ldr	r3, [sp, #24]
 8019770:	4406      	add	r6, r0
 8019772:	4403      	add	r3, r0
 8019774:	9306      	str	r3, [sp, #24]
 8019776:	9b05      	ldr	r3, [sp, #20]
 8019778:	2b00      	cmp	r3, #0
 801977a:	dd05      	ble.n	8019788 <_dtoa_r+0x758>
 801977c:	9901      	ldr	r1, [sp, #4]
 801977e:	461a      	mov	r2, r3
 8019780:	4648      	mov	r0, r9
 8019782:	f001 f84f 	bl	801a824 <__lshift>
 8019786:	9001      	str	r0, [sp, #4]
 8019788:	9b06      	ldr	r3, [sp, #24]
 801978a:	2b00      	cmp	r3, #0
 801978c:	dd05      	ble.n	801979a <_dtoa_r+0x76a>
 801978e:	4621      	mov	r1, r4
 8019790:	461a      	mov	r2, r3
 8019792:	4648      	mov	r0, r9
 8019794:	f001 f846 	bl	801a824 <__lshift>
 8019798:	4604      	mov	r4, r0
 801979a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801979c:	2b00      	cmp	r3, #0
 801979e:	d056      	beq.n	801984e <_dtoa_r+0x81e>
 80197a0:	9801      	ldr	r0, [sp, #4]
 80197a2:	4621      	mov	r1, r4
 80197a4:	f001 f8aa 	bl	801a8fc <__mcmp>
 80197a8:	2800      	cmp	r0, #0
 80197aa:	da50      	bge.n	801984e <_dtoa_r+0x81e>
 80197ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80197b0:	9304      	str	r3, [sp, #16]
 80197b2:	9901      	ldr	r1, [sp, #4]
 80197b4:	2300      	movs	r3, #0
 80197b6:	220a      	movs	r2, #10
 80197b8:	4648      	mov	r0, r9
 80197ba:	f000 fe3d 	bl	801a438 <__multadd>
 80197be:	9b08      	ldr	r3, [sp, #32]
 80197c0:	9001      	str	r0, [sp, #4]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f000 816e 	beq.w	8019aa4 <_dtoa_r+0xa74>
 80197c8:	4629      	mov	r1, r5
 80197ca:	2300      	movs	r3, #0
 80197cc:	220a      	movs	r2, #10
 80197ce:	4648      	mov	r0, r9
 80197d0:	f000 fe32 	bl	801a438 <__multadd>
 80197d4:	f1bb 0f00 	cmp.w	fp, #0
 80197d8:	4605      	mov	r5, r0
 80197da:	dc64      	bgt.n	80198a6 <_dtoa_r+0x876>
 80197dc:	9b07      	ldr	r3, [sp, #28]
 80197de:	2b02      	cmp	r3, #2
 80197e0:	dc3e      	bgt.n	8019860 <_dtoa_r+0x830>
 80197e2:	e060      	b.n	80198a6 <_dtoa_r+0x876>
 80197e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80197e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80197ea:	e73c      	b.n	8019666 <_dtoa_r+0x636>
 80197ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 80197f0:	42a3      	cmp	r3, r4
 80197f2:	bfbf      	itttt	lt
 80197f4:	1ae2      	sublt	r2, r4, r3
 80197f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80197f8:	189b      	addlt	r3, r3, r2
 80197fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80197fc:	bfae      	itee	ge
 80197fe:	1b1c      	subge	r4, r3, r4
 8019800:	4623      	movlt	r3, r4
 8019802:	2400      	movlt	r4, #0
 8019804:	f1ba 0f00 	cmp.w	sl, #0
 8019808:	bfb5      	itete	lt
 801980a:	9a05      	ldrlt	r2, [sp, #20]
 801980c:	9e05      	ldrge	r6, [sp, #20]
 801980e:	eba2 060a 	sublt.w	r6, r2, sl
 8019812:	4652      	movge	r2, sl
 8019814:	bfb8      	it	lt
 8019816:	2200      	movlt	r2, #0
 8019818:	e727      	b.n	801966a <_dtoa_r+0x63a>
 801981a:	9e05      	ldr	r6, [sp, #20]
 801981c:	9d08      	ldr	r5, [sp, #32]
 801981e:	461c      	mov	r4, r3
 8019820:	e730      	b.n	8019684 <_dtoa_r+0x654>
 8019822:	461a      	mov	r2, r3
 8019824:	e758      	b.n	80196d8 <_dtoa_r+0x6a8>
 8019826:	2300      	movs	r3, #0
 8019828:	e786      	b.n	8019738 <_dtoa_r+0x708>
 801982a:	9b02      	ldr	r3, [sp, #8]
 801982c:	e784      	b.n	8019738 <_dtoa_r+0x708>
 801982e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019830:	e783      	b.n	801973a <_dtoa_r+0x70a>
 8019832:	2300      	movs	r3, #0
 8019834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019836:	e784      	b.n	8019742 <_dtoa_r+0x712>
 8019838:	d09d      	beq.n	8019776 <_dtoa_r+0x746>
 801983a:	9b05      	ldr	r3, [sp, #20]
 801983c:	321c      	adds	r2, #28
 801983e:	4413      	add	r3, r2
 8019840:	9305      	str	r3, [sp, #20]
 8019842:	9b06      	ldr	r3, [sp, #24]
 8019844:	4416      	add	r6, r2
 8019846:	4413      	add	r3, r2
 8019848:	e794      	b.n	8019774 <_dtoa_r+0x744>
 801984a:	4602      	mov	r2, r0
 801984c:	e7f5      	b.n	801983a <_dtoa_r+0x80a>
 801984e:	f1ba 0f00 	cmp.w	sl, #0
 8019852:	f8cd 8010 	str.w	r8, [sp, #16]
 8019856:	46d3      	mov	fp, sl
 8019858:	dc21      	bgt.n	801989e <_dtoa_r+0x86e>
 801985a:	9b07      	ldr	r3, [sp, #28]
 801985c:	2b02      	cmp	r3, #2
 801985e:	dd1e      	ble.n	801989e <_dtoa_r+0x86e>
 8019860:	f1bb 0f00 	cmp.w	fp, #0
 8019864:	f47f aeb7 	bne.w	80195d6 <_dtoa_r+0x5a6>
 8019868:	4621      	mov	r1, r4
 801986a:	465b      	mov	r3, fp
 801986c:	2205      	movs	r2, #5
 801986e:	4648      	mov	r0, r9
 8019870:	f000 fde2 	bl	801a438 <__multadd>
 8019874:	4601      	mov	r1, r0
 8019876:	4604      	mov	r4, r0
 8019878:	9801      	ldr	r0, [sp, #4]
 801987a:	f001 f83f 	bl	801a8fc <__mcmp>
 801987e:	2800      	cmp	r0, #0
 8019880:	f77f aea9 	ble.w	80195d6 <_dtoa_r+0x5a6>
 8019884:	463e      	mov	r6, r7
 8019886:	2331      	movs	r3, #49	@ 0x31
 8019888:	f806 3b01 	strb.w	r3, [r6], #1
 801988c:	9b04      	ldr	r3, [sp, #16]
 801988e:	3301      	adds	r3, #1
 8019890:	9304      	str	r3, [sp, #16]
 8019892:	e6a4      	b.n	80195de <_dtoa_r+0x5ae>
 8019894:	f8cd 8010 	str.w	r8, [sp, #16]
 8019898:	4654      	mov	r4, sl
 801989a:	4625      	mov	r5, r4
 801989c:	e7f2      	b.n	8019884 <_dtoa_r+0x854>
 801989e:	9b08      	ldr	r3, [sp, #32]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	f000 8103 	beq.w	8019aac <_dtoa_r+0xa7c>
 80198a6:	2e00      	cmp	r6, #0
 80198a8:	dd05      	ble.n	80198b6 <_dtoa_r+0x886>
 80198aa:	4629      	mov	r1, r5
 80198ac:	4632      	mov	r2, r6
 80198ae:	4648      	mov	r0, r9
 80198b0:	f000 ffb8 	bl	801a824 <__lshift>
 80198b4:	4605      	mov	r5, r0
 80198b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d058      	beq.n	801996e <_dtoa_r+0x93e>
 80198bc:	6869      	ldr	r1, [r5, #4]
 80198be:	4648      	mov	r0, r9
 80198c0:	f000 fd58 	bl	801a374 <_Balloc>
 80198c4:	4606      	mov	r6, r0
 80198c6:	b928      	cbnz	r0, 80198d4 <_dtoa_r+0x8a4>
 80198c8:	4b82      	ldr	r3, [pc, #520]	@ (8019ad4 <_dtoa_r+0xaa4>)
 80198ca:	4602      	mov	r2, r0
 80198cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80198d0:	f7ff bbc7 	b.w	8019062 <_dtoa_r+0x32>
 80198d4:	692a      	ldr	r2, [r5, #16]
 80198d6:	3202      	adds	r2, #2
 80198d8:	0092      	lsls	r2, r2, #2
 80198da:	f105 010c 	add.w	r1, r5, #12
 80198de:	300c      	adds	r0, #12
 80198e0:	f7ff fb05 	bl	8018eee <memcpy>
 80198e4:	2201      	movs	r2, #1
 80198e6:	4631      	mov	r1, r6
 80198e8:	4648      	mov	r0, r9
 80198ea:	f000 ff9b 	bl	801a824 <__lshift>
 80198ee:	1c7b      	adds	r3, r7, #1
 80198f0:	9305      	str	r3, [sp, #20]
 80198f2:	eb07 030b 	add.w	r3, r7, fp
 80198f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80198f8:	9b02      	ldr	r3, [sp, #8]
 80198fa:	f003 0301 	and.w	r3, r3, #1
 80198fe:	46a8      	mov	r8, r5
 8019900:	9308      	str	r3, [sp, #32]
 8019902:	4605      	mov	r5, r0
 8019904:	9b05      	ldr	r3, [sp, #20]
 8019906:	9801      	ldr	r0, [sp, #4]
 8019908:	4621      	mov	r1, r4
 801990a:	f103 3bff 	add.w	fp, r3, #4294967295
 801990e:	f7ff fb07 	bl	8018f20 <quorem>
 8019912:	4641      	mov	r1, r8
 8019914:	9002      	str	r0, [sp, #8]
 8019916:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801991a:	9801      	ldr	r0, [sp, #4]
 801991c:	f000 ffee 	bl	801a8fc <__mcmp>
 8019920:	462a      	mov	r2, r5
 8019922:	9006      	str	r0, [sp, #24]
 8019924:	4621      	mov	r1, r4
 8019926:	4648      	mov	r0, r9
 8019928:	f001 f804 	bl	801a934 <__mdiff>
 801992c:	68c2      	ldr	r2, [r0, #12]
 801992e:	4606      	mov	r6, r0
 8019930:	b9fa      	cbnz	r2, 8019972 <_dtoa_r+0x942>
 8019932:	4601      	mov	r1, r0
 8019934:	9801      	ldr	r0, [sp, #4]
 8019936:	f000 ffe1 	bl	801a8fc <__mcmp>
 801993a:	4602      	mov	r2, r0
 801993c:	4631      	mov	r1, r6
 801993e:	4648      	mov	r0, r9
 8019940:	920a      	str	r2, [sp, #40]	@ 0x28
 8019942:	f000 fd57 	bl	801a3f4 <_Bfree>
 8019946:	9b07      	ldr	r3, [sp, #28]
 8019948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801994a:	9e05      	ldr	r6, [sp, #20]
 801994c:	ea43 0102 	orr.w	r1, r3, r2
 8019950:	9b08      	ldr	r3, [sp, #32]
 8019952:	4319      	orrs	r1, r3
 8019954:	d10f      	bne.n	8019976 <_dtoa_r+0x946>
 8019956:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801995a:	d028      	beq.n	80199ae <_dtoa_r+0x97e>
 801995c:	9b06      	ldr	r3, [sp, #24]
 801995e:	2b00      	cmp	r3, #0
 8019960:	dd02      	ble.n	8019968 <_dtoa_r+0x938>
 8019962:	9b02      	ldr	r3, [sp, #8]
 8019964:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019968:	f88b a000 	strb.w	sl, [fp]
 801996c:	e639      	b.n	80195e2 <_dtoa_r+0x5b2>
 801996e:	4628      	mov	r0, r5
 8019970:	e7bd      	b.n	80198ee <_dtoa_r+0x8be>
 8019972:	2201      	movs	r2, #1
 8019974:	e7e2      	b.n	801993c <_dtoa_r+0x90c>
 8019976:	9b06      	ldr	r3, [sp, #24]
 8019978:	2b00      	cmp	r3, #0
 801997a:	db04      	blt.n	8019986 <_dtoa_r+0x956>
 801997c:	9907      	ldr	r1, [sp, #28]
 801997e:	430b      	orrs	r3, r1
 8019980:	9908      	ldr	r1, [sp, #32]
 8019982:	430b      	orrs	r3, r1
 8019984:	d120      	bne.n	80199c8 <_dtoa_r+0x998>
 8019986:	2a00      	cmp	r2, #0
 8019988:	ddee      	ble.n	8019968 <_dtoa_r+0x938>
 801998a:	9901      	ldr	r1, [sp, #4]
 801998c:	2201      	movs	r2, #1
 801998e:	4648      	mov	r0, r9
 8019990:	f000 ff48 	bl	801a824 <__lshift>
 8019994:	4621      	mov	r1, r4
 8019996:	9001      	str	r0, [sp, #4]
 8019998:	f000 ffb0 	bl	801a8fc <__mcmp>
 801999c:	2800      	cmp	r0, #0
 801999e:	dc03      	bgt.n	80199a8 <_dtoa_r+0x978>
 80199a0:	d1e2      	bne.n	8019968 <_dtoa_r+0x938>
 80199a2:	f01a 0f01 	tst.w	sl, #1
 80199a6:	d0df      	beq.n	8019968 <_dtoa_r+0x938>
 80199a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80199ac:	d1d9      	bne.n	8019962 <_dtoa_r+0x932>
 80199ae:	2339      	movs	r3, #57	@ 0x39
 80199b0:	f88b 3000 	strb.w	r3, [fp]
 80199b4:	4633      	mov	r3, r6
 80199b6:	461e      	mov	r6, r3
 80199b8:	3b01      	subs	r3, #1
 80199ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80199be:	2a39      	cmp	r2, #57	@ 0x39
 80199c0:	d053      	beq.n	8019a6a <_dtoa_r+0xa3a>
 80199c2:	3201      	adds	r2, #1
 80199c4:	701a      	strb	r2, [r3, #0]
 80199c6:	e60c      	b.n	80195e2 <_dtoa_r+0x5b2>
 80199c8:	2a00      	cmp	r2, #0
 80199ca:	dd07      	ble.n	80199dc <_dtoa_r+0x9ac>
 80199cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80199d0:	d0ed      	beq.n	80199ae <_dtoa_r+0x97e>
 80199d2:	f10a 0301 	add.w	r3, sl, #1
 80199d6:	f88b 3000 	strb.w	r3, [fp]
 80199da:	e602      	b.n	80195e2 <_dtoa_r+0x5b2>
 80199dc:	9b05      	ldr	r3, [sp, #20]
 80199de:	9a05      	ldr	r2, [sp, #20]
 80199e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80199e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199e6:	4293      	cmp	r3, r2
 80199e8:	d029      	beq.n	8019a3e <_dtoa_r+0xa0e>
 80199ea:	9901      	ldr	r1, [sp, #4]
 80199ec:	2300      	movs	r3, #0
 80199ee:	220a      	movs	r2, #10
 80199f0:	4648      	mov	r0, r9
 80199f2:	f000 fd21 	bl	801a438 <__multadd>
 80199f6:	45a8      	cmp	r8, r5
 80199f8:	9001      	str	r0, [sp, #4]
 80199fa:	f04f 0300 	mov.w	r3, #0
 80199fe:	f04f 020a 	mov.w	r2, #10
 8019a02:	4641      	mov	r1, r8
 8019a04:	4648      	mov	r0, r9
 8019a06:	d107      	bne.n	8019a18 <_dtoa_r+0x9e8>
 8019a08:	f000 fd16 	bl	801a438 <__multadd>
 8019a0c:	4680      	mov	r8, r0
 8019a0e:	4605      	mov	r5, r0
 8019a10:	9b05      	ldr	r3, [sp, #20]
 8019a12:	3301      	adds	r3, #1
 8019a14:	9305      	str	r3, [sp, #20]
 8019a16:	e775      	b.n	8019904 <_dtoa_r+0x8d4>
 8019a18:	f000 fd0e 	bl	801a438 <__multadd>
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	4680      	mov	r8, r0
 8019a20:	2300      	movs	r3, #0
 8019a22:	220a      	movs	r2, #10
 8019a24:	4648      	mov	r0, r9
 8019a26:	f000 fd07 	bl	801a438 <__multadd>
 8019a2a:	4605      	mov	r5, r0
 8019a2c:	e7f0      	b.n	8019a10 <_dtoa_r+0x9e0>
 8019a2e:	f1bb 0f00 	cmp.w	fp, #0
 8019a32:	bfcc      	ite	gt
 8019a34:	465e      	movgt	r6, fp
 8019a36:	2601      	movle	r6, #1
 8019a38:	443e      	add	r6, r7
 8019a3a:	f04f 0800 	mov.w	r8, #0
 8019a3e:	9901      	ldr	r1, [sp, #4]
 8019a40:	2201      	movs	r2, #1
 8019a42:	4648      	mov	r0, r9
 8019a44:	f000 feee 	bl	801a824 <__lshift>
 8019a48:	4621      	mov	r1, r4
 8019a4a:	9001      	str	r0, [sp, #4]
 8019a4c:	f000 ff56 	bl	801a8fc <__mcmp>
 8019a50:	2800      	cmp	r0, #0
 8019a52:	dcaf      	bgt.n	80199b4 <_dtoa_r+0x984>
 8019a54:	d102      	bne.n	8019a5c <_dtoa_r+0xa2c>
 8019a56:	f01a 0f01 	tst.w	sl, #1
 8019a5a:	d1ab      	bne.n	80199b4 <_dtoa_r+0x984>
 8019a5c:	4633      	mov	r3, r6
 8019a5e:	461e      	mov	r6, r3
 8019a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019a64:	2a30      	cmp	r2, #48	@ 0x30
 8019a66:	d0fa      	beq.n	8019a5e <_dtoa_r+0xa2e>
 8019a68:	e5bb      	b.n	80195e2 <_dtoa_r+0x5b2>
 8019a6a:	429f      	cmp	r7, r3
 8019a6c:	d1a3      	bne.n	80199b6 <_dtoa_r+0x986>
 8019a6e:	9b04      	ldr	r3, [sp, #16]
 8019a70:	3301      	adds	r3, #1
 8019a72:	9304      	str	r3, [sp, #16]
 8019a74:	2331      	movs	r3, #49	@ 0x31
 8019a76:	703b      	strb	r3, [r7, #0]
 8019a78:	e5b3      	b.n	80195e2 <_dtoa_r+0x5b2>
 8019a7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a7c:	4f16      	ldr	r7, [pc, #88]	@ (8019ad8 <_dtoa_r+0xaa8>)
 8019a7e:	b11b      	cbz	r3, 8019a88 <_dtoa_r+0xa58>
 8019a80:	f107 0308 	add.w	r3, r7, #8
 8019a84:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019a86:	6013      	str	r3, [r2, #0]
 8019a88:	4638      	mov	r0, r7
 8019a8a:	b011      	add	sp, #68	@ 0x44
 8019a8c:	ecbd 8b02 	vpop	{d8}
 8019a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a94:	9b07      	ldr	r3, [sp, #28]
 8019a96:	2b01      	cmp	r3, #1
 8019a98:	f77f ae36 	ble.w	8019708 <_dtoa_r+0x6d8>
 8019a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019aa0:	2001      	movs	r0, #1
 8019aa2:	e656      	b.n	8019752 <_dtoa_r+0x722>
 8019aa4:	f1bb 0f00 	cmp.w	fp, #0
 8019aa8:	f77f aed7 	ble.w	801985a <_dtoa_r+0x82a>
 8019aac:	463e      	mov	r6, r7
 8019aae:	9801      	ldr	r0, [sp, #4]
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	f7ff fa35 	bl	8018f20 <quorem>
 8019ab6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019aba:	f806 ab01 	strb.w	sl, [r6], #1
 8019abe:	1bf2      	subs	r2, r6, r7
 8019ac0:	4593      	cmp	fp, r2
 8019ac2:	ddb4      	ble.n	8019a2e <_dtoa_r+0x9fe>
 8019ac4:	9901      	ldr	r1, [sp, #4]
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	220a      	movs	r2, #10
 8019aca:	4648      	mov	r0, r9
 8019acc:	f000 fcb4 	bl	801a438 <__multadd>
 8019ad0:	9001      	str	r0, [sp, #4]
 8019ad2:	e7ec      	b.n	8019aae <_dtoa_r+0xa7e>
 8019ad4:	0801cde9 	.word	0x0801cde9
 8019ad8:	0801cd6d 	.word	0x0801cd6d

08019adc <_free_r>:
 8019adc:	b538      	push	{r3, r4, r5, lr}
 8019ade:	4605      	mov	r5, r0
 8019ae0:	2900      	cmp	r1, #0
 8019ae2:	d041      	beq.n	8019b68 <_free_r+0x8c>
 8019ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ae8:	1f0c      	subs	r4, r1, #4
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	bfb8      	it	lt
 8019aee:	18e4      	addlt	r4, r4, r3
 8019af0:	f000 fc34 	bl	801a35c <__malloc_lock>
 8019af4:	4a1d      	ldr	r2, [pc, #116]	@ (8019b6c <_free_r+0x90>)
 8019af6:	6813      	ldr	r3, [r2, #0]
 8019af8:	b933      	cbnz	r3, 8019b08 <_free_r+0x2c>
 8019afa:	6063      	str	r3, [r4, #4]
 8019afc:	6014      	str	r4, [r2, #0]
 8019afe:	4628      	mov	r0, r5
 8019b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b04:	f000 bc30 	b.w	801a368 <__malloc_unlock>
 8019b08:	42a3      	cmp	r3, r4
 8019b0a:	d908      	bls.n	8019b1e <_free_r+0x42>
 8019b0c:	6820      	ldr	r0, [r4, #0]
 8019b0e:	1821      	adds	r1, r4, r0
 8019b10:	428b      	cmp	r3, r1
 8019b12:	bf01      	itttt	eq
 8019b14:	6819      	ldreq	r1, [r3, #0]
 8019b16:	685b      	ldreq	r3, [r3, #4]
 8019b18:	1809      	addeq	r1, r1, r0
 8019b1a:	6021      	streq	r1, [r4, #0]
 8019b1c:	e7ed      	b.n	8019afa <_free_r+0x1e>
 8019b1e:	461a      	mov	r2, r3
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	b10b      	cbz	r3, 8019b28 <_free_r+0x4c>
 8019b24:	42a3      	cmp	r3, r4
 8019b26:	d9fa      	bls.n	8019b1e <_free_r+0x42>
 8019b28:	6811      	ldr	r1, [r2, #0]
 8019b2a:	1850      	adds	r0, r2, r1
 8019b2c:	42a0      	cmp	r0, r4
 8019b2e:	d10b      	bne.n	8019b48 <_free_r+0x6c>
 8019b30:	6820      	ldr	r0, [r4, #0]
 8019b32:	4401      	add	r1, r0
 8019b34:	1850      	adds	r0, r2, r1
 8019b36:	4283      	cmp	r3, r0
 8019b38:	6011      	str	r1, [r2, #0]
 8019b3a:	d1e0      	bne.n	8019afe <_free_r+0x22>
 8019b3c:	6818      	ldr	r0, [r3, #0]
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	6053      	str	r3, [r2, #4]
 8019b42:	4408      	add	r0, r1
 8019b44:	6010      	str	r0, [r2, #0]
 8019b46:	e7da      	b.n	8019afe <_free_r+0x22>
 8019b48:	d902      	bls.n	8019b50 <_free_r+0x74>
 8019b4a:	230c      	movs	r3, #12
 8019b4c:	602b      	str	r3, [r5, #0]
 8019b4e:	e7d6      	b.n	8019afe <_free_r+0x22>
 8019b50:	6820      	ldr	r0, [r4, #0]
 8019b52:	1821      	adds	r1, r4, r0
 8019b54:	428b      	cmp	r3, r1
 8019b56:	bf04      	itt	eq
 8019b58:	6819      	ldreq	r1, [r3, #0]
 8019b5a:	685b      	ldreq	r3, [r3, #4]
 8019b5c:	6063      	str	r3, [r4, #4]
 8019b5e:	bf04      	itt	eq
 8019b60:	1809      	addeq	r1, r1, r0
 8019b62:	6021      	streq	r1, [r4, #0]
 8019b64:	6054      	str	r4, [r2, #4]
 8019b66:	e7ca      	b.n	8019afe <_free_r+0x22>
 8019b68:	bd38      	pop	{r3, r4, r5, pc}
 8019b6a:	bf00      	nop
 8019b6c:	24006360 	.word	0x24006360

08019b70 <rshift>:
 8019b70:	6903      	ldr	r3, [r0, #16]
 8019b72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019b76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019b7e:	f100 0414 	add.w	r4, r0, #20
 8019b82:	dd45      	ble.n	8019c10 <rshift+0xa0>
 8019b84:	f011 011f 	ands.w	r1, r1, #31
 8019b88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019b8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019b90:	d10c      	bne.n	8019bac <rshift+0x3c>
 8019b92:	f100 0710 	add.w	r7, r0, #16
 8019b96:	4629      	mov	r1, r5
 8019b98:	42b1      	cmp	r1, r6
 8019b9a:	d334      	bcc.n	8019c06 <rshift+0x96>
 8019b9c:	1a9b      	subs	r3, r3, r2
 8019b9e:	009b      	lsls	r3, r3, #2
 8019ba0:	1eea      	subs	r2, r5, #3
 8019ba2:	4296      	cmp	r6, r2
 8019ba4:	bf38      	it	cc
 8019ba6:	2300      	movcc	r3, #0
 8019ba8:	4423      	add	r3, r4
 8019baa:	e015      	b.n	8019bd8 <rshift+0x68>
 8019bac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019bb0:	f1c1 0820 	rsb	r8, r1, #32
 8019bb4:	40cf      	lsrs	r7, r1
 8019bb6:	f105 0e04 	add.w	lr, r5, #4
 8019bba:	46a1      	mov	r9, r4
 8019bbc:	4576      	cmp	r6, lr
 8019bbe:	46f4      	mov	ip, lr
 8019bc0:	d815      	bhi.n	8019bee <rshift+0x7e>
 8019bc2:	1a9a      	subs	r2, r3, r2
 8019bc4:	0092      	lsls	r2, r2, #2
 8019bc6:	3a04      	subs	r2, #4
 8019bc8:	3501      	adds	r5, #1
 8019bca:	42ae      	cmp	r6, r5
 8019bcc:	bf38      	it	cc
 8019bce:	2200      	movcc	r2, #0
 8019bd0:	18a3      	adds	r3, r4, r2
 8019bd2:	50a7      	str	r7, [r4, r2]
 8019bd4:	b107      	cbz	r7, 8019bd8 <rshift+0x68>
 8019bd6:	3304      	adds	r3, #4
 8019bd8:	1b1a      	subs	r2, r3, r4
 8019bda:	42a3      	cmp	r3, r4
 8019bdc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019be0:	bf08      	it	eq
 8019be2:	2300      	moveq	r3, #0
 8019be4:	6102      	str	r2, [r0, #16]
 8019be6:	bf08      	it	eq
 8019be8:	6143      	streq	r3, [r0, #20]
 8019bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bee:	f8dc c000 	ldr.w	ip, [ip]
 8019bf2:	fa0c fc08 	lsl.w	ip, ip, r8
 8019bf6:	ea4c 0707 	orr.w	r7, ip, r7
 8019bfa:	f849 7b04 	str.w	r7, [r9], #4
 8019bfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019c02:	40cf      	lsrs	r7, r1
 8019c04:	e7da      	b.n	8019bbc <rshift+0x4c>
 8019c06:	f851 cb04 	ldr.w	ip, [r1], #4
 8019c0a:	f847 cf04 	str.w	ip, [r7, #4]!
 8019c0e:	e7c3      	b.n	8019b98 <rshift+0x28>
 8019c10:	4623      	mov	r3, r4
 8019c12:	e7e1      	b.n	8019bd8 <rshift+0x68>

08019c14 <__hexdig_fun>:
 8019c14:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019c18:	2b09      	cmp	r3, #9
 8019c1a:	d802      	bhi.n	8019c22 <__hexdig_fun+0xe>
 8019c1c:	3820      	subs	r0, #32
 8019c1e:	b2c0      	uxtb	r0, r0
 8019c20:	4770      	bx	lr
 8019c22:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8019c26:	2b05      	cmp	r3, #5
 8019c28:	d801      	bhi.n	8019c2e <__hexdig_fun+0x1a>
 8019c2a:	3847      	subs	r0, #71	@ 0x47
 8019c2c:	e7f7      	b.n	8019c1e <__hexdig_fun+0xa>
 8019c2e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019c32:	2b05      	cmp	r3, #5
 8019c34:	d801      	bhi.n	8019c3a <__hexdig_fun+0x26>
 8019c36:	3827      	subs	r0, #39	@ 0x27
 8019c38:	e7f1      	b.n	8019c1e <__hexdig_fun+0xa>
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	4770      	bx	lr
	...

08019c40 <__gethex>:
 8019c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c44:	b085      	sub	sp, #20
 8019c46:	468a      	mov	sl, r1
 8019c48:	9302      	str	r3, [sp, #8]
 8019c4a:	680b      	ldr	r3, [r1, #0]
 8019c4c:	9001      	str	r0, [sp, #4]
 8019c4e:	4690      	mov	r8, r2
 8019c50:	1c9c      	adds	r4, r3, #2
 8019c52:	46a1      	mov	r9, r4
 8019c54:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019c58:	2830      	cmp	r0, #48	@ 0x30
 8019c5a:	d0fa      	beq.n	8019c52 <__gethex+0x12>
 8019c5c:	eba9 0303 	sub.w	r3, r9, r3
 8019c60:	f1a3 0b02 	sub.w	fp, r3, #2
 8019c64:	f7ff ffd6 	bl	8019c14 <__hexdig_fun>
 8019c68:	4605      	mov	r5, r0
 8019c6a:	2800      	cmp	r0, #0
 8019c6c:	d168      	bne.n	8019d40 <__gethex+0x100>
 8019c6e:	49a0      	ldr	r1, [pc, #640]	@ (8019ef0 <__gethex+0x2b0>)
 8019c70:	2201      	movs	r2, #1
 8019c72:	4648      	mov	r0, r9
 8019c74:	f7ff f8b2 	bl	8018ddc <strncmp>
 8019c78:	4607      	mov	r7, r0
 8019c7a:	2800      	cmp	r0, #0
 8019c7c:	d167      	bne.n	8019d4e <__gethex+0x10e>
 8019c7e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019c82:	4626      	mov	r6, r4
 8019c84:	f7ff ffc6 	bl	8019c14 <__hexdig_fun>
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	d062      	beq.n	8019d52 <__gethex+0x112>
 8019c8c:	4623      	mov	r3, r4
 8019c8e:	7818      	ldrb	r0, [r3, #0]
 8019c90:	2830      	cmp	r0, #48	@ 0x30
 8019c92:	4699      	mov	r9, r3
 8019c94:	f103 0301 	add.w	r3, r3, #1
 8019c98:	d0f9      	beq.n	8019c8e <__gethex+0x4e>
 8019c9a:	f7ff ffbb 	bl	8019c14 <__hexdig_fun>
 8019c9e:	fab0 f580 	clz	r5, r0
 8019ca2:	096d      	lsrs	r5, r5, #5
 8019ca4:	f04f 0b01 	mov.w	fp, #1
 8019ca8:	464a      	mov	r2, r9
 8019caa:	4616      	mov	r6, r2
 8019cac:	3201      	adds	r2, #1
 8019cae:	7830      	ldrb	r0, [r6, #0]
 8019cb0:	f7ff ffb0 	bl	8019c14 <__hexdig_fun>
 8019cb4:	2800      	cmp	r0, #0
 8019cb6:	d1f8      	bne.n	8019caa <__gethex+0x6a>
 8019cb8:	498d      	ldr	r1, [pc, #564]	@ (8019ef0 <__gethex+0x2b0>)
 8019cba:	2201      	movs	r2, #1
 8019cbc:	4630      	mov	r0, r6
 8019cbe:	f7ff f88d 	bl	8018ddc <strncmp>
 8019cc2:	2800      	cmp	r0, #0
 8019cc4:	d13f      	bne.n	8019d46 <__gethex+0x106>
 8019cc6:	b944      	cbnz	r4, 8019cda <__gethex+0x9a>
 8019cc8:	1c74      	adds	r4, r6, #1
 8019cca:	4622      	mov	r2, r4
 8019ccc:	4616      	mov	r6, r2
 8019cce:	3201      	adds	r2, #1
 8019cd0:	7830      	ldrb	r0, [r6, #0]
 8019cd2:	f7ff ff9f 	bl	8019c14 <__hexdig_fun>
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	d1f8      	bne.n	8019ccc <__gethex+0x8c>
 8019cda:	1ba4      	subs	r4, r4, r6
 8019cdc:	00a7      	lsls	r7, r4, #2
 8019cde:	7833      	ldrb	r3, [r6, #0]
 8019ce0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019ce4:	2b50      	cmp	r3, #80	@ 0x50
 8019ce6:	d13e      	bne.n	8019d66 <__gethex+0x126>
 8019ce8:	7873      	ldrb	r3, [r6, #1]
 8019cea:	2b2b      	cmp	r3, #43	@ 0x2b
 8019cec:	d033      	beq.n	8019d56 <__gethex+0x116>
 8019cee:	2b2d      	cmp	r3, #45	@ 0x2d
 8019cf0:	d034      	beq.n	8019d5c <__gethex+0x11c>
 8019cf2:	1c71      	adds	r1, r6, #1
 8019cf4:	2400      	movs	r4, #0
 8019cf6:	7808      	ldrb	r0, [r1, #0]
 8019cf8:	f7ff ff8c 	bl	8019c14 <__hexdig_fun>
 8019cfc:	1e43      	subs	r3, r0, #1
 8019cfe:	b2db      	uxtb	r3, r3
 8019d00:	2b18      	cmp	r3, #24
 8019d02:	d830      	bhi.n	8019d66 <__gethex+0x126>
 8019d04:	f1a0 0210 	sub.w	r2, r0, #16
 8019d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019d0c:	f7ff ff82 	bl	8019c14 <__hexdig_fun>
 8019d10:	f100 3cff 	add.w	ip, r0, #4294967295
 8019d14:	fa5f fc8c 	uxtb.w	ip, ip
 8019d18:	f1bc 0f18 	cmp.w	ip, #24
 8019d1c:	f04f 030a 	mov.w	r3, #10
 8019d20:	d91e      	bls.n	8019d60 <__gethex+0x120>
 8019d22:	b104      	cbz	r4, 8019d26 <__gethex+0xe6>
 8019d24:	4252      	negs	r2, r2
 8019d26:	4417      	add	r7, r2
 8019d28:	f8ca 1000 	str.w	r1, [sl]
 8019d2c:	b1ed      	cbz	r5, 8019d6a <__gethex+0x12a>
 8019d2e:	f1bb 0f00 	cmp.w	fp, #0
 8019d32:	bf0c      	ite	eq
 8019d34:	2506      	moveq	r5, #6
 8019d36:	2500      	movne	r5, #0
 8019d38:	4628      	mov	r0, r5
 8019d3a:	b005      	add	sp, #20
 8019d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d40:	2500      	movs	r5, #0
 8019d42:	462c      	mov	r4, r5
 8019d44:	e7b0      	b.n	8019ca8 <__gethex+0x68>
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	d1c7      	bne.n	8019cda <__gethex+0x9a>
 8019d4a:	4627      	mov	r7, r4
 8019d4c:	e7c7      	b.n	8019cde <__gethex+0x9e>
 8019d4e:	464e      	mov	r6, r9
 8019d50:	462f      	mov	r7, r5
 8019d52:	2501      	movs	r5, #1
 8019d54:	e7c3      	b.n	8019cde <__gethex+0x9e>
 8019d56:	2400      	movs	r4, #0
 8019d58:	1cb1      	adds	r1, r6, #2
 8019d5a:	e7cc      	b.n	8019cf6 <__gethex+0xb6>
 8019d5c:	2401      	movs	r4, #1
 8019d5e:	e7fb      	b.n	8019d58 <__gethex+0x118>
 8019d60:	fb03 0002 	mla	r0, r3, r2, r0
 8019d64:	e7ce      	b.n	8019d04 <__gethex+0xc4>
 8019d66:	4631      	mov	r1, r6
 8019d68:	e7de      	b.n	8019d28 <__gethex+0xe8>
 8019d6a:	eba6 0309 	sub.w	r3, r6, r9
 8019d6e:	3b01      	subs	r3, #1
 8019d70:	4629      	mov	r1, r5
 8019d72:	2b07      	cmp	r3, #7
 8019d74:	dc0a      	bgt.n	8019d8c <__gethex+0x14c>
 8019d76:	9801      	ldr	r0, [sp, #4]
 8019d78:	f000 fafc 	bl	801a374 <_Balloc>
 8019d7c:	4604      	mov	r4, r0
 8019d7e:	b940      	cbnz	r0, 8019d92 <__gethex+0x152>
 8019d80:	4b5c      	ldr	r3, [pc, #368]	@ (8019ef4 <__gethex+0x2b4>)
 8019d82:	4602      	mov	r2, r0
 8019d84:	21e4      	movs	r1, #228	@ 0xe4
 8019d86:	485c      	ldr	r0, [pc, #368]	@ (8019ef8 <__gethex+0x2b8>)
 8019d88:	f001 f9de 	bl	801b148 <__assert_func>
 8019d8c:	3101      	adds	r1, #1
 8019d8e:	105b      	asrs	r3, r3, #1
 8019d90:	e7ef      	b.n	8019d72 <__gethex+0x132>
 8019d92:	f100 0a14 	add.w	sl, r0, #20
 8019d96:	2300      	movs	r3, #0
 8019d98:	4655      	mov	r5, sl
 8019d9a:	469b      	mov	fp, r3
 8019d9c:	45b1      	cmp	r9, r6
 8019d9e:	d337      	bcc.n	8019e10 <__gethex+0x1d0>
 8019da0:	f845 bb04 	str.w	fp, [r5], #4
 8019da4:	eba5 050a 	sub.w	r5, r5, sl
 8019da8:	10ad      	asrs	r5, r5, #2
 8019daa:	6125      	str	r5, [r4, #16]
 8019dac:	4658      	mov	r0, fp
 8019dae:	f000 fbd3 	bl	801a558 <__hi0bits>
 8019db2:	016d      	lsls	r5, r5, #5
 8019db4:	f8d8 6000 	ldr.w	r6, [r8]
 8019db8:	1a2d      	subs	r5, r5, r0
 8019dba:	42b5      	cmp	r5, r6
 8019dbc:	dd54      	ble.n	8019e68 <__gethex+0x228>
 8019dbe:	1bad      	subs	r5, r5, r6
 8019dc0:	4629      	mov	r1, r5
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f000 ff64 	bl	801ac90 <__any_on>
 8019dc8:	4681      	mov	r9, r0
 8019dca:	b178      	cbz	r0, 8019dec <__gethex+0x1ac>
 8019dcc:	1e6b      	subs	r3, r5, #1
 8019dce:	1159      	asrs	r1, r3, #5
 8019dd0:	f003 021f 	and.w	r2, r3, #31
 8019dd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019dd8:	f04f 0901 	mov.w	r9, #1
 8019ddc:	fa09 f202 	lsl.w	r2, r9, r2
 8019de0:	420a      	tst	r2, r1
 8019de2:	d003      	beq.n	8019dec <__gethex+0x1ac>
 8019de4:	454b      	cmp	r3, r9
 8019de6:	dc36      	bgt.n	8019e56 <__gethex+0x216>
 8019de8:	f04f 0902 	mov.w	r9, #2
 8019dec:	4629      	mov	r1, r5
 8019dee:	4620      	mov	r0, r4
 8019df0:	f7ff febe 	bl	8019b70 <rshift>
 8019df4:	442f      	add	r7, r5
 8019df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019dfa:	42bb      	cmp	r3, r7
 8019dfc:	da42      	bge.n	8019e84 <__gethex+0x244>
 8019dfe:	9801      	ldr	r0, [sp, #4]
 8019e00:	4621      	mov	r1, r4
 8019e02:	f000 faf7 	bl	801a3f4 <_Bfree>
 8019e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019e08:	2300      	movs	r3, #0
 8019e0a:	6013      	str	r3, [r2, #0]
 8019e0c:	25a3      	movs	r5, #163	@ 0xa3
 8019e0e:	e793      	b.n	8019d38 <__gethex+0xf8>
 8019e10:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019e14:	2a2e      	cmp	r2, #46	@ 0x2e
 8019e16:	d012      	beq.n	8019e3e <__gethex+0x1fe>
 8019e18:	2b20      	cmp	r3, #32
 8019e1a:	d104      	bne.n	8019e26 <__gethex+0x1e6>
 8019e1c:	f845 bb04 	str.w	fp, [r5], #4
 8019e20:	f04f 0b00 	mov.w	fp, #0
 8019e24:	465b      	mov	r3, fp
 8019e26:	7830      	ldrb	r0, [r6, #0]
 8019e28:	9303      	str	r3, [sp, #12]
 8019e2a:	f7ff fef3 	bl	8019c14 <__hexdig_fun>
 8019e2e:	9b03      	ldr	r3, [sp, #12]
 8019e30:	f000 000f 	and.w	r0, r0, #15
 8019e34:	4098      	lsls	r0, r3
 8019e36:	ea4b 0b00 	orr.w	fp, fp, r0
 8019e3a:	3304      	adds	r3, #4
 8019e3c:	e7ae      	b.n	8019d9c <__gethex+0x15c>
 8019e3e:	45b1      	cmp	r9, r6
 8019e40:	d8ea      	bhi.n	8019e18 <__gethex+0x1d8>
 8019e42:	492b      	ldr	r1, [pc, #172]	@ (8019ef0 <__gethex+0x2b0>)
 8019e44:	9303      	str	r3, [sp, #12]
 8019e46:	2201      	movs	r2, #1
 8019e48:	4630      	mov	r0, r6
 8019e4a:	f7fe ffc7 	bl	8018ddc <strncmp>
 8019e4e:	9b03      	ldr	r3, [sp, #12]
 8019e50:	2800      	cmp	r0, #0
 8019e52:	d1e1      	bne.n	8019e18 <__gethex+0x1d8>
 8019e54:	e7a2      	b.n	8019d9c <__gethex+0x15c>
 8019e56:	1ea9      	subs	r1, r5, #2
 8019e58:	4620      	mov	r0, r4
 8019e5a:	f000 ff19 	bl	801ac90 <__any_on>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	d0c2      	beq.n	8019de8 <__gethex+0x1a8>
 8019e62:	f04f 0903 	mov.w	r9, #3
 8019e66:	e7c1      	b.n	8019dec <__gethex+0x1ac>
 8019e68:	da09      	bge.n	8019e7e <__gethex+0x23e>
 8019e6a:	1b75      	subs	r5, r6, r5
 8019e6c:	4621      	mov	r1, r4
 8019e6e:	9801      	ldr	r0, [sp, #4]
 8019e70:	462a      	mov	r2, r5
 8019e72:	f000 fcd7 	bl	801a824 <__lshift>
 8019e76:	1b7f      	subs	r7, r7, r5
 8019e78:	4604      	mov	r4, r0
 8019e7a:	f100 0a14 	add.w	sl, r0, #20
 8019e7e:	f04f 0900 	mov.w	r9, #0
 8019e82:	e7b8      	b.n	8019df6 <__gethex+0x1b6>
 8019e84:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019e88:	42bd      	cmp	r5, r7
 8019e8a:	dd6f      	ble.n	8019f6c <__gethex+0x32c>
 8019e8c:	1bed      	subs	r5, r5, r7
 8019e8e:	42ae      	cmp	r6, r5
 8019e90:	dc34      	bgt.n	8019efc <__gethex+0x2bc>
 8019e92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019e96:	2b02      	cmp	r3, #2
 8019e98:	d022      	beq.n	8019ee0 <__gethex+0x2a0>
 8019e9a:	2b03      	cmp	r3, #3
 8019e9c:	d024      	beq.n	8019ee8 <__gethex+0x2a8>
 8019e9e:	2b01      	cmp	r3, #1
 8019ea0:	d115      	bne.n	8019ece <__gethex+0x28e>
 8019ea2:	42ae      	cmp	r6, r5
 8019ea4:	d113      	bne.n	8019ece <__gethex+0x28e>
 8019ea6:	2e01      	cmp	r6, #1
 8019ea8:	d10b      	bne.n	8019ec2 <__gethex+0x282>
 8019eaa:	9a02      	ldr	r2, [sp, #8]
 8019eac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019eb0:	6013      	str	r3, [r2, #0]
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	6123      	str	r3, [r4, #16]
 8019eb6:	f8ca 3000 	str.w	r3, [sl]
 8019eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ebc:	2562      	movs	r5, #98	@ 0x62
 8019ebe:	601c      	str	r4, [r3, #0]
 8019ec0:	e73a      	b.n	8019d38 <__gethex+0xf8>
 8019ec2:	1e71      	subs	r1, r6, #1
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f000 fee3 	bl	801ac90 <__any_on>
 8019eca:	2800      	cmp	r0, #0
 8019ecc:	d1ed      	bne.n	8019eaa <__gethex+0x26a>
 8019ece:	9801      	ldr	r0, [sp, #4]
 8019ed0:	4621      	mov	r1, r4
 8019ed2:	f000 fa8f 	bl	801a3f4 <_Bfree>
 8019ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ed8:	2300      	movs	r3, #0
 8019eda:	6013      	str	r3, [r2, #0]
 8019edc:	2550      	movs	r5, #80	@ 0x50
 8019ede:	e72b      	b.n	8019d38 <__gethex+0xf8>
 8019ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d1f3      	bne.n	8019ece <__gethex+0x28e>
 8019ee6:	e7e0      	b.n	8019eaa <__gethex+0x26a>
 8019ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d1dd      	bne.n	8019eaa <__gethex+0x26a>
 8019eee:	e7ee      	b.n	8019ece <__gethex+0x28e>
 8019ef0:	0801cbd8 	.word	0x0801cbd8
 8019ef4:	0801cde9 	.word	0x0801cde9
 8019ef8:	0801cdfa 	.word	0x0801cdfa
 8019efc:	1e6f      	subs	r7, r5, #1
 8019efe:	f1b9 0f00 	cmp.w	r9, #0
 8019f02:	d130      	bne.n	8019f66 <__gethex+0x326>
 8019f04:	b127      	cbz	r7, 8019f10 <__gethex+0x2d0>
 8019f06:	4639      	mov	r1, r7
 8019f08:	4620      	mov	r0, r4
 8019f0a:	f000 fec1 	bl	801ac90 <__any_on>
 8019f0e:	4681      	mov	r9, r0
 8019f10:	117a      	asrs	r2, r7, #5
 8019f12:	2301      	movs	r3, #1
 8019f14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019f18:	f007 071f 	and.w	r7, r7, #31
 8019f1c:	40bb      	lsls	r3, r7
 8019f1e:	4213      	tst	r3, r2
 8019f20:	4629      	mov	r1, r5
 8019f22:	4620      	mov	r0, r4
 8019f24:	bf18      	it	ne
 8019f26:	f049 0902 	orrne.w	r9, r9, #2
 8019f2a:	f7ff fe21 	bl	8019b70 <rshift>
 8019f2e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019f32:	1b76      	subs	r6, r6, r5
 8019f34:	2502      	movs	r5, #2
 8019f36:	f1b9 0f00 	cmp.w	r9, #0
 8019f3a:	d047      	beq.n	8019fcc <__gethex+0x38c>
 8019f3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f40:	2b02      	cmp	r3, #2
 8019f42:	d015      	beq.n	8019f70 <__gethex+0x330>
 8019f44:	2b03      	cmp	r3, #3
 8019f46:	d017      	beq.n	8019f78 <__gethex+0x338>
 8019f48:	2b01      	cmp	r3, #1
 8019f4a:	d109      	bne.n	8019f60 <__gethex+0x320>
 8019f4c:	f019 0f02 	tst.w	r9, #2
 8019f50:	d006      	beq.n	8019f60 <__gethex+0x320>
 8019f52:	f8da 3000 	ldr.w	r3, [sl]
 8019f56:	ea49 0903 	orr.w	r9, r9, r3
 8019f5a:	f019 0f01 	tst.w	r9, #1
 8019f5e:	d10e      	bne.n	8019f7e <__gethex+0x33e>
 8019f60:	f045 0510 	orr.w	r5, r5, #16
 8019f64:	e032      	b.n	8019fcc <__gethex+0x38c>
 8019f66:	f04f 0901 	mov.w	r9, #1
 8019f6a:	e7d1      	b.n	8019f10 <__gethex+0x2d0>
 8019f6c:	2501      	movs	r5, #1
 8019f6e:	e7e2      	b.n	8019f36 <__gethex+0x2f6>
 8019f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f72:	f1c3 0301 	rsb	r3, r3, #1
 8019f76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d0f0      	beq.n	8019f60 <__gethex+0x320>
 8019f7e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019f82:	f104 0314 	add.w	r3, r4, #20
 8019f86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019f8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019f8e:	f04f 0c00 	mov.w	ip, #0
 8019f92:	4618      	mov	r0, r3
 8019f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f98:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019f9c:	d01b      	beq.n	8019fd6 <__gethex+0x396>
 8019f9e:	3201      	adds	r2, #1
 8019fa0:	6002      	str	r2, [r0, #0]
 8019fa2:	2d02      	cmp	r5, #2
 8019fa4:	f104 0314 	add.w	r3, r4, #20
 8019fa8:	d13c      	bne.n	801a024 <__gethex+0x3e4>
 8019faa:	f8d8 2000 	ldr.w	r2, [r8]
 8019fae:	3a01      	subs	r2, #1
 8019fb0:	42b2      	cmp	r2, r6
 8019fb2:	d109      	bne.n	8019fc8 <__gethex+0x388>
 8019fb4:	1171      	asrs	r1, r6, #5
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019fbc:	f006 061f 	and.w	r6, r6, #31
 8019fc0:	fa02 f606 	lsl.w	r6, r2, r6
 8019fc4:	421e      	tst	r6, r3
 8019fc6:	d13a      	bne.n	801a03e <__gethex+0x3fe>
 8019fc8:	f045 0520 	orr.w	r5, r5, #32
 8019fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fce:	601c      	str	r4, [r3, #0]
 8019fd0:	9b02      	ldr	r3, [sp, #8]
 8019fd2:	601f      	str	r7, [r3, #0]
 8019fd4:	e6b0      	b.n	8019d38 <__gethex+0xf8>
 8019fd6:	4299      	cmp	r1, r3
 8019fd8:	f843 cc04 	str.w	ip, [r3, #-4]
 8019fdc:	d8d9      	bhi.n	8019f92 <__gethex+0x352>
 8019fde:	68a3      	ldr	r3, [r4, #8]
 8019fe0:	459b      	cmp	fp, r3
 8019fe2:	db17      	blt.n	801a014 <__gethex+0x3d4>
 8019fe4:	6861      	ldr	r1, [r4, #4]
 8019fe6:	9801      	ldr	r0, [sp, #4]
 8019fe8:	3101      	adds	r1, #1
 8019fea:	f000 f9c3 	bl	801a374 <_Balloc>
 8019fee:	4681      	mov	r9, r0
 8019ff0:	b918      	cbnz	r0, 8019ffa <__gethex+0x3ba>
 8019ff2:	4b1a      	ldr	r3, [pc, #104]	@ (801a05c <__gethex+0x41c>)
 8019ff4:	4602      	mov	r2, r0
 8019ff6:	2184      	movs	r1, #132	@ 0x84
 8019ff8:	e6c5      	b.n	8019d86 <__gethex+0x146>
 8019ffa:	6922      	ldr	r2, [r4, #16]
 8019ffc:	3202      	adds	r2, #2
 8019ffe:	f104 010c 	add.w	r1, r4, #12
 801a002:	0092      	lsls	r2, r2, #2
 801a004:	300c      	adds	r0, #12
 801a006:	f7fe ff72 	bl	8018eee <memcpy>
 801a00a:	4621      	mov	r1, r4
 801a00c:	9801      	ldr	r0, [sp, #4]
 801a00e:	f000 f9f1 	bl	801a3f4 <_Bfree>
 801a012:	464c      	mov	r4, r9
 801a014:	6923      	ldr	r3, [r4, #16]
 801a016:	1c5a      	adds	r2, r3, #1
 801a018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a01c:	6122      	str	r2, [r4, #16]
 801a01e:	2201      	movs	r2, #1
 801a020:	615a      	str	r2, [r3, #20]
 801a022:	e7be      	b.n	8019fa2 <__gethex+0x362>
 801a024:	6922      	ldr	r2, [r4, #16]
 801a026:	455a      	cmp	r2, fp
 801a028:	dd0b      	ble.n	801a042 <__gethex+0x402>
 801a02a:	2101      	movs	r1, #1
 801a02c:	4620      	mov	r0, r4
 801a02e:	f7ff fd9f 	bl	8019b70 <rshift>
 801a032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a036:	3701      	adds	r7, #1
 801a038:	42bb      	cmp	r3, r7
 801a03a:	f6ff aee0 	blt.w	8019dfe <__gethex+0x1be>
 801a03e:	2501      	movs	r5, #1
 801a040:	e7c2      	b.n	8019fc8 <__gethex+0x388>
 801a042:	f016 061f 	ands.w	r6, r6, #31
 801a046:	d0fa      	beq.n	801a03e <__gethex+0x3fe>
 801a048:	4453      	add	r3, sl
 801a04a:	f1c6 0620 	rsb	r6, r6, #32
 801a04e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801a052:	f000 fa81 	bl	801a558 <__hi0bits>
 801a056:	42b0      	cmp	r0, r6
 801a058:	dbe7      	blt.n	801a02a <__gethex+0x3ea>
 801a05a:	e7f0      	b.n	801a03e <__gethex+0x3fe>
 801a05c:	0801cde9 	.word	0x0801cde9

0801a060 <L_shift>:
 801a060:	f1c2 0208 	rsb	r2, r2, #8
 801a064:	0092      	lsls	r2, r2, #2
 801a066:	b570      	push	{r4, r5, r6, lr}
 801a068:	f1c2 0620 	rsb	r6, r2, #32
 801a06c:	6843      	ldr	r3, [r0, #4]
 801a06e:	6804      	ldr	r4, [r0, #0]
 801a070:	fa03 f506 	lsl.w	r5, r3, r6
 801a074:	432c      	orrs	r4, r5
 801a076:	40d3      	lsrs	r3, r2
 801a078:	6004      	str	r4, [r0, #0]
 801a07a:	f840 3f04 	str.w	r3, [r0, #4]!
 801a07e:	4288      	cmp	r0, r1
 801a080:	d3f4      	bcc.n	801a06c <L_shift+0xc>
 801a082:	bd70      	pop	{r4, r5, r6, pc}

0801a084 <__match>:
 801a084:	b530      	push	{r4, r5, lr}
 801a086:	6803      	ldr	r3, [r0, #0]
 801a088:	3301      	adds	r3, #1
 801a08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a08e:	b914      	cbnz	r4, 801a096 <__match+0x12>
 801a090:	6003      	str	r3, [r0, #0]
 801a092:	2001      	movs	r0, #1
 801a094:	bd30      	pop	{r4, r5, pc}
 801a096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a09a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801a09e:	2d19      	cmp	r5, #25
 801a0a0:	bf98      	it	ls
 801a0a2:	3220      	addls	r2, #32
 801a0a4:	42a2      	cmp	r2, r4
 801a0a6:	d0f0      	beq.n	801a08a <__match+0x6>
 801a0a8:	2000      	movs	r0, #0
 801a0aa:	e7f3      	b.n	801a094 <__match+0x10>

0801a0ac <__hexnan>:
 801a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0b0:	680b      	ldr	r3, [r1, #0]
 801a0b2:	6801      	ldr	r1, [r0, #0]
 801a0b4:	115e      	asrs	r6, r3, #5
 801a0b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a0ba:	f013 031f 	ands.w	r3, r3, #31
 801a0be:	b087      	sub	sp, #28
 801a0c0:	bf18      	it	ne
 801a0c2:	3604      	addne	r6, #4
 801a0c4:	2500      	movs	r5, #0
 801a0c6:	1f37      	subs	r7, r6, #4
 801a0c8:	4682      	mov	sl, r0
 801a0ca:	4690      	mov	r8, r2
 801a0cc:	9301      	str	r3, [sp, #4]
 801a0ce:	f846 5c04 	str.w	r5, [r6, #-4]
 801a0d2:	46b9      	mov	r9, r7
 801a0d4:	463c      	mov	r4, r7
 801a0d6:	9502      	str	r5, [sp, #8]
 801a0d8:	46ab      	mov	fp, r5
 801a0da:	784a      	ldrb	r2, [r1, #1]
 801a0dc:	1c4b      	adds	r3, r1, #1
 801a0de:	9303      	str	r3, [sp, #12]
 801a0e0:	b342      	cbz	r2, 801a134 <__hexnan+0x88>
 801a0e2:	4610      	mov	r0, r2
 801a0e4:	9105      	str	r1, [sp, #20]
 801a0e6:	9204      	str	r2, [sp, #16]
 801a0e8:	f7ff fd94 	bl	8019c14 <__hexdig_fun>
 801a0ec:	2800      	cmp	r0, #0
 801a0ee:	d151      	bne.n	801a194 <__hexnan+0xe8>
 801a0f0:	9a04      	ldr	r2, [sp, #16]
 801a0f2:	9905      	ldr	r1, [sp, #20]
 801a0f4:	2a20      	cmp	r2, #32
 801a0f6:	d818      	bhi.n	801a12a <__hexnan+0x7e>
 801a0f8:	9b02      	ldr	r3, [sp, #8]
 801a0fa:	459b      	cmp	fp, r3
 801a0fc:	dd13      	ble.n	801a126 <__hexnan+0x7a>
 801a0fe:	454c      	cmp	r4, r9
 801a100:	d206      	bcs.n	801a110 <__hexnan+0x64>
 801a102:	2d07      	cmp	r5, #7
 801a104:	dc04      	bgt.n	801a110 <__hexnan+0x64>
 801a106:	462a      	mov	r2, r5
 801a108:	4649      	mov	r1, r9
 801a10a:	4620      	mov	r0, r4
 801a10c:	f7ff ffa8 	bl	801a060 <L_shift>
 801a110:	4544      	cmp	r4, r8
 801a112:	d952      	bls.n	801a1ba <__hexnan+0x10e>
 801a114:	2300      	movs	r3, #0
 801a116:	f1a4 0904 	sub.w	r9, r4, #4
 801a11a:	f844 3c04 	str.w	r3, [r4, #-4]
 801a11e:	f8cd b008 	str.w	fp, [sp, #8]
 801a122:	464c      	mov	r4, r9
 801a124:	461d      	mov	r5, r3
 801a126:	9903      	ldr	r1, [sp, #12]
 801a128:	e7d7      	b.n	801a0da <__hexnan+0x2e>
 801a12a:	2a29      	cmp	r2, #41	@ 0x29
 801a12c:	d157      	bne.n	801a1de <__hexnan+0x132>
 801a12e:	3102      	adds	r1, #2
 801a130:	f8ca 1000 	str.w	r1, [sl]
 801a134:	f1bb 0f00 	cmp.w	fp, #0
 801a138:	d051      	beq.n	801a1de <__hexnan+0x132>
 801a13a:	454c      	cmp	r4, r9
 801a13c:	d206      	bcs.n	801a14c <__hexnan+0xa0>
 801a13e:	2d07      	cmp	r5, #7
 801a140:	dc04      	bgt.n	801a14c <__hexnan+0xa0>
 801a142:	462a      	mov	r2, r5
 801a144:	4649      	mov	r1, r9
 801a146:	4620      	mov	r0, r4
 801a148:	f7ff ff8a 	bl	801a060 <L_shift>
 801a14c:	4544      	cmp	r4, r8
 801a14e:	d936      	bls.n	801a1be <__hexnan+0x112>
 801a150:	f1a8 0204 	sub.w	r2, r8, #4
 801a154:	4623      	mov	r3, r4
 801a156:	f853 1b04 	ldr.w	r1, [r3], #4
 801a15a:	f842 1f04 	str.w	r1, [r2, #4]!
 801a15e:	429f      	cmp	r7, r3
 801a160:	d2f9      	bcs.n	801a156 <__hexnan+0xaa>
 801a162:	1b3b      	subs	r3, r7, r4
 801a164:	f023 0303 	bic.w	r3, r3, #3
 801a168:	3304      	adds	r3, #4
 801a16a:	3401      	adds	r4, #1
 801a16c:	3e03      	subs	r6, #3
 801a16e:	42b4      	cmp	r4, r6
 801a170:	bf88      	it	hi
 801a172:	2304      	movhi	r3, #4
 801a174:	4443      	add	r3, r8
 801a176:	2200      	movs	r2, #0
 801a178:	f843 2b04 	str.w	r2, [r3], #4
 801a17c:	429f      	cmp	r7, r3
 801a17e:	d2fb      	bcs.n	801a178 <__hexnan+0xcc>
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	b91b      	cbnz	r3, 801a18c <__hexnan+0xe0>
 801a184:	4547      	cmp	r7, r8
 801a186:	d128      	bne.n	801a1da <__hexnan+0x12e>
 801a188:	2301      	movs	r3, #1
 801a18a:	603b      	str	r3, [r7, #0]
 801a18c:	2005      	movs	r0, #5
 801a18e:	b007      	add	sp, #28
 801a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a194:	3501      	adds	r5, #1
 801a196:	2d08      	cmp	r5, #8
 801a198:	f10b 0b01 	add.w	fp, fp, #1
 801a19c:	dd06      	ble.n	801a1ac <__hexnan+0x100>
 801a19e:	4544      	cmp	r4, r8
 801a1a0:	d9c1      	bls.n	801a126 <__hexnan+0x7a>
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	f844 3c04 	str.w	r3, [r4, #-4]
 801a1a8:	2501      	movs	r5, #1
 801a1aa:	3c04      	subs	r4, #4
 801a1ac:	6822      	ldr	r2, [r4, #0]
 801a1ae:	f000 000f 	and.w	r0, r0, #15
 801a1b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a1b6:	6020      	str	r0, [r4, #0]
 801a1b8:	e7b5      	b.n	801a126 <__hexnan+0x7a>
 801a1ba:	2508      	movs	r5, #8
 801a1bc:	e7b3      	b.n	801a126 <__hexnan+0x7a>
 801a1be:	9b01      	ldr	r3, [sp, #4]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d0dd      	beq.n	801a180 <__hexnan+0xd4>
 801a1c4:	f1c3 0320 	rsb	r3, r3, #32
 801a1c8:	f04f 32ff 	mov.w	r2, #4294967295
 801a1cc:	40da      	lsrs	r2, r3
 801a1ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a1d2:	4013      	ands	r3, r2
 801a1d4:	f846 3c04 	str.w	r3, [r6, #-4]
 801a1d8:	e7d2      	b.n	801a180 <__hexnan+0xd4>
 801a1da:	3f04      	subs	r7, #4
 801a1dc:	e7d0      	b.n	801a180 <__hexnan+0xd4>
 801a1de:	2004      	movs	r0, #4
 801a1e0:	e7d5      	b.n	801a18e <__hexnan+0xe2>
	...

0801a1e4 <malloc>:
 801a1e4:	4b02      	ldr	r3, [pc, #8]	@ (801a1f0 <malloc+0xc>)
 801a1e6:	4601      	mov	r1, r0
 801a1e8:	6818      	ldr	r0, [r3, #0]
 801a1ea:	f000 b825 	b.w	801a238 <_malloc_r>
 801a1ee:	bf00      	nop
 801a1f0:	2400027c 	.word	0x2400027c

0801a1f4 <sbrk_aligned>:
 801a1f4:	b570      	push	{r4, r5, r6, lr}
 801a1f6:	4e0f      	ldr	r6, [pc, #60]	@ (801a234 <sbrk_aligned+0x40>)
 801a1f8:	460c      	mov	r4, r1
 801a1fa:	6831      	ldr	r1, [r6, #0]
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	b911      	cbnz	r1, 801a206 <sbrk_aligned+0x12>
 801a200:	f000 ff92 	bl	801b128 <_sbrk_r>
 801a204:	6030      	str	r0, [r6, #0]
 801a206:	4621      	mov	r1, r4
 801a208:	4628      	mov	r0, r5
 801a20a:	f000 ff8d 	bl	801b128 <_sbrk_r>
 801a20e:	1c43      	adds	r3, r0, #1
 801a210:	d103      	bne.n	801a21a <sbrk_aligned+0x26>
 801a212:	f04f 34ff 	mov.w	r4, #4294967295
 801a216:	4620      	mov	r0, r4
 801a218:	bd70      	pop	{r4, r5, r6, pc}
 801a21a:	1cc4      	adds	r4, r0, #3
 801a21c:	f024 0403 	bic.w	r4, r4, #3
 801a220:	42a0      	cmp	r0, r4
 801a222:	d0f8      	beq.n	801a216 <sbrk_aligned+0x22>
 801a224:	1a21      	subs	r1, r4, r0
 801a226:	4628      	mov	r0, r5
 801a228:	f000 ff7e 	bl	801b128 <_sbrk_r>
 801a22c:	3001      	adds	r0, #1
 801a22e:	d1f2      	bne.n	801a216 <sbrk_aligned+0x22>
 801a230:	e7ef      	b.n	801a212 <sbrk_aligned+0x1e>
 801a232:	bf00      	nop
 801a234:	2400635c 	.word	0x2400635c

0801a238 <_malloc_r>:
 801a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a23c:	1ccd      	adds	r5, r1, #3
 801a23e:	f025 0503 	bic.w	r5, r5, #3
 801a242:	3508      	adds	r5, #8
 801a244:	2d0c      	cmp	r5, #12
 801a246:	bf38      	it	cc
 801a248:	250c      	movcc	r5, #12
 801a24a:	2d00      	cmp	r5, #0
 801a24c:	4606      	mov	r6, r0
 801a24e:	db01      	blt.n	801a254 <_malloc_r+0x1c>
 801a250:	42a9      	cmp	r1, r5
 801a252:	d904      	bls.n	801a25e <_malloc_r+0x26>
 801a254:	230c      	movs	r3, #12
 801a256:	6033      	str	r3, [r6, #0]
 801a258:	2000      	movs	r0, #0
 801a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a25e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a334 <_malloc_r+0xfc>
 801a262:	f000 f87b 	bl	801a35c <__malloc_lock>
 801a266:	f8d8 3000 	ldr.w	r3, [r8]
 801a26a:	461c      	mov	r4, r3
 801a26c:	bb44      	cbnz	r4, 801a2c0 <_malloc_r+0x88>
 801a26e:	4629      	mov	r1, r5
 801a270:	4630      	mov	r0, r6
 801a272:	f7ff ffbf 	bl	801a1f4 <sbrk_aligned>
 801a276:	1c43      	adds	r3, r0, #1
 801a278:	4604      	mov	r4, r0
 801a27a:	d158      	bne.n	801a32e <_malloc_r+0xf6>
 801a27c:	f8d8 4000 	ldr.w	r4, [r8]
 801a280:	4627      	mov	r7, r4
 801a282:	2f00      	cmp	r7, #0
 801a284:	d143      	bne.n	801a30e <_malloc_r+0xd6>
 801a286:	2c00      	cmp	r4, #0
 801a288:	d04b      	beq.n	801a322 <_malloc_r+0xea>
 801a28a:	6823      	ldr	r3, [r4, #0]
 801a28c:	4639      	mov	r1, r7
 801a28e:	4630      	mov	r0, r6
 801a290:	eb04 0903 	add.w	r9, r4, r3
 801a294:	f000 ff48 	bl	801b128 <_sbrk_r>
 801a298:	4581      	cmp	r9, r0
 801a29a:	d142      	bne.n	801a322 <_malloc_r+0xea>
 801a29c:	6821      	ldr	r1, [r4, #0]
 801a29e:	1a6d      	subs	r5, r5, r1
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f7ff ffa6 	bl	801a1f4 <sbrk_aligned>
 801a2a8:	3001      	adds	r0, #1
 801a2aa:	d03a      	beq.n	801a322 <_malloc_r+0xea>
 801a2ac:	6823      	ldr	r3, [r4, #0]
 801a2ae:	442b      	add	r3, r5
 801a2b0:	6023      	str	r3, [r4, #0]
 801a2b2:	f8d8 3000 	ldr.w	r3, [r8]
 801a2b6:	685a      	ldr	r2, [r3, #4]
 801a2b8:	bb62      	cbnz	r2, 801a314 <_malloc_r+0xdc>
 801a2ba:	f8c8 7000 	str.w	r7, [r8]
 801a2be:	e00f      	b.n	801a2e0 <_malloc_r+0xa8>
 801a2c0:	6822      	ldr	r2, [r4, #0]
 801a2c2:	1b52      	subs	r2, r2, r5
 801a2c4:	d420      	bmi.n	801a308 <_malloc_r+0xd0>
 801a2c6:	2a0b      	cmp	r2, #11
 801a2c8:	d917      	bls.n	801a2fa <_malloc_r+0xc2>
 801a2ca:	1961      	adds	r1, r4, r5
 801a2cc:	42a3      	cmp	r3, r4
 801a2ce:	6025      	str	r5, [r4, #0]
 801a2d0:	bf18      	it	ne
 801a2d2:	6059      	strne	r1, [r3, #4]
 801a2d4:	6863      	ldr	r3, [r4, #4]
 801a2d6:	bf08      	it	eq
 801a2d8:	f8c8 1000 	streq.w	r1, [r8]
 801a2dc:	5162      	str	r2, [r4, r5]
 801a2de:	604b      	str	r3, [r1, #4]
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	f000 f841 	bl	801a368 <__malloc_unlock>
 801a2e6:	f104 000b 	add.w	r0, r4, #11
 801a2ea:	1d23      	adds	r3, r4, #4
 801a2ec:	f020 0007 	bic.w	r0, r0, #7
 801a2f0:	1ac2      	subs	r2, r0, r3
 801a2f2:	bf1c      	itt	ne
 801a2f4:	1a1b      	subne	r3, r3, r0
 801a2f6:	50a3      	strne	r3, [r4, r2]
 801a2f8:	e7af      	b.n	801a25a <_malloc_r+0x22>
 801a2fa:	6862      	ldr	r2, [r4, #4]
 801a2fc:	42a3      	cmp	r3, r4
 801a2fe:	bf0c      	ite	eq
 801a300:	f8c8 2000 	streq.w	r2, [r8]
 801a304:	605a      	strne	r2, [r3, #4]
 801a306:	e7eb      	b.n	801a2e0 <_malloc_r+0xa8>
 801a308:	4623      	mov	r3, r4
 801a30a:	6864      	ldr	r4, [r4, #4]
 801a30c:	e7ae      	b.n	801a26c <_malloc_r+0x34>
 801a30e:	463c      	mov	r4, r7
 801a310:	687f      	ldr	r7, [r7, #4]
 801a312:	e7b6      	b.n	801a282 <_malloc_r+0x4a>
 801a314:	461a      	mov	r2, r3
 801a316:	685b      	ldr	r3, [r3, #4]
 801a318:	42a3      	cmp	r3, r4
 801a31a:	d1fb      	bne.n	801a314 <_malloc_r+0xdc>
 801a31c:	2300      	movs	r3, #0
 801a31e:	6053      	str	r3, [r2, #4]
 801a320:	e7de      	b.n	801a2e0 <_malloc_r+0xa8>
 801a322:	230c      	movs	r3, #12
 801a324:	6033      	str	r3, [r6, #0]
 801a326:	4630      	mov	r0, r6
 801a328:	f000 f81e 	bl	801a368 <__malloc_unlock>
 801a32c:	e794      	b.n	801a258 <_malloc_r+0x20>
 801a32e:	6005      	str	r5, [r0, #0]
 801a330:	e7d6      	b.n	801a2e0 <_malloc_r+0xa8>
 801a332:	bf00      	nop
 801a334:	24006360 	.word	0x24006360

0801a338 <__ascii_mbtowc>:
 801a338:	b082      	sub	sp, #8
 801a33a:	b901      	cbnz	r1, 801a33e <__ascii_mbtowc+0x6>
 801a33c:	a901      	add	r1, sp, #4
 801a33e:	b142      	cbz	r2, 801a352 <__ascii_mbtowc+0x1a>
 801a340:	b14b      	cbz	r3, 801a356 <__ascii_mbtowc+0x1e>
 801a342:	7813      	ldrb	r3, [r2, #0]
 801a344:	600b      	str	r3, [r1, #0]
 801a346:	7812      	ldrb	r2, [r2, #0]
 801a348:	1e10      	subs	r0, r2, #0
 801a34a:	bf18      	it	ne
 801a34c:	2001      	movne	r0, #1
 801a34e:	b002      	add	sp, #8
 801a350:	4770      	bx	lr
 801a352:	4610      	mov	r0, r2
 801a354:	e7fb      	b.n	801a34e <__ascii_mbtowc+0x16>
 801a356:	f06f 0001 	mvn.w	r0, #1
 801a35a:	e7f8      	b.n	801a34e <__ascii_mbtowc+0x16>

0801a35c <__malloc_lock>:
 801a35c:	4801      	ldr	r0, [pc, #4]	@ (801a364 <__malloc_lock+0x8>)
 801a35e:	f7fe bdc4 	b.w	8018eea <__retarget_lock_acquire_recursive>
 801a362:	bf00      	nop
 801a364:	24006358 	.word	0x24006358

0801a368 <__malloc_unlock>:
 801a368:	4801      	ldr	r0, [pc, #4]	@ (801a370 <__malloc_unlock+0x8>)
 801a36a:	f7fe bdbf 	b.w	8018eec <__retarget_lock_release_recursive>
 801a36e:	bf00      	nop
 801a370:	24006358 	.word	0x24006358

0801a374 <_Balloc>:
 801a374:	b570      	push	{r4, r5, r6, lr}
 801a376:	69c6      	ldr	r6, [r0, #28]
 801a378:	4604      	mov	r4, r0
 801a37a:	460d      	mov	r5, r1
 801a37c:	b976      	cbnz	r6, 801a39c <_Balloc+0x28>
 801a37e:	2010      	movs	r0, #16
 801a380:	f7ff ff30 	bl	801a1e4 <malloc>
 801a384:	4602      	mov	r2, r0
 801a386:	61e0      	str	r0, [r4, #28]
 801a388:	b920      	cbnz	r0, 801a394 <_Balloc+0x20>
 801a38a:	4b18      	ldr	r3, [pc, #96]	@ (801a3ec <_Balloc+0x78>)
 801a38c:	4818      	ldr	r0, [pc, #96]	@ (801a3f0 <_Balloc+0x7c>)
 801a38e:	216b      	movs	r1, #107	@ 0x6b
 801a390:	f000 feda 	bl	801b148 <__assert_func>
 801a394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a398:	6006      	str	r6, [r0, #0]
 801a39a:	60c6      	str	r6, [r0, #12]
 801a39c:	69e6      	ldr	r6, [r4, #28]
 801a39e:	68f3      	ldr	r3, [r6, #12]
 801a3a0:	b183      	cbz	r3, 801a3c4 <_Balloc+0x50>
 801a3a2:	69e3      	ldr	r3, [r4, #28]
 801a3a4:	68db      	ldr	r3, [r3, #12]
 801a3a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a3aa:	b9b8      	cbnz	r0, 801a3dc <_Balloc+0x68>
 801a3ac:	2101      	movs	r1, #1
 801a3ae:	fa01 f605 	lsl.w	r6, r1, r5
 801a3b2:	1d72      	adds	r2, r6, #5
 801a3b4:	0092      	lsls	r2, r2, #2
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f000 fee4 	bl	801b184 <_calloc_r>
 801a3bc:	b160      	cbz	r0, 801a3d8 <_Balloc+0x64>
 801a3be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a3c2:	e00e      	b.n	801a3e2 <_Balloc+0x6e>
 801a3c4:	2221      	movs	r2, #33	@ 0x21
 801a3c6:	2104      	movs	r1, #4
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f000 fedb 	bl	801b184 <_calloc_r>
 801a3ce:	69e3      	ldr	r3, [r4, #28]
 801a3d0:	60f0      	str	r0, [r6, #12]
 801a3d2:	68db      	ldr	r3, [r3, #12]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d1e4      	bne.n	801a3a2 <_Balloc+0x2e>
 801a3d8:	2000      	movs	r0, #0
 801a3da:	bd70      	pop	{r4, r5, r6, pc}
 801a3dc:	6802      	ldr	r2, [r0, #0]
 801a3de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a3e8:	e7f7      	b.n	801a3da <_Balloc+0x66>
 801a3ea:	bf00      	nop
 801a3ec:	0801cd7a 	.word	0x0801cd7a
 801a3f0:	0801ce5a 	.word	0x0801ce5a

0801a3f4 <_Bfree>:
 801a3f4:	b570      	push	{r4, r5, r6, lr}
 801a3f6:	69c6      	ldr	r6, [r0, #28]
 801a3f8:	4605      	mov	r5, r0
 801a3fa:	460c      	mov	r4, r1
 801a3fc:	b976      	cbnz	r6, 801a41c <_Bfree+0x28>
 801a3fe:	2010      	movs	r0, #16
 801a400:	f7ff fef0 	bl	801a1e4 <malloc>
 801a404:	4602      	mov	r2, r0
 801a406:	61e8      	str	r0, [r5, #28]
 801a408:	b920      	cbnz	r0, 801a414 <_Bfree+0x20>
 801a40a:	4b09      	ldr	r3, [pc, #36]	@ (801a430 <_Bfree+0x3c>)
 801a40c:	4809      	ldr	r0, [pc, #36]	@ (801a434 <_Bfree+0x40>)
 801a40e:	218f      	movs	r1, #143	@ 0x8f
 801a410:	f000 fe9a 	bl	801b148 <__assert_func>
 801a414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a418:	6006      	str	r6, [r0, #0]
 801a41a:	60c6      	str	r6, [r0, #12]
 801a41c:	b13c      	cbz	r4, 801a42e <_Bfree+0x3a>
 801a41e:	69eb      	ldr	r3, [r5, #28]
 801a420:	6862      	ldr	r2, [r4, #4]
 801a422:	68db      	ldr	r3, [r3, #12]
 801a424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a428:	6021      	str	r1, [r4, #0]
 801a42a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a42e:	bd70      	pop	{r4, r5, r6, pc}
 801a430:	0801cd7a 	.word	0x0801cd7a
 801a434:	0801ce5a 	.word	0x0801ce5a

0801a438 <__multadd>:
 801a438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a43c:	690d      	ldr	r5, [r1, #16]
 801a43e:	4607      	mov	r7, r0
 801a440:	460c      	mov	r4, r1
 801a442:	461e      	mov	r6, r3
 801a444:	f101 0c14 	add.w	ip, r1, #20
 801a448:	2000      	movs	r0, #0
 801a44a:	f8dc 3000 	ldr.w	r3, [ip]
 801a44e:	b299      	uxth	r1, r3
 801a450:	fb02 6101 	mla	r1, r2, r1, r6
 801a454:	0c1e      	lsrs	r6, r3, #16
 801a456:	0c0b      	lsrs	r3, r1, #16
 801a458:	fb02 3306 	mla	r3, r2, r6, r3
 801a45c:	b289      	uxth	r1, r1
 801a45e:	3001      	adds	r0, #1
 801a460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a464:	4285      	cmp	r5, r0
 801a466:	f84c 1b04 	str.w	r1, [ip], #4
 801a46a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a46e:	dcec      	bgt.n	801a44a <__multadd+0x12>
 801a470:	b30e      	cbz	r6, 801a4b6 <__multadd+0x7e>
 801a472:	68a3      	ldr	r3, [r4, #8]
 801a474:	42ab      	cmp	r3, r5
 801a476:	dc19      	bgt.n	801a4ac <__multadd+0x74>
 801a478:	6861      	ldr	r1, [r4, #4]
 801a47a:	4638      	mov	r0, r7
 801a47c:	3101      	adds	r1, #1
 801a47e:	f7ff ff79 	bl	801a374 <_Balloc>
 801a482:	4680      	mov	r8, r0
 801a484:	b928      	cbnz	r0, 801a492 <__multadd+0x5a>
 801a486:	4602      	mov	r2, r0
 801a488:	4b0c      	ldr	r3, [pc, #48]	@ (801a4bc <__multadd+0x84>)
 801a48a:	480d      	ldr	r0, [pc, #52]	@ (801a4c0 <__multadd+0x88>)
 801a48c:	21ba      	movs	r1, #186	@ 0xba
 801a48e:	f000 fe5b 	bl	801b148 <__assert_func>
 801a492:	6922      	ldr	r2, [r4, #16]
 801a494:	3202      	adds	r2, #2
 801a496:	f104 010c 	add.w	r1, r4, #12
 801a49a:	0092      	lsls	r2, r2, #2
 801a49c:	300c      	adds	r0, #12
 801a49e:	f7fe fd26 	bl	8018eee <memcpy>
 801a4a2:	4621      	mov	r1, r4
 801a4a4:	4638      	mov	r0, r7
 801a4a6:	f7ff ffa5 	bl	801a3f4 <_Bfree>
 801a4aa:	4644      	mov	r4, r8
 801a4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a4b0:	3501      	adds	r5, #1
 801a4b2:	615e      	str	r6, [r3, #20]
 801a4b4:	6125      	str	r5, [r4, #16]
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4bc:	0801cde9 	.word	0x0801cde9
 801a4c0:	0801ce5a 	.word	0x0801ce5a

0801a4c4 <__s2b>:
 801a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4c8:	460c      	mov	r4, r1
 801a4ca:	4615      	mov	r5, r2
 801a4cc:	461f      	mov	r7, r3
 801a4ce:	2209      	movs	r2, #9
 801a4d0:	3308      	adds	r3, #8
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 801a4d8:	2100      	movs	r1, #0
 801a4da:	2201      	movs	r2, #1
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	db09      	blt.n	801a4f4 <__s2b+0x30>
 801a4e0:	4630      	mov	r0, r6
 801a4e2:	f7ff ff47 	bl	801a374 <_Balloc>
 801a4e6:	b940      	cbnz	r0, 801a4fa <__s2b+0x36>
 801a4e8:	4602      	mov	r2, r0
 801a4ea:	4b19      	ldr	r3, [pc, #100]	@ (801a550 <__s2b+0x8c>)
 801a4ec:	4819      	ldr	r0, [pc, #100]	@ (801a554 <__s2b+0x90>)
 801a4ee:	21d3      	movs	r1, #211	@ 0xd3
 801a4f0:	f000 fe2a 	bl	801b148 <__assert_func>
 801a4f4:	0052      	lsls	r2, r2, #1
 801a4f6:	3101      	adds	r1, #1
 801a4f8:	e7f0      	b.n	801a4dc <__s2b+0x18>
 801a4fa:	9b08      	ldr	r3, [sp, #32]
 801a4fc:	6143      	str	r3, [r0, #20]
 801a4fe:	2d09      	cmp	r5, #9
 801a500:	f04f 0301 	mov.w	r3, #1
 801a504:	6103      	str	r3, [r0, #16]
 801a506:	dd16      	ble.n	801a536 <__s2b+0x72>
 801a508:	f104 0909 	add.w	r9, r4, #9
 801a50c:	46c8      	mov	r8, r9
 801a50e:	442c      	add	r4, r5
 801a510:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a514:	4601      	mov	r1, r0
 801a516:	3b30      	subs	r3, #48	@ 0x30
 801a518:	220a      	movs	r2, #10
 801a51a:	4630      	mov	r0, r6
 801a51c:	f7ff ff8c 	bl	801a438 <__multadd>
 801a520:	45a0      	cmp	r8, r4
 801a522:	d1f5      	bne.n	801a510 <__s2b+0x4c>
 801a524:	f1a5 0408 	sub.w	r4, r5, #8
 801a528:	444c      	add	r4, r9
 801a52a:	1b2d      	subs	r5, r5, r4
 801a52c:	1963      	adds	r3, r4, r5
 801a52e:	42bb      	cmp	r3, r7
 801a530:	db04      	blt.n	801a53c <__s2b+0x78>
 801a532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a536:	340a      	adds	r4, #10
 801a538:	2509      	movs	r5, #9
 801a53a:	e7f6      	b.n	801a52a <__s2b+0x66>
 801a53c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a540:	4601      	mov	r1, r0
 801a542:	3b30      	subs	r3, #48	@ 0x30
 801a544:	220a      	movs	r2, #10
 801a546:	4630      	mov	r0, r6
 801a548:	f7ff ff76 	bl	801a438 <__multadd>
 801a54c:	e7ee      	b.n	801a52c <__s2b+0x68>
 801a54e:	bf00      	nop
 801a550:	0801cde9 	.word	0x0801cde9
 801a554:	0801ce5a 	.word	0x0801ce5a

0801a558 <__hi0bits>:
 801a558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a55c:	4603      	mov	r3, r0
 801a55e:	bf36      	itet	cc
 801a560:	0403      	lslcc	r3, r0, #16
 801a562:	2000      	movcs	r0, #0
 801a564:	2010      	movcc	r0, #16
 801a566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a56a:	bf3c      	itt	cc
 801a56c:	021b      	lslcc	r3, r3, #8
 801a56e:	3008      	addcc	r0, #8
 801a570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a574:	bf3c      	itt	cc
 801a576:	011b      	lslcc	r3, r3, #4
 801a578:	3004      	addcc	r0, #4
 801a57a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a57e:	bf3c      	itt	cc
 801a580:	009b      	lslcc	r3, r3, #2
 801a582:	3002      	addcc	r0, #2
 801a584:	2b00      	cmp	r3, #0
 801a586:	db05      	blt.n	801a594 <__hi0bits+0x3c>
 801a588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a58c:	f100 0001 	add.w	r0, r0, #1
 801a590:	bf08      	it	eq
 801a592:	2020      	moveq	r0, #32
 801a594:	4770      	bx	lr

0801a596 <__lo0bits>:
 801a596:	6803      	ldr	r3, [r0, #0]
 801a598:	4602      	mov	r2, r0
 801a59a:	f013 0007 	ands.w	r0, r3, #7
 801a59e:	d00b      	beq.n	801a5b8 <__lo0bits+0x22>
 801a5a0:	07d9      	lsls	r1, r3, #31
 801a5a2:	d421      	bmi.n	801a5e8 <__lo0bits+0x52>
 801a5a4:	0798      	lsls	r0, r3, #30
 801a5a6:	bf49      	itett	mi
 801a5a8:	085b      	lsrmi	r3, r3, #1
 801a5aa:	089b      	lsrpl	r3, r3, #2
 801a5ac:	2001      	movmi	r0, #1
 801a5ae:	6013      	strmi	r3, [r2, #0]
 801a5b0:	bf5c      	itt	pl
 801a5b2:	6013      	strpl	r3, [r2, #0]
 801a5b4:	2002      	movpl	r0, #2
 801a5b6:	4770      	bx	lr
 801a5b8:	b299      	uxth	r1, r3
 801a5ba:	b909      	cbnz	r1, 801a5c0 <__lo0bits+0x2a>
 801a5bc:	0c1b      	lsrs	r3, r3, #16
 801a5be:	2010      	movs	r0, #16
 801a5c0:	b2d9      	uxtb	r1, r3
 801a5c2:	b909      	cbnz	r1, 801a5c8 <__lo0bits+0x32>
 801a5c4:	3008      	adds	r0, #8
 801a5c6:	0a1b      	lsrs	r3, r3, #8
 801a5c8:	0719      	lsls	r1, r3, #28
 801a5ca:	bf04      	itt	eq
 801a5cc:	091b      	lsreq	r3, r3, #4
 801a5ce:	3004      	addeq	r0, #4
 801a5d0:	0799      	lsls	r1, r3, #30
 801a5d2:	bf04      	itt	eq
 801a5d4:	089b      	lsreq	r3, r3, #2
 801a5d6:	3002      	addeq	r0, #2
 801a5d8:	07d9      	lsls	r1, r3, #31
 801a5da:	d403      	bmi.n	801a5e4 <__lo0bits+0x4e>
 801a5dc:	085b      	lsrs	r3, r3, #1
 801a5de:	f100 0001 	add.w	r0, r0, #1
 801a5e2:	d003      	beq.n	801a5ec <__lo0bits+0x56>
 801a5e4:	6013      	str	r3, [r2, #0]
 801a5e6:	4770      	bx	lr
 801a5e8:	2000      	movs	r0, #0
 801a5ea:	4770      	bx	lr
 801a5ec:	2020      	movs	r0, #32
 801a5ee:	4770      	bx	lr

0801a5f0 <__i2b>:
 801a5f0:	b510      	push	{r4, lr}
 801a5f2:	460c      	mov	r4, r1
 801a5f4:	2101      	movs	r1, #1
 801a5f6:	f7ff febd 	bl	801a374 <_Balloc>
 801a5fa:	4602      	mov	r2, r0
 801a5fc:	b928      	cbnz	r0, 801a60a <__i2b+0x1a>
 801a5fe:	4b05      	ldr	r3, [pc, #20]	@ (801a614 <__i2b+0x24>)
 801a600:	4805      	ldr	r0, [pc, #20]	@ (801a618 <__i2b+0x28>)
 801a602:	f240 1145 	movw	r1, #325	@ 0x145
 801a606:	f000 fd9f 	bl	801b148 <__assert_func>
 801a60a:	2301      	movs	r3, #1
 801a60c:	6144      	str	r4, [r0, #20]
 801a60e:	6103      	str	r3, [r0, #16]
 801a610:	bd10      	pop	{r4, pc}
 801a612:	bf00      	nop
 801a614:	0801cde9 	.word	0x0801cde9
 801a618:	0801ce5a 	.word	0x0801ce5a

0801a61c <__multiply>:
 801a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a620:	4614      	mov	r4, r2
 801a622:	690a      	ldr	r2, [r1, #16]
 801a624:	6923      	ldr	r3, [r4, #16]
 801a626:	429a      	cmp	r2, r3
 801a628:	bfa8      	it	ge
 801a62a:	4623      	movge	r3, r4
 801a62c:	460f      	mov	r7, r1
 801a62e:	bfa4      	itt	ge
 801a630:	460c      	movge	r4, r1
 801a632:	461f      	movge	r7, r3
 801a634:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801a638:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801a63c:	68a3      	ldr	r3, [r4, #8]
 801a63e:	6861      	ldr	r1, [r4, #4]
 801a640:	eb0a 0609 	add.w	r6, sl, r9
 801a644:	42b3      	cmp	r3, r6
 801a646:	b085      	sub	sp, #20
 801a648:	bfb8      	it	lt
 801a64a:	3101      	addlt	r1, #1
 801a64c:	f7ff fe92 	bl	801a374 <_Balloc>
 801a650:	b930      	cbnz	r0, 801a660 <__multiply+0x44>
 801a652:	4602      	mov	r2, r0
 801a654:	4b44      	ldr	r3, [pc, #272]	@ (801a768 <__multiply+0x14c>)
 801a656:	4845      	ldr	r0, [pc, #276]	@ (801a76c <__multiply+0x150>)
 801a658:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a65c:	f000 fd74 	bl	801b148 <__assert_func>
 801a660:	f100 0514 	add.w	r5, r0, #20
 801a664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a668:	462b      	mov	r3, r5
 801a66a:	2200      	movs	r2, #0
 801a66c:	4543      	cmp	r3, r8
 801a66e:	d321      	bcc.n	801a6b4 <__multiply+0x98>
 801a670:	f107 0114 	add.w	r1, r7, #20
 801a674:	f104 0214 	add.w	r2, r4, #20
 801a678:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a67c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801a680:	9302      	str	r3, [sp, #8]
 801a682:	1b13      	subs	r3, r2, r4
 801a684:	3b15      	subs	r3, #21
 801a686:	f023 0303 	bic.w	r3, r3, #3
 801a68a:	3304      	adds	r3, #4
 801a68c:	f104 0715 	add.w	r7, r4, #21
 801a690:	42ba      	cmp	r2, r7
 801a692:	bf38      	it	cc
 801a694:	2304      	movcc	r3, #4
 801a696:	9301      	str	r3, [sp, #4]
 801a698:	9b02      	ldr	r3, [sp, #8]
 801a69a:	9103      	str	r1, [sp, #12]
 801a69c:	428b      	cmp	r3, r1
 801a69e:	d80c      	bhi.n	801a6ba <__multiply+0x9e>
 801a6a0:	2e00      	cmp	r6, #0
 801a6a2:	dd03      	ble.n	801a6ac <__multiply+0x90>
 801a6a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d05b      	beq.n	801a764 <__multiply+0x148>
 801a6ac:	6106      	str	r6, [r0, #16]
 801a6ae:	b005      	add	sp, #20
 801a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6b4:	f843 2b04 	str.w	r2, [r3], #4
 801a6b8:	e7d8      	b.n	801a66c <__multiply+0x50>
 801a6ba:	f8b1 a000 	ldrh.w	sl, [r1]
 801a6be:	f1ba 0f00 	cmp.w	sl, #0
 801a6c2:	d024      	beq.n	801a70e <__multiply+0xf2>
 801a6c4:	f104 0e14 	add.w	lr, r4, #20
 801a6c8:	46a9      	mov	r9, r5
 801a6ca:	f04f 0c00 	mov.w	ip, #0
 801a6ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a6d2:	f8d9 3000 	ldr.w	r3, [r9]
 801a6d6:	fa1f fb87 	uxth.w	fp, r7
 801a6da:	b29b      	uxth	r3, r3
 801a6dc:	fb0a 330b 	mla	r3, sl, fp, r3
 801a6e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801a6e4:	f8d9 7000 	ldr.w	r7, [r9]
 801a6e8:	4463      	add	r3, ip
 801a6ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a6ee:	fb0a c70b 	mla	r7, sl, fp, ip
 801a6f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801a6f6:	b29b      	uxth	r3, r3
 801a6f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a6fc:	4572      	cmp	r2, lr
 801a6fe:	f849 3b04 	str.w	r3, [r9], #4
 801a702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801a706:	d8e2      	bhi.n	801a6ce <__multiply+0xb2>
 801a708:	9b01      	ldr	r3, [sp, #4]
 801a70a:	f845 c003 	str.w	ip, [r5, r3]
 801a70e:	9b03      	ldr	r3, [sp, #12]
 801a710:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a714:	3104      	adds	r1, #4
 801a716:	f1b9 0f00 	cmp.w	r9, #0
 801a71a:	d021      	beq.n	801a760 <__multiply+0x144>
 801a71c:	682b      	ldr	r3, [r5, #0]
 801a71e:	f104 0c14 	add.w	ip, r4, #20
 801a722:	46ae      	mov	lr, r5
 801a724:	f04f 0a00 	mov.w	sl, #0
 801a728:	f8bc b000 	ldrh.w	fp, [ip]
 801a72c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801a730:	fb09 770b 	mla	r7, r9, fp, r7
 801a734:	4457      	add	r7, sl
 801a736:	b29b      	uxth	r3, r3
 801a738:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801a73c:	f84e 3b04 	str.w	r3, [lr], #4
 801a740:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a748:	f8be 3000 	ldrh.w	r3, [lr]
 801a74c:	fb09 330a 	mla	r3, r9, sl, r3
 801a750:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801a754:	4562      	cmp	r2, ip
 801a756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a75a:	d8e5      	bhi.n	801a728 <__multiply+0x10c>
 801a75c:	9f01      	ldr	r7, [sp, #4]
 801a75e:	51eb      	str	r3, [r5, r7]
 801a760:	3504      	adds	r5, #4
 801a762:	e799      	b.n	801a698 <__multiply+0x7c>
 801a764:	3e01      	subs	r6, #1
 801a766:	e79b      	b.n	801a6a0 <__multiply+0x84>
 801a768:	0801cde9 	.word	0x0801cde9
 801a76c:	0801ce5a 	.word	0x0801ce5a

0801a770 <__pow5mult>:
 801a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a774:	4615      	mov	r5, r2
 801a776:	f012 0203 	ands.w	r2, r2, #3
 801a77a:	4607      	mov	r7, r0
 801a77c:	460e      	mov	r6, r1
 801a77e:	d007      	beq.n	801a790 <__pow5mult+0x20>
 801a780:	4c25      	ldr	r4, [pc, #148]	@ (801a818 <__pow5mult+0xa8>)
 801a782:	3a01      	subs	r2, #1
 801a784:	2300      	movs	r3, #0
 801a786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a78a:	f7ff fe55 	bl	801a438 <__multadd>
 801a78e:	4606      	mov	r6, r0
 801a790:	10ad      	asrs	r5, r5, #2
 801a792:	d03d      	beq.n	801a810 <__pow5mult+0xa0>
 801a794:	69fc      	ldr	r4, [r7, #28]
 801a796:	b97c      	cbnz	r4, 801a7b8 <__pow5mult+0x48>
 801a798:	2010      	movs	r0, #16
 801a79a:	f7ff fd23 	bl	801a1e4 <malloc>
 801a79e:	4602      	mov	r2, r0
 801a7a0:	61f8      	str	r0, [r7, #28]
 801a7a2:	b928      	cbnz	r0, 801a7b0 <__pow5mult+0x40>
 801a7a4:	4b1d      	ldr	r3, [pc, #116]	@ (801a81c <__pow5mult+0xac>)
 801a7a6:	481e      	ldr	r0, [pc, #120]	@ (801a820 <__pow5mult+0xb0>)
 801a7a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a7ac:	f000 fccc 	bl	801b148 <__assert_func>
 801a7b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a7b4:	6004      	str	r4, [r0, #0]
 801a7b6:	60c4      	str	r4, [r0, #12]
 801a7b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a7bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a7c0:	b94c      	cbnz	r4, 801a7d6 <__pow5mult+0x66>
 801a7c2:	f240 2171 	movw	r1, #625	@ 0x271
 801a7c6:	4638      	mov	r0, r7
 801a7c8:	f7ff ff12 	bl	801a5f0 <__i2b>
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	f8c8 0008 	str.w	r0, [r8, #8]
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	6003      	str	r3, [r0, #0]
 801a7d6:	f04f 0900 	mov.w	r9, #0
 801a7da:	07eb      	lsls	r3, r5, #31
 801a7dc:	d50a      	bpl.n	801a7f4 <__pow5mult+0x84>
 801a7de:	4631      	mov	r1, r6
 801a7e0:	4622      	mov	r2, r4
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	f7ff ff1a 	bl	801a61c <__multiply>
 801a7e8:	4631      	mov	r1, r6
 801a7ea:	4680      	mov	r8, r0
 801a7ec:	4638      	mov	r0, r7
 801a7ee:	f7ff fe01 	bl	801a3f4 <_Bfree>
 801a7f2:	4646      	mov	r6, r8
 801a7f4:	106d      	asrs	r5, r5, #1
 801a7f6:	d00b      	beq.n	801a810 <__pow5mult+0xa0>
 801a7f8:	6820      	ldr	r0, [r4, #0]
 801a7fa:	b938      	cbnz	r0, 801a80c <__pow5mult+0x9c>
 801a7fc:	4622      	mov	r2, r4
 801a7fe:	4621      	mov	r1, r4
 801a800:	4638      	mov	r0, r7
 801a802:	f7ff ff0b 	bl	801a61c <__multiply>
 801a806:	6020      	str	r0, [r4, #0]
 801a808:	f8c0 9000 	str.w	r9, [r0]
 801a80c:	4604      	mov	r4, r0
 801a80e:	e7e4      	b.n	801a7da <__pow5mult+0x6a>
 801a810:	4630      	mov	r0, r6
 801a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a816:	bf00      	nop
 801a818:	0801ceb4 	.word	0x0801ceb4
 801a81c:	0801cd7a 	.word	0x0801cd7a
 801a820:	0801ce5a 	.word	0x0801ce5a

0801a824 <__lshift>:
 801a824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a828:	460c      	mov	r4, r1
 801a82a:	6849      	ldr	r1, [r1, #4]
 801a82c:	6923      	ldr	r3, [r4, #16]
 801a82e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a832:	68a3      	ldr	r3, [r4, #8]
 801a834:	4607      	mov	r7, r0
 801a836:	4691      	mov	r9, r2
 801a838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a83c:	f108 0601 	add.w	r6, r8, #1
 801a840:	42b3      	cmp	r3, r6
 801a842:	db0b      	blt.n	801a85c <__lshift+0x38>
 801a844:	4638      	mov	r0, r7
 801a846:	f7ff fd95 	bl	801a374 <_Balloc>
 801a84a:	4605      	mov	r5, r0
 801a84c:	b948      	cbnz	r0, 801a862 <__lshift+0x3e>
 801a84e:	4602      	mov	r2, r0
 801a850:	4b28      	ldr	r3, [pc, #160]	@ (801a8f4 <__lshift+0xd0>)
 801a852:	4829      	ldr	r0, [pc, #164]	@ (801a8f8 <__lshift+0xd4>)
 801a854:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a858:	f000 fc76 	bl	801b148 <__assert_func>
 801a85c:	3101      	adds	r1, #1
 801a85e:	005b      	lsls	r3, r3, #1
 801a860:	e7ee      	b.n	801a840 <__lshift+0x1c>
 801a862:	2300      	movs	r3, #0
 801a864:	f100 0114 	add.w	r1, r0, #20
 801a868:	f100 0210 	add.w	r2, r0, #16
 801a86c:	4618      	mov	r0, r3
 801a86e:	4553      	cmp	r3, sl
 801a870:	db33      	blt.n	801a8da <__lshift+0xb6>
 801a872:	6920      	ldr	r0, [r4, #16]
 801a874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a878:	f104 0314 	add.w	r3, r4, #20
 801a87c:	f019 091f 	ands.w	r9, r9, #31
 801a880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a888:	d02b      	beq.n	801a8e2 <__lshift+0xbe>
 801a88a:	f1c9 0e20 	rsb	lr, r9, #32
 801a88e:	468a      	mov	sl, r1
 801a890:	2200      	movs	r2, #0
 801a892:	6818      	ldr	r0, [r3, #0]
 801a894:	fa00 f009 	lsl.w	r0, r0, r9
 801a898:	4310      	orrs	r0, r2
 801a89a:	f84a 0b04 	str.w	r0, [sl], #4
 801a89e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8a2:	459c      	cmp	ip, r3
 801a8a4:	fa22 f20e 	lsr.w	r2, r2, lr
 801a8a8:	d8f3      	bhi.n	801a892 <__lshift+0x6e>
 801a8aa:	ebac 0304 	sub.w	r3, ip, r4
 801a8ae:	3b15      	subs	r3, #21
 801a8b0:	f023 0303 	bic.w	r3, r3, #3
 801a8b4:	3304      	adds	r3, #4
 801a8b6:	f104 0015 	add.w	r0, r4, #21
 801a8ba:	4584      	cmp	ip, r0
 801a8bc:	bf38      	it	cc
 801a8be:	2304      	movcc	r3, #4
 801a8c0:	50ca      	str	r2, [r1, r3]
 801a8c2:	b10a      	cbz	r2, 801a8c8 <__lshift+0xa4>
 801a8c4:	f108 0602 	add.w	r6, r8, #2
 801a8c8:	3e01      	subs	r6, #1
 801a8ca:	4638      	mov	r0, r7
 801a8cc:	612e      	str	r6, [r5, #16]
 801a8ce:	4621      	mov	r1, r4
 801a8d0:	f7ff fd90 	bl	801a3f4 <_Bfree>
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8da:	f842 0f04 	str.w	r0, [r2, #4]!
 801a8de:	3301      	adds	r3, #1
 801a8e0:	e7c5      	b.n	801a86e <__lshift+0x4a>
 801a8e2:	3904      	subs	r1, #4
 801a8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801a8ec:	459c      	cmp	ip, r3
 801a8ee:	d8f9      	bhi.n	801a8e4 <__lshift+0xc0>
 801a8f0:	e7ea      	b.n	801a8c8 <__lshift+0xa4>
 801a8f2:	bf00      	nop
 801a8f4:	0801cde9 	.word	0x0801cde9
 801a8f8:	0801ce5a 	.word	0x0801ce5a

0801a8fc <__mcmp>:
 801a8fc:	690a      	ldr	r2, [r1, #16]
 801a8fe:	4603      	mov	r3, r0
 801a900:	6900      	ldr	r0, [r0, #16]
 801a902:	1a80      	subs	r0, r0, r2
 801a904:	b530      	push	{r4, r5, lr}
 801a906:	d10e      	bne.n	801a926 <__mcmp+0x2a>
 801a908:	3314      	adds	r3, #20
 801a90a:	3114      	adds	r1, #20
 801a90c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a91c:	4295      	cmp	r5, r2
 801a91e:	d003      	beq.n	801a928 <__mcmp+0x2c>
 801a920:	d205      	bcs.n	801a92e <__mcmp+0x32>
 801a922:	f04f 30ff 	mov.w	r0, #4294967295
 801a926:	bd30      	pop	{r4, r5, pc}
 801a928:	42a3      	cmp	r3, r4
 801a92a:	d3f3      	bcc.n	801a914 <__mcmp+0x18>
 801a92c:	e7fb      	b.n	801a926 <__mcmp+0x2a>
 801a92e:	2001      	movs	r0, #1
 801a930:	e7f9      	b.n	801a926 <__mcmp+0x2a>
	...

0801a934 <__mdiff>:
 801a934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a938:	4689      	mov	r9, r1
 801a93a:	4606      	mov	r6, r0
 801a93c:	4611      	mov	r1, r2
 801a93e:	4648      	mov	r0, r9
 801a940:	4614      	mov	r4, r2
 801a942:	f7ff ffdb 	bl	801a8fc <__mcmp>
 801a946:	1e05      	subs	r5, r0, #0
 801a948:	d112      	bne.n	801a970 <__mdiff+0x3c>
 801a94a:	4629      	mov	r1, r5
 801a94c:	4630      	mov	r0, r6
 801a94e:	f7ff fd11 	bl	801a374 <_Balloc>
 801a952:	4602      	mov	r2, r0
 801a954:	b928      	cbnz	r0, 801a962 <__mdiff+0x2e>
 801a956:	4b3f      	ldr	r3, [pc, #252]	@ (801aa54 <__mdiff+0x120>)
 801a958:	f240 2137 	movw	r1, #567	@ 0x237
 801a95c:	483e      	ldr	r0, [pc, #248]	@ (801aa58 <__mdiff+0x124>)
 801a95e:	f000 fbf3 	bl	801b148 <__assert_func>
 801a962:	2301      	movs	r3, #1
 801a964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a968:	4610      	mov	r0, r2
 801a96a:	b003      	add	sp, #12
 801a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a970:	bfbc      	itt	lt
 801a972:	464b      	movlt	r3, r9
 801a974:	46a1      	movlt	r9, r4
 801a976:	4630      	mov	r0, r6
 801a978:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a97c:	bfba      	itte	lt
 801a97e:	461c      	movlt	r4, r3
 801a980:	2501      	movlt	r5, #1
 801a982:	2500      	movge	r5, #0
 801a984:	f7ff fcf6 	bl	801a374 <_Balloc>
 801a988:	4602      	mov	r2, r0
 801a98a:	b918      	cbnz	r0, 801a994 <__mdiff+0x60>
 801a98c:	4b31      	ldr	r3, [pc, #196]	@ (801aa54 <__mdiff+0x120>)
 801a98e:	f240 2145 	movw	r1, #581	@ 0x245
 801a992:	e7e3      	b.n	801a95c <__mdiff+0x28>
 801a994:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a998:	6926      	ldr	r6, [r4, #16]
 801a99a:	60c5      	str	r5, [r0, #12]
 801a99c:	f109 0310 	add.w	r3, r9, #16
 801a9a0:	f109 0514 	add.w	r5, r9, #20
 801a9a4:	f104 0e14 	add.w	lr, r4, #20
 801a9a8:	f100 0b14 	add.w	fp, r0, #20
 801a9ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a9b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a9b4:	9301      	str	r3, [sp, #4]
 801a9b6:	46d9      	mov	r9, fp
 801a9b8:	f04f 0c00 	mov.w	ip, #0
 801a9bc:	9b01      	ldr	r3, [sp, #4]
 801a9be:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a9c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a9c6:	9301      	str	r3, [sp, #4]
 801a9c8:	fa1f f38a 	uxth.w	r3, sl
 801a9cc:	4619      	mov	r1, r3
 801a9ce:	b283      	uxth	r3, r0
 801a9d0:	1acb      	subs	r3, r1, r3
 801a9d2:	0c00      	lsrs	r0, r0, #16
 801a9d4:	4463      	add	r3, ip
 801a9d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a9da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a9e4:	4576      	cmp	r6, lr
 801a9e6:	f849 3b04 	str.w	r3, [r9], #4
 801a9ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a9ee:	d8e5      	bhi.n	801a9bc <__mdiff+0x88>
 801a9f0:	1b33      	subs	r3, r6, r4
 801a9f2:	3b15      	subs	r3, #21
 801a9f4:	f023 0303 	bic.w	r3, r3, #3
 801a9f8:	3415      	adds	r4, #21
 801a9fa:	3304      	adds	r3, #4
 801a9fc:	42a6      	cmp	r6, r4
 801a9fe:	bf38      	it	cc
 801aa00:	2304      	movcc	r3, #4
 801aa02:	441d      	add	r5, r3
 801aa04:	445b      	add	r3, fp
 801aa06:	461e      	mov	r6, r3
 801aa08:	462c      	mov	r4, r5
 801aa0a:	4544      	cmp	r4, r8
 801aa0c:	d30e      	bcc.n	801aa2c <__mdiff+0xf8>
 801aa0e:	f108 0103 	add.w	r1, r8, #3
 801aa12:	1b49      	subs	r1, r1, r5
 801aa14:	f021 0103 	bic.w	r1, r1, #3
 801aa18:	3d03      	subs	r5, #3
 801aa1a:	45a8      	cmp	r8, r5
 801aa1c:	bf38      	it	cc
 801aa1e:	2100      	movcc	r1, #0
 801aa20:	440b      	add	r3, r1
 801aa22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801aa26:	b191      	cbz	r1, 801aa4e <__mdiff+0x11a>
 801aa28:	6117      	str	r7, [r2, #16]
 801aa2a:	e79d      	b.n	801a968 <__mdiff+0x34>
 801aa2c:	f854 1b04 	ldr.w	r1, [r4], #4
 801aa30:	46e6      	mov	lr, ip
 801aa32:	0c08      	lsrs	r0, r1, #16
 801aa34:	fa1c fc81 	uxtah	ip, ip, r1
 801aa38:	4471      	add	r1, lr
 801aa3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801aa3e:	b289      	uxth	r1, r1
 801aa40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801aa44:	f846 1b04 	str.w	r1, [r6], #4
 801aa48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801aa4c:	e7dd      	b.n	801aa0a <__mdiff+0xd6>
 801aa4e:	3f01      	subs	r7, #1
 801aa50:	e7e7      	b.n	801aa22 <__mdiff+0xee>
 801aa52:	bf00      	nop
 801aa54:	0801cde9 	.word	0x0801cde9
 801aa58:	0801ce5a 	.word	0x0801ce5a

0801aa5c <__ulp>:
 801aa5c:	b082      	sub	sp, #8
 801aa5e:	ed8d 0b00 	vstr	d0, [sp]
 801aa62:	9a01      	ldr	r2, [sp, #4]
 801aa64:	4b0f      	ldr	r3, [pc, #60]	@ (801aaa4 <__ulp+0x48>)
 801aa66:	4013      	ands	r3, r2
 801aa68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	dc08      	bgt.n	801aa82 <__ulp+0x26>
 801aa70:	425b      	negs	r3, r3
 801aa72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801aa76:	ea4f 5223 	mov.w	r2, r3, asr #20
 801aa7a:	da04      	bge.n	801aa86 <__ulp+0x2a>
 801aa7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801aa80:	4113      	asrs	r3, r2
 801aa82:	2200      	movs	r2, #0
 801aa84:	e008      	b.n	801aa98 <__ulp+0x3c>
 801aa86:	f1a2 0314 	sub.w	r3, r2, #20
 801aa8a:	2b1e      	cmp	r3, #30
 801aa8c:	bfda      	itte	le
 801aa8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801aa92:	40da      	lsrle	r2, r3
 801aa94:	2201      	movgt	r2, #1
 801aa96:	2300      	movs	r3, #0
 801aa98:	4619      	mov	r1, r3
 801aa9a:	4610      	mov	r0, r2
 801aa9c:	ec41 0b10 	vmov	d0, r0, r1
 801aaa0:	b002      	add	sp, #8
 801aaa2:	4770      	bx	lr
 801aaa4:	7ff00000 	.word	0x7ff00000

0801aaa8 <__b2d>:
 801aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aaac:	6906      	ldr	r6, [r0, #16]
 801aaae:	f100 0814 	add.w	r8, r0, #20
 801aab2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801aab6:	1f37      	subs	r7, r6, #4
 801aab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801aabc:	4610      	mov	r0, r2
 801aabe:	f7ff fd4b 	bl	801a558 <__hi0bits>
 801aac2:	f1c0 0320 	rsb	r3, r0, #32
 801aac6:	280a      	cmp	r0, #10
 801aac8:	600b      	str	r3, [r1, #0]
 801aaca:	491b      	ldr	r1, [pc, #108]	@ (801ab38 <__b2d+0x90>)
 801aacc:	dc15      	bgt.n	801aafa <__b2d+0x52>
 801aace:	f1c0 0c0b 	rsb	ip, r0, #11
 801aad2:	fa22 f30c 	lsr.w	r3, r2, ip
 801aad6:	45b8      	cmp	r8, r7
 801aad8:	ea43 0501 	orr.w	r5, r3, r1
 801aadc:	bf34      	ite	cc
 801aade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801aae2:	2300      	movcs	r3, #0
 801aae4:	3015      	adds	r0, #21
 801aae6:	fa02 f000 	lsl.w	r0, r2, r0
 801aaea:	fa23 f30c 	lsr.w	r3, r3, ip
 801aaee:	4303      	orrs	r3, r0
 801aaf0:	461c      	mov	r4, r3
 801aaf2:	ec45 4b10 	vmov	d0, r4, r5
 801aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aafa:	45b8      	cmp	r8, r7
 801aafc:	bf3a      	itte	cc
 801aafe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ab02:	f1a6 0708 	subcc.w	r7, r6, #8
 801ab06:	2300      	movcs	r3, #0
 801ab08:	380b      	subs	r0, #11
 801ab0a:	d012      	beq.n	801ab32 <__b2d+0x8a>
 801ab0c:	f1c0 0120 	rsb	r1, r0, #32
 801ab10:	fa23 f401 	lsr.w	r4, r3, r1
 801ab14:	4082      	lsls	r2, r0
 801ab16:	4322      	orrs	r2, r4
 801ab18:	4547      	cmp	r7, r8
 801ab1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801ab1e:	bf8c      	ite	hi
 801ab20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ab24:	2200      	movls	r2, #0
 801ab26:	4083      	lsls	r3, r0
 801ab28:	40ca      	lsrs	r2, r1
 801ab2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801ab2e:	4313      	orrs	r3, r2
 801ab30:	e7de      	b.n	801aaf0 <__b2d+0x48>
 801ab32:	ea42 0501 	orr.w	r5, r2, r1
 801ab36:	e7db      	b.n	801aaf0 <__b2d+0x48>
 801ab38:	3ff00000 	.word	0x3ff00000

0801ab3c <__d2b>:
 801ab3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ab40:	460f      	mov	r7, r1
 801ab42:	2101      	movs	r1, #1
 801ab44:	ec59 8b10 	vmov	r8, r9, d0
 801ab48:	4616      	mov	r6, r2
 801ab4a:	f7ff fc13 	bl	801a374 <_Balloc>
 801ab4e:	4604      	mov	r4, r0
 801ab50:	b930      	cbnz	r0, 801ab60 <__d2b+0x24>
 801ab52:	4602      	mov	r2, r0
 801ab54:	4b23      	ldr	r3, [pc, #140]	@ (801abe4 <__d2b+0xa8>)
 801ab56:	4824      	ldr	r0, [pc, #144]	@ (801abe8 <__d2b+0xac>)
 801ab58:	f240 310f 	movw	r1, #783	@ 0x30f
 801ab5c:	f000 faf4 	bl	801b148 <__assert_func>
 801ab60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ab64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ab68:	b10d      	cbz	r5, 801ab6e <__d2b+0x32>
 801ab6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ab6e:	9301      	str	r3, [sp, #4]
 801ab70:	f1b8 0300 	subs.w	r3, r8, #0
 801ab74:	d023      	beq.n	801abbe <__d2b+0x82>
 801ab76:	4668      	mov	r0, sp
 801ab78:	9300      	str	r3, [sp, #0]
 801ab7a:	f7ff fd0c 	bl	801a596 <__lo0bits>
 801ab7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ab82:	b1d0      	cbz	r0, 801abba <__d2b+0x7e>
 801ab84:	f1c0 0320 	rsb	r3, r0, #32
 801ab88:	fa02 f303 	lsl.w	r3, r2, r3
 801ab8c:	430b      	orrs	r3, r1
 801ab8e:	40c2      	lsrs	r2, r0
 801ab90:	6163      	str	r3, [r4, #20]
 801ab92:	9201      	str	r2, [sp, #4]
 801ab94:	9b01      	ldr	r3, [sp, #4]
 801ab96:	61a3      	str	r3, [r4, #24]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	bf0c      	ite	eq
 801ab9c:	2201      	moveq	r2, #1
 801ab9e:	2202      	movne	r2, #2
 801aba0:	6122      	str	r2, [r4, #16]
 801aba2:	b1a5      	cbz	r5, 801abce <__d2b+0x92>
 801aba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801aba8:	4405      	add	r5, r0
 801abaa:	603d      	str	r5, [r7, #0]
 801abac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801abb0:	6030      	str	r0, [r6, #0]
 801abb2:	4620      	mov	r0, r4
 801abb4:	b003      	add	sp, #12
 801abb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abba:	6161      	str	r1, [r4, #20]
 801abbc:	e7ea      	b.n	801ab94 <__d2b+0x58>
 801abbe:	a801      	add	r0, sp, #4
 801abc0:	f7ff fce9 	bl	801a596 <__lo0bits>
 801abc4:	9b01      	ldr	r3, [sp, #4]
 801abc6:	6163      	str	r3, [r4, #20]
 801abc8:	3020      	adds	r0, #32
 801abca:	2201      	movs	r2, #1
 801abcc:	e7e8      	b.n	801aba0 <__d2b+0x64>
 801abce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801abd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801abd6:	6038      	str	r0, [r7, #0]
 801abd8:	6918      	ldr	r0, [r3, #16]
 801abda:	f7ff fcbd 	bl	801a558 <__hi0bits>
 801abde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801abe2:	e7e5      	b.n	801abb0 <__d2b+0x74>
 801abe4:	0801cde9 	.word	0x0801cde9
 801abe8:	0801ce5a 	.word	0x0801ce5a

0801abec <__ratio>:
 801abec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abf0:	4688      	mov	r8, r1
 801abf2:	4669      	mov	r1, sp
 801abf4:	4681      	mov	r9, r0
 801abf6:	f7ff ff57 	bl	801aaa8 <__b2d>
 801abfa:	a901      	add	r1, sp, #4
 801abfc:	4640      	mov	r0, r8
 801abfe:	ec55 4b10 	vmov	r4, r5, d0
 801ac02:	f7ff ff51 	bl	801aaa8 <__b2d>
 801ac06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ac0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801ac0e:	1ad2      	subs	r2, r2, r3
 801ac10:	e9dd 3100 	ldrd	r3, r1, [sp]
 801ac14:	1a5b      	subs	r3, r3, r1
 801ac16:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ac1a:	ec57 6b10 	vmov	r6, r7, d0
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	bfd6      	itet	le
 801ac22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ac26:	462a      	movgt	r2, r5
 801ac28:	463a      	movle	r2, r7
 801ac2a:	46ab      	mov	fp, r5
 801ac2c:	46a2      	mov	sl, r4
 801ac2e:	bfce      	itee	gt
 801ac30:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801ac34:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801ac38:	ee00 3a90 	vmovle	s1, r3
 801ac3c:	ec4b ab17 	vmov	d7, sl, fp
 801ac40:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801ac44:	b003      	add	sp, #12
 801ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac4a <__copybits>:
 801ac4a:	3901      	subs	r1, #1
 801ac4c:	b570      	push	{r4, r5, r6, lr}
 801ac4e:	1149      	asrs	r1, r1, #5
 801ac50:	6914      	ldr	r4, [r2, #16]
 801ac52:	3101      	adds	r1, #1
 801ac54:	f102 0314 	add.w	r3, r2, #20
 801ac58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ac5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ac60:	1f05      	subs	r5, r0, #4
 801ac62:	42a3      	cmp	r3, r4
 801ac64:	d30c      	bcc.n	801ac80 <__copybits+0x36>
 801ac66:	1aa3      	subs	r3, r4, r2
 801ac68:	3b11      	subs	r3, #17
 801ac6a:	f023 0303 	bic.w	r3, r3, #3
 801ac6e:	3211      	adds	r2, #17
 801ac70:	42a2      	cmp	r2, r4
 801ac72:	bf88      	it	hi
 801ac74:	2300      	movhi	r3, #0
 801ac76:	4418      	add	r0, r3
 801ac78:	2300      	movs	r3, #0
 801ac7a:	4288      	cmp	r0, r1
 801ac7c:	d305      	bcc.n	801ac8a <__copybits+0x40>
 801ac7e:	bd70      	pop	{r4, r5, r6, pc}
 801ac80:	f853 6b04 	ldr.w	r6, [r3], #4
 801ac84:	f845 6f04 	str.w	r6, [r5, #4]!
 801ac88:	e7eb      	b.n	801ac62 <__copybits+0x18>
 801ac8a:	f840 3b04 	str.w	r3, [r0], #4
 801ac8e:	e7f4      	b.n	801ac7a <__copybits+0x30>

0801ac90 <__any_on>:
 801ac90:	f100 0214 	add.w	r2, r0, #20
 801ac94:	6900      	ldr	r0, [r0, #16]
 801ac96:	114b      	asrs	r3, r1, #5
 801ac98:	4298      	cmp	r0, r3
 801ac9a:	b510      	push	{r4, lr}
 801ac9c:	db11      	blt.n	801acc2 <__any_on+0x32>
 801ac9e:	dd0a      	ble.n	801acb6 <__any_on+0x26>
 801aca0:	f011 011f 	ands.w	r1, r1, #31
 801aca4:	d007      	beq.n	801acb6 <__any_on+0x26>
 801aca6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801acaa:	fa24 f001 	lsr.w	r0, r4, r1
 801acae:	fa00 f101 	lsl.w	r1, r0, r1
 801acb2:	428c      	cmp	r4, r1
 801acb4:	d10b      	bne.n	801acce <__any_on+0x3e>
 801acb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801acba:	4293      	cmp	r3, r2
 801acbc:	d803      	bhi.n	801acc6 <__any_on+0x36>
 801acbe:	2000      	movs	r0, #0
 801acc0:	bd10      	pop	{r4, pc}
 801acc2:	4603      	mov	r3, r0
 801acc4:	e7f7      	b.n	801acb6 <__any_on+0x26>
 801acc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801acca:	2900      	cmp	r1, #0
 801accc:	d0f5      	beq.n	801acba <__any_on+0x2a>
 801acce:	2001      	movs	r0, #1
 801acd0:	e7f6      	b.n	801acc0 <__any_on+0x30>

0801acd2 <__ascii_wctomb>:
 801acd2:	4603      	mov	r3, r0
 801acd4:	4608      	mov	r0, r1
 801acd6:	b141      	cbz	r1, 801acea <__ascii_wctomb+0x18>
 801acd8:	2aff      	cmp	r2, #255	@ 0xff
 801acda:	d904      	bls.n	801ace6 <__ascii_wctomb+0x14>
 801acdc:	228a      	movs	r2, #138	@ 0x8a
 801acde:	601a      	str	r2, [r3, #0]
 801ace0:	f04f 30ff 	mov.w	r0, #4294967295
 801ace4:	4770      	bx	lr
 801ace6:	700a      	strb	r2, [r1, #0]
 801ace8:	2001      	movs	r0, #1
 801acea:	4770      	bx	lr

0801acec <__ssputs_r>:
 801acec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acf0:	688e      	ldr	r6, [r1, #8]
 801acf2:	461f      	mov	r7, r3
 801acf4:	42be      	cmp	r6, r7
 801acf6:	680b      	ldr	r3, [r1, #0]
 801acf8:	4682      	mov	sl, r0
 801acfa:	460c      	mov	r4, r1
 801acfc:	4690      	mov	r8, r2
 801acfe:	d82d      	bhi.n	801ad5c <__ssputs_r+0x70>
 801ad00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ad08:	d026      	beq.n	801ad58 <__ssputs_r+0x6c>
 801ad0a:	6965      	ldr	r5, [r4, #20]
 801ad0c:	6909      	ldr	r1, [r1, #16]
 801ad0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ad12:	eba3 0901 	sub.w	r9, r3, r1
 801ad16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ad1a:	1c7b      	adds	r3, r7, #1
 801ad1c:	444b      	add	r3, r9
 801ad1e:	106d      	asrs	r5, r5, #1
 801ad20:	429d      	cmp	r5, r3
 801ad22:	bf38      	it	cc
 801ad24:	461d      	movcc	r5, r3
 801ad26:	0553      	lsls	r3, r2, #21
 801ad28:	d527      	bpl.n	801ad7a <__ssputs_r+0x8e>
 801ad2a:	4629      	mov	r1, r5
 801ad2c:	f7ff fa84 	bl	801a238 <_malloc_r>
 801ad30:	4606      	mov	r6, r0
 801ad32:	b360      	cbz	r0, 801ad8e <__ssputs_r+0xa2>
 801ad34:	6921      	ldr	r1, [r4, #16]
 801ad36:	464a      	mov	r2, r9
 801ad38:	f7fe f8d9 	bl	8018eee <memcpy>
 801ad3c:	89a3      	ldrh	r3, [r4, #12]
 801ad3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ad42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ad46:	81a3      	strh	r3, [r4, #12]
 801ad48:	6126      	str	r6, [r4, #16]
 801ad4a:	6165      	str	r5, [r4, #20]
 801ad4c:	444e      	add	r6, r9
 801ad4e:	eba5 0509 	sub.w	r5, r5, r9
 801ad52:	6026      	str	r6, [r4, #0]
 801ad54:	60a5      	str	r5, [r4, #8]
 801ad56:	463e      	mov	r6, r7
 801ad58:	42be      	cmp	r6, r7
 801ad5a:	d900      	bls.n	801ad5e <__ssputs_r+0x72>
 801ad5c:	463e      	mov	r6, r7
 801ad5e:	6820      	ldr	r0, [r4, #0]
 801ad60:	4632      	mov	r2, r6
 801ad62:	4641      	mov	r1, r8
 801ad64:	f000 f9c6 	bl	801b0f4 <memmove>
 801ad68:	68a3      	ldr	r3, [r4, #8]
 801ad6a:	1b9b      	subs	r3, r3, r6
 801ad6c:	60a3      	str	r3, [r4, #8]
 801ad6e:	6823      	ldr	r3, [r4, #0]
 801ad70:	4433      	add	r3, r6
 801ad72:	6023      	str	r3, [r4, #0]
 801ad74:	2000      	movs	r0, #0
 801ad76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad7a:	462a      	mov	r2, r5
 801ad7c:	f000 fa16 	bl	801b1ac <_realloc_r>
 801ad80:	4606      	mov	r6, r0
 801ad82:	2800      	cmp	r0, #0
 801ad84:	d1e0      	bne.n	801ad48 <__ssputs_r+0x5c>
 801ad86:	6921      	ldr	r1, [r4, #16]
 801ad88:	4650      	mov	r0, sl
 801ad8a:	f7fe fea7 	bl	8019adc <_free_r>
 801ad8e:	230c      	movs	r3, #12
 801ad90:	f8ca 3000 	str.w	r3, [sl]
 801ad94:	89a3      	ldrh	r3, [r4, #12]
 801ad96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad9a:	81a3      	strh	r3, [r4, #12]
 801ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 801ada0:	e7e9      	b.n	801ad76 <__ssputs_r+0x8a>
	...

0801ada4 <_svfiprintf_r>:
 801ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada8:	4698      	mov	r8, r3
 801adaa:	898b      	ldrh	r3, [r1, #12]
 801adac:	061b      	lsls	r3, r3, #24
 801adae:	b09d      	sub	sp, #116	@ 0x74
 801adb0:	4607      	mov	r7, r0
 801adb2:	460d      	mov	r5, r1
 801adb4:	4614      	mov	r4, r2
 801adb6:	d510      	bpl.n	801adda <_svfiprintf_r+0x36>
 801adb8:	690b      	ldr	r3, [r1, #16]
 801adba:	b973      	cbnz	r3, 801adda <_svfiprintf_r+0x36>
 801adbc:	2140      	movs	r1, #64	@ 0x40
 801adbe:	f7ff fa3b 	bl	801a238 <_malloc_r>
 801adc2:	6028      	str	r0, [r5, #0]
 801adc4:	6128      	str	r0, [r5, #16]
 801adc6:	b930      	cbnz	r0, 801add6 <_svfiprintf_r+0x32>
 801adc8:	230c      	movs	r3, #12
 801adca:	603b      	str	r3, [r7, #0]
 801adcc:	f04f 30ff 	mov.w	r0, #4294967295
 801add0:	b01d      	add	sp, #116	@ 0x74
 801add2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add6:	2340      	movs	r3, #64	@ 0x40
 801add8:	616b      	str	r3, [r5, #20]
 801adda:	2300      	movs	r3, #0
 801addc:	9309      	str	r3, [sp, #36]	@ 0x24
 801adde:	2320      	movs	r3, #32
 801ade0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ade4:	f8cd 800c 	str.w	r8, [sp, #12]
 801ade8:	2330      	movs	r3, #48	@ 0x30
 801adea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801af88 <_svfiprintf_r+0x1e4>
 801adee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801adf2:	f04f 0901 	mov.w	r9, #1
 801adf6:	4623      	mov	r3, r4
 801adf8:	469a      	mov	sl, r3
 801adfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adfe:	b10a      	cbz	r2, 801ae04 <_svfiprintf_r+0x60>
 801ae00:	2a25      	cmp	r2, #37	@ 0x25
 801ae02:	d1f9      	bne.n	801adf8 <_svfiprintf_r+0x54>
 801ae04:	ebba 0b04 	subs.w	fp, sl, r4
 801ae08:	d00b      	beq.n	801ae22 <_svfiprintf_r+0x7e>
 801ae0a:	465b      	mov	r3, fp
 801ae0c:	4622      	mov	r2, r4
 801ae0e:	4629      	mov	r1, r5
 801ae10:	4638      	mov	r0, r7
 801ae12:	f7ff ff6b 	bl	801acec <__ssputs_r>
 801ae16:	3001      	adds	r0, #1
 801ae18:	f000 80a7 	beq.w	801af6a <_svfiprintf_r+0x1c6>
 801ae1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae1e:	445a      	add	r2, fp
 801ae20:	9209      	str	r2, [sp, #36]	@ 0x24
 801ae22:	f89a 3000 	ldrb.w	r3, [sl]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	f000 809f 	beq.w	801af6a <_svfiprintf_r+0x1c6>
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	f04f 32ff 	mov.w	r2, #4294967295
 801ae32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae36:	f10a 0a01 	add.w	sl, sl, #1
 801ae3a:	9304      	str	r3, [sp, #16]
 801ae3c:	9307      	str	r3, [sp, #28]
 801ae3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ae42:	931a      	str	r3, [sp, #104]	@ 0x68
 801ae44:	4654      	mov	r4, sl
 801ae46:	2205      	movs	r2, #5
 801ae48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae4c:	484e      	ldr	r0, [pc, #312]	@ (801af88 <_svfiprintf_r+0x1e4>)
 801ae4e:	f7e5 fa6f 	bl	8000330 <memchr>
 801ae52:	9a04      	ldr	r2, [sp, #16]
 801ae54:	b9d8      	cbnz	r0, 801ae8e <_svfiprintf_r+0xea>
 801ae56:	06d0      	lsls	r0, r2, #27
 801ae58:	bf44      	itt	mi
 801ae5a:	2320      	movmi	r3, #32
 801ae5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae60:	0711      	lsls	r1, r2, #28
 801ae62:	bf44      	itt	mi
 801ae64:	232b      	movmi	r3, #43	@ 0x2b
 801ae66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae6a:	f89a 3000 	ldrb.w	r3, [sl]
 801ae6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ae70:	d015      	beq.n	801ae9e <_svfiprintf_r+0xfa>
 801ae72:	9a07      	ldr	r2, [sp, #28]
 801ae74:	4654      	mov	r4, sl
 801ae76:	2000      	movs	r0, #0
 801ae78:	f04f 0c0a 	mov.w	ip, #10
 801ae7c:	4621      	mov	r1, r4
 801ae7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae82:	3b30      	subs	r3, #48	@ 0x30
 801ae84:	2b09      	cmp	r3, #9
 801ae86:	d94b      	bls.n	801af20 <_svfiprintf_r+0x17c>
 801ae88:	b1b0      	cbz	r0, 801aeb8 <_svfiprintf_r+0x114>
 801ae8a:	9207      	str	r2, [sp, #28]
 801ae8c:	e014      	b.n	801aeb8 <_svfiprintf_r+0x114>
 801ae8e:	eba0 0308 	sub.w	r3, r0, r8
 801ae92:	fa09 f303 	lsl.w	r3, r9, r3
 801ae96:	4313      	orrs	r3, r2
 801ae98:	9304      	str	r3, [sp, #16]
 801ae9a:	46a2      	mov	sl, r4
 801ae9c:	e7d2      	b.n	801ae44 <_svfiprintf_r+0xa0>
 801ae9e:	9b03      	ldr	r3, [sp, #12]
 801aea0:	1d19      	adds	r1, r3, #4
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	9103      	str	r1, [sp, #12]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	bfbb      	ittet	lt
 801aeaa:	425b      	neglt	r3, r3
 801aeac:	f042 0202 	orrlt.w	r2, r2, #2
 801aeb0:	9307      	strge	r3, [sp, #28]
 801aeb2:	9307      	strlt	r3, [sp, #28]
 801aeb4:	bfb8      	it	lt
 801aeb6:	9204      	strlt	r2, [sp, #16]
 801aeb8:	7823      	ldrb	r3, [r4, #0]
 801aeba:	2b2e      	cmp	r3, #46	@ 0x2e
 801aebc:	d10a      	bne.n	801aed4 <_svfiprintf_r+0x130>
 801aebe:	7863      	ldrb	r3, [r4, #1]
 801aec0:	2b2a      	cmp	r3, #42	@ 0x2a
 801aec2:	d132      	bne.n	801af2a <_svfiprintf_r+0x186>
 801aec4:	9b03      	ldr	r3, [sp, #12]
 801aec6:	1d1a      	adds	r2, r3, #4
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	9203      	str	r2, [sp, #12]
 801aecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aed0:	3402      	adds	r4, #2
 801aed2:	9305      	str	r3, [sp, #20]
 801aed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801af98 <_svfiprintf_r+0x1f4>
 801aed8:	7821      	ldrb	r1, [r4, #0]
 801aeda:	2203      	movs	r2, #3
 801aedc:	4650      	mov	r0, sl
 801aede:	f7e5 fa27 	bl	8000330 <memchr>
 801aee2:	b138      	cbz	r0, 801aef4 <_svfiprintf_r+0x150>
 801aee4:	9b04      	ldr	r3, [sp, #16]
 801aee6:	eba0 000a 	sub.w	r0, r0, sl
 801aeea:	2240      	movs	r2, #64	@ 0x40
 801aeec:	4082      	lsls	r2, r0
 801aeee:	4313      	orrs	r3, r2
 801aef0:	3401      	adds	r4, #1
 801aef2:	9304      	str	r3, [sp, #16]
 801aef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aef8:	4824      	ldr	r0, [pc, #144]	@ (801af8c <_svfiprintf_r+0x1e8>)
 801aefa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aefe:	2206      	movs	r2, #6
 801af00:	f7e5 fa16 	bl	8000330 <memchr>
 801af04:	2800      	cmp	r0, #0
 801af06:	d036      	beq.n	801af76 <_svfiprintf_r+0x1d2>
 801af08:	4b21      	ldr	r3, [pc, #132]	@ (801af90 <_svfiprintf_r+0x1ec>)
 801af0a:	bb1b      	cbnz	r3, 801af54 <_svfiprintf_r+0x1b0>
 801af0c:	9b03      	ldr	r3, [sp, #12]
 801af0e:	3307      	adds	r3, #7
 801af10:	f023 0307 	bic.w	r3, r3, #7
 801af14:	3308      	adds	r3, #8
 801af16:	9303      	str	r3, [sp, #12]
 801af18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af1a:	4433      	add	r3, r6
 801af1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801af1e:	e76a      	b.n	801adf6 <_svfiprintf_r+0x52>
 801af20:	fb0c 3202 	mla	r2, ip, r2, r3
 801af24:	460c      	mov	r4, r1
 801af26:	2001      	movs	r0, #1
 801af28:	e7a8      	b.n	801ae7c <_svfiprintf_r+0xd8>
 801af2a:	2300      	movs	r3, #0
 801af2c:	3401      	adds	r4, #1
 801af2e:	9305      	str	r3, [sp, #20]
 801af30:	4619      	mov	r1, r3
 801af32:	f04f 0c0a 	mov.w	ip, #10
 801af36:	4620      	mov	r0, r4
 801af38:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af3c:	3a30      	subs	r2, #48	@ 0x30
 801af3e:	2a09      	cmp	r2, #9
 801af40:	d903      	bls.n	801af4a <_svfiprintf_r+0x1a6>
 801af42:	2b00      	cmp	r3, #0
 801af44:	d0c6      	beq.n	801aed4 <_svfiprintf_r+0x130>
 801af46:	9105      	str	r1, [sp, #20]
 801af48:	e7c4      	b.n	801aed4 <_svfiprintf_r+0x130>
 801af4a:	fb0c 2101 	mla	r1, ip, r1, r2
 801af4e:	4604      	mov	r4, r0
 801af50:	2301      	movs	r3, #1
 801af52:	e7f0      	b.n	801af36 <_svfiprintf_r+0x192>
 801af54:	ab03      	add	r3, sp, #12
 801af56:	9300      	str	r3, [sp, #0]
 801af58:	462a      	mov	r2, r5
 801af5a:	4b0e      	ldr	r3, [pc, #56]	@ (801af94 <_svfiprintf_r+0x1f0>)
 801af5c:	a904      	add	r1, sp, #16
 801af5e:	4638      	mov	r0, r7
 801af60:	f7fd fa5a 	bl	8018418 <_printf_float>
 801af64:	1c42      	adds	r2, r0, #1
 801af66:	4606      	mov	r6, r0
 801af68:	d1d6      	bne.n	801af18 <_svfiprintf_r+0x174>
 801af6a:	89ab      	ldrh	r3, [r5, #12]
 801af6c:	065b      	lsls	r3, r3, #25
 801af6e:	f53f af2d 	bmi.w	801adcc <_svfiprintf_r+0x28>
 801af72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801af74:	e72c      	b.n	801add0 <_svfiprintf_r+0x2c>
 801af76:	ab03      	add	r3, sp, #12
 801af78:	9300      	str	r3, [sp, #0]
 801af7a:	462a      	mov	r2, r5
 801af7c:	4b05      	ldr	r3, [pc, #20]	@ (801af94 <_svfiprintf_r+0x1f0>)
 801af7e:	a904      	add	r1, sp, #16
 801af80:	4638      	mov	r0, r7
 801af82:	f7fd fcd1 	bl	8018928 <_printf_i>
 801af86:	e7ed      	b.n	801af64 <_svfiprintf_r+0x1c0>
 801af88:	0801cfb0 	.word	0x0801cfb0
 801af8c:	0801cfba 	.word	0x0801cfba
 801af90:	08018419 	.word	0x08018419
 801af94:	0801aced 	.word	0x0801aced
 801af98:	0801cfb6 	.word	0x0801cfb6

0801af9c <__sflush_r>:
 801af9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afa4:	0716      	lsls	r6, r2, #28
 801afa6:	4605      	mov	r5, r0
 801afa8:	460c      	mov	r4, r1
 801afaa:	d454      	bmi.n	801b056 <__sflush_r+0xba>
 801afac:	684b      	ldr	r3, [r1, #4]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	dc02      	bgt.n	801afb8 <__sflush_r+0x1c>
 801afb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	dd48      	ble.n	801b04a <__sflush_r+0xae>
 801afb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801afba:	2e00      	cmp	r6, #0
 801afbc:	d045      	beq.n	801b04a <__sflush_r+0xae>
 801afbe:	2300      	movs	r3, #0
 801afc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801afc4:	682f      	ldr	r7, [r5, #0]
 801afc6:	6a21      	ldr	r1, [r4, #32]
 801afc8:	602b      	str	r3, [r5, #0]
 801afca:	d030      	beq.n	801b02e <__sflush_r+0x92>
 801afcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801afce:	89a3      	ldrh	r3, [r4, #12]
 801afd0:	0759      	lsls	r1, r3, #29
 801afd2:	d505      	bpl.n	801afe0 <__sflush_r+0x44>
 801afd4:	6863      	ldr	r3, [r4, #4]
 801afd6:	1ad2      	subs	r2, r2, r3
 801afd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801afda:	b10b      	cbz	r3, 801afe0 <__sflush_r+0x44>
 801afdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801afde:	1ad2      	subs	r2, r2, r3
 801afe0:	2300      	movs	r3, #0
 801afe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801afe4:	6a21      	ldr	r1, [r4, #32]
 801afe6:	4628      	mov	r0, r5
 801afe8:	47b0      	blx	r6
 801afea:	1c43      	adds	r3, r0, #1
 801afec:	89a3      	ldrh	r3, [r4, #12]
 801afee:	d106      	bne.n	801affe <__sflush_r+0x62>
 801aff0:	6829      	ldr	r1, [r5, #0]
 801aff2:	291d      	cmp	r1, #29
 801aff4:	d82b      	bhi.n	801b04e <__sflush_r+0xb2>
 801aff6:	4a2a      	ldr	r2, [pc, #168]	@ (801b0a0 <__sflush_r+0x104>)
 801aff8:	410a      	asrs	r2, r1
 801affa:	07d6      	lsls	r6, r2, #31
 801affc:	d427      	bmi.n	801b04e <__sflush_r+0xb2>
 801affe:	2200      	movs	r2, #0
 801b000:	6062      	str	r2, [r4, #4]
 801b002:	04d9      	lsls	r1, r3, #19
 801b004:	6922      	ldr	r2, [r4, #16]
 801b006:	6022      	str	r2, [r4, #0]
 801b008:	d504      	bpl.n	801b014 <__sflush_r+0x78>
 801b00a:	1c42      	adds	r2, r0, #1
 801b00c:	d101      	bne.n	801b012 <__sflush_r+0x76>
 801b00e:	682b      	ldr	r3, [r5, #0]
 801b010:	b903      	cbnz	r3, 801b014 <__sflush_r+0x78>
 801b012:	6560      	str	r0, [r4, #84]	@ 0x54
 801b014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b016:	602f      	str	r7, [r5, #0]
 801b018:	b1b9      	cbz	r1, 801b04a <__sflush_r+0xae>
 801b01a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b01e:	4299      	cmp	r1, r3
 801b020:	d002      	beq.n	801b028 <__sflush_r+0x8c>
 801b022:	4628      	mov	r0, r5
 801b024:	f7fe fd5a 	bl	8019adc <_free_r>
 801b028:	2300      	movs	r3, #0
 801b02a:	6363      	str	r3, [r4, #52]	@ 0x34
 801b02c:	e00d      	b.n	801b04a <__sflush_r+0xae>
 801b02e:	2301      	movs	r3, #1
 801b030:	4628      	mov	r0, r5
 801b032:	47b0      	blx	r6
 801b034:	4602      	mov	r2, r0
 801b036:	1c50      	adds	r0, r2, #1
 801b038:	d1c9      	bne.n	801afce <__sflush_r+0x32>
 801b03a:	682b      	ldr	r3, [r5, #0]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d0c6      	beq.n	801afce <__sflush_r+0x32>
 801b040:	2b1d      	cmp	r3, #29
 801b042:	d001      	beq.n	801b048 <__sflush_r+0xac>
 801b044:	2b16      	cmp	r3, #22
 801b046:	d11e      	bne.n	801b086 <__sflush_r+0xea>
 801b048:	602f      	str	r7, [r5, #0]
 801b04a:	2000      	movs	r0, #0
 801b04c:	e022      	b.n	801b094 <__sflush_r+0xf8>
 801b04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b052:	b21b      	sxth	r3, r3
 801b054:	e01b      	b.n	801b08e <__sflush_r+0xf2>
 801b056:	690f      	ldr	r7, [r1, #16]
 801b058:	2f00      	cmp	r7, #0
 801b05a:	d0f6      	beq.n	801b04a <__sflush_r+0xae>
 801b05c:	0793      	lsls	r3, r2, #30
 801b05e:	680e      	ldr	r6, [r1, #0]
 801b060:	bf08      	it	eq
 801b062:	694b      	ldreq	r3, [r1, #20]
 801b064:	600f      	str	r7, [r1, #0]
 801b066:	bf18      	it	ne
 801b068:	2300      	movne	r3, #0
 801b06a:	eba6 0807 	sub.w	r8, r6, r7
 801b06e:	608b      	str	r3, [r1, #8]
 801b070:	f1b8 0f00 	cmp.w	r8, #0
 801b074:	dde9      	ble.n	801b04a <__sflush_r+0xae>
 801b076:	6a21      	ldr	r1, [r4, #32]
 801b078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b07a:	4643      	mov	r3, r8
 801b07c:	463a      	mov	r2, r7
 801b07e:	4628      	mov	r0, r5
 801b080:	47b0      	blx	r6
 801b082:	2800      	cmp	r0, #0
 801b084:	dc08      	bgt.n	801b098 <__sflush_r+0xfc>
 801b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b08e:	81a3      	strh	r3, [r4, #12]
 801b090:	f04f 30ff 	mov.w	r0, #4294967295
 801b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b098:	4407      	add	r7, r0
 801b09a:	eba8 0800 	sub.w	r8, r8, r0
 801b09e:	e7e7      	b.n	801b070 <__sflush_r+0xd4>
 801b0a0:	dfbffffe 	.word	0xdfbffffe

0801b0a4 <_fflush_r>:
 801b0a4:	b538      	push	{r3, r4, r5, lr}
 801b0a6:	690b      	ldr	r3, [r1, #16]
 801b0a8:	4605      	mov	r5, r0
 801b0aa:	460c      	mov	r4, r1
 801b0ac:	b913      	cbnz	r3, 801b0b4 <_fflush_r+0x10>
 801b0ae:	2500      	movs	r5, #0
 801b0b0:	4628      	mov	r0, r5
 801b0b2:	bd38      	pop	{r3, r4, r5, pc}
 801b0b4:	b118      	cbz	r0, 801b0be <_fflush_r+0x1a>
 801b0b6:	6a03      	ldr	r3, [r0, #32]
 801b0b8:	b90b      	cbnz	r3, 801b0be <_fflush_r+0x1a>
 801b0ba:	f7fd fde1 	bl	8018c80 <__sinit>
 801b0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d0f3      	beq.n	801b0ae <_fflush_r+0xa>
 801b0c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b0c8:	07d0      	lsls	r0, r2, #31
 801b0ca:	d404      	bmi.n	801b0d6 <_fflush_r+0x32>
 801b0cc:	0599      	lsls	r1, r3, #22
 801b0ce:	d402      	bmi.n	801b0d6 <_fflush_r+0x32>
 801b0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b0d2:	f7fd ff0a 	bl	8018eea <__retarget_lock_acquire_recursive>
 801b0d6:	4628      	mov	r0, r5
 801b0d8:	4621      	mov	r1, r4
 801b0da:	f7ff ff5f 	bl	801af9c <__sflush_r>
 801b0de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b0e0:	07da      	lsls	r2, r3, #31
 801b0e2:	4605      	mov	r5, r0
 801b0e4:	d4e4      	bmi.n	801b0b0 <_fflush_r+0xc>
 801b0e6:	89a3      	ldrh	r3, [r4, #12]
 801b0e8:	059b      	lsls	r3, r3, #22
 801b0ea:	d4e1      	bmi.n	801b0b0 <_fflush_r+0xc>
 801b0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b0ee:	f7fd fefd 	bl	8018eec <__retarget_lock_release_recursive>
 801b0f2:	e7dd      	b.n	801b0b0 <_fflush_r+0xc>

0801b0f4 <memmove>:
 801b0f4:	4288      	cmp	r0, r1
 801b0f6:	b510      	push	{r4, lr}
 801b0f8:	eb01 0402 	add.w	r4, r1, r2
 801b0fc:	d902      	bls.n	801b104 <memmove+0x10>
 801b0fe:	4284      	cmp	r4, r0
 801b100:	4623      	mov	r3, r4
 801b102:	d807      	bhi.n	801b114 <memmove+0x20>
 801b104:	1e43      	subs	r3, r0, #1
 801b106:	42a1      	cmp	r1, r4
 801b108:	d008      	beq.n	801b11c <memmove+0x28>
 801b10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b112:	e7f8      	b.n	801b106 <memmove+0x12>
 801b114:	4402      	add	r2, r0
 801b116:	4601      	mov	r1, r0
 801b118:	428a      	cmp	r2, r1
 801b11a:	d100      	bne.n	801b11e <memmove+0x2a>
 801b11c:	bd10      	pop	{r4, pc}
 801b11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b126:	e7f7      	b.n	801b118 <memmove+0x24>

0801b128 <_sbrk_r>:
 801b128:	b538      	push	{r3, r4, r5, lr}
 801b12a:	4d06      	ldr	r5, [pc, #24]	@ (801b144 <_sbrk_r+0x1c>)
 801b12c:	2300      	movs	r3, #0
 801b12e:	4604      	mov	r4, r0
 801b130:	4608      	mov	r0, r1
 801b132:	602b      	str	r3, [r5, #0]
 801b134:	f7e7 fe38 	bl	8002da8 <_sbrk>
 801b138:	1c43      	adds	r3, r0, #1
 801b13a:	d102      	bne.n	801b142 <_sbrk_r+0x1a>
 801b13c:	682b      	ldr	r3, [r5, #0]
 801b13e:	b103      	cbz	r3, 801b142 <_sbrk_r+0x1a>
 801b140:	6023      	str	r3, [r4, #0]
 801b142:	bd38      	pop	{r3, r4, r5, pc}
 801b144:	24006354 	.word	0x24006354

0801b148 <__assert_func>:
 801b148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b14a:	4614      	mov	r4, r2
 801b14c:	461a      	mov	r2, r3
 801b14e:	4b09      	ldr	r3, [pc, #36]	@ (801b174 <__assert_func+0x2c>)
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	4605      	mov	r5, r0
 801b154:	68d8      	ldr	r0, [r3, #12]
 801b156:	b954      	cbnz	r4, 801b16e <__assert_func+0x26>
 801b158:	4b07      	ldr	r3, [pc, #28]	@ (801b178 <__assert_func+0x30>)
 801b15a:	461c      	mov	r4, r3
 801b15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b160:	9100      	str	r1, [sp, #0]
 801b162:	462b      	mov	r3, r5
 801b164:	4905      	ldr	r1, [pc, #20]	@ (801b17c <__assert_func+0x34>)
 801b166:	f000 f84f 	bl	801b208 <fiprintf>
 801b16a:	f000 f85f 	bl	801b22c <abort>
 801b16e:	4b04      	ldr	r3, [pc, #16]	@ (801b180 <__assert_func+0x38>)
 801b170:	e7f4      	b.n	801b15c <__assert_func+0x14>
 801b172:	bf00      	nop
 801b174:	2400027c 	.word	0x2400027c
 801b178:	0801cffc 	.word	0x0801cffc
 801b17c:	0801cfce 	.word	0x0801cfce
 801b180:	0801cfc1 	.word	0x0801cfc1

0801b184 <_calloc_r>:
 801b184:	b570      	push	{r4, r5, r6, lr}
 801b186:	fba1 5402 	umull	r5, r4, r1, r2
 801b18a:	b93c      	cbnz	r4, 801b19c <_calloc_r+0x18>
 801b18c:	4629      	mov	r1, r5
 801b18e:	f7ff f853 	bl	801a238 <_malloc_r>
 801b192:	4606      	mov	r6, r0
 801b194:	b928      	cbnz	r0, 801b1a2 <_calloc_r+0x1e>
 801b196:	2600      	movs	r6, #0
 801b198:	4630      	mov	r0, r6
 801b19a:	bd70      	pop	{r4, r5, r6, pc}
 801b19c:	220c      	movs	r2, #12
 801b19e:	6002      	str	r2, [r0, #0]
 801b1a0:	e7f9      	b.n	801b196 <_calloc_r+0x12>
 801b1a2:	462a      	mov	r2, r5
 801b1a4:	4621      	mov	r1, r4
 801b1a6:	f7fd fe04 	bl	8018db2 <memset>
 801b1aa:	e7f5      	b.n	801b198 <_calloc_r+0x14>

0801b1ac <_realloc_r>:
 801b1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1b0:	4680      	mov	r8, r0
 801b1b2:	4615      	mov	r5, r2
 801b1b4:	460c      	mov	r4, r1
 801b1b6:	b921      	cbnz	r1, 801b1c2 <_realloc_r+0x16>
 801b1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1bc:	4611      	mov	r1, r2
 801b1be:	f7ff b83b 	b.w	801a238 <_malloc_r>
 801b1c2:	b92a      	cbnz	r2, 801b1d0 <_realloc_r+0x24>
 801b1c4:	f7fe fc8a 	bl	8019adc <_free_r>
 801b1c8:	2400      	movs	r4, #0
 801b1ca:	4620      	mov	r0, r4
 801b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1d0:	f000 f833 	bl	801b23a <_malloc_usable_size_r>
 801b1d4:	4285      	cmp	r5, r0
 801b1d6:	4606      	mov	r6, r0
 801b1d8:	d802      	bhi.n	801b1e0 <_realloc_r+0x34>
 801b1da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b1de:	d8f4      	bhi.n	801b1ca <_realloc_r+0x1e>
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	4640      	mov	r0, r8
 801b1e4:	f7ff f828 	bl	801a238 <_malloc_r>
 801b1e8:	4607      	mov	r7, r0
 801b1ea:	2800      	cmp	r0, #0
 801b1ec:	d0ec      	beq.n	801b1c8 <_realloc_r+0x1c>
 801b1ee:	42b5      	cmp	r5, r6
 801b1f0:	462a      	mov	r2, r5
 801b1f2:	4621      	mov	r1, r4
 801b1f4:	bf28      	it	cs
 801b1f6:	4632      	movcs	r2, r6
 801b1f8:	f7fd fe79 	bl	8018eee <memcpy>
 801b1fc:	4621      	mov	r1, r4
 801b1fe:	4640      	mov	r0, r8
 801b200:	f7fe fc6c 	bl	8019adc <_free_r>
 801b204:	463c      	mov	r4, r7
 801b206:	e7e0      	b.n	801b1ca <_realloc_r+0x1e>

0801b208 <fiprintf>:
 801b208:	b40e      	push	{r1, r2, r3}
 801b20a:	b503      	push	{r0, r1, lr}
 801b20c:	4601      	mov	r1, r0
 801b20e:	ab03      	add	r3, sp, #12
 801b210:	4805      	ldr	r0, [pc, #20]	@ (801b228 <fiprintf+0x20>)
 801b212:	f853 2b04 	ldr.w	r2, [r3], #4
 801b216:	6800      	ldr	r0, [r0, #0]
 801b218:	9301      	str	r3, [sp, #4]
 801b21a:	f000 f83f 	bl	801b29c <_vfiprintf_r>
 801b21e:	b002      	add	sp, #8
 801b220:	f85d eb04 	ldr.w	lr, [sp], #4
 801b224:	b003      	add	sp, #12
 801b226:	4770      	bx	lr
 801b228:	2400027c 	.word	0x2400027c

0801b22c <abort>:
 801b22c:	b508      	push	{r3, lr}
 801b22e:	2006      	movs	r0, #6
 801b230:	f000 fa08 	bl	801b644 <raise>
 801b234:	2001      	movs	r0, #1
 801b236:	f7e7 fd3f 	bl	8002cb8 <_exit>

0801b23a <_malloc_usable_size_r>:
 801b23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b23e:	1f18      	subs	r0, r3, #4
 801b240:	2b00      	cmp	r3, #0
 801b242:	bfbc      	itt	lt
 801b244:	580b      	ldrlt	r3, [r1, r0]
 801b246:	18c0      	addlt	r0, r0, r3
 801b248:	4770      	bx	lr

0801b24a <__sfputc_r>:
 801b24a:	6893      	ldr	r3, [r2, #8]
 801b24c:	3b01      	subs	r3, #1
 801b24e:	2b00      	cmp	r3, #0
 801b250:	b410      	push	{r4}
 801b252:	6093      	str	r3, [r2, #8]
 801b254:	da08      	bge.n	801b268 <__sfputc_r+0x1e>
 801b256:	6994      	ldr	r4, [r2, #24]
 801b258:	42a3      	cmp	r3, r4
 801b25a:	db01      	blt.n	801b260 <__sfputc_r+0x16>
 801b25c:	290a      	cmp	r1, #10
 801b25e:	d103      	bne.n	801b268 <__sfputc_r+0x1e>
 801b260:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b264:	f000 b932 	b.w	801b4cc <__swbuf_r>
 801b268:	6813      	ldr	r3, [r2, #0]
 801b26a:	1c58      	adds	r0, r3, #1
 801b26c:	6010      	str	r0, [r2, #0]
 801b26e:	7019      	strb	r1, [r3, #0]
 801b270:	4608      	mov	r0, r1
 801b272:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b276:	4770      	bx	lr

0801b278 <__sfputs_r>:
 801b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b27a:	4606      	mov	r6, r0
 801b27c:	460f      	mov	r7, r1
 801b27e:	4614      	mov	r4, r2
 801b280:	18d5      	adds	r5, r2, r3
 801b282:	42ac      	cmp	r4, r5
 801b284:	d101      	bne.n	801b28a <__sfputs_r+0x12>
 801b286:	2000      	movs	r0, #0
 801b288:	e007      	b.n	801b29a <__sfputs_r+0x22>
 801b28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b28e:	463a      	mov	r2, r7
 801b290:	4630      	mov	r0, r6
 801b292:	f7ff ffda 	bl	801b24a <__sfputc_r>
 801b296:	1c43      	adds	r3, r0, #1
 801b298:	d1f3      	bne.n	801b282 <__sfputs_r+0xa>
 801b29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b29c <_vfiprintf_r>:
 801b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a0:	460d      	mov	r5, r1
 801b2a2:	b09d      	sub	sp, #116	@ 0x74
 801b2a4:	4614      	mov	r4, r2
 801b2a6:	4698      	mov	r8, r3
 801b2a8:	4606      	mov	r6, r0
 801b2aa:	b118      	cbz	r0, 801b2b4 <_vfiprintf_r+0x18>
 801b2ac:	6a03      	ldr	r3, [r0, #32]
 801b2ae:	b90b      	cbnz	r3, 801b2b4 <_vfiprintf_r+0x18>
 801b2b0:	f7fd fce6 	bl	8018c80 <__sinit>
 801b2b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2b6:	07d9      	lsls	r1, r3, #31
 801b2b8:	d405      	bmi.n	801b2c6 <_vfiprintf_r+0x2a>
 801b2ba:	89ab      	ldrh	r3, [r5, #12]
 801b2bc:	059a      	lsls	r2, r3, #22
 801b2be:	d402      	bmi.n	801b2c6 <_vfiprintf_r+0x2a>
 801b2c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2c2:	f7fd fe12 	bl	8018eea <__retarget_lock_acquire_recursive>
 801b2c6:	89ab      	ldrh	r3, [r5, #12]
 801b2c8:	071b      	lsls	r3, r3, #28
 801b2ca:	d501      	bpl.n	801b2d0 <_vfiprintf_r+0x34>
 801b2cc:	692b      	ldr	r3, [r5, #16]
 801b2ce:	b99b      	cbnz	r3, 801b2f8 <_vfiprintf_r+0x5c>
 801b2d0:	4629      	mov	r1, r5
 801b2d2:	4630      	mov	r0, r6
 801b2d4:	f000 f938 	bl	801b548 <__swsetup_r>
 801b2d8:	b170      	cbz	r0, 801b2f8 <_vfiprintf_r+0x5c>
 801b2da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2dc:	07dc      	lsls	r4, r3, #31
 801b2de:	d504      	bpl.n	801b2ea <_vfiprintf_r+0x4e>
 801b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b2e4:	b01d      	add	sp, #116	@ 0x74
 801b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ea:	89ab      	ldrh	r3, [r5, #12]
 801b2ec:	0598      	lsls	r0, r3, #22
 801b2ee:	d4f7      	bmi.n	801b2e0 <_vfiprintf_r+0x44>
 801b2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2f2:	f7fd fdfb 	bl	8018eec <__retarget_lock_release_recursive>
 801b2f6:	e7f3      	b.n	801b2e0 <_vfiprintf_r+0x44>
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2fc:	2320      	movs	r3, #32
 801b2fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b302:	f8cd 800c 	str.w	r8, [sp, #12]
 801b306:	2330      	movs	r3, #48	@ 0x30
 801b308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b4b8 <_vfiprintf_r+0x21c>
 801b30c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b310:	f04f 0901 	mov.w	r9, #1
 801b314:	4623      	mov	r3, r4
 801b316:	469a      	mov	sl, r3
 801b318:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b31c:	b10a      	cbz	r2, 801b322 <_vfiprintf_r+0x86>
 801b31e:	2a25      	cmp	r2, #37	@ 0x25
 801b320:	d1f9      	bne.n	801b316 <_vfiprintf_r+0x7a>
 801b322:	ebba 0b04 	subs.w	fp, sl, r4
 801b326:	d00b      	beq.n	801b340 <_vfiprintf_r+0xa4>
 801b328:	465b      	mov	r3, fp
 801b32a:	4622      	mov	r2, r4
 801b32c:	4629      	mov	r1, r5
 801b32e:	4630      	mov	r0, r6
 801b330:	f7ff ffa2 	bl	801b278 <__sfputs_r>
 801b334:	3001      	adds	r0, #1
 801b336:	f000 80a7 	beq.w	801b488 <_vfiprintf_r+0x1ec>
 801b33a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b33c:	445a      	add	r2, fp
 801b33e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b340:	f89a 3000 	ldrb.w	r3, [sl]
 801b344:	2b00      	cmp	r3, #0
 801b346:	f000 809f 	beq.w	801b488 <_vfiprintf_r+0x1ec>
 801b34a:	2300      	movs	r3, #0
 801b34c:	f04f 32ff 	mov.w	r2, #4294967295
 801b350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b354:	f10a 0a01 	add.w	sl, sl, #1
 801b358:	9304      	str	r3, [sp, #16]
 801b35a:	9307      	str	r3, [sp, #28]
 801b35c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b360:	931a      	str	r3, [sp, #104]	@ 0x68
 801b362:	4654      	mov	r4, sl
 801b364:	2205      	movs	r2, #5
 801b366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b36a:	4853      	ldr	r0, [pc, #332]	@ (801b4b8 <_vfiprintf_r+0x21c>)
 801b36c:	f7e4 ffe0 	bl	8000330 <memchr>
 801b370:	9a04      	ldr	r2, [sp, #16]
 801b372:	b9d8      	cbnz	r0, 801b3ac <_vfiprintf_r+0x110>
 801b374:	06d1      	lsls	r1, r2, #27
 801b376:	bf44      	itt	mi
 801b378:	2320      	movmi	r3, #32
 801b37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b37e:	0713      	lsls	r3, r2, #28
 801b380:	bf44      	itt	mi
 801b382:	232b      	movmi	r3, #43	@ 0x2b
 801b384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b388:	f89a 3000 	ldrb.w	r3, [sl]
 801b38c:	2b2a      	cmp	r3, #42	@ 0x2a
 801b38e:	d015      	beq.n	801b3bc <_vfiprintf_r+0x120>
 801b390:	9a07      	ldr	r2, [sp, #28]
 801b392:	4654      	mov	r4, sl
 801b394:	2000      	movs	r0, #0
 801b396:	f04f 0c0a 	mov.w	ip, #10
 801b39a:	4621      	mov	r1, r4
 801b39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3a0:	3b30      	subs	r3, #48	@ 0x30
 801b3a2:	2b09      	cmp	r3, #9
 801b3a4:	d94b      	bls.n	801b43e <_vfiprintf_r+0x1a2>
 801b3a6:	b1b0      	cbz	r0, 801b3d6 <_vfiprintf_r+0x13a>
 801b3a8:	9207      	str	r2, [sp, #28]
 801b3aa:	e014      	b.n	801b3d6 <_vfiprintf_r+0x13a>
 801b3ac:	eba0 0308 	sub.w	r3, r0, r8
 801b3b0:	fa09 f303 	lsl.w	r3, r9, r3
 801b3b4:	4313      	orrs	r3, r2
 801b3b6:	9304      	str	r3, [sp, #16]
 801b3b8:	46a2      	mov	sl, r4
 801b3ba:	e7d2      	b.n	801b362 <_vfiprintf_r+0xc6>
 801b3bc:	9b03      	ldr	r3, [sp, #12]
 801b3be:	1d19      	adds	r1, r3, #4
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	9103      	str	r1, [sp, #12]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	bfbb      	ittet	lt
 801b3c8:	425b      	neglt	r3, r3
 801b3ca:	f042 0202 	orrlt.w	r2, r2, #2
 801b3ce:	9307      	strge	r3, [sp, #28]
 801b3d0:	9307      	strlt	r3, [sp, #28]
 801b3d2:	bfb8      	it	lt
 801b3d4:	9204      	strlt	r2, [sp, #16]
 801b3d6:	7823      	ldrb	r3, [r4, #0]
 801b3d8:	2b2e      	cmp	r3, #46	@ 0x2e
 801b3da:	d10a      	bne.n	801b3f2 <_vfiprintf_r+0x156>
 801b3dc:	7863      	ldrb	r3, [r4, #1]
 801b3de:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3e0:	d132      	bne.n	801b448 <_vfiprintf_r+0x1ac>
 801b3e2:	9b03      	ldr	r3, [sp, #12]
 801b3e4:	1d1a      	adds	r2, r3, #4
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	9203      	str	r2, [sp, #12]
 801b3ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b3ee:	3402      	adds	r4, #2
 801b3f0:	9305      	str	r3, [sp, #20]
 801b3f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b4c8 <_vfiprintf_r+0x22c>
 801b3f6:	7821      	ldrb	r1, [r4, #0]
 801b3f8:	2203      	movs	r2, #3
 801b3fa:	4650      	mov	r0, sl
 801b3fc:	f7e4 ff98 	bl	8000330 <memchr>
 801b400:	b138      	cbz	r0, 801b412 <_vfiprintf_r+0x176>
 801b402:	9b04      	ldr	r3, [sp, #16]
 801b404:	eba0 000a 	sub.w	r0, r0, sl
 801b408:	2240      	movs	r2, #64	@ 0x40
 801b40a:	4082      	lsls	r2, r0
 801b40c:	4313      	orrs	r3, r2
 801b40e:	3401      	adds	r4, #1
 801b410:	9304      	str	r3, [sp, #16]
 801b412:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b416:	4829      	ldr	r0, [pc, #164]	@ (801b4bc <_vfiprintf_r+0x220>)
 801b418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b41c:	2206      	movs	r2, #6
 801b41e:	f7e4 ff87 	bl	8000330 <memchr>
 801b422:	2800      	cmp	r0, #0
 801b424:	d03f      	beq.n	801b4a6 <_vfiprintf_r+0x20a>
 801b426:	4b26      	ldr	r3, [pc, #152]	@ (801b4c0 <_vfiprintf_r+0x224>)
 801b428:	bb1b      	cbnz	r3, 801b472 <_vfiprintf_r+0x1d6>
 801b42a:	9b03      	ldr	r3, [sp, #12]
 801b42c:	3307      	adds	r3, #7
 801b42e:	f023 0307 	bic.w	r3, r3, #7
 801b432:	3308      	adds	r3, #8
 801b434:	9303      	str	r3, [sp, #12]
 801b436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b438:	443b      	add	r3, r7
 801b43a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b43c:	e76a      	b.n	801b314 <_vfiprintf_r+0x78>
 801b43e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b442:	460c      	mov	r4, r1
 801b444:	2001      	movs	r0, #1
 801b446:	e7a8      	b.n	801b39a <_vfiprintf_r+0xfe>
 801b448:	2300      	movs	r3, #0
 801b44a:	3401      	adds	r4, #1
 801b44c:	9305      	str	r3, [sp, #20]
 801b44e:	4619      	mov	r1, r3
 801b450:	f04f 0c0a 	mov.w	ip, #10
 801b454:	4620      	mov	r0, r4
 801b456:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b45a:	3a30      	subs	r2, #48	@ 0x30
 801b45c:	2a09      	cmp	r2, #9
 801b45e:	d903      	bls.n	801b468 <_vfiprintf_r+0x1cc>
 801b460:	2b00      	cmp	r3, #0
 801b462:	d0c6      	beq.n	801b3f2 <_vfiprintf_r+0x156>
 801b464:	9105      	str	r1, [sp, #20]
 801b466:	e7c4      	b.n	801b3f2 <_vfiprintf_r+0x156>
 801b468:	fb0c 2101 	mla	r1, ip, r1, r2
 801b46c:	4604      	mov	r4, r0
 801b46e:	2301      	movs	r3, #1
 801b470:	e7f0      	b.n	801b454 <_vfiprintf_r+0x1b8>
 801b472:	ab03      	add	r3, sp, #12
 801b474:	9300      	str	r3, [sp, #0]
 801b476:	462a      	mov	r2, r5
 801b478:	4b12      	ldr	r3, [pc, #72]	@ (801b4c4 <_vfiprintf_r+0x228>)
 801b47a:	a904      	add	r1, sp, #16
 801b47c:	4630      	mov	r0, r6
 801b47e:	f7fc ffcb 	bl	8018418 <_printf_float>
 801b482:	4607      	mov	r7, r0
 801b484:	1c78      	adds	r0, r7, #1
 801b486:	d1d6      	bne.n	801b436 <_vfiprintf_r+0x19a>
 801b488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b48a:	07d9      	lsls	r1, r3, #31
 801b48c:	d405      	bmi.n	801b49a <_vfiprintf_r+0x1fe>
 801b48e:	89ab      	ldrh	r3, [r5, #12]
 801b490:	059a      	lsls	r2, r3, #22
 801b492:	d402      	bmi.n	801b49a <_vfiprintf_r+0x1fe>
 801b494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b496:	f7fd fd29 	bl	8018eec <__retarget_lock_release_recursive>
 801b49a:	89ab      	ldrh	r3, [r5, #12]
 801b49c:	065b      	lsls	r3, r3, #25
 801b49e:	f53f af1f 	bmi.w	801b2e0 <_vfiprintf_r+0x44>
 801b4a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4a4:	e71e      	b.n	801b2e4 <_vfiprintf_r+0x48>
 801b4a6:	ab03      	add	r3, sp, #12
 801b4a8:	9300      	str	r3, [sp, #0]
 801b4aa:	462a      	mov	r2, r5
 801b4ac:	4b05      	ldr	r3, [pc, #20]	@ (801b4c4 <_vfiprintf_r+0x228>)
 801b4ae:	a904      	add	r1, sp, #16
 801b4b0:	4630      	mov	r0, r6
 801b4b2:	f7fd fa39 	bl	8018928 <_printf_i>
 801b4b6:	e7e4      	b.n	801b482 <_vfiprintf_r+0x1e6>
 801b4b8:	0801cfb0 	.word	0x0801cfb0
 801b4bc:	0801cfba 	.word	0x0801cfba
 801b4c0:	08018419 	.word	0x08018419
 801b4c4:	0801b279 	.word	0x0801b279
 801b4c8:	0801cfb6 	.word	0x0801cfb6

0801b4cc <__swbuf_r>:
 801b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ce:	460e      	mov	r6, r1
 801b4d0:	4614      	mov	r4, r2
 801b4d2:	4605      	mov	r5, r0
 801b4d4:	b118      	cbz	r0, 801b4de <__swbuf_r+0x12>
 801b4d6:	6a03      	ldr	r3, [r0, #32]
 801b4d8:	b90b      	cbnz	r3, 801b4de <__swbuf_r+0x12>
 801b4da:	f7fd fbd1 	bl	8018c80 <__sinit>
 801b4de:	69a3      	ldr	r3, [r4, #24]
 801b4e0:	60a3      	str	r3, [r4, #8]
 801b4e2:	89a3      	ldrh	r3, [r4, #12]
 801b4e4:	071a      	lsls	r2, r3, #28
 801b4e6:	d501      	bpl.n	801b4ec <__swbuf_r+0x20>
 801b4e8:	6923      	ldr	r3, [r4, #16]
 801b4ea:	b943      	cbnz	r3, 801b4fe <__swbuf_r+0x32>
 801b4ec:	4621      	mov	r1, r4
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	f000 f82a 	bl	801b548 <__swsetup_r>
 801b4f4:	b118      	cbz	r0, 801b4fe <__swbuf_r+0x32>
 801b4f6:	f04f 37ff 	mov.w	r7, #4294967295
 801b4fa:	4638      	mov	r0, r7
 801b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4fe:	6823      	ldr	r3, [r4, #0]
 801b500:	6922      	ldr	r2, [r4, #16]
 801b502:	1a98      	subs	r0, r3, r2
 801b504:	6963      	ldr	r3, [r4, #20]
 801b506:	b2f6      	uxtb	r6, r6
 801b508:	4283      	cmp	r3, r0
 801b50a:	4637      	mov	r7, r6
 801b50c:	dc05      	bgt.n	801b51a <__swbuf_r+0x4e>
 801b50e:	4621      	mov	r1, r4
 801b510:	4628      	mov	r0, r5
 801b512:	f7ff fdc7 	bl	801b0a4 <_fflush_r>
 801b516:	2800      	cmp	r0, #0
 801b518:	d1ed      	bne.n	801b4f6 <__swbuf_r+0x2a>
 801b51a:	68a3      	ldr	r3, [r4, #8]
 801b51c:	3b01      	subs	r3, #1
 801b51e:	60a3      	str	r3, [r4, #8]
 801b520:	6823      	ldr	r3, [r4, #0]
 801b522:	1c5a      	adds	r2, r3, #1
 801b524:	6022      	str	r2, [r4, #0]
 801b526:	701e      	strb	r6, [r3, #0]
 801b528:	6962      	ldr	r2, [r4, #20]
 801b52a:	1c43      	adds	r3, r0, #1
 801b52c:	429a      	cmp	r2, r3
 801b52e:	d004      	beq.n	801b53a <__swbuf_r+0x6e>
 801b530:	89a3      	ldrh	r3, [r4, #12]
 801b532:	07db      	lsls	r3, r3, #31
 801b534:	d5e1      	bpl.n	801b4fa <__swbuf_r+0x2e>
 801b536:	2e0a      	cmp	r6, #10
 801b538:	d1df      	bne.n	801b4fa <__swbuf_r+0x2e>
 801b53a:	4621      	mov	r1, r4
 801b53c:	4628      	mov	r0, r5
 801b53e:	f7ff fdb1 	bl	801b0a4 <_fflush_r>
 801b542:	2800      	cmp	r0, #0
 801b544:	d0d9      	beq.n	801b4fa <__swbuf_r+0x2e>
 801b546:	e7d6      	b.n	801b4f6 <__swbuf_r+0x2a>

0801b548 <__swsetup_r>:
 801b548:	b538      	push	{r3, r4, r5, lr}
 801b54a:	4b29      	ldr	r3, [pc, #164]	@ (801b5f0 <__swsetup_r+0xa8>)
 801b54c:	4605      	mov	r5, r0
 801b54e:	6818      	ldr	r0, [r3, #0]
 801b550:	460c      	mov	r4, r1
 801b552:	b118      	cbz	r0, 801b55c <__swsetup_r+0x14>
 801b554:	6a03      	ldr	r3, [r0, #32]
 801b556:	b90b      	cbnz	r3, 801b55c <__swsetup_r+0x14>
 801b558:	f7fd fb92 	bl	8018c80 <__sinit>
 801b55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b560:	0719      	lsls	r1, r3, #28
 801b562:	d422      	bmi.n	801b5aa <__swsetup_r+0x62>
 801b564:	06da      	lsls	r2, r3, #27
 801b566:	d407      	bmi.n	801b578 <__swsetup_r+0x30>
 801b568:	2209      	movs	r2, #9
 801b56a:	602a      	str	r2, [r5, #0]
 801b56c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b570:	81a3      	strh	r3, [r4, #12]
 801b572:	f04f 30ff 	mov.w	r0, #4294967295
 801b576:	e033      	b.n	801b5e0 <__swsetup_r+0x98>
 801b578:	0758      	lsls	r0, r3, #29
 801b57a:	d512      	bpl.n	801b5a2 <__swsetup_r+0x5a>
 801b57c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b57e:	b141      	cbz	r1, 801b592 <__swsetup_r+0x4a>
 801b580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b584:	4299      	cmp	r1, r3
 801b586:	d002      	beq.n	801b58e <__swsetup_r+0x46>
 801b588:	4628      	mov	r0, r5
 801b58a:	f7fe faa7 	bl	8019adc <_free_r>
 801b58e:	2300      	movs	r3, #0
 801b590:	6363      	str	r3, [r4, #52]	@ 0x34
 801b592:	89a3      	ldrh	r3, [r4, #12]
 801b594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b598:	81a3      	strh	r3, [r4, #12]
 801b59a:	2300      	movs	r3, #0
 801b59c:	6063      	str	r3, [r4, #4]
 801b59e:	6923      	ldr	r3, [r4, #16]
 801b5a0:	6023      	str	r3, [r4, #0]
 801b5a2:	89a3      	ldrh	r3, [r4, #12]
 801b5a4:	f043 0308 	orr.w	r3, r3, #8
 801b5a8:	81a3      	strh	r3, [r4, #12]
 801b5aa:	6923      	ldr	r3, [r4, #16]
 801b5ac:	b94b      	cbnz	r3, 801b5c2 <__swsetup_r+0x7a>
 801b5ae:	89a3      	ldrh	r3, [r4, #12]
 801b5b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b5b8:	d003      	beq.n	801b5c2 <__swsetup_r+0x7a>
 801b5ba:	4621      	mov	r1, r4
 801b5bc:	4628      	mov	r0, r5
 801b5be:	f000 f883 	bl	801b6c8 <__smakebuf_r>
 801b5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5c6:	f013 0201 	ands.w	r2, r3, #1
 801b5ca:	d00a      	beq.n	801b5e2 <__swsetup_r+0x9a>
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	60a2      	str	r2, [r4, #8]
 801b5d0:	6962      	ldr	r2, [r4, #20]
 801b5d2:	4252      	negs	r2, r2
 801b5d4:	61a2      	str	r2, [r4, #24]
 801b5d6:	6922      	ldr	r2, [r4, #16]
 801b5d8:	b942      	cbnz	r2, 801b5ec <__swsetup_r+0xa4>
 801b5da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b5de:	d1c5      	bne.n	801b56c <__swsetup_r+0x24>
 801b5e0:	bd38      	pop	{r3, r4, r5, pc}
 801b5e2:	0799      	lsls	r1, r3, #30
 801b5e4:	bf58      	it	pl
 801b5e6:	6962      	ldrpl	r2, [r4, #20]
 801b5e8:	60a2      	str	r2, [r4, #8]
 801b5ea:	e7f4      	b.n	801b5d6 <__swsetup_r+0x8e>
 801b5ec:	2000      	movs	r0, #0
 801b5ee:	e7f7      	b.n	801b5e0 <__swsetup_r+0x98>
 801b5f0:	2400027c 	.word	0x2400027c

0801b5f4 <_raise_r>:
 801b5f4:	291f      	cmp	r1, #31
 801b5f6:	b538      	push	{r3, r4, r5, lr}
 801b5f8:	4605      	mov	r5, r0
 801b5fa:	460c      	mov	r4, r1
 801b5fc:	d904      	bls.n	801b608 <_raise_r+0x14>
 801b5fe:	2316      	movs	r3, #22
 801b600:	6003      	str	r3, [r0, #0]
 801b602:	f04f 30ff 	mov.w	r0, #4294967295
 801b606:	bd38      	pop	{r3, r4, r5, pc}
 801b608:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b60a:	b112      	cbz	r2, 801b612 <_raise_r+0x1e>
 801b60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b610:	b94b      	cbnz	r3, 801b626 <_raise_r+0x32>
 801b612:	4628      	mov	r0, r5
 801b614:	f000 f830 	bl	801b678 <_getpid_r>
 801b618:	4622      	mov	r2, r4
 801b61a:	4601      	mov	r1, r0
 801b61c:	4628      	mov	r0, r5
 801b61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b622:	f000 b817 	b.w	801b654 <_kill_r>
 801b626:	2b01      	cmp	r3, #1
 801b628:	d00a      	beq.n	801b640 <_raise_r+0x4c>
 801b62a:	1c59      	adds	r1, r3, #1
 801b62c:	d103      	bne.n	801b636 <_raise_r+0x42>
 801b62e:	2316      	movs	r3, #22
 801b630:	6003      	str	r3, [r0, #0]
 801b632:	2001      	movs	r0, #1
 801b634:	e7e7      	b.n	801b606 <_raise_r+0x12>
 801b636:	2100      	movs	r1, #0
 801b638:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b63c:	4620      	mov	r0, r4
 801b63e:	4798      	blx	r3
 801b640:	2000      	movs	r0, #0
 801b642:	e7e0      	b.n	801b606 <_raise_r+0x12>

0801b644 <raise>:
 801b644:	4b02      	ldr	r3, [pc, #8]	@ (801b650 <raise+0xc>)
 801b646:	4601      	mov	r1, r0
 801b648:	6818      	ldr	r0, [r3, #0]
 801b64a:	f7ff bfd3 	b.w	801b5f4 <_raise_r>
 801b64e:	bf00      	nop
 801b650:	2400027c 	.word	0x2400027c

0801b654 <_kill_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d07      	ldr	r5, [pc, #28]	@ (801b674 <_kill_r+0x20>)
 801b658:	2300      	movs	r3, #0
 801b65a:	4604      	mov	r4, r0
 801b65c:	4608      	mov	r0, r1
 801b65e:	4611      	mov	r1, r2
 801b660:	602b      	str	r3, [r5, #0]
 801b662:	f7e7 fb19 	bl	8002c98 <_kill>
 801b666:	1c43      	adds	r3, r0, #1
 801b668:	d102      	bne.n	801b670 <_kill_r+0x1c>
 801b66a:	682b      	ldr	r3, [r5, #0]
 801b66c:	b103      	cbz	r3, 801b670 <_kill_r+0x1c>
 801b66e:	6023      	str	r3, [r4, #0]
 801b670:	bd38      	pop	{r3, r4, r5, pc}
 801b672:	bf00      	nop
 801b674:	24006354 	.word	0x24006354

0801b678 <_getpid_r>:
 801b678:	f7e7 bb06 	b.w	8002c88 <_getpid>

0801b67c <__swhatbuf_r>:
 801b67c:	b570      	push	{r4, r5, r6, lr}
 801b67e:	460c      	mov	r4, r1
 801b680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b684:	2900      	cmp	r1, #0
 801b686:	b096      	sub	sp, #88	@ 0x58
 801b688:	4615      	mov	r5, r2
 801b68a:	461e      	mov	r6, r3
 801b68c:	da0d      	bge.n	801b6aa <__swhatbuf_r+0x2e>
 801b68e:	89a3      	ldrh	r3, [r4, #12]
 801b690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b694:	f04f 0100 	mov.w	r1, #0
 801b698:	bf14      	ite	ne
 801b69a:	2340      	movne	r3, #64	@ 0x40
 801b69c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b6a0:	2000      	movs	r0, #0
 801b6a2:	6031      	str	r1, [r6, #0]
 801b6a4:	602b      	str	r3, [r5, #0]
 801b6a6:	b016      	add	sp, #88	@ 0x58
 801b6a8:	bd70      	pop	{r4, r5, r6, pc}
 801b6aa:	466a      	mov	r2, sp
 801b6ac:	f000 f848 	bl	801b740 <_fstat_r>
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	dbec      	blt.n	801b68e <__swhatbuf_r+0x12>
 801b6b4:	9901      	ldr	r1, [sp, #4]
 801b6b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b6ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b6be:	4259      	negs	r1, r3
 801b6c0:	4159      	adcs	r1, r3
 801b6c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b6c6:	e7eb      	b.n	801b6a0 <__swhatbuf_r+0x24>

0801b6c8 <__smakebuf_r>:
 801b6c8:	898b      	ldrh	r3, [r1, #12]
 801b6ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b6cc:	079d      	lsls	r5, r3, #30
 801b6ce:	4606      	mov	r6, r0
 801b6d0:	460c      	mov	r4, r1
 801b6d2:	d507      	bpl.n	801b6e4 <__smakebuf_r+0x1c>
 801b6d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b6d8:	6023      	str	r3, [r4, #0]
 801b6da:	6123      	str	r3, [r4, #16]
 801b6dc:	2301      	movs	r3, #1
 801b6de:	6163      	str	r3, [r4, #20]
 801b6e0:	b003      	add	sp, #12
 801b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e4:	ab01      	add	r3, sp, #4
 801b6e6:	466a      	mov	r2, sp
 801b6e8:	f7ff ffc8 	bl	801b67c <__swhatbuf_r>
 801b6ec:	9f00      	ldr	r7, [sp, #0]
 801b6ee:	4605      	mov	r5, r0
 801b6f0:	4639      	mov	r1, r7
 801b6f2:	4630      	mov	r0, r6
 801b6f4:	f7fe fda0 	bl	801a238 <_malloc_r>
 801b6f8:	b948      	cbnz	r0, 801b70e <__smakebuf_r+0x46>
 801b6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6fe:	059a      	lsls	r2, r3, #22
 801b700:	d4ee      	bmi.n	801b6e0 <__smakebuf_r+0x18>
 801b702:	f023 0303 	bic.w	r3, r3, #3
 801b706:	f043 0302 	orr.w	r3, r3, #2
 801b70a:	81a3      	strh	r3, [r4, #12]
 801b70c:	e7e2      	b.n	801b6d4 <__smakebuf_r+0xc>
 801b70e:	89a3      	ldrh	r3, [r4, #12]
 801b710:	6020      	str	r0, [r4, #0]
 801b712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b716:	81a3      	strh	r3, [r4, #12]
 801b718:	9b01      	ldr	r3, [sp, #4]
 801b71a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b71e:	b15b      	cbz	r3, 801b738 <__smakebuf_r+0x70>
 801b720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b724:	4630      	mov	r0, r6
 801b726:	f000 f81d 	bl	801b764 <_isatty_r>
 801b72a:	b128      	cbz	r0, 801b738 <__smakebuf_r+0x70>
 801b72c:	89a3      	ldrh	r3, [r4, #12]
 801b72e:	f023 0303 	bic.w	r3, r3, #3
 801b732:	f043 0301 	orr.w	r3, r3, #1
 801b736:	81a3      	strh	r3, [r4, #12]
 801b738:	89a3      	ldrh	r3, [r4, #12]
 801b73a:	431d      	orrs	r5, r3
 801b73c:	81a5      	strh	r5, [r4, #12]
 801b73e:	e7cf      	b.n	801b6e0 <__smakebuf_r+0x18>

0801b740 <_fstat_r>:
 801b740:	b538      	push	{r3, r4, r5, lr}
 801b742:	4d07      	ldr	r5, [pc, #28]	@ (801b760 <_fstat_r+0x20>)
 801b744:	2300      	movs	r3, #0
 801b746:	4604      	mov	r4, r0
 801b748:	4608      	mov	r0, r1
 801b74a:	4611      	mov	r1, r2
 801b74c:	602b      	str	r3, [r5, #0]
 801b74e:	f7e7 fb03 	bl	8002d58 <_fstat>
 801b752:	1c43      	adds	r3, r0, #1
 801b754:	d102      	bne.n	801b75c <_fstat_r+0x1c>
 801b756:	682b      	ldr	r3, [r5, #0]
 801b758:	b103      	cbz	r3, 801b75c <_fstat_r+0x1c>
 801b75a:	6023      	str	r3, [r4, #0]
 801b75c:	bd38      	pop	{r3, r4, r5, pc}
 801b75e:	bf00      	nop
 801b760:	24006354 	.word	0x24006354

0801b764 <_isatty_r>:
 801b764:	b538      	push	{r3, r4, r5, lr}
 801b766:	4d06      	ldr	r5, [pc, #24]	@ (801b780 <_isatty_r+0x1c>)
 801b768:	2300      	movs	r3, #0
 801b76a:	4604      	mov	r4, r0
 801b76c:	4608      	mov	r0, r1
 801b76e:	602b      	str	r3, [r5, #0]
 801b770:	f7e7 fb02 	bl	8002d78 <_isatty>
 801b774:	1c43      	adds	r3, r0, #1
 801b776:	d102      	bne.n	801b77e <_isatty_r+0x1a>
 801b778:	682b      	ldr	r3, [r5, #0]
 801b77a:	b103      	cbz	r3, 801b77e <_isatty_r+0x1a>
 801b77c:	6023      	str	r3, [r4, #0]
 801b77e:	bd38      	pop	{r3, r4, r5, pc}
 801b780:	24006354 	.word	0x24006354
 801b784:	00000000 	.word	0x00000000

0801b788 <sin>:
 801b788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b78a:	eeb0 7b40 	vmov.f64	d7, d0
 801b78e:	ee17 3a90 	vmov	r3, s15
 801b792:	4a21      	ldr	r2, [pc, #132]	@ (801b818 <sin+0x90>)
 801b794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b798:	4293      	cmp	r3, r2
 801b79a:	d807      	bhi.n	801b7ac <sin+0x24>
 801b79c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801b810 <sin+0x88>
 801b7a0:	2000      	movs	r0, #0
 801b7a2:	b005      	add	sp, #20
 801b7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7a8:	f000 b986 	b.w	801bab8 <__kernel_sin>
 801b7ac:	4a1b      	ldr	r2, [pc, #108]	@ (801b81c <sin+0x94>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d904      	bls.n	801b7bc <sin+0x34>
 801b7b2:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b7b6:	b005      	add	sp, #20
 801b7b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7bc:	4668      	mov	r0, sp
 801b7be:	f000 f9d3 	bl	801bb68 <__ieee754_rem_pio2>
 801b7c2:	f000 0003 	and.w	r0, r0, #3
 801b7c6:	2801      	cmp	r0, #1
 801b7c8:	d00a      	beq.n	801b7e0 <sin+0x58>
 801b7ca:	2802      	cmp	r0, #2
 801b7cc:	d00f      	beq.n	801b7ee <sin+0x66>
 801b7ce:	b9c0      	cbnz	r0, 801b802 <sin+0x7a>
 801b7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7d4:	ed9d 0b00 	vldr	d0, [sp]
 801b7d8:	2001      	movs	r0, #1
 801b7da:	f000 f96d 	bl	801bab8 <__kernel_sin>
 801b7de:	e7ea      	b.n	801b7b6 <sin+0x2e>
 801b7e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7e4:	ed9d 0b00 	vldr	d0, [sp]
 801b7e8:	f000 f8fe 	bl	801b9e8 <__kernel_cos>
 801b7ec:	e7e3      	b.n	801b7b6 <sin+0x2e>
 801b7ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7f2:	ed9d 0b00 	vldr	d0, [sp]
 801b7f6:	2001      	movs	r0, #1
 801b7f8:	f000 f95e 	bl	801bab8 <__kernel_sin>
 801b7fc:	eeb1 0b40 	vneg.f64	d0, d0
 801b800:	e7d9      	b.n	801b7b6 <sin+0x2e>
 801b802:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b806:	ed9d 0b00 	vldr	d0, [sp]
 801b80a:	f000 f8ed 	bl	801b9e8 <__kernel_cos>
 801b80e:	e7f5      	b.n	801b7fc <sin+0x74>
	...
 801b818:	3fe921fb 	.word	0x3fe921fb
 801b81c:	7fefffff 	.word	0x7fefffff

0801b820 <sinf_poly>:
 801b820:	07cb      	lsls	r3, r1, #31
 801b822:	d412      	bmi.n	801b84a <sinf_poly+0x2a>
 801b824:	ee21 5b00 	vmul.f64	d5, d1, d0
 801b828:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801b82c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801b830:	eea6 7b01 	vfma.f64	d7, d6, d1
 801b834:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801b838:	ee21 1b05 	vmul.f64	d1, d1, d5
 801b83c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801b840:	eea7 0b01 	vfma.f64	d0, d7, d1
 801b844:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b848:	4770      	bx	lr
 801b84a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801b84e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801b852:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801b856:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801b85a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801b85e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801b862:	eea1 0b06 	vfma.f64	d0, d1, d6
 801b866:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801b86a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801b86e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801b872:	e7e5      	b.n	801b840 <sinf_poly+0x20>
 801b874:	0000      	movs	r0, r0
	...

0801b878 <sinf>:
 801b878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b87a:	ee10 4a10 	vmov	r4, s0
 801b87e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b882:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801b886:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801b88a:	eef0 7a40 	vmov.f32	s15, s0
 801b88e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801b892:	d218      	bcs.n	801b8c6 <sinf+0x4e>
 801b894:	ee26 1b06 	vmul.f64	d1, d6, d6
 801b898:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801b89c:	d20a      	bcs.n	801b8b4 <sinf+0x3c>
 801b89e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801b8a2:	d103      	bne.n	801b8ac <sinf+0x34>
 801b8a4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801b8a8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801b8ac:	eeb0 0a67 	vmov.f32	s0, s15
 801b8b0:	b003      	add	sp, #12
 801b8b2:	bd30      	pop	{r4, r5, pc}
 801b8b4:	483a      	ldr	r0, [pc, #232]	@ (801b9a0 <sinf+0x128>)
 801b8b6:	eeb0 0b46 	vmov.f64	d0, d6
 801b8ba:	2100      	movs	r1, #0
 801b8bc:	b003      	add	sp, #12
 801b8be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b8c2:	f7ff bfad 	b.w	801b820 <sinf_poly>
 801b8c6:	f240 422e 	movw	r2, #1070	@ 0x42e
 801b8ca:	4293      	cmp	r3, r2
 801b8cc:	d824      	bhi.n	801b918 <sinf+0xa0>
 801b8ce:	4b34      	ldr	r3, [pc, #208]	@ (801b9a0 <sinf+0x128>)
 801b8d0:	ed93 7b08 	vldr	d7, [r3, #32]
 801b8d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b8d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801b8dc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801b8e0:	ee17 1a90 	vmov	r1, s15
 801b8e4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801b8e8:	1609      	asrs	r1, r1, #24
 801b8ea:	ee07 1a90 	vmov	s15, r1
 801b8ee:	f001 0203 	and.w	r2, r1, #3
 801b8f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b8f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801b8fa:	ed92 0b00 	vldr	d0, [r2]
 801b8fe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801b902:	f011 0f02 	tst.w	r1, #2
 801b906:	eea5 6b47 	vfms.f64	d6, d5, d7
 801b90a:	bf08      	it	eq
 801b90c:	4618      	moveq	r0, r3
 801b90e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801b912:	ee20 0b06 	vmul.f64	d0, d0, d6
 801b916:	e7d1      	b.n	801b8bc <sinf+0x44>
 801b918:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801b91c:	d237      	bcs.n	801b98e <sinf+0x116>
 801b91e:	4921      	ldr	r1, [pc, #132]	@ (801b9a4 <sinf+0x12c>)
 801b920:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801b924:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801b928:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801b92c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801b930:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b934:	6a10      	ldr	r0, [r2, #32]
 801b936:	6912      	ldr	r2, [r2, #16]
 801b938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801b93c:	40ab      	lsls	r3, r5
 801b93e:	fba0 5003 	umull	r5, r0, r0, r3
 801b942:	4359      	muls	r1, r3
 801b944:	fbe3 0102 	umlal	r0, r1, r3, r2
 801b948:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801b94c:	0f9d      	lsrs	r5, r3, #30
 801b94e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801b952:	1ac9      	subs	r1, r1, r3
 801b954:	f7e4 fed2 	bl	80006fc <__aeabi_l2d>
 801b958:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801b95c:	4b10      	ldr	r3, [pc, #64]	@ (801b9a0 <sinf+0x128>)
 801b95e:	f004 0203 	and.w	r2, r4, #3
 801b962:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b966:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801b998 <sinf+0x120>
 801b96a:	ed92 0b00 	vldr	d0, [r2]
 801b96e:	ec41 0b17 	vmov	d7, r0, r1
 801b972:	f014 0f02 	tst.w	r4, #2
 801b976:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b97a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801b97e:	4629      	mov	r1, r5
 801b980:	bf08      	it	eq
 801b982:	4618      	moveq	r0, r3
 801b984:	ee27 1b07 	vmul.f64	d1, d7, d7
 801b988:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b98c:	e796      	b.n	801b8bc <sinf+0x44>
 801b98e:	b003      	add	sp, #12
 801b990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b994:	f000 b816 	b.w	801b9c4 <__math_invalidf>
 801b998:	54442d18 	.word	0x54442d18
 801b99c:	3c1921fb 	.word	0x3c1921fb
 801b9a0:	0801d060 	.word	0x0801d060
 801b9a4:	0801d000 	.word	0x0801d000

0801b9a8 <with_errnof>:
 801b9a8:	b510      	push	{r4, lr}
 801b9aa:	ed2d 8b02 	vpush	{d8}
 801b9ae:	eeb0 8a40 	vmov.f32	s16, s0
 801b9b2:	4604      	mov	r4, r0
 801b9b4:	f7fd fa6e 	bl	8018e94 <__errno>
 801b9b8:	eeb0 0a48 	vmov.f32	s0, s16
 801b9bc:	ecbd 8b02 	vpop	{d8}
 801b9c0:	6004      	str	r4, [r0, #0]
 801b9c2:	bd10      	pop	{r4, pc}

0801b9c4 <__math_invalidf>:
 801b9c4:	eef0 7a40 	vmov.f32	s15, s0
 801b9c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b9cc:	eef4 7a67 	vcmp.f32	s15, s15
 801b9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801b9d8:	d602      	bvs.n	801b9e0 <__math_invalidf+0x1c>
 801b9da:	2021      	movs	r0, #33	@ 0x21
 801b9dc:	f7ff bfe4 	b.w	801b9a8 <with_errnof>
 801b9e0:	4770      	bx	lr
 801b9e2:	0000      	movs	r0, r0
 801b9e4:	0000      	movs	r0, r0
	...

0801b9e8 <__kernel_cos>:
 801b9e8:	eeb0 5b40 	vmov.f64	d5, d0
 801b9ec:	ee15 1a90 	vmov	r1, s11
 801b9f0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801b9f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801b9f8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801b9fc:	d204      	bcs.n	801ba08 <__kernel_cos+0x20>
 801b9fe:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801ba02:	ee17 3a90 	vmov	r3, s15
 801ba06:	b343      	cbz	r3, 801ba5a <__kernel_cos+0x72>
 801ba08:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ba0c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801ba10:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801ba80 <__kernel_cos+0x98>
 801ba14:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801ba88 <__kernel_cos+0xa0>
 801ba18:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ba1c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801ba90 <__kernel_cos+0xa8>
 801ba20:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ba24:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801ba98 <__kernel_cos+0xb0>
 801ba28:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ba2c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801baa0 <__kernel_cos+0xb8>
 801ba30:	4b1f      	ldr	r3, [pc, #124]	@ (801bab0 <__kernel_cos+0xc8>)
 801ba32:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ba36:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801baa8 <__kernel_cos+0xc0>
 801ba3a:	4299      	cmp	r1, r3
 801ba3c:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ba40:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801ba44:	ee24 4b06 	vmul.f64	d4, d4, d6
 801ba48:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ba4c:	eea6 1b04 	vfma.f64	d1, d6, d4
 801ba50:	d804      	bhi.n	801ba5c <__kernel_cos+0x74>
 801ba52:	ee37 7b41 	vsub.f64	d7, d7, d1
 801ba56:	ee30 0b47 	vsub.f64	d0, d0, d7
 801ba5a:	4770      	bx	lr
 801ba5c:	4b15      	ldr	r3, [pc, #84]	@ (801bab4 <__kernel_cos+0xcc>)
 801ba5e:	4299      	cmp	r1, r3
 801ba60:	d809      	bhi.n	801ba76 <__kernel_cos+0x8e>
 801ba62:	2200      	movs	r2, #0
 801ba64:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801ba68:	ec43 2b16 	vmov	d6, r2, r3
 801ba6c:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ba70:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ba74:	e7ed      	b.n	801ba52 <__kernel_cos+0x6a>
 801ba76:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801ba7a:	e7f7      	b.n	801ba6c <__kernel_cos+0x84>
 801ba7c:	f3af 8000 	nop.w
 801ba80:	be8838d4 	.word	0xbe8838d4
 801ba84:	bda8fae9 	.word	0xbda8fae9
 801ba88:	bdb4b1c4 	.word	0xbdb4b1c4
 801ba8c:	3e21ee9e 	.word	0x3e21ee9e
 801ba90:	809c52ad 	.word	0x809c52ad
 801ba94:	be927e4f 	.word	0xbe927e4f
 801ba98:	19cb1590 	.word	0x19cb1590
 801ba9c:	3efa01a0 	.word	0x3efa01a0
 801baa0:	16c15177 	.word	0x16c15177
 801baa4:	bf56c16c 	.word	0xbf56c16c
 801baa8:	5555554c 	.word	0x5555554c
 801baac:	3fa55555 	.word	0x3fa55555
 801bab0:	3fd33332 	.word	0x3fd33332
 801bab4:	3fe90000 	.word	0x3fe90000

0801bab8 <__kernel_sin>:
 801bab8:	ee10 3a90 	vmov	r3, s1
 801babc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bac0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801bac4:	d204      	bcs.n	801bad0 <__kernel_sin+0x18>
 801bac6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801baca:	ee17 3a90 	vmov	r3, s15
 801bace:	b35b      	cbz	r3, 801bb28 <__kernel_sin+0x70>
 801bad0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801bad4:	ee20 5b06 	vmul.f64	d5, d0, d6
 801bad8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801bb30 <__kernel_sin+0x78>
 801badc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801bb38 <__kernel_sin+0x80>
 801bae0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801bae4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801bb40 <__kernel_sin+0x88>
 801bae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801baec:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801bb48 <__kernel_sin+0x90>
 801baf0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801baf4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801bb50 <__kernel_sin+0x98>
 801baf8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801bafc:	b930      	cbnz	r0, 801bb0c <__kernel_sin+0x54>
 801bafe:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801bb58 <__kernel_sin+0xa0>
 801bb02:	eea6 4b07 	vfma.f64	d4, d6, d7
 801bb06:	eea4 0b05 	vfma.f64	d0, d4, d5
 801bb0a:	4770      	bx	lr
 801bb0c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801bb10:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801bb14:	eea1 7b04 	vfma.f64	d7, d1, d4
 801bb18:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801bb1c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801bb60 <__kernel_sin+0xa8>
 801bb20:	eea5 1b07 	vfma.f64	d1, d5, d7
 801bb24:	ee30 0b41 	vsub.f64	d0, d0, d1
 801bb28:	4770      	bx	lr
 801bb2a:	bf00      	nop
 801bb2c:	f3af 8000 	nop.w
 801bb30:	5acfd57c 	.word	0x5acfd57c
 801bb34:	3de5d93a 	.word	0x3de5d93a
 801bb38:	8a2b9ceb 	.word	0x8a2b9ceb
 801bb3c:	be5ae5e6 	.word	0xbe5ae5e6
 801bb40:	57b1fe7d 	.word	0x57b1fe7d
 801bb44:	3ec71de3 	.word	0x3ec71de3
 801bb48:	19c161d5 	.word	0x19c161d5
 801bb4c:	bf2a01a0 	.word	0xbf2a01a0
 801bb50:	1110f8a6 	.word	0x1110f8a6
 801bb54:	3f811111 	.word	0x3f811111
 801bb58:	55555549 	.word	0x55555549
 801bb5c:	bfc55555 	.word	0xbfc55555
 801bb60:	55555549 	.word	0x55555549
 801bb64:	3fc55555 	.word	0x3fc55555

0801bb68 <__ieee754_rem_pio2>:
 801bb68:	b570      	push	{r4, r5, r6, lr}
 801bb6a:	eeb0 7b40 	vmov.f64	d7, d0
 801bb6e:	ee17 5a90 	vmov	r5, s15
 801bb72:	4b99      	ldr	r3, [pc, #612]	@ (801bdd8 <__ieee754_rem_pio2+0x270>)
 801bb74:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801bb78:	429e      	cmp	r6, r3
 801bb7a:	b088      	sub	sp, #32
 801bb7c:	4604      	mov	r4, r0
 801bb7e:	d807      	bhi.n	801bb90 <__ieee754_rem_pio2+0x28>
 801bb80:	2200      	movs	r2, #0
 801bb82:	2300      	movs	r3, #0
 801bb84:	ed84 0b00 	vstr	d0, [r4]
 801bb88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bb8c:	2000      	movs	r0, #0
 801bb8e:	e01b      	b.n	801bbc8 <__ieee754_rem_pio2+0x60>
 801bb90:	4b92      	ldr	r3, [pc, #584]	@ (801bddc <__ieee754_rem_pio2+0x274>)
 801bb92:	429e      	cmp	r6, r3
 801bb94:	d83b      	bhi.n	801bc0e <__ieee754_rem_pio2+0xa6>
 801bb96:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801bb9a:	2d00      	cmp	r5, #0
 801bb9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801bd98 <__ieee754_rem_pio2+0x230>
 801bba0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801bba4:	dd19      	ble.n	801bbda <__ieee754_rem_pio2+0x72>
 801bba6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bbaa:	429e      	cmp	r6, r3
 801bbac:	d00e      	beq.n	801bbcc <__ieee754_rem_pio2+0x64>
 801bbae:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801bda0 <__ieee754_rem_pio2+0x238>
 801bbb2:	ee37 6b45 	vsub.f64	d6, d7, d5
 801bbb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bbba:	ed84 6b00 	vstr	d6, [r4]
 801bbbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bbc2:	ed84 7b02 	vstr	d7, [r4, #8]
 801bbc6:	2001      	movs	r0, #1
 801bbc8:	b008      	add	sp, #32
 801bbca:	bd70      	pop	{r4, r5, r6, pc}
 801bbcc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801bda8 <__ieee754_rem_pio2+0x240>
 801bbd0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801bdb0 <__ieee754_rem_pio2+0x248>
 801bbd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bbd8:	e7eb      	b.n	801bbb2 <__ieee754_rem_pio2+0x4a>
 801bbda:	429e      	cmp	r6, r3
 801bbdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 801bbe0:	d00e      	beq.n	801bc00 <__ieee754_rem_pio2+0x98>
 801bbe2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801bda0 <__ieee754_rem_pio2+0x238>
 801bbe6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801bbea:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bbee:	ed84 6b00 	vstr	d6, [r4]
 801bbf2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801bbf6:	f04f 30ff 	mov.w	r0, #4294967295
 801bbfa:	ed84 7b02 	vstr	d7, [r4, #8]
 801bbfe:	e7e3      	b.n	801bbc8 <__ieee754_rem_pio2+0x60>
 801bc00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801bda8 <__ieee754_rem_pio2+0x240>
 801bc04:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801bdb0 <__ieee754_rem_pio2+0x248>
 801bc08:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bc0c:	e7eb      	b.n	801bbe6 <__ieee754_rem_pio2+0x7e>
 801bc0e:	4b74      	ldr	r3, [pc, #464]	@ (801bde0 <__ieee754_rem_pio2+0x278>)
 801bc10:	429e      	cmp	r6, r3
 801bc12:	d870      	bhi.n	801bcf6 <__ieee754_rem_pio2+0x18e>
 801bc14:	f000 f8ec 	bl	801bdf0 <fabs>
 801bc18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801bc1c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801bdb8 <__ieee754_rem_pio2+0x250>
 801bc20:	eea0 7b06 	vfma.f64	d7, d0, d6
 801bc24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801bc28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801bc2c:	ee17 0a90 	vmov	r0, s15
 801bc30:	eeb1 4b45 	vneg.f64	d4, d5
 801bc34:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801bd98 <__ieee754_rem_pio2+0x230>
 801bc38:	eea5 0b47 	vfms.f64	d0, d5, d7
 801bc3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801bda0 <__ieee754_rem_pio2+0x238>
 801bc40:	281f      	cmp	r0, #31
 801bc42:	ee25 7b07 	vmul.f64	d7, d5, d7
 801bc46:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bc4a:	dc05      	bgt.n	801bc58 <__ieee754_rem_pio2+0xf0>
 801bc4c:	4b65      	ldr	r3, [pc, #404]	@ (801bde4 <__ieee754_rem_pio2+0x27c>)
 801bc4e:	1e42      	subs	r2, r0, #1
 801bc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc54:	42b3      	cmp	r3, r6
 801bc56:	d109      	bne.n	801bc6c <__ieee754_rem_pio2+0x104>
 801bc58:	ee16 3a90 	vmov	r3, s13
 801bc5c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bc60:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801bc64:	2b10      	cmp	r3, #16
 801bc66:	ea4f 5226 	mov.w	r2, r6, asr #20
 801bc6a:	dc02      	bgt.n	801bc72 <__ieee754_rem_pio2+0x10a>
 801bc6c:	ed84 6b00 	vstr	d6, [r4]
 801bc70:	e01a      	b.n	801bca8 <__ieee754_rem_pio2+0x140>
 801bc72:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801bda8 <__ieee754_rem_pio2+0x240>
 801bc76:	eeb0 6b40 	vmov.f64	d6, d0
 801bc7a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801bc7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bc82:	eea4 7b03 	vfma.f64	d7, d4, d3
 801bc86:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801bdb0 <__ieee754_rem_pio2+0x248>
 801bc8a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801bc8e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801bc92:	ee13 3a90 	vmov	r3, s7
 801bc96:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bc9a:	1ad3      	subs	r3, r2, r3
 801bc9c:	2b31      	cmp	r3, #49	@ 0x31
 801bc9e:	dc17      	bgt.n	801bcd0 <__ieee754_rem_pio2+0x168>
 801bca0:	eeb0 0b46 	vmov.f64	d0, d6
 801bca4:	ed84 3b00 	vstr	d3, [r4]
 801bca8:	ed94 6b00 	vldr	d6, [r4]
 801bcac:	2d00      	cmp	r5, #0
 801bcae:	ee30 0b46 	vsub.f64	d0, d0, d6
 801bcb2:	ee30 0b47 	vsub.f64	d0, d0, d7
 801bcb6:	ed84 0b02 	vstr	d0, [r4, #8]
 801bcba:	da85      	bge.n	801bbc8 <__ieee754_rem_pio2+0x60>
 801bcbc:	eeb1 6b46 	vneg.f64	d6, d6
 801bcc0:	eeb1 0b40 	vneg.f64	d0, d0
 801bcc4:	ed84 6b00 	vstr	d6, [r4]
 801bcc8:	ed84 0b02 	vstr	d0, [r4, #8]
 801bccc:	4240      	negs	r0, r0
 801bcce:	e77b      	b.n	801bbc8 <__ieee754_rem_pio2+0x60>
 801bcd0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801bdc0 <__ieee754_rem_pio2+0x258>
 801bcd4:	eeb0 0b46 	vmov.f64	d0, d6
 801bcd8:	eea4 0b07 	vfma.f64	d0, d4, d7
 801bcdc:	ee36 6b40 	vsub.f64	d6, d6, d0
 801bce0:	eea4 6b07 	vfma.f64	d6, d4, d7
 801bce4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801bdc8 <__ieee754_rem_pio2+0x260>
 801bce8:	eeb0 7b46 	vmov.f64	d7, d6
 801bcec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801bcf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bcf4:	e7ba      	b.n	801bc6c <__ieee754_rem_pio2+0x104>
 801bcf6:	4b3c      	ldr	r3, [pc, #240]	@ (801bde8 <__ieee754_rem_pio2+0x280>)
 801bcf8:	429e      	cmp	r6, r3
 801bcfa:	d906      	bls.n	801bd0a <__ieee754_rem_pio2+0x1a2>
 801bcfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 801bd00:	ed80 7b02 	vstr	d7, [r0, #8]
 801bd04:	ed80 7b00 	vstr	d7, [r0]
 801bd08:	e740      	b.n	801bb8c <__ieee754_rem_pio2+0x24>
 801bd0a:	ee10 3a10 	vmov	r3, s0
 801bd0e:	1532      	asrs	r2, r6, #20
 801bd10:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801bd14:	4618      	mov	r0, r3
 801bd16:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801bd1a:	ec41 0b17 	vmov	d7, r0, r1
 801bd1e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bd22:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801bdd0 <__ieee754_rem_pio2+0x268>
 801bd26:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bd2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bd2e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bd32:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bd36:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bd3a:	a808      	add	r0, sp, #32
 801bd3c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bd40:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bd44:	ed8d 6b04 	vstr	d6, [sp, #16]
 801bd48:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bd4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bd50:	2103      	movs	r1, #3
 801bd52:	ed30 7b02 	vldmdb	r0!, {d7}
 801bd56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd5e:	460b      	mov	r3, r1
 801bd60:	f101 31ff 	add.w	r1, r1, #4294967295
 801bd64:	d0f5      	beq.n	801bd52 <__ieee754_rem_pio2+0x1ea>
 801bd66:	4921      	ldr	r1, [pc, #132]	@ (801bdec <__ieee754_rem_pio2+0x284>)
 801bd68:	9101      	str	r1, [sp, #4]
 801bd6a:	2102      	movs	r1, #2
 801bd6c:	9100      	str	r1, [sp, #0]
 801bd6e:	a802      	add	r0, sp, #8
 801bd70:	4621      	mov	r1, r4
 801bd72:	f000 f845 	bl	801be00 <__kernel_rem_pio2>
 801bd76:	2d00      	cmp	r5, #0
 801bd78:	f6bf af26 	bge.w	801bbc8 <__ieee754_rem_pio2+0x60>
 801bd7c:	ed94 7b00 	vldr	d7, [r4]
 801bd80:	eeb1 7b47 	vneg.f64	d7, d7
 801bd84:	ed84 7b00 	vstr	d7, [r4]
 801bd88:	ed94 7b02 	vldr	d7, [r4, #8]
 801bd8c:	eeb1 7b47 	vneg.f64	d7, d7
 801bd90:	ed84 7b02 	vstr	d7, [r4, #8]
 801bd94:	e79a      	b.n	801bccc <__ieee754_rem_pio2+0x164>
 801bd96:	bf00      	nop
 801bd98:	54400000 	.word	0x54400000
 801bd9c:	3ff921fb 	.word	0x3ff921fb
 801bda0:	1a626331 	.word	0x1a626331
 801bda4:	3dd0b461 	.word	0x3dd0b461
 801bda8:	1a600000 	.word	0x1a600000
 801bdac:	3dd0b461 	.word	0x3dd0b461
 801bdb0:	2e037073 	.word	0x2e037073
 801bdb4:	3ba3198a 	.word	0x3ba3198a
 801bdb8:	6dc9c883 	.word	0x6dc9c883
 801bdbc:	3fe45f30 	.word	0x3fe45f30
 801bdc0:	2e000000 	.word	0x2e000000
 801bdc4:	3ba3198a 	.word	0x3ba3198a
 801bdc8:	252049c1 	.word	0x252049c1
 801bdcc:	397b839a 	.word	0x397b839a
 801bdd0:	00000000 	.word	0x00000000
 801bdd4:	41700000 	.word	0x41700000
 801bdd8:	3fe921fb 	.word	0x3fe921fb
 801bddc:	4002d97b 	.word	0x4002d97b
 801bde0:	413921fb 	.word	0x413921fb
 801bde4:	0801d140 	.word	0x0801d140
 801bde8:	7fefffff 	.word	0x7fefffff
 801bdec:	0801d1c0 	.word	0x0801d1c0

0801bdf0 <fabs>:
 801bdf0:	ec51 0b10 	vmov	r0, r1, d0
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801bdfa:	ec43 2b10 	vmov	d0, r2, r3
 801bdfe:	4770      	bx	lr

0801be00 <__kernel_rem_pio2>:
 801be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be04:	ed2d 8b06 	vpush	{d8-d10}
 801be08:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801be0c:	469b      	mov	fp, r3
 801be0e:	9001      	str	r0, [sp, #4]
 801be10:	4bbb      	ldr	r3, [pc, #748]	@ (801c100 <__kernel_rem_pio2+0x300>)
 801be12:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801be14:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801be18:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801be1c:	f112 0f14 	cmn.w	r2, #20
 801be20:	bfa8      	it	ge
 801be22:	1ed3      	subge	r3, r2, #3
 801be24:	f10b 3aff 	add.w	sl, fp, #4294967295
 801be28:	bfb8      	it	lt
 801be2a:	2300      	movlt	r3, #0
 801be2c:	f06f 0517 	mvn.w	r5, #23
 801be30:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801c0e8 <__kernel_rem_pio2+0x2e8>
 801be34:	bfa4      	itt	ge
 801be36:	2018      	movge	r0, #24
 801be38:	fb93 f3f0 	sdivge	r3, r3, r0
 801be3c:	fb03 5505 	mla	r5, r3, r5, r5
 801be40:	eba3 040a 	sub.w	r4, r3, sl
 801be44:	4415      	add	r5, r2
 801be46:	460f      	mov	r7, r1
 801be48:	eb09 060a 	add.w	r6, r9, sl
 801be4c:	a81a      	add	r0, sp, #104	@ 0x68
 801be4e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801be52:	2200      	movs	r2, #0
 801be54:	42b2      	cmp	r2, r6
 801be56:	dd0e      	ble.n	801be76 <__kernel_rem_pio2+0x76>
 801be58:	aa1a      	add	r2, sp, #104	@ 0x68
 801be5a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801be5e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801be62:	2600      	movs	r6, #0
 801be64:	454e      	cmp	r6, r9
 801be66:	dc25      	bgt.n	801beb4 <__kernel_rem_pio2+0xb4>
 801be68:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801c0e8 <__kernel_rem_pio2+0x2e8>
 801be6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801be70:	4614      	mov	r4, r2
 801be72:	2000      	movs	r0, #0
 801be74:	e015      	b.n	801bea2 <__kernel_rem_pio2+0xa2>
 801be76:	42d4      	cmn	r4, r2
 801be78:	d409      	bmi.n	801be8e <__kernel_rem_pio2+0x8e>
 801be7a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801be7e:	ee07 1a90 	vmov	s15, r1
 801be82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801be86:	eca0 7b02 	vstmia	r0!, {d7}
 801be8a:	3201      	adds	r2, #1
 801be8c:	e7e2      	b.n	801be54 <__kernel_rem_pio2+0x54>
 801be8e:	eeb0 7b46 	vmov.f64	d7, d6
 801be92:	e7f8      	b.n	801be86 <__kernel_rem_pio2+0x86>
 801be94:	ecbc 5b02 	vldmia	ip!, {d5}
 801be98:	ed94 6b00 	vldr	d6, [r4]
 801be9c:	3001      	adds	r0, #1
 801be9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bea2:	4550      	cmp	r0, sl
 801bea4:	f1a4 0408 	sub.w	r4, r4, #8
 801bea8:	ddf4      	ble.n	801be94 <__kernel_rem_pio2+0x94>
 801beaa:	ecae 7b02 	vstmia	lr!, {d7}
 801beae:	3601      	adds	r6, #1
 801beb0:	3208      	adds	r2, #8
 801beb2:	e7d7      	b.n	801be64 <__kernel_rem_pio2+0x64>
 801beb4:	aa06      	add	r2, sp, #24
 801beb6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801c0f0 <__kernel_rem_pio2+0x2f0>
 801beba:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801c0f8 <__kernel_rem_pio2+0x2f8>
 801bebe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801bec2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801bec6:	9203      	str	r2, [sp, #12]
 801bec8:	9302      	str	r3, [sp, #8]
 801beca:	464c      	mov	r4, r9
 801becc:	00e3      	lsls	r3, r4, #3
 801bece:	9304      	str	r3, [sp, #16]
 801bed0:	ab92      	add	r3, sp, #584	@ 0x248
 801bed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bed6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801beda:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801bedc:	ab06      	add	r3, sp, #24
 801bede:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801bee2:	461e      	mov	r6, r3
 801bee4:	4620      	mov	r0, r4
 801bee6:	2800      	cmp	r0, #0
 801bee8:	f1a2 0208 	sub.w	r2, r2, #8
 801beec:	dc4a      	bgt.n	801bf84 <__kernel_rem_pio2+0x184>
 801beee:	4628      	mov	r0, r5
 801bef0:	9305      	str	r3, [sp, #20]
 801bef2:	f000 fa01 	bl	801c2f8 <scalbn>
 801bef6:	eeb0 8b40 	vmov.f64	d8, d0
 801befa:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801befe:	ee28 0b00 	vmul.f64	d0, d8, d0
 801bf02:	f000 fa79 	bl	801c3f8 <floor>
 801bf06:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801bf0a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801bf0e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801bf12:	2d00      	cmp	r5, #0
 801bf14:	ee17 8a90 	vmov	r8, s15
 801bf18:	9b05      	ldr	r3, [sp, #20]
 801bf1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bf1e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801bf22:	dd41      	ble.n	801bfa8 <__kernel_rem_pio2+0x1a8>
 801bf24:	1e60      	subs	r0, r4, #1
 801bf26:	aa06      	add	r2, sp, #24
 801bf28:	f1c5 0c18 	rsb	ip, r5, #24
 801bf2c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801bf30:	fa46 f20c 	asr.w	r2, r6, ip
 801bf34:	4490      	add	r8, r2
 801bf36:	fa02 f20c 	lsl.w	r2, r2, ip
 801bf3a:	1ab6      	subs	r6, r6, r2
 801bf3c:	aa06      	add	r2, sp, #24
 801bf3e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801bf42:	f1c5 0217 	rsb	r2, r5, #23
 801bf46:	4116      	asrs	r6, r2
 801bf48:	2e00      	cmp	r6, #0
 801bf4a:	dd3c      	ble.n	801bfc6 <__kernel_rem_pio2+0x1c6>
 801bf4c:	f04f 0c00 	mov.w	ip, #0
 801bf50:	f108 0801 	add.w	r8, r8, #1
 801bf54:	4660      	mov	r0, ip
 801bf56:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801bf5a:	4564      	cmp	r4, ip
 801bf5c:	dc66      	bgt.n	801c02c <__kernel_rem_pio2+0x22c>
 801bf5e:	2d00      	cmp	r5, #0
 801bf60:	dd03      	ble.n	801bf6a <__kernel_rem_pio2+0x16a>
 801bf62:	2d01      	cmp	r5, #1
 801bf64:	d072      	beq.n	801c04c <__kernel_rem_pio2+0x24c>
 801bf66:	2d02      	cmp	r5, #2
 801bf68:	d07a      	beq.n	801c060 <__kernel_rem_pio2+0x260>
 801bf6a:	2e02      	cmp	r6, #2
 801bf6c:	d12b      	bne.n	801bfc6 <__kernel_rem_pio2+0x1c6>
 801bf6e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801bf72:	ee30 8b48 	vsub.f64	d8, d0, d8
 801bf76:	b330      	cbz	r0, 801bfc6 <__kernel_rem_pio2+0x1c6>
 801bf78:	4628      	mov	r0, r5
 801bf7a:	f000 f9bd 	bl	801c2f8 <scalbn>
 801bf7e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bf82:	e020      	b.n	801bfc6 <__kernel_rem_pio2+0x1c6>
 801bf84:	ee20 7b09 	vmul.f64	d7, d0, d9
 801bf88:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801bf8c:	3801      	subs	r0, #1
 801bf8e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801bf92:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801bf96:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801bf9a:	eca6 0a01 	vstmia	r6!, {s0}
 801bf9e:	ed92 0b00 	vldr	d0, [r2]
 801bfa2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801bfa6:	e79e      	b.n	801bee6 <__kernel_rem_pio2+0xe6>
 801bfa8:	d105      	bne.n	801bfb6 <__kernel_rem_pio2+0x1b6>
 801bfaa:	1e62      	subs	r2, r4, #1
 801bfac:	a906      	add	r1, sp, #24
 801bfae:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bfb2:	15f6      	asrs	r6, r6, #23
 801bfb4:	e7c8      	b.n	801bf48 <__kernel_rem_pio2+0x148>
 801bfb6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801bfba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801bfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfc2:	da31      	bge.n	801c028 <__kernel_rem_pio2+0x228>
 801bfc4:	2600      	movs	r6, #0
 801bfc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfce:	f040 809b 	bne.w	801c108 <__kernel_rem_pio2+0x308>
 801bfd2:	1e62      	subs	r2, r4, #1
 801bfd4:	2000      	movs	r0, #0
 801bfd6:	454a      	cmp	r2, r9
 801bfd8:	da49      	bge.n	801c06e <__kernel_rem_pio2+0x26e>
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	d062      	beq.n	801c0a4 <__kernel_rem_pio2+0x2a4>
 801bfde:	3c01      	subs	r4, #1
 801bfe0:	ab06      	add	r3, sp, #24
 801bfe2:	3d18      	subs	r5, #24
 801bfe4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d0f8      	beq.n	801bfde <__kernel_rem_pio2+0x1de>
 801bfec:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801bff0:	4628      	mov	r0, r5
 801bff2:	f000 f981 	bl	801c2f8 <scalbn>
 801bff6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801c0f0 <__kernel_rem_pio2+0x2f0>
 801bffa:	1c62      	adds	r2, r4, #1
 801bffc:	a96a      	add	r1, sp, #424	@ 0x1a8
 801bffe:	00d3      	lsls	r3, r2, #3
 801c000:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c004:	4622      	mov	r2, r4
 801c006:	2a00      	cmp	r2, #0
 801c008:	f280 80a8 	bge.w	801c15c <__kernel_rem_pio2+0x35c>
 801c00c:	4622      	mov	r2, r4
 801c00e:	2a00      	cmp	r2, #0
 801c010:	f2c0 80c6 	blt.w	801c1a0 <__kernel_rem_pio2+0x3a0>
 801c014:	a96a      	add	r1, sp, #424	@ 0x1a8
 801c016:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801c01a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801c0e8 <__kernel_rem_pio2+0x2e8>
 801c01e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801c104 <__kernel_rem_pio2+0x304>
 801c022:	2000      	movs	r0, #0
 801c024:	1aa1      	subs	r1, r4, r2
 801c026:	e0b0      	b.n	801c18a <__kernel_rem_pio2+0x38a>
 801c028:	2602      	movs	r6, #2
 801c02a:	e78f      	b.n	801bf4c <__kernel_rem_pio2+0x14c>
 801c02c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c030:	b948      	cbnz	r0, 801c046 <__kernel_rem_pio2+0x246>
 801c032:	b122      	cbz	r2, 801c03e <__kernel_rem_pio2+0x23e>
 801c034:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801c038:	f843 2c04 	str.w	r2, [r3, #-4]
 801c03c:	2201      	movs	r2, #1
 801c03e:	f10c 0c01 	add.w	ip, ip, #1
 801c042:	4610      	mov	r0, r2
 801c044:	e789      	b.n	801bf5a <__kernel_rem_pio2+0x15a>
 801c046:	ebae 0202 	sub.w	r2, lr, r2
 801c04a:	e7f5      	b.n	801c038 <__kernel_rem_pio2+0x238>
 801c04c:	1e62      	subs	r2, r4, #1
 801c04e:	ab06      	add	r3, sp, #24
 801c050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c054:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c058:	a906      	add	r1, sp, #24
 801c05a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c05e:	e784      	b.n	801bf6a <__kernel_rem_pio2+0x16a>
 801c060:	1e62      	subs	r2, r4, #1
 801c062:	ab06      	add	r3, sp, #24
 801c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c068:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c06c:	e7f4      	b.n	801c058 <__kernel_rem_pio2+0x258>
 801c06e:	ab06      	add	r3, sp, #24
 801c070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c074:	3a01      	subs	r2, #1
 801c076:	4318      	orrs	r0, r3
 801c078:	e7ad      	b.n	801bfd6 <__kernel_rem_pio2+0x1d6>
 801c07a:	3301      	adds	r3, #1
 801c07c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801c080:	2800      	cmp	r0, #0
 801c082:	d0fa      	beq.n	801c07a <__kernel_rem_pio2+0x27a>
 801c084:	9a04      	ldr	r2, [sp, #16]
 801c086:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801c08a:	446a      	add	r2, sp
 801c08c:	eb04 000b 	add.w	r0, r4, fp
 801c090:	a91a      	add	r1, sp, #104	@ 0x68
 801c092:	1c66      	adds	r6, r4, #1
 801c094:	3a98      	subs	r2, #152	@ 0x98
 801c096:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801c09a:	4423      	add	r3, r4
 801c09c:	42b3      	cmp	r3, r6
 801c09e:	da04      	bge.n	801c0aa <__kernel_rem_pio2+0x2aa>
 801c0a0:	461c      	mov	r4, r3
 801c0a2:	e713      	b.n	801becc <__kernel_rem_pio2+0xcc>
 801c0a4:	9a03      	ldr	r2, [sp, #12]
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	e7e8      	b.n	801c07c <__kernel_rem_pio2+0x27c>
 801c0aa:	9902      	ldr	r1, [sp, #8]
 801c0ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c0b0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801c0b4:	9104      	str	r1, [sp, #16]
 801c0b6:	ee07 1a90 	vmov	s15, r1
 801c0ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c0be:	2400      	movs	r4, #0
 801c0c0:	eca0 7b02 	vstmia	r0!, {d7}
 801c0c4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801c0e8 <__kernel_rem_pio2+0x2e8>
 801c0c8:	4686      	mov	lr, r0
 801c0ca:	4554      	cmp	r4, sl
 801c0cc:	dd03      	ble.n	801c0d6 <__kernel_rem_pio2+0x2d6>
 801c0ce:	eca2 7b02 	vstmia	r2!, {d7}
 801c0d2:	3601      	adds	r6, #1
 801c0d4:	e7e2      	b.n	801c09c <__kernel_rem_pio2+0x29c>
 801c0d6:	ecbc 5b02 	vldmia	ip!, {d5}
 801c0da:	ed3e 6b02 	vldmdb	lr!, {d6}
 801c0de:	3401      	adds	r4, #1
 801c0e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c0e4:	e7f1      	b.n	801c0ca <__kernel_rem_pio2+0x2ca>
 801c0e6:	bf00      	nop
	...
 801c0f4:	3e700000 	.word	0x3e700000
 801c0f8:	00000000 	.word	0x00000000
 801c0fc:	41700000 	.word	0x41700000
 801c100:	0801d308 	.word	0x0801d308
 801c104:	0801d2c8 	.word	0x0801d2c8
 801c108:	4268      	negs	r0, r5
 801c10a:	eeb0 0b48 	vmov.f64	d0, d8
 801c10e:	f000 f8f3 	bl	801c2f8 <scalbn>
 801c112:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801c2e0 <__kernel_rem_pio2+0x4e0>
 801c116:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801c11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c11e:	db17      	blt.n	801c150 <__kernel_rem_pio2+0x350>
 801c120:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801c2e8 <__kernel_rem_pio2+0x4e8>
 801c124:	ee20 7b07 	vmul.f64	d7, d0, d7
 801c128:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801c12c:	aa06      	add	r2, sp, #24
 801c12e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801c132:	eea5 0b46 	vfms.f64	d0, d5, d6
 801c136:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c13a:	3518      	adds	r5, #24
 801c13c:	ee10 3a10 	vmov	r3, s0
 801c140:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c144:	ee17 3a10 	vmov	r3, s14
 801c148:	3401      	adds	r4, #1
 801c14a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c14e:	e74d      	b.n	801bfec <__kernel_rem_pio2+0x1ec>
 801c150:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c154:	aa06      	add	r2, sp, #24
 801c156:	ee10 3a10 	vmov	r3, s0
 801c15a:	e7f6      	b.n	801c14a <__kernel_rem_pio2+0x34a>
 801c15c:	a806      	add	r0, sp, #24
 801c15e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801c162:	9001      	str	r0, [sp, #4]
 801c164:	ee07 0a90 	vmov	s15, r0
 801c168:	3a01      	subs	r2, #1
 801c16a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c16e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801c172:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c176:	ed21 7b02 	vstmdb	r1!, {d7}
 801c17a:	e744      	b.n	801c006 <__kernel_rem_pio2+0x206>
 801c17c:	ecbc 5b02 	vldmia	ip!, {d5}
 801c180:	ecb5 6b02 	vldmia	r5!, {d6}
 801c184:	3001      	adds	r0, #1
 801c186:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c18a:	4548      	cmp	r0, r9
 801c18c:	dc01      	bgt.n	801c192 <__kernel_rem_pio2+0x392>
 801c18e:	4281      	cmp	r1, r0
 801c190:	daf4      	bge.n	801c17c <__kernel_rem_pio2+0x37c>
 801c192:	a842      	add	r0, sp, #264	@ 0x108
 801c194:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c198:	ed81 7b00 	vstr	d7, [r1]
 801c19c:	3a01      	subs	r2, #1
 801c19e:	e736      	b.n	801c00e <__kernel_rem_pio2+0x20e>
 801c1a0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801c1a2:	2a02      	cmp	r2, #2
 801c1a4:	dc0a      	bgt.n	801c1bc <__kernel_rem_pio2+0x3bc>
 801c1a6:	2a00      	cmp	r2, #0
 801c1a8:	dc2d      	bgt.n	801c206 <__kernel_rem_pio2+0x406>
 801c1aa:	d046      	beq.n	801c23a <__kernel_rem_pio2+0x43a>
 801c1ac:	f008 0007 	and.w	r0, r8, #7
 801c1b0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801c1b4:	ecbd 8b06 	vpop	{d8-d10}
 801c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1bc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801c1be:	2a03      	cmp	r2, #3
 801c1c0:	d1f4      	bne.n	801c1ac <__kernel_rem_pio2+0x3ac>
 801c1c2:	a942      	add	r1, sp, #264	@ 0x108
 801c1c4:	f1a3 0208 	sub.w	r2, r3, #8
 801c1c8:	440a      	add	r2, r1
 801c1ca:	4611      	mov	r1, r2
 801c1cc:	4620      	mov	r0, r4
 801c1ce:	2800      	cmp	r0, #0
 801c1d0:	f1a1 0108 	sub.w	r1, r1, #8
 801c1d4:	dc52      	bgt.n	801c27c <__kernel_rem_pio2+0x47c>
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	2901      	cmp	r1, #1
 801c1da:	f1a2 0208 	sub.w	r2, r2, #8
 801c1de:	dc5d      	bgt.n	801c29c <__kernel_rem_pio2+0x49c>
 801c1e0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801c2f0 <__kernel_rem_pio2+0x4f0>
 801c1e4:	aa42      	add	r2, sp, #264	@ 0x108
 801c1e6:	4413      	add	r3, r2
 801c1e8:	2c01      	cmp	r4, #1
 801c1ea:	dc67      	bgt.n	801c2bc <__kernel_rem_pio2+0x4bc>
 801c1ec:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801c1f0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801c1f4:	2e00      	cmp	r6, #0
 801c1f6:	d167      	bne.n	801c2c8 <__kernel_rem_pio2+0x4c8>
 801c1f8:	ed87 5b00 	vstr	d5, [r7]
 801c1fc:	ed87 6b02 	vstr	d6, [r7, #8]
 801c200:	ed87 7b04 	vstr	d7, [r7, #16]
 801c204:	e7d2      	b.n	801c1ac <__kernel_rem_pio2+0x3ac>
 801c206:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801c2f0 <__kernel_rem_pio2+0x4f0>
 801c20a:	aa42      	add	r2, sp, #264	@ 0x108
 801c20c:	4413      	add	r3, r2
 801c20e:	4622      	mov	r2, r4
 801c210:	2a00      	cmp	r2, #0
 801c212:	da24      	bge.n	801c25e <__kernel_rem_pio2+0x45e>
 801c214:	b34e      	cbz	r6, 801c26a <__kernel_rem_pio2+0x46a>
 801c216:	eeb1 7b46 	vneg.f64	d7, d6
 801c21a:	ed87 7b00 	vstr	d7, [r7]
 801c21e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801c222:	aa44      	add	r2, sp, #272	@ 0x110
 801c224:	2301      	movs	r3, #1
 801c226:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c22a:	429c      	cmp	r4, r3
 801c22c:	da20      	bge.n	801c270 <__kernel_rem_pio2+0x470>
 801c22e:	b10e      	cbz	r6, 801c234 <__kernel_rem_pio2+0x434>
 801c230:	eeb1 7b47 	vneg.f64	d7, d7
 801c234:	ed87 7b02 	vstr	d7, [r7, #8]
 801c238:	e7b8      	b.n	801c1ac <__kernel_rem_pio2+0x3ac>
 801c23a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801c2f0 <__kernel_rem_pio2+0x4f0>
 801c23e:	aa42      	add	r2, sp, #264	@ 0x108
 801c240:	4413      	add	r3, r2
 801c242:	2c00      	cmp	r4, #0
 801c244:	da05      	bge.n	801c252 <__kernel_rem_pio2+0x452>
 801c246:	b10e      	cbz	r6, 801c24c <__kernel_rem_pio2+0x44c>
 801c248:	eeb1 7b47 	vneg.f64	d7, d7
 801c24c:	ed87 7b00 	vstr	d7, [r7]
 801c250:	e7ac      	b.n	801c1ac <__kernel_rem_pio2+0x3ac>
 801c252:	ed33 6b02 	vldmdb	r3!, {d6}
 801c256:	3c01      	subs	r4, #1
 801c258:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c25c:	e7f1      	b.n	801c242 <__kernel_rem_pio2+0x442>
 801c25e:	ed33 7b02 	vldmdb	r3!, {d7}
 801c262:	3a01      	subs	r2, #1
 801c264:	ee36 6b07 	vadd.f64	d6, d6, d7
 801c268:	e7d2      	b.n	801c210 <__kernel_rem_pio2+0x410>
 801c26a:	eeb0 7b46 	vmov.f64	d7, d6
 801c26e:	e7d4      	b.n	801c21a <__kernel_rem_pio2+0x41a>
 801c270:	ecb2 6b02 	vldmia	r2!, {d6}
 801c274:	3301      	adds	r3, #1
 801c276:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c27a:	e7d6      	b.n	801c22a <__kernel_rem_pio2+0x42a>
 801c27c:	ed91 7b00 	vldr	d7, [r1]
 801c280:	ed91 5b02 	vldr	d5, [r1, #8]
 801c284:	3801      	subs	r0, #1
 801c286:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c28a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c28e:	ed81 6b00 	vstr	d6, [r1]
 801c292:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c296:	ed81 7b02 	vstr	d7, [r1, #8]
 801c29a:	e798      	b.n	801c1ce <__kernel_rem_pio2+0x3ce>
 801c29c:	ed92 7b00 	vldr	d7, [r2]
 801c2a0:	ed92 5b02 	vldr	d5, [r2, #8]
 801c2a4:	3901      	subs	r1, #1
 801c2a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c2aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c2ae:	ed82 6b00 	vstr	d6, [r2]
 801c2b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c2b6:	ed82 7b02 	vstr	d7, [r2, #8]
 801c2ba:	e78d      	b.n	801c1d8 <__kernel_rem_pio2+0x3d8>
 801c2bc:	ed33 6b02 	vldmdb	r3!, {d6}
 801c2c0:	3c01      	subs	r4, #1
 801c2c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c2c6:	e78f      	b.n	801c1e8 <__kernel_rem_pio2+0x3e8>
 801c2c8:	eeb1 5b45 	vneg.f64	d5, d5
 801c2cc:	eeb1 6b46 	vneg.f64	d6, d6
 801c2d0:	ed87 5b00 	vstr	d5, [r7]
 801c2d4:	eeb1 7b47 	vneg.f64	d7, d7
 801c2d8:	ed87 6b02 	vstr	d6, [r7, #8]
 801c2dc:	e790      	b.n	801c200 <__kernel_rem_pio2+0x400>
 801c2de:	bf00      	nop
 801c2e0:	00000000 	.word	0x00000000
 801c2e4:	41700000 	.word	0x41700000
 801c2e8:	00000000 	.word	0x00000000
 801c2ec:	3e700000 	.word	0x3e700000
	...

0801c2f8 <scalbn>:
 801c2f8:	ee10 1a90 	vmov	r1, s1
 801c2fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c300:	b98b      	cbnz	r3, 801c326 <scalbn+0x2e>
 801c302:	ee10 3a10 	vmov	r3, s0
 801c306:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801c30a:	4319      	orrs	r1, r3
 801c30c:	d00a      	beq.n	801c324 <scalbn+0x2c>
 801c30e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801c3c0 <scalbn+0xc8>
 801c312:	4b37      	ldr	r3, [pc, #220]	@ (801c3f0 <scalbn+0xf8>)
 801c314:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c318:	4298      	cmp	r0, r3
 801c31a:	da0b      	bge.n	801c334 <scalbn+0x3c>
 801c31c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c3c8 <scalbn+0xd0>
 801c320:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c324:	4770      	bx	lr
 801c326:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c32a:	4293      	cmp	r3, r2
 801c32c:	d107      	bne.n	801c33e <scalbn+0x46>
 801c32e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c332:	4770      	bx	lr
 801c334:	ee10 1a90 	vmov	r1, s1
 801c338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c33c:	3b36      	subs	r3, #54	@ 0x36
 801c33e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801c342:	4290      	cmp	r0, r2
 801c344:	dd0d      	ble.n	801c362 <scalbn+0x6a>
 801c346:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801c3d0 <scalbn+0xd8>
 801c34a:	ee10 3a90 	vmov	r3, s1
 801c34e:	eeb0 6b47 	vmov.f64	d6, d7
 801c352:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801c3d8 <scalbn+0xe0>
 801c356:	2b00      	cmp	r3, #0
 801c358:	fe27 7b05 	vselge.f64	d7, d7, d5
 801c35c:	ee27 0b06 	vmul.f64	d0, d7, d6
 801c360:	4770      	bx	lr
 801c362:	4418      	add	r0, r3
 801c364:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801c368:	4298      	cmp	r0, r3
 801c36a:	dcec      	bgt.n	801c346 <scalbn+0x4e>
 801c36c:	2800      	cmp	r0, #0
 801c36e:	dd0a      	ble.n	801c386 <scalbn+0x8e>
 801c370:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801c374:	ec53 2b10 	vmov	r2, r3, d0
 801c378:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801c37c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c380:	ec43 2b10 	vmov	d0, r2, r3
 801c384:	4770      	bx	lr
 801c386:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801c38a:	da09      	bge.n	801c3a0 <scalbn+0xa8>
 801c38c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801c3c8 <scalbn+0xd0>
 801c390:	ee10 3a90 	vmov	r3, s1
 801c394:	eeb0 6b47 	vmov.f64	d6, d7
 801c398:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801c3e0 <scalbn+0xe8>
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	e7db      	b.n	801c358 <scalbn+0x60>
 801c3a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801c3a4:	ec53 2b10 	vmov	r2, r3, d0
 801c3a8:	3036      	adds	r0, #54	@ 0x36
 801c3aa:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801c3ae:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c3b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801c3e8 <scalbn+0xf0>
 801c3b6:	ec43 2b10 	vmov	d0, r2, r3
 801c3ba:	e7b1      	b.n	801c320 <scalbn+0x28>
 801c3bc:	f3af 8000 	nop.w
 801c3c0:	00000000 	.word	0x00000000
 801c3c4:	43500000 	.word	0x43500000
 801c3c8:	c2f8f359 	.word	0xc2f8f359
 801c3cc:	01a56e1f 	.word	0x01a56e1f
 801c3d0:	8800759c 	.word	0x8800759c
 801c3d4:	7e37e43c 	.word	0x7e37e43c
 801c3d8:	8800759c 	.word	0x8800759c
 801c3dc:	fe37e43c 	.word	0xfe37e43c
 801c3e0:	c2f8f359 	.word	0xc2f8f359
 801c3e4:	81a56e1f 	.word	0x81a56e1f
 801c3e8:	00000000 	.word	0x00000000
 801c3ec:	3c900000 	.word	0x3c900000
 801c3f0:	ffff3cb0 	.word	0xffff3cb0
 801c3f4:	00000000 	.word	0x00000000

0801c3f8 <floor>:
 801c3f8:	ee10 3a90 	vmov	r3, s1
 801c3fc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801c400:	ee10 2a10 	vmov	r2, s0
 801c404:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801c408:	2913      	cmp	r1, #19
 801c40a:	b530      	push	{r4, r5, lr}
 801c40c:	4615      	mov	r5, r2
 801c40e:	dc33      	bgt.n	801c478 <floor+0x80>
 801c410:	2900      	cmp	r1, #0
 801c412:	da18      	bge.n	801c446 <floor+0x4e>
 801c414:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801c4d8 <floor+0xe0>
 801c418:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c41c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c424:	dd0a      	ble.n	801c43c <floor+0x44>
 801c426:	2b00      	cmp	r3, #0
 801c428:	da50      	bge.n	801c4cc <floor+0xd4>
 801c42a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c42e:	4313      	orrs	r3, r2
 801c430:	2200      	movs	r2, #0
 801c432:	4293      	cmp	r3, r2
 801c434:	4b2a      	ldr	r3, [pc, #168]	@ (801c4e0 <floor+0xe8>)
 801c436:	bf08      	it	eq
 801c438:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801c43c:	4619      	mov	r1, r3
 801c43e:	4610      	mov	r0, r2
 801c440:	ec41 0b10 	vmov	d0, r0, r1
 801c444:	e01f      	b.n	801c486 <floor+0x8e>
 801c446:	4827      	ldr	r0, [pc, #156]	@ (801c4e4 <floor+0xec>)
 801c448:	4108      	asrs	r0, r1
 801c44a:	ea03 0400 	and.w	r4, r3, r0
 801c44e:	4314      	orrs	r4, r2
 801c450:	d019      	beq.n	801c486 <floor+0x8e>
 801c452:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801c4d8 <floor+0xe0>
 801c456:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c45a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c462:	ddeb      	ble.n	801c43c <floor+0x44>
 801c464:	2b00      	cmp	r3, #0
 801c466:	bfbe      	ittt	lt
 801c468:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801c46c:	410a      	asrlt	r2, r1
 801c46e:	189b      	addlt	r3, r3, r2
 801c470:	ea23 0300 	bic.w	r3, r3, r0
 801c474:	2200      	movs	r2, #0
 801c476:	e7e1      	b.n	801c43c <floor+0x44>
 801c478:	2933      	cmp	r1, #51	@ 0x33
 801c47a:	dd05      	ble.n	801c488 <floor+0x90>
 801c47c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c480:	d101      	bne.n	801c486 <floor+0x8e>
 801c482:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c486:	bd30      	pop	{r4, r5, pc}
 801c488:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801c48c:	f04f 30ff 	mov.w	r0, #4294967295
 801c490:	40e0      	lsrs	r0, r4
 801c492:	4210      	tst	r0, r2
 801c494:	d0f7      	beq.n	801c486 <floor+0x8e>
 801c496:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801c4d8 <floor+0xe0>
 801c49a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c49e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a6:	ddc9      	ble.n	801c43c <floor+0x44>
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	da02      	bge.n	801c4b2 <floor+0xba>
 801c4ac:	2914      	cmp	r1, #20
 801c4ae:	d103      	bne.n	801c4b8 <floor+0xc0>
 801c4b0:	3301      	adds	r3, #1
 801c4b2:	ea22 0200 	bic.w	r2, r2, r0
 801c4b6:	e7c1      	b.n	801c43c <floor+0x44>
 801c4b8:	2401      	movs	r4, #1
 801c4ba:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801c4be:	fa04 f101 	lsl.w	r1, r4, r1
 801c4c2:	440a      	add	r2, r1
 801c4c4:	42aa      	cmp	r2, r5
 801c4c6:	bf38      	it	cc
 801c4c8:	191b      	addcc	r3, r3, r4
 801c4ca:	e7f2      	b.n	801c4b2 <floor+0xba>
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	4613      	mov	r3, r2
 801c4d0:	e7b4      	b.n	801c43c <floor+0x44>
 801c4d2:	bf00      	nop
 801c4d4:	f3af 8000 	nop.w
 801c4d8:	8800759c 	.word	0x8800759c
 801c4dc:	7e37e43c 	.word	0x7e37e43c
 801c4e0:	bff00000 	.word	0xbff00000
 801c4e4:	000fffff 	.word	0x000fffff

0801c4e8 <_init>:
 801c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4ea:	bf00      	nop
 801c4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c4ee:	bc08      	pop	{r3}
 801c4f0:	469e      	mov	lr, r3
 801c4f2:	4770      	bx	lr

0801c4f4 <_fini>:
 801c4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4f6:	bf00      	nop
 801c4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c4fa:	bc08      	pop	{r3}
 801c4fc:	469e      	mov	lr, r3
 801c4fe:	4770      	bx	lr
