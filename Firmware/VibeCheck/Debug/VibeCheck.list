
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c48  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08013f18  08013f18  00014f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014328  08014328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014330  08014330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014334  08014334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08014338  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003338  240002cc  08014604  000162cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24003604  08014604  00016604  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000162cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c4c2  00000000  00000000  000162fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005555  00000000  00000000  000427bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002368  00000000  00000000  00047d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b77  00000000  00000000  0004a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000929e  00000000  00000000  0004bbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032b56  00000000  00000000  00054e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fdc6  00000000  00000000  000879eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f77b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a854  00000000  00000000  001f77f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00202048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013f00 	.word	0x08013f00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08013f00 	.word	0x08013f00

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fe96 	bl	80013e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f001 fe48 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f82c 	bl	8000718 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006c0:	f000 f89a 	bl	80007f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 fd84 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 fd62 	bl	8001190 <MX_DMA_Init>
  MX_DAC1_Init();
 80006cc:	f000 f9aa 	bl	8000a24 <MX_DAC1_Init>
  MX_I2C2_Init();
 80006d0:	f000 f9da 	bl	8000a88 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006d4:	f000 fa18 	bl	8000b08 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006d8:	f000 fa6c 	bl	8000bb4 <MX_SPI3_Init>
  MX_SPI4_Init();
 80006dc:	f000 fac0 	bl	8000c60 <MX_SPI4_Init>
  MX_TIM4_Init();
 80006e0:	f000 fc44 	bl	8000f6c <MX_TIM4_Init>
  MX_TIM3_Init();
 80006e4:	f000 fbb4 	bl	8000e50 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 fd06 	bl	80010f8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006ec:	f000 fb0e 	bl	8000d0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f0:	f000 fb60 	bl	8000db4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80006f4:	f000 f8b0 	bl	8000858 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006f8:	f000 f92a 	bl	8000950 <MX_ADC2_Init>
  MX_UART7_Init();
 80006fc:	f000 fcae 	bl	800105c <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000700:	f010 f918 	bl	8010934 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc);
 8000704:	4803      	ldr	r0, [pc, #12]	@ (8000714 <main+0x64>)
 8000706:	f001 fc3b 	bl	8001f80 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 800070a:	4802      	ldr	r0, [pc, #8]	@ (8000714 <main+0x64>)
 800070c:	f001 fc48 	bl	8001fa0 <VibeCheck_Loop>
 8000710:	e7fb      	b.n	800070a <main+0x5a>
 8000712:	bf00      	nop
 8000714:	24000898 	.word	0x24000898

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	@ 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000722:	224c      	movs	r2, #76	@ 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f011 fb8f 	bl	8011e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f011 fb89 	bl	8011e4a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f006 ff6f 	bl	800761c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <SystemClock_Config+0xdc>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a2b      	ldr	r2, [pc, #172]	@ (80007f4 <SystemClock_Config+0xdc>)
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xdc>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075a:	bf00      	nop
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <SystemClock_Config+0xdc>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000768:	d1f8      	bne.n	800075c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800076a:	2321      	movs	r3, #33	@ 0x21
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000784:	2328      	movs	r3, #40	@ 0x28
 8000786:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000794:	230c      	movs	r3, #12
 8000796:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000798:	2300      	movs	r3, #0
 800079a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f006 ff83 	bl	80076b0 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b0:	f000 fe44 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	233f      	movs	r3, #63	@ 0x3f
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c0:	2308      	movs	r3, #8
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2103      	movs	r1, #3
 80007da:	4618      	mov	r0, r3
 80007dc:	f007 fb42 	bl	8007e64 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007e6:	f000 fe29 	bl	800143c <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3770      	adds	r7, #112	@ 0x70
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	58024800 	.word	0x58024800

080007f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ae      	sub	sp, #184	@ 0xb8
 80007fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	22b8      	movs	r2, #184	@ 0xb8
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f011 fb20 	bl	8011e4a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800081a:	2310      	movs	r3, #16
 800081c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800082a:	23c0      	movs	r3, #192	@ 0xc0
 800082c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4618      	mov	r0, r3
 8000840:	f007 fe9c 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800084a:	f000 fdf7 	bl	800143c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	37b8      	adds	r7, #184	@ 0xb8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2224      	movs	r2, #36	@ 0x24
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f011 faea 	bl	8011e4a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <MX_ADC1_Init+0xe8>)
 8000878:	4a32      	ldr	r2, [pc, #200]	@ (8000944 <MX_ADC1_Init+0xec>)
 800087a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800087c:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <MX_ADC1_Init+0xe8>)
 800087e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000882:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <MX_ADC1_Init+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_ADC1_Init+0xe8>)
 8000892:	2204      	movs	r2, #4
 8000894:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <MX_ADC1_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_ADC1_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008d8:	2201      	movs	r2, #1
 80008da:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008dc:	4818      	ldr	r0, [pc, #96]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008de:	f002 f831 	bl	8002944 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008e8:	f000 fda8 	bl	800143c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <MX_ADC1_Init+0xe8>)
 80008f8:	f003 f870 	bl	80039dc <HAL_ADCEx_MultiModeConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000902:	f000 fd9b 	bl	800143c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_ADC1_Init+0xf0>)
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2306      	movs	r3, #6
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_ADC1_Init+0xf4>)
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000916:	2304      	movs	r3, #4
 8000918:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_ADC1_Init+0xe8>)
 800092a:	f002 fa13 	bl	8002d54 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000934:	f000 fd82 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	@ 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	240002e8 	.word	0x240002e8
 8000944:	40022000 	.word	0x40022000
 8000948:	10c00010 	.word	0x10c00010
 800094c:	47ff0000 	.word	0x47ff0000

08000950 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2224      	movs	r2, #36	@ 0x24
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f011 fa74 	bl	8011e4a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000962:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000964:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <MX_ADC2_Init+0xc8>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 800096a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800096e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000976:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097c:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 800097e:	2204      	movs	r2, #4
 8000980:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000982:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000984:	2200      	movs	r2, #0
 8000986:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 800098a:	2200      	movs	r2, #0
 800098c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000990:	2201      	movs	r2, #1
 8000992:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000994:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009ca:	f001 ffbb 	bl	8002944 <HAL_ADC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80009d4:	f000 fd32 	bl	800143c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_ADC2_Init+0xcc>)
 80009da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009dc:	2306      	movs	r3, #6
 80009de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_ADC2_Init+0xd0>)
 80009e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e8:	2304      	movs	r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_ADC2_Init+0xc4>)
 80009fc:	f002 f9aa 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000a06:	f000 fd19 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	@ 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000358 	.word	0x24000358
 8000a18:	40022100 	.word	0x40022100
 8000a1c:	0c900008 	.word	0x0c900008
 8000a20:	47ff0000 	.word	0x47ff0000

08000a24 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2224      	movs	r2, #36	@ 0x24
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f011 fa0a 	bl	8011e4a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_DAC1_Init+0x5c>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_DAC1_Init+0x60>)
 8000a3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <MX_DAC1_Init+0x5c>)
 8000a3e:	f003 fa37 	bl	8003eb0 <HAL_DAC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a48:	f000 fcf8 	bl	800143c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000a50:	2306      	movs	r3, #6
 8000a52:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_DAC1_Init+0x5c>)
 8000a68:	f003 fa44 	bl	8003ef4 <HAL_DAC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 fce3 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	240003c8 	.word	0x240003c8
 8000a84:	40007400 	.word	0x40007400

08000a88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_I2C2_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <MX_I2C2_Init+0x7c>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac2:	480e      	ldr	r0, [pc, #56]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ac4:	f005 f9d8 	bl	8005e78 <HAL_I2C_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 fcb5 	bl	800143c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4809      	ldr	r0, [pc, #36]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ad6:	f005 fa6b 	bl	8005fb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 fcac 	bl	800143c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ae8:	f005 faad 	bl	8006046 <HAL_I2CEx_ConfigDigitalFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 fca3 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000454 	.word	0x24000454
 8000b00:	40005800 	.word	0x40005800
 8000b04:	307075b1 	.word	0x307075b1

08000b08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b0e:	4a28      	ldr	r2, [pc, #160]	@ (8000bb0 <MX_SPI2_Init+0xa8>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b14:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_SPI2_Init+0xa4>)
 8000b98:	f00a f8d6 	bl	800ad48 <HAL_SPI_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ba2:	f000 fc4b 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240004a8 	.word	0x240004a8
 8000bb0:	40003800 	.word	0x40003800

08000bb4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bba:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <MX_SPI3_Init+0xa8>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000be0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000be4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_SPI3_Init+0xa4>)
 8000c44:	f00a f880 	bl	800ad48 <HAL_SPI_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000c4e:	f000 fbf5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000530 	.word	0x24000530
 8000c5c:	40003c00 	.word	0x40003c00

08000c60 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c66:	4a28      	ldr	r2, [pc, #160]	@ (8000d08 <MX_SPI4_Init+0xa8>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c6c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c90:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_SPI4_Init+0xa4>)
 8000cf0:	f00a f82a 	bl	800ad48 <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000cfa:	f000 fb9f 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240005b8 	.word	0x240005b8
 8000d08:	40013400 	.word	0x40013400

08000d0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d2c:	4a20      	ldr	r2, [pc, #128]	@ (8000db0 <MX_TIM1_Init+0xa4>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d56:	4815      	ldr	r0, [pc, #84]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d58:	f00a f935 	bl	800afc6 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d62:	f000 fb6b 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480e      	ldr	r0, [pc, #56]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d74:	f00a faf4 	bl	800b360 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d7e:	f000 fb5d 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d82:	2320      	movs	r3, #32
 8000d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <MX_TIM1_Init+0xa0>)
 8000d94:	f00b f802 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d9e:	f000 fb4d 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000640 	.word	0x24000640
 8000db0:	40010000 	.word	0x40010000

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000dfc:	f00a f8e3 	bl	800afc6 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e06:	f000 fb19 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000e18:	f00a faa2 	bl	800b360 <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e22:	f000 fb0b 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e26:	2320      	movs	r3, #32
 8000e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000e34:	f00a ffb2 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 fafd 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2400068c 	.word	0x2400068c

08000e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e82:	4b38      	ldr	r3, [pc, #224]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000e84:	4a38      	ldr	r2, [pc, #224]	@ (8000f68 <MX_TIM3_Init+0x118>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e88:	4b36      	ldr	r3, [pc, #216]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b35      	ldr	r3, [pc, #212]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e94:	4b33      	ldr	r3, [pc, #204]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea8:	482e      	ldr	r0, [pc, #184]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000eaa:	f00a f88c 	bl	800afc6 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f000 fac2 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000ec6:	f00a fa4b 	bl	800b360 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ed0:	f000 fab4 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed4:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000ed6:	f00a f8cd 	bl	800b074 <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f000 faac 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481c      	ldr	r0, [pc, #112]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000ef4:	f00a ff52 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000efe:	f000 fa9d 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000f1a:	f00a f90d 	bl	800b138 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f000 fa8a 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000f30:	f00a f902 	bl	800b138 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3a:	f000 fa7f 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2208      	movs	r2, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000f46:	f00a f8f7 	bl	800b138 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f50:	f000 fa74 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM3_Init+0x114>)
 8000f56:	f000 fd71 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	@ 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	240006d8 	.word	0x240006d8
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	@ 0x38
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8001058 <MX_TIM4_Init+0xec>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fc4:	4823      	ldr	r0, [pc, #140]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fc6:	f009 fffe 	bl	800afc6 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000fd0:	f000 fa34 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481c      	ldr	r0, [pc, #112]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fe2:	f00a f9bd 	bl	800b360 <HAL_TIM_ConfigClockSource>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000fec:	f000 fa26 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ff0:	4818      	ldr	r0, [pc, #96]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000ff2:	f00a f83f 	bl	800b074 <HAL_TIM_PWM_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ffc:	f000 fa1e 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4811      	ldr	r0, [pc, #68]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8001010:	f00a fec4 	bl	800bd9c <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800101a:	f000 fa0f 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101e:	2360      	movs	r3, #96	@ 0x60
 8001020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8001036:	f00a f87f 	bl	800b138 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001040:	f000 f9fc 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8001046:	f000 fcf9 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	@ 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000724 	.word	0x24000724
 8001058:	40000800 	.word	0x40000800

0800105c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001062:	4a24      	ldr	r2, [pc, #144]	@ (80010f4 <MX_UART7_Init+0x98>)
 8001064:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_UART7_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001088:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800108c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_UART7_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_UART7_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_UART7_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <MX_UART7_Init+0x94>)
 80010a8:	f00a ff14 	bl	800bed4 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80010b2:	f000 f9c3 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <MX_UART7_Init+0x94>)
 80010ba:	f00c f820 	bl	800d0fe <HAL_UARTEx_SetTxFifoThreshold>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80010c4:	f000 f9ba 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <MX_UART7_Init+0x94>)
 80010cc:	f00c f855 	bl	800d17a <HAL_UARTEx_SetRxFifoThreshold>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 80010d6:	f000 f9b1 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_UART7_Init+0x94>)
 80010dc:	f00b ffd6 	bl	800d08c <HAL_UARTEx_DisableFifoMode>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 80010e6:	f000 f9a9 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000770 	.word	0x24000770
 80010f4:	40007800 	.word	0x40007800

080010f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <MX_USART1_UART_Init+0x94>)
 8001100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001142:	f00a fec7 	bl	800bed4 <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f976 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001154:	f00b ffd3 	bl	800d0fe <HAL_UARTEx_SetTxFifoThreshold>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800115e:	f000 f96d 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001166:	f00c f808 	bl	800d17a <HAL_UARTEx_SetRxFifoThreshold>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001170:	f000 f964 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_USART1_UART_Init+0x90>)
 8001176:	f00b ff89 	bl	800d08c <HAL_UARTEx_DisableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001180:	f000 f95c 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	24000804 	.word	0x24000804
 800118c:	40011000 	.word	0x40011000

08001190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MX_DMA_Init+0x3c>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800119c:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <MX_DMA_Init+0x3c>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_DMA_Init+0x3c>)
 80011a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	200b      	movs	r0, #11
 80011ba:	f002 fdcc 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011be:	200b      	movs	r0, #11
 80011c0:	f002 fde3 	bl	8003d8a <HAL_NVIC_EnableIRQ>

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4b79      	ldr	r3, [pc, #484]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a77      	ldr	r2, [pc, #476]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	4a70      	ldr	r2, [pc, #448]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001214:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	4a68      	ldr	r2, [pc, #416]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 800122a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001232:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b62      	ldr	r3, [pc, #392]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	4a61      	ldr	r2, [pc, #388]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001250:	4b5e      	ldr	r3, [pc, #376]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a59      	ldr	r2, [pc, #356]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127c:	4b53      	ldr	r3, [pc, #332]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a52      	ldr	r2, [pc, #328]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <MX_GPIO_Init+0x1fc>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2110      	movs	r1, #16
 800129e:	484c      	ldr	r0, [pc, #304]	@ (80013d0 <MX_GPIO_Init+0x200>)
 80012a0:	f004 fdd0 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2104      	movs	r1, #4
 80012a8:	484a      	ldr	r0, [pc, #296]	@ (80013d4 <MX_GPIO_Init+0x204>)
 80012aa:	f004 fdcb 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210b      	movs	r1, #11
 80012b2:	4849      	ldr	r0, [pc, #292]	@ (80013d8 <MX_GPIO_Init+0x208>)
 80012b4:	f004 fdc6 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80012be:	4847      	ldr	r0, [pc, #284]	@ (80013dc <MX_GPIO_Init+0x20c>)
 80012c0:	f004 fdc0 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	4845      	ldr	r0, [pc, #276]	@ (80013e0 <MX_GPIO_Init+0x210>)
 80012ca:	f004 fdbb 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 80012ce:	2308      	movs	r3, #8
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	483b      	ldr	r0, [pc, #236]	@ (80013d0 <MX_GPIO_Init+0x200>)
 80012e2:	f004 fc07 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80012e6:	2310      	movs	r3, #16
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4834      	ldr	r0, [pc, #208]	@ (80013d0 <MX_GPIO_Init+0x200>)
 80012fe:	f004 fbf9 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 8001302:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	482f      	ldr	r0, [pc, #188]	@ (80013d4 <MX_GPIO_Init+0x204>)
 8001318:	f004 fbec 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800131c:	2304      	movs	r3, #4
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4828      	ldr	r0, [pc, #160]	@ (80013d4 <MX_GPIO_Init+0x204>)
 8001334:	f004 fbde 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001338:	230b      	movs	r3, #11
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4822      	ldr	r0, [pc, #136]	@ (80013d8 <MX_GPIO_Init+0x208>)
 8001350:	f004 fbd0 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001354:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481b      	ldr	r0, [pc, #108]	@ (80013d8 <MX_GPIO_Init+0x208>)
 800136a:	f004 fbc3 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 800136e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4815      	ldr	r0, [pc, #84]	@ (80013dc <MX_GPIO_Init+0x20c>)
 8001388:	f004 fbb4 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 800138c:	f240 3306 	movw	r3, #774	@ 0x306
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <MX_GPIO_Init+0x210>)
 80013a2:	f004 fba7 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <MX_GPIO_Init+0x210>)
 80013be:	f004 fb99 	bl	8005af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58021000 	.word	0x58021000
 80013d4:	58020800 	.word	0x58020800
 80013d8:	58020000 	.word	0x58020000
 80013dc:	58020400 	.word	0x58020400
 80013e0:	58020c00 	.word	0x58020c00

080013e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013f6:	f002 fce3 	bl	8003dc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013fe:	2300      	movs	r3, #0
 8001400:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001406:	231f      	movs	r3, #31
 8001408:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800140a:	2387      	movs	r3, #135	@ 0x87
 800140c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800140e:	2300      	movs	r3, #0
 8001410:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001412:	2300      	movs	r3, #0
 8001414:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001416:	2301      	movs	r3, #1
 8001418:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001426:	463b      	mov	r3, r7
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fd01 	bl	8003e30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800142e:	2004      	movs	r0, #4
 8001430:	f002 fcde 	bl	8003df0 <HAL_MPU_Enable>

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <Error_Handler+0x8>

08001448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_MspInit+0x30>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001454:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x30>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x30>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	58024400 	.word	0x58024400

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a39      	ldr	r2, [pc, #228]	@ (8001580 <HAL_ADC_MspInit+0x104>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d133      	bne.n	8001506 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800149e:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a37      	ldr	r2, [pc, #220]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 80014a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014a8:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10e      	bne.n	80014ce <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014b0:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b6:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014ec:	2330      	movs	r3, #48	@ 0x30
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4823      	ldr	r0, [pc, #140]	@ (800158c <HAL_ADC_MspInit+0x110>)
 8001500:	f004 faf8 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001504:	e037      	b.n	8001576 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_ADC_MspInit+0x114>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d132      	bne.n	8001576 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 8001518:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_ADC_MspInit+0x108>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10e      	bne.n	8001540 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 8001524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 8001534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001546:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_ADC_MspInit+0x10c>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23c0      	movs	r3, #192	@ 0xc0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4808      	ldr	r0, [pc, #32]	@ (8001594 <HAL_ADC_MspInit+0x118>)
 8001572:	f004 fabf 	bl	8005af4 <HAL_GPIO_Init>
}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	@ 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000
 8001584:	24001884 	.word	0x24001884
 8001588:	58024400 	.word	0x58024400
 800158c:	58020800 	.word	0x58020800
 8001590:	40022100 	.word	0x40022100
 8001594:	58020000 	.word	0x58020000

08001598 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a30      	ldr	r2, [pc, #192]	@ (8001678 <HAL_DAC_MspInit+0xe0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d159      	bne.n	800166e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c0:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	4a27      	ldr	r2, [pc, #156]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_DAC_MspInit+0xe4>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f6:	2310      	movs	r3, #16
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	481d      	ldr	r0, [pc, #116]	@ (8001680 <HAL_DAC_MspInit+0xe8>)
 800160a:	f004 fa73 	bl	8005af4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001610:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <HAL_DAC_MspInit+0xf0>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001616:	2243      	movs	r2, #67	@ 0x43
 8001618:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 800161c:	2240      	movs	r2, #64	@ 0x40
 800161e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800162c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001630:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001634:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001638:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001644:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001652:	480c      	ldr	r0, [pc, #48]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001654:	f002 fd90 	bl	8004178 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800165e:	f7ff feed 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_DAC_MspInit+0xec>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40007400 	.word	0x40007400
 800167c:	58024400 	.word	0x58024400
 8001680:	58020000 	.word	0x58020000
 8001684:	240003dc 	.word	0x240003dc
 8001688:	40020010 	.word	0x40020010

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0b8      	sub	sp, #224	@ 0xe0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	22b8      	movs	r2, #184	@ 0xb8
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f010 fbcc 	bl	8011e4a <memset>
  if(hi2c->Instance==I2C2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a27      	ldr	r2, [pc, #156]	@ (8001754 <HAL_I2C_MspInit+0xc8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d146      	bne.n	800174a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016bc:	f04f 0208 	mov.w	r2, #8
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 ff52 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016de:	f7ff fead 	bl	800143c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001700:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001704:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800171a:	2304      	movs	r3, #4
 800171c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	@ (800175c <HAL_I2C_MspInit+0xd0>)
 8001728:	f004 f9e4 	bl	8005af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 800172e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 8001734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001738:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_I2C_MspInit+0xcc>)
 800173e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800174a:	bf00      	nop
 800174c:	37e0      	adds	r7, #224	@ 0xe0
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40005800 	.word	0x40005800
 8001758:	58024400 	.word	0x58024400
 800175c:	58020400 	.word	0x58020400

08001760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0bc      	sub	sp, #240	@ 0xf0
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	22b8      	movs	r2, #184	@ 0xb8
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f010 fb62 	bl	8011e4a <memset>
  if(hspi->Instance==SPI2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <HAL_SPI_MspInit+0x1f4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d146      	bne.n	800181e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001790:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800179c:	2300      	movs	r3, #0
 800179e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 fee9 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017b0:	f7ff fe44 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b4:	4b68      	ldr	r3, [pc, #416]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ba:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c4:	4b64      	ldr	r3, [pc, #400]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b61      	ldr	r3, [pc, #388]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d8:	4a5f      	ldr	r2, [pc, #380]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 80017f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180a:	2305      	movs	r3, #5
 800180c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001814:	4619      	mov	r1, r3
 8001816:	4851      	ldr	r0, [pc, #324]	@ (800195c <HAL_SPI_MspInit+0x1fc>)
 8001818:	f004 f96c 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800181c:	e096      	b.n	800194c <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a4f      	ldr	r2, [pc, #316]	@ (8001960 <HAL_SPI_MspInit+0x200>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d146      	bne.n	80018b6 <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001828:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001834:	2300      	movs	r3, #0
 8001836:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fe9d 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001848:	f7ff fdf8 	bl	800143c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800184c:	4b42      	ldr	r3, [pc, #264]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001852:	4a41      	ldr	r2, [pc, #260]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 8001854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001858:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800185c:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001870:	4a39      	ldr	r2, [pc, #228]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001888:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800188c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018a2:	2306      	movs	r3, #6
 80018a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018ac:	4619      	mov	r1, r3
 80018ae:	482d      	ldr	r0, [pc, #180]	@ (8001964 <HAL_SPI_MspInit+0x204>)
 80018b0:	f004 f920 	bl	8005af4 <HAL_GPIO_Init>
}
 80018b4:	e04a      	b.n	800194c <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <HAL_SPI_MspInit+0x208>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d145      	bne.n	800194c <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80018c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	4618      	mov	r0, r3
 80018d8:	f006 fe50 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_SPI_MspInit+0x186>
      Error_Handler();
 80018e2:	f7ff fdab 	bl	800143c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80018e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80018ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 80018f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190a:	4a13      	ldr	r2, [pc, #76]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <HAL_SPI_MspInit+0x1f8>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001922:	2364      	movs	r3, #100	@ 0x64
 8001924:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800193a:	2305      	movs	r3, #5
 800193c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001940:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001944:	4619      	mov	r1, r3
 8001946:	4809      	ldr	r0, [pc, #36]	@ (800196c <HAL_SPI_MspInit+0x20c>)
 8001948:	f004 f8d4 	bl	8005af4 <HAL_GPIO_Init>
}
 800194c:	bf00      	nop
 800194e:	37f0      	adds	r7, #240	@ 0xf0
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40003800 	.word	0x40003800
 8001958:	58024400 	.word	0x58024400
 800195c:	58020400 	.word	0x58020400
 8001960:	40003c00 	.word	0x40003c00
 8001964:	58020800 	.word	0x58020800
 8001968:	40013400 	.word	0x40013400
 800196c:	58021000 	.word	0x58021000

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <HAL_TIM_Base_MspInit+0xbc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10f      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 8001984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001988:	4a29      	ldr	r2, [pc, #164]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001992:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 8001994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019a0:	e03d      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019aa:	d10f      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
}
 80019ca:	e028      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_TIM_Base_MspInit+0xc4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10f      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	e013      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_TIM_Base_MspInit+0xc8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d10e      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 8001a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a10:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc0>)
 8001a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	58024400 	.word	0x58024400
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40000800 	.word	0x40000800

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <HAL_TIM_MspPostInit+0xb8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d120      	bne.n	8001aa0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	4a24      	ldr	r2, [pc, #144]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001a7c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4818      	ldr	r0, [pc, #96]	@ (8001afc <HAL_TIM_MspPostInit+0xc0>)
 8001a9a:	f004 f82b 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a9e:	e024      	b.n	8001aea <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_TIM_MspPostInit+0xc4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11f      	bne.n	8001aea <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_TIM_MspPostInit+0xbc>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ada:	2302      	movs	r3, #2
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <HAL_TIM_MspPostInit+0xc8>)
 8001ae6:	f004 f805 	bl	8005af4 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40000400 	.word	0x40000400
 8001af8:	58024400 	.word	0x58024400
 8001afc:	58020800 	.word	0x58020800
 8001b00:	40000800 	.word	0x40000800
 8001b04:	58020c00 	.word	0x58020c00

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	22b8      	movs	r2, #184	@ 0xb8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f010 f98e 	bl	8011e4a <memset>
  if(huart->Instance==UART7)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a4d      	ldr	r2, [pc, #308]	@ (8001c68 <HAL_UART_MspInit+0x160>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d147      	bne.n	8001bc8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001b38:	f04f 0202 	mov.w	r2, #2
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f006 fd14 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff fc6f 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b5e:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b64:	4a41      	ldr	r2, [pc, #260]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b82:	4a3a      	ldr	r2, [pc, #232]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8c:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b9a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	482b      	ldr	r0, [pc, #172]	@ (8001c70 <HAL_UART_MspInit+0x168>)
 8001bc2:	f003 ff97 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bc6:	e04a      	b.n	8001c5e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <HAL_UART_MspInit+0x16c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d145      	bne.n	8001c5e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd2:	f04f 0201 	mov.w	r2, #1
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 fcc7 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001bf4:	f7ff fc22 	bl	800143c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001c00:	f043 0310 	orr.w	r3, r3, #16
 8001c04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1c:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_UART_MspInit+0x164>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <HAL_UART_MspInit+0x170>)
 8001c5a:	f003 ff4b 	bl	8005af4 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	37e8      	adds	r7, #232	@ 0xe8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40007800 	.word	0x40007800
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58021000 	.word	0x58021000
 8001c74:	40011000 	.word	0x40011000
 8001c78:	58020400 	.word	0x58020400

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <NMI_Handler+0x4>

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <MemManage_Handler+0x4>

08001c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd2:	f000 fbad 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <DMA1_Stream0_IRQHandler+0x10>)
 8001ce2:	f002 fda1 	bl	8004828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	240003dc 	.word	0x240003dc

08001cf0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <OTG_HS_IRQHandler+0x10>)
 8001cf6:	f004 fb33 	bl	8006360 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24002db4 	.word	0x24002db4

08001d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_kill>:

int _kill(int pid, int sig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d1e:	f010 f8e7 	bl	8011ef0 <__errno>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2216      	movs	r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_exit>:

void _exit (int status)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffe7 	bl	8001d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d46:	bf00      	nop
 8001d48:	e7fd      	b.n	8001d46 <_exit+0x12>

08001d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00a      	b.n	8001d72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5c:	f3af 8000 	nop.w
 8001d60:	4601      	mov	r1, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf0      	blt.n	8001d5c <_read+0x12>
  }

  return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e009      	b.n	8001daa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf1      	blt.n	8001d96 <_write+0x12>
  }
  return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_close>:

int _close(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de4:	605a      	str	r2, [r3, #4]
  return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f010 f84c 	bl	8011ef0 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	24050000 	.word	0x24050000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	24001888 	.word	0x24001888
 8001e8c:	24003608 	.word	0x24003608

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <SystemInit+0xd0>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a31      	ldr	r2, [pc, #196]	@ (8001f60 <SystemInit+0xd0>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <SystemInit+0xd4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d807      	bhi.n	8001ec0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <SystemInit+0xd4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 030f 	bic.w	r3, r3, #15
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <SystemInit+0xd4>)
 8001eba:	f043 0307 	orr.w	r3, r3, #7
 8001ebe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <SystemInit+0xd8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <SystemInit+0xd8>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <SystemInit+0xd8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ed2:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <SystemInit+0xd8>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4924      	ldr	r1, [pc, #144]	@ (8001f68 <SystemInit+0xd8>)
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <SystemInit+0xdc>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ede:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <SystemInit+0xd4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <SystemInit+0xd4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 030f 	bic.w	r3, r3, #15
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <SystemInit+0xd4>)
 8001ef4:	f043 0307 	orr.w	r3, r3, #7
 8001ef8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <SystemInit+0xd8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <SystemInit+0xd8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <SystemInit+0xd8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <SystemInit+0xd8>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <SystemInit+0xe0>)
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <SystemInit+0xd8>)
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <SystemInit+0xe4>)
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <SystemInit+0xd8>)
 8001f1a:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <SystemInit+0xe8>)
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <SystemInit+0xd8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <SystemInit+0xd8>)
 8001f26:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <SystemInit+0xe8>)
 8001f28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <SystemInit+0xd8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <SystemInit+0xd8>)
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <SystemInit+0xe8>)
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <SystemInit+0xd8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <SystemInit+0xd8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <SystemInit+0xd8>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <SystemInit+0xd8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <SystemInit+0xec>)
 8001f50:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	52002000 	.word	0x52002000
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f70:	02020200 	.word	0x02020200
 8001f74:	01ff0000 	.word	0x01ff0000
 8001f78:	01010280 	.word	0x01010280
 8001f7c:	52004000 	.word	0x52004000

08001f80 <VibeCheck_Init>:


#include "vibecheck.h"

void VibeCheck_Init(VibeCheck* vc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	VibeCheckUSB_Init(&vc->usb);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f832 	bl	8001ff4 <VibeCheckUSB_Init>
	vc->time = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

	VibeCheckUSB_Update(&vc->usb);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f846 	bl	800203c <VibeCheckUSB_Update>

	if (HAL_GetTick() - vc->time > 100)
 8001fb0:	f000 fa52 	bl	8002458 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d913      	bls.n	8001fea <VibeCheck_Loop+0x4a>
	{
		VibeCheckUSB_AddData(&vc->usb, 1, vc->time, 1.0f, 2.0f, 3.0f);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	@ 0xfe8
 8001fca:	eeb0 1a08 	vmov.f32	s2, #8	@ 0x40400000  3.0
 8001fce:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001fd2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f000 f857 	bl	800208c <VibeCheckUSB_AddData>
		vc->time = HAL_GetTick();
 8001fde:	f000 fa3b 	bl	8002458 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2fe8 	str.w	r2, [r3, #4072]	@ 0xfe8
	}
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <VibeCheckUSB_Init>:

uint8_t usb_rx_buf[64];  /* see USB_DEVICE -> App -> usbd_cdc_if.c for implementation */
uint8_t usb_rx_ready = 0;  /* flag when USB data has been received */

void VibeCheckUSB_Init(VibeCheckUSB* usb)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	usb->rx_buf = usb_rx_buf;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <VibeCheckUSB_Init+0x40>)
 8002000:	601a      	str	r2, [r3, #0]
	usb->rx_ready = &usb_rx_ready;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <VibeCheckUSB_Init+0x44>)
 8002006:	605a      	str	r2, [r3, #4]

	usb->data_buf_head = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
	usb->data_buf_tail = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
	usb->data_buf_count = 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

	usb->data_str_ind = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	2400188c 	.word	0x2400188c
 8002038:	240018cc 	.word	0x240018cc

0800203c <VibeCheckUSB_Update>:

void VibeCheckUSB_Update(VibeCheckUSB* usb)  /* single function to call in main loop to update the USB class */
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

	/* process any commands that we have received from the host */
	VibeCheckUSB_ProcessCommand(usb);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f807 	bl	8002058 <VibeCheckUSB_ProcessCommand>

	/* encode any data in the data buffer, send to the host if the data packet is full */
	VibeCheckUSB_ProcessData(usb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f87e 	bl	800214c <VibeCheckUSB_ProcessData>

}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <VibeCheckUSB_ProcessCommand>:

uint32_t VibeCheckUSB_ProcessCommand(VibeCheckUSB* usb)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	/* return true if we have successfully processed a command */
	if (*usb->rx_ready)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <VibeCheckUSB_ProcessCommand+0x2a>
	{
		/* TODO: process the command */

		/* echo for testing */
		VibeCheckUSB_SendBlocking(usb->rx_buf, 64);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2140      	movs	r1, #64	@ 0x40
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f92d 	bl	80022d0 <VibeCheckUSB_SendBlocking>

		*usb->rx_ready = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
		return 1;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <VibeCheckUSB_ProcessCommand+0x2c>
	}

	return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <VibeCheckUSB_AddData>:

void VibeCheckUSB_AddData(VibeCheckUSB* usb, uint8_t id, uint32_t time, float x, float y, float z)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6178      	str	r0, [r7, #20]
 8002094:	460b      	mov	r3, r1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	ed87 0a02 	vstr	s0, [r7, #8]
 800209c:	edc7 0a01 	vstr	s1, [r7, #4]
 80020a0:	ed87 1a00 	vstr	s2, [r7]
 80020a4:	74fb      	strb	r3, [r7, #19]
	/* all of the accelerometer/gyro data has 3 components and we should include an ID for which chip generated it */
	/* potentially we could also add time stamps for when the samples were taken */

	/* in general we would like a circular buffer for this to keep the raw data. Then as CPU is free convert the data to strings */

	usb->data_buf[usb->data_buf_head].id = id;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3308      	adds	r3, #8
 80020ba:	7cfa      	ldrb	r2, [r7, #19]
 80020bc:	701a      	strb	r2, [r3, #0]
	usb->data_buf[usb->data_buf_head].time = time;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	330c      	adds	r3, #12
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]
	usb->data_buf[usb->data_buf_head].x = x;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3310      	adds	r3, #16
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	601a      	str	r2, [r3, #0]
	usb->data_buf[usb->data_buf_head].y = y;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3314      	adds	r3, #20
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
	usb->data_buf[usb->data_buf_head].z = z;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3318      	adds	r3, #24
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	601a      	str	r2, [r3, #0]

	if (++usb->data_buf_head == VC_USB_DATA_BUF_LEN)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d103      	bne.n	800213e <VibeCheckUSB_AddData+0xb2>
		usb->data_buf_head = 0;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8

}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <VibeCheckUSB_ProcessData>:

void VibeCheckUSB_ProcessData(VibeCheckUSB* usb)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b08e      	sub	sp, #56	@ 0x38
 8002150:	af06      	add	r7, sp, #24
 8002152:	6078      	str	r0, [r7, #4]
	/* encode all of the elements in the data buffer and put them in the data string to send to the host */
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 8002154:	e04e      	b.n	80021f4 <VibeCheckUSB_ProcessData+0xa8>
	{
		VibeCheckUSBData data_to_encode = usb->data_buf[usb->data_buf_tail];
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	@ 0x7dc
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3308      	adds	r3, #8
 800216a:	f107 040c 	add.w	r4, r7, #12
 800216e:	461d      	mov	r5, r3
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	6023      	str	r3, [r4, #0]

		/* encode the data here and add it to the data string */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002184:	18d0      	adds	r0, r2, r3
				data_to_encode.id,
 8002186:	7b3b      	ldrb	r3, [r7, #12]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002188:	461a      	mov	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
				data_to_encode.time,
				data_to_encode.x,
 800218c:	edd7 7a05 	vldr	s15, [r7, #20]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				data_to_encode.y,
 8002194:	edd7 6a06 	vldr	s13, [r7, #24]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 8002198:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				data_to_encode.z);
 800219c:	edd7 5a07 	vldr	s11, [r7, #28]
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, "%u,%lu,%2.3f,%2.3f,%2.3f,",
 80021a0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80021a4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80021a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80021ac:	ed8d 7b00 	vstr	d7, [sp]
 80021b0:	4944      	ldr	r1, [pc, #272]	@ (80022c4 <VibeCheckUSB_ProcessData+0x178>)
 80021b2:	f00f fde7 	bl	8011d84 <siprintf>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80021be:	441a      	add	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4

		usb->data_buf_count++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
		if (++usb->data_buf_tail == VC_USB_DATA_BUF_LEN)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 80021e8:	2b64      	cmp	r3, #100	@ 0x64
 80021ea:	d103      	bne.n	80021f4 <VibeCheckUSB_ProcessData+0xa8>
			usb->data_buf_tail = 0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
	while (usb->data_buf_head != usb->data_buf_tail && usb->data_buf_count < VC_USB_DATA_BUF_LEN)  /* TODO: this breaks if the data buffer is full so don't let that happen */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 8002200:	429a      	cmp	r2, r3
 8002202:	d004      	beq.n	800220e <VibeCheckUSB_ProcessData+0xc2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 800220a:	2b63      	cmp	r3, #99	@ 0x63
 800220c:	d9a3      	bls.n	8002156 <VibeCheckUSB_ProcessData+0xa>
	}

	if (usb->data_buf_count == VC_USB_DATA_PER_PACKET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 8002214:	2b02      	cmp	r3, #2
 8002216:	d150      	bne.n	80022ba <VibeCheckUSB_ProcessData+0x16e>
	{
		/* we have a full data packet so send it */

		/* add a newline */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind - 1, "\r\n");
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002224:	3b01      	subs	r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	4927      	ldr	r1, [pc, #156]	@ (80022c8 <VibeCheckUSB_ProcessData+0x17c>)
 800222a:	4618      	mov	r0, r3
 800222c:	f00f fdaa 	bl	8011d84 <siprintf>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4

		if (usb->data_str_ind < VC_USB_DATA_STR_LEN / 2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d20f      	bcs.n	800226c <VibeCheckUSB_ProcessData+0x120>
		{
			/* send the first half buffer and prepare to fill the second half */
			VibeCheckUSB_SendBlocking((uint8_t*)&usb->data_str[0], usb->data_str_ind);  /* !!! blocking until the transmission starts successfully !!! */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 f838 	bl	80022d0 <VibeCheckUSB_SendBlocking>
			usb->data_str_ind = VC_USB_DATA_STR_LEN / 2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002266:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
 800226a:	e00f      	b.n	800228c <VibeCheckUSB_ProcessData+0x140>
		}
		else
		{
			/* send the second half buffer and prepare to fill the first half */
			VibeCheckUSB_SendBlocking((uint8_t*)&usb->data_str[VC_USB_DATA_STR_LEN / 2], usb->data_str_ind - VC_USB_DATA_STR_LEN / 2);  /* !!! blocking until the transmission starts successfully !!! */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f603 32e4 	addw	r2, r3, #3044	@ 0xbe4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8002278:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 f826 	bl	80022d0 <VibeCheckUSB_SendBlocking>
			usb->data_str_ind = 0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
		}

		/* prepare the next data packet */
		usb->data_buf_count = 0;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

		/* write the header */
		usb->data_str_ind += sprintf(usb->data_str + usb->data_str_ind, VC_USB_DATA_HEADER);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f203 72e4 	addw	r2, r3, #2020	@ 0x7e4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80022a0:	4413      	add	r3, r2
 80022a2:	490a      	ldr	r1, [pc, #40]	@ (80022cc <VibeCheckUSB_ProcessData+0x180>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00f fd6d 	bl	8011d84 <siprintf>
 80022aa:	4602      	mov	r2, r0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8c3 2fe4 	str.w	r2, [r3, #4068]	@ 0xfe4
	}
}
 80022ba:	bf00      	nop
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08013f18 	.word	0x08013f18
 80022c8:	08013f34 	.word	0x08013f34
 80022cc:	08013f38 	.word	0x08013f38

080022d0 <VibeCheckUSB_SendBlocking>:
	return CDC_Transmit_HS(data, len) == USBD_OK;
}

/* TODO: lifetime issue with the data pointer */
void VibeCheckUSB_SendBlocking(uint8_t* data, uint32_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	/* returns true if transmission started successfully */
	while(CDC_Transmit_HS(data, len) != USBD_OK);
 80022da:	bf00      	nop
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f00e fc00 	bl	8010ae8 <CDC_Transmit_HS>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f6      	bne.n	80022dc <VibeCheckUSB_SendBlocking+0xc>
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022fc:	f7ff fdc8 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	@ (8002338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	@ (8002344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002326:	f00f fde9 	bl	8011efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7fe f9c1 	bl	80006b0 <main>
  bx  lr
 800232e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002338:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 800233c:	08014338 	.word	0x08014338
  ldr r2, =_sbss
 8002340:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8002344:	24003604 	.word	0x24003604

08002348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC3_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002352:	2003      	movs	r0, #3
 8002354:	f001 fcf4 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002358:	f005 ff3a 	bl	80081d0 <HAL_RCC_GetSysClockFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_Init+0x68>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4913      	ldr	r1, [pc, #76]	@ (80023b8 <HAL_Init+0x6c>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_Init+0x68>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HAL_Init+0x6c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a0b      	ldr	r2, [pc, #44]	@ (80023bc <HAL_Init+0x70>)
 800238e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002390:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_Init+0x74>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002396:	200f      	movs	r0, #15
 8002398:	f000 f814 	bl	80023c4 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e002      	b.n	80023ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023a6:	f7ff f84f 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	58024400 	.word	0x58024400
 80023b8:	08013f74 	.word	0x08013f74
 80023bc:	24000004 	.word	0x24000004
 80023c0:	24000000 	.word	0x24000000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_InitTick+0x60>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <HAL_InitTick+0x64>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_InitTick+0x60>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fcd9 	bl	8003da6 <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f001 fca3 	bl	8003d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	@ (800242c <HAL_InitTick+0x68>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2400000c 	.word	0x2400000c
 8002428:	24000000 	.word	0x24000000
 800242c:	24000008 	.word	0x24000008

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2400000c 	.word	0x2400000c
 8002454:	240018d0 	.word	0x240018d0

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	240018d0 	.word	0x240018d0

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2400000c 	.word	0x2400000c

080024b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3360      	adds	r3, #96	@ 0x60
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a10      	ldr	r2, [pc, #64]	@ (8002580 <LL_ADC_SetOffset+0x60>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10b      	bne.n	800255c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800255a:	e00b      	b.n	8002574 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	431a      	orrs	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	58026000 	.word	0x58026000

08002584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3360      	adds	r3, #96	@ 0x60
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	611a      	str	r2, [r3, #16]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3360      	adds	r3, #96	@ 0x60
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]
  }
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	58026000 	.word	0x58026000

08002628 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <LL_ADC_SetOffsetSaturation+0x40>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d10e      	bne.n	800265a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3360      	adds	r3, #96	@ 0x60
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	58026000 	.word	0x58026000

0800266c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a0c      	ldr	r2, [pc, #48]	@ (80026ac <LL_ADC_SetOffsetSign+0x40>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10e      	bne.n	800269e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3360      	adds	r3, #96	@ 0x60
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	58026000 	.word	0x58026000

080026b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3360      	adds	r3, #96	@ 0x60
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <LL_ADC_SetOffsetState+0x50>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d108      	bne.n	80026e4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80026e2:	e007      	b.n	80026f4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	601a      	str	r2, [r3, #0]
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	58026000 	.word	0x58026000

08002704 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3330      	adds	r3, #48	@ 0x30
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	4413      	add	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	211f      	movs	r1, #31
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	f003 011f 	and.w	r1, r3, #31
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	431a      	orrs	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3314      	adds	r3, #20
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0e5b      	lsrs	r3, r3, #25
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0d1b      	lsrs	r3, r3, #20
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	2107      	movs	r1, #7
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0d1b      	lsrs	r3, r3, #20
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <LL_ADC_SetChannelSingleDiff+0x78>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d115      	bne.n	80027f4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0318 	and.w	r3, r3, #24
 80027de:	4914      	ldr	r1, [pc, #80]	@ (8002830 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80027e0:	40d9      	lsrs	r1, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	400b      	ands	r3, r1
 80027e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80027f2:	e014      	b.n	800281e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0318 	and.w	r3, r3, #24
 800280a:	4909      	ldr	r1, [pc, #36]	@ (8002830 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800280c:	40d9      	lsrs	r1, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	400b      	ands	r3, r1
 8002812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	58026000 	.word	0x58026000
 8002830:	000fffff 	.word	0x000fffff

08002834 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6093      	str	r3, [r2, #8]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	5fffffc0 	.word	0x5fffffc0

08002858 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800286c:	d101      	bne.n	8002872 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800288e:	4013      	ands	r3, r2
 8002890:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	6fffffc0 	.word	0x6fffffc0

080028a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <LL_ADC_IsEnabled+0x18>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_ADC_IsEnabled+0x1a>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b04      	cmp	r3, #4
 8002908:	d101      	bne.n	800290e <LL_ADC_REG_IsConversionOngoing+0x18>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b08      	cmp	r3, #8
 800292e:	d101      	bne.n	8002934 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1ee      	b.n	8002d3c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fd85 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff67 	bl	8002858 <LL_ADC_IsDeepPowerDownEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff4d 	bl	8002834 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff82 	bl	80028a8 <LL_ADC_IsInternalRegulatorEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff66 	bl	8002880 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b4:	4b8e      	ldr	r3, [pc, #568]	@ (8002bf0 <HAL_ADC_Init+0x2ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	4a8e      	ldr	r2, [pc, #568]	@ (8002bf4 <HAL_ADC_Init+0x2b0>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff65 	bl	80028a8 <LL_ADC_IsInternalRegulatorEnabled>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff76 	bl	80028f6 <LL_ADC_REG_IsConversionOngoing>
 8002a0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 8188 	bne.w	8002d2a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 8184 	bne.w	8002d2a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff4a 	bl	80028d0 <LL_ADC_IsEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d136      	bne.n	8002ab0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6c      	ldr	r2, [pc, #432]	@ (8002bf8 <HAL_ADC_Init+0x2b4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_ADC_Init+0x112>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_ADC_Init+0x2b8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10e      	bne.n	8002a74 <HAL_ADC_Init+0x130>
 8002a56:	4868      	ldr	r0, [pc, #416]	@ (8002bf8 <HAL_ADC_Init+0x2b4>)
 8002a58:	f7ff ff3a 	bl	80028d0 <LL_ADC_IsEnabled>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	4867      	ldr	r0, [pc, #412]	@ (8002bfc <HAL_ADC_Init+0x2b8>)
 8002a60:	f7ff ff36 	bl	80028d0 <LL_ADC_IsEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4323      	orrs	r3, r4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e008      	b.n	8002a86 <HAL_ADC_Init+0x142>
 8002a74:	4862      	ldr	r0, [pc, #392]	@ (8002c00 <HAL_ADC_Init+0x2bc>)
 8002a76:	f7ff ff2b 	bl	80028d0 <LL_ADC_IsEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf8 <HAL_ADC_Init+0x2b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_ADC_Init+0x15a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a58      	ldr	r2, [pc, #352]	@ (8002bfc <HAL_ADC_Init+0x2b8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Init+0x15e>
 8002a9e:	4a59      	ldr	r2, [pc, #356]	@ (8002c04 <HAL_ADC_Init+0x2c0>)
 8002aa0:	e000      	b.n	8002aa4 <HAL_ADC_Init+0x160>
 8002aa2:	4a59      	ldr	r2, [pc, #356]	@ (8002c08 <HAL_ADC_Init+0x2c4>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f7ff fd04 	bl	80024b8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_ADC_Init+0x2bc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d129      	bne.n	8002b0e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7e5b      	ldrb	r3, [r3, #25]
 8002abe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ac4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002aca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d013      	beq.n	8002afc <HAL_ADC_Init+0x1b8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d00d      	beq.n	8002af8 <HAL_ADC_Init+0x1b4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b1c      	cmp	r3, #28
 8002ae2:	d007      	beq.n	8002af4 <HAL_ADC_Init+0x1b0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b18      	cmp	r3, #24
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_Init+0x1ac>
 8002aec:	2318      	movs	r3, #24
 8002aee:	e006      	b.n	8002afe <HAL_ADC_Init+0x1ba>
 8002af0:	2300      	movs	r3, #0
 8002af2:	e004      	b.n	8002afe <HAL_ADC_Init+0x1ba>
 8002af4:	2310      	movs	r3, #16
 8002af6:	e002      	b.n	8002afe <HAL_ADC_Init+0x1ba>
 8002af8:	2308      	movs	r3, #8
 8002afa:	e000      	b.n	8002afe <HAL_ADC_Init+0x1ba>
 8002afc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002afe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e00e      	b.n	8002b2c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e5b      	ldrb	r3, [r3, #25]
 8002b12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	045b      	lsls	r3, r3, #17
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_ADC_Init+0x2bc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d115      	bne.n	8002b96 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b26      	ldr	r3, [pc, #152]	@ (8002c0c <HAL_ADC_Init+0x2c8>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	611a      	str	r2, [r3, #16]
 8002b94:	e009      	b.n	8002baa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_ADC_Init+0x2cc>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fea1 	bl	80028f6 <LL_ADC_REG_IsConversionOngoing>
 8002bb4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff feae 	bl	800291c <LL_ADC_INJ_IsConversionOngoing>
 8002bc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 808e 	bne.w	8002ce6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 808a 	bne.w	8002ce6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <HAL_ADC_Init+0x2bc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d11b      	bne.n	8002c14 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7e1b      	ldrb	r3, [r3, #24]
 8002be0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002be8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e018      	b.n	8002c22 <HAL_ADC_Init+0x2de>
 8002bf0:	24000000 	.word	0x24000000
 8002bf4:	053e2d63 	.word	0x053e2d63
 8002bf8:	40022000 	.word	0x40022000
 8002bfc:	40022100 	.word	0x40022100
 8002c00:	58026000 	.word	0x58026000
 8002c04:	40022300 	.word	0x40022300
 8002c08:	58026300 	.word	0x58026300
 8002c0c:	fff04007 	.word	0xfff04007
 8002c10:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_ADC_Init+0x400>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	430b      	orrs	r3, r1
 8002c34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d137      	bne.n	8002cb0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <HAL_ADC_Init+0x404>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d116      	bne.n	8002c7e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <HAL_ADC_Init+0x408>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	e020      	b.n	8002cc0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <HAL_ADC_Init+0x40c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0411      	lsls	r1, r2, #16
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	e007      	b.n	8002cc0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1b      	ldr	r2, [pc, #108]	@ (8002d48 <HAL_ADC_Init+0x404>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d002      	beq.n	8002ce6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fd67 	bl	80037b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10c      	bne.n	8002d08 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	f023 010f 	bic.w	r1, r3, #15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	1e5a      	subs	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d06:	e007      	b.n	8002d18 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020f 	bic.w	r2, r2, #15
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d28:	e007      	b.n	8002d3a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3724      	adds	r7, #36	@ 0x24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	ffffbffc 	.word	0xffffbffc
 8002d48:	58026000 	.word	0x58026000
 8002d4c:	fc00f81f 	.word	0xfc00f81f
 8002d50:	fc00f81e 	.word	0xfc00f81e

08002d54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b0b9      	sub	sp, #228	@ 0xe4
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d6e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4aab      	ldr	r2, [pc, #684]	@ (8003024 <HAL_ADC_ConfigChannel+0x2d0>)
 8002d76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x34>
 8002d82:	2302      	movs	r3, #2
 8002d84:	f000 bcfe 	b.w	8003784 <HAL_ADC_ConfigChannel+0xa30>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fdae 	bl	80028f6 <LL_ADC_REG_IsConversionOngoing>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 84e2 	bne.w	8003766 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db38      	blt.n	8002e1c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a9e      	ldr	r2, [pc, #632]	@ (8003028 <HAL_ADC_ConfigChannel+0x2d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d033      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d108      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x7e>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2201      	movs	r2, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	e01d      	b.n	8002e0e <HAL_ADC_ConfigChannel+0xba>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2201      	movs	r2, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	69d1      	ldr	r1, [r2, #28]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff fc6b 	bl	8002704 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fd5f 	bl	80028f6 <LL_ADC_REG_IsConversionOngoing>
 8002e38:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd6b 	bl	800291c <LL_ADC_INJ_IsConversionOngoing>
 8002e46:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 8270 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 826b 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f7ff fc76 	bl	800275c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6c      	ldr	r2, [pc, #432]	@ (8003028 <HAL_ADC_ConfigChannel+0x2d4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10d      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e94:	e032      	b.n	8002efc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e96:	4b65      	ldr	r3, [pc, #404]	@ (800302c <HAL_ADC_ConfigChannel+0x2d8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x168>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	e01d      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1a4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x18e>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	e00a      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x1a4>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d048      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6919      	ldr	r1, [r3, #16]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f14:	f7ff fb04 	bl	8002520 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d119      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f7ff fb9c 	bl	800266c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6919      	ldr	r1, [r3, #16]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1f8>
 8002f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x1fa>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7ff fb6a 	bl	8002628 <LL_ADC_SetOffsetSaturation>
 8002f54:	e1ee      	b.n	8003334 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x21a>
 8002f68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f6c:	e000      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x21c>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7ff fb37 	bl	80025e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7e1b      	ldrb	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x238>
 8002f86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x23a>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7ff fb0e 	bl	80025b0 <LL_ADC_SetDataRightShift>
 8002f94:	e1ce      	b.n	8003334 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a23      	ldr	r2, [pc, #140]	@ (8003028 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	f040 8181 	bne.w	80032a4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff faeb 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x27a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fae0 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	e01e      	b.n	800300c <HAL_ADC_ConfigChannel+0x2b8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fad5 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002fec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002ff4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e004      	b.n	800300a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x2dc>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	e01e      	b.n	8003062 <HAL_ADC_ConfigChannel+0x30e>
 8003024:	47ff0000 	.word	0x47ff0000
 8003028:	58026000 	.word	0x58026000
 800302c:	5c001000 	.word	0x5c001000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800304c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e004      	b.n	8003062 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	429a      	cmp	r2, r3
 8003064:	d106      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fb1e 	bl	80026b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa82 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x34c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fa77 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	f003 021f 	and.w	r2, r3, #31
 800309e:	e01e      	b.n	80030de <HAL_ADC_ConfigChannel+0x38a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fa6c 	bl	8002584 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80030be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80030c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e004      	b.n	80030dc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80030d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x3a2>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	e018      	b.n	8003128 <HAL_ADC_ConfigChannel+0x3d4>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800310a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800310e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e004      	b.n	8003128 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800311e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2200      	movs	r2, #0
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fabb 	bl	80026b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fa1f 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x412>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fa14 	bl	8002584 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	e01e      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x450>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fa09 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800318c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e004      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x468>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	e014      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x492>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80031ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80031d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e004      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d106      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2102      	movs	r1, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fa5c 	bl	80026b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2103      	movs	r1, #3
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f9c0 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003204:	4603      	mov	r3, r0
 8003206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x4d0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2103      	movs	r1, #3
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f9b5 	bl	8002584 <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	e017      	b.n	8003254 <HAL_ADC_ConfigChannel+0x500>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2103      	movs	r1, #3
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f9aa 	bl	8002584 <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800323c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800323e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800324a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_ConfigChannel+0x518>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	e011      	b.n	8003290 <HAL_ADC_ConfigChannel+0x53c>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800327a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800327e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	429a      	cmp	r2, r3
 8003292:	d14f      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	2103      	movs	r1, #3
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fa07 	bl	80026b0 <LL_ADC_SetOffsetState>
 80032a2:	e047      	b.n	8003334 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	069b      	lsls	r3, r3, #26
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800330e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003332:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fac9 	bl	80028d0 <LL_ADC_IsEnabled>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 8219 	bne.w	8003778 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f7ff fa2e 	bl	80027b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4aa1      	ldr	r2, [pc, #644]	@ (80035e4 <HAL_ADC_ConfigChannel+0x890>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 812e 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_ADC_ConfigChannel+0x638>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	3301      	adds	r3, #1
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b09      	cmp	r3, #9
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e019      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x66c>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800339e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80033a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	bf94      	ite	ls
 80033ba:	2301      	movls	r3, #1
 80033bc:	2300      	movhi	r3, #0
 80033be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d079      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x68c>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	069b      	lsls	r3, r3, #26
 80033da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033de:	e015      	b.n	800340c <HAL_ADC_ConfigChannel+0x6b8>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e003      	b.n	8003404 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80033fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3301      	adds	r3, #1
 8003406:	069b      	lsls	r3, r3, #26
 8003408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_ADC_ConfigChannel+0x6d8>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	e017      	b.n	800345c <HAL_ADC_ConfigChannel+0x708>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800343a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800343e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x72e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	051b      	lsls	r3, r3, #20
 8003480:	e018      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x760>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e003      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b4:	430b      	orrs	r3, r1
 80034b6:	e07e      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x780>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	069b      	lsls	r3, r3, #26
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d2:	e015      	b.n	8003500 <HAL_ADC_ConfigChannel+0x7ac>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	e003      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x7cc>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	e017      	b.n	8003550 <HAL_ADC_ConfigChannel+0x7fc>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	61bb      	str	r3, [r7, #24]
  return result;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_ADC_ConfigChannel+0x828>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	3b1e      	subs	r3, #30
 8003574:	051b      	lsls	r3, r3, #20
 8003576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800357a:	e01b      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x860>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	60fb      	str	r3, [r7, #12]
  return result;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e003      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	3b1e      	subs	r3, #30
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b4:	430b      	orrs	r3, r1
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff f8ce 	bl	800275c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f280 80d7 	bge.w	8003778 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a06      	ldr	r2, [pc, #24]	@ (80035e8 <HAL_ADC_ConfigChannel+0x894>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_ADC_ConfigChannel+0x88a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <HAL_ADC_ConfigChannel+0x898>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10a      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x8a0>
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <HAL_ADC_ConfigChannel+0x89c>)
 80035e0:	e009      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x8a2>
 80035e2:	bf00      	nop
 80035e4:	47ff0000 	.word	0x47ff0000
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40022100 	.word	0x40022100
 80035f0:	40022300 	.word	0x40022300
 80035f4:	4b65      	ldr	r3, [pc, #404]	@ (800378c <HAL_ADC_ConfigChannel+0xa38>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe ff84 	bl	8002504 <LL_ADC_GetCommonPathInternalCh>
 80035fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a62      	ldr	r2, [pc, #392]	@ (8003790 <HAL_ADC_ConfigChannel+0xa3c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_ADC_ConfigChannel+0x8c0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a61      	ldr	r2, [pc, #388]	@ (8003794 <HAL_ADC_ConfigChannel+0xa40>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10e      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x8de>
 8003614:	485e      	ldr	r0, [pc, #376]	@ (8003790 <HAL_ADC_ConfigChannel+0xa3c>)
 8003616:	f7ff f95b 	bl	80028d0 <LL_ADC_IsEnabled>
 800361a:	4604      	mov	r4, r0
 800361c:	485d      	ldr	r0, [pc, #372]	@ (8003794 <HAL_ADC_ConfigChannel+0xa40>)
 800361e:	f7ff f957 	bl	80028d0 <LL_ADC_IsEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	4323      	orrs	r3, r4
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e008      	b.n	8003644 <HAL_ADC_ConfigChannel+0x8f0>
 8003632:	4859      	ldr	r0, [pc, #356]	@ (8003798 <HAL_ADC_ConfigChannel+0xa44>)
 8003634:	f7ff f94c 	bl	80028d0 <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8084 	beq.w	8003752 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a53      	ldr	r2, [pc, #332]	@ (800379c <HAL_ADC_ConfigChannel+0xa48>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d132      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x966>
 8003654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d12c      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4c      	ldr	r2, [pc, #304]	@ (8003798 <HAL_ADC_ConfigChannel+0xa44>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f040 8086 	bne.w	8003778 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a47      	ldr	r2, [pc, #284]	@ (8003790 <HAL_ADC_ConfigChannel+0xa3c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x92c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a46      	ldr	r2, [pc, #280]	@ (8003794 <HAL_ADC_ConfigChannel+0xa40>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x930>
 8003680:	4a47      	ldr	r2, [pc, #284]	@ (80037a0 <HAL_ADC_ConfigChannel+0xa4c>)
 8003682:	e000      	b.n	8003686 <HAL_ADC_ConfigChannel+0x932>
 8003684:	4a41      	ldr	r2, [pc, #260]	@ (800378c <HAL_ADC_ConfigChannel+0xa38>)
 8003686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800368a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f7fe ff24 	bl	80024de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003696:	4b43      	ldr	r3, [pc, #268]	@ (80037a4 <HAL_ADC_ConfigChannel+0xa50>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_ADC_ConfigChannel+0xa54>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	3301      	adds	r3, #1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036aa:	e002      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b8:	e05e      	b.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <HAL_ADC_ConfigChannel+0xa58>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d120      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x9b2>
 80036c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11a      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a30      	ldr	r2, [pc, #192]	@ (8003798 <HAL_ADC_ConfigChannel+0xa44>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d14e      	bne.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <HAL_ADC_ConfigChannel+0xa3c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x99a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <HAL_ADC_ConfigChannel+0xa40>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x99e>
 80036ee:	4a2c      	ldr	r2, [pc, #176]	@ (80037a0 <HAL_ADC_ConfigChannel+0xa4c>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x9a0>
 80036f2:	4a26      	ldr	r2, [pc, #152]	@ (800378c <HAL_ADC_ConfigChannel+0xa38>)
 80036f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7fe feed 	bl	80024de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003704:	e038      	b.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a29      	ldr	r2, [pc, #164]	@ (80037b0 <HAL_ADC_ConfigChannel+0xa5c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d133      	bne.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
 8003710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d12d      	bne.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <HAL_ADC_ConfigChannel+0xa44>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d128      	bne.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a19      	ldr	r2, [pc, #100]	@ (8003790 <HAL_ADC_ConfigChannel+0xa3c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_ADC_ConfigChannel+0x9e6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <HAL_ADC_ConfigChannel+0xa40>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x9ea>
 800373a:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_ADC_ConfigChannel+0xa4c>)
 800373c:	e000      	b.n	8003740 <HAL_ADC_ConfigChannel+0x9ec>
 800373e:	4a13      	ldr	r2, [pc, #76]	@ (800378c <HAL_ADC_ConfigChannel+0xa38>)
 8003740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7fe fec7 	bl	80024de <LL_ADC_SetCommonPathInternalCh>
 8003750:	e012      	b.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003764:	e008      	b.n	8003778 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003780:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003784:	4618      	mov	r0, r3
 8003786:	37e4      	adds	r7, #228	@ 0xe4
 8003788:	46bd      	mov	sp, r7
 800378a:	bd90      	pop	{r4, r7, pc}
 800378c:	58026300 	.word	0x58026300
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	58026000 	.word	0x58026000
 800379c:	c7520000 	.word	0xc7520000
 80037a0:	40022300 	.word	0x40022300
 80037a4:	24000000 	.word	0x24000000
 80037a8:	053e2d63 	.word	0x053e2d63
 80037ac:	c3210000 	.word	0xc3210000
 80037b0:	cb840000 	.word	0xcb840000

080037b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6c      	ldr	r2, [pc, #432]	@ (8003974 <ADC_ConfigureBoostMode+0x1c0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <ADC_ConfigureBoostMode+0x1c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003978 <ADC_ConfigureBoostMode+0x1c4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d109      	bne.n	80037e4 <ADC_ConfigureBoostMode+0x30>
 80037d0:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <ADC_ConfigureBoostMode+0x1c8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e008      	b.n	80037f6 <ADC_ConfigureBoostMode+0x42>
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <ADC_ConfigureBoostMode+0x1cc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01c      	beq.n	8003834 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037fa:	f004 fe63 	bl	80084c4 <HAL_RCC_GetHCLKFreq>
 80037fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003808:	d010      	beq.n	800382c <ADC_ConfigureBoostMode+0x78>
 800380a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800380e:	d873      	bhi.n	80038f8 <ADC_ConfigureBoostMode+0x144>
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d002      	beq.n	800381c <ADC_ConfigureBoostMode+0x68>
 8003816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800381a:	d16d      	bne.n	80038f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	60fb      	str	r3, [r7, #12]
        break;
 800382a:	e068      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	60fb      	str	r3, [r7, #12]
        break;
 8003832:	e064      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003834:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	f006 f83e 	bl	80098bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003840:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800384a:	d051      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x13c>
 800384c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003850:	d854      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 8003852:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003856:	d047      	beq.n	80038e8 <ADC_ConfigureBoostMode+0x134>
 8003858:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800385c:	d84e      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 800385e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003862:	d03d      	beq.n	80038e0 <ADC_ConfigureBoostMode+0x12c>
 8003864:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003868:	d848      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386e:	d033      	beq.n	80038d8 <ADC_ConfigureBoostMode+0x124>
 8003870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003874:	d842      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 8003876:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800387a:	d029      	beq.n	80038d0 <ADC_ConfigureBoostMode+0x11c>
 800387c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003880:	d83c      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 8003882:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003886:	d01a      	beq.n	80038be <ADC_ConfigureBoostMode+0x10a>
 8003888:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800388c:	d836      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 800388e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003892:	d014      	beq.n	80038be <ADC_ConfigureBoostMode+0x10a>
 8003894:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003898:	d830      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 800389a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800389e:	d00e      	beq.n	80038be <ADC_ConfigureBoostMode+0x10a>
 80038a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a4:	d82a      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 80038a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038aa:	d008      	beq.n	80038be <ADC_ConfigureBoostMode+0x10a>
 80038ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038b0:	d824      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x148>
 80038b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b6:	d002      	beq.n	80038be <ADC_ConfigureBoostMode+0x10a>
 80038b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038bc:	d11e      	bne.n	80038fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	60fb      	str	r3, [r7, #12]
        break;
 80038ce:	e016      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
        break;
 80038d6:	e012      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	60fb      	str	r3, [r7, #12]
        break;
 80038de:	e00e      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	60fb      	str	r3, [r7, #12]
        break;
 80038e6:	e00a      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	09db      	lsrs	r3, r3, #7
 80038ec:	60fb      	str	r3, [r7, #12]
        break;
 80038ee:	e006      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	60fb      	str	r3, [r7, #12]
        break;
 80038f6:	e002      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80038fc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <ADC_ConfigureBoostMode+0x1d0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d808      	bhi.n	800391e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800391a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800391c:	e025      	b.n	800396a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <ADC_ConfigureBoostMode+0x1d4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d80a      	bhi.n	800393c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	e016      	b.n	800396a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a13      	ldr	r2, [pc, #76]	@ (800398c <ADC_ConfigureBoostMode+0x1d8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d80a      	bhi.n	800395a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	e007      	b.n	800396a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003968:	609a      	str	r2, [r3, #8]
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40022100 	.word	0x40022100
 800397c:	40022300 	.word	0x40022300
 8003980:	58026300 	.word	0x58026300
 8003984:	005f5e10 	.word	0x005f5e10
 8003988:	00bebc20 	.word	0x00bebc20
 800398c:	017d7840 	.word	0x017d7840

08003990 <LL_ADC_IsEnabled>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <LL_ADC_IsEnabled+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_ADC_IsEnabled+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d101      	bne.n	80039ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b0a3      	sub	sp, #140	@ 0x8c
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0c1      	b.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a14:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e001      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0a0      	b.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ffb9 	bl	80039b6 <LL_ADC_REG_IsConversionOngoing>
 8003a44:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ffb2 	bl	80039b6 <LL_ADC_REG_IsConversionOngoing>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 8081 	bne.w	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d17c      	bne.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a48      	ldr	r2, [pc, #288]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a46      	ldr	r2, [pc, #280]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a78:	e000      	b.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003a7a:	4b46      	ldr	r3, [pc, #280]	@ (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a7c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d039      	beq.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a39      	ldr	r2, [pc, #228]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10e      	bne.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003aac:	4836      	ldr	r0, [pc, #216]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003aae:	f7ff ff6f 	bl	8003990 <LL_ADC_IsEnabled>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4835      	ldr	r0, [pc, #212]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ab6:	f7ff ff6b 	bl	8003990 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4323      	orrs	r3, r4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e008      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003aca:	4833      	ldr	r0, [pc, #204]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003acc:	f7ff ff60 	bl	8003990 <LL_ADC_IsEnabled>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d047      	beq.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	6811      	ldr	r1, [r2, #0]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	431a      	orrs	r2, r3
 8003af4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003af6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af8:	e03a      	b.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003afa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10e      	bne.n	8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003b1a:	481b      	ldr	r0, [pc, #108]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b1c:	f7ff ff38 	bl	8003990 <LL_ADC_IsEnabled>
 8003b20:	4604      	mov	r4, r0
 8003b22:	481a      	ldr	r0, [pc, #104]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b24:	f7ff ff34 	bl	8003990 <LL_ADC_IsEnabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4323      	orrs	r3, r4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003b38:	4817      	ldr	r0, [pc, #92]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003b3a:	f7ff ff29 	bl	8003990 <LL_ADC_IsEnabled>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b5a:	e009      	b.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b6e:	e000      	b.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	378c      	adds	r7, #140	@ 0x8c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40022100 	.word	0x40022100
 8003b90:	40022300 	.word	0x40022300
 8003b94:	58026300 	.word	0x58026300
 8003b98:	58026000 	.word	0x58026000
 8003b9c:	fffff0e0 	.word	0xfffff0e0

08003ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <__NVIC_SetPriorityGrouping+0x40>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bc8:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <__NVIC_SetPriorityGrouping+0x40>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00
 8003be4:	05fa0000 	.word	0x05fa0000

08003be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	@ (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	@ (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	@ (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	@ 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f7ff ff8e 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff29 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d64:	f7ff ff40 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff90 	bl	8003c94 <NVIC_EncodePriority>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff5f 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff33 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffa4 	bl	8003cfc <SysTick_Config>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003dc4:	f3bf 8f5f 	dmb	sy
}
 8003dc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_MPU_Disable+0x28>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <HAL_MPU_Disable+0x28>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_MPU_Disable+0x2c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed00 	.word	0xe000ed00
 8003dec:	e000ed90 	.word	0xe000ed90

08003df0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003df8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e28 <HAL_MPU_Enable+0x38>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <HAL_MPU_Enable+0x3c>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_MPU_Enable+0x3c>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e0e:	f3bf 8f4f 	dsb	sy
}
 8003e12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e14:	f3bf 8f6f 	isb	sy
}
 8003e18:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000ed90 	.word	0xe000ed90
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	785a      	ldrb	r2, [r3, #1]
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_MPU_ConfigRegion+0x7c>)
 8003e3e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003e40:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <HAL_MPU_ConfigRegion+0x7c>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4a19      	ldr	r2, [pc, #100]	@ (8003eac <HAL_MPU_ConfigRegion+0x7c>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <HAL_MPU_ConfigRegion+0x7c>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7adb      	ldrb	r3, [r3, #11]
 8003e5e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7a9b      	ldrb	r3, [r3, #10]
 8003e66:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7b5b      	ldrb	r3, [r3, #13]
 8003e6e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7b9b      	ldrb	r3, [r3, #14]
 8003e76:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7bdb      	ldrb	r3, [r3, #15]
 8003e7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7a5b      	ldrb	r3, [r3, #9]
 8003e86:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7a1b      	ldrb	r3, [r3, #8]
 8003e8e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e90:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e9a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e9c:	6113      	str	r3, [r2, #16]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000ed90 	.word	0xe000ed90

08003eb0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e014      	b.n	8003eec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fb60 	bl	8001598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_DAC_ConfigChannel+0x1e>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12a      	b.n	800416c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	795b      	ldrb	r3, [r3, #5]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_DAC_ConfigChannel+0x2e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e124      	b.n	800416c <HAL_DAC_ConfigChannel+0x278>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d17a      	bne.n	800402c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003f36:	f7fe fa8f 	bl	8002458 <HAL_GetTick>
 8003f3a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d13d      	bne.n	8003fbe <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f42:	e018      	b.n	8003f76 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f44:	f7fe fa88 	bl	8002458 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d911      	bls.n	8003f76 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f58:	4b86      	ldr	r3, [pc, #536]	@ (8004174 <HAL_DAC_ConfigChannel+0x280>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f043 0208 	orr.w	r2, r3, #8
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0fa      	b.n	800416c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004174 <HAL_DAC_ConfigChannel+0x280>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1df      	bne.n	8003f44 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	6992      	ldr	r2, [r2, #24]
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f8e:	e020      	b.n	8003fd2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f90:	f7fe fa62 	bl	8002458 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d90f      	bls.n	8003fbe <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	da0a      	bge.n	8003fbe <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f043 0208 	orr.w	r2, r3, #8
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0d6      	b.n	800416c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dbe3      	blt.n	8003f90 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	6992      	ldr	r2, [r2, #24]
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	ea02 0103 	and.w	r1, r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	21ff      	movs	r1, #255	@ 0xff
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	ea02 0103 	and.w	r1, r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	409a      	lsls	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d11d      	bne.n	8004070 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	221f      	movs	r2, #31
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2207      	movs	r2, #7
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
 8004098:	e00f      	b.n	80040ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d102      	bne.n	80040a8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e008      	b.n	80040ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80040b0:	2301      	movs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b4:	e001      	b.n	80040ba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	400a      	ands	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	22c0      	movs	r2, #192	@ 0xc0
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	@ 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20008000 	.word	0x20008000

08004178 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7fe f96a 	bl	8002458 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e312      	b.n	80047b6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a66      	ldr	r2, [pc, #408]	@ (8004330 <HAL_DMA_Init+0x1b8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_DMA_Init+0x1bc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a63      	ldr	r2, [pc, #396]	@ (8004338 <HAL_DMA_Init+0x1c0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a62      	ldr	r2, [pc, #392]	@ (800433c <HAL_DMA_Init+0x1c4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a60      	ldr	r2, [pc, #384]	@ (8004340 <HAL_DMA_Init+0x1c8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004344 <HAL_DMA_Init+0x1cc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004348 <HAL_DMA_Init+0x1d0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5c      	ldr	r2, [pc, #368]	@ (800434c <HAL_DMA_Init+0x1d4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004350 <HAL_DMA_Init+0x1d8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a59      	ldr	r2, [pc, #356]	@ (8004354 <HAL_DMA_Init+0x1dc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a57      	ldr	r2, [pc, #348]	@ (8004358 <HAL_DMA_Init+0x1e0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a56      	ldr	r2, [pc, #344]	@ (800435c <HAL_DMA_Init+0x1e4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <HAL_DMA_Init+0x1e8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a53      	ldr	r2, [pc, #332]	@ (8004364 <HAL_DMA_Init+0x1ec>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a51      	ldr	r2, [pc, #324]	@ (8004368 <HAL_DMA_Init+0x1f0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_DMA_Init+0xb8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a50      	ldr	r2, [pc, #320]	@ (800436c <HAL_DMA_Init+0x1f4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Init+0xbc>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_DMA_Init+0xbe>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 813c 	beq.w	80044b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a37      	ldr	r2, [pc, #220]	@ (8004330 <HAL_DMA_Init+0x1b8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d04a      	beq.n	80042ec <HAL_DMA_Init+0x174>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a36      	ldr	r2, [pc, #216]	@ (8004334 <HAL_DMA_Init+0x1bc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d045      	beq.n	80042ec <HAL_DMA_Init+0x174>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a34      	ldr	r2, [pc, #208]	@ (8004338 <HAL_DMA_Init+0x1c0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d040      	beq.n	80042ec <HAL_DMA_Init+0x174>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a33      	ldr	r2, [pc, #204]	@ (800433c <HAL_DMA_Init+0x1c4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d03b      	beq.n	80042ec <HAL_DMA_Init+0x174>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a31      	ldr	r2, [pc, #196]	@ (8004340 <HAL_DMA_Init+0x1c8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d036      	beq.n	80042ec <HAL_DMA_Init+0x174>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a30      	ldr	r2, [pc, #192]	@ (8004344 <HAL_DMA_Init+0x1cc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d031      	beq.n	80042ec <HAL_DMA_Init+0x174>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2e      	ldr	r2, [pc, #184]	@ (8004348 <HAL_DMA_Init+0x1d0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02c      	beq.n	80042ec <HAL_DMA_Init+0x174>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2d      	ldr	r2, [pc, #180]	@ (800434c <HAL_DMA_Init+0x1d4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d027      	beq.n	80042ec <HAL_DMA_Init+0x174>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004350 <HAL_DMA_Init+0x1d8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d022      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <HAL_DMA_Init+0x1dc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d01d      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a28      	ldr	r2, [pc, #160]	@ (8004358 <HAL_DMA_Init+0x1e0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a27      	ldr	r2, [pc, #156]	@ (800435c <HAL_DMA_Init+0x1e4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a25      	ldr	r2, [pc, #148]	@ (8004360 <HAL_DMA_Init+0x1e8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a24      	ldr	r2, [pc, #144]	@ (8004364 <HAL_DMA_Init+0x1ec>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a22      	ldr	r2, [pc, #136]	@ (8004368 <HAL_DMA_Init+0x1f0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_Init+0x174>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	@ (800436c <HAL_DMA_Init+0x1f4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <HAL_DMA_Init+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e007      	b.n	800430e <HAL_DMA_Init+0x196>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800430e:	e02f      	b.n	8004370 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004310:	f7fe f8a2 	bl	8002458 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b05      	cmp	r3, #5
 800431c:	d928      	bls.n	8004370 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2203      	movs	r2, #3
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e242      	b.n	80047b6 <HAL_DMA_Init+0x63e>
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1c8      	bne.n	8004310 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4b83      	ldr	r3, [pc, #524]	@ (8004598 <HAL_DMA_Init+0x420>)
 800438a:	4013      	ands	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004396:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d107      	bne.n	80043d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	4313      	orrs	r3, r2
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b28      	cmp	r3, #40	@ 0x28
 80043da:	d903      	bls.n	80043e4 <HAL_DMA_Init+0x26c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80043e2:	d91f      	bls.n	8004424 <HAL_DMA_Init+0x2ac>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80043ea:	d903      	bls.n	80043f4 <HAL_DMA_Init+0x27c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b42      	cmp	r3, #66	@ 0x42
 80043f2:	d917      	bls.n	8004424 <HAL_DMA_Init+0x2ac>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b46      	cmp	r3, #70	@ 0x46
 80043fa:	d903      	bls.n	8004404 <HAL_DMA_Init+0x28c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b48      	cmp	r3, #72	@ 0x48
 8004402:	d90f      	bls.n	8004424 <HAL_DMA_Init+0x2ac>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b4e      	cmp	r3, #78	@ 0x4e
 800440a:	d903      	bls.n	8004414 <HAL_DMA_Init+0x29c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b52      	cmp	r3, #82	@ 0x52
 8004412:	d907      	bls.n	8004424 <HAL_DMA_Init+0x2ac>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b73      	cmp	r3, #115	@ 0x73
 800441a:	d905      	bls.n	8004428 <HAL_DMA_Init+0x2b0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b77      	cmp	r3, #119	@ 0x77
 8004422:	d801      	bhi.n	8004428 <HAL_DMA_Init+0x2b0>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_DMA_Init+0x2b2>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004434:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	2b04      	cmp	r3, #4
 800445e:	d117      	bne.n	8004490 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f001 f9b4 	bl	80057e0 <DMA_CheckFifoParam>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2240      	movs	r2, #64	@ 0x40
 8004482:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e192      	b.n	80047b6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 f8ef 	bl	800567c <DMA_CalcBaseAndBitshift>
 800449e:	4603      	mov	r3, r0
 80044a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	223f      	movs	r2, #63	@ 0x3f
 80044ac:	409a      	lsls	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	e0c8      	b.n	8004646 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a38      	ldr	r2, [pc, #224]	@ (800459c <HAL_DMA_Init+0x424>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a37      	ldr	r2, [pc, #220]	@ (80045a0 <HAL_DMA_Init+0x428>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a35      	ldr	r2, [pc, #212]	@ (80045a4 <HAL_DMA_Init+0x42c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a34      	ldr	r2, [pc, #208]	@ (80045a8 <HAL_DMA_Init+0x430>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a32      	ldr	r2, [pc, #200]	@ (80045ac <HAL_DMA_Init+0x434>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a31      	ldr	r2, [pc, #196]	@ (80045b0 <HAL_DMA_Init+0x438>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2f      	ldr	r2, [pc, #188]	@ (80045b4 <HAL_DMA_Init+0x43c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_Init+0x38c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2e      	ldr	r2, [pc, #184]	@ (80045b8 <HAL_DMA_Init+0x440>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Init+0x390>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_DMA_Init+0x392>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8092 	beq.w	8004634 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a21      	ldr	r2, [pc, #132]	@ (800459c <HAL_DMA_Init+0x424>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d021      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a20      	ldr	r2, [pc, #128]	@ (80045a0 <HAL_DMA_Init+0x428>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01c      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	@ (80045a4 <HAL_DMA_Init+0x42c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d017      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_DMA_Init+0x430>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d012      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	@ (80045ac <HAL_DMA_Init+0x434>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1a      	ldr	r2, [pc, #104]	@ (80045b0 <HAL_DMA_Init+0x438>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d008      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <HAL_DMA_Init+0x43c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <HAL_DMA_Init+0x3e6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	@ (80045b8 <HAL_DMA_Init+0x440>)
 800455c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HAL_DMA_Init+0x444>)
 800457a:	4013      	ands	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d01c      	beq.n	80045c0 <HAL_DMA_Init+0x448>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b80      	cmp	r3, #128	@ 0x80
 800458c:	d102      	bne.n	8004594 <HAL_DMA_Init+0x41c>
 800458e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004592:	e016      	b.n	80045c2 <HAL_DMA_Init+0x44a>
 8004594:	2300      	movs	r3, #0
 8004596:	e014      	b.n	80045c2 <HAL_DMA_Init+0x44a>
 8004598:	fe10803f 	.word	0xfe10803f
 800459c:	58025408 	.word	0x58025408
 80045a0:	5802541c 	.word	0x5802541c
 80045a4:	58025430 	.word	0x58025430
 80045a8:	58025444 	.word	0x58025444
 80045ac:	58025458 	.word	0x58025458
 80045b0:	5802546c 	.word	0x5802546c
 80045b4:	58025480 	.word	0x58025480
 80045b8:	58025494 	.word	0x58025494
 80045bc:	fffe000f 	.word	0xfffe000f
 80045c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68d2      	ldr	r2, [r2, #12]
 80045c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80045d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80045d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80045e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80045e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80045f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	4b6e      	ldr	r3, [pc, #440]	@ (80047c0 <HAL_DMA_Init+0x648>)
 8004608:	4413      	add	r3, r2
 800460a:	4a6e      	ldr	r2, [pc, #440]	@ (80047c4 <HAL_DMA_Init+0x64c>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	009a      	lsls	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 f82f 	bl	800567c <DMA_CalcBaseAndBitshift>
 800461e:	4603      	mov	r3, r0
 8004620:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2201      	movs	r2, #1
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	e008      	b.n	8004646 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2240      	movs	r2, #64	@ 0x40
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2203      	movs	r2, #3
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0b7      	b.n	80047b6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5f      	ldr	r2, [pc, #380]	@ (80047c8 <HAL_DMA_Init+0x650>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d072      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5d      	ldr	r2, [pc, #372]	@ (80047cc <HAL_DMA_Init+0x654>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d06d      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5c      	ldr	r2, [pc, #368]	@ (80047d0 <HAL_DMA_Init+0x658>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d068      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5a      	ldr	r2, [pc, #360]	@ (80047d4 <HAL_DMA_Init+0x65c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d063      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a59      	ldr	r2, [pc, #356]	@ (80047d8 <HAL_DMA_Init+0x660>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d05e      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a57      	ldr	r2, [pc, #348]	@ (80047dc <HAL_DMA_Init+0x664>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d059      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a56      	ldr	r2, [pc, #344]	@ (80047e0 <HAL_DMA_Init+0x668>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d054      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a54      	ldr	r2, [pc, #336]	@ (80047e4 <HAL_DMA_Init+0x66c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04f      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a53      	ldr	r2, [pc, #332]	@ (80047e8 <HAL_DMA_Init+0x670>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d04a      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a51      	ldr	r2, [pc, #324]	@ (80047ec <HAL_DMA_Init+0x674>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d045      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a50      	ldr	r2, [pc, #320]	@ (80047f0 <HAL_DMA_Init+0x678>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d040      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a4e      	ldr	r2, [pc, #312]	@ (80047f4 <HAL_DMA_Init+0x67c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d03b      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4d      	ldr	r2, [pc, #308]	@ (80047f8 <HAL_DMA_Init+0x680>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d036      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a4b      	ldr	r2, [pc, #300]	@ (80047fc <HAL_DMA_Init+0x684>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d031      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004800 <HAL_DMA_Init+0x688>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d02c      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a48      	ldr	r2, [pc, #288]	@ (8004804 <HAL_DMA_Init+0x68c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d027      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a47      	ldr	r2, [pc, #284]	@ (8004808 <HAL_DMA_Init+0x690>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <HAL_DMA_Init+0x694>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a44      	ldr	r2, [pc, #272]	@ (8004810 <HAL_DMA_Init+0x698>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a42      	ldr	r2, [pc, #264]	@ (8004814 <HAL_DMA_Init+0x69c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a41      	ldr	r2, [pc, #260]	@ (8004818 <HAL_DMA_Init+0x6a0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <HAL_DMA_Init+0x6a4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3e      	ldr	r2, [pc, #248]	@ (8004820 <HAL_DMA_Init+0x6a8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_Init+0x5be>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3c      	ldr	r2, [pc, #240]	@ (8004824 <HAL_DMA_Init+0x6ac>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_DMA_Init+0x5c2>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_DMA_Init+0x5c4>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d032      	beq.n	80047a6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 f8c9 	bl	80058d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d102      	bne.n	8004754 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004768:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d010      	beq.n	8004794 <HAL_DMA_Init+0x61c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d80c      	bhi.n	8004794 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 f946 	bl	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	e008      	b.n	80047a6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	a7fdabf8 	.word	0xa7fdabf8
 80047c4:	cccccccd 	.word	0xcccccccd
 80047c8:	40020010 	.word	0x40020010
 80047cc:	40020028 	.word	0x40020028
 80047d0:	40020040 	.word	0x40020040
 80047d4:	40020058 	.word	0x40020058
 80047d8:	40020070 	.word	0x40020070
 80047dc:	40020088 	.word	0x40020088
 80047e0:	400200a0 	.word	0x400200a0
 80047e4:	400200b8 	.word	0x400200b8
 80047e8:	40020410 	.word	0x40020410
 80047ec:	40020428 	.word	0x40020428
 80047f0:	40020440 	.word	0x40020440
 80047f4:	40020458 	.word	0x40020458
 80047f8:	40020470 	.word	0x40020470
 80047fc:	40020488 	.word	0x40020488
 8004800:	400204a0 	.word	0x400204a0
 8004804:	400204b8 	.word	0x400204b8
 8004808:	58025408 	.word	0x58025408
 800480c:	5802541c 	.word	0x5802541c
 8004810:	58025430 	.word	0x58025430
 8004814:	58025444 	.word	0x58025444
 8004818:	58025458 	.word	0x58025458
 800481c:	5802546c 	.word	0x5802546c
 8004820:	58025480 	.word	0x58025480
 8004824:	58025494 	.word	0x58025494

08004828 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004834:	4b67      	ldr	r3, [pc, #412]	@ (80049d4 <HAL_DMA_IRQHandler+0x1ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	@ (80049d8 <HAL_DMA_IRQHandler+0x1b0>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004846:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5f      	ldr	r2, [pc, #380]	@ (80049dc <HAL_DMA_IRQHandler+0x1b4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5d      	ldr	r2, [pc, #372]	@ (80049e0 <HAL_DMA_IRQHandler+0x1b8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5c      	ldr	r2, [pc, #368]	@ (80049e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_DMA_IRQHandler+0x1c0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a59      	ldr	r2, [pc, #356]	@ (80049ec <HAL_DMA_IRQHandler+0x1c4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a57      	ldr	r2, [pc, #348]	@ (80049f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_DMA_IRQHandler+0x1cc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a54      	ldr	r2, [pc, #336]	@ (80049f8 <HAL_DMA_IRQHandler+0x1d0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a53      	ldr	r2, [pc, #332]	@ (80049fc <HAL_DMA_IRQHandler+0x1d4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a51      	ldr	r2, [pc, #324]	@ (8004a00 <HAL_DMA_IRQHandler+0x1d8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a50      	ldr	r2, [pc, #320]	@ (8004a04 <HAL_DMA_IRQHandler+0x1dc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004a08 <HAL_DMA_IRQHandler+0x1e0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4d      	ldr	r2, [pc, #308]	@ (8004a0c <HAL_DMA_IRQHandler+0x1e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004a10 <HAL_DMA_IRQHandler+0x1e8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004a14 <HAL_DMA_IRQHandler+0x1ec>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0xd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a48      	ldr	r2, [pc, #288]	@ (8004a18 <HAL_DMA_IRQHandler+0x1f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d101      	bne.n	80048fe <HAL_DMA_IRQHandler+0xd6>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_DMA_IRQHandler+0xd8>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 842b 	beq.w	800515c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2208      	movs	r2, #8
 8004910:	409a      	lsls	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a2 	beq.w	8004a60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2e      	ldr	r2, [pc, #184]	@ (80049dc <HAL_DMA_IRQHandler+0x1b4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2d      	ldr	r2, [pc, #180]	@ (80049e0 <HAL_DMA_IRQHandler+0x1b8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2b      	ldr	r2, [pc, #172]	@ (80049e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <HAL_DMA_IRQHandler+0x1c0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a28      	ldr	r2, [pc, #160]	@ (80049ec <HAL_DMA_IRQHandler+0x1c4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a27      	ldr	r2, [pc, #156]	@ (80049f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a25      	ldr	r2, [pc, #148]	@ (80049f4 <HAL_DMA_IRQHandler+0x1cc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a24      	ldr	r2, [pc, #144]	@ (80049f8 <HAL_DMA_IRQHandler+0x1d0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <HAL_DMA_IRQHandler+0x1d4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a21      	ldr	r2, [pc, #132]	@ (8004a00 <HAL_DMA_IRQHandler+0x1d8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_DMA_IRQHandler+0x1dc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <HAL_DMA_IRQHandler+0x1e0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_DMA_IRQHandler+0x1e4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_DMA_IRQHandler+0x1e8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_DMA_IRQHandler+0x1ec>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_IRQHandler+0x194>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <HAL_DMA_IRQHandler+0x1f0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d12f      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x1f4>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e02e      	b.n	8004a30 <HAL_DMA_IRQHandler+0x208>
 80049d2:	bf00      	nop
 80049d4:	24000000 	.word	0x24000000
 80049d8:	1b4e81b5 	.word	0x1b4e81b5
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0204 	bic.w	r2, r2, #4
 8004a42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06e      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a69      	ldr	r2, [pc, #420]	@ (8004c20 <HAL_DMA_IRQHandler+0x3f8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a67      	ldr	r2, [pc, #412]	@ (8004c24 <HAL_DMA_IRQHandler+0x3fc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a66      	ldr	r2, [pc, #408]	@ (8004c28 <HAL_DMA_IRQHandler+0x400>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a64      	ldr	r2, [pc, #400]	@ (8004c2c <HAL_DMA_IRQHandler+0x404>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a63      	ldr	r2, [pc, #396]	@ (8004c30 <HAL_DMA_IRQHandler+0x408>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a61      	ldr	r2, [pc, #388]	@ (8004c34 <HAL_DMA_IRQHandler+0x40c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a60      	ldr	r2, [pc, #384]	@ (8004c38 <HAL_DMA_IRQHandler+0x410>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c3c <HAL_DMA_IRQHandler+0x414>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5d      	ldr	r2, [pc, #372]	@ (8004c40 <HAL_DMA_IRQHandler+0x418>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c44 <HAL_DMA_IRQHandler+0x41c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a5a      	ldr	r2, [pc, #360]	@ (8004c48 <HAL_DMA_IRQHandler+0x420>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a58      	ldr	r2, [pc, #352]	@ (8004c4c <HAL_DMA_IRQHandler+0x424>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a57      	ldr	r2, [pc, #348]	@ (8004c50 <HAL_DMA_IRQHandler+0x428>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a55      	ldr	r2, [pc, #340]	@ (8004c54 <HAL_DMA_IRQHandler+0x42c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a54      	ldr	r2, [pc, #336]	@ (8004c58 <HAL_DMA_IRQHandler+0x430>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x2ee>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a52      	ldr	r2, [pc, #328]	@ (8004c5c <HAL_DMA_IRQHandler+0x434>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10a      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x304>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e003      	b.n	8004b34 <HAL_DMA_IRQHandler+0x30c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	f043 0202 	orr.w	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 808f 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c20 <HAL_DMA_IRQHandler+0x3f8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d04a      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2a      	ldr	r2, [pc, #168]	@ (8004c24 <HAL_DMA_IRQHandler+0x3fc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d045      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a29      	ldr	r2, [pc, #164]	@ (8004c28 <HAL_DMA_IRQHandler+0x400>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d040      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a27      	ldr	r2, [pc, #156]	@ (8004c2c <HAL_DMA_IRQHandler+0x404>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d03b      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a26      	ldr	r2, [pc, #152]	@ (8004c30 <HAL_DMA_IRQHandler+0x408>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d036      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a24      	ldr	r2, [pc, #144]	@ (8004c34 <HAL_DMA_IRQHandler+0x40c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d031      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a23      	ldr	r2, [pc, #140]	@ (8004c38 <HAL_DMA_IRQHandler+0x410>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d02c      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a21      	ldr	r2, [pc, #132]	@ (8004c3c <HAL_DMA_IRQHandler+0x414>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d027      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a20      	ldr	r2, [pc, #128]	@ (8004c40 <HAL_DMA_IRQHandler+0x418>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c44 <HAL_DMA_IRQHandler+0x41c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <HAL_DMA_IRQHandler+0x420>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c4c <HAL_DMA_IRQHandler+0x424>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <HAL_DMA_IRQHandler+0x428>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <HAL_DMA_IRQHandler+0x42c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_DMA_IRQHandler+0x430>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x3e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <HAL_DMA_IRQHandler+0x434>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d12a      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x438>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e023      	b.n	8004c68 <HAL_DMA_IRQHandler+0x440>
 8004c20:	40020010 	.word	0x40020010
 8004c24:	40020028 	.word	0x40020028
 8004c28:	40020040 	.word	0x40020040
 8004c2c:	40020058 	.word	0x40020058
 8004c30:	40020070 	.word	0x40020070
 8004c34:	40020088 	.word	0x40020088
 8004c38:	400200a0 	.word	0x400200a0
 8004c3c:	400200b8 	.word	0x400200b8
 8004c40:	40020410 	.word	0x40020410
 8004c44:	40020428 	.word	0x40020428
 8004c48:	40020440 	.word	0x40020440
 8004c4c:	40020458 	.word	0x40020458
 8004c50:	40020470 	.word	0x40020470
 8004c54:	40020488 	.word	0x40020488
 8004c58:	400204a0 	.word	0x400204a0
 8004c5c:	400204b8 	.word	0x400204b8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2204      	movs	r2, #4
 8004c76:	409a      	lsls	r2, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2210      	movs	r2, #16
 8004c92:	409a      	lsls	r2, r3
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a6 	beq.w	8004dea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a85      	ldr	r2, [pc, #532]	@ (8004eb8 <HAL_DMA_IRQHandler+0x690>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d04a      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a83      	ldr	r2, [pc, #524]	@ (8004ebc <HAL_DMA_IRQHandler+0x694>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d045      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a82      	ldr	r2, [pc, #520]	@ (8004ec0 <HAL_DMA_IRQHandler+0x698>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d040      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a80      	ldr	r2, [pc, #512]	@ (8004ec4 <HAL_DMA_IRQHandler+0x69c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d03b      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7f      	ldr	r2, [pc, #508]	@ (8004ec8 <HAL_DMA_IRQHandler+0x6a0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d036      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a7d      	ldr	r2, [pc, #500]	@ (8004ecc <HAL_DMA_IRQHandler+0x6a4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d031      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7c      	ldr	r2, [pc, #496]	@ (8004ed0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d02c      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ed4 <HAL_DMA_IRQHandler+0x6ac>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d027      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a79      	ldr	r2, [pc, #484]	@ (8004ed8 <HAL_DMA_IRQHandler+0x6b0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a77      	ldr	r2, [pc, #476]	@ (8004edc <HAL_DMA_IRQHandler+0x6b4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a76      	ldr	r2, [pc, #472]	@ (8004ee0 <HAL_DMA_IRQHandler+0x6b8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a74      	ldr	r2, [pc, #464]	@ (8004ee4 <HAL_DMA_IRQHandler+0x6bc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a73      	ldr	r2, [pc, #460]	@ (8004ee8 <HAL_DMA_IRQHandler+0x6c0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a71      	ldr	r2, [pc, #452]	@ (8004eec <HAL_DMA_IRQHandler+0x6c4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a70      	ldr	r2, [pc, #448]	@ (8004ef0 <HAL_DMA_IRQHandler+0x6c8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x516>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef4 <HAL_DMA_IRQHandler+0x6cc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10a      	bne.n	8004d54 <HAL_DMA_IRQHandler+0x52c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e009      	b.n	8004d68 <HAL_DMA_IRQHandler+0x540>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03e      	beq.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	2210      	movs	r2, #16
 8004d76:	409a      	lsls	r2, r3
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d018      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d024      	beq.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
 8004da8:	e01f      	b.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
 8004dba:	e016      	b.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0208 	bic.w	r2, r2, #8
 8004dd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2220      	movs	r2, #32
 8004df4:	409a      	lsls	r2, r3
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8110 	beq.w	8005020 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <HAL_DMA_IRQHandler+0x690>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_DMA_IRQHandler+0x694>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a29      	ldr	r2, [pc, #164]	@ (8004ec0 <HAL_DMA_IRQHandler+0x698>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a28      	ldr	r2, [pc, #160]	@ (8004ec4 <HAL_DMA_IRQHandler+0x69c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <HAL_DMA_IRQHandler+0x6a0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a25      	ldr	r2, [pc, #148]	@ (8004ecc <HAL_DMA_IRQHandler+0x6a4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a23      	ldr	r2, [pc, #140]	@ (8004ed0 <HAL_DMA_IRQHandler+0x6a8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_DMA_IRQHandler+0x6ac>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <HAL_DMA_IRQHandler+0x6b0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_DMA_IRQHandler+0x6b4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a19      	ldr	r2, [pc, #100]	@ (8004eec <HAL_DMA_IRQHandler+0x6c4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <HAL_DMA_IRQHandler+0x6c8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x678>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	@ (8004ef4 <HAL_DMA_IRQHandler+0x6cc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d12b      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x6d0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e02a      	b.n	8004f0c <HAL_DMA_IRQHandler+0x6e4>
 8004eb6:	bf00      	nop
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8087 	beq.w	8005020 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d139      	bne.n	8004fa2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0216 	bic.w	r2, r2, #22
 8004f3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x736>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0208 	bic.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	223f      	movs	r2, #63	@ 0x3f
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 834a 	beq.w	800562c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
          }
          return;
 8004fa0:	e344      	b.n	800562c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
 8004fce:	e027      	b.n	8005020 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d023      	beq.n	8005020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
 8004fe0:	e01e      	b.n	8005020 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0210 	bic.w	r2, r2, #16
 8004ffe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8306 	beq.w	8005636 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8088 	beq.w	8005148 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2204      	movs	r2, #4
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a7a      	ldr	r2, [pc, #488]	@ (8005230 <HAL_DMA_IRQHandler+0xa08>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d04a      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a79      	ldr	r2, [pc, #484]	@ (8005234 <HAL_DMA_IRQHandler+0xa0c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d045      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a77      	ldr	r2, [pc, #476]	@ (8005238 <HAL_DMA_IRQHandler+0xa10>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d040      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a76      	ldr	r2, [pc, #472]	@ (800523c <HAL_DMA_IRQHandler+0xa14>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d03b      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a74      	ldr	r2, [pc, #464]	@ (8005240 <HAL_DMA_IRQHandler+0xa18>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d036      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a73      	ldr	r2, [pc, #460]	@ (8005244 <HAL_DMA_IRQHandler+0xa1c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d031      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a71      	ldr	r2, [pc, #452]	@ (8005248 <HAL_DMA_IRQHandler+0xa20>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d02c      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a70      	ldr	r2, [pc, #448]	@ (800524c <HAL_DMA_IRQHandler+0xa24>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d027      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6e      	ldr	r2, [pc, #440]	@ (8005250 <HAL_DMA_IRQHandler+0xa28>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6d      	ldr	r2, [pc, #436]	@ (8005254 <HAL_DMA_IRQHandler+0xa2c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6b      	ldr	r2, [pc, #428]	@ (8005258 <HAL_DMA_IRQHandler+0xa30>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6a      	ldr	r2, [pc, #424]	@ (800525c <HAL_DMA_IRQHandler+0xa34>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a68      	ldr	r2, [pc, #416]	@ (8005260 <HAL_DMA_IRQHandler+0xa38>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a67      	ldr	r2, [pc, #412]	@ (8005264 <HAL_DMA_IRQHandler+0xa3c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a65      	ldr	r2, [pc, #404]	@ (8005268 <HAL_DMA_IRQHandler+0xa40>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x8b8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a64      	ldr	r2, [pc, #400]	@ (800526c <HAL_DMA_IRQHandler+0xa44>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d108      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x8ca>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e007      	b.n	8005102 <HAL_DMA_IRQHandler+0x8da>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510a:	429a      	cmp	r2, r3
 800510c:	d307      	bcc.n	800511e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f2      	bne.n	8005102 <HAL_DMA_IRQHandler+0x8da>
 800511c:	e000      	b.n	8005120 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800511e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2203      	movs	r2, #3
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005136:	e003      	b.n	8005140 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8272 	beq.w	8005636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
 800515a:	e26c      	b.n	8005636 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a43      	ldr	r2, [pc, #268]	@ (8005270 <HAL_DMA_IRQHandler+0xa48>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a42      	ldr	r2, [pc, #264]	@ (8005274 <HAL_DMA_IRQHandler+0xa4c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a40      	ldr	r2, [pc, #256]	@ (8005278 <HAL_DMA_IRQHandler+0xa50>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3f      	ldr	r2, [pc, #252]	@ (800527c <HAL_DMA_IRQHandler+0xa54>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3d      	ldr	r2, [pc, #244]	@ (8005280 <HAL_DMA_IRQHandler+0xa58>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a3c      	ldr	r2, [pc, #240]	@ (8005284 <HAL_DMA_IRQHandler+0xa5c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3a      	ldr	r2, [pc, #232]	@ (8005288 <HAL_DMA_IRQHandler+0xa60>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_IRQHandler+0x984>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a39      	ldr	r2, [pc, #228]	@ (800528c <HAL_DMA_IRQHandler+0xa64>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_IRQHandler+0x988>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_DMA_IRQHandler+0x98a>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 823f 	beq.w	8005636 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2204      	movs	r2, #4
 80051ca:	409a      	lsls	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80cd 	beq.w	8005370 <HAL_DMA_IRQHandler+0xb48>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80c7 	beq.w	8005370 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	2204      	movs	r2, #4
 80051ec:	409a      	lsls	r2, r3
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d049      	beq.n	8005290 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8210 	beq.w	8005630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005218:	e20a      	b.n	8005630 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8206 	beq.w	8005630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800522c:	e200      	b.n	8005630 <HAL_DMA_IRQHandler+0xe08>
 800522e:	bf00      	nop
 8005230:	40020010 	.word	0x40020010
 8005234:	40020028 	.word	0x40020028
 8005238:	40020040 	.word	0x40020040
 800523c:	40020058 	.word	0x40020058
 8005240:	40020070 	.word	0x40020070
 8005244:	40020088 	.word	0x40020088
 8005248:	400200a0 	.word	0x400200a0
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020410 	.word	0x40020410
 8005254:	40020428 	.word	0x40020428
 8005258:	40020440 	.word	0x40020440
 800525c:	40020458 	.word	0x40020458
 8005260:	40020470 	.word	0x40020470
 8005264:	40020488 	.word	0x40020488
 8005268:	400204a0 	.word	0x400204a0
 800526c:	400204b8 	.word	0x400204b8
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d160      	bne.n	800535c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7f      	ldr	r2, [pc, #508]	@ (800549c <HAL_DMA_IRQHandler+0xc74>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7d      	ldr	r2, [pc, #500]	@ (80054a0 <HAL_DMA_IRQHandler+0xc78>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <HAL_DMA_IRQHandler+0xc7c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7a      	ldr	r2, [pc, #488]	@ (80054a8 <HAL_DMA_IRQHandler+0xc80>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a79      	ldr	r2, [pc, #484]	@ (80054ac <HAL_DMA_IRQHandler+0xc84>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a77      	ldr	r2, [pc, #476]	@ (80054b0 <HAL_DMA_IRQHandler+0xc88>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a76      	ldr	r2, [pc, #472]	@ (80054b4 <HAL_DMA_IRQHandler+0xc8c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a74      	ldr	r2, [pc, #464]	@ (80054b8 <HAL_DMA_IRQHandler+0xc90>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a73      	ldr	r2, [pc, #460]	@ (80054bc <HAL_DMA_IRQHandler+0xc94>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a71      	ldr	r2, [pc, #452]	@ (80054c0 <HAL_DMA_IRQHandler+0xc98>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a70      	ldr	r2, [pc, #448]	@ (80054c4 <HAL_DMA_IRQHandler+0xc9c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6e      	ldr	r2, [pc, #440]	@ (80054c8 <HAL_DMA_IRQHandler+0xca0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6d      	ldr	r2, [pc, #436]	@ (80054cc <HAL_DMA_IRQHandler+0xca4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6b      	ldr	r2, [pc, #428]	@ (80054d0 <HAL_DMA_IRQHandler+0xca8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a6a      	ldr	r2, [pc, #424]	@ (80054d4 <HAL_DMA_IRQHandler+0xcac>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_IRQHandler+0xb12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a68      	ldr	r2, [pc, #416]	@ (80054d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <HAL_DMA_IRQHandler+0xb24>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0208 	bic.w	r2, r2, #8
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e007      	b.n	800535c <HAL_DMA_IRQHandler+0xb34>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8165 	beq.w	8005630 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800536e:	e15f      	b.n	8005630 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2202      	movs	r2, #2
 800537a:	409a      	lsls	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80c5 	beq.w	8005510 <HAL_DMA_IRQHandler+0xce8>
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80bf 	beq.w	8005510 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2202      	movs	r2, #2
 800539c:	409a      	lsls	r2, r3
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d018      	beq.n	80053de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 813a 	beq.w	8005634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053c8:	e134      	b.n	8005634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8130 	beq.w	8005634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053dc:	e12a      	b.n	8005634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8089 	bne.w	80054fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <HAL_DMA_IRQHandler+0xc74>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d04a      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a29      	ldr	r2, [pc, #164]	@ (80054a0 <HAL_DMA_IRQHandler+0xc78>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d045      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a28      	ldr	r2, [pc, #160]	@ (80054a4 <HAL_DMA_IRQHandler+0xc7c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d040      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <HAL_DMA_IRQHandler+0xc80>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d03b      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <HAL_DMA_IRQHandler+0xc84>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d036      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a23      	ldr	r2, [pc, #140]	@ (80054b0 <HAL_DMA_IRQHandler+0xc88>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d031      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <HAL_DMA_IRQHandler+0xc8c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02c      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <HAL_DMA_IRQHandler+0xc90>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d027      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <HAL_DMA_IRQHandler+0xc94>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_DMA_IRQHandler+0xc98>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <HAL_DMA_IRQHandler+0xc9c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_DMA_IRQHandler+0xca0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_DMA_IRQHandler+0xca4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <HAL_DMA_IRQHandler+0xca8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <HAL_DMA_IRQHandler+0xcac>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_DMA_IRQHandler+0xc62>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a14      	ldr	r2, [pc, #80]	@ (80054d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d128      	bne.n	80054dc <HAL_DMA_IRQHandler+0xcb4>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0214 	bic.w	r2, r2, #20
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e027      	b.n	80054ec <HAL_DMA_IRQHandler+0xcc4>
 800549c:	40020010 	.word	0x40020010
 80054a0:	40020028 	.word	0x40020028
 80054a4:	40020040 	.word	0x40020040
 80054a8:	40020058 	.word	0x40020058
 80054ac:	40020070 	.word	0x40020070
 80054b0:	40020088 	.word	0x40020088
 80054b4:	400200a0 	.word	0x400200a0
 80054b8:	400200b8 	.word	0x400200b8
 80054bc:	40020410 	.word	0x40020410
 80054c0:	40020428 	.word	0x40020428
 80054c4:	40020440 	.word	0x40020440
 80054c8:	40020458 	.word	0x40020458
 80054cc:	40020470 	.word	0x40020470
 80054d0:	40020488 	.word	0x40020488
 80054d4:	400204a0 	.word	0x400204a0
 80054d8:	400204b8 	.word	0x400204b8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 020a 	bic.w	r2, r2, #10
 80054ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8097 	beq.w	8005634 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800550e:	e091      	b.n	8005634 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2208      	movs	r2, #8
 800551a:	409a      	lsls	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8088 	beq.w	8005636 <HAL_DMA_IRQHandler+0xe0e>
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8082 	beq.w	8005636 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a41      	ldr	r2, [pc, #260]	@ (800563c <HAL_DMA_IRQHandler+0xe14>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04a      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3f      	ldr	r2, [pc, #252]	@ (8005640 <HAL_DMA_IRQHandler+0xe18>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d045      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3e      	ldr	r2, [pc, #248]	@ (8005644 <HAL_DMA_IRQHandler+0xe1c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d040      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3c      	ldr	r2, [pc, #240]	@ (8005648 <HAL_DMA_IRQHandler+0xe20>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03b      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3b      	ldr	r2, [pc, #236]	@ (800564c <HAL_DMA_IRQHandler+0xe24>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d036      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a39      	ldr	r2, [pc, #228]	@ (8005650 <HAL_DMA_IRQHandler+0xe28>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d031      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a38      	ldr	r2, [pc, #224]	@ (8005654 <HAL_DMA_IRQHandler+0xe2c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02c      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a36      	ldr	r2, [pc, #216]	@ (8005658 <HAL_DMA_IRQHandler+0xe30>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a35      	ldr	r2, [pc, #212]	@ (800565c <HAL_DMA_IRQHandler+0xe34>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a33      	ldr	r2, [pc, #204]	@ (8005660 <HAL_DMA_IRQHandler+0xe38>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a32      	ldr	r2, [pc, #200]	@ (8005664 <HAL_DMA_IRQHandler+0xe3c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a30      	ldr	r2, [pc, #192]	@ (8005668 <HAL_DMA_IRQHandler+0xe40>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	@ (800566c <HAL_DMA_IRQHandler+0xe44>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005670 <HAL_DMA_IRQHandler+0xe48>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <HAL_DMA_IRQHandler+0xe4c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xdaa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005678 <HAL_DMA_IRQHandler+0xe50>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <HAL_DMA_IRQHandler+0xdbc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 021c 	bic.w	r2, r2, #28
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e007      	b.n	80055f4 <HAL_DMA_IRQHandler+0xdcc>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 020e 	bic.w	r2, r2, #14
 80055f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
 800562a:	e004      	b.n	8005636 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005634:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005636:	3728      	adds	r7, #40	@ 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8

0800567c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a42      	ldr	r2, [pc, #264]	@ (8005794 <DMA_CalcBaseAndBitshift+0x118>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d04a      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a41      	ldr	r2, [pc, #260]	@ (8005798 <DMA_CalcBaseAndBitshift+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d045      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3f      	ldr	r2, [pc, #252]	@ (800579c <DMA_CalcBaseAndBitshift+0x120>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d040      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3e      	ldr	r2, [pc, #248]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d03b      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3c      	ldr	r2, [pc, #240]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x128>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d036      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d031      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a39      	ldr	r2, [pc, #228]	@ (80057ac <DMA_CalcBaseAndBitshift+0x130>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d02c      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a38      	ldr	r2, [pc, #224]	@ (80057b0 <DMA_CalcBaseAndBitshift+0x134>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d027      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a36      	ldr	r2, [pc, #216]	@ (80057b4 <DMA_CalcBaseAndBitshift+0x138>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d022      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a35      	ldr	r2, [pc, #212]	@ (80057b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01d      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a33      	ldr	r2, [pc, #204]	@ (80057bc <DMA_CalcBaseAndBitshift+0x140>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d018      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a32      	ldr	r2, [pc, #200]	@ (80057c0 <DMA_CalcBaseAndBitshift+0x144>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d013      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a30      	ldr	r2, [pc, #192]	@ (80057c4 <DMA_CalcBaseAndBitshift+0x148>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00e      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2f      	ldr	r2, [pc, #188]	@ (80057c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2d      	ldr	r2, [pc, #180]	@ (80057cc <DMA_CalcBaseAndBitshift+0x150>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <DMA_CalcBaseAndBitshift+0xa8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2c      	ldr	r2, [pc, #176]	@ (80057d0 <DMA_CalcBaseAndBitshift+0x154>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <DMA_CalcBaseAndBitshift+0xac>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <DMA_CalcBaseAndBitshift+0xae>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d024      	beq.n	8005778 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	3b10      	subs	r3, #16
 8005736:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <DMA_CalcBaseAndBitshift+0x158>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	4a24      	ldr	r2, [pc, #144]	@ (80057d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005748:	5cd3      	ldrb	r3, [r2, r3]
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d908      	bls.n	8005768 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <DMA_CalcBaseAndBitshift+0x160>)
 800575e:	4013      	ands	r3, r2
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	659a      	str	r2, [r3, #88]	@ 0x58
 8005766:	e00d      	b.n	8005784 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <DMA_CalcBaseAndBitshift+0x160>)
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6593      	str	r3, [r2, #88]	@ 0x58
 8005776:	e005      	b.n	8005784 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40020010 	.word	0x40020010
 8005798:	40020028 	.word	0x40020028
 800579c:	40020040 	.word	0x40020040
 80057a0:	40020058 	.word	0x40020058
 80057a4:	40020070 	.word	0x40020070
 80057a8:	40020088 	.word	0x40020088
 80057ac:	400200a0 	.word	0x400200a0
 80057b0:	400200b8 	.word	0x400200b8
 80057b4:	40020410 	.word	0x40020410
 80057b8:	40020428 	.word	0x40020428
 80057bc:	40020440 	.word	0x40020440
 80057c0:	40020458 	.word	0x40020458
 80057c4:	40020470 	.word	0x40020470
 80057c8:	40020488 	.word	0x40020488
 80057cc:	400204a0 	.word	0x400204a0
 80057d0:	400204b8 	.word	0x400204b8
 80057d4:	aaaaaaab 	.word	0xaaaaaaab
 80057d8:	08013f84 	.word	0x08013f84
 80057dc:	fffffc00 	.word	0xfffffc00

080057e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d120      	bne.n	8005836 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d858      	bhi.n	80058ae <DMA_CheckFifoParam+0xce>
 80057fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <DMA_CheckFifoParam+0x24>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005815 	.word	0x08005815
 8005808:	08005827 	.word	0x08005827
 800580c:	08005815 	.word	0x08005815
 8005810:	080058af 	.word	0x080058af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d048      	beq.n	80058b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005824:	e045      	b.n	80058b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800582e:	d142      	bne.n	80058b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005834:	e03f      	b.n	80058b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583e:	d123      	bne.n	8005888 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	2b03      	cmp	r3, #3
 8005846:	d838      	bhi.n	80058ba <DMA_CheckFifoParam+0xda>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <DMA_CheckFifoParam+0x70>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005861 	.word	0x08005861
 8005854:	08005867 	.word	0x08005867
 8005858:	08005861 	.word	0x08005861
 800585c:	08005879 	.word	0x08005879
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
        break;
 8005864:	e030      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d025      	beq.n	80058be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005876:	e022      	b.n	80058be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005880:	d11f      	bne.n	80058c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005886:	e01c      	b.n	80058c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	2b02      	cmp	r3, #2
 800588e:	d902      	bls.n	8005896 <DMA_CheckFifoParam+0xb6>
 8005890:	2b03      	cmp	r3, #3
 8005892:	d003      	beq.n	800589c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005894:	e018      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
        break;
 800589a:	e015      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
    break;
 80058ac:	e00b      	b.n	80058c6 <DMA_CheckFifoParam+0xe6>
        break;
 80058ae:	bf00      	nop
 80058b0:	e00a      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        break;
 80058b2:	bf00      	nop
 80058b4:	e008      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        break;
 80058b6:	bf00      	nop
 80058b8:	e006      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        break;
 80058ba:	bf00      	nop
 80058bc:	e004      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        break;
 80058be:	bf00      	nop
 80058c0:	e002      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <DMA_CheckFifoParam+0xe8>
    break;
 80058c6:	bf00      	nop
    }
  }

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a38      	ldr	r2, [pc, #224]	@ (80059cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a36      	ldr	r2, [pc, #216]	@ (80059d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01d      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a35      	ldr	r2, [pc, #212]	@ (80059d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a33      	ldr	r2, [pc, #204]	@ (80059d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2f      	ldr	r2, [pc, #188]	@ (80059e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2d      	ldr	r2, [pc, #180]	@ (80059e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01a      	beq.n	8005976 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3b08      	subs	r3, #8
 8005948:	4a28      	ldr	r2, [pc, #160]	@ (80059ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	091b      	lsrs	r3, r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005964:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	2201      	movs	r2, #1
 800596e:	409a      	lsls	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005974:	e024      	b.n	80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b10      	subs	r3, #16
 800597e:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d806      	bhi.n	800599e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d902      	bls.n	800599e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3308      	adds	r3, #8
 800599c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4b18      	ldr	r3, [pc, #96]	@ (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2201      	movs	r2, #1
 80059ba:	409a      	lsls	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	58025408 	.word	0x58025408
 80059d0:	5802541c 	.word	0x5802541c
 80059d4:	58025430 	.word	0x58025430
 80059d8:	58025444 	.word	0x58025444
 80059dc:	58025458 	.word	0x58025458
 80059e0:	5802546c 	.word	0x5802546c
 80059e4:	58025480 	.word	0x58025480
 80059e8:	58025494 	.word	0x58025494
 80059ec:	cccccccd 	.word	0xcccccccd
 80059f0:	16009600 	.word	0x16009600
 80059f4:	58025880 	.word	0x58025880
 80059f8:	aaaaaaab 	.word	0xaaaaaaab
 80059fc:	400204b8 	.word	0x400204b8
 8005a00:	4002040f 	.word	0x4002040f
 8005a04:	10008200 	.word	0x10008200
 8005a08:	40020880 	.word	0x40020880

08005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04a      	beq.n	8005ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d847      	bhi.n	8005ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a24      	ldr	r2, [pc, #144]	@ (8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01d      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a94:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a96:	e009      	b.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a11      	ldr	r2, [pc, #68]	@ (8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005aaa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	58025408 	.word	0x58025408
 8005ac8:	5802541c 	.word	0x5802541c
 8005acc:	58025430 	.word	0x58025430
 8005ad0:	58025444 	.word	0x58025444
 8005ad4:	58025458 	.word	0x58025458
 8005ad8:	5802546c 	.word	0x5802546c
 8005adc:	58025480 	.word	0x58025480
 8005ae0:	58025494 	.word	0x58025494
 8005ae4:	1600963f 	.word	0x1600963f
 8005ae8:	58025940 	.word	0x58025940
 8005aec:	1000823f 	.word	0x1000823f
 8005af0:	40020940 	.word	0x40020940

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	@ 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b02:	4b86      	ldr	r3, [pc, #536]	@ (8005d1c <HAL_GPIO_Init+0x228>)
 8005b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b06:	e18c      	b.n	8005e22 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 817e 	beq.w	8005e1c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d005      	beq.n	8005b38 <HAL_GPIO_Init+0x44>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d130      	bne.n	8005b9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b6e:	2201      	movs	r2, #1
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0201 	and.w	r2, r3, #1
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d017      	beq.n	8005bd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d123      	bne.n	8005c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	08da      	lsrs	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3208      	adds	r2, #8
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	08da      	lsrs	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3208      	adds	r2, #8
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	2203      	movs	r2, #3
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0203 	and.w	r2, r3, #3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80d8 	beq.w	8005e1c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d20 <HAL_GPIO_Init+0x22c>)
 8005c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c72:	4a2b      	ldr	r2, [pc, #172]	@ (8005d20 <HAL_GPIO_Init+0x22c>)
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c7c:	4b28      	ldr	r3, [pc, #160]	@ (8005d20 <HAL_GPIO_Init+0x22c>)
 8005c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c8a:	4a26      	ldr	r2, [pc, #152]	@ (8005d24 <HAL_GPIO_Init+0x230>)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	3302      	adds	r3, #2
 8005c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <HAL_GPIO_Init+0x234>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d04a      	beq.n	8005d4c <HAL_GPIO_Init+0x258>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_GPIO_Init+0x238>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02b      	beq.n	8005d16 <HAL_GPIO_Init+0x222>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d30 <HAL_GPIO_Init+0x23c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d025      	beq.n	8005d12 <HAL_GPIO_Init+0x21e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <HAL_GPIO_Init+0x240>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <HAL_GPIO_Init+0x21a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <HAL_GPIO_Init+0x244>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d019      	beq.n	8005d0a <HAL_GPIO_Init+0x216>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <HAL_GPIO_Init+0x248>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_GPIO_Init+0x212>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <HAL_GPIO_Init+0x24c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00d      	beq.n	8005d02 <HAL_GPIO_Init+0x20e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <HAL_GPIO_Init+0x250>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <HAL_GPIO_Init+0x20a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	@ (8005d48 <HAL_GPIO_Init+0x254>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d101      	bne.n	8005cfa <HAL_GPIO_Init+0x206>
 8005cf6:	2309      	movs	r3, #9
 8005cf8:	e029      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005cfa:	230a      	movs	r3, #10
 8005cfc:	e027      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005cfe:	2307      	movs	r3, #7
 8005d00:	e025      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d02:	2306      	movs	r3, #6
 8005d04:	e023      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d06:	2305      	movs	r3, #5
 8005d08:	e021      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d0a:	2304      	movs	r3, #4
 8005d0c:	e01f      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e01d      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e01b      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e019      	b.n	8005d4e <HAL_GPIO_Init+0x25a>
 8005d1a:	bf00      	nop
 8005d1c:	58000080 	.word	0x58000080
 8005d20:	58024400 	.word	0x58024400
 8005d24:	58000400 	.word	0x58000400
 8005d28:	58020000 	.word	0x58020000
 8005d2c:	58020400 	.word	0x58020400
 8005d30:	58020800 	.word	0x58020800
 8005d34:	58020c00 	.word	0x58020c00
 8005d38:	58021000 	.word	0x58021000
 8005d3c:	58021400 	.word	0x58021400
 8005d40:	58021800 	.word	0x58021800
 8005d44:	58021c00 	.word	0x58021c00
 8005d48:	58022400 	.word	0x58022400
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	f002 0203 	and.w	r2, r2, #3
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	4093      	lsls	r3, r2
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d5e:	4938      	ldr	r1, [pc, #224]	@ (8005e40 <HAL_GPIO_Init+0x34c>)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4013      	ands	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f ae6b 	bne.w	8005b08 <HAL_GPIO_Init+0x14>
  }
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	3724      	adds	r7, #36	@ 0x24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	58000400 	.word	0x58000400

08005e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
 8005e50:	4613      	mov	r3, r2
 8005e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e54:	787b      	ldrb	r3, [r7, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e60:	e003      	b.n	8005e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	041a      	lsls	r2, r3, #16
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	619a      	str	r2, [r3, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e08b      	b.n	8005fa2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fb fbf4 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	@ 0x24
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	e006      	b.n	8005f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d108      	bne.n	8005f1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f16:	605a      	str	r2, [r3, #4]
 8005f18:	e007      	b.n	8005f2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b1d      	ldr	r3, [pc, #116]	@ (8005fac <HAL_I2C_Init+0x134>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69d9      	ldr	r1, [r3, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	02008000 	.word	0x02008000

08005fb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d138      	bne.n	8006038 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e032      	b.n	800603a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2224      	movs	r2, #36	@ 0x24
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0201 	bic.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006002:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b20      	cmp	r3, #32
 800605a:	d139      	bne.n	80060d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006066:	2302      	movs	r3, #2
 8006068:	e033      	b.n	80060d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2224      	movs	r2, #36	@ 0x24
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006098:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af02      	add	r7, sp, #8
 80060e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0fe      	b.n	80062ee <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f00a fe37 	bl	8010d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2203      	movs	r2, #3
 800610e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f007 f9e1 	bl	800d4de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7c1a      	ldrb	r2, [r3, #16]
 8006124:	f88d 2000 	strb.w	r2, [sp]
 8006128:	3304      	adds	r3, #4
 800612a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800612c:	f007 f8b2 	bl	800d294 <USB_CoreInit>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e0d5      	b.n	80062ee <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f007 f9d9 	bl	800d500 <USB_SetCurrentMode>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0c6      	b.n	80062ee <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e04a      	b.n	80061fc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	3315      	adds	r3, #21
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	3314      	adds	r3, #20
 800618a:	7bfa      	ldrb	r2, [r7, #15]
 800618c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	b298      	uxth	r0, r3
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	332e      	adds	r3, #46	@ 0x2e
 80061a2:	4602      	mov	r2, r0
 80061a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	3318      	adds	r3, #24
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	331c      	adds	r3, #28
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061ce:	7bfa      	ldrb	r2, [r7, #15]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	3320      	adds	r3, #32
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061e2:	7bfa      	ldrb	r2, [r7, #15]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3324      	adds	r3, #36	@ 0x24
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	3301      	adds	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	791b      	ldrb	r3, [r3, #4]
 8006200:	7bfa      	ldrb	r2, [r7, #15]
 8006202:	429a      	cmp	r2, r3
 8006204:	d3af      	bcc.n	8006166 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
 800620a:	e044      	b.n	8006296 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800620c:	7bfa      	ldrb	r2, [r7, #15]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	3301      	adds	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	791b      	ldrb	r3, [r3, #4]
 800629a:	7bfa      	ldrb	r2, [r7, #15]
 800629c:	429a      	cmp	r2, r3
 800629e:	d3b5      	bcc.n	800620c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7c1a      	ldrb	r2, [r3, #16]
 80062a8:	f88d 2000 	strb.w	r2, [sp]
 80062ac:	3304      	adds	r3, #4
 80062ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b0:	f007 f972 	bl	800d598 <USB_DevInit>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e013      	b.n	80062ee <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d102      	bne.n	80062e2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f96d 	bl	80075bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f008 f9b1 	bl	800e64e <USB_DevDisconnect>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_PCD_Start+0x1c>
 800630e:	2302      	movs	r3, #2
 8006310:	e022      	b.n	8006358 <HAL_PCD_Start+0x62>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f007 f8bc 	bl	800d4bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f008 f95f 	bl	800e60c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b08d      	sub	sp, #52	@ 0x34
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f008 fa1d 	bl	800e7b6 <USB_GetMode>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 84b9 	bne.w	8006cf6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f008 f981 	bl	800e690 <USB_ReadInterrupts>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 84af 	beq.w	8006cf4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0a1b      	lsrs	r3, r3, #8
 80063a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f008 f96e 	bl	800e690 <USB_ReadInterrupts>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d107      	bne.n	80063ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f002 0202 	and.w	r2, r2, #2
 80063cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f008 f95c 	bl	800e690 <USB_ReadInterrupts>
 80063d8:	4603      	mov	r3, r0
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d161      	bne.n	80064a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0210 	bic.w	r2, r2, #16
 80063f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	0c5b      	lsrs	r3, r3, #17
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	2b02      	cmp	r3, #2
 800641c:	d124      	bne.n	8006468 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d035      	beq.n	8006496 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	6a38      	ldr	r0, [r7, #32]
 800643e:	f007 ff93 	bl	800e368 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800644e:	441a      	add	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	091b      	lsrs	r3, r3, #4
 800645c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006460:	441a      	add	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	615a      	str	r2, [r3, #20]
 8006466:	e016      	b.n	8006496 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	0c5b      	lsrs	r3, r3, #17
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	2b06      	cmp	r3, #6
 8006472:	d110      	bne.n	8006496 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800647a:	2208      	movs	r2, #8
 800647c:	4619      	mov	r1, r3
 800647e:	6a38      	ldr	r0, [r7, #32]
 8006480:	f007 ff72 	bl	800e368 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0210 	orr.w	r2, r2, #16
 80064a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f008 f8f0 	bl	800e690 <USB_ReadInterrupts>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064ba:	f040 80a7 	bne.w	800660c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f008 f8f5 	bl	800e6b6 <USB_ReadDevAllOutEpInterrupt>
 80064cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80064ce:	e099      	b.n	8006604 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 808e 	beq.w	80065f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f008 f919 	bl	800e71e <USB_ReadDevOutEPInterrupt>
 80064ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00c      	beq.n	8006512 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006504:	461a      	mov	r2, r3
 8006506:	2301      	movs	r3, #1
 8006508:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800650a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fecf 	bl	80072b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00c      	beq.n	8006536 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006528:	461a      	mov	r2, r3
 800652a:	2308      	movs	r3, #8
 800652c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800652e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 ffa5 	bl	8007480 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	2310      	movs	r3, #16
 8006550:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d030      	beq.n	80065be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006564:	2b80      	cmp	r3, #128	@ 0x80
 8006566:	d109      	bne.n	800657c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800657a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800657c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	3304      	adds	r3, #4
 8006590:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	78db      	ldrb	r3, [r3, #3]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d108      	bne.n	80065ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f00a fcde 	bl	8010f68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	2302      	movs	r3, #2
 80065bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2320      	movs	r3, #32
 80065d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	461a      	mov	r2, r3
 80065f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	3301      	adds	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	f47f af62 	bne.w	80064d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f008 f83d 	bl	800e690 <USB_ReadInterrupts>
 8006616:	4603      	mov	r3, r0
 8006618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800661c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006620:	f040 80db 	bne.w	80067da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f008 f85e 	bl	800e6ea <USB_ReadDevAllInEpInterrupt>
 800662e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006634:	e0cd      	b.n	80067d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80c2 	beq.w	80067c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f008 f884 	bl	800e75a <USB_ReadDevInEPInterrupt>
 8006652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d057      	beq.n	800670e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	2201      	movs	r2, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	43db      	mvns	r3, r3
 8006678:	69f9      	ldr	r1, [r7, #28]
 800667a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800667e:	4013      	ands	r3, r2
 8006680:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668e:	461a      	mov	r2, r3
 8006690:	2301      	movs	r3, #1
 8006692:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	799b      	ldrb	r3, [r3, #6]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d132      	bne.n	8006702 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	3320      	adds	r3, #32
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4403      	add	r3, r0
 80066bc:	331c      	adds	r3, #28
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4419      	add	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4403      	add	r3, r0
 80066d0:	3320      	adds	r3, #32
 80066d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d113      	bne.n	8006702 <HAL_PCD_IRQHandler+0x3a2>
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3324      	adds	r3, #36	@ 0x24
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d108      	bne.n	8006702 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80066fa:	461a      	mov	r2, r3
 80066fc:	2101      	movs	r1, #1
 80066fe:	f008 f88d 	bl	800e81c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	b2db      	uxtb	r3, r3
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f00a fba8 	bl	8010e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	2308      	movs	r3, #8
 8006728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d008      	beq.n	8006746 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	2310      	movs	r3, #16
 8006744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d008      	beq.n	8006762 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	461a      	mov	r2, r3
 800675e:	2340      	movs	r3, #64	@ 0x40
 8006760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d023      	beq.n	80067b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800676c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800676e:	6a38      	ldr	r0, [r7, #32]
 8006770:	f007 f870 	bl	800d854 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	3310      	adds	r3, #16
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	78db      	ldrb	r3, [r3, #3]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d108      	bne.n	80067a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	b2db      	uxtb	r3, r3
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f00a fbf5 	bl	8010f8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	2302      	movs	r3, #2
 80067b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80067be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fce8 	bl	8007196 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	3301      	adds	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f af2e 	bne.w	8006636 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f007 ff56 	bl	800e690 <USB_ReadInterrupts>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ee:	d122      	bne.n	8006836 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800680a:	2b01      	cmp	r3, #1
 800680c:	d108      	bne.n	8006820 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006816:	2100      	movs	r1, #0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fef3 	bl	8007604 <HAL_PCDEx_LPM_Callback>
 800681e:	e002      	b.n	8006826 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f00a fb93 	bl	8010f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695a      	ldr	r2, [r3, #20]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f007 ff28 	bl	800e690 <USB_ReadInterrupts>
 8006840:	4603      	mov	r3, r0
 8006842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684a:	d112      	bne.n	8006872 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d102      	bne.n	8006862 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f00a fb4f 	bl	8010f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006870:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f007 ff0a 	bl	800e690 <USB_ReadInterrupts>
 800687c:	4603      	mov	r3, r0
 800687e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006886:	d121      	bne.n	80068cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006896:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d111      	bne.n	80068c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	f003 020f 	and.w	r2, r3, #15
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80068bc:	2101      	movs	r1, #1
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fea0 	bl	8007604 <HAL_PCDEx_LPM_Callback>
 80068c4:	e002      	b.n	80068cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f00a fb1a 	bl	8010f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f007 fedd 	bl	800e690 <USB_ReadInterrupts>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e0:	f040 80b7 	bne.w	8006a52 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2110      	movs	r1, #16
 80068fe:	4618      	mov	r0, r3
 8006900:	f006 ffa8 	bl	800d854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006904:	2300      	movs	r3, #0
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	e046      	b.n	8006998 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006916:	461a      	mov	r2, r3
 8006918:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800691c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800691e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006938:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800693c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800693e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006950:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800698c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006990:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	3301      	adds	r3, #1
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	791b      	ldrb	r3, [r3, #4]
 800699c:	461a      	mov	r2, r3
 800699e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d3b2      	bcc.n	800690a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80069b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7bdb      	ldrb	r3, [r3, #15]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d016      	beq.n	80069ee <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069d0:	f043 030b 	orr.w	r3, r3, #11
 80069d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069e6:	f043 030b 	orr.w	r3, r3, #11
 80069ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80069ec:	e015      	b.n	8006a1a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	695a      	ldr	r2, [r3, #20]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fc:	4619      	mov	r1, r3
 80069fe:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006a02:	4313      	orrs	r3, r2
 8006a04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a14:	f043 030b 	orr.w	r3, r3, #11
 8006a18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a28:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f007 feed 	bl	800e81c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695a      	ldr	r2, [r3, #20]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f007 fe1a 	bl	800e690 <USB_ReadInterrupts>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a66:	d123      	bne.n	8006ab0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f007 feb1 	bl	800e7d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f006 ff65 	bl	800d946 <USB_GetDevSpeed>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681c      	ldr	r4, [r3, #0]
 8006a88:	f001 fd1c 	bl	80084c4 <HAL_RCC_GetHCLKFreq>
 8006a8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a92:	461a      	mov	r2, r3
 8006a94:	4620      	mov	r0, r4
 8006a96:	f006 fc6f 	bl	800d378 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f00a fa07 	bl	8010eae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f007 fdeb 	bl	800e690 <USB_ReadInterrupts>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10a      	bne.n	8006ada <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f00a f9e4 	bl	8010e92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695a      	ldr	r2, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f002 0208 	and.w	r2, r2, #8
 8006ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f007 fdd6 	bl	800e690 <USB_ReadInterrupts>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aea:	2b80      	cmp	r3, #128	@ 0x80
 8006aec:	d123      	bne.n	8006b36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006afa:	2301      	movs	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afe:	e014      	b.n	8006b2a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d105      	bne.n	8006b24 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb08 	bl	8007134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	3301      	adds	r3, #1
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	791b      	ldrb	r3, [r3, #4]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d3e4      	bcc.n	8006b00 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f007 fda8 	bl	800e690 <USB_ReadInterrupts>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b4a:	d13c      	bne.n	8006bc6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b50:	e02b      	b.n	8006baa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b66:	4613      	mov	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3318      	adds	r3, #24
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d115      	bne.n	8006ba4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006b78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da12      	bge.n	8006ba4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	3317      	adds	r3, #23
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fac8 	bl	8007134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	791b      	ldrb	r3, [r3, #4]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d3cd      	bcc.n	8006b52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f007 fd60 	bl	800e690 <USB_ReadInterrupts>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bda:	d156      	bne.n	8006c8a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bdc:	2301      	movs	r3, #1
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be0:	e045      	b.n	8006c6e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d12e      	bne.n	8006c68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	da2b      	bge.n	8006c68 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006c1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d121      	bne.n	8006c68 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c64:	6053      	str	r3, [r2, #4]
            break;
 8006c66:	e008      	b.n	8006c7a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d3b3      	bcc.n	8006be2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f007 fcfe 	bl	800e690 <USB_ReadInterrupts>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f00a f985 	bl	8010fb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695a      	ldr	r2, [r3, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f007 fce8 	bl	800e690 <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d115      	bne.n	8006cf6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f00a f975 	bl	8010fcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	e000      	b.n	8006cf6 <HAL_PCD_IRQHandler+0x996>
      return;
 8006cf4:	bf00      	nop
    }
  }
}
 8006cf6:	3734      	adds	r7, #52	@ 0x34
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}

08006cfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_PCD_SetAddress+0x1a>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e012      	b.n	8006d3c <HAL_PCD_SetAddress+0x40>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f007 fc47 	bl	800e5c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	70fb      	strb	r3, [r7, #3]
 8006d56:	460b      	mov	r3, r1
 8006d58:	803b      	strh	r3, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da0f      	bge.n	8006d8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	3310      	adds	r3, #16
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3304      	adds	r3, #4
 8006d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	705a      	strb	r2, [r3, #1]
 8006d88:	e00f      	b.n	8006daa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	f003 020f 	and.w	r2, r3, #15
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3304      	adds	r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006db6:	883a      	ldrh	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	78ba      	ldrb	r2, [r7, #2]
 8006dc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006dd4:	78bb      	ldrb	r3, [r7, #2]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d102      	bne.n	8006de0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_PCD_EP_Open+0xaa>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e00e      	b.n	8006e0c <HAL_PCD_EP_Open+0xc8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f006 fdc7 	bl	800d990 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da0f      	bge.n	8006e48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	4613      	mov	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	3310      	adds	r3, #16
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	705a      	strb	r2, [r3, #1]
 8006e46:	e00f      	b.n	8006e68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3304      	adds	r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_PCD_EP_Close+0x6e>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e00e      	b.n	8006ea0 <HAL_PCD_EP_Close+0x8c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f006 fe05 	bl	800daa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	3304      	adds	r3, #4
 8006ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	799b      	ldrb	r3, [r3, #6]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d102      	bne.n	8006f04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6979      	ldr	r1, [r7, #20]
 8006f10:	f006 fea2 	bl	800dc58 <USB_EPStartXfer>

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006f40:	681b      	ldr	r3, [r3, #0]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	f003 020f 	and.w	r2, r3, #15
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	3304      	adds	r3, #4
 8006f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	799b      	ldrb	r3, [r3, #6]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d102      	bne.n	8006fa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	799b      	ldrb	r3, [r3, #6]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6979      	ldr	r1, [r7, #20]
 8006fb4:	f006 fe50 	bl	800dc58 <USB_EPStartXfer>

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7912      	ldrb	r2, [r2, #4]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e04f      	b.n	8007080 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da0f      	bge.n	8007008 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	4613      	mov	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	705a      	strb	r2, [r3, #1]
 8007006:	e00d      	b.n	8007024 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	3304      	adds	r3, #4
 800701c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	b2da      	uxtb	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_PCD_EP_SetStall+0x82>
 8007040:	2302      	movs	r3, #2
 8007042:	e01d      	b.n	8007080 <HAL_PCD_EP_SetStall+0xbe>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	4618      	mov	r0, r3
 8007054:	f007 f9e0 	bl	800e418 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7999      	ldrb	r1, [r3, #6]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007070:	461a      	mov	r2, r3
 8007072:	f007 fbd3 	bl	800e81c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	7912      	ldrb	r2, [r2, #4]
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e042      	b.n	800712c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da0f      	bge.n	80070ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	3310      	adds	r3, #16
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4413      	add	r3, r2
 80070c2:	3304      	adds	r3, #4
 80070c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	705a      	strb	r2, [r3, #1]
 80070cc:	e00f      	b.n	80070ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	3304      	adds	r3, #4
 80070e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_PCD_EP_ClrStall+0x86>
 800710a:	2302      	movs	r3, #2
 800710c:	e00e      	b.n	800712c <HAL_PCD_EP_ClrStall+0xa4>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	4618      	mov	r0, r3
 800711e:	f007 f9e9 	bl	800e4f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da0c      	bge.n	8007162 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 020f 	and.w	r2, r3, #15
 800714e:	4613      	mov	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	3310      	adds	r3, #16
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	4413      	add	r3, r2
 800715c:	3304      	adds	r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e00c      	b.n	800717c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68f9      	ldr	r1, [r7, #12]
 8007182:	4618      	mov	r0, r3
 8007184:	f007 f808 	bl	800e198 <USB_EPStopXfer>
 8007188:	4603      	mov	r3, r0
 800718a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800718c:	7afb      	ldrb	r3, [r7, #11]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b08a      	sub	sp, #40	@ 0x28
 800719a:	af02      	add	r7, sp, #8
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	3310      	adds	r3, #16
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	695a      	ldr	r2, [r3, #20]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d901      	bls.n	80071ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e06b      	b.n	80072a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d902      	bls.n	80071ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	3303      	adds	r3, #3
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071f2:	e02a      	b.n	800724a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	429a      	cmp	r2, r3
 8007208:	d902      	bls.n	8007210 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3303      	adds	r3, #3
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68d9      	ldr	r1, [r3, #12]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4603      	mov	r3, r0
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f007 f85d 	bl	800e2ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	441a      	add	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	429a      	cmp	r2, r3
 800725e:	d809      	bhi.n	8007274 <PCD_WriteEmptyTxFifo+0xde>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007268:	429a      	cmp	r2, r3
 800726a:	d203      	bcs.n	8007274 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1bf      	bne.n	80071f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	429a      	cmp	r2, r3
 800727e:	d811      	bhi.n	80072a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	2201      	movs	r2, #1
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	43db      	mvns	r3, r3
 800729a:	6939      	ldr	r1, [r7, #16]
 800729c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072a0:	4013      	ands	r3, r2
 80072a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	333c      	adds	r3, #60	@ 0x3c
 80072c8:	3304      	adds	r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	799b      	ldrb	r3, [r3, #6]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d17b      	bne.n	80073de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d015      	beq.n	800731c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4a61      	ldr	r2, [pc, #388]	@ (8007478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	f240 80b9 	bls.w	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80b3 	beq.w	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	461a      	mov	r2, r3
 8007314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007318:	6093      	str	r3, [r2, #8]
 800731a:	e0a7      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	461a      	mov	r2, r3
 8007334:	2320      	movs	r3, #32
 8007336:	6093      	str	r3, [r2, #8]
 8007338:	e098      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 8093 	bne.w	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	4a4b      	ldr	r2, [pc, #300]	@ (8007478 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d90f      	bls.n	800736e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736a:	6093      	str	r3, [r2, #8]
 800736c:	e07e      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	4413      	add	r3, r2
 8007380:	3304      	adds	r3, #4
 8007382:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	0159      	lsls	r1, r3, #5
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	440b      	add	r3, r1
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d114      	bne.n	80073d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073b8:	461a      	mov	r2, r3
 80073ba:	2101      	movs	r1, #1
 80073bc:	f007 fa2e 	bl	800e81c <USB_EP0_OutStart>
 80073c0:	e006      	b.n	80073d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	441a      	add	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f009 fd26 	bl	8010e28 <HAL_PCD_DataOutStageCallback>
 80073dc:	e046      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	4a26      	ldr	r2, [pc, #152]	@ (800747c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d124      	bne.n	8007430 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	461a      	mov	r2, r3
 80073fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007402:	6093      	str	r3, [r2, #8]
 8007404:	e032      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	461a      	mov	r2, r3
 800741e:	2320      	movs	r3, #32
 8007420:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f009 fcfd 	bl	8010e28 <HAL_PCD_DataOutStageCallback>
 800742e:	e01d      	b.n	800746c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d114      	bne.n	8007460 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007458:	461a      	mov	r2, r3
 800745a:	2100      	movs	r1, #0
 800745c:	f007 f9de 	bl	800e81c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f009 fcde 	bl	8010e28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	4f54300a 	.word	0x4f54300a
 800747c:	4f54310a 	.word	0x4f54310a

08007480 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	333c      	adds	r3, #60	@ 0x3c
 8007498:	3304      	adds	r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a15      	ldr	r2, [pc, #84]	@ (8007508 <PCD_EP_OutSetupPacket_int+0x88>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d90e      	bls.n	80074d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074cc:	461a      	mov	r2, r3
 80074ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f009 fc95 	bl	8010e04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007508 <PCD_EP_OutSetupPacket_int+0x88>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d90c      	bls.n	80074fc <PCD_EP_OutSetupPacket_int+0x7c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	799b      	ldrb	r3, [r3, #6]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d108      	bne.n	80074fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074f4:	461a      	mov	r2, r3
 80074f6:	2101      	movs	r1, #1
 80074f8:	f007 f990 	bl	800e81c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	4f54300a 	.word	0x4f54300a

0800750c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
 8007518:	4613      	mov	r3, r2
 800751a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007522:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d107      	bne.n	800753a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800752a:	883b      	ldrh	r3, [r7, #0]
 800752c:	0419      	lsls	r1, r3, #16
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	430a      	orrs	r2, r1
 8007536:	629a      	str	r2, [r3, #40]	@ 0x28
 8007538:	e028      	b.n	800758c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4413      	add	r3, r2
 8007546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	e00d      	b.n	800756a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	3340      	adds	r3, #64	@ 0x40
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	3301      	adds	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	7bfa      	ldrb	r2, [r7, #15]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	3b01      	subs	r3, #1
 8007570:	429a      	cmp	r2, r3
 8007572:	d3ec      	bcc.n	800754e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007574:	883b      	ldrh	r3, [r7, #0]
 8007576:	0418      	lsls	r0, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	3b01      	subs	r3, #1
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4302      	orrs	r2, r0
 8007584:	3340      	adds	r3, #64	@ 0x40
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075ea:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_PCDEx_ActivateLPM+0x44>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	10000003 	.word	0x10000003

08007604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007624:	4b19      	ldr	r3, [pc, #100]	@ (800768c <HAL_PWREx_ConfigSupply+0x70>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b04      	cmp	r3, #4
 800762e:	d00a      	beq.n	8007646 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007630:	4b16      	ldr	r3, [pc, #88]	@ (800768c <HAL_PWREx_ConfigSupply+0x70>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d001      	beq.n	8007642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e01f      	b.n	8007682 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e01d      	b.n	8007682 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007646:	4b11      	ldr	r3, [pc, #68]	@ (800768c <HAL_PWREx_ConfigSupply+0x70>)
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f023 0207 	bic.w	r2, r3, #7
 800764e:	490f      	ldr	r1, [pc, #60]	@ (800768c <HAL_PWREx_ConfigSupply+0x70>)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4313      	orrs	r3, r2
 8007654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007656:	f7fa feff 	bl	8002458 <HAL_GetTick>
 800765a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800765c:	e009      	b.n	8007672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800765e:	f7fa fefb 	bl	8002458 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800766c:	d901      	bls.n	8007672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e007      	b.n	8007682 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007672:	4b06      	ldr	r3, [pc, #24]	@ (800768c <HAL_PWREx_ConfigSupply+0x70>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767e:	d1ee      	bne.n	800765e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	58024800 	.word	0x58024800

08007690 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a04      	ldr	r2, [pc, #16]	@ (80076ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800769a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800769e:	60d3      	str	r3, [r2, #12]
}
 80076a0:	bf00      	nop
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	58024800 	.word	0x58024800

080076b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08c      	sub	sp, #48	@ 0x30
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e3c8      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8087 	beq.w	80077de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d0:	4b88      	ldr	r3, [pc, #544]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076da:	4b86      	ldr	r3, [pc, #536]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d007      	beq.n	80076f6 <HAL_RCC_OscConfig+0x46>
 80076e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e8:	2b18      	cmp	r3, #24
 80076ea:	d110      	bne.n	800770e <HAL_RCC_OscConfig+0x5e>
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d10b      	bne.n	800770e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f6:	4b7f      	ldr	r3, [pc, #508]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d06c      	beq.n	80077dc <HAL_RCC_OscConfig+0x12c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d168      	bne.n	80077dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e3a2      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007716:	d106      	bne.n	8007726 <HAL_RCC_OscConfig+0x76>
 8007718:	4b76      	ldr	r3, [pc, #472]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a75      	ldr	r2, [pc, #468]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800771e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	e02e      	b.n	8007784 <HAL_RCC_OscConfig+0xd4>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10c      	bne.n	8007748 <HAL_RCC_OscConfig+0x98>
 800772e:	4b71      	ldr	r3, [pc, #452]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a70      	ldr	r2, [pc, #448]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b6e      	ldr	r3, [pc, #440]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6d      	ldr	r2, [pc, #436]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e01d      	b.n	8007784 <HAL_RCC_OscConfig+0xd4>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007750:	d10c      	bne.n	800776c <HAL_RCC_OscConfig+0xbc>
 8007752:	4b68      	ldr	r3, [pc, #416]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a67      	ldr	r2, [pc, #412]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	4b65      	ldr	r3, [pc, #404]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a64      	ldr	r2, [pc, #400]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e00b      	b.n	8007784 <HAL_RCC_OscConfig+0xd4>
 800776c:	4b61      	ldr	r3, [pc, #388]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a60      	ldr	r2, [pc, #384]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4b5e      	ldr	r3, [pc, #376]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a5d      	ldr	r2, [pc, #372]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800777e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d013      	beq.n	80077b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778c:	f7fa fe64 	bl	8002458 <HAL_GetTick>
 8007790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007794:	f7fa fe60 	bl	8002458 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b64      	cmp	r3, #100	@ 0x64
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e356      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077a6:	4b53      	ldr	r3, [pc, #332]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f0      	beq.n	8007794 <HAL_RCC_OscConfig+0xe4>
 80077b2:	e014      	b.n	80077de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fa fe50 	bl	8002458 <HAL_GetTick>
 80077b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077bc:	f7fa fe4c 	bl	8002458 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	@ 0x64
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e342      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077ce:	4b49      	ldr	r3, [pc, #292]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f0      	bne.n	80077bc <HAL_RCC_OscConfig+0x10c>
 80077da:	e000      	b.n	80077de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 808c 	beq.w	8007904 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ec:	4b41      	ldr	r3, [pc, #260]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077f6:	4b3f      	ldr	r3, [pc, #252]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_RCC_OscConfig+0x162>
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	2b18      	cmp	r3, #24
 8007806:	d137      	bne.n	8007878 <HAL_RCC_OscConfig+0x1c8>
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d132      	bne.n	8007878 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007812:	4b38      	ldr	r3, [pc, #224]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <HAL_RCC_OscConfig+0x17a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e314      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800782a:	4b32      	ldr	r3, [pc, #200]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f023 0219 	bic.w	r2, r3, #25
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	492f      	ldr	r1, [pc, #188]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007838:	4313      	orrs	r3, r2
 800783a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783c:	f7fa fe0c 	bl	8002458 <HAL_GetTick>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007844:	f7fa fe08 	bl	8002458 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e2fe      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007856:	4b27      	ldr	r3, [pc, #156]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007862:	4b24      	ldr	r3, [pc, #144]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	061b      	lsls	r3, r3, #24
 8007870:	4920      	ldr	r1, [pc, #128]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007872:	4313      	orrs	r3, r2
 8007874:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007876:	e045      	b.n	8007904 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d026      	beq.n	80078ce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007880:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f023 0219 	bic.w	r2, r3, #25
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4919      	ldr	r1, [pc, #100]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 800788e:	4313      	orrs	r3, r2
 8007890:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007892:	f7fa fde1 	bl	8002458 <HAL_GetTick>
 8007896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789a:	f7fa fddd 	bl	8002458 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e2d3      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ac:	4b11      	ldr	r3, [pc, #68]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b8:	4b0e      	ldr	r3, [pc, #56]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	490b      	ldr	r1, [pc, #44]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	604b      	str	r3, [r1, #4]
 80078cc:	e01a      	b.n	8007904 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a08      	ldr	r2, [pc, #32]	@ (80078f4 <HAL_RCC_OscConfig+0x244>)
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078da:	f7fa fdbd 	bl	8002458 <HAL_GetTick>
 80078de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078e0:	e00a      	b.n	80078f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fa fdb9 	bl	8002458 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d903      	bls.n	80078f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e2af      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
 80078f4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80078f8:	4b96      	ldr	r3, [pc, #600]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ee      	bne.n	80078e2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d06a      	beq.n	80079e6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007910:	4b90      	ldr	r3, [pc, #576]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007918:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800791a:	4b8e      	ldr	r3, [pc, #568]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b08      	cmp	r3, #8
 8007924:	d007      	beq.n	8007936 <HAL_RCC_OscConfig+0x286>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b18      	cmp	r3, #24
 800792a:	d11b      	bne.n	8007964 <HAL_RCC_OscConfig+0x2b4>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d116      	bne.n	8007964 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007936:	4b87      	ldr	r3, [pc, #540]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <HAL_RCC_OscConfig+0x29e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	2b80      	cmp	r3, #128	@ 0x80
 8007948:	d001      	beq.n	800794e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e282      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800794e:	4b81      	ldr	r3, [pc, #516]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	497d      	ldr	r1, [pc, #500]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 800795e:	4313      	orrs	r3, r2
 8007960:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007962:	e040      	b.n	80079e6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d023      	beq.n	80079b4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800796c:	4b79      	ldr	r3, [pc, #484]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a78      	ldr	r2, [pc, #480]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fa fd6e 	bl	8002458 <HAL_GetTick>
 800797c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007980:	f7fa fd6a 	bl	8002458 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e260      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007992:	4b70      	ldr	r3, [pc, #448]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800799e:	4b6d      	ldr	r3, [pc, #436]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	061b      	lsls	r3, r3, #24
 80079ac:	4969      	ldr	r1, [pc, #420]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60cb      	str	r3, [r1, #12]
 80079b2:	e018      	b.n	80079e6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80079b4:	4b67      	ldr	r3, [pc, #412]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a66      	ldr	r2, [pc, #408]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c0:	f7fa fd4a 	bl	8002458 <HAL_GetTick>
 80079c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079c8:	f7fa fd46 	bl	8002458 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e23c      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079da:	4b5e      	ldr	r3, [pc, #376]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d036      	beq.n	8007a60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d019      	beq.n	8007a2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079fa:	4b56      	ldr	r3, [pc, #344]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 80079fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fe:	4a55      	ldr	r2, [pc, #340]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a06:	f7fa fd27 	bl	8002458 <HAL_GetTick>
 8007a0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a0e:	f7fa fd23 	bl	8002458 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e219      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a20:	4b4c      	ldr	r3, [pc, #304]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0f0      	beq.n	8007a0e <HAL_RCC_OscConfig+0x35e>
 8007a2c:	e018      	b.n	8007a60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a2e:	4b49      	ldr	r3, [pc, #292]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a32:	4a48      	ldr	r2, [pc, #288]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3a:	f7fa fd0d 	bl	8002458 <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a40:	e008      	b.n	8007a54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a42:	f7fa fd09 	bl	8002458 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e1ff      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a54:	4b3f      	ldr	r3, [pc, #252]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f0      	bne.n	8007a42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d036      	beq.n	8007ada <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d019      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a74:	4b37      	ldr	r3, [pc, #220]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a36      	ldr	r2, [pc, #216]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a80:	f7fa fcea 	bl	8002458 <HAL_GetTick>
 8007a84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a88:	f7fa fce6 	bl	8002458 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e1dc      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0f0      	beq.n	8007a88 <HAL_RCC_OscConfig+0x3d8>
 8007aa6:	e018      	b.n	8007ada <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a29      	ldr	r2, [pc, #164]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ab2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ab4:	f7fa fcd0 	bl	8002458 <HAL_GetTick>
 8007ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007abc:	f7fa fccc 	bl	8002458 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e1c2      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ace:	4b21      	ldr	r3, [pc, #132]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8086 	beq.w	8007bf4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b58 <HAL_RCC_OscConfig+0x4a8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1a      	ldr	r2, [pc, #104]	@ (8007b58 <HAL_RCC_OscConfig+0x4a8>)
 8007aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007af2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007af4:	f7fa fcb0 	bl	8002458 <HAL_GetTick>
 8007af8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007afc:	f7fa fcac 	bl	8002458 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b64      	cmp	r3, #100	@ 0x64
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e1a2      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b0e:	4b12      	ldr	r3, [pc, #72]	@ (8007b58 <HAL_RCC_OscConfig+0x4a8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f0      	beq.n	8007afc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d106      	bne.n	8007b30 <HAL_RCC_OscConfig+0x480>
 8007b22:	4b0c      	ldr	r3, [pc, #48]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b26:	4a0b      	ldr	r2, [pc, #44]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b2e:	e032      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d111      	bne.n	8007b5c <HAL_RCC_OscConfig+0x4ac>
 8007b38:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3c:	4a05      	ldr	r2, [pc, #20]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b44:	4b03      	ldr	r3, [pc, #12]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b48:	4a02      	ldr	r2, [pc, #8]	@ (8007b54 <HAL_RCC_OscConfig+0x4a4>)
 8007b4a:	f023 0304 	bic.w	r3, r3, #4
 8007b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b50:	e021      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e6>
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	58024800 	.word	0x58024800
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b05      	cmp	r3, #5
 8007b62:	d10c      	bne.n	8007b7e <HAL_RCC_OscConfig+0x4ce>
 8007b64:	4b83      	ldr	r3, [pc, #524]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b68:	4a82      	ldr	r2, [pc, #520]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b6a:	f043 0304 	orr.w	r3, r3, #4
 8007b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b70:	4b80      	ldr	r3, [pc, #512]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b74:	4a7f      	ldr	r2, [pc, #508]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b7c:	e00b      	b.n	8007b96 <HAL_RCC_OscConfig+0x4e6>
 8007b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	4a7c      	ldr	r2, [pc, #496]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b84:	f023 0301 	bic.w	r3, r3, #1
 8007b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	4a79      	ldr	r2, [pc, #484]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007b90:	f023 0304 	bic.w	r3, r3, #4
 8007b94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d015      	beq.n	8007bca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9e:	f7fa fc5b 	bl	8002458 <HAL_GetTick>
 8007ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba4:	e00a      	b.n	8007bbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba6:	f7fa fc57 	bl	8002458 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e14b      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bbc:	4b6d      	ldr	r3, [pc, #436]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0ee      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x4f6>
 8007bc8:	e014      	b.n	8007bf4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bca:	f7fa fc45 	bl	8002458 <HAL_GetTick>
 8007bce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bd0:	e00a      	b.n	8007be8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd2:	f7fa fc41 	bl	8002458 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e135      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007be8:	4b62      	ldr	r3, [pc, #392]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1ee      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 812a 	beq.w	8007e52 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c06:	2b18      	cmp	r3, #24
 8007c08:	f000 80ba 	beq.w	8007d80 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	f040 8095 	bne.w	8007d40 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c16:	4b57      	ldr	r3, [pc, #348]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a56      	ldr	r2, [pc, #344]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c22:	f7fa fc19 	bl	8002458 <HAL_GetTick>
 8007c26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c2a:	f7fa fc15 	bl	8002458 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e10b      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f0      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c48:	4b4a      	ldr	r3, [pc, #296]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d78 <HAL_RCC_OscConfig+0x6c8>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c58:	0112      	lsls	r2, r2, #4
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	4945      	ldr	r1, [pc, #276]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c66:	3b01      	subs	r3, #1
 8007c68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c70:	3b01      	subs	r3, #1
 8007c72:	025b      	lsls	r3, r3, #9
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	041b      	lsls	r3, r3, #16
 8007c80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	061b      	lsls	r3, r3, #24
 8007c8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c92:	4938      	ldr	r1, [pc, #224]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007c98:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	4a35      	ldr	r2, [pc, #212]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ca4:	4b33      	ldr	r3, [pc, #204]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ca8:	4b34      	ldr	r3, [pc, #208]	@ (8007d7c <HAL_RCC_OscConfig+0x6cc>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007cb0:	00d2      	lsls	r2, r2, #3
 8007cb2:	4930      	ldr	r1, [pc, #192]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbc:	f023 020c 	bic.w	r2, r3, #12
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	492b      	ldr	r1, [pc, #172]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007cca:	4b2a      	ldr	r3, [pc, #168]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	f023 0202 	bic.w	r2, r3, #2
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd6:	4927      	ldr	r1, [pc, #156]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cdc:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	4a24      	ldr	r2, [pc, #144]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce8:	4b22      	ldr	r3, [pc, #136]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	4a21      	ldr	r2, [pc, #132]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007cfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007d00:	4b1c      	ldr	r3, [pc, #112]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	4a1b      	ldr	r2, [pc, #108]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d0c:	4b19      	ldr	r3, [pc, #100]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a18      	ldr	r2, [pc, #96]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d18:	f7fa fb9e 	bl	8002458 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d20:	f7fa fb9a 	bl	8002458 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e090      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d32:	4b10      	ldr	r3, [pc, #64]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f0      	beq.n	8007d20 <HAL_RCC_OscConfig+0x670>
 8007d3e:	e088      	b.n	8007e52 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d40:	4b0c      	ldr	r3, [pc, #48]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a0b      	ldr	r2, [pc, #44]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fa fb84 	bl	8002458 <HAL_GetTick>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d54:	f7fa fb80 	bl	8002458 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e076      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d66:	4b03      	ldr	r3, [pc, #12]	@ (8007d74 <HAL_RCC_OscConfig+0x6c4>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f0      	bne.n	8007d54 <HAL_RCC_OscConfig+0x6a4>
 8007d72:	e06e      	b.n	8007e52 <HAL_RCC_OscConfig+0x7a2>
 8007d74:	58024400 	.word	0x58024400
 8007d78:	fffffc0c 	.word	0xfffffc0c
 8007d7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d80:	4b36      	ldr	r3, [pc, #216]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d86:	4b35      	ldr	r3, [pc, #212]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d031      	beq.n	8007df8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f003 0203 	and.w	r2, r3, #3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d12a      	bne.n	8007df8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d122      	bne.n	8007df8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d11a      	bne.n	8007df8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d111      	bne.n	8007df8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	0c1b      	lsrs	r3, r3, #16
 8007dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d108      	bne.n	8007df8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	0e1b      	lsrs	r3, r3, #24
 8007dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d001      	beq.n	8007dfc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e02b      	b.n	8007e54 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007dfc:	4b17      	ldr	r3, [pc, #92]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e00:	08db      	lsrs	r3, r3, #3
 8007e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d01f      	beq.n	8007e52 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007e12:	4b12      	ldr	r3, [pc, #72]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	4a11      	ldr	r2, [pc, #68]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e1e:	f7fa fb1b 	bl	8002458 <HAL_GetTick>
 8007e22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007e24:	bf00      	nop
 8007e26:	f7fa fb17 	bl	8002458 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d0f9      	beq.n	8007e26 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e32:	4b0a      	ldr	r3, [pc, #40]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e36:	4b0a      	ldr	r3, [pc, #40]	@ (8007e60 <HAL_RCC_OscConfig+0x7b0>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4906      	ldr	r1, [pc, #24]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007e46:	4b05      	ldr	r3, [pc, #20]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4a04      	ldr	r2, [pc, #16]	@ (8007e5c <HAL_RCC_OscConfig+0x7ac>)
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3730      	adds	r7, #48	@ 0x30
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	ffff0007 	.word	0xffff0007

08007e64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e19c      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e78:	4b8a      	ldr	r3, [pc, #552]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d910      	bls.n	8007ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e86:	4b87      	ldr	r3, [pc, #540]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 020f 	bic.w	r2, r3, #15
 8007e8e:	4985      	ldr	r1, [pc, #532]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e96:	4b83      	ldr	r3, [pc, #524]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d001      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e184      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d908      	bls.n	8007ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ec4:	4b78      	ldr	r3, [pc, #480]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4975      	ldr	r1, [pc, #468]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d010      	beq.n	8007f04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	4b70      	ldr	r3, [pc, #448]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d908      	bls.n	8007f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	496a      	ldr	r1, [pc, #424]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	4b64      	ldr	r3, [pc, #400]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d908      	bls.n	8007f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f20:	4b61      	ldr	r3, [pc, #388]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	495e      	ldr	r1, [pc, #376]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d010      	beq.n	8007f60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	4b59      	ldr	r3, [pc, #356]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d908      	bls.n	8007f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f4e:	4b56      	ldr	r3, [pc, #344]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	4953      	ldr	r1, [pc, #332]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d010      	beq.n	8007f8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	4b4d      	ldr	r3, [pc, #308]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d908      	bls.n	8007f8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f023 020f 	bic.w	r2, r3, #15
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4947      	ldr	r1, [pc, #284]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d055      	beq.n	8008046 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f9a:	4b43      	ldr	r3, [pc, #268]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4940      	ldr	r1, [pc, #256]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d121      	bne.n	8008004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0f6      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d107      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fcc:	4b36      	ldr	r3, [pc, #216]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d115      	bne.n	8008004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0ea      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fe4:	4b30      	ldr	r3, [pc, #192]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0de      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0d6      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008004:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f023 0207 	bic.w	r2, r3, #7
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4925      	ldr	r1, [pc, #148]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008012:	4313      	orrs	r3, r2
 8008014:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008016:	f7fa fa1f 	bl	8002458 <HAL_GetTick>
 800801a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801c:	e00a      	b.n	8008034 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800801e:	f7fa fa1b 	bl	8002458 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e0be      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008034:	4b1c      	ldr	r3, [pc, #112]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	429a      	cmp	r2, r3
 8008044:	d1eb      	bne.n	800801e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d010      	beq.n	8008074 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	4b14      	ldr	r3, [pc, #80]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	429a      	cmp	r2, r3
 8008060:	d208      	bcs.n	8008074 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008062:	4b11      	ldr	r3, [pc, #68]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f023 020f 	bic.w	r2, r3, #15
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	490e      	ldr	r1, [pc, #56]	@ (80080a8 <HAL_RCC_ClockConfig+0x244>)
 8008070:	4313      	orrs	r3, r2
 8008072:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008074:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d214      	bcs.n	80080ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008082:	4b08      	ldr	r3, [pc, #32]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f023 020f 	bic.w	r2, r3, #15
 800808a:	4906      	ldr	r1, [pc, #24]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4313      	orrs	r3, r2
 8008090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008092:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <HAL_RCC_ClockConfig+0x240>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d005      	beq.n	80080ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e086      	b.n	80081b2 <HAL_RCC_ClockConfig+0x34e>
 80080a4:	52002000 	.word	0x52002000
 80080a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d010      	beq.n	80080da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	4b3f      	ldr	r3, [pc, #252]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d208      	bcs.n	80080da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080c8:	4b3c      	ldr	r3, [pc, #240]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	4939      	ldr	r1, [pc, #228]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d010      	beq.n	8008108 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	4b34      	ldr	r3, [pc, #208]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d208      	bcs.n	8008108 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080f6:	4b31      	ldr	r3, [pc, #196]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	492e      	ldr	r1, [pc, #184]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008104:	4313      	orrs	r3, r2
 8008106:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	4b28      	ldr	r3, [pc, #160]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008120:	429a      	cmp	r2, r3
 8008122:	d208      	bcs.n	8008136 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008124:	4b25      	ldr	r3, [pc, #148]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	4922      	ldr	r1, [pc, #136]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008132:	4313      	orrs	r3, r2
 8008134:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d010      	beq.n	8008164 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	4b1d      	ldr	r3, [pc, #116]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800814e:	429a      	cmp	r2, r3
 8008150:	d208      	bcs.n	8008164 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008152:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	4917      	ldr	r1, [pc, #92]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008160:	4313      	orrs	r3, r2
 8008162:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008164:	f000 f834 	bl	80081d0 <HAL_RCC_GetSysClockFreq>
 8008168:	4602      	mov	r2, r0
 800816a:	4b14      	ldr	r3, [pc, #80]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	4912      	ldr	r1, [pc, #72]	@ (80081c0 <HAL_RCC_ClockConfig+0x35c>)
 8008176:	5ccb      	ldrb	r3, [r1, r3]
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
 8008180:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008182:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <HAL_RCC_ClockConfig+0x358>)
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	4a0d      	ldr	r2, [pc, #52]	@ (80081c0 <HAL_RCC_ClockConfig+0x35c>)
 800818c:	5cd3      	ldrb	r3, [r2, r3]
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	4a0a      	ldr	r2, [pc, #40]	@ (80081c4 <HAL_RCC_ClockConfig+0x360>)
 800819a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800819c:	4a0a      	ldr	r2, [pc, #40]	@ (80081c8 <HAL_RCC_ClockConfig+0x364>)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <HAL_RCC_ClockConfig+0x368>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fa f90c 	bl	80023c4 <HAL_InitTick>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	08013f74 	.word	0x08013f74
 80081c4:	24000004 	.word	0x24000004
 80081c8:	24000000 	.word	0x24000000
 80081cc:	24000008 	.word	0x24000008

080081d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	@ 0x24
 80081d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081d6:	4bb3      	ldr	r3, [pc, #716]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081de:	2b18      	cmp	r3, #24
 80081e0:	f200 8155 	bhi.w	800848e <HAL_RCC_GetSysClockFreq+0x2be>
 80081e4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008251 	.word	0x08008251
 80081f0:	0800848f 	.word	0x0800848f
 80081f4:	0800848f 	.word	0x0800848f
 80081f8:	0800848f 	.word	0x0800848f
 80081fc:	0800848f 	.word	0x0800848f
 8008200:	0800848f 	.word	0x0800848f
 8008204:	0800848f 	.word	0x0800848f
 8008208:	0800848f 	.word	0x0800848f
 800820c:	08008277 	.word	0x08008277
 8008210:	0800848f 	.word	0x0800848f
 8008214:	0800848f 	.word	0x0800848f
 8008218:	0800848f 	.word	0x0800848f
 800821c:	0800848f 	.word	0x0800848f
 8008220:	0800848f 	.word	0x0800848f
 8008224:	0800848f 	.word	0x0800848f
 8008228:	0800848f 	.word	0x0800848f
 800822c:	0800827d 	.word	0x0800827d
 8008230:	0800848f 	.word	0x0800848f
 8008234:	0800848f 	.word	0x0800848f
 8008238:	0800848f 	.word	0x0800848f
 800823c:	0800848f 	.word	0x0800848f
 8008240:	0800848f 	.word	0x0800848f
 8008244:	0800848f 	.word	0x0800848f
 8008248:	0800848f 	.word	0x0800848f
 800824c:	08008283 	.word	0x08008283
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008250:	4b94      	ldr	r3, [pc, #592]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d009      	beq.n	8008270 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800825c:	4b91      	ldr	r3, [pc, #580]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	08db      	lsrs	r3, r3, #3
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	4a90      	ldr	r2, [pc, #576]	@ (80084a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
 800826c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800826e:	e111      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008270:	4b8d      	ldr	r3, [pc, #564]	@ (80084a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008272:	61bb      	str	r3, [r7, #24]
      break;
 8008274:	e10e      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008276:	4b8d      	ldr	r3, [pc, #564]	@ (80084ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008278:	61bb      	str	r3, [r7, #24]
      break;
 800827a:	e10b      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800827c:	4b8c      	ldr	r3, [pc, #560]	@ (80084b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800827e:	61bb      	str	r3, [r7, #24]
      break;
 8008280:	e108      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008282:	4b88      	ldr	r3, [pc, #544]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800828c:	4b85      	ldr	r3, [pc, #532]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800828e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008290:	091b      	lsrs	r3, r3, #4
 8008292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008296:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008298:	4b82      	ldr	r3, [pc, #520]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800829a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80082a2:	4b80      	ldr	r3, [pc, #512]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	08db      	lsrs	r3, r3, #3
 80082a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80e1 	beq.w	8008488 <HAL_RCC_GetSysClockFreq+0x2b8>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	f000 8083 	beq.w	80083d4 <HAL_RCC_GetSysClockFreq+0x204>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	f200 80a1 	bhi.w	8008418 <HAL_RCC_GetSysClockFreq+0x248>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_RCC_GetSysClockFreq+0x114>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d056      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x1c0>
 80082e2:	e099      	b.n	8008418 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e4:	4b6f      	ldr	r3, [pc, #444]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d02d      	beq.n	800834c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082f0:	4b6c      	ldr	r3, [pc, #432]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	08db      	lsrs	r3, r3, #3
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	4a6b      	ldr	r2, [pc, #428]	@ (80084a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008300:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b62      	ldr	r3, [pc, #392]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a02 	vldr	s12, [r7, #8]
 800832e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80084b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800834a:	e087      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80084b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800835a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835e:	4b51      	ldr	r3, [pc, #324]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008372:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80084b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800838e:	e065      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80084bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800839e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a2:	4b40      	ldr	r3, [pc, #256]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80083b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80084b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083d2:	e043      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80084c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80083e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e6:	4b2f      	ldr	r3, [pc, #188]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80084b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800840a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008416:	e021      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80084bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842a:	4b1e      	ldr	r3, [pc, #120]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843a:	ed97 6a02 	vldr	s12, [r7, #8]
 800843e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80084b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800845a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800845c:	4b11      	ldr	r3, [pc, #68]	@ (80084a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800845e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008460:	0a5b      	lsrs	r3, r3, #9
 8008462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008466:	3301      	adds	r3, #1
 8008468:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008474:	edd7 6a07 	vldr	s13, [r7, #28]
 8008478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008480:	ee17 3a90 	vmov	r3, s15
 8008484:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008486:	e005      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	61bb      	str	r3, [r7, #24]
      break;
 800848c:	e002      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800848e:	4b07      	ldr	r3, [pc, #28]	@ (80084ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008490:	61bb      	str	r3, [r7, #24]
      break;
 8008492:	bf00      	nop
  }

  return sysclockfreq;
 8008494:	69bb      	ldr	r3, [r7, #24]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3724      	adds	r7, #36	@ 0x24
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	58024400 	.word	0x58024400
 80084a8:	03d09000 	.word	0x03d09000
 80084ac:	003d0900 	.word	0x003d0900
 80084b0:	016e3600 	.word	0x016e3600
 80084b4:	46000000 	.word	0x46000000
 80084b8:	4c742400 	.word	0x4c742400
 80084bc:	4a742400 	.word	0x4a742400
 80084c0:	4bb71b00 	.word	0x4bb71b00

080084c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084ca:	f7ff fe81 	bl	80081d0 <HAL_RCC_GetSysClockFreq>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <HAL_RCC_GetHCLKFreq+0x50>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	490f      	ldr	r1, [pc, #60]	@ (8008518 <HAL_RCC_GetHCLKFreq+0x54>)
 80084dc:	5ccb      	ldrb	r3, [r1, r3]
 80084de:	f003 031f 	and.w	r3, r3, #31
 80084e2:	fa22 f303 	lsr.w	r3, r2, r3
 80084e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008514 <HAL_RCC_GetHCLKFreq+0x50>)
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	4a09      	ldr	r2, [pc, #36]	@ (8008518 <HAL_RCC_GetHCLKFreq+0x54>)
 80084f2:	5cd3      	ldrb	r3, [r2, r3]
 80084f4:	f003 031f 	and.w	r3, r3, #31
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	fa22 f303 	lsr.w	r3, r2, r3
 80084fe:	4a07      	ldr	r2, [pc, #28]	@ (800851c <HAL_RCC_GetHCLKFreq+0x58>)
 8008500:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008502:	4a07      	ldr	r2, [pc, #28]	@ (8008520 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008508:	4b04      	ldr	r3, [pc, #16]	@ (800851c <HAL_RCC_GetHCLKFreq+0x58>)
 800850a:	681b      	ldr	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	58024400 	.word	0x58024400
 8008518:	08013f74 	.word	0x08013f74
 800851c:	24000004 	.word	0x24000004
 8008520:	24000000 	.word	0x24000000

08008524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008528:	f7ff ffcc 	bl	80084c4 <HAL_RCC_GetHCLKFreq>
 800852c:	4602      	mov	r2, r0
 800852e:	4b06      	ldr	r3, [pc, #24]	@ (8008548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	091b      	lsrs	r3, r3, #4
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4904      	ldr	r1, [pc, #16]	@ (800854c <HAL_RCC_GetPCLK1Freq+0x28>)
 800853a:	5ccb      	ldrb	r3, [r1, r3]
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008544:	4618      	mov	r0, r3
 8008546:	bd80      	pop	{r7, pc}
 8008548:	58024400 	.word	0x58024400
 800854c:	08013f74 	.word	0x08013f74

08008550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008554:	f7ff ffb6 	bl	80084c4 <HAL_RCC_GetHCLKFreq>
 8008558:	4602      	mov	r2, r0
 800855a:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	4904      	ldr	r1, [pc, #16]	@ (8008578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008566:	5ccb      	ldrb	r3, [r1, r3]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	58024400 	.word	0x58024400
 8008578:	08013f74 	.word	0x08013f74

0800857c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800857c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008580:	b0c6      	sub	sp, #280	@ 0x118
 8008582:	af00      	add	r7, sp, #0
 8008584:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800858e:	2300      	movs	r3, #0
 8008590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80085a0:	2500      	movs	r5, #0
 80085a2:	ea54 0305 	orrs.w	r3, r4, r5
 80085a6:	d049      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085b2:	d02f      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80085b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085b8:	d828      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80085ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085be:	d01a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80085c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085c4:	d822      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ce:	d007      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085d0:	e01c      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d2:	4bab      	ldr	r3, [pc, #684]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d6:	4aaa      	ldr	r2, [pc, #680]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085de:	e01a      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e4:	3308      	adds	r3, #8
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 fa49 	bl	800aa80 <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085f4:	e00f      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fa:	3328      	adds	r3, #40	@ 0x28
 80085fc:	2102      	movs	r1, #2
 80085fe:	4618      	mov	r0, r3
 8008600:	f002 faf0 	bl	800abe4 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800860a:	e004      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008612:	e000      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800861e:	4b98      	ldr	r3, [pc, #608]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800862c:	4a94      	ldr	r2, [pc, #592]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800862e:	430b      	orrs	r3, r1
 8008630:	6513      	str	r3, [r2, #80]	@ 0x50
 8008632:	e003      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008648:	f04f 0900 	mov.w	r9, #0
 800864c:	ea58 0309 	orrs.w	r3, r8, r9
 8008650:	d047      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008658:	2b04      	cmp	r3, #4
 800865a:	d82a      	bhi.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008679 	.word	0x08008679
 8008668:	08008687 	.word	0x08008687
 800866c:	0800869d 	.word	0x0800869d
 8008670:	080086bb 	.word	0x080086bb
 8008674:	080086bb 	.word	0x080086bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008678:	4b81      	ldr	r3, [pc, #516]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800867a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867c:	4a80      	ldr	r2, [pc, #512]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800867e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008684:	e01a      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868a:	3308      	adds	r3, #8
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f002 f9f6 	bl	800aa80 <RCCEx_PLL2_Config>
 8008694:	4603      	mov	r3, r0
 8008696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800869a:	e00f      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	3328      	adds	r3, #40	@ 0x28
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f002 fa9d 	bl	800abe4 <RCCEx_PLL3_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086b0:	e004      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086b8:	e000      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80086ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086c4:	4b6e      	ldr	r3, [pc, #440]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c8:	f023 0107 	bic.w	r1, r3, #7
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d2:	4a6b      	ldr	r2, [pc, #428]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80086d8:	e003      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80086ee:	f04f 0b00 	mov.w	fp, #0
 80086f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80086f6:	d05b      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008700:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008704:	d03b      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008706:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800870a:	d834      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800870c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008710:	d037      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008712:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008716:	d82e      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008718:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800871c:	d033      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800871e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008722:	d828      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008728:	d01a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800872a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800872e:	d822      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008738:	d007      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800873a:	e01c      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873c:	4b50      	ldr	r3, [pc, #320]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	4a4f      	ldr	r2, [pc, #316]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008748:	e01e      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800874a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874e:	3308      	adds	r3, #8
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f002 f994 	bl	800aa80 <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800875e:	e013      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008764:	3328      	adds	r3, #40	@ 0x28
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f002 fa3b 	bl	800abe4 <RCCEx_PLL3_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008774:	e008      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800877c:	e004      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800877e:	bf00      	nop
 8008780:	e002      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008782:	bf00      	nop
 8008784:	e000      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008790:	4b3b      	ldr	r3, [pc, #236]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008794:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087a0:	4a37      	ldr	r2, [pc, #220]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087a2:	430b      	orrs	r3, r1
 80087a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80087a6:	e003      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80087bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80087ca:	460b      	mov	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	d05d      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80087dc:	d03b      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80087de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80087e2:	d834      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80087e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087e8:	d037      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80087ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087ee:	d82e      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80087f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087f4:	d033      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80087f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087fa:	d828      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80087fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008800:	d01a      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008806:	d822      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800880c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008810:	d007      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008812:	e01c      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008814:	4b1a      	ldr	r3, [pc, #104]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	4a19      	ldr	r2, [pc, #100]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800881a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008820:	e01e      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	3308      	adds	r3, #8
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f002 f928 	bl	800aa80 <RCCEx_PLL2_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008836:	e013      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883c:	3328      	adds	r3, #40	@ 0x28
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f002 f9cf 	bl	800abe4 <RCCEx_PLL3_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800884c:	e008      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008854:	e004      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008856:	bf00      	nop
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800885a:	bf00      	nop
 800885c:	e000      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800885e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10d      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008868:	4b05      	ldr	r3, [pc, #20]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800886a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008874:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008878:	4a01      	ldr	r2, [pc, #4]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800887a:	430b      	orrs	r3, r1
 800887c:	6593      	str	r3, [r2, #88]	@ 0x58
 800887e:	e005      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800888c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008898:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800889c:	2300      	movs	r3, #0
 800889e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80088a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d03a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80088ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b2:	2b30      	cmp	r3, #48	@ 0x30
 80088b4:	d01f      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80088b6:	2b30      	cmp	r3, #48	@ 0x30
 80088b8:	d819      	bhi.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d00c      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d815      	bhi.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d019      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80088c6:	2b10      	cmp	r3, #16
 80088c8:	d111      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ca:	4baa      	ldr	r3, [pc, #680]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	4aa9      	ldr	r2, [pc, #676]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80088d6:	e011      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088dc:	3308      	adds	r3, #8
 80088de:	2102      	movs	r1, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f002 f8cd 	bl	800aa80 <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80088ec:	e006      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088f4:	e002      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80088fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008904:	4b9b      	ldr	r3, [pc, #620]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008908:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008912:	4a98      	ldr	r2, [pc, #608]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008914:	430b      	orrs	r3, r1
 8008916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008918:	e003      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800891e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800892e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008932:	2300      	movs	r3, #0
 8008934:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008938:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800893c:	460b      	mov	r3, r1
 800893e:	4313      	orrs	r3, r2
 8008940:	d051      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800894c:	d035      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800894e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008952:	d82e      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008958:	d031      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x442>
 800895a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800895e:	d828      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008964:	d01a      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800896a:	d822      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008974:	d007      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008976:	e01c      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008978:	4b7e      	ldr	r3, [pc, #504]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800897a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897c:	4a7d      	ldr	r2, [pc, #500]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800897e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008984:	e01c      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898a:	3308      	adds	r3, #8
 800898c:	2100      	movs	r1, #0
 800898e:	4618      	mov	r0, r3
 8008990:	f002 f876 	bl	800aa80 <RCCEx_PLL2_Config>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800899a:	e011      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800899c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a0:	3328      	adds	r3, #40	@ 0x28
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f002 f91d 	bl	800abe4 <RCCEx_PLL3_Config>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089b0:	e006      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089b8:	e002      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80089ba:	bf00      	nop
 80089bc:	e000      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80089be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80089c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80089d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d6:	4a67      	ldr	r2, [pc, #412]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089d8:	430b      	orrs	r3, r1
 80089da:	6513      	str	r3, [r2, #80]	@ 0x50
 80089dc:	e003      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80089f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089f6:	2300      	movs	r3, #0
 80089f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	d053      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a10:	d033      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008a12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a16:	d82c      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a1c:	d02f      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a22:	d826      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a28:	d02b      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008a2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a2e:	d820      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a34:	d012      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a3a:	d81a      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d022      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a44:	d115      	bne.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 f816 	bl	800aa80 <RCCEx_PLL2_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a5a:	e015      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a60:	3328      	adds	r3, #40	@ 0x28
 8008a62:	2101      	movs	r1, #1
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 f8bd 	bl	800abe4 <RCCEx_PLL3_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a70:	e00a      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a78:	e006      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e004      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008a7e:	bf00      	nop
 8008a80:	e002      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008a82:	bf00      	nop
 8008a84:	e000      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a90:	4b38      	ldr	r3, [pc, #224]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a9e:	4a35      	ldr	r2, [pc, #212]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008aa4:	e003      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ac4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4313      	orrs	r3, r2
 8008acc:	d058      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ada:	d033      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ae0:	d82c      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae6:	d02f      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aec:	d826      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008aee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008af2:	d02b      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008af4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008af8:	d820      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008afe:	d012      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b04:	d81a      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d022      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b0e:	d115      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b14:	3308      	adds	r3, #8
 8008b16:	2101      	movs	r1, #1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 ffb1 	bl	800aa80 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b24:	e015      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2a:	3328      	adds	r3, #40	@ 0x28
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 f858 	bl	800abe4 <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e00a      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b42:	e006      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008b44:	bf00      	nop
 8008b46:	e004      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10e      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b5a:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b6a:	4a02      	ldr	r2, [pc, #8]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b70:	e006      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008b72:	bf00      	nop
 8008b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d037      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008baa:	d00e      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb0:	d816      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d018      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bba:	d111      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bbc:	4bc4      	ldr	r3, [pc, #784]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	4ac3      	ldr	r2, [pc, #780]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bc8:	e00f      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 ff54 	bl	800aa80 <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bde:	e004      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008be6:	e000      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bf2:	4bb7      	ldr	r3, [pc, #732]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c00:	4ab3      	ldr	r2, [pc, #716]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c02:	430b      	orrs	r3, r1
 8008c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c06:	e003      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	d039      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d81c      	bhi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c7d 	.word	0x08008c7d
 8008c44:	08008c51 	.word	0x08008c51
 8008c48:	08008c5f 	.word	0x08008c5f
 8008c4c:	08008c7d 	.word	0x08008c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c50:	4b9f      	ldr	r3, [pc, #636]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c54:	4a9e      	ldr	r2, [pc, #632]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c5c:	e00f      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c62:	3308      	adds	r3, #8
 8008c64:	2102      	movs	r1, #2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 ff0a 	bl	800aa80 <RCCEx_PLL2_Config>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c72:	e004      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c7a:	e000      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c86:	4b92      	ldr	r3, [pc, #584]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c8a:	f023 0103 	bic.w	r1, r3, #3
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c94:	4a8e      	ldr	r2, [pc, #568]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c96:	430b      	orrs	r3, r1
 8008c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c9a:	e003      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f000 8099 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cc6:	4b83      	ldr	r3, [pc, #524]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a82      	ldr	r2, [pc, #520]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cd2:	f7f9 fbc1 	bl	8002458 <HAL_GetTick>
 8008cd6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cda:	e00b      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cdc:	f7f9 fbbc 	bl	8002458 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b64      	cmp	r3, #100	@ 0x64
 8008cea:	d903      	bls.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cf2:	e005      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cf4:	4b77      	ldr	r3, [pc, #476]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0ed      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d173      	bne.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d08:	4b71      	ldr	r3, [pc, #452]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d14:	4053      	eors	r3, r2
 8008d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d015      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d2a:	4b69      	ldr	r3, [pc, #420]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d2e:	4a68      	ldr	r2, [pc, #416]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d36:	4b66      	ldr	r3, [pc, #408]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3a:	4a65      	ldr	r2, [pc, #404]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d42:	4a63      	ldr	r2, [pc, #396]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d56:	d118      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d58:	f7f9 fb7e 	bl	8002458 <HAL_GetTick>
 8008d5c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d60:	e00d      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d62:	f7f9 fb79 	bl	8002458 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008d6c:	1ad2      	subs	r2, r2, r3
 8008d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d903      	bls.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008d7c:	e005      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d7e:	4b54      	ldr	r3, [pc, #336]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0eb      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d129      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008da2:	d10e      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008da4:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008db4:	091a      	lsrs	r2, r3, #4
 8008db6:	4b48      	ldr	r3, [pc, #288]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	4a45      	ldr	r2, [pc, #276]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6113      	str	r3, [r2, #16]
 8008dc0:	e005      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008dc2:	4b43      	ldr	r3, [pc, #268]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	4a42      	ldr	r2, [pc, #264]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008dcc:	6113      	str	r3, [r2, #16]
 8008dce:	4b40      	ldr	r3, [pc, #256]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dde:	4a3c      	ldr	r2, [pc, #240]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008de0:	430b      	orrs	r3, r1
 8008de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008de4:	e008      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008dee:	e003      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f002 0301 	and.w	r3, r2, #1
 8008e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e12:	460b      	mov	r3, r1
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f000 808f 	beq.w	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e20:	2b28      	cmp	r3, #40	@ 0x28
 8008e22:	d871      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008e24:	a201      	add	r2, pc, #4	@ (adr r2, 8008e2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008f11 	.word	0x08008f11
 8008e30:	08008f09 	.word	0x08008f09
 8008e34:	08008f09 	.word	0x08008f09
 8008e38:	08008f09 	.word	0x08008f09
 8008e3c:	08008f09 	.word	0x08008f09
 8008e40:	08008f09 	.word	0x08008f09
 8008e44:	08008f09 	.word	0x08008f09
 8008e48:	08008f09 	.word	0x08008f09
 8008e4c:	08008edd 	.word	0x08008edd
 8008e50:	08008f09 	.word	0x08008f09
 8008e54:	08008f09 	.word	0x08008f09
 8008e58:	08008f09 	.word	0x08008f09
 8008e5c:	08008f09 	.word	0x08008f09
 8008e60:	08008f09 	.word	0x08008f09
 8008e64:	08008f09 	.word	0x08008f09
 8008e68:	08008f09 	.word	0x08008f09
 8008e6c:	08008ef3 	.word	0x08008ef3
 8008e70:	08008f09 	.word	0x08008f09
 8008e74:	08008f09 	.word	0x08008f09
 8008e78:	08008f09 	.word	0x08008f09
 8008e7c:	08008f09 	.word	0x08008f09
 8008e80:	08008f09 	.word	0x08008f09
 8008e84:	08008f09 	.word	0x08008f09
 8008e88:	08008f09 	.word	0x08008f09
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08008f09 	.word	0x08008f09
 8008e94:	08008f09 	.word	0x08008f09
 8008e98:	08008f09 	.word	0x08008f09
 8008e9c:	08008f09 	.word	0x08008f09
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008f09 	.word	0x08008f09
 8008ea8:	08008f09 	.word	0x08008f09
 8008eac:	08008f11 	.word	0x08008f11
 8008eb0:	08008f09 	.word	0x08008f09
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008f09 	.word	0x08008f09
 8008ebc:	08008f09 	.word	0x08008f09
 8008ec0:	08008f09 	.word	0x08008f09
 8008ec4:	08008f09 	.word	0x08008f09
 8008ec8:	08008f09 	.word	0x08008f09
 8008ecc:	08008f11 	.word	0x08008f11
 8008ed0:	58024400 	.word	0x58024400
 8008ed4:	58024800 	.word	0x58024800
 8008ed8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 fdcb 	bl	800aa80 <RCCEx_PLL2_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ef0:	e00f      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef6:	3328      	adds	r3, #40	@ 0x28
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f001 fe72 	bl	800abe4 <RCCEx_PLL3_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f06:	e004      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f0e:	e000      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f1a:	4bbf      	ldr	r3, [pc, #764]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f28:	4abb      	ldr	r2, [pc, #748]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f2e:	e003      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f002 0302 	and.w	r3, r2, #2
 8008f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4313      	orrs	r3, r2
 8008f56:	d041      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d824      	bhi.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008fb5 	.word	0x08008fb5
 8008f6c:	08008f81 	.word	0x08008f81
 8008f70:	08008f97 	.word	0x08008f97
 8008f74:	08008fb5 	.word	0x08008fb5
 8008f78:	08008fb5 	.word	0x08008fb5
 8008f7c:	08008fb5 	.word	0x08008fb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f84:	3308      	adds	r3, #8
 8008f86:	2101      	movs	r1, #1
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 fd79 	bl	800aa80 <RCCEx_PLL2_Config>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008f94:	e00f      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9a:	3328      	adds	r3, #40	@ 0x28
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fe20 	bl	800abe4 <RCCEx_PLL3_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008faa:	e004      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fb2:	e000      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fbe:	4b96      	ldr	r3, [pc, #600]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc2:	f023 0107 	bic.w	r1, r3, #7
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fcc:	4a92      	ldr	r2, [pc, #584]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f002 0304 	and.w	r3, r2, #4
 8008fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ff2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d044      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009004:	2b05      	cmp	r3, #5
 8009006:	d825      	bhi.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	0800905d 	.word	0x0800905d
 8009014:	08009029 	.word	0x08009029
 8009018:	0800903f 	.word	0x0800903f
 800901c:	0800905d 	.word	0x0800905d
 8009020:	0800905d 	.word	0x0800905d
 8009024:	0800905d 	.word	0x0800905d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902c:	3308      	adds	r3, #8
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f001 fd25 	bl	800aa80 <RCCEx_PLL2_Config>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800903c:	e00f      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800903e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009042:	3328      	adds	r3, #40	@ 0x28
 8009044:	2101      	movs	r1, #1
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fdcc 	bl	800abe4 <RCCEx_PLL3_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009052:	e004      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800905a:	e000      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800905c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10b      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009066:	4b6c      	ldr	r3, [pc, #432]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906a:	f023 0107 	bic.w	r1, r3, #7
 800906e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009076:	4a68      	ldr	r2, [pc, #416]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009078:	430b      	orrs	r3, r1
 800907a:	6593      	str	r3, [r2, #88]	@ 0x58
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f002 0320 	and.w	r3, r2, #32
 8009092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800909c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d055      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80090a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090b2:	d033      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80090b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090b8:	d82c      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090be:	d02f      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c4:	d826      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090ca:	d02b      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80090cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090d0:	d820      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d6:	d012      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80090d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090dc:	d81a      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d022      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80090e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090e6:	d115      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ec:	3308      	adds	r3, #8
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 fcc5 	bl	800aa80 <RCCEx_PLL2_Config>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80090fc:	e015      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009102:	3328      	adds	r3, #40	@ 0x28
 8009104:	2102      	movs	r1, #2
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fd6c 	bl	800abe4 <RCCEx_PLL3_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009112:	e00a      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800911a:	e006      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800911c:	bf00      	nop
 800911e:	e004      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009120:	bf00      	nop
 8009122:	e002      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10b      	bne.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009132:	4b39      	ldr	r3, [pc, #228]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800913a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009142:	4a35      	ldr	r2, [pc, #212]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009144:	430b      	orrs	r3, r1
 8009146:	6553      	str	r3, [r2, #84]	@ 0x54
 8009148:	e003      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800914e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800915e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009162:	2300      	movs	r3, #0
 8009164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009168:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800916c:	460b      	mov	r3, r1
 800916e:	4313      	orrs	r3, r2
 8009170:	d058      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800917a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800917e:	d033      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009180:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009184:	d82c      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800918a:	d02f      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800918c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009190:	d826      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009196:	d02b      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800919c:	d820      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800919e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a2:	d012      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80091a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a8:	d81a      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d022      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80091ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b2:	d115      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b8:	3308      	adds	r3, #8
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 fc5f 	bl	800aa80 <RCCEx_PLL2_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091c8:	e015      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ce:	3328      	adds	r3, #40	@ 0x28
 80091d0:	2102      	movs	r1, #2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 fd06 	bl	800abe4 <RCCEx_PLL3_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091de:	e00a      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091e6:	e006      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80091e8:	bf00      	nop
 80091ea:	e004      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80091ec:	bf00      	nop
 80091ee:	e002      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80091f0:	bf00      	nop
 80091f2:	e000      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80091f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10e      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091fe:	4b06      	ldr	r3, [pc, #24]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009202:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800920a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800920e:	4a02      	ldr	r2, [pc, #8]	@ (8009218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009210:	430b      	orrs	r3, r1
 8009212:	6593      	str	r3, [r2, #88]	@ 0x58
 8009214:	e006      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009234:	2300      	movs	r3, #0
 8009236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800923a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800923e:	460b      	mov	r3, r1
 8009240:	4313      	orrs	r3, r2
 8009242:	d055      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800924c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009250:	d033      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009252:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009256:	d82c      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800925c:	d02f      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800925e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009262:	d826      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009264:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009268:	d02b      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800926a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800926e:	d820      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009274:	d012      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800927a:	d81a      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800927c:	2b00      	cmp	r3, #0
 800927e:	d022      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009284:	d115      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928a:	3308      	adds	r3, #8
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fbf6 	bl	800aa80 <RCCEx_PLL2_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800929a:	e015      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800929c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a0:	3328      	adds	r3, #40	@ 0x28
 80092a2:	2102      	movs	r1, #2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fc9d 	bl	800abe4 <RCCEx_PLL3_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092b0:	e00a      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092b8:	e006      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80092ba:	bf00      	nop
 80092bc:	e004      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80092c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10b      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80092d0:	4ba0      	ldr	r3, [pc, #640]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80092d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092e0:	4a9c      	ldr	r2, [pc, #624]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80092e2:	430b      	orrs	r3, r1
 80092e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80092e6:	e003      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f002 0308 	and.w	r3, r2, #8
 80092fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009300:	2300      	movs	r3, #0
 8009302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009306:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800930a:	460b      	mov	r3, r1
 800930c:	4313      	orrs	r3, r2
 800930e:	d01e      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800931c:	d10c      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800931e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009322:	3328      	adds	r3, #40	@ 0x28
 8009324:	2102      	movs	r1, #2
 8009326:	4618      	mov	r0, r3
 8009328:	f001 fc5c 	bl	800abe4 <RCCEx_PLL3_Config>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009338:	4b86      	ldr	r3, [pc, #536]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800933a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009348:	4a82      	ldr	r2, [pc, #520]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800934e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f002 0310 	and.w	r3, r2, #16
 800935a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009364:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009368:	460b      	mov	r3, r1
 800936a:	4313      	orrs	r3, r2
 800936c:	d01e      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800937a:	d10c      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009380:	3328      	adds	r3, #40	@ 0x28
 8009382:	2102      	movs	r1, #2
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fc2d 	bl	800abe4 <RCCEx_PLL3_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009396:	4b6f      	ldr	r3, [pc, #444]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800939a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800939e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093a6:	4a6b      	ldr	r2, [pc, #428]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093a8:	430b      	orrs	r3, r1
 80093aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80093b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093ba:	2300      	movs	r3, #0
 80093bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80093c2:	460b      	mov	r3, r1
 80093c4:	4313      	orrs	r3, r2
 80093c6:	d03e      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093d4:	d022      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80093d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093da:	d81b      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80093e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e4:	d00b      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80093e6:	e015      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	3308      	adds	r3, #8
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fb45 	bl	800aa80 <RCCEx_PLL2_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80093fc:	e00f      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009402:	3328      	adds	r3, #40	@ 0x28
 8009404:	2102      	movs	r1, #2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fbec 	bl	800abe4 <RCCEx_PLL3_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009412:	e004      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800941a:	e000      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800941c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800941e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009426:	4b4b      	ldr	r3, [pc, #300]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009436:	4a47      	ldr	r2, [pc, #284]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009438:	430b      	orrs	r3, r1
 800943a:	6593      	str	r3, [r2, #88]	@ 0x58
 800943c:	e003      	b.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009442:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009452:	673b      	str	r3, [r7, #112]	@ 0x70
 8009454:	2300      	movs	r3, #0
 8009456:	677b      	str	r3, [r7, #116]	@ 0x74
 8009458:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800945c:	460b      	mov	r3, r1
 800945e:	4313      	orrs	r3, r2
 8009460:	d03b      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800946a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800946e:	d01f      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009470:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009474:	d818      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800947a:	d003      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800947c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009480:	d007      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009482:	e011      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009484:	4b33      	ldr	r3, [pc, #204]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	4a32      	ldr	r2, [pc, #200]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800948a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800948e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009490:	e00f      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009496:	3328      	adds	r3, #40	@ 0x28
 8009498:	2101      	movs	r1, #1
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fba2 	bl	800abe4 <RCCEx_PLL3_Config>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80094a6:	e004      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094ae:	e000      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80094b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094ba:	4b26      	ldr	r3, [pc, #152]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ca:	4a22      	ldr	r2, [pc, #136]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80094d0:	e003      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80094e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094e8:	2300      	movs	r3, #0
 80094ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80094f0:	460b      	mov	r3, r1
 80094f2:	4313      	orrs	r3, r2
 80094f4:	d034      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80094f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009504:	d007      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009506:	e011      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009508:	4b12      	ldr	r3, [pc, #72]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	4a11      	ldr	r2, [pc, #68]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800950e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009514:	e00e      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951a:	3308      	adds	r3, #8
 800951c:	2102      	movs	r1, #2
 800951e:	4618      	mov	r0, r3
 8009520:	f001 faae 	bl	800aa80 <RCCEx_PLL2_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800952a:	e003      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10d      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800953c:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800953e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009540:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800954a:	4a02      	ldr	r2, [pc, #8]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800954c:	430b      	orrs	r3, r1
 800954e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009550:	e006      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009552:	bf00      	nop
 8009554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800955c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800956c:	663b      	str	r3, [r7, #96]	@ 0x60
 800956e:	2300      	movs	r3, #0
 8009570:	667b      	str	r3, [r7, #100]	@ 0x64
 8009572:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009576:	460b      	mov	r3, r1
 8009578:	4313      	orrs	r3, r2
 800957a:	d00c      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800957c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009580:	3328      	adds	r3, #40	@ 0x28
 8009582:	2102      	movs	r1, #2
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fb2d 	bl	800abe4 <RCCEx_PLL3_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80095a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095a4:	2300      	movs	r3, #0
 80095a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80095ac:	460b      	mov	r3, r1
 80095ae:	4313      	orrs	r3, r2
 80095b0:	d036      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80095b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095bc:	d018      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80095be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c2:	d811      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80095c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095c8:	d014      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80095ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ce:	d80b      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d011      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80095d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d8:	d106      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095da:	4bb7      	ldr	r3, [pc, #732]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4ab6      	ldr	r2, [pc, #728]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80095e6:	e008      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095ee:	e004      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80095f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009602:	4bad      	ldr	r3, [pc, #692]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009606:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009610:	4aa9      	ldr	r2, [pc, #676]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009612:	430b      	orrs	r3, r1
 8009614:	6553      	str	r3, [r2, #84]	@ 0x54
 8009616:	e003      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800961c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800962c:	653b      	str	r3, [r7, #80]	@ 0x50
 800962e:	2300      	movs	r3, #0
 8009630:	657b      	str	r3, [r7, #84]	@ 0x54
 8009632:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009636:	460b      	mov	r3, r1
 8009638:	4313      	orrs	r3, r2
 800963a:	d009      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800963c:	4b9e      	ldr	r3, [pc, #632]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800963e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009640:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964a:	4a9b      	ldr	r2, [pc, #620]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800964c:	430b      	orrs	r3, r1
 800964e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800965c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800965e:	2300      	movs	r3, #0
 8009660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009662:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009666:	460b      	mov	r3, r1
 8009668:	4313      	orrs	r3, r2
 800966a:	d009      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800966c:	4b92      	ldr	r3, [pc, #584]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800966e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009670:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800967a:	4a8f      	ldr	r2, [pc, #572]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800967c:	430b      	orrs	r3, r1
 800967e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800968c:	643b      	str	r3, [r7, #64]	@ 0x40
 800968e:	2300      	movs	r3, #0
 8009690:	647b      	str	r3, [r7, #68]	@ 0x44
 8009692:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d00e      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800969c:	4b86      	ldr	r3, [pc, #536]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	4a85      	ldr	r2, [pc, #532]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096a6:	6113      	str	r3, [r2, #16]
 80096a8:	4b83      	ldr	r3, [pc, #524]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096aa:	6919      	ldr	r1, [r3, #16]
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096b4:	4a80      	ldr	r2, [pc, #512]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096b6:	430b      	orrs	r3, r1
 80096b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80096c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d009      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80096d6:	4b78      	ldr	r3, [pc, #480]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80096de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e4:	4a74      	ldr	r2, [pc, #464]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096e6:	430b      	orrs	r3, r1
 80096e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80096f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f8:	2300      	movs	r3, #0
 80096fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80096fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009700:	460b      	mov	r3, r1
 8009702:	4313      	orrs	r3, r2
 8009704:	d00a      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009706:	4b6c      	ldr	r3, [pc, #432]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009716:	4a68      	ldr	r2, [pc, #416]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009718:	430b      	orrs	r3, r1
 800971a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	2100      	movs	r1, #0
 8009726:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800972e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009732:	460b      	mov	r3, r1
 8009734:	4313      	orrs	r3, r2
 8009736:	d011      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973c:	3308      	adds	r3, #8
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f001 f99d 	bl	800aa80 <RCCEx_PLL2_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800974c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800975c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	2100      	movs	r1, #0
 8009766:	6239      	str	r1, [r7, #32]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	627b      	str	r3, [r7, #36]	@ 0x24
 800976e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009772:	460b      	mov	r3, r1
 8009774:	4313      	orrs	r3, r2
 8009776:	d011      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977c:	3308      	adds	r3, #8
 800977e:	2101      	movs	r1, #1
 8009780:	4618      	mov	r0, r3
 8009782:	f001 f97d 	bl	800aa80 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800978c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	2100      	movs	r1, #0
 80097a6:	61b9      	str	r1, [r7, #24]
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	61fb      	str	r3, [r7, #28]
 80097ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	d011      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097bc:	3308      	adds	r3, #8
 80097be:	2102      	movs	r1, #2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 f95d 	bl	800aa80 <RCCEx_PLL2_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80097cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	2100      	movs	r1, #0
 80097e6:	6139      	str	r1, [r7, #16]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80097f2:	460b      	mov	r3, r1
 80097f4:	4313      	orrs	r3, r2
 80097f6:	d011      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fc:	3328      	adds	r3, #40	@ 0x28
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f9ef 	bl	800abe4 <RCCEx_PLL3_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800980c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	2100      	movs	r1, #0
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009832:	460b      	mov	r3, r1
 8009834:	4313      	orrs	r3, r2
 8009836:	d011      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983c:	3328      	adds	r3, #40	@ 0x28
 800983e:	2101      	movs	r1, #1
 8009840:	4618      	mov	r0, r3
 8009842:	f001 f9cf 	bl	800abe4 <RCCEx_PLL3_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800984c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009858:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800985c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	2100      	movs	r1, #0
 8009866:	6039      	str	r1, [r7, #0]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009872:	460b      	mov	r3, r1
 8009874:	4313      	orrs	r3, r2
 8009876:	d011      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987c:	3328      	adds	r3, #40	@ 0x28
 800987e:	2102      	movs	r1, #2
 8009880:	4618      	mov	r0, r3
 8009882:	f001 f9af 	bl	800abe4 <RCCEx_PLL3_Config>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800988c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800989c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e000      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80098b0:	46bd      	mov	sp, r7
 80098b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098b6:	bf00      	nop
 80098b8:	58024400 	.word	0x58024400

080098bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b090      	sub	sp, #64	@ 0x40
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80098ce:	430b      	orrs	r3, r1
 80098d0:	f040 8094 	bne.w	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80098d4:	4b9b      	ldr	r3, [pc, #620]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80098d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d8:	f003 0307 	and.w	r3, r3, #7
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	f200 8087 	bhi.w	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80098e6:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009901 	.word	0x08009901
 80098f0:	08009929 	.word	0x08009929
 80098f4:	08009951 	.word	0x08009951
 80098f8:	080099ed 	.word	0x080099ed
 80098fc:	08009979 	.word	0x08009979
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009900:	4b90      	ldr	r3, [pc, #576]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800990c:	d108      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800990e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f000 ff62 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800991c:	f000 bc93 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009924:	f000 bc8f 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009928:	4b86      	ldr	r3, [pc, #536]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009934:	d108      	bne.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009936:	f107 0318 	add.w	r3, r7, #24
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fca6 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009944:	f000 bc7f 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994c:	f000 bc7b 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009950:	4b7c      	ldr	r3, [pc, #496]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995c:	d108      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800995e:	f107 030c 	add.w	r3, r7, #12
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fde6 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800996c:	f000 bc6b 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	f000 bc67 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009978:	4b72      	ldr	r3, [pc, #456]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800997a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800997c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009982:	4b70      	ldr	r3, [pc, #448]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b04      	cmp	r3, #4
 800998c:	d10c      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800998e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009994:	4b6b      	ldr	r3, [pc, #428]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	08db      	lsrs	r3, r3, #3
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	4a6a      	ldr	r2, [pc, #424]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80099a0:	fa22 f303 	lsr.w	r3, r2, r3
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099a6:	e01f      	b.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099a8:	4b66      	ldr	r3, [pc, #408]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b4:	d106      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80099b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099bc:	d102      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099be:	4b63      	ldr	r3, [pc, #396]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099c2:	e011      	b.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d0:	d106      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80099d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d102      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099da:	4b5d      	ldr	r3, [pc, #372]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099de:	e003      	b.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099e4:	f000 bc2f 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099e8:	f000 bc2d 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099ec:	4b59      	ldr	r3, [pc, #356]	@ (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f0:	f000 bc29 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f8:	f000 bc25 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a04:	430b      	orrs	r3, r1
 8009a06:	f040 80a7 	bne.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a1a:	d054      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a22:	f200 808b 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a2c:	f000 8083 	beq.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a36:	f200 8081 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a40:	d02f      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a48:	d878      	bhi.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a56:	d012      	beq.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009a58:	e070      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a66:	d107      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 feb5 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a76:	e3e6      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a7c:	e3e3      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a7e:	4b31      	ldr	r3, [pc, #196]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a8a:	d107      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a8c:	f107 0318 	add.w	r3, r7, #24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fbfb 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a9a:	e3d4      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa0:	e3d1      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009aa2:	4b28      	ldr	r3, [pc, #160]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aae:	d107      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fd3d 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009abe:	e3c2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e3bf      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ace:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d10c      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d109      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae2:	4b18      	ldr	r3, [pc, #96]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a16      	ldr	r2, [pc, #88]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af4:	e01e      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009af6:	4b13      	ldr	r3, [pc, #76]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b02:	d106      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b0a:	d102      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b10:	e010      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b12:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b1e:	d106      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b26:	d102      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b28:	4b09      	ldr	r3, [pc, #36]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b32:	e388      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b34:	e387      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b36:	4b07      	ldr	r3, [pc, #28]	@ (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3a:	e384      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b40:	e381      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b42:	bf00      	nop
 8009b44:	58024400 	.word	0x58024400
 8009b48:	03d09000 	.word	0x03d09000
 8009b4c:	003d0900 	.word	0x003d0900
 8009b50:	016e3600 	.word	0x016e3600
 8009b54:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b5c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009b60:	430b      	orrs	r3, r1
 8009b62:	f040 809c 	bne.w	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009b66:	4b9e      	ldr	r3, [pc, #632]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b6a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b76:	d054      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b7e:	f200 808b 	bhi.w	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b88:	f000 8083 	beq.w	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b92:	f200 8081 	bhi.w	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b9c:	d02f      	beq.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ba4:	d878      	bhi.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bb2:	d012      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009bb4:	e070      	b.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bb6:	4b8a      	ldr	r3, [pc, #552]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bc2:	d107      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fe07 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd2:	e338      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd8:	e335      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bda:	4b81      	ldr	r3, [pc, #516]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be8:	f107 0318 	add.w	r3, r7, #24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fb4d 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf6:	e326      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfc:	e323      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bfe:	4b78      	ldr	r3, [pc, #480]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fc8f 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c1a:	e314      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c20:	e311      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c22:	4b6f      	ldr	r3, [pc, #444]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0304 	and.w	r3, r3, #4
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	d10c      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c3e:	4b68      	ldr	r3, [pc, #416]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	08db      	lsrs	r3, r3, #3
 8009c44:	f003 0303 	and.w	r3, r3, #3
 8009c48:	4a66      	ldr	r2, [pc, #408]	@ (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c50:	e01e      	b.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c52:	4b63      	ldr	r3, [pc, #396]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c5e:	d106      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c66:	d102      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c68:	4b5f      	ldr	r3, [pc, #380]	@ (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c6c:	e010      	b.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c7a:	d106      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c82:	d102      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c84:	4b59      	ldr	r3, [pc, #356]	@ (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c88:	e002      	b.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009c8e:	e2da      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c90:	e2d9      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c92:	4b57      	ldr	r3, [pc, #348]	@ (8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c96:	e2d6      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c9c:	e2d3      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	f040 80a7 	bne.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009cac:	4b4c      	ldr	r3, [pc, #304]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009cb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cbc:	d055      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc4:	f200 8096 	bhi.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cce:	f000 8084 	beq.w	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cd8:	f200 808c 	bhi.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ce2:	d030      	beq.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cea:	f200 8083 	bhi.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d004      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfa:	d012      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009cfc:	e07a      	b.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cfe:	4b38      	ldr	r3, [pc, #224]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d0a:	d107      	bne.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fd63 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d1a:	e294      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d20:	e291      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d22:	4b2f      	ldr	r3, [pc, #188]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d2e:	d107      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d30:	f107 0318 	add.w	r3, r7, #24
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 faa9 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d3e:	e282      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d44:	e27f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d46:	4b26      	ldr	r3, [pc, #152]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d52:	d107      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fbeb 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d62:	e270      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d68:	e26d      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d74:	4b1a      	ldr	r3, [pc, #104]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d10c      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d86:	4b16      	ldr	r3, [pc, #88]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	4a14      	ldr	r2, [pc, #80]	@ (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d98:	e01e      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d9a:	4b11      	ldr	r3, [pc, #68]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da6:	d106      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dae:	d102      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009db0:	4b0d      	ldr	r3, [pc, #52]	@ (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db4:	e010      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009db6:	4b0a      	ldr	r3, [pc, #40]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dca:	d102      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dcc:	4b07      	ldr	r3, [pc, #28]	@ (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009dd6:	e236      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009dd8:	e235      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dda:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dde:	e232      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009de0:	58024400 	.word	0x58024400
 8009de4:	03d09000 	.word	0x03d09000
 8009de8:	003d0900 	.word	0x003d0900
 8009dec:	016e3600 	.word	0x016e3600
 8009df0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e225      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009e02:	430b      	orrs	r3, r1
 8009e04:	f040 8085 	bne.w	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009e08:	4b9c      	ldr	r3, [pc, #624]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e0c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e10:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e18:	d06b      	beq.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e20:	d874      	bhi.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e28:	d056      	beq.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e30:	d86c      	bhi.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e38:	d03b      	beq.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e40:	d864      	bhi.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e48:	d021      	beq.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e50:	d85c      	bhi.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e5e:	d004      	beq.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009e60:	e054      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009e62:	f7fe fb5f 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 8009e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e68:	e1ed      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e6a:	4b84      	ldr	r3, [pc, #528]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e76:	d107      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e78:	f107 0318 	add.w	r3, r7, #24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 fa05 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e86:	e1de      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8c:	e1db      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e9a:	d107      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9c:	f107 030c 	add.w	r3, r7, #12
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fb47 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eaa:	e1cc      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb0:	e1c9      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009eb2:	4b72      	ldr	r3, [pc, #456]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	d109      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	08db      	lsrs	r3, r3, #3
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	4a6d      	ldr	r2, [pc, #436]	@ (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009eca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ed0:	e1b9      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed6:	e1b6      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ed8:	4b68      	ldr	r3, [pc, #416]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ee4:	d102      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009ee6:	4b67      	ldr	r3, [pc, #412]	@ (800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eea:	e1ac      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e1a9      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ef2:	4b62      	ldr	r3, [pc, #392]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009efe:	d102      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009f00:	4b61      	ldr	r3, [pc, #388]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f04:	e19f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	e19c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f10:	e199      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f16:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	d173      	bne.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009f1e:	4b57      	ldr	r3, [pc, #348]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f2e:	d02f      	beq.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f36:	d863      	bhi.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f44:	d012      	beq.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009f46:	e05b      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f48:	4b4c      	ldr	r3, [pc, #304]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f54:	d107      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f56:	f107 0318 	add.w	r3, r7, #24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 f996 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f64:	e16f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6a:	e16c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6c:	4b43      	ldr	r3, [pc, #268]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f78:	d107      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fad8 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f88:	e15d      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8e:	e15a      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f90:	4b3a      	ldr	r3, [pc, #232]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f98:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f9a:	4b38      	ldr	r3, [pc, #224]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0304 	and.w	r3, r3, #4
 8009fa2:	2b04      	cmp	r3, #4
 8009fa4:	d10c      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d109      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fac:	4b33      	ldr	r3, [pc, #204]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	08db      	lsrs	r3, r3, #3
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	4a32      	ldr	r2, [pc, #200]	@ (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fbe:	e01e      	b.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fcc:	d106      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd4:	d102      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fd6:	4b2b      	ldr	r3, [pc, #172]	@ (800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fda:	e010      	b.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fdc:	4b27      	ldr	r3, [pc, #156]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fe8:	d106      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ff0:	d102      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ff2:	4b25      	ldr	r3, [pc, #148]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff6:	e002      	b.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ffc:	e123      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ffe:	e122      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a004:	e11f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a00e:	430b      	orrs	r3, r1
 800a010:	d13c      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a012:	4b1a      	ldr	r3, [pc, #104]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a01a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d004      	beq.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a028:	d012      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a02a:	e023      	b.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a02c:	4b13      	ldr	r3, [pc, #76]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a038:	d107      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fbcc 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a048:	e0fd      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04e:	e0fa      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a050:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a05c:	d107      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f912 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06c:	e0eb      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a072:	e0e8      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	e0e5      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a07a:	bf00      	nop
 800a07c:	58024400 	.word	0x58024400
 800a080:	03d09000 	.word	0x03d09000
 800a084:	003d0900 	.word	0x003d0900
 800a088:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a090:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a094:	430b      	orrs	r3, r1
 800a096:	f040 8085 	bne.w	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a09a:	4b6d      	ldr	r3, [pc, #436]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a09e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a0a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0aa:	d06b      	beq.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0b2:	d874      	bhi.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ba:	d056      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c2:	d86c      	bhi.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0ca:	d03b      	beq.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0d2:	d864      	bhi.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0da:	d021      	beq.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0e2:	d85c      	bhi.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0f0:	d004      	beq.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a0f2:	e054      	b.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a0f4:	f000 f8b4 	bl	800a260 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0fa:	e0a4      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0fc:	4b54      	ldr	r3, [pc, #336]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a108:	d107      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a10a:	f107 0318 	add.w	r3, r7, #24
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f8bc 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a118:	e095      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11e:	e092      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a120:	4b4b      	ldr	r3, [pc, #300]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a12c:	d107      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a12e:	f107 030c 	add.w	r3, r7, #12
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f9fe 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a13c:	e083      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a142:	e080      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a144:	4b42      	ldr	r3, [pc, #264]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d109      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a150:	4b3f      	ldr	r3, [pc, #252]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	08db      	lsrs	r3, r3, #3
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	4a3e      	ldr	r2, [pc, #248]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a15c:	fa22 f303 	lsr.w	r3, r2, r3
 800a160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a162:	e070      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a168:	e06d      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a16a:	4b39      	ldr	r3, [pc, #228]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a176:	d102      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a178:	4b37      	ldr	r3, [pc, #220]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a17c:	e063      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a182:	e060      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a184:	4b32      	ldr	r3, [pc, #200]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a18c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a190:	d102      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a192:	4b32      	ldr	r3, [pc, #200]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a196:	e056      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19c:	e053      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a2:	e050      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	d148      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a1b0:	4b27      	ldr	r3, [pc, #156]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c0:	d02a      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c8:	d838      	bhi.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d6:	d00d      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a1d8:	e030      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1da:	4b1d      	ldr	r3, [pc, #116]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1e6:	d102      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a1e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ec:	e02b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f2:	e028      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1f4:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fae8 	bl	800a7dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a210:	e019      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a216:	e016      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a218:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a224:	d107      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f82e 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a234:	e007      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a23a:	e004      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	e001      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3740      	adds	r7, #64	@ 0x40
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	003d0900 	.word	0x003d0900
 800a25c:	016e3600 	.word	0x016e3600

0800a260 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a264:	f7fe f92e 	bl	80084c4 <HAL_RCC_GetHCLKFreq>
 800a268:	4602      	mov	r2, r0
 800a26a:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	091b      	lsrs	r3, r3, #4
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	4904      	ldr	r1, [pc, #16]	@ (800a288 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a276:	5ccb      	ldrb	r3, [r1, r3]
 800a278:	f003 031f 	and.w	r3, r3, #31
 800a27c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a280:	4618      	mov	r0, r3
 800a282:	bd80      	pop	{r7, pc}
 800a284:	58024400 	.word	0x58024400
 800a288:	08013f74 	.word	0x08013f74

0800a28c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b089      	sub	sp, #36	@ 0x24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a294:	4ba1      	ldr	r3, [pc, #644]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	f003 0303 	and.w	r3, r3, #3
 800a29c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a29e:	4b9f      	ldr	r3, [pc, #636]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a2:	0b1b      	lsrs	r3, r3, #12
 800a2a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a2aa:	4b9c      	ldr	r3, [pc, #624]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	091b      	lsrs	r3, r3, #4
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a2b6:	4b99      	ldr	r3, [pc, #612]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	fb02 f303 	mul.w	r3, r2, r3
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 8111 	beq.w	800a4fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	f000 8083 	beq.w	800a3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	f200 80a1 	bhi.w	800a42c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d056      	beq.n	800a3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a2f6:	e099      	b.n	800a42c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f8:	4b88      	ldr	r3, [pc, #544]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0320 	and.w	r3, r3, #32
 800a300:	2b00      	cmp	r3, #0
 800a302:	d02d      	beq.n	800a360 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a304:	4b85      	ldr	r3, [pc, #532]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	08db      	lsrs	r3, r3, #3
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	4a84      	ldr	r2, [pc, #528]	@ (800a520 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a310:	fa22 f303 	lsr.w	r3, r2, r3
 800a314:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32e:	4b7b      	ldr	r3, [pc, #492]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a342:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a35e:	e087      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a528 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a372:	4b6a      	ldr	r3, [pc, #424]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a382:	ed97 6a03 	vldr	s12, [r7, #12]
 800a386:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a2:	e065      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3b6:	4b59      	ldr	r3, [pc, #356]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3e6:	e043      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fa:	4b48      	ldr	r3, [pc, #288]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a40e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a42a:	e021      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a436:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a52c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43e:	4b37      	ldr	r3, [pc, #220]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a452:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a46e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a470:	4b2a      	ldr	r3, [pc, #168]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a474:	0a5b      	lsrs	r3, r3, #9
 800a476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a496:	ee17 2a90 	vmov	r2, s15
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a49e:	4b1f      	ldr	r3, [pc, #124]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c4:	ee17 2a90 	vmov	r2, s15
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a4cc:	4b13      	ldr	r3, [pc, #76]	@ (800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d0:	0e1b      	lsrs	r3, r3, #24
 800a4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f2:	ee17 2a90 	vmov	r2, s15
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a4fa:	e008      	b.n	800a50e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	609a      	str	r2, [r3, #8]
}
 800a50e:	bf00      	nop
 800a510:	3724      	adds	r7, #36	@ 0x24
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	58024400 	.word	0x58024400
 800a520:	03d09000 	.word	0x03d09000
 800a524:	46000000 	.word	0x46000000
 800a528:	4c742400 	.word	0x4c742400
 800a52c:	4a742400 	.word	0x4a742400
 800a530:	4bb71b00 	.word	0x4bb71b00

0800a534 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a534:	b480      	push	{r7}
 800a536:	b089      	sub	sp, #36	@ 0x24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a53c:	4ba1      	ldr	r3, [pc, #644]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a540:	f003 0303 	and.w	r3, r3, #3
 800a544:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a546:	4b9f      	ldr	r3, [pc, #636]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54a:	0d1b      	lsrs	r3, r3, #20
 800a54c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a550:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a552:	4b9c      	ldr	r3, [pc, #624]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a556:	0a1b      	lsrs	r3, r3, #8
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a55e:	4b99      	ldr	r3, [pc, #612]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a562:	08db      	lsrs	r3, r3, #3
 800a564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	fb02 f303 	mul.w	r3, r2, r3
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a576:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8111 	beq.w	800a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f000 8083 	beq.w	800a690 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	f200 80a1 	bhi.w	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d056      	beq.n	800a64c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a59e:	e099      	b.n	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5a0:	4b88      	ldr	r3, [pc, #544]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d02d      	beq.n	800a608 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ac:	4b85      	ldr	r3, [pc, #532]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	08db      	lsrs	r3, r3, #3
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	4a84      	ldr	r2, [pc, #528]	@ (800a7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	ee07 3a90 	vmov	s15, r3
 800a5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a606:	e087      	b.n	800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a612:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61a:	4b6a      	ldr	r3, [pc, #424]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a62e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a64a:	e065      	b.n	800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a65e:	4b59      	ldr	r3, [pc, #356]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a672:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a67e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a68e:	e043      	b.n	800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a2:	4b48      	ldr	r3, [pc, #288]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6d2:	e021      	b.n	800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e6:	4b37      	ldr	r3, [pc, #220]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a716:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a718:	4b2a      	ldr	r3, [pc, #168]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71c:	0a5b      	lsrs	r3, r3, #9
 800a71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a72e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a732:	edd7 6a07 	vldr	s13, [r7, #28]
 800a736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73e:	ee17 2a90 	vmov	r2, s15
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a746:	4b1f      	ldr	r3, [pc, #124]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74a:	0c1b      	lsrs	r3, r3, #16
 800a74c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a758:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a75c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a760:	edd7 6a07 	vldr	s13, [r7, #28]
 800a764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a76c:	ee17 2a90 	vmov	r2, s15
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a774:	4b13      	ldr	r3, [pc, #76]	@ (800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a778:	0e1b      	lsrs	r3, r3, #24
 800a77a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a78a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a78e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a79a:	ee17 2a90 	vmov	r2, s15
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a7a2:	e008      	b.n	800a7b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	609a      	str	r2, [r3, #8]
}
 800a7b6:	bf00      	nop
 800a7b8:	3724      	adds	r7, #36	@ 0x24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	03d09000 	.word	0x03d09000
 800a7cc:	46000000 	.word	0x46000000
 800a7d0:	4c742400 	.word	0x4c742400
 800a7d4:	4a742400 	.word	0x4a742400
 800a7d8:	4bb71b00 	.word	0x4bb71b00

0800a7dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b089      	sub	sp, #36	@ 0x24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7e4:	4ba0      	ldr	r3, [pc, #640]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e8:	f003 0303 	and.w	r3, r3, #3
 800a7ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a7ee:	4b9e      	ldr	r3, [pc, #632]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f2:	091b      	lsrs	r3, r3, #4
 800a7f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a7fa:	4b9b      	ldr	r3, [pc, #620]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a804:	4b98      	ldr	r3, [pc, #608]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a808:	08db      	lsrs	r3, r3, #3
 800a80a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	fb02 f303 	mul.w	r3, r2, r3
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8111 	beq.w	800aa4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	f000 8083 	beq.w	800a936 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2b02      	cmp	r3, #2
 800a834:	f200 80a1 	bhi.w	800a97a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d056      	beq.n	800a8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a844:	e099      	b.n	800a97a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a846:	4b88      	ldr	r3, [pc, #544]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d02d      	beq.n	800a8ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a852:	4b85      	ldr	r3, [pc, #532]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	08db      	lsrs	r3, r3, #3
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	4a83      	ldr	r2, [pc, #524]	@ (800aa6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a85e:	fa22 f303 	lsr.w	r3, r2, r3
 800a862:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87c:	4b7a      	ldr	r3, [pc, #488]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a890:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a89c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8ac:	e087      	b.n	800a9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aa74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c0:	4b69      	ldr	r3, [pc, #420]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8d4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8f0:	e065      	b.n	800a9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a904:	4b58      	ldr	r3, [pc, #352]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90c:	ee07 3a90 	vmov	s15, r3
 800a910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a914:	ed97 6a03 	vldr	s12, [r7, #12]
 800a918:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a91c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a934:	e043      	b.n	800a9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a940:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aa7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a948:	4b47      	ldr	r3, [pc, #284]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a958:	ed97 6a03 	vldr	s12, [r7, #12]
 800a95c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a974:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a978:	e021      	b.n	800a9be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	ee07 3a90 	vmov	s15, r3
 800a980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a984:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aa74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98c:	4b36      	ldr	r3, [pc, #216]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9a0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a9be:	4b2a      	ldr	r3, [pc, #168]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c2:	0a5b      	lsrs	r3, r3, #9
 800a9c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9c8:	ee07 3a90 	vmov	s15, r3
 800a9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9e4:	ee17 2a90 	vmov	r2, s15
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f0:	0c1b      	lsrs	r3, r3, #16
 800a9f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa06:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa12:	ee17 2a90 	vmov	r2, s15
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa1a:	4b13      	ldr	r3, [pc, #76]	@ (800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1e:	0e1b      	lsrs	r3, r3, #24
 800aa20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa34:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa40:	ee17 2a90 	vmov	r2, s15
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa48:	e008      	b.n	800aa5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	609a      	str	r2, [r3, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	3724      	adds	r7, #36	@ 0x24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	58024400 	.word	0x58024400
 800aa6c:	03d09000 	.word	0x03d09000
 800aa70:	46000000 	.word	0x46000000
 800aa74:	4c742400 	.word	0x4c742400
 800aa78:	4a742400 	.word	0x4a742400
 800aa7c:	4bb71b00 	.word	0x4bb71b00

0800aa80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa8e:	4b53      	ldr	r3, [pc, #332]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aa90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d101      	bne.n	800aa9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e099      	b.n	800abd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa9e:	4b4f      	ldr	r3, [pc, #316]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a4e      	ldr	r2, [pc, #312]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aaa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aaa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaaa:	f7f7 fcd5 	bl	8002458 <HAL_GetTick>
 800aaae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aab0:	e008      	b.n	800aac4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aab2:	f7f7 fcd1 	bl	8002458 <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d901      	bls.n	800aac4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e086      	b.n	800abd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aac4:	4b45      	ldr	r3, [pc, #276]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1f0      	bne.n	800aab2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aad0:	4b42      	ldr	r3, [pc, #264]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	031b      	lsls	r3, r3, #12
 800aade:	493f      	ldr	r1, [pc, #252]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	628b      	str	r3, [r1, #40]	@ 0x28
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	025b      	lsls	r3, r3, #9
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	041b      	lsls	r3, r3, #16
 800ab02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab06:	431a      	orrs	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	061b      	lsls	r3, r3, #24
 800ab10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab14:	4931      	ldr	r1, [pc, #196]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab1a:	4b30      	ldr	r3, [pc, #192]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	492d      	ldr	r1, [pc, #180]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab2c:	4b2b      	ldr	r3, [pc, #172]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	f023 0220 	bic.w	r2, r3, #32
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	4928      	ldr	r1, [pc, #160]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab3e:	4b27      	ldr	r3, [pc, #156]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab42:	4a26      	ldr	r2, [pc, #152]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab44:	f023 0310 	bic.w	r3, r3, #16
 800ab48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab4a:	4b24      	ldr	r3, [pc, #144]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab4e:	4b24      	ldr	r3, [pc, #144]	@ (800abe0 <RCCEx_PLL2_Config+0x160>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	69d2      	ldr	r2, [r2, #28]
 800ab56:	00d2      	lsls	r2, r2, #3
 800ab58:	4920      	ldr	r1, [pc, #128]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab5e:	4b1f      	ldr	r3, [pc, #124]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab62:	4a1e      	ldr	r2, [pc, #120]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab64:	f043 0310 	orr.w	r3, r3, #16
 800ab68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab70:	4b1a      	ldr	r3, [pc, #104]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab74:	4a19      	ldr	r2, [pc, #100]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab7c:	e00f      	b.n	800ab9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d106      	bne.n	800ab92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab84:	4b15      	ldr	r3, [pc, #84]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab88:	4a14      	ldr	r2, [pc, #80]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab90:	e005      	b.n	800ab9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab92:	4b12      	ldr	r3, [pc, #72]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab96:	4a11      	ldr	r2, [pc, #68]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800ab98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a0e      	ldr	r2, [pc, #56]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800aba4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abaa:	f7f7 fc55 	bl	8002458 <HAL_GetTick>
 800abae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abb0:	e008      	b.n	800abc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abb2:	f7f7 fc51 	bl	8002458 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d901      	bls.n	800abc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e006      	b.n	800abd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abc4:	4b05      	ldr	r3, [pc, #20]	@ (800abdc <RCCEx_PLL2_Config+0x15c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0f0      	beq.n	800abb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
 800abe0:	ffff0007 	.word	0xffff0007

0800abe4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abf2:	4b53      	ldr	r3, [pc, #332]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800abf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d101      	bne.n	800ac02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e099      	b.n	800ad36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac02:	4b4f      	ldr	r3, [pc, #316]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a4e      	ldr	r2, [pc, #312]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac0e:	f7f7 fc23 	bl	8002458 <HAL_GetTick>
 800ac12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac14:	e008      	b.n	800ac28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac16:	f7f7 fc1f 	bl	8002458 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d901      	bls.n	800ac28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e086      	b.n	800ad36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac28:	4b45      	ldr	r3, [pc, #276]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1f0      	bne.n	800ac16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac34:	4b42      	ldr	r3, [pc, #264]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	051b      	lsls	r3, r3, #20
 800ac42:	493f      	ldr	r1, [pc, #252]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	025b      	lsls	r3, r3, #9
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	041b      	lsls	r3, r3, #16
 800ac66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	061b      	lsls	r3, r3, #24
 800ac74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac78:	4931      	ldr	r1, [pc, #196]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac7e:	4b30      	ldr	r3, [pc, #192]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	492d      	ldr	r1, [pc, #180]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac90:	4b2b      	ldr	r3, [pc, #172]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	4928      	ldr	r1, [pc, #160]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aca2:	4b27      	ldr	r3, [pc, #156]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800aca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca6:	4a26      	ldr	r2, [pc, #152]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800aca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800acae:	4b24      	ldr	r3, [pc, #144]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acb2:	4b24      	ldr	r3, [pc, #144]	@ (800ad44 <RCCEx_PLL3_Config+0x160>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	69d2      	ldr	r2, [r2, #28]
 800acba:	00d2      	lsls	r2, r2, #3
 800acbc:	4920      	ldr	r1, [pc, #128]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acc2:	4b1f      	ldr	r3, [pc, #124]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800accc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800acd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd8:	4a19      	ldr	r2, [pc, #100]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800acde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ace0:	e00f      	b.n	800ad02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d106      	bne.n	800acf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ace8:	4b15      	ldr	r3, [pc, #84]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acec:	4a14      	ldr	r2, [pc, #80]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800acf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800acf4:	e005      	b.n	800ad02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acf6:	4b12      	ldr	r3, [pc, #72]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfa:	4a11      	ldr	r2, [pc, #68]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800acfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad02:	4b0f      	ldr	r3, [pc, #60]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a0e      	ldr	r2, [pc, #56]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ad08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad0e:	f7f7 fba3 	bl	8002458 <HAL_GetTick>
 800ad12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad14:	e008      	b.n	800ad28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad16:	f7f7 fb9f 	bl	8002458 <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d901      	bls.n	800ad28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e006      	b.n	800ad36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad28:	4b05      	ldr	r3, [pc, #20]	@ (800ad40 <RCCEx_PLL3_Config+0x15c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0f0      	beq.n	800ad16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	58024400 	.word	0x58024400
 800ad44:	ffff0007 	.word	0xffff0007

0800ad48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e10f      	b.n	800af7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a87      	ldr	r2, [pc, #540]	@ (800af84 <HAL_SPI_Init+0x23c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00f      	beq.n	800ad8a <HAL_SPI_Init+0x42>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a86      	ldr	r2, [pc, #536]	@ (800af88 <HAL_SPI_Init+0x240>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d00a      	beq.n	800ad8a <HAL_SPI_Init+0x42>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a84      	ldr	r2, [pc, #528]	@ (800af8c <HAL_SPI_Init+0x244>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d005      	beq.n	800ad8a <HAL_SPI_Init+0x42>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	2b0f      	cmp	r3, #15
 800ad84:	d901      	bls.n	800ad8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e0f7      	b.n	800af7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f900 	bl	800af90 <SPI_GetPacketSize>
 800ad90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a7b      	ldr	r2, [pc, #492]	@ (800af84 <HAL_SPI_Init+0x23c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d00c      	beq.n	800adb6 <HAL_SPI_Init+0x6e>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a79      	ldr	r2, [pc, #484]	@ (800af88 <HAL_SPI_Init+0x240>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d007      	beq.n	800adb6 <HAL_SPI_Init+0x6e>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a78      	ldr	r2, [pc, #480]	@ (800af8c <HAL_SPI_Init+0x244>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d002      	beq.n	800adb6 <HAL_SPI_Init+0x6e>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	d811      	bhi.n	800adda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800adba:	4a72      	ldr	r2, [pc, #456]	@ (800af84 <HAL_SPI_Init+0x23c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d009      	beq.n	800add4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a70      	ldr	r2, [pc, #448]	@ (800af88 <HAL_SPI_Init+0x240>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d004      	beq.n	800add4 <HAL_SPI_Init+0x8c>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a6f      	ldr	r2, [pc, #444]	@ (800af8c <HAL_SPI_Init+0x244>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d104      	bne.n	800adde <HAL_SPI_Init+0x96>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b10      	cmp	r3, #16
 800add8:	d901      	bls.n	800adde <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0cd      	b.n	800af7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d106      	bne.n	800adf8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7f6 fcb4 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 0201 	bic.w	r2, r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ae1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae24:	d119      	bne.n	800ae5a <HAL_SPI_Init+0x112>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae2e:	d103      	bne.n	800ae38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d008      	beq.n	800ae4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10c      	bne.n	800ae5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae48:	d107      	bne.n	800ae5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00f      	beq.n	800ae86 <HAL_SPI_Init+0x13e>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	2b06      	cmp	r3, #6
 800ae6c:	d90b      	bls.n	800ae86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e007      	b.n	800ae96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69da      	ldr	r2, [r3, #28]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea8:	ea42 0103 	orr.w	r1, r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec6:	431a      	orrs	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	431a      	orrs	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	431a      	orrs	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	431a      	orrs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	431a      	orrs	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aef6:	ea42 0103 	orr.w	r1, r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d113      	bne.n	800af36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0201 	bic.w	r2, r2, #1
 800af44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	430a      	orrs	r2, r1
 800af66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	40013000 	.word	0x40013000
 800af88:	40003800 	.word	0x40003800
 800af8c:	40003c00 	.word	0x40003c00

0800af90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af9c:	095b      	lsrs	r3, r3, #5
 800af9e:	3301      	adds	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	3307      	adds	r3, #7
 800afae:	08db      	lsrs	r3, r3, #3
 800afb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	fb02 f303 	mul.w	r3, r2, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e049      	b.n	800b06c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7f6 fcbf 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2202      	movs	r2, #2
 800aff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f000 faa3 	bl	800b550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e049      	b.n	800b11a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f841 	bl	800b122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f000 fa4c 	bl	800b550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b12a:	bf00      	nop
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
	...

0800b138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d101      	bne.n	800b156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b152:	2302      	movs	r3, #2
 800b154:	e0ff      	b.n	800b356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b14      	cmp	r3, #20
 800b162:	f200 80f0 	bhi.w	800b346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b166:	a201      	add	r2, pc, #4	@ (adr r2, 800b16c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16c:	0800b1c1 	.word	0x0800b1c1
 800b170:	0800b347 	.word	0x0800b347
 800b174:	0800b347 	.word	0x0800b347
 800b178:	0800b347 	.word	0x0800b347
 800b17c:	0800b201 	.word	0x0800b201
 800b180:	0800b347 	.word	0x0800b347
 800b184:	0800b347 	.word	0x0800b347
 800b188:	0800b347 	.word	0x0800b347
 800b18c:	0800b243 	.word	0x0800b243
 800b190:	0800b347 	.word	0x0800b347
 800b194:	0800b347 	.word	0x0800b347
 800b198:	0800b347 	.word	0x0800b347
 800b19c:	0800b283 	.word	0x0800b283
 800b1a0:	0800b347 	.word	0x0800b347
 800b1a4:	0800b347 	.word	0x0800b347
 800b1a8:	0800b347 	.word	0x0800b347
 800b1ac:	0800b2c5 	.word	0x0800b2c5
 800b1b0:	0800b347 	.word	0x0800b347
 800b1b4:	0800b347 	.word	0x0800b347
 800b1b8:	0800b347 	.word	0x0800b347
 800b1bc:	0800b305 	.word	0x0800b305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fa74 	bl	800b6b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f042 0208 	orr.w	r2, r2, #8
 800b1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	699a      	ldr	r2, [r3, #24]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0204 	bic.w	r2, r2, #4
 800b1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6999      	ldr	r1, [r3, #24]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	619a      	str	r2, [r3, #24]
      break;
 800b1fe:	e0a5      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fae4 	bl	800b7d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	699a      	ldr	r2, [r3, #24]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b21a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	699a      	ldr	r2, [r3, #24]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b22a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6999      	ldr	r1, [r3, #24]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	021a      	lsls	r2, r3, #8
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	619a      	str	r2, [r3, #24]
      break;
 800b240:	e084      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fb4d 	bl	800b8e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69da      	ldr	r2, [r3, #28]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0208 	orr.w	r2, r2, #8
 800b25c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69da      	ldr	r2, [r3, #28]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f022 0204 	bic.w	r2, r2, #4
 800b26c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69d9      	ldr	r1, [r3, #28]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	430a      	orrs	r2, r1
 800b27e:	61da      	str	r2, [r3, #28]
      break;
 800b280:	e064      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fbb5 	bl	800b9f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	69da      	ldr	r2, [r3, #28]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b29c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	69da      	ldr	r2, [r3, #28]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	69d9      	ldr	r1, [r3, #28]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	021a      	lsls	r2, r3, #8
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	61da      	str	r2, [r3, #28]
      break;
 800b2c2:	e043      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68b9      	ldr	r1, [r7, #8]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fbfe 	bl	800bacc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0208 	orr.w	r2, r2, #8
 800b2de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 0204 	bic.w	r2, r2, #4
 800b2ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	691a      	ldr	r2, [r3, #16]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b302:	e023      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fc42 	bl	800bb94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b31e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b32e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	021a      	lsls	r2, r3, #8
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b344:	e002      	b.n	800b34c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	75fb      	strb	r3, [r7, #23]
      break;
 800b34a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b354:	7dfb      	ldrb	r3, [r7, #23]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop

0800b360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_TIM_ConfigClockSource+0x1c>
 800b378:	2302      	movs	r3, #2
 800b37a:	e0dc      	b.n	800b536 <HAL_TIM_ConfigClockSource+0x1d6>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	4b6a      	ldr	r3, [pc, #424]	@ (800b540 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a64      	ldr	r2, [pc, #400]	@ (800b544 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	f000 80a9 	beq.w	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3b8:	4a62      	ldr	r2, [pc, #392]	@ (800b544 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	f200 80ae 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b3c0:	4a61      	ldr	r2, [pc, #388]	@ (800b548 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	f000 80a1 	beq.w	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c8:	4a5f      	ldr	r2, [pc, #380]	@ (800b548 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	f200 80a6 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d0:	4a5e      	ldr	r2, [pc, #376]	@ (800b54c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	f000 8099 	beq.w	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3d8:	4a5c      	ldr	r2, [pc, #368]	@ (800b54c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	f200 809e 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3e4:	f000 8091 	beq.w	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3ec:	f200 8096 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f4:	f000 8089 	beq.w	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3fc:	f200 808e 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b404:	d03e      	beq.n	800b484 <HAL_TIM_ConfigClockSource+0x124>
 800b406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b40a:	f200 8087 	bhi.w	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b40e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b412:	f000 8086 	beq.w	800b522 <HAL_TIM_ConfigClockSource+0x1c2>
 800b416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b41a:	d87f      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b41c:	2b70      	cmp	r3, #112	@ 0x70
 800b41e:	d01a      	beq.n	800b456 <HAL_TIM_ConfigClockSource+0xf6>
 800b420:	2b70      	cmp	r3, #112	@ 0x70
 800b422:	d87b      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b424:	2b60      	cmp	r3, #96	@ 0x60
 800b426:	d050      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x16a>
 800b428:	2b60      	cmp	r3, #96	@ 0x60
 800b42a:	d877      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b42c:	2b50      	cmp	r3, #80	@ 0x50
 800b42e:	d03c      	beq.n	800b4aa <HAL_TIM_ConfigClockSource+0x14a>
 800b430:	2b50      	cmp	r3, #80	@ 0x50
 800b432:	d873      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b434:	2b40      	cmp	r3, #64	@ 0x40
 800b436:	d058      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x18a>
 800b438:	2b40      	cmp	r3, #64	@ 0x40
 800b43a:	d86f      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b43c:	2b30      	cmp	r3, #48	@ 0x30
 800b43e:	d064      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b440:	2b30      	cmp	r3, #48	@ 0x30
 800b442:	d86b      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b444:	2b20      	cmp	r3, #32
 800b446:	d060      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b448:	2b20      	cmp	r3, #32
 800b44a:	d867      	bhi.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d05c      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b450:	2b10      	cmp	r3, #16
 800b452:	d05a      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x1aa>
 800b454:	e062      	b.n	800b51c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b466:	f000 fc79 	bl	800bd5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	609a      	str	r2, [r3, #8]
      break;
 800b482:	e04f      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b494:	f000 fc62 	bl	800bd5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4a6:	609a      	str	r2, [r3, #8]
      break;
 800b4a8:	e03c      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f000 fbd2 	bl	800bc60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2150      	movs	r1, #80	@ 0x50
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fc2c 	bl	800bd20 <TIM_ITRx_SetConfig>
      break;
 800b4c8:	e02c      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f000 fbf1 	bl	800bcbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2160      	movs	r1, #96	@ 0x60
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fc1c 	bl	800bd20 <TIM_ITRx_SetConfig>
      break;
 800b4e8:	e01c      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f000 fbb2 	bl	800bc60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2140      	movs	r1, #64	@ 0x40
 800b502:	4618      	mov	r0, r3
 800b504:	f000 fc0c 	bl	800bd20 <TIM_ITRx_SetConfig>
      break;
 800b508:	e00c      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4619      	mov	r1, r3
 800b514:	4610      	mov	r0, r2
 800b516:	f000 fc03 	bl	800bd20 <TIM_ITRx_SetConfig>
      break;
 800b51a:	e003      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	73fb      	strb	r3, [r7, #15]
      break;
 800b520:	e000      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b534:	7bfb      	ldrb	r3, [r7, #15]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	ffceff88 	.word	0xffceff88
 800b544:	00100040 	.word	0x00100040
 800b548:	00100030 	.word	0x00100030
 800b54c:	00100020 	.word	0x00100020

0800b550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a4a      	ldr	r2, [pc, #296]	@ (800b68c <TIM_Base_SetConfig+0x13c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d013      	beq.n	800b590 <TIM_Base_SetConfig+0x40>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b56e:	d00f      	beq.n	800b590 <TIM_Base_SetConfig+0x40>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a47      	ldr	r2, [pc, #284]	@ (800b690 <TIM_Base_SetConfig+0x140>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00b      	beq.n	800b590 <TIM_Base_SetConfig+0x40>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a46      	ldr	r2, [pc, #280]	@ (800b694 <TIM_Base_SetConfig+0x144>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d007      	beq.n	800b590 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a45      	ldr	r2, [pc, #276]	@ (800b698 <TIM_Base_SetConfig+0x148>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d003      	beq.n	800b590 <TIM_Base_SetConfig+0x40>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a44      	ldr	r2, [pc, #272]	@ (800b69c <TIM_Base_SetConfig+0x14c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d108      	bne.n	800b5a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a39      	ldr	r2, [pc, #228]	@ (800b68c <TIM_Base_SetConfig+0x13c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d027      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5b0:	d023      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a36      	ldr	r2, [pc, #216]	@ (800b690 <TIM_Base_SetConfig+0x140>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d01f      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a35      	ldr	r2, [pc, #212]	@ (800b694 <TIM_Base_SetConfig+0x144>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d01b      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a34      	ldr	r2, [pc, #208]	@ (800b698 <TIM_Base_SetConfig+0x148>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d017      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a33      	ldr	r2, [pc, #204]	@ (800b69c <TIM_Base_SetConfig+0x14c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d013      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a32      	ldr	r2, [pc, #200]	@ (800b6a0 <TIM_Base_SetConfig+0x150>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d00f      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a31      	ldr	r2, [pc, #196]	@ (800b6a4 <TIM_Base_SetConfig+0x154>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00b      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a30      	ldr	r2, [pc, #192]	@ (800b6a8 <TIM_Base_SetConfig+0x158>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d007      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a2f      	ldr	r2, [pc, #188]	@ (800b6ac <TIM_Base_SetConfig+0x15c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d003      	beq.n	800b5fa <TIM_Base_SetConfig+0xaa>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a2e      	ldr	r2, [pc, #184]	@ (800b6b0 <TIM_Base_SetConfig+0x160>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d108      	bne.n	800b60c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	4313      	orrs	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689a      	ldr	r2, [r3, #8]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a16      	ldr	r2, [pc, #88]	@ (800b68c <TIM_Base_SetConfig+0x13c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00f      	beq.n	800b658 <TIM_Base_SetConfig+0x108>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a18      	ldr	r2, [pc, #96]	@ (800b69c <TIM_Base_SetConfig+0x14c>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d00b      	beq.n	800b658 <TIM_Base_SetConfig+0x108>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <TIM_Base_SetConfig+0x150>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d007      	beq.n	800b658 <TIM_Base_SetConfig+0x108>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a16      	ldr	r2, [pc, #88]	@ (800b6a4 <TIM_Base_SetConfig+0x154>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d003      	beq.n	800b658 <TIM_Base_SetConfig+0x108>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a15      	ldr	r2, [pc, #84]	@ (800b6a8 <TIM_Base_SetConfig+0x158>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d103      	bne.n	800b660 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	691a      	ldr	r2, [r3, #16]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d105      	bne.n	800b67e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f023 0201 	bic.w	r2, r3, #1
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	611a      	str	r2, [r3, #16]
  }
}
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	40010000 	.word	0x40010000
 800b690:	40000400 	.word	0x40000400
 800b694:	40000800 	.word	0x40000800
 800b698:	40000c00 	.word	0x40000c00
 800b69c:	40010400 	.word	0x40010400
 800b6a0:	40014000 	.word	0x40014000
 800b6a4:	40014400 	.word	0x40014400
 800b6a8:	40014800 	.word	0x40014800
 800b6ac:	4000e000 	.word	0x4000e000
 800b6b0:	4000e400 	.word	0x4000e400

0800b6b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	f023 0201 	bic.w	r2, r3, #1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4b37      	ldr	r3, [pc, #220]	@ (800b7bc <TIM_OC1_SetConfig+0x108>)
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f023 0303 	bic.w	r3, r3, #3
 800b6ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f023 0302 	bic.w	r3, r3, #2
 800b6fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a2d      	ldr	r2, [pc, #180]	@ (800b7c0 <TIM_OC1_SetConfig+0x10c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00f      	beq.n	800b730 <TIM_OC1_SetConfig+0x7c>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a2c      	ldr	r2, [pc, #176]	@ (800b7c4 <TIM_OC1_SetConfig+0x110>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d00b      	beq.n	800b730 <TIM_OC1_SetConfig+0x7c>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a2b      	ldr	r2, [pc, #172]	@ (800b7c8 <TIM_OC1_SetConfig+0x114>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d007      	beq.n	800b730 <TIM_OC1_SetConfig+0x7c>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a2a      	ldr	r2, [pc, #168]	@ (800b7cc <TIM_OC1_SetConfig+0x118>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d003      	beq.n	800b730 <TIM_OC1_SetConfig+0x7c>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a29      	ldr	r2, [pc, #164]	@ (800b7d0 <TIM_OC1_SetConfig+0x11c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d10c      	bne.n	800b74a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f023 0308 	bic.w	r3, r3, #8
 800b736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	4313      	orrs	r3, r2
 800b740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f023 0304 	bic.w	r3, r3, #4
 800b748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a1c      	ldr	r2, [pc, #112]	@ (800b7c0 <TIM_OC1_SetConfig+0x10c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00f      	beq.n	800b772 <TIM_OC1_SetConfig+0xbe>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a1b      	ldr	r2, [pc, #108]	@ (800b7c4 <TIM_OC1_SetConfig+0x110>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d00b      	beq.n	800b772 <TIM_OC1_SetConfig+0xbe>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a1a      	ldr	r2, [pc, #104]	@ (800b7c8 <TIM_OC1_SetConfig+0x114>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d007      	beq.n	800b772 <TIM_OC1_SetConfig+0xbe>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a19      	ldr	r2, [pc, #100]	@ (800b7cc <TIM_OC1_SetConfig+0x118>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d003      	beq.n	800b772 <TIM_OC1_SetConfig+0xbe>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a18      	ldr	r2, [pc, #96]	@ (800b7d0 <TIM_OC1_SetConfig+0x11c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d111      	bne.n	800b796 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	4313      	orrs	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	4313      	orrs	r3, r2
 800b794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	621a      	str	r2, [r3, #32]
}
 800b7b0:	bf00      	nop
 800b7b2:	371c      	adds	r7, #28
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	fffeff8f 	.word	0xfffeff8f
 800b7c0:	40010000 	.word	0x40010000
 800b7c4:	40010400 	.word	0x40010400
 800b7c8:	40014000 	.word	0x40014000
 800b7cc:	40014400 	.word	0x40014400
 800b7d0:	40014800 	.word	0x40014800

0800b7d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	f023 0210 	bic.w	r2, r3, #16
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4b34      	ldr	r3, [pc, #208]	@ (800b8d0 <TIM_OC2_SetConfig+0xfc>)
 800b800:	4013      	ands	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f023 0320 	bic.w	r3, r3, #32
 800b81e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	011b      	lsls	r3, r3, #4
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4313      	orrs	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a29      	ldr	r2, [pc, #164]	@ (800b8d4 <TIM_OC2_SetConfig+0x100>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d003      	beq.n	800b83c <TIM_OC2_SetConfig+0x68>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a28      	ldr	r2, [pc, #160]	@ (800b8d8 <TIM_OC2_SetConfig+0x104>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d10d      	bne.n	800b858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	011b      	lsls	r3, r3, #4
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8d4 <TIM_OC2_SetConfig+0x100>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d00f      	beq.n	800b880 <TIM_OC2_SetConfig+0xac>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d8 <TIM_OC2_SetConfig+0x104>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00b      	beq.n	800b880 <TIM_OC2_SetConfig+0xac>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a1c      	ldr	r2, [pc, #112]	@ (800b8dc <TIM_OC2_SetConfig+0x108>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d007      	beq.n	800b880 <TIM_OC2_SetConfig+0xac>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a1b      	ldr	r2, [pc, #108]	@ (800b8e0 <TIM_OC2_SetConfig+0x10c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d003      	beq.n	800b880 <TIM_OC2_SetConfig+0xac>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e4 <TIM_OC2_SetConfig+0x110>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d113      	bne.n	800b8a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b88e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	4313      	orrs	r3, r2
 800b89a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	621a      	str	r2, [r3, #32]
}
 800b8c2:	bf00      	nop
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	feff8fff 	.word	0xfeff8fff
 800b8d4:	40010000 	.word	0x40010000
 800b8d8:	40010400 	.word	0x40010400
 800b8dc:	40014000 	.word	0x40014000
 800b8e0:	40014400 	.word	0x40014400
 800b8e4:	40014800 	.word	0x40014800

0800b8e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4b33      	ldr	r3, [pc, #204]	@ (800b9e0 <TIM_OC3_SetConfig+0xf8>)
 800b914:	4013      	ands	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0303 	bic.w	r3, r3, #3
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	021b      	lsls	r3, r3, #8
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a28      	ldr	r2, [pc, #160]	@ (800b9e4 <TIM_OC3_SetConfig+0xfc>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d003      	beq.n	800b94e <TIM_OC3_SetConfig+0x66>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a27      	ldr	r2, [pc, #156]	@ (800b9e8 <TIM_OC3_SetConfig+0x100>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d10d      	bne.n	800b96a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	021b      	lsls	r3, r3, #8
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	4313      	orrs	r3, r2
 800b960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e4 <TIM_OC3_SetConfig+0xfc>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00f      	beq.n	800b992 <TIM_OC3_SetConfig+0xaa>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a1c      	ldr	r2, [pc, #112]	@ (800b9e8 <TIM_OC3_SetConfig+0x100>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00b      	beq.n	800b992 <TIM_OC3_SetConfig+0xaa>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a1b      	ldr	r2, [pc, #108]	@ (800b9ec <TIM_OC3_SetConfig+0x104>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d007      	beq.n	800b992 <TIM_OC3_SetConfig+0xaa>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a1a      	ldr	r2, [pc, #104]	@ (800b9f0 <TIM_OC3_SetConfig+0x108>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_OC3_SetConfig+0xaa>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a19      	ldr	r2, [pc, #100]	@ (800b9f4 <TIM_OC3_SetConfig+0x10c>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d113      	bne.n	800b9ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	621a      	str	r2, [r3, #32]
}
 800b9d4:	bf00      	nop
 800b9d6:	371c      	adds	r7, #28
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	fffeff8f 	.word	0xfffeff8f
 800b9e4:	40010000 	.word	0x40010000
 800b9e8:	40010400 	.word	0x40010400
 800b9ec:	40014000 	.word	0x40014000
 800b9f0:	40014400 	.word	0x40014400
 800b9f4:	40014800 	.word	0x40014800

0800b9f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4b24      	ldr	r3, [pc, #144]	@ (800bab4 <TIM_OC4_SetConfig+0xbc>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	031b      	lsls	r3, r3, #12
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a19      	ldr	r2, [pc, #100]	@ (800bab8 <TIM_OC4_SetConfig+0xc0>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00f      	beq.n	800ba78 <TIM_OC4_SetConfig+0x80>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a18      	ldr	r2, [pc, #96]	@ (800babc <TIM_OC4_SetConfig+0xc4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00b      	beq.n	800ba78 <TIM_OC4_SetConfig+0x80>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a17      	ldr	r2, [pc, #92]	@ (800bac0 <TIM_OC4_SetConfig+0xc8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d007      	beq.n	800ba78 <TIM_OC4_SetConfig+0x80>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a16      	ldr	r2, [pc, #88]	@ (800bac4 <TIM_OC4_SetConfig+0xcc>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d003      	beq.n	800ba78 <TIM_OC4_SetConfig+0x80>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a15      	ldr	r2, [pc, #84]	@ (800bac8 <TIM_OC4_SetConfig+0xd0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d109      	bne.n	800ba8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	019b      	lsls	r3, r3, #6
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	621a      	str	r2, [r3, #32]
}
 800baa6:	bf00      	nop
 800baa8:	371c      	adds	r7, #28
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	feff8fff 	.word	0xfeff8fff
 800bab8:	40010000 	.word	0x40010000
 800babc:	40010400 	.word	0x40010400
 800bac0:	40014000 	.word	0x40014000
 800bac4:	40014400 	.word	0x40014400
 800bac8:	40014800 	.word	0x40014800

0800bacc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	4b21      	ldr	r3, [pc, #132]	@ (800bb7c <TIM_OC5_SetConfig+0xb0>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	041b      	lsls	r3, r3, #16
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a18      	ldr	r2, [pc, #96]	@ (800bb80 <TIM_OC5_SetConfig+0xb4>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00f      	beq.n	800bb42 <TIM_OC5_SetConfig+0x76>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a17      	ldr	r2, [pc, #92]	@ (800bb84 <TIM_OC5_SetConfig+0xb8>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d00b      	beq.n	800bb42 <TIM_OC5_SetConfig+0x76>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a16      	ldr	r2, [pc, #88]	@ (800bb88 <TIM_OC5_SetConfig+0xbc>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d007      	beq.n	800bb42 <TIM_OC5_SetConfig+0x76>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a15      	ldr	r2, [pc, #84]	@ (800bb8c <TIM_OC5_SetConfig+0xc0>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d003      	beq.n	800bb42 <TIM_OC5_SetConfig+0x76>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a14      	ldr	r2, [pc, #80]	@ (800bb90 <TIM_OC5_SetConfig+0xc4>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d109      	bne.n	800bb56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	621a      	str	r2, [r3, #32]
}
 800bb70:	bf00      	nop
 800bb72:	371c      	adds	r7, #28
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	fffeff8f 	.word	0xfffeff8f
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40010400 	.word	0x40010400
 800bb88:	40014000 	.word	0x40014000
 800bb8c:	40014400 	.word	0x40014400
 800bb90:	40014800 	.word	0x40014800

0800bb94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4b22      	ldr	r3, [pc, #136]	@ (800bc48 <TIM_OC6_SetConfig+0xb4>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	051b      	lsls	r3, r3, #20
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a19      	ldr	r2, [pc, #100]	@ (800bc4c <TIM_OC6_SetConfig+0xb8>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00f      	beq.n	800bc0c <TIM_OC6_SetConfig+0x78>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a18      	ldr	r2, [pc, #96]	@ (800bc50 <TIM_OC6_SetConfig+0xbc>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00b      	beq.n	800bc0c <TIM_OC6_SetConfig+0x78>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a17      	ldr	r2, [pc, #92]	@ (800bc54 <TIM_OC6_SetConfig+0xc0>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d007      	beq.n	800bc0c <TIM_OC6_SetConfig+0x78>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a16      	ldr	r2, [pc, #88]	@ (800bc58 <TIM_OC6_SetConfig+0xc4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_OC6_SetConfig+0x78>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a15      	ldr	r2, [pc, #84]	@ (800bc5c <TIM_OC6_SetConfig+0xc8>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d109      	bne.n	800bc20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	029b      	lsls	r3, r3, #10
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	621a      	str	r2, [r3, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	feff8fff 	.word	0xfeff8fff
 800bc4c:	40010000 	.word	0x40010000
 800bc50:	40010400 	.word	0x40010400
 800bc54:	40014000 	.word	0x40014000
 800bc58:	40014400 	.word	0x40014400
 800bc5c:	40014800 	.word	0x40014800

0800bc60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b087      	sub	sp, #28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f023 0201 	bic.w	r2, r3, #1
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f023 030a 	bic.w	r3, r3, #10
 800bc9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	621a      	str	r2, [r3, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b087      	sub	sp, #28
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	f023 0210 	bic.w	r2, r3, #16
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	031b      	lsls	r3, r3, #12
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bcfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	621a      	str	r2, [r3, #32]
}
 800bd12:	bf00      	nop
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
	...

0800bd20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <TIM_ITRx_SetConfig+0x38>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	f043 0307 	orr.w	r3, r3, #7
 800bd42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	609a      	str	r2, [r3, #8]
}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	ffcfff8f 	.word	0xffcfff8f

0800bd5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	021a      	lsls	r2, r3, #8
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	609a      	str	r2, [r3, #8]
}
 800bd90:	bf00      	nop
 800bd92:	371c      	adds	r7, #28
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	e077      	b.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a35      	ldr	r2, [pc, #212]	@ (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d004      	beq.n	800bde8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a34      	ldr	r2, [pc, #208]	@ (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d108      	bne.n	800bdfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bdee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	4313      	orrs	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a25      	ldr	r2, [pc, #148]	@ (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d02c      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be26:	d027      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a22      	ldr	r2, [pc, #136]	@ (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d022      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a21      	ldr	r2, [pc, #132]	@ (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d01d      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a1f      	ldr	r2, [pc, #124]	@ (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d018      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a1a      	ldr	r2, [pc, #104]	@ (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d013      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a1b      	ldr	r2, [pc, #108]	@ (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d00e      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a1a      	ldr	r2, [pc, #104]	@ (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d009      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a18      	ldr	r2, [pc, #96]	@ (800becc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a17      	ldr	r2, [pc, #92]	@ (800bed0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d10c      	bne.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	4313      	orrs	r3, r2
 800be88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40000400 	.word	0x40000400
 800bebc:	40000800 	.word	0x40000800
 800bec0:	40000c00 	.word	0x40000c00
 800bec4:	40001800 	.word	0x40001800
 800bec8:	40014000 	.word	0x40014000
 800becc:	4000e000 	.word	0x4000e000
 800bed0:	4000e400 	.word	0x4000e400

0800bed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e042      	b.n	800bf6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beec:	2b00      	cmp	r3, #0
 800beee:	d106      	bne.n	800befe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7f5 fe05 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2224      	movs	r2, #36	@ 0x24
 800bf02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f022 0201 	bic.w	r2, r2, #1
 800bf14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fe94 	bl	800cc4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f825 	bl	800bf74 <UART_SetConfig>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d101      	bne.n	800bf34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e01b      	b.n	800bf6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685a      	ldr	r2, [r3, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bf42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689a      	ldr	r2, [r3, #8]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bf52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0201 	orr.w	r2, r2, #1
 800bf62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 ff13 	bl	800cd90 <UART_CheckIdleState>
 800bf6a:	4603      	mov	r3, r0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf78:	b092      	sub	sp, #72	@ 0x48
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	431a      	orrs	r2, r3
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4bbe      	ldr	r3, [pc, #760]	@ (800c29c <UART_SetConfig+0x328>)
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bfac:	430b      	orrs	r3, r1
 800bfae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	430a      	orrs	r2, r1
 800bfc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4ab3      	ldr	r2, [pc, #716]	@ (800c2a0 <UART_SetConfig+0x32c>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d004      	beq.n	800bfe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	4baf      	ldr	r3, [pc, #700]	@ (800c2a4 <UART_SetConfig+0x330>)
 800bfe8:	4013      	ands	r3, r2
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bff0:	430b      	orrs	r3, r1
 800bff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffa:	f023 010f 	bic.w	r1, r3, #15
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	430a      	orrs	r2, r1
 800c008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4aa6      	ldr	r2, [pc, #664]	@ (800c2a8 <UART_SetConfig+0x334>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d177      	bne.n	800c104 <UART_SetConfig+0x190>
 800c014:	4ba5      	ldr	r3, [pc, #660]	@ (800c2ac <UART_SetConfig+0x338>)
 800c016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c01c:	2b28      	cmp	r3, #40	@ 0x28
 800c01e:	d86d      	bhi.n	800c0fc <UART_SetConfig+0x188>
 800c020:	a201      	add	r2, pc, #4	@ (adr r2, 800c028 <UART_SetConfig+0xb4>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c0cd 	.word	0x0800c0cd
 800c02c:	0800c0fd 	.word	0x0800c0fd
 800c030:	0800c0fd 	.word	0x0800c0fd
 800c034:	0800c0fd 	.word	0x0800c0fd
 800c038:	0800c0fd 	.word	0x0800c0fd
 800c03c:	0800c0fd 	.word	0x0800c0fd
 800c040:	0800c0fd 	.word	0x0800c0fd
 800c044:	0800c0fd 	.word	0x0800c0fd
 800c048:	0800c0d5 	.word	0x0800c0d5
 800c04c:	0800c0fd 	.word	0x0800c0fd
 800c050:	0800c0fd 	.word	0x0800c0fd
 800c054:	0800c0fd 	.word	0x0800c0fd
 800c058:	0800c0fd 	.word	0x0800c0fd
 800c05c:	0800c0fd 	.word	0x0800c0fd
 800c060:	0800c0fd 	.word	0x0800c0fd
 800c064:	0800c0fd 	.word	0x0800c0fd
 800c068:	0800c0dd 	.word	0x0800c0dd
 800c06c:	0800c0fd 	.word	0x0800c0fd
 800c070:	0800c0fd 	.word	0x0800c0fd
 800c074:	0800c0fd 	.word	0x0800c0fd
 800c078:	0800c0fd 	.word	0x0800c0fd
 800c07c:	0800c0fd 	.word	0x0800c0fd
 800c080:	0800c0fd 	.word	0x0800c0fd
 800c084:	0800c0fd 	.word	0x0800c0fd
 800c088:	0800c0e5 	.word	0x0800c0e5
 800c08c:	0800c0fd 	.word	0x0800c0fd
 800c090:	0800c0fd 	.word	0x0800c0fd
 800c094:	0800c0fd 	.word	0x0800c0fd
 800c098:	0800c0fd 	.word	0x0800c0fd
 800c09c:	0800c0fd 	.word	0x0800c0fd
 800c0a0:	0800c0fd 	.word	0x0800c0fd
 800c0a4:	0800c0fd 	.word	0x0800c0fd
 800c0a8:	0800c0ed 	.word	0x0800c0ed
 800c0ac:	0800c0fd 	.word	0x0800c0fd
 800c0b0:	0800c0fd 	.word	0x0800c0fd
 800c0b4:	0800c0fd 	.word	0x0800c0fd
 800c0b8:	0800c0fd 	.word	0x0800c0fd
 800c0bc:	0800c0fd 	.word	0x0800c0fd
 800c0c0:	0800c0fd 	.word	0x0800c0fd
 800c0c4:	0800c0fd 	.word	0x0800c0fd
 800c0c8:	0800c0f5 	.word	0x0800c0f5
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e326      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0d4:	2304      	movs	r3, #4
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e322      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0dc:	2308      	movs	r3, #8
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e2:	e31e      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ea:	e31a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0ec:	2320      	movs	r3, #32
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f2:	e316      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0f4:	2340      	movs	r3, #64	@ 0x40
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fa:	e312      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c0fc:	2380      	movs	r3, #128	@ 0x80
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c102:	e30e      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a69      	ldr	r2, [pc, #420]	@ (800c2b0 <UART_SetConfig+0x33c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d130      	bne.n	800c170 <UART_SetConfig+0x1fc>
 800c10e:	4b67      	ldr	r3, [pc, #412]	@ (800c2ac <UART_SetConfig+0x338>)
 800c110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c112:	f003 0307 	and.w	r3, r3, #7
 800c116:	2b05      	cmp	r3, #5
 800c118:	d826      	bhi.n	800c168 <UART_SetConfig+0x1f4>
 800c11a:	a201      	add	r2, pc, #4	@ (adr r2, 800c120 <UART_SetConfig+0x1ac>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c139 	.word	0x0800c139
 800c124:	0800c141 	.word	0x0800c141
 800c128:	0800c149 	.word	0x0800c149
 800c12c:	0800c151 	.word	0x0800c151
 800c130:	0800c159 	.word	0x0800c159
 800c134:	0800c161 	.word	0x0800c161
 800c138:	2300      	movs	r3, #0
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e2f0      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c140:	2304      	movs	r3, #4
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e2ec      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c148:	2308      	movs	r3, #8
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e2e8      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c150:	2310      	movs	r3, #16
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c156:	e2e4      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c158:	2320      	movs	r3, #32
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15e:	e2e0      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c160:	2340      	movs	r3, #64	@ 0x40
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c166:	e2dc      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c168:	2380      	movs	r3, #128	@ 0x80
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e2d8      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a4f      	ldr	r2, [pc, #316]	@ (800c2b4 <UART_SetConfig+0x340>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d130      	bne.n	800c1dc <UART_SetConfig+0x268>
 800c17a:	4b4c      	ldr	r3, [pc, #304]	@ (800c2ac <UART_SetConfig+0x338>)
 800c17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c17e:	f003 0307 	and.w	r3, r3, #7
 800c182:	2b05      	cmp	r3, #5
 800c184:	d826      	bhi.n	800c1d4 <UART_SetConfig+0x260>
 800c186:	a201      	add	r2, pc, #4	@ (adr r2, 800c18c <UART_SetConfig+0x218>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c1a5 	.word	0x0800c1a5
 800c190:	0800c1ad 	.word	0x0800c1ad
 800c194:	0800c1b5 	.word	0x0800c1b5
 800c198:	0800c1bd 	.word	0x0800c1bd
 800c19c:	0800c1c5 	.word	0x0800c1c5
 800c1a0:	0800c1cd 	.word	0x0800c1cd
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e2ba      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e2b6      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e2b2      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e2ae      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1c4:	2320      	movs	r3, #32
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	e2aa      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1cc:	2340      	movs	r3, #64	@ 0x40
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d2:	e2a6      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1d4:	2380      	movs	r3, #128	@ 0x80
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e2a2      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a35      	ldr	r2, [pc, #212]	@ (800c2b8 <UART_SetConfig+0x344>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d130      	bne.n	800c248 <UART_SetConfig+0x2d4>
 800c1e6:	4b31      	ldr	r3, [pc, #196]	@ (800c2ac <UART_SetConfig+0x338>)
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b05      	cmp	r3, #5
 800c1f0:	d826      	bhi.n	800c240 <UART_SetConfig+0x2cc>
 800c1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f8 <UART_SetConfig+0x284>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c211 	.word	0x0800c211
 800c1fc:	0800c219 	.word	0x0800c219
 800c200:	0800c221 	.word	0x0800c221
 800c204:	0800c229 	.word	0x0800c229
 800c208:	0800c231 	.word	0x0800c231
 800c20c:	0800c239 	.word	0x0800c239
 800c210:	2300      	movs	r3, #0
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c216:	e284      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c218:	2304      	movs	r3, #4
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21e:	e280      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c220:	2308      	movs	r3, #8
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e27c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c228:	2310      	movs	r3, #16
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e278      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c230:	2320      	movs	r3, #32
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e274      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c238:	2340      	movs	r3, #64	@ 0x40
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e270      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c240:	2380      	movs	r3, #128	@ 0x80
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e26c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a1b      	ldr	r2, [pc, #108]	@ (800c2bc <UART_SetConfig+0x348>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d142      	bne.n	800c2d8 <UART_SetConfig+0x364>
 800c252:	4b16      	ldr	r3, [pc, #88]	@ (800c2ac <UART_SetConfig+0x338>)
 800c254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d838      	bhi.n	800c2d0 <UART_SetConfig+0x35c>
 800c25e:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <UART_SetConfig+0x2f0>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c27d 	.word	0x0800c27d
 800c268:	0800c285 	.word	0x0800c285
 800c26c:	0800c28d 	.word	0x0800c28d
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c2c1 	.word	0x0800c2c1
 800c278:	0800c2c9 	.word	0x0800c2c9
 800c27c:	2300      	movs	r3, #0
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e24e      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c284:	2304      	movs	r3, #4
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e24a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c28c:	2308      	movs	r3, #8
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e246      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c294:	2310      	movs	r3, #16
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e242      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c29c:	cfff69f3 	.word	0xcfff69f3
 800c2a0:	58000c00 	.word	0x58000c00
 800c2a4:	11fff4ff 	.word	0x11fff4ff
 800c2a8:	40011000 	.word	0x40011000
 800c2ac:	58024400 	.word	0x58024400
 800c2b0:	40004400 	.word	0x40004400
 800c2b4:	40004800 	.word	0x40004800
 800c2b8:	40004c00 	.word	0x40004c00
 800c2bc:	40005000 	.word	0x40005000
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c6:	e22c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c2c8:	2340      	movs	r3, #64	@ 0x40
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ce:	e228      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c2d0:	2380      	movs	r3, #128	@ 0x80
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e224      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4ab1      	ldr	r2, [pc, #708]	@ (800c5a4 <UART_SetConfig+0x630>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d176      	bne.n	800c3d0 <UART_SetConfig+0x45c>
 800c2e2:	4bb1      	ldr	r3, [pc, #708]	@ (800c5a8 <UART_SetConfig+0x634>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2ea:	2b28      	cmp	r3, #40	@ 0x28
 800c2ec:	d86c      	bhi.n	800c3c8 <UART_SetConfig+0x454>
 800c2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f4 <UART_SetConfig+0x380>)
 800c2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f4:	0800c399 	.word	0x0800c399
 800c2f8:	0800c3c9 	.word	0x0800c3c9
 800c2fc:	0800c3c9 	.word	0x0800c3c9
 800c300:	0800c3c9 	.word	0x0800c3c9
 800c304:	0800c3c9 	.word	0x0800c3c9
 800c308:	0800c3c9 	.word	0x0800c3c9
 800c30c:	0800c3c9 	.word	0x0800c3c9
 800c310:	0800c3c9 	.word	0x0800c3c9
 800c314:	0800c3a1 	.word	0x0800c3a1
 800c318:	0800c3c9 	.word	0x0800c3c9
 800c31c:	0800c3c9 	.word	0x0800c3c9
 800c320:	0800c3c9 	.word	0x0800c3c9
 800c324:	0800c3c9 	.word	0x0800c3c9
 800c328:	0800c3c9 	.word	0x0800c3c9
 800c32c:	0800c3c9 	.word	0x0800c3c9
 800c330:	0800c3c9 	.word	0x0800c3c9
 800c334:	0800c3a9 	.word	0x0800c3a9
 800c338:	0800c3c9 	.word	0x0800c3c9
 800c33c:	0800c3c9 	.word	0x0800c3c9
 800c340:	0800c3c9 	.word	0x0800c3c9
 800c344:	0800c3c9 	.word	0x0800c3c9
 800c348:	0800c3c9 	.word	0x0800c3c9
 800c34c:	0800c3c9 	.word	0x0800c3c9
 800c350:	0800c3c9 	.word	0x0800c3c9
 800c354:	0800c3b1 	.word	0x0800c3b1
 800c358:	0800c3c9 	.word	0x0800c3c9
 800c35c:	0800c3c9 	.word	0x0800c3c9
 800c360:	0800c3c9 	.word	0x0800c3c9
 800c364:	0800c3c9 	.word	0x0800c3c9
 800c368:	0800c3c9 	.word	0x0800c3c9
 800c36c:	0800c3c9 	.word	0x0800c3c9
 800c370:	0800c3c9 	.word	0x0800c3c9
 800c374:	0800c3b9 	.word	0x0800c3b9
 800c378:	0800c3c9 	.word	0x0800c3c9
 800c37c:	0800c3c9 	.word	0x0800c3c9
 800c380:	0800c3c9 	.word	0x0800c3c9
 800c384:	0800c3c9 	.word	0x0800c3c9
 800c388:	0800c3c9 	.word	0x0800c3c9
 800c38c:	0800c3c9 	.word	0x0800c3c9
 800c390:	0800c3c9 	.word	0x0800c3c9
 800c394:	0800c3c1 	.word	0x0800c3c1
 800c398:	2301      	movs	r3, #1
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39e:	e1c0      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a6:	e1bc      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ae:	e1b8      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b6:	e1b4      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3b8:	2320      	movs	r3, #32
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3be:	e1b0      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3c0:	2340      	movs	r3, #64	@ 0x40
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e1ac      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3c8:	2380      	movs	r3, #128	@ 0x80
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ce:	e1a8      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a75      	ldr	r2, [pc, #468]	@ (800c5ac <UART_SetConfig+0x638>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d130      	bne.n	800c43c <UART_SetConfig+0x4c8>
 800c3da:	4b73      	ldr	r3, [pc, #460]	@ (800c5a8 <UART_SetConfig+0x634>)
 800c3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	2b05      	cmp	r3, #5
 800c3e4:	d826      	bhi.n	800c434 <UART_SetConfig+0x4c0>
 800c3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3ec <UART_SetConfig+0x478>)
 800c3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ec:	0800c405 	.word	0x0800c405
 800c3f0:	0800c40d 	.word	0x0800c40d
 800c3f4:	0800c415 	.word	0x0800c415
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c425 	.word	0x0800c425
 800c400:	0800c42d 	.word	0x0800c42d
 800c404:	2300      	movs	r3, #0
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40a:	e18a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c40c:	2304      	movs	r3, #4
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c412:	e186      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c414:	2308      	movs	r3, #8
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e182      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c41c:	2310      	movs	r3, #16
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e17e      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c424:	2320      	movs	r3, #32
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e17a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c42c:	2340      	movs	r3, #64	@ 0x40
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e176      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c434:	2380      	movs	r3, #128	@ 0x80
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e172      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a5b      	ldr	r2, [pc, #364]	@ (800c5b0 <UART_SetConfig+0x63c>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d130      	bne.n	800c4a8 <UART_SetConfig+0x534>
 800c446:	4b58      	ldr	r3, [pc, #352]	@ (800c5a8 <UART_SetConfig+0x634>)
 800c448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c44a:	f003 0307 	and.w	r3, r3, #7
 800c44e:	2b05      	cmp	r3, #5
 800c450:	d826      	bhi.n	800c4a0 <UART_SetConfig+0x52c>
 800c452:	a201      	add	r2, pc, #4	@ (adr r2, 800c458 <UART_SetConfig+0x4e4>)
 800c454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c458:	0800c471 	.word	0x0800c471
 800c45c:	0800c479 	.word	0x0800c479
 800c460:	0800c481 	.word	0x0800c481
 800c464:	0800c489 	.word	0x0800c489
 800c468:	0800c491 	.word	0x0800c491
 800c46c:	0800c499 	.word	0x0800c499
 800c470:	2300      	movs	r3, #0
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c476:	e154      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c478:	2304      	movs	r3, #4
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47e:	e150      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c480:	2308      	movs	r3, #8
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c486:	e14c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c488:	2310      	movs	r3, #16
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e148      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c490:	2320      	movs	r3, #32
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e144      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c498:	2340      	movs	r3, #64	@ 0x40
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e140      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c4a0:	2380      	movs	r3, #128	@ 0x80
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e13c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a41      	ldr	r2, [pc, #260]	@ (800c5b4 <UART_SetConfig+0x640>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	f040 8082 	bne.w	800c5b8 <UART_SetConfig+0x644>
 800c4b4:	4b3c      	ldr	r3, [pc, #240]	@ (800c5a8 <UART_SetConfig+0x634>)
 800c4b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4bc:	2b28      	cmp	r3, #40	@ 0x28
 800c4be:	d86d      	bhi.n	800c59c <UART_SetConfig+0x628>
 800c4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c8 <UART_SetConfig+0x554>)
 800c4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c6:	bf00      	nop
 800c4c8:	0800c56d 	.word	0x0800c56d
 800c4cc:	0800c59d 	.word	0x0800c59d
 800c4d0:	0800c59d 	.word	0x0800c59d
 800c4d4:	0800c59d 	.word	0x0800c59d
 800c4d8:	0800c59d 	.word	0x0800c59d
 800c4dc:	0800c59d 	.word	0x0800c59d
 800c4e0:	0800c59d 	.word	0x0800c59d
 800c4e4:	0800c59d 	.word	0x0800c59d
 800c4e8:	0800c575 	.word	0x0800c575
 800c4ec:	0800c59d 	.word	0x0800c59d
 800c4f0:	0800c59d 	.word	0x0800c59d
 800c4f4:	0800c59d 	.word	0x0800c59d
 800c4f8:	0800c59d 	.word	0x0800c59d
 800c4fc:	0800c59d 	.word	0x0800c59d
 800c500:	0800c59d 	.word	0x0800c59d
 800c504:	0800c59d 	.word	0x0800c59d
 800c508:	0800c57d 	.word	0x0800c57d
 800c50c:	0800c59d 	.word	0x0800c59d
 800c510:	0800c59d 	.word	0x0800c59d
 800c514:	0800c59d 	.word	0x0800c59d
 800c518:	0800c59d 	.word	0x0800c59d
 800c51c:	0800c59d 	.word	0x0800c59d
 800c520:	0800c59d 	.word	0x0800c59d
 800c524:	0800c59d 	.word	0x0800c59d
 800c528:	0800c585 	.word	0x0800c585
 800c52c:	0800c59d 	.word	0x0800c59d
 800c530:	0800c59d 	.word	0x0800c59d
 800c534:	0800c59d 	.word	0x0800c59d
 800c538:	0800c59d 	.word	0x0800c59d
 800c53c:	0800c59d 	.word	0x0800c59d
 800c540:	0800c59d 	.word	0x0800c59d
 800c544:	0800c59d 	.word	0x0800c59d
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c59d 	.word	0x0800c59d
 800c550:	0800c59d 	.word	0x0800c59d
 800c554:	0800c59d 	.word	0x0800c59d
 800c558:	0800c59d 	.word	0x0800c59d
 800c55c:	0800c59d 	.word	0x0800c59d
 800c560:	0800c59d 	.word	0x0800c59d
 800c564:	0800c59d 	.word	0x0800c59d
 800c568:	0800c595 	.word	0x0800c595
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c572:	e0d6      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c574:	2304      	movs	r3, #4
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57a:	e0d2      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c57c:	2308      	movs	r3, #8
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c582:	e0ce      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c584:	2310      	movs	r3, #16
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58a:	e0ca      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c58c:	2320      	movs	r3, #32
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c592:	e0c6      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c594:	2340      	movs	r3, #64	@ 0x40
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e0c2      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c59c:	2380      	movs	r3, #128	@ 0x80
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a2:	e0be      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c5a4:	40011400 	.word	0x40011400
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	40007800 	.word	0x40007800
 800c5b0:	40007c00 	.word	0x40007c00
 800c5b4:	40011800 	.word	0x40011800
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4aad      	ldr	r2, [pc, #692]	@ (800c874 <UART_SetConfig+0x900>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d176      	bne.n	800c6b0 <UART_SetConfig+0x73c>
 800c5c2:	4bad      	ldr	r3, [pc, #692]	@ (800c878 <UART_SetConfig+0x904>)
 800c5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c5ca:	2b28      	cmp	r3, #40	@ 0x28
 800c5cc:	d86c      	bhi.n	800c6a8 <UART_SetConfig+0x734>
 800c5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d4 <UART_SetConfig+0x660>)
 800c5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d4:	0800c679 	.word	0x0800c679
 800c5d8:	0800c6a9 	.word	0x0800c6a9
 800c5dc:	0800c6a9 	.word	0x0800c6a9
 800c5e0:	0800c6a9 	.word	0x0800c6a9
 800c5e4:	0800c6a9 	.word	0x0800c6a9
 800c5e8:	0800c6a9 	.word	0x0800c6a9
 800c5ec:	0800c6a9 	.word	0x0800c6a9
 800c5f0:	0800c6a9 	.word	0x0800c6a9
 800c5f4:	0800c681 	.word	0x0800c681
 800c5f8:	0800c6a9 	.word	0x0800c6a9
 800c5fc:	0800c6a9 	.word	0x0800c6a9
 800c600:	0800c6a9 	.word	0x0800c6a9
 800c604:	0800c6a9 	.word	0x0800c6a9
 800c608:	0800c6a9 	.word	0x0800c6a9
 800c60c:	0800c6a9 	.word	0x0800c6a9
 800c610:	0800c6a9 	.word	0x0800c6a9
 800c614:	0800c689 	.word	0x0800c689
 800c618:	0800c6a9 	.word	0x0800c6a9
 800c61c:	0800c6a9 	.word	0x0800c6a9
 800c620:	0800c6a9 	.word	0x0800c6a9
 800c624:	0800c6a9 	.word	0x0800c6a9
 800c628:	0800c6a9 	.word	0x0800c6a9
 800c62c:	0800c6a9 	.word	0x0800c6a9
 800c630:	0800c6a9 	.word	0x0800c6a9
 800c634:	0800c691 	.word	0x0800c691
 800c638:	0800c6a9 	.word	0x0800c6a9
 800c63c:	0800c6a9 	.word	0x0800c6a9
 800c640:	0800c6a9 	.word	0x0800c6a9
 800c644:	0800c6a9 	.word	0x0800c6a9
 800c648:	0800c6a9 	.word	0x0800c6a9
 800c64c:	0800c6a9 	.word	0x0800c6a9
 800c650:	0800c6a9 	.word	0x0800c6a9
 800c654:	0800c699 	.word	0x0800c699
 800c658:	0800c6a9 	.word	0x0800c6a9
 800c65c:	0800c6a9 	.word	0x0800c6a9
 800c660:	0800c6a9 	.word	0x0800c6a9
 800c664:	0800c6a9 	.word	0x0800c6a9
 800c668:	0800c6a9 	.word	0x0800c6a9
 800c66c:	0800c6a9 	.word	0x0800c6a9
 800c670:	0800c6a9 	.word	0x0800c6a9
 800c674:	0800c6a1 	.word	0x0800c6a1
 800c678:	2301      	movs	r3, #1
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67e:	e050      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c680:	2304      	movs	r3, #4
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c686:	e04c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c688:	2308      	movs	r3, #8
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68e:	e048      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c690:	2310      	movs	r3, #16
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c696:	e044      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c698:	2320      	movs	r3, #32
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69e:	e040      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6a0:	2340      	movs	r3, #64	@ 0x40
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a6:	e03c      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6a8:	2380      	movs	r3, #128	@ 0x80
 800c6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ae:	e038      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a71      	ldr	r2, [pc, #452]	@ (800c87c <UART_SetConfig+0x908>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d130      	bne.n	800c71c <UART_SetConfig+0x7a8>
 800c6ba:	4b6f      	ldr	r3, [pc, #444]	@ (800c878 <UART_SetConfig+0x904>)
 800c6bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6be:	f003 0307 	and.w	r3, r3, #7
 800c6c2:	2b05      	cmp	r3, #5
 800c6c4:	d826      	bhi.n	800c714 <UART_SetConfig+0x7a0>
 800c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6cc <UART_SetConfig+0x758>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6e5 	.word	0x0800c6e5
 800c6d0:	0800c6ed 	.word	0x0800c6ed
 800c6d4:	0800c6f5 	.word	0x0800c6f5
 800c6d8:	0800c6fd 	.word	0x0800c6fd
 800c6dc:	0800c705 	.word	0x0800c705
 800c6e0:	0800c70d 	.word	0x0800c70d
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ea:	e01a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6ec:	2304      	movs	r3, #4
 800c6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6f2:	e016      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6f4:	2308      	movs	r3, #8
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fa:	e012      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c6fc:	2310      	movs	r3, #16
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c702:	e00e      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c704:	2320      	movs	r3, #32
 800c706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70a:	e00a      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c70c:	2340      	movs	r3, #64	@ 0x40
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c712:	e006      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c714:	2380      	movs	r3, #128	@ 0x80
 800c716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71a:	e002      	b.n	800c722 <UART_SetConfig+0x7ae>
 800c71c:	2380      	movs	r3, #128	@ 0x80
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a55      	ldr	r2, [pc, #340]	@ (800c87c <UART_SetConfig+0x908>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	f040 80f8 	bne.w	800c91e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c72e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c732:	2b20      	cmp	r3, #32
 800c734:	dc46      	bgt.n	800c7c4 <UART_SetConfig+0x850>
 800c736:	2b02      	cmp	r3, #2
 800c738:	db75      	blt.n	800c826 <UART_SetConfig+0x8b2>
 800c73a:	3b02      	subs	r3, #2
 800c73c:	2b1e      	cmp	r3, #30
 800c73e:	d872      	bhi.n	800c826 <UART_SetConfig+0x8b2>
 800c740:	a201      	add	r2, pc, #4	@ (adr r2, 800c748 <UART_SetConfig+0x7d4>)
 800c742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c746:	bf00      	nop
 800c748:	0800c7cb 	.word	0x0800c7cb
 800c74c:	0800c827 	.word	0x0800c827
 800c750:	0800c7d3 	.word	0x0800c7d3
 800c754:	0800c827 	.word	0x0800c827
 800c758:	0800c827 	.word	0x0800c827
 800c75c:	0800c827 	.word	0x0800c827
 800c760:	0800c7e3 	.word	0x0800c7e3
 800c764:	0800c827 	.word	0x0800c827
 800c768:	0800c827 	.word	0x0800c827
 800c76c:	0800c827 	.word	0x0800c827
 800c770:	0800c827 	.word	0x0800c827
 800c774:	0800c827 	.word	0x0800c827
 800c778:	0800c827 	.word	0x0800c827
 800c77c:	0800c827 	.word	0x0800c827
 800c780:	0800c7f3 	.word	0x0800c7f3
 800c784:	0800c827 	.word	0x0800c827
 800c788:	0800c827 	.word	0x0800c827
 800c78c:	0800c827 	.word	0x0800c827
 800c790:	0800c827 	.word	0x0800c827
 800c794:	0800c827 	.word	0x0800c827
 800c798:	0800c827 	.word	0x0800c827
 800c79c:	0800c827 	.word	0x0800c827
 800c7a0:	0800c827 	.word	0x0800c827
 800c7a4:	0800c827 	.word	0x0800c827
 800c7a8:	0800c827 	.word	0x0800c827
 800c7ac:	0800c827 	.word	0x0800c827
 800c7b0:	0800c827 	.word	0x0800c827
 800c7b4:	0800c827 	.word	0x0800c827
 800c7b8:	0800c827 	.word	0x0800c827
 800c7bc:	0800c827 	.word	0x0800c827
 800c7c0:	0800c819 	.word	0x0800c819
 800c7c4:	2b40      	cmp	r3, #64	@ 0x40
 800c7c6:	d02a      	beq.n	800c81e <UART_SetConfig+0x8aa>
 800c7c8:	e02d      	b.n	800c826 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7ca:	f7fd fd49 	bl	800a260 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7d0:	e02f      	b.n	800c832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fd fd58 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7e0:	e027      	b.n	800c832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7e2:	f107 0318 	add.w	r3, r7, #24
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd fea4 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f0:	e01f      	b.n	800c832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7f2:	4b21      	ldr	r3, [pc, #132]	@ (800c878 <UART_SetConfig+0x904>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0320 	and.w	r3, r3, #32
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d009      	beq.n	800c812 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c878 <UART_SetConfig+0x904>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	08db      	lsrs	r3, r3, #3
 800c804:	f003 0303 	and.w	r3, r3, #3
 800c808:	4a1d      	ldr	r2, [pc, #116]	@ (800c880 <UART_SetConfig+0x90c>)
 800c80a:	fa22 f303 	lsr.w	r3, r2, r3
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c810:	e00f      	b.n	800c832 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <UART_SetConfig+0x90c>)
 800c814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c816:	e00c      	b.n	800c832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c818:	4b1a      	ldr	r3, [pc, #104]	@ (800c884 <UART_SetConfig+0x910>)
 800c81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c81c:	e009      	b.n	800c832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c824:	e005      	b.n	800c832 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 81ee 	beq.w	800cc16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83e:	4a12      	ldr	r2, [pc, #72]	@ (800c888 <UART_SetConfig+0x914>)
 800c840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c844:	461a      	mov	r2, r3
 800c846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c848:	fbb3 f3f2 	udiv	r3, r3, r2
 800c84c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	4413      	add	r3, r2
 800c858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d305      	bcc.n	800c86a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c866:	429a      	cmp	r2, r3
 800c868:	d910      	bls.n	800c88c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c870:	e1d1      	b.n	800cc16 <UART_SetConfig+0xca2>
 800c872:	bf00      	nop
 800c874:	40011c00 	.word	0x40011c00
 800c878:	58024400 	.word	0x58024400
 800c87c:	58000c00 	.word	0x58000c00
 800c880:	03d09000 	.word	0x03d09000
 800c884:	003d0900 	.word	0x003d0900
 800c888:	08013f8c 	.word	0x08013f8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c88e:	2200      	movs	r2, #0
 800c890:	60bb      	str	r3, [r7, #8]
 800c892:	60fa      	str	r2, [r7, #12]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c898:	4ac0      	ldr	r2, [pc, #768]	@ (800cb9c <UART_SetConfig+0xc28>)
 800c89a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	607a      	str	r2, [r7, #4]
 800c8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8ae:	f7f3 fd87 	bl	80003c0 <__aeabi_uldivmod>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f04f 0200 	mov.w	r2, #0
 800c8be:	f04f 0300 	mov.w	r3, #0
 800c8c2:	020b      	lsls	r3, r1, #8
 800c8c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8c8:	0202      	lsls	r2, r0, #8
 800c8ca:	6979      	ldr	r1, [r7, #20]
 800c8cc:	6849      	ldr	r1, [r1, #4]
 800c8ce:	0849      	lsrs	r1, r1, #1
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	eb12 0804 	adds.w	r8, r2, r4
 800c8da:	eb43 0905 	adc.w	r9, r3, r5
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	469a      	mov	sl, r3
 800c8e6:	4693      	mov	fp, r2
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	465b      	mov	r3, fp
 800c8ec:	4640      	mov	r0, r8
 800c8ee:	4649      	mov	r1, r9
 800c8f0:	f7f3 fd66 	bl	80003c0 <__aeabi_uldivmod>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c902:	d308      	bcc.n	800c916 <UART_SetConfig+0x9a2>
 800c904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c90a:	d204      	bcs.n	800c916 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c912:	60da      	str	r2, [r3, #12]
 800c914:	e17f      	b.n	800cc16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c91c:	e17b      	b.n	800cc16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c926:	f040 80bd 	bne.w	800caa4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c92a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c92e:	2b20      	cmp	r3, #32
 800c930:	dc48      	bgt.n	800c9c4 <UART_SetConfig+0xa50>
 800c932:	2b00      	cmp	r3, #0
 800c934:	db7b      	blt.n	800ca2e <UART_SetConfig+0xaba>
 800c936:	2b20      	cmp	r3, #32
 800c938:	d879      	bhi.n	800ca2e <UART_SetConfig+0xaba>
 800c93a:	a201      	add	r2, pc, #4	@ (adr r2, 800c940 <UART_SetConfig+0x9cc>)
 800c93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c940:	0800c9cb 	.word	0x0800c9cb
 800c944:	0800c9d3 	.word	0x0800c9d3
 800c948:	0800ca2f 	.word	0x0800ca2f
 800c94c:	0800ca2f 	.word	0x0800ca2f
 800c950:	0800c9db 	.word	0x0800c9db
 800c954:	0800ca2f 	.word	0x0800ca2f
 800c958:	0800ca2f 	.word	0x0800ca2f
 800c95c:	0800ca2f 	.word	0x0800ca2f
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800ca2f 	.word	0x0800ca2f
 800c968:	0800ca2f 	.word	0x0800ca2f
 800c96c:	0800ca2f 	.word	0x0800ca2f
 800c970:	0800ca2f 	.word	0x0800ca2f
 800c974:	0800ca2f 	.word	0x0800ca2f
 800c978:	0800ca2f 	.word	0x0800ca2f
 800c97c:	0800ca2f 	.word	0x0800ca2f
 800c980:	0800c9fb 	.word	0x0800c9fb
 800c984:	0800ca2f 	.word	0x0800ca2f
 800c988:	0800ca2f 	.word	0x0800ca2f
 800c98c:	0800ca2f 	.word	0x0800ca2f
 800c990:	0800ca2f 	.word	0x0800ca2f
 800c994:	0800ca2f 	.word	0x0800ca2f
 800c998:	0800ca2f 	.word	0x0800ca2f
 800c99c:	0800ca2f 	.word	0x0800ca2f
 800c9a0:	0800ca2f 	.word	0x0800ca2f
 800c9a4:	0800ca2f 	.word	0x0800ca2f
 800c9a8:	0800ca2f 	.word	0x0800ca2f
 800c9ac:	0800ca2f 	.word	0x0800ca2f
 800c9b0:	0800ca2f 	.word	0x0800ca2f
 800c9b4:	0800ca2f 	.word	0x0800ca2f
 800c9b8:	0800ca2f 	.word	0x0800ca2f
 800c9bc:	0800ca2f 	.word	0x0800ca2f
 800c9c0:	0800ca21 	.word	0x0800ca21
 800c9c4:	2b40      	cmp	r3, #64	@ 0x40
 800c9c6:	d02e      	beq.n	800ca26 <UART_SetConfig+0xab2>
 800c9c8:	e031      	b.n	800ca2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9ca:	f7fb fdab 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800c9ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9d0:	e033      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9d2:	f7fb fdbd 	bl	8008550 <HAL_RCC_GetPCLK2Freq>
 800c9d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9d8:	e02f      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fd fc54 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e8:	e027      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ea:	f107 0318 	add.w	r3, r7, #24
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fd fda0 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f8:	e01f      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9fa:	4b69      	ldr	r3, [pc, #420]	@ (800cba0 <UART_SetConfig+0xc2c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d009      	beq.n	800ca1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca06:	4b66      	ldr	r3, [pc, #408]	@ (800cba0 <UART_SetConfig+0xc2c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	4a64      	ldr	r2, [pc, #400]	@ (800cba4 <UART_SetConfig+0xc30>)
 800ca12:	fa22 f303 	lsr.w	r3, r2, r3
 800ca16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca18:	e00f      	b.n	800ca3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ca1a:	4b62      	ldr	r3, [pc, #392]	@ (800cba4 <UART_SetConfig+0xc30>)
 800ca1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca1e:	e00c      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca20:	4b61      	ldr	r3, [pc, #388]	@ (800cba8 <UART_SetConfig+0xc34>)
 800ca22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca24:	e009      	b.n	800ca3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca2c:	e005      	b.n	800ca3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 80ea 	beq.w	800cc16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca46:	4a55      	ldr	r2, [pc, #340]	@ (800cb9c <UART_SetConfig+0xc28>)
 800ca48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca54:	005a      	lsls	r2, r3, #1
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	085b      	lsrs	r3, r3, #1
 800ca5c:	441a      	add	r2, r3
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	2b0f      	cmp	r3, #15
 800ca6c:	d916      	bls.n	800ca9c <UART_SetConfig+0xb28>
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca74:	d212      	bcs.n	800ca9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	f023 030f 	bic.w	r3, r3, #15
 800ca7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	085b      	lsrs	r3, r3, #1
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca98:	60da      	str	r2, [r3, #12]
 800ca9a:	e0bc      	b.n	800cc16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800caa2:	e0b8      	b.n	800cc16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800caa4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800caa8:	2b20      	cmp	r3, #32
 800caaa:	dc4b      	bgt.n	800cb44 <UART_SetConfig+0xbd0>
 800caac:	2b00      	cmp	r3, #0
 800caae:	f2c0 8087 	blt.w	800cbc0 <UART_SetConfig+0xc4c>
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	f200 8084 	bhi.w	800cbc0 <UART_SetConfig+0xc4c>
 800cab8:	a201      	add	r2, pc, #4	@ (adr r2, 800cac0 <UART_SetConfig+0xb4c>)
 800caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabe:	bf00      	nop
 800cac0:	0800cb4b 	.word	0x0800cb4b
 800cac4:	0800cb53 	.word	0x0800cb53
 800cac8:	0800cbc1 	.word	0x0800cbc1
 800cacc:	0800cbc1 	.word	0x0800cbc1
 800cad0:	0800cb5b 	.word	0x0800cb5b
 800cad4:	0800cbc1 	.word	0x0800cbc1
 800cad8:	0800cbc1 	.word	0x0800cbc1
 800cadc:	0800cbc1 	.word	0x0800cbc1
 800cae0:	0800cb6b 	.word	0x0800cb6b
 800cae4:	0800cbc1 	.word	0x0800cbc1
 800cae8:	0800cbc1 	.word	0x0800cbc1
 800caec:	0800cbc1 	.word	0x0800cbc1
 800caf0:	0800cbc1 	.word	0x0800cbc1
 800caf4:	0800cbc1 	.word	0x0800cbc1
 800caf8:	0800cbc1 	.word	0x0800cbc1
 800cafc:	0800cbc1 	.word	0x0800cbc1
 800cb00:	0800cb7b 	.word	0x0800cb7b
 800cb04:	0800cbc1 	.word	0x0800cbc1
 800cb08:	0800cbc1 	.word	0x0800cbc1
 800cb0c:	0800cbc1 	.word	0x0800cbc1
 800cb10:	0800cbc1 	.word	0x0800cbc1
 800cb14:	0800cbc1 	.word	0x0800cbc1
 800cb18:	0800cbc1 	.word	0x0800cbc1
 800cb1c:	0800cbc1 	.word	0x0800cbc1
 800cb20:	0800cbc1 	.word	0x0800cbc1
 800cb24:	0800cbc1 	.word	0x0800cbc1
 800cb28:	0800cbc1 	.word	0x0800cbc1
 800cb2c:	0800cbc1 	.word	0x0800cbc1
 800cb30:	0800cbc1 	.word	0x0800cbc1
 800cb34:	0800cbc1 	.word	0x0800cbc1
 800cb38:	0800cbc1 	.word	0x0800cbc1
 800cb3c:	0800cbc1 	.word	0x0800cbc1
 800cb40:	0800cbb3 	.word	0x0800cbb3
 800cb44:	2b40      	cmp	r3, #64	@ 0x40
 800cb46:	d037      	beq.n	800cbb8 <UART_SetConfig+0xc44>
 800cb48:	e03a      	b.n	800cbc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb4a:	f7fb fceb 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800cb4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb50:	e03c      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb52:	f7fb fcfd 	bl	8008550 <HAL_RCC_GetPCLK2Freq>
 800cb56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb58:	e038      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fd fb94 	bl	800a28c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb68:	e030      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb6a:	f107 0318 	add.w	r3, r7, #24
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd fce0 	bl	800a534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb78:	e028      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb7a:	4b09      	ldr	r3, [pc, #36]	@ (800cba0 <UART_SetConfig+0xc2c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 0320 	and.w	r3, r3, #32
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d012      	beq.n	800cbac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb86:	4b06      	ldr	r3, [pc, #24]	@ (800cba0 <UART_SetConfig+0xc2c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	08db      	lsrs	r3, r3, #3
 800cb8c:	f003 0303 	and.w	r3, r3, #3
 800cb90:	4a04      	ldr	r2, [pc, #16]	@ (800cba4 <UART_SetConfig+0xc30>)
 800cb92:	fa22 f303 	lsr.w	r3, r2, r3
 800cb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb98:	e018      	b.n	800cbcc <UART_SetConfig+0xc58>
 800cb9a:	bf00      	nop
 800cb9c:	08013f8c 	.word	0x08013f8c
 800cba0:	58024400 	.word	0x58024400
 800cba4:	03d09000 	.word	0x03d09000
 800cba8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cbac:	4b24      	ldr	r3, [pc, #144]	@ (800cc40 <UART_SetConfig+0xccc>)
 800cbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbb0:	e00c      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbb2:	4b24      	ldr	r3, [pc, #144]	@ (800cc44 <UART_SetConfig+0xcd0>)
 800cbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbb6:	e009      	b.n	800cbcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbbe:	e005      	b.n	800cbcc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbca:	bf00      	nop
    }

    if (pclk != 0U)
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d021      	beq.n	800cc16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd6:	4a1c      	ldr	r2, [pc, #112]	@ (800cc48 <UART_SetConfig+0xcd4>)
 800cbd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	085b      	lsrs	r3, r3, #1
 800cbea:	441a      	add	r2, r3
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf8:	2b0f      	cmp	r3, #15
 800cbfa:	d909      	bls.n	800cc10 <UART_SetConfig+0xc9c>
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc02:	d205      	bcs.n	800cc10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60da      	str	r2, [r3, #12]
 800cc0e:	e002      	b.n	800cc16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3748      	adds	r7, #72	@ 0x48
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc40:	03d09000 	.word	0x03d09000
 800cc44:	003d0900 	.word	0x003d0900
 800cc48:	08013f8c 	.word	0x08013f8c

0800cc4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc58:	f003 0308 	and.w	r3, r3, #8
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	430a      	orrs	r2, r1
 800cc96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc9c:	f003 0302 	and.w	r3, r3, #2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00a      	beq.n	800ccba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00a      	beq.n	800ccdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	430a      	orrs	r2, r1
 800ccda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00a      	beq.n	800ccfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00a      	beq.n	800cd20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d01a      	beq.n	800cd62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd4a:	d10a      	bne.n	800cd62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	430a      	orrs	r2, r1
 800cd82:	605a      	str	r2, [r3, #4]
  }
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b098      	sub	sp, #96	@ 0x60
 800cd94:	af02      	add	r7, sp, #8
 800cd96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cda0:	f7f5 fb5a 	bl	8002458 <HAL_GetTick>
 800cda4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0308 	and.w	r3, r3, #8
 800cdb0:	2b08      	cmp	r3, #8
 800cdb2:	d12f      	bne.n	800ce14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f88e 	bl	800cee4 <UART_WaitOnFlagUntilTimeout>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d022      	beq.n	800ce14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd6:	e853 3f00 	ldrex	r3, [r3]
 800cdda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cde2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	461a      	mov	r2, r3
 800cdea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdec:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdf4:	e841 2300 	strex	r3, r2, [r1]
 800cdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1e6      	bne.n	800cdce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2220      	movs	r2, #32
 800ce04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e063      	b.n	800cedc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 0304 	and.w	r3, r3, #4
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	d149      	bne.n	800ceb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 f857 	bl	800cee4 <UART_WaitOnFlagUntilTimeout>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d03c      	beq.n	800ceb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce44:	e853 3f00 	ldrex	r3, [r3]
 800ce48:	623b      	str	r3, [r7, #32]
   return(result);
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce62:	e841 2300 	strex	r3, r2, [r1]
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1e6      	bne.n	800ce3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3308      	adds	r3, #8
 800ce74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	e853 3f00 	ldrex	r3, [r3]
 800ce7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f023 0301 	bic.w	r3, r3, #1
 800ce84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce8e:	61fa      	str	r2, [r7, #28]
 800ce90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce92:	69b9      	ldr	r1, [r7, #24]
 800ce94:	69fa      	ldr	r2, [r7, #28]
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e5      	bne.n	800ce6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2220      	movs	r2, #32
 800cea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e012      	b.n	800cedc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2220      	movs	r2, #32
 800ceba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2220      	movs	r2, #32
 800cec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3758      	adds	r7, #88	@ 0x58
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cef4:	e04f      	b.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d04b      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cefe:	f7f5 faab 	bl	8002458 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d302      	bcc.n	800cf14 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e04e      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d037      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b80      	cmp	r3, #128	@ 0x80
 800cf2a:	d034      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b40      	cmp	r3, #64	@ 0x40
 800cf30:	d031      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f003 0308 	and.w	r3, r3, #8
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d110      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2208      	movs	r2, #8
 800cf46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 f839 	bl	800cfc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2208      	movs	r2, #8
 800cf52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e029      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf70:	d111      	bne.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 f81f 	bl	800cfc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e00f      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	2300      	movne	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	461a      	mov	r2, r3
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d0a0      	beq.n	800cef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b095      	sub	sp, #84	@ 0x54
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e6      	bne.n	800cfc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	3308      	adds	r3, #8
 800d000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	e853 3f00 	ldrex	r3, [r3]
 800d008:	61fb      	str	r3, [r7, #28]
   return(result);
 800d00a:	69fa      	ldr	r2, [r7, #28]
 800d00c:	4b1e      	ldr	r3, [pc, #120]	@ (800d088 <UART_EndRxTransfer+0xc8>)
 800d00e:	4013      	ands	r3, r2
 800d010:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3308      	adds	r3, #8
 800d018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d01a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d01c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d022:	e841 2300 	strex	r3, r2, [r1]
 800d026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1e5      	bne.n	800cffa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d032:	2b01      	cmp	r3, #1
 800d034:	d118      	bne.n	800d068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	e853 3f00 	ldrex	r3, [r3]
 800d042:	60bb      	str	r3, [r7, #8]
   return(result);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	f023 0310 	bic.w	r3, r3, #16
 800d04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	461a      	mov	r2, r3
 800d052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d054:	61bb      	str	r3, [r7, #24]
 800d056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d058:	6979      	ldr	r1, [r7, #20]
 800d05a:	69ba      	ldr	r2, [r7, #24]
 800d05c:	e841 2300 	strex	r3, r2, [r1]
 800d060:	613b      	str	r3, [r7, #16]
   return(result);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1e6      	bne.n	800d036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2220      	movs	r2, #32
 800d06c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d07c:	bf00      	nop
 800d07e:	3754      	adds	r7, #84	@ 0x54
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	effffffe 	.word	0xeffffffe

0800d08c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d101      	bne.n	800d0a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d09e:	2302      	movs	r3, #2
 800d0a0:	e027      	b.n	800d0f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2224      	movs	r2, #36	@ 0x24
 800d0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f022 0201 	bic.w	r2, r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d0d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b084      	sub	sp, #16
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d112:	2302      	movs	r3, #2
 800d114:	e02d      	b.n	800d172 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2224      	movs	r2, #36	@ 0x24
 800d122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f022 0201 	bic.w	r2, r2, #1
 800d13c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	430a      	orrs	r2, r1
 800d150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f850 	bl	800d1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2220      	movs	r2, #32
 800d164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d101      	bne.n	800d192 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d18e:	2302      	movs	r3, #2
 800d190:	e02d      	b.n	800d1ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2224      	movs	r2, #36	@ 0x24
 800d19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f022 0201 	bic.w	r2, r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f812 	bl	800d1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
	...

0800d1f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d204:	2b00      	cmp	r3, #0
 800d206:	d108      	bne.n	800d21a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d218:	e031      	b.n	800d27e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d21a:	2310      	movs	r3, #16
 800d21c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d21e:	2310      	movs	r3, #16
 800d220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	0e5b      	lsrs	r3, r3, #25
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 0307 	and.w	r3, r3, #7
 800d230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	0f5b      	lsrs	r3, r3, #29
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 0307 	and.w	r3, r3, #7
 800d240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d242:	7bbb      	ldrb	r3, [r7, #14]
 800d244:	7b3a      	ldrb	r2, [r7, #12]
 800d246:	4911      	ldr	r1, [pc, #68]	@ (800d28c <UARTEx_SetNbDataToProcess+0x94>)
 800d248:	5c8a      	ldrb	r2, [r1, r2]
 800d24a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d24e:	7b3a      	ldrb	r2, [r7, #12]
 800d250:	490f      	ldr	r1, [pc, #60]	@ (800d290 <UARTEx_SetNbDataToProcess+0x98>)
 800d252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d254:	fb93 f3f2 	sdiv	r3, r3, r2
 800d258:	b29a      	uxth	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	7b7a      	ldrb	r2, [r7, #13]
 800d264:	4909      	ldr	r1, [pc, #36]	@ (800d28c <UARTEx_SetNbDataToProcess+0x94>)
 800d266:	5c8a      	ldrb	r2, [r1, r2]
 800d268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d26c:	7b7a      	ldrb	r2, [r7, #13]
 800d26e:	4908      	ldr	r1, [pc, #32]	@ (800d290 <UARTEx_SetNbDataToProcess+0x98>)
 800d270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d272:	fb93 f3f2 	sdiv	r3, r3, r2
 800d276:	b29a      	uxth	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d27e:	bf00      	nop
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	08013fa4 	.word	0x08013fa4
 800d290:	08013fac 	.word	0x08013fac

0800d294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d294:	b084      	sub	sp, #16
 800d296:	b580      	push	{r7, lr}
 800d298:	b084      	sub	sp, #16
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	f107 001c 	add.w	r0, r7, #28
 800d2a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d121      	bne.n	800d2f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68da      	ldr	r2, [r3, #12]
 800d2be:	4b2c      	ldr	r3, [pc, #176]	@ (800d370 <USB_CoreInit+0xdc>)
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d2d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d105      	bne.n	800d2e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f001 faf6 	bl	800e8d8 <USB_CoreReset>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]
 800d2f0:	e01b      	b.n	800d32a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f001 faea 	bl	800e8d8 <USB_CoreReset>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d308:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d106      	bne.n	800d31e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d314:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d31c:	e005      	b.n	800d32a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d322:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d32a:	7fbb      	ldrb	r3, [r7, #30]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d116      	bne.n	800d35e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d334:	b29a      	uxth	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d33e:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <USB_CoreInit+0xe0>)
 800d340:	4313      	orrs	r3, r2
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f043 0206 	orr.w	r2, r3, #6
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f043 0220 	orr.w	r2, r3, #32
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d36a:	b004      	add	sp, #16
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	ffbdffbf 	.word	0xffbdffbf
 800d374:	03ee0000 	.word	0x03ee0000

0800d378 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d378:	b480      	push	{r7}
 800d37a:	b087      	sub	sp, #28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d165      	bne.n	800d458 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	4a41      	ldr	r2, [pc, #260]	@ (800d494 <USB_SetTurnaroundTime+0x11c>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d906      	bls.n	800d3a2 <USB_SetTurnaroundTime+0x2a>
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	4a40      	ldr	r2, [pc, #256]	@ (800d498 <USB_SetTurnaroundTime+0x120>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d202      	bcs.n	800d3a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d39c:	230f      	movs	r3, #15
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	e062      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	4a3c      	ldr	r2, [pc, #240]	@ (800d498 <USB_SetTurnaroundTime+0x120>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d306      	bcc.n	800d3b8 <USB_SetTurnaroundTime+0x40>
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	4a3b      	ldr	r2, [pc, #236]	@ (800d49c <USB_SetTurnaroundTime+0x124>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d202      	bcs.n	800d3b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d3b2:	230e      	movs	r3, #14
 800d3b4:	617b      	str	r3, [r7, #20]
 800d3b6:	e057      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	4a38      	ldr	r2, [pc, #224]	@ (800d49c <USB_SetTurnaroundTime+0x124>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d306      	bcc.n	800d3ce <USB_SetTurnaroundTime+0x56>
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	4a37      	ldr	r2, [pc, #220]	@ (800d4a0 <USB_SetTurnaroundTime+0x128>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d202      	bcs.n	800d3ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d3c8:	230d      	movs	r3, #13
 800d3ca:	617b      	str	r3, [r7, #20]
 800d3cc:	e04c      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	4a33      	ldr	r2, [pc, #204]	@ (800d4a0 <USB_SetTurnaroundTime+0x128>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d306      	bcc.n	800d3e4 <USB_SetTurnaroundTime+0x6c>
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	4a32      	ldr	r2, [pc, #200]	@ (800d4a4 <USB_SetTurnaroundTime+0x12c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d802      	bhi.n	800d3e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d3de:	230c      	movs	r3, #12
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	e041      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	4a2f      	ldr	r2, [pc, #188]	@ (800d4a4 <USB_SetTurnaroundTime+0x12c>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d906      	bls.n	800d3fa <USB_SetTurnaroundTime+0x82>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4a2e      	ldr	r2, [pc, #184]	@ (800d4a8 <USB_SetTurnaroundTime+0x130>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d802      	bhi.n	800d3fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d3f4:	230b      	movs	r3, #11
 800d3f6:	617b      	str	r3, [r7, #20]
 800d3f8:	e036      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4a2a      	ldr	r2, [pc, #168]	@ (800d4a8 <USB_SetTurnaroundTime+0x130>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d906      	bls.n	800d410 <USB_SetTurnaroundTime+0x98>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	4a29      	ldr	r2, [pc, #164]	@ (800d4ac <USB_SetTurnaroundTime+0x134>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d802      	bhi.n	800d410 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d40a:	230a      	movs	r3, #10
 800d40c:	617b      	str	r3, [r7, #20]
 800d40e:	e02b      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	4a26      	ldr	r2, [pc, #152]	@ (800d4ac <USB_SetTurnaroundTime+0x134>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d906      	bls.n	800d426 <USB_SetTurnaroundTime+0xae>
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	4a25      	ldr	r2, [pc, #148]	@ (800d4b0 <USB_SetTurnaroundTime+0x138>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d202      	bcs.n	800d426 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d420:	2309      	movs	r3, #9
 800d422:	617b      	str	r3, [r7, #20]
 800d424:	e020      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	4a21      	ldr	r2, [pc, #132]	@ (800d4b0 <USB_SetTurnaroundTime+0x138>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d306      	bcc.n	800d43c <USB_SetTurnaroundTime+0xc4>
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	4a20      	ldr	r2, [pc, #128]	@ (800d4b4 <USB_SetTurnaroundTime+0x13c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d802      	bhi.n	800d43c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d436:	2308      	movs	r3, #8
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e015      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b4 <USB_SetTurnaroundTime+0x13c>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d906      	bls.n	800d452 <USB_SetTurnaroundTime+0xda>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4a1c      	ldr	r2, [pc, #112]	@ (800d4b8 <USB_SetTurnaroundTime+0x140>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d202      	bcs.n	800d452 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d44c:	2307      	movs	r3, #7
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e00a      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d452:	2306      	movs	r3, #6
 800d454:	617b      	str	r3, [r7, #20]
 800d456:	e007      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d102      	bne.n	800d464 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d45e:	2309      	movs	r3, #9
 800d460:	617b      	str	r3, [r7, #20]
 800d462:	e001      	b.n	800d468 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d464:	2309      	movs	r3, #9
 800d466:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68da      	ldr	r2, [r3, #12]
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	029b      	lsls	r3, r3, #10
 800d47c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d480:	431a      	orrs	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	371c      	adds	r7, #28
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	00d8acbf 	.word	0x00d8acbf
 800d498:	00e4e1c0 	.word	0x00e4e1c0
 800d49c:	00f42400 	.word	0x00f42400
 800d4a0:	01067380 	.word	0x01067380
 800d4a4:	011a499f 	.word	0x011a499f
 800d4a8:	01312cff 	.word	0x01312cff
 800d4ac:	014ca43f 	.word	0x014ca43f
 800d4b0:	016e3600 	.word	0x016e3600
 800d4b4:	01a6ab1f 	.word	0x01a6ab1f
 800d4b8:	01e84800 	.word	0x01e84800

0800d4bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	f043 0201 	orr.w	r2, r3, #1
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b083      	sub	sp, #12
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f023 0201 	bic.w	r2, r3, #1
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d51c:	78fb      	ldrb	r3, [r7, #3]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d115      	bne.n	800d54e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d52e:	200a      	movs	r0, #10
 800d530:	f7f4 ff9e 	bl	8002470 <HAL_Delay>
      ms += 10U;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	330a      	adds	r3, #10
 800d538:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 f93b 	bl	800e7b6 <USB_GetMode>
 800d540:	4603      	mov	r3, r0
 800d542:	2b01      	cmp	r3, #1
 800d544:	d01e      	beq.n	800d584 <USB_SetCurrentMode+0x84>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2bc7      	cmp	r3, #199	@ 0xc7
 800d54a:	d9f0      	bls.n	800d52e <USB_SetCurrentMode+0x2e>
 800d54c:	e01a      	b.n	800d584 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d54e:	78fb      	ldrb	r3, [r7, #3]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d115      	bne.n	800d580 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d560:	200a      	movs	r0, #10
 800d562:	f7f4 ff85 	bl	8002470 <HAL_Delay>
      ms += 10U;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	330a      	adds	r3, #10
 800d56a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 f922 	bl	800e7b6 <USB_GetMode>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <USB_SetCurrentMode+0x84>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2bc7      	cmp	r3, #199	@ 0xc7
 800d57c:	d9f0      	bls.n	800d560 <USB_SetCurrentMode+0x60>
 800d57e:	e001      	b.n	800d584 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e005      	b.n	800d590 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2bc8      	cmp	r3, #200	@ 0xc8
 800d588:	d101      	bne.n	800d58e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e000      	b.n	800d590 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d598:	b084      	sub	sp, #16
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b086      	sub	sp, #24
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d5a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	613b      	str	r3, [r7, #16]
 800d5b6:	e009      	b.n	800d5cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	3340      	adds	r3, #64	@ 0x40
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	613b      	str	r3, [r7, #16]
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2b0e      	cmp	r3, #14
 800d5d0:	d9f2      	bls.n	800d5b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d5d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d11c      	bne.n	800d614 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d5e8:	f043 0302 	orr.w	r3, r3, #2
 800d5ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	e005      	b.n	800d620 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d618:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d626:	461a      	mov	r2, r3
 800d628:	2300      	movs	r3, #0
 800d62a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d62c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d630:	2b01      	cmp	r3, #1
 800d632:	d10d      	bne.n	800d650 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d63c:	2100      	movs	r1, #0
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f968 	bl	800d914 <USB_SetDevSpeed>
 800d644:	e008      	b.n	800d658 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d646:	2101      	movs	r1, #1
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f963 	bl	800d914 <USB_SetDevSpeed>
 800d64e:	e003      	b.n	800d658 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d650:	2103      	movs	r1, #3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f95e 	bl	800d914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d658:	2110      	movs	r1, #16
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f8fa 	bl	800d854 <USB_FlushTxFifo>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f924 	bl	800d8b8 <USB_FlushRxFifo>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d680:	461a      	mov	r2, r3
 800d682:	2300      	movs	r3, #0
 800d684:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d68c:	461a      	mov	r2, r3
 800d68e:	2300      	movs	r3, #0
 800d690:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d698:	461a      	mov	r2, r3
 800d69a:	2300      	movs	r3, #0
 800d69c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d69e:	2300      	movs	r3, #0
 800d6a0:	613b      	str	r3, [r7, #16]
 800d6a2:	e043      	b.n	800d72c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6ba:	d118      	bne.n	800d6ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10a      	bne.n	800d6d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d6d4:	6013      	str	r3, [r2, #0]
 800d6d6:	e013      	b.n	800d700 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	e008      	b.n	800d700 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	015a      	lsls	r2, r3, #5
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4413      	add	r3, r2
 800d708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d70c:	461a      	mov	r2, r3
 800d70e:	2300      	movs	r3, #0
 800d710:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	015a      	lsls	r2, r3, #5
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4413      	add	r3, r2
 800d71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d71e:	461a      	mov	r2, r3
 800d720:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d724:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	3301      	adds	r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d730:	461a      	mov	r2, r3
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	4293      	cmp	r3, r2
 800d736:	d3b5      	bcc.n	800d6a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d738:	2300      	movs	r3, #0
 800d73a:	613b      	str	r3, [r7, #16]
 800d73c:	e043      	b.n	800d7c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d754:	d118      	bne.n	800d788 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10a      	bne.n	800d772 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	015a      	lsls	r2, r3, #5
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4413      	add	r3, r2
 800d764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d768:	461a      	mov	r2, r3
 800d76a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	e013      	b.n	800d79a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d77e:	461a      	mov	r2, r3
 800d780:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d784:	6013      	str	r3, [r2, #0]
 800d786:	e008      	b.n	800d79a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d794:	461a      	mov	r2, r3
 800d796:	2300      	movs	r3, #0
 800d798:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d7be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
 800d7c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d3b5      	bcc.n	800d73e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d7f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d7f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d105      	bne.n	800d808 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	f043 0210 	orr.w	r2, r3, #16
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	699a      	ldr	r2, [r3, #24]
 800d80c:	4b0f      	ldr	r3, [pc, #60]	@ (800d84c <USB_DevInit+0x2b4>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d814:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	f043 0208 	orr.w	r2, r3, #8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d828:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d105      	bne.n	800d83c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	699a      	ldr	r2, [r3, #24]
 800d834:	4b06      	ldr	r3, [pc, #24]	@ (800d850 <USB_DevInit+0x2b8>)
 800d836:	4313      	orrs	r3, r2
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d848:	b004      	add	sp, #16
 800d84a:	4770      	bx	lr
 800d84c:	803c3800 	.word	0x803c3800
 800d850:	40000004 	.word	0x40000004

0800d854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3301      	adds	r3, #1
 800d866:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d86e:	d901      	bls.n	800d874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e01b      	b.n	800d8ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	daf2      	bge.n	800d862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	019b      	lsls	r3, r3, #6
 800d884:	f043 0220 	orr.w	r2, r3, #32
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3301      	adds	r3, #1
 800d890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d898:	d901      	bls.n	800d89e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e006      	b.n	800d8ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	f003 0320 	and.w	r3, r3, #32
 800d8a6:	2b20      	cmp	r3, #32
 800d8a8:	d0f0      	beq.n	800d88c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8d0:	d901      	bls.n	800d8d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e018      	b.n	800d908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	daf2      	bge.n	800d8c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2210      	movs	r2, #16
 800d8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8f4:	d901      	bls.n	800d8fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e006      	b.n	800d908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f003 0310 	and.w	r3, r3, #16
 800d902:	2b10      	cmp	r3, #16
 800d904:	d0f0      	beq.n	800d8e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	78fb      	ldrb	r3, [r7, #3]
 800d92e:	68f9      	ldr	r1, [r7, #12]
 800d930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d934:	4313      	orrs	r3, r2
 800d936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d946:	b480      	push	{r7}
 800d948:	b087      	sub	sp, #28
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 0306 	and.w	r3, r3, #6
 800d95e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d102      	bne.n	800d96c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d966:	2300      	movs	r3, #0
 800d968:	75fb      	strb	r3, [r7, #23]
 800d96a:	e00a      	b.n	800d982 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d002      	beq.n	800d978 <USB_GetDevSpeed+0x32>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b06      	cmp	r3, #6
 800d976:	d102      	bne.n	800d97e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d978:	2302      	movs	r3, #2
 800d97a:	75fb      	strb	r3, [r7, #23]
 800d97c:	e001      	b.n	800d982 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d97e:	230f      	movs	r3, #15
 800d980:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
}
 800d984:	4618      	mov	r0, r3
 800d986:	371c      	adds	r7, #28
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	785b      	ldrb	r3, [r3, #1]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d139      	bne.n	800da20 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9b2:	69da      	ldr	r2, [r3, #28]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 030f 	and.w	r3, r3, #15
 800d9bc:	2101      	movs	r1, #1
 800d9be:	fa01 f303 	lsl.w	r3, r1, r3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d153      	bne.n	800da8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	015a      	lsls	r2, r3, #5
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	791b      	ldrb	r3, [r3, #4]
 800d9fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	059b      	lsls	r3, r3, #22
 800da06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da08:	431a      	orrs	r2, r3
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	0159      	lsls	r1, r3, #5
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	440b      	add	r3, r1
 800da12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da16:	4619      	mov	r1, r3
 800da18:	4b20      	ldr	r3, [pc, #128]	@ (800da9c <USB_ActivateEndpoint+0x10c>)
 800da1a:	4313      	orrs	r3, r2
 800da1c:	600b      	str	r3, [r1, #0]
 800da1e:	e035      	b.n	800da8c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da26:	69da      	ldr	r2, [r3, #28]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f003 030f 	and.w	r3, r3, #15
 800da30:	2101      	movs	r1, #1
 800da32:	fa01 f303 	lsl.w	r3, r1, r3
 800da36:	041b      	lsls	r3, r3, #16
 800da38:	68f9      	ldr	r1, [r7, #12]
 800da3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da3e:	4313      	orrs	r3, r2
 800da40:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	015a      	lsls	r2, r3, #5
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	4413      	add	r3, r2
 800da4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da54:	2b00      	cmp	r3, #0
 800da56:	d119      	bne.n	800da8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	791b      	ldrb	r3, [r3, #4]
 800da72:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da74:	430b      	orrs	r3, r1
 800da76:	431a      	orrs	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	0159      	lsls	r1, r3, #5
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	440b      	add	r3, r1
 800da80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da84:	4619      	mov	r1, r3
 800da86:	4b05      	ldr	r3, [pc, #20]	@ (800da9c <USB_ActivateEndpoint+0x10c>)
 800da88:	4313      	orrs	r3, r2
 800da8a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3714      	adds	r7, #20
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	10008000 	.word	0x10008000

0800daa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	785b      	ldrb	r3, [r3, #1]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d161      	bne.n	800db80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	015a      	lsls	r2, r3, #5
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dad2:	d11f      	bne.n	800db14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	0151      	lsls	r1, r2, #5
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	440a      	add	r2, r1
 800daea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800daee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800daf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	0151      	lsls	r1, r2, #5
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	440a      	add	r2, r1
 800db0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f003 030f 	and.w	r3, r3, #15
 800db24:	2101      	movs	r1, #1
 800db26:	fa01 f303 	lsl.w	r3, r1, r3
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	43db      	mvns	r3, r3
 800db2e:	68f9      	ldr	r1, [r7, #12]
 800db30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800db34:	4013      	ands	r3, r2
 800db36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db3e:	69da      	ldr	r2, [r3, #28]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	f003 030f 	and.w	r3, r3, #15
 800db48:	2101      	movs	r1, #1
 800db4a:	fa01 f303 	lsl.w	r3, r1, r3
 800db4e:	b29b      	uxth	r3, r3
 800db50:	43db      	mvns	r3, r3
 800db52:	68f9      	ldr	r1, [r7, #12]
 800db54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800db58:	4013      	ands	r3, r2
 800db5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	0159      	lsls	r1, r3, #5
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	440b      	add	r3, r1
 800db72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db76:	4619      	mov	r1, r3
 800db78:	4b35      	ldr	r3, [pc, #212]	@ (800dc50 <USB_DeactivateEndpoint+0x1b0>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	600b      	str	r3, [r1, #0]
 800db7e:	e060      	b.n	800dc42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	015a      	lsls	r2, r3, #5
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4413      	add	r3, r2
 800db88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db96:	d11f      	bne.n	800dbd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	015a      	lsls	r2, r3, #5
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	4413      	add	r3, r2
 800dba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	0151      	lsls	r1, r2, #5
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	440a      	add	r2, r1
 800dbae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dbb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dbb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	015a      	lsls	r2, r3, #5
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	0151      	lsls	r1, r2, #5
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	440a      	add	r2, r1
 800dbce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dbd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 030f 	and.w	r3, r3, #15
 800dbe8:	2101      	movs	r1, #1
 800dbea:	fa01 f303 	lsl.w	r3, r1, r3
 800dbee:	041b      	lsls	r3, r3, #16
 800dbf0:	43db      	mvns	r3, r3
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc02:	69da      	ldr	r2, [r3, #28]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc12:	041b      	lsls	r3, r3, #16
 800dc14:	43db      	mvns	r3, r3
 800dc16:	68f9      	ldr	r1, [r7, #12]
 800dc18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	0159      	lsls	r1, r3, #5
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	440b      	add	r3, r1
 800dc36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <USB_DeactivateEndpoint+0x1b4>)
 800dc3e:	4013      	ands	r3, r2
 800dc40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	ec337800 	.word	0xec337800
 800dc54:	eff37800 	.word	0xeff37800

0800dc58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08a      	sub	sp, #40	@ 0x28
 800dc5c:	af02      	add	r7, sp, #8
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	f040 8181 	bne.w	800df7c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d132      	bne.n	800dce8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc8e:	691a      	ldr	r2, [r3, #16]
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	0159      	lsls	r1, r3, #5
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	440b      	add	r3, r1
 800dc98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4ba5      	ldr	r3, [pc, #660]	@ (800df34 <USB_EPStartXfer+0x2dc>)
 800dca0:	4013      	ands	r3, r2
 800dca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	015a      	lsls	r2, r3, #5
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	0151      	lsls	r1, r2, #5
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	440a      	add	r2, r1
 800dcba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dcc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcd0:	691a      	ldr	r2, [r3, #16]
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	0159      	lsls	r1, r3, #5
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	440b      	add	r3, r1
 800dcda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcde:	4619      	mov	r1, r3
 800dce0:	4b95      	ldr	r3, [pc, #596]	@ (800df38 <USB_EPStartXfer+0x2e0>)
 800dce2:	4013      	ands	r3, r2
 800dce4:	610b      	str	r3, [r1, #16]
 800dce6:	e092      	b.n	800de0e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	015a      	lsls	r2, r3, #5
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcf4:	691a      	ldr	r2, [r3, #16]
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	0159      	lsls	r1, r3, #5
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	440b      	add	r3, r1
 800dcfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd02:	4619      	mov	r1, r3
 800dd04:	4b8c      	ldr	r3, [pc, #560]	@ (800df38 <USB_EPStartXfer+0x2e0>)
 800dd06:	4013      	ands	r3, r2
 800dd08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd16:	691a      	ldr	r2, [r3, #16]
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	0159      	lsls	r1, r3, #5
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	440b      	add	r3, r1
 800dd20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd24:	4619      	mov	r1, r3
 800dd26:	4b83      	ldr	r3, [pc, #524]	@ (800df34 <USB_EPStartXfer+0x2dc>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d11a      	bne.n	800dd68 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	691a      	ldr	r2, [r3, #16]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d903      	bls.n	800dd46 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	689a      	ldr	r2, [r3, #8]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	015a      	lsls	r2, r3, #5
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	0151      	lsls	r1, r2, #5
 800dd58:	69fa      	ldr	r2, [r7, #28]
 800dd5a:	440a      	add	r2, r1
 800dd5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd64:	6113      	str	r3, [r2, #16]
 800dd66:	e01b      	b.n	800dda0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	015a      	lsls	r2, r3, #5
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	4413      	add	r3, r2
 800dd70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd74:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6919      	ldr	r1, [r3, #16]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	440b      	add	r3, r1
 800dd80:	1e59      	subs	r1, r3, #1
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd8a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd8c:	4b6b      	ldr	r3, [pc, #428]	@ (800df3c <USB_EPStartXfer+0x2e4>)
 800dd8e:	400b      	ands	r3, r1
 800dd90:	69b9      	ldr	r1, [r7, #24]
 800dd92:	0148      	lsls	r0, r1, #5
 800dd94:	69f9      	ldr	r1, [r7, #28]
 800dd96:	4401      	add	r1, r0
 800dd98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddac:	691a      	ldr	r2, [r3, #16]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddb6:	69b9      	ldr	r1, [r7, #24]
 800ddb8:	0148      	lsls	r0, r1, #5
 800ddba:	69f9      	ldr	r1, [r7, #28]
 800ddbc:	4401      	add	r1, r0
 800ddbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	791b      	ldrb	r3, [r3, #4]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d11f      	bne.n	800de0e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	015a      	lsls	r2, r3, #5
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	69ba      	ldr	r2, [r7, #24]
 800ddde:	0151      	lsls	r1, r2, #5
 800dde0:	69fa      	ldr	r2, [r7, #28]
 800dde2:	440a      	add	r2, r1
 800dde4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dde8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ddec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	015a      	lsls	r2, r3, #5
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	69ba      	ldr	r2, [r7, #24]
 800ddfe:	0151      	lsls	r1, r2, #5
 800de00:	69fa      	ldr	r2, [r7, #28]
 800de02:	440a      	add	r2, r1
 800de04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d14b      	bne.n	800deac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	69db      	ldr	r3, [r3, #28]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d009      	beq.n	800de30 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de28:	461a      	mov	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	791b      	ldrb	r3, [r3, #4]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d128      	bne.n	800de8a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de44:	2b00      	cmp	r3, #0
 800de46:	d110      	bne.n	800de6a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	4413      	add	r3, r2
 800de50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69ba      	ldr	r2, [r7, #24]
 800de58:	0151      	lsls	r1, r2, #5
 800de5a:	69fa      	ldr	r2, [r7, #28]
 800de5c:	440a      	add	r2, r1
 800de5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	e00f      	b.n	800de8a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	015a      	lsls	r2, r3, #5
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	4413      	add	r3, r2
 800de72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	69ba      	ldr	r2, [r7, #24]
 800de7a:	0151      	lsls	r1, r2, #5
 800de7c:	69fa      	ldr	r2, [r7, #28]
 800de7e:	440a      	add	r2, r1
 800de80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	015a      	lsls	r2, r3, #5
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	4413      	add	r3, r2
 800de92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	0151      	lsls	r1, r2, #5
 800de9c:	69fa      	ldr	r2, [r7, #28]
 800de9e:	440a      	add	r2, r1
 800dea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dea4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	e16a      	b.n	800e182 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	015a      	lsls	r2, r3, #5
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	4413      	add	r3, r2
 800deb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	0151      	lsls	r1, r2, #5
 800debe:	69fa      	ldr	r2, [r7, #28]
 800dec0:	440a      	add	r2, r1
 800dec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dec6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800deca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	791b      	ldrb	r3, [r3, #4]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d015      	beq.n	800df00 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 8152 	beq.w	800e182 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	2101      	movs	r1, #1
 800def0:	fa01 f303 	lsl.w	r3, r1, r3
 800def4:	69f9      	ldr	r1, [r7, #28]
 800def6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800defa:	4313      	orrs	r3, r2
 800defc:	634b      	str	r3, [r1, #52]	@ 0x34
 800defe:	e140      	b.n	800e182 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d117      	bne.n	800df40 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	015a      	lsls	r2, r3, #5
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	4413      	add	r3, r2
 800df18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	0151      	lsls	r1, r2, #5
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	440a      	add	r2, r1
 800df26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	e016      	b.n	800df60 <USB_EPStartXfer+0x308>
 800df32:	bf00      	nop
 800df34:	e007ffff 	.word	0xe007ffff
 800df38:	fff80000 	.word	0xfff80000
 800df3c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	4413      	add	r3, r2
 800df48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	0151      	lsls	r1, r2, #5
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	440a      	add	r2, r1
 800df56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df5e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	68d9      	ldr	r1, [r3, #12]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	b298      	uxth	r0, r3
 800df6e:	79fb      	ldrb	r3, [r7, #7]
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	4603      	mov	r3, r0
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 f9b9 	bl	800e2ec <USB_WritePacket>
 800df7a:	e102      	b.n	800e182 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df88:	691a      	ldr	r2, [r3, #16]
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	0159      	lsls	r1, r3, #5
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	440b      	add	r3, r1
 800df92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df96:	4619      	mov	r1, r3
 800df98:	4b7c      	ldr	r3, [pc, #496]	@ (800e18c <USB_EPStartXfer+0x534>)
 800df9a:	4013      	ands	r3, r2
 800df9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	015a      	lsls	r2, r3, #5
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfaa:	691a      	ldr	r2, [r3, #16]
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	0159      	lsls	r1, r3, #5
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	440b      	add	r3, r1
 800dfb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfb8:	4619      	mov	r1, r3
 800dfba:	4b75      	ldr	r3, [pc, #468]	@ (800e190 <USB_EPStartXfer+0x538>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d12f      	bne.n	800e026 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	689a      	ldr	r2, [r3, #8]
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	689a      	ldr	r2, [r3, #8]
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfea:	691a      	ldr	r2, [r3, #16]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	6a1b      	ldr	r3, [r3, #32]
 800dff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dff4:	69b9      	ldr	r1, [r7, #24]
 800dff6:	0148      	lsls	r0, r1, #5
 800dff8:	69f9      	ldr	r1, [r7, #28]
 800dffa:	4401      	add	r1, r0
 800dffc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e000:	4313      	orrs	r3, r2
 800e002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	015a      	lsls	r2, r3, #5
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	4413      	add	r3, r2
 800e00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	69ba      	ldr	r2, [r7, #24]
 800e014:	0151      	lsls	r1, r2, #5
 800e016:	69fa      	ldr	r2, [r7, #28]
 800e018:	440a      	add	r2, r1
 800e01a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e01e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e022:	6113      	str	r3, [r2, #16]
 800e024:	e05f      	b.n	800e0e6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	691b      	ldr	r3, [r3, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d123      	bne.n	800e076 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e03a:	691a      	ldr	r2, [r3, #16]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e044:	69b9      	ldr	r1, [r7, #24]
 800e046:	0148      	lsls	r0, r1, #5
 800e048:	69f9      	ldr	r1, [r7, #28]
 800e04a:	4401      	add	r1, r0
 800e04c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e050:	4313      	orrs	r3, r2
 800e052:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	69ba      	ldr	r2, [r7, #24]
 800e064:	0151      	lsls	r1, r2, #5
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	440a      	add	r2, r1
 800e06a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e06e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e072:	6113      	str	r3, [r2, #16]
 800e074:	e037      	b.n	800e0e6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	691a      	ldr	r2, [r3, #16]
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	4413      	add	r3, r2
 800e080:	1e5a      	subs	r2, r3, #1
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	8afa      	ldrh	r2, [r7, #22]
 800e092:	fb03 f202 	mul.w	r2, r3, r2
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0a6:	691a      	ldr	r2, [r3, #16]
 800e0a8:	8afb      	ldrh	r3, [r7, #22]
 800e0aa:	04d9      	lsls	r1, r3, #19
 800e0ac:	4b39      	ldr	r3, [pc, #228]	@ (800e194 <USB_EPStartXfer+0x53c>)
 800e0ae:	400b      	ands	r3, r1
 800e0b0:	69b9      	ldr	r1, [r7, #24]
 800e0b2:	0148      	lsls	r0, r1, #5
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	4401      	add	r1, r0
 800e0b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	015a      	lsls	r2, r3, #5
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0cc:	691a      	ldr	r2, [r3, #16]
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0d6:	69b9      	ldr	r1, [r7, #24]
 800e0d8:	0148      	lsls	r0, r1, #5
 800e0da:	69f9      	ldr	r1, [r7, #28]
 800e0dc:	4401      	add	r1, r0
 800e0de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d10d      	bne.n	800e108 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d009      	beq.n	800e108 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	68d9      	ldr	r1, [r3, #12]
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e104:	460a      	mov	r2, r1
 800e106:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	791b      	ldrb	r3, [r3, #4]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d128      	bne.n	800e162 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d110      	bne.n	800e142 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	015a      	lsls	r2, r3, #5
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	4413      	add	r3, r2
 800e128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	0151      	lsls	r1, r2, #5
 800e132:	69fa      	ldr	r2, [r7, #28]
 800e134:	440a      	add	r2, r1
 800e136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e13a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	e00f      	b.n	800e162 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	69ba      	ldr	r2, [r7, #24]
 800e152:	0151      	lsls	r1, r2, #5
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	440a      	add	r2, r1
 800e158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e15c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e160:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	0151      	lsls	r1, r2, #5
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	440a      	add	r2, r1
 800e178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e17c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e180:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3720      	adds	r7, #32
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	fff80000 	.word	0xfff80000
 800e190:	e007ffff 	.word	0xe007ffff
 800e194:	1ff80000 	.word	0x1ff80000

0800e198 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	785b      	ldrb	r3, [r3, #1]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d14a      	bne.n	800e24c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1ce:	f040 8086 	bne.w	800e2de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	015a      	lsls	r2, r3, #5
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	4413      	add	r3, r2
 800e1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	7812      	ldrb	r2, [r2, #0]
 800e1e6:	0151      	lsls	r1, r2, #5
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	440a      	add	r2, r1
 800e1ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e1f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	7812      	ldrb	r2, [r2, #0]
 800e20a:	0151      	lsls	r1, r2, #5
 800e20c:	693a      	ldr	r2, [r7, #16]
 800e20e:	440a      	add	r2, r1
 800e210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e218:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3301      	adds	r3, #1
 800e21e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e226:	4293      	cmp	r3, r2
 800e228:	d902      	bls.n	800e230 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e22a:	2301      	movs	r3, #1
 800e22c:	75fb      	strb	r3, [r7, #23]
          break;
 800e22e:	e056      	b.n	800e2de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	015a      	lsls	r2, r3, #5
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	4413      	add	r3, r2
 800e23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e248:	d0e7      	beq.n	800e21a <USB_EPStopXfer+0x82>
 800e24a:	e048      	b.n	800e2de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	4413      	add	r3, r2
 800e256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e264:	d13b      	bne.n	800e2de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	7812      	ldrb	r2, [r2, #0]
 800e27a:	0151      	lsls	r1, r2, #5
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	440a      	add	r2, r1
 800e280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e284:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e288:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	4413      	add	r3, r2
 800e294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	7812      	ldrb	r2, [r2, #0]
 800e29e:	0151      	lsls	r1, r2, #5
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	440a      	add	r2, r1
 800e2a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d902      	bls.n	800e2c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	75fb      	strb	r3, [r7, #23]
          break;
 800e2c2:	e00c      	b.n	800e2de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2dc:	d0e7      	beq.n	800e2ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	371c      	adds	r7, #28
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b089      	sub	sp, #36	@ 0x24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	71fb      	strb	r3, [r7, #7]
 800e2fe:	4613      	mov	r3, r2
 800e300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e30a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d123      	bne.n	800e35a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e312:	88bb      	ldrh	r3, [r7, #4]
 800e314:	3303      	adds	r3, #3
 800e316:	089b      	lsrs	r3, r3, #2
 800e318:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e31a:	2300      	movs	r3, #0
 800e31c:	61bb      	str	r3, [r7, #24]
 800e31e:	e018      	b.n	800e352 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e320:	79fb      	ldrb	r3, [r7, #7]
 800e322:	031a      	lsls	r2, r3, #12
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	4413      	add	r3, r2
 800e328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e32c:	461a      	mov	r2, r3
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	3301      	adds	r3, #1
 800e338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	3301      	adds	r3, #1
 800e33e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	3301      	adds	r3, #1
 800e344:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	3301      	adds	r3, #1
 800e34a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	3301      	adds	r3, #1
 800e350:	61bb      	str	r3, [r7, #24]
 800e352:	69ba      	ldr	r2, [r7, #24]
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	429a      	cmp	r2, r3
 800e358:	d3e2      	bcc.n	800e320 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3724      	adds	r7, #36	@ 0x24
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e368:	b480      	push	{r7}
 800e36a:	b08b      	sub	sp, #44	@ 0x2c
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e37e:	88fb      	ldrh	r3, [r7, #6]
 800e380:	089b      	lsrs	r3, r3, #2
 800e382:	b29b      	uxth	r3, r3
 800e384:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e386:	88fb      	ldrh	r3, [r7, #6]
 800e388:	f003 0303 	and.w	r3, r3, #3
 800e38c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e38e:	2300      	movs	r3, #0
 800e390:	623b      	str	r3, [r7, #32]
 800e392:	e014      	b.n	800e3be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	623b      	str	r3, [r7, #32]
 800e3be:	6a3a      	ldr	r2, [r7, #32]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d3e6      	bcc.n	800e394 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e3c6:	8bfb      	ldrh	r3, [r7, #30]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01e      	beq.n	800e40a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f107 0310 	add.w	r3, r7, #16
 800e3dc:	6812      	ldr	r2, [r2, #0]
 800e3de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f0:	701a      	strb	r2, [r3, #0]
      i++;
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e3fe:	8bfb      	ldrh	r3, [r7, #30]
 800e400:	3b01      	subs	r3, #1
 800e402:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e404:	8bfb      	ldrh	r3, [r7, #30]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1ea      	bne.n	800e3e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	372c      	adds	r7, #44	@ 0x2c
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	785b      	ldrb	r3, [r3, #1]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d12c      	bne.n	800e48e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	db12      	blt.n	800e46c <USB_EPSetStall+0x54>
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00f      	beq.n	800e46c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	015a      	lsls	r2, r3, #5
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	4413      	add	r3, r2
 800e454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	0151      	lsls	r1, r2, #5
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	440a      	add	r2, r1
 800e462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e46a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	015a      	lsls	r2, r3, #5
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	4413      	add	r3, r2
 800e474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	0151      	lsls	r1, r2, #5
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	440a      	add	r2, r1
 800e482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	e02b      	b.n	800e4e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	015a      	lsls	r2, r3, #5
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	4413      	add	r3, r2
 800e496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	db12      	blt.n	800e4c6 <USB_EPSetStall+0xae>
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00f      	beq.n	800e4c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	015a      	lsls	r2, r3, #5
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	0151      	lsls	r1, r2, #5
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	440a      	add	r2, r1
 800e4bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e4c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	0151      	lsls	r1, r2, #5
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	440a      	add	r2, r1
 800e4dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e4e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	785b      	ldrb	r3, [r3, #1]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d128      	bne.n	800e562 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4413      	add	r3, r2
 800e518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	0151      	lsls	r1, r2, #5
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	440a      	add	r2, r1
 800e526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e52a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e52e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	791b      	ldrb	r3, [r3, #4]
 800e534:	2b03      	cmp	r3, #3
 800e536:	d003      	beq.n	800e540 <USB_EPClearStall+0x4c>
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	791b      	ldrb	r3, [r3, #4]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d138      	bne.n	800e5b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	015a      	lsls	r2, r3, #5
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	4413      	add	r3, r2
 800e548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	0151      	lsls	r1, r2, #5
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	440a      	add	r2, r1
 800e556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e55a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e55e:	6013      	str	r3, [r2, #0]
 800e560:	e027      	b.n	800e5b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	015a      	lsls	r2, r3, #5
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	4413      	add	r3, r2
 800e56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	0151      	lsls	r1, r2, #5
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	440a      	add	r2, r1
 800e578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e57c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e580:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	791b      	ldrb	r3, [r3, #4]
 800e586:	2b03      	cmp	r3, #3
 800e588:	d003      	beq.n	800e592 <USB_EPClearStall+0x9e>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	791b      	ldrb	r3, [r3, #4]
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d10f      	bne.n	800e5b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	015a      	lsls	r2, r3, #5
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	0151      	lsls	r1, r2, #5
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	440a      	add	r2, r1
 800e5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e5de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e5e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	78fb      	ldrb	r3, [r7, #3]
 800e5ee:	011b      	lsls	r3, r3, #4
 800e5f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e5f4:	68f9      	ldr	r1, [r7, #12]
 800e5f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3714      	adds	r7, #20
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e626:	f023 0303 	bic.w	r3, r3, #3
 800e62a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e63a:	f023 0302 	bic.w	r3, r3, #2
 800e63e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	3714      	adds	r7, #20
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e64e:	b480      	push	{r7}
 800e650:	b085      	sub	sp, #20
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e668:	f023 0303 	bic.w	r3, r3, #3
 800e66c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e67c:	f043 0302 	orr.w	r3, r3, #2
 800e680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	695b      	ldr	r3, [r3, #20]
 800e69c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	699b      	ldr	r3, [r3, #24]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6d2:	69db      	ldr	r3, [r3, #28]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	0c1b      	lsrs	r3, r3, #16
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3714      	adds	r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6fc:	699b      	ldr	r3, [r3, #24]
 800e6fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e706:	69db      	ldr	r3, [r3, #28]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	4013      	ands	r3, r2
 800e70c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	b29b      	uxth	r3, r3
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e71e:	b480      	push	{r7}
 800e720:	b085      	sub	sp, #20
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	460b      	mov	r3, r1
 800e728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e72e:	78fb      	ldrb	r3, [r7, #3]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4413      	add	r3, r2
 800e736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e744:	695b      	ldr	r3, [r3, #20]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	4013      	ands	r3, r2
 800e74a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e74c:	68bb      	ldr	r3, [r7, #8]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b087      	sub	sp, #28
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	460b      	mov	r3, r1
 800e764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e77c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e77e:	78fb      	ldrb	r3, [r7, #3]
 800e780:	f003 030f 	and.w	r3, r3, #15
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	fa22 f303 	lsr.w	r3, r2, r3
 800e78a:	01db      	lsls	r3, r3, #7
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	4313      	orrs	r3, r2
 800e792:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	015a      	lsls	r2, r3, #5
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	4413      	add	r3, r2
 800e79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	371c      	adds	r7, #28
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7b6:	b480      	push	{r7}
 800e7b8:	b083      	sub	sp, #12
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	f003 0301 	and.w	r3, r3, #1
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4b09      	ldr	r3, [pc, #36]	@ (800e818 <USB_ActivateSetup+0x44>)
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	fffff800 	.word	0xfffff800

0800e81c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b087      	sub	sp, #28
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	460b      	mov	r3, r1
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	333c      	adds	r3, #60	@ 0x3c
 800e832:	3304      	adds	r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	4a26      	ldr	r2, [pc, #152]	@ (800e8d4 <USB_EP0_OutStart+0xb8>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d90a      	bls.n	800e856 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e84c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e850:	d101      	bne.n	800e856 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	e037      	b.n	800e8c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e85c:	461a      	mov	r2, r3
 800e85e:	2300      	movs	r3, #0
 800e860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e884:	f043 0318 	orr.w	r3, r3, #24
 800e888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e898:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e89c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e89e:	7afb      	ldrb	r3, [r7, #11]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d10f      	bne.n	800e8c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	697a      	ldr	r2, [r7, #20]
 800e8ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e8c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	371c      	adds	r7, #28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	4f54300a 	.word	0x4f54300a

0800e8d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e8f0:	d901      	bls.n	800e8f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e01b      	b.n	800e92e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	daf2      	bge.n	800e8e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	f043 0201 	orr.w	r2, r3, #1
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3301      	adds	r3, #1
 800e912:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e91a:	d901      	bls.n	800e920 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e006      	b.n	800e92e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d0f0      	beq.n	800e90e <USB_CoreReset+0x36>

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	460b      	mov	r3, r1
 800e946:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e948:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e94c:	f002 fcdc 	bl	8011308 <USBD_static_malloc>
 800e950:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d109      	bne.n	800e96c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	32b0      	adds	r2, #176	@ 0xb0
 800e962:	2100      	movs	r1, #0
 800e964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e968:	2302      	movs	r3, #2
 800e96a:	e0d4      	b.n	800eb16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e96c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e970:	2100      	movs	r1, #0
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f003 fa69 	bl	8011e4a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	32b0      	adds	r2, #176	@ 0xb0
 800e982:	68f9      	ldr	r1, [r7, #12]
 800e984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	32b0      	adds	r2, #176	@ 0xb0
 800e992:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7c1b      	ldrb	r3, [r3, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d138      	bne.n	800ea16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e9a4:	4b5e      	ldr	r3, [pc, #376]	@ (800eb20 <USBD_CDC_Init+0x1e4>)
 800e9a6:	7819      	ldrb	r1, [r3, #0]
 800e9a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9ac:	2202      	movs	r2, #2
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f002 fb87 	bl	80110c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e9b4:	4b5a      	ldr	r3, [pc, #360]	@ (800eb20 <USBD_CDC_Init+0x1e4>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	f003 020f 	and.w	r2, r3, #15
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	4413      	add	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	440b      	add	r3, r1
 800e9c8:	3324      	adds	r3, #36	@ 0x24
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e9ce:	4b55      	ldr	r3, [pc, #340]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800e9d0:	7819      	ldrb	r1, [r3, #0]
 800e9d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f002 fb72 	bl	80110c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e9de:	4b51      	ldr	r3, [pc, #324]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 020f 	and.w	r2, r3, #15
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	440b      	add	r3, r1
 800e9f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e9fa:	4b4b      	ldr	r3, [pc, #300]	@ (800eb28 <USBD_CDC_Init+0x1ec>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	f003 020f 	and.w	r2, r3, #15
 800ea02:	6879      	ldr	r1, [r7, #4]
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	440b      	add	r3, r1
 800ea0e:	3326      	adds	r3, #38	@ 0x26
 800ea10:	2210      	movs	r2, #16
 800ea12:	801a      	strh	r2, [r3, #0]
 800ea14:	e035      	b.n	800ea82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ea16:	4b42      	ldr	r3, [pc, #264]	@ (800eb20 <USBD_CDC_Init+0x1e4>)
 800ea18:	7819      	ldrb	r1, [r3, #0]
 800ea1a:	2340      	movs	r3, #64	@ 0x40
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f002 fb4f 	bl	80110c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ea24:	4b3e      	ldr	r3, [pc, #248]	@ (800eb20 <USBD_CDC_Init+0x1e4>)
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	f003 020f 	and.w	r2, r3, #15
 800ea2c:	6879      	ldr	r1, [r7, #4]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	440b      	add	r3, r1
 800ea38:	3324      	adds	r3, #36	@ 0x24
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ea3e:	4b39      	ldr	r3, [pc, #228]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800ea40:	7819      	ldrb	r1, [r3, #0]
 800ea42:	2340      	movs	r3, #64	@ 0x40
 800ea44:	2202      	movs	r2, #2
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f002 fb3b 	bl	80110c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ea4c:	4b35      	ldr	r3, [pc, #212]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	f003 020f 	and.w	r2, r3, #15
 800ea54:	6879      	ldr	r1, [r7, #4]
 800ea56:	4613      	mov	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4413      	add	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	440b      	add	r3, r1
 800ea60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ea64:	2201      	movs	r2, #1
 800ea66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea68:	4b2f      	ldr	r3, [pc, #188]	@ (800eb28 <USBD_CDC_Init+0x1ec>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	f003 020f 	and.w	r2, r3, #15
 800ea70:	6879      	ldr	r1, [r7, #4]
 800ea72:	4613      	mov	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	440b      	add	r3, r1
 800ea7c:	3326      	adds	r3, #38	@ 0x26
 800ea7e:	2210      	movs	r2, #16
 800ea80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ea82:	4b29      	ldr	r3, [pc, #164]	@ (800eb28 <USBD_CDC_Init+0x1ec>)
 800ea84:	7819      	ldrb	r1, [r3, #0]
 800ea86:	2308      	movs	r3, #8
 800ea88:	2203      	movs	r2, #3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f002 fb19 	bl	80110c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ea90:	4b25      	ldr	r3, [pc, #148]	@ (800eb28 <USBD_CDC_Init+0x1ec>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 020f 	and.w	r2, r3, #15
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3324      	adds	r3, #36	@ 0x24
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	33b0      	adds	r3, #176	@ 0xb0
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4413      	add	r3, r2
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800eae0:	2302      	movs	r3, #2
 800eae2:	e018      	b.n	800eb16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	7c1b      	ldrb	r3, [r3, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10a      	bne.n	800eb02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eaec:	4b0d      	ldr	r3, [pc, #52]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800eaee:	7819      	ldrb	r1, [r3, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eaf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f002 fbd0 	bl	80112a0 <USBD_LL_PrepareReceive>
 800eb00:	e008      	b.n	800eb14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb02:	4b08      	ldr	r3, [pc, #32]	@ (800eb24 <USBD_CDC_Init+0x1e8>)
 800eb04:	7819      	ldrb	r1, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb0c:	2340      	movs	r3, #64	@ 0x40
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f002 fbc6 	bl	80112a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	24000097 	.word	0x24000097
 800eb24:	24000098 	.word	0x24000098
 800eb28:	24000099 	.word	0x24000099

0800eb2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800eb38:	4b3a      	ldr	r3, [pc, #232]	@ (800ec24 <USBD_CDC_DeInit+0xf8>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f002 fae5 	bl	801110e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800eb44:	4b37      	ldr	r3, [pc, #220]	@ (800ec24 <USBD_CDC_DeInit+0xf8>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	f003 020f 	and.w	r2, r3, #15
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	3324      	adds	r3, #36	@ 0x24
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800eb5e:	4b32      	ldr	r3, [pc, #200]	@ (800ec28 <USBD_CDC_DeInit+0xfc>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f002 fad2 	bl	801110e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800eb6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ec28 <USBD_CDC_DeInit+0xfc>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	f003 020f 	and.w	r2, r3, #15
 800eb72:	6879      	ldr	r1, [r7, #4]
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	440b      	add	r3, r1
 800eb7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eb82:	2200      	movs	r2, #0
 800eb84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800eb86:	4b29      	ldr	r3, [pc, #164]	@ (800ec2c <USBD_CDC_DeInit+0x100>)
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f002 fabe 	bl	801110e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800eb92:	4b26      	ldr	r3, [pc, #152]	@ (800ec2c <USBD_CDC_DeInit+0x100>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	f003 020f 	and.w	r2, r3, #15
 800eb9a:	6879      	ldr	r1, [r7, #4]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	440b      	add	r3, r1
 800eba6:	3324      	adds	r3, #36	@ 0x24
 800eba8:	2200      	movs	r2, #0
 800ebaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ebac:	4b1f      	ldr	r3, [pc, #124]	@ (800ec2c <USBD_CDC_DeInit+0x100>)
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	f003 020f 	and.w	r2, r3, #15
 800ebb4:	6879      	ldr	r1, [r7, #4]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	440b      	add	r3, r1
 800ebc0:	3326      	adds	r3, #38	@ 0x26
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	32b0      	adds	r2, #176	@ 0xb0
 800ebd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d01f      	beq.n	800ec18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	33b0      	adds	r3, #176	@ 0xb0
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4413      	add	r3, r2
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	32b0      	adds	r2, #176	@ 0xb0
 800ebf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f002 fb92 	bl	8011324 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	32b0      	adds	r2, #176	@ 0xb0
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	24000097 	.word	0x24000097
 800ec28:	24000098 	.word	0x24000098
 800ec2c:	24000099 	.word	0x24000099

0800ec30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	32b0      	adds	r2, #176	@ 0xb0
 800ec44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	e0bf      	b.n	800ede0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d050      	beq.n	800ed0e <USBD_CDC_Setup+0xde>
 800ec6c:	2b20      	cmp	r3, #32
 800ec6e:	f040 80af 	bne.w	800edd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	88db      	ldrh	r3, [r3, #6]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d03a      	beq.n	800ecf0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	b25b      	sxtb	r3, r3
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	da1b      	bge.n	800ecbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	33b0      	adds	r3, #176	@ 0xb0
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ec9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	88d2      	ldrh	r2, [r2, #6]
 800eca0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	88db      	ldrh	r3, [r3, #6]
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	bf28      	it	cs
 800ecaa:	2307      	movcs	r3, #7
 800ecac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	89fa      	ldrh	r2, [r7, #14]
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f001 fdbd 	bl	8010834 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ecba:	e090      	b.n	800edde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	785a      	ldrb	r2, [r3, #1]
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	88db      	ldrh	r3, [r3, #6]
 800ecca:	2b3f      	cmp	r3, #63	@ 0x3f
 800eccc:	d803      	bhi.n	800ecd6 <USBD_CDC_Setup+0xa6>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	88db      	ldrh	r3, [r3, #6]
 800ecd2:	b2da      	uxtb	r2, r3
 800ecd4:	e000      	b.n	800ecd8 <USBD_CDC_Setup+0xa8>
 800ecd6:	2240      	movs	r2, #64	@ 0x40
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ecde:	6939      	ldr	r1, [r7, #16]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ece6:	461a      	mov	r2, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f001 fdcf 	bl	801088c <USBD_CtlPrepareRx>
      break;
 800ecee:	e076      	b.n	800edde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	33b0      	adds	r3, #176	@ 0xb0
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	7850      	ldrb	r0, [r2, #1]
 800ed06:	2200      	movs	r2, #0
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	4798      	blx	r3
      break;
 800ed0c:	e067      	b.n	800edde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	2b0b      	cmp	r3, #11
 800ed14:	d851      	bhi.n	800edba <USBD_CDC_Setup+0x18a>
 800ed16:	a201      	add	r2, pc, #4	@ (adr r2, 800ed1c <USBD_CDC_Setup+0xec>)
 800ed18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1c:	0800ed4d 	.word	0x0800ed4d
 800ed20:	0800edc9 	.word	0x0800edc9
 800ed24:	0800edbb 	.word	0x0800edbb
 800ed28:	0800edbb 	.word	0x0800edbb
 800ed2c:	0800edbb 	.word	0x0800edbb
 800ed30:	0800edbb 	.word	0x0800edbb
 800ed34:	0800edbb 	.word	0x0800edbb
 800ed38:	0800edbb 	.word	0x0800edbb
 800ed3c:	0800edbb 	.word	0x0800edbb
 800ed40:	0800edbb 	.word	0x0800edbb
 800ed44:	0800ed77 	.word	0x0800ed77
 800ed48:	0800eda1 	.word	0x0800eda1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d107      	bne.n	800ed68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ed58:	f107 030a 	add.w	r3, r7, #10
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f001 fd67 	bl	8010834 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed66:	e032      	b.n	800edce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ed68:	6839      	ldr	r1, [r7, #0]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f001 fce5 	bl	801073a <USBD_CtlError>
            ret = USBD_FAIL;
 800ed70:	2303      	movs	r3, #3
 800ed72:	75fb      	strb	r3, [r7, #23]
          break;
 800ed74:	e02b      	b.n	800edce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b03      	cmp	r3, #3
 800ed80:	d107      	bne.n	800ed92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ed82:	f107 030d 	add.w	r3, r7, #13
 800ed86:	2201      	movs	r2, #1
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f001 fd52 	bl	8010834 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed90:	e01d      	b.n	800edce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ed92:	6839      	ldr	r1, [r7, #0]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f001 fcd0 	bl	801073a <USBD_CtlError>
            ret = USBD_FAIL;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ed9e:	e016      	b.n	800edce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b03      	cmp	r3, #3
 800edaa:	d00f      	beq.n	800edcc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800edac:	6839      	ldr	r1, [r7, #0]
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f001 fcc3 	bl	801073a <USBD_CtlError>
            ret = USBD_FAIL;
 800edb4:	2303      	movs	r3, #3
 800edb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800edb8:	e008      	b.n	800edcc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f001 fcbc 	bl	801073a <USBD_CtlError>
          ret = USBD_FAIL;
 800edc2:	2303      	movs	r3, #3
 800edc4:	75fb      	strb	r3, [r7, #23]
          break;
 800edc6:	e002      	b.n	800edce <USBD_CDC_Setup+0x19e>
          break;
 800edc8:	bf00      	nop
 800edca:	e008      	b.n	800edde <USBD_CDC_Setup+0x1ae>
          break;
 800edcc:	bf00      	nop
      }
      break;
 800edce:	e006      	b.n	800edde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800edd0:	6839      	ldr	r1, [r7, #0]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f001 fcb1 	bl	801073a <USBD_CtlError>
      ret = USBD_FAIL;
 800edd8:	2303      	movs	r3, #3
 800edda:	75fb      	strb	r3, [r7, #23]
      break;
 800eddc:	bf00      	nop
  }

  return (uint8_t)ret;
 800edde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	32b0      	adds	r2, #176	@ 0xb0
 800ee06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d101      	bne.n	800ee12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ee0e:	2303      	movs	r3, #3
 800ee10:	e065      	b.n	800eede <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	32b0      	adds	r2, #176	@ 0xb0
 800ee1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ee22:	78fb      	ldrb	r3, [r7, #3]
 800ee24:	f003 020f 	and.w	r2, r3, #15
 800ee28:	6879      	ldr	r1, [r7, #4]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4413      	add	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	440b      	add	r3, r1
 800ee34:	3318      	adds	r3, #24
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d02f      	beq.n	800ee9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	f003 020f 	and.w	r2, r3, #15
 800ee42:	6879      	ldr	r1, [r7, #4]
 800ee44:	4613      	mov	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	440b      	add	r3, r1
 800ee4e:	3318      	adds	r3, #24
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	78fb      	ldrb	r3, [r7, #3]
 800ee54:	f003 010f 	and.w	r1, r3, #15
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	00db      	lsls	r3, r3, #3
 800ee5e:	440b      	add	r3, r1
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4403      	add	r3, r0
 800ee64:	331c      	adds	r3, #28
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	fbb2 f1f3 	udiv	r1, r2, r3
 800ee6c:	fb01 f303 	mul.w	r3, r1, r3
 800ee70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d112      	bne.n	800ee9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	f003 020f 	and.w	r2, r3, #15
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	440b      	add	r3, r1
 800ee88:	3318      	adds	r3, #24
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ee8e:	78f9      	ldrb	r1, [r7, #3]
 800ee90:	2300      	movs	r3, #0
 800ee92:	2200      	movs	r2, #0
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f002 f9e2 	bl	801125e <USBD_LL_Transmit>
 800ee9a:	e01f      	b.n	800eedc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	33b0      	adds	r3, #176	@ 0xb0
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d010      	beq.n	800eedc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	33b0      	adds	r3, #176	@ 0xb0
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4413      	add	r3, r2
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800eed8:	78fa      	ldrb	r2, [r7, #3]
 800eeda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b084      	sub	sp, #16
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	460b      	mov	r3, r1
 800eef0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	32b0      	adds	r2, #176	@ 0xb0
 800eefc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	32b0      	adds	r2, #176	@ 0xb0
 800ef0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d101      	bne.n	800ef18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ef14:	2303      	movs	r3, #3
 800ef16:	e01a      	b.n	800ef4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef18:	78fb      	ldrb	r3, [r7, #3]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f002 f9e0 	bl	80112e2 <USBD_LL_GetRxDataSize>
 800ef22:	4602      	mov	r2, r0
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	33b0      	adds	r3, #176	@ 0xb0
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ef48:	4611      	mov	r1, r2
 800ef4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	32b0      	adds	r2, #176	@ 0xb0
 800ef68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef74:	2303      	movs	r3, #3
 800ef76:	e024      	b.n	800efc2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	33b0      	adds	r3, #176	@ 0xb0
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d019      	beq.n	800efc0 <USBD_CDC_EP0_RxReady+0x6a>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ef92:	2bff      	cmp	r3, #255	@ 0xff
 800ef94:	d014      	beq.n	800efc0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	33b0      	adds	r3, #176	@ 0xb0
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800efae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800efb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	22ff      	movs	r2, #255	@ 0xff
 800efbc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800efd4:	2182      	movs	r1, #130	@ 0x82
 800efd6:	4818      	ldr	r0, [pc, #96]	@ (800f038 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800efd8:	f000 fd4f 	bl	800fa7a <USBD_GetEpDesc>
 800efdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800efde:	2101      	movs	r1, #1
 800efe0:	4815      	ldr	r0, [pc, #84]	@ (800f038 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800efe2:	f000 fd4a 	bl	800fa7a <USBD_GetEpDesc>
 800efe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800efe8:	2181      	movs	r1, #129	@ 0x81
 800efea:	4813      	ldr	r0, [pc, #76]	@ (800f038 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800efec:	f000 fd45 	bl	800fa7a <USBD_GetEpDesc>
 800eff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d002      	beq.n	800effe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	2210      	movs	r2, #16
 800effc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d006      	beq.n	800f012 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	2200      	movs	r2, #0
 800f008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f00c:	711a      	strb	r2, [r3, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d006      	beq.n	800f026 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f020:	711a      	strb	r2, [r3, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2243      	movs	r2, #67	@ 0x43
 800f02a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f02c:	4b02      	ldr	r3, [pc, #8]	@ (800f038 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	24000054 	.word	0x24000054

0800f03c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f044:	2182      	movs	r1, #130	@ 0x82
 800f046:	4818      	ldr	r0, [pc, #96]	@ (800f0a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f048:	f000 fd17 	bl	800fa7a <USBD_GetEpDesc>
 800f04c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f04e:	2101      	movs	r1, #1
 800f050:	4815      	ldr	r0, [pc, #84]	@ (800f0a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f052:	f000 fd12 	bl	800fa7a <USBD_GetEpDesc>
 800f056:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f058:	2181      	movs	r1, #129	@ 0x81
 800f05a:	4813      	ldr	r0, [pc, #76]	@ (800f0a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f05c:	f000 fd0d 	bl	800fa7a <USBD_GetEpDesc>
 800f060:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	2210      	movs	r2, #16
 800f06c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d006      	beq.n	800f082 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	2200      	movs	r2, #0
 800f078:	711a      	strb	r2, [r3, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f042 0202 	orr.w	r2, r2, #2
 800f080:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d006      	beq.n	800f096 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	711a      	strb	r2, [r3, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	f042 0202 	orr.w	r2, r2, #2
 800f094:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2243      	movs	r2, #67	@ 0x43
 800f09a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f09c:	4b02      	ldr	r3, [pc, #8]	@ (800f0a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	24000054 	.word	0x24000054

0800f0ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f0b4:	2182      	movs	r1, #130	@ 0x82
 800f0b6:	4818      	ldr	r0, [pc, #96]	@ (800f118 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0b8:	f000 fcdf 	bl	800fa7a <USBD_GetEpDesc>
 800f0bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f0be:	2101      	movs	r1, #1
 800f0c0:	4815      	ldr	r0, [pc, #84]	@ (800f118 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0c2:	f000 fcda 	bl	800fa7a <USBD_GetEpDesc>
 800f0c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f0c8:	2181      	movs	r1, #129	@ 0x81
 800f0ca:	4813      	ldr	r0, [pc, #76]	@ (800f118 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0cc:	f000 fcd5 	bl	800fa7a <USBD_GetEpDesc>
 800f0d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	2210      	movs	r2, #16
 800f0dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d006      	beq.n	800f0f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f0ec:	711a      	strb	r2, [r3, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d006      	beq.n	800f106 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f100:	711a      	strb	r2, [r3, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2243      	movs	r2, #67	@ 0x43
 800f10a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f10c:	4b02      	ldr	r3, [pc, #8]	@ (800f118 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	24000054 	.word	0x24000054

0800f11c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	220a      	movs	r2, #10
 800f128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f12a:	4b03      	ldr	r3, [pc, #12]	@ (800f138 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr
 800f138:	24000010 	.word	0x24000010

0800f13c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e009      	b.n	800f164 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	33b0      	adds	r3, #176	@ 0xb0
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	4413      	add	r3, r2
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f170:	b480      	push	{r7}
 800f172:	b087      	sub	sp, #28
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	32b0      	adds	r2, #176	@ 0xb0
 800f186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f18a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f192:	2303      	movs	r3, #3
 800f194:	e008      	b.n	800f1a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	68ba      	ldr	r2, [r7, #8]
 800f19a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	371c      	adds	r7, #28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	32b0      	adds	r2, #176	@ 0xb0
 800f1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f1d4:	2303      	movs	r3, #3
 800f1d6:	e004      	b.n	800f1e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3714      	adds	r7, #20
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	32b0      	adds	r2, #176	@ 0xb0
 800f202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f206:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f208:	2301      	movs	r3, #1
 800f20a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f212:	2303      	movs	r3, #3
 800f214:	e025      	b.n	800f262 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d11f      	bne.n	800f260 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2201      	movs	r2, #1
 800f224:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f228:	4b10      	ldr	r3, [pc, #64]	@ (800f26c <USBD_CDC_TransmitPacket+0x7c>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f003 020f 	and.w	r2, r3, #15
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	4613      	mov	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4413      	add	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4403      	add	r3, r0
 800f242:	3318      	adds	r3, #24
 800f244:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f246:	4b09      	ldr	r3, [pc, #36]	@ (800f26c <USBD_CDC_TransmitPacket+0x7c>)
 800f248:	7819      	ldrb	r1, [r3, #0]
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f002 f801 	bl	801125e <USBD_LL_Transmit>

    ret = USBD_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f260:	7bfb      	ldrb	r3, [r7, #15]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	24000097 	.word	0x24000097

0800f270 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	32b0      	adds	r2, #176	@ 0xb0
 800f282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f286:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	32b0      	adds	r2, #176	@ 0xb0
 800f292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e018      	b.n	800f2d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	7c1b      	ldrb	r3, [r3, #16]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10a      	bne.n	800f2bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f2d8 <USBD_CDC_ReceivePacket+0x68>)
 800f2a8:	7819      	ldrb	r1, [r3, #0]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f2b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f001 fff3 	bl	80112a0 <USBD_LL_PrepareReceive>
 800f2ba:	e008      	b.n	800f2ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f2bc:	4b06      	ldr	r3, [pc, #24]	@ (800f2d8 <USBD_CDC_ReceivePacket+0x68>)
 800f2be:	7819      	ldrb	r1, [r3, #0]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f2c6:	2340      	movs	r3, #64	@ 0x40
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f001 ffe9 	bl	80112a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	24000098 	.word	0x24000098

0800f2dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b086      	sub	sp, #24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	e01f      	b.n	800f334 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	79fa      	ldrb	r2, [r7, #7]
 800f326:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f001 fe5d 	bl	8010fe8 <USBD_LL_Init>
 800f32e:	4603      	mov	r3, r0
 800f330:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f332:	7dfb      	ldrb	r3, [r7, #23]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f346:	2300      	movs	r3, #0
 800f348:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d101      	bne.n	800f354 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f350:	2303      	movs	r3, #3
 800f352:	e025      	b.n	800f3a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	32ae      	adds	r2, #174	@ 0xae
 800f366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00f      	beq.n	800f390 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	32ae      	adds	r2, #174	@ 0xae
 800f37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f380:	f107 020e 	add.w	r2, r7, #14
 800f384:	4610      	mov	r0, r2
 800f386:	4798      	blx	r3
 800f388:	4602      	mov	r2, r0
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f001 fe6b 	bl	801108c <USBD_LL_Start>
 800f3b6:	4603      	mov	r3, r0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f3c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	460b      	mov	r3, r1
 800f3e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d009      	beq.n	800f404 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	78fa      	ldrb	r2, [r7, #3]
 800f3fa:	4611      	mov	r1, r2
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	4798      	blx	r3
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b084      	sub	sp, #16
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	460b      	mov	r3, r1
 800f418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	78fa      	ldrb	r2, [r7, #3]
 800f428:	4611      	mov	r1, r2
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	4798      	blx	r3
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d001      	beq.n	800f438 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f434:	2303      	movs	r3, #3
 800f436:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f438:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	4618      	mov	r0, r3
 800f456:	f001 f936 	bl	80106c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f468:	461a      	mov	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f476:	f003 031f 	and.w	r3, r3, #31
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d01a      	beq.n	800f4b4 <USBD_LL_SetupStage+0x72>
 800f47e:	2b02      	cmp	r3, #2
 800f480:	d822      	bhi.n	800f4c8 <USBD_LL_SetupStage+0x86>
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <USBD_LL_SetupStage+0x4a>
 800f486:	2b01      	cmp	r3, #1
 800f488:	d00a      	beq.n	800f4a0 <USBD_LL_SetupStage+0x5e>
 800f48a:	e01d      	b.n	800f4c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f492:	4619      	mov	r1, r3
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fb63 	bl	800fb60 <USBD_StdDevReq>
 800f49a:	4603      	mov	r3, r0
 800f49c:	73fb      	strb	r3, [r7, #15]
      break;
 800f49e:	e020      	b.n	800f4e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 fbcb 	bl	800fc44 <USBD_StdItfReq>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	73fb      	strb	r3, [r7, #15]
      break;
 800f4b2:	e016      	b.n	800f4e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 fc2d 	bl	800fd1c <USBD_StdEPReq>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	73fb      	strb	r3, [r7, #15]
      break;
 800f4c6:	e00c      	b.n	800f4e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f4ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f001 fe38 	bl	801114c <USBD_LL_StallEP>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e0:	bf00      	nop
  }

  return ret;
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b086      	sub	sp, #24
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f4fe:	7afb      	ldrb	r3, [r7, #11]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d16e      	bne.n	800f5e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f50a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f512:	2b03      	cmp	r3, #3
 800f514:	f040 8098 	bne.w	800f648 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	429a      	cmp	r2, r3
 800f522:	d913      	bls.n	800f54c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	689a      	ldr	r2, [r3, #8]
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	1ad2      	subs	r2, r2, r3
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	68da      	ldr	r2, [r3, #12]
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	4293      	cmp	r3, r2
 800f53c:	bf28      	it	cs
 800f53e:	4613      	movcs	r3, r2
 800f540:	461a      	mov	r2, r3
 800f542:	6879      	ldr	r1, [r7, #4]
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f001 f9be 	bl	80108c6 <USBD_CtlContinueRx>
 800f54a:	e07d      	b.n	800f648 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f552:	f003 031f 	and.w	r3, r3, #31
 800f556:	2b02      	cmp	r3, #2
 800f558:	d014      	beq.n	800f584 <USBD_LL_DataOutStage+0x98>
 800f55a:	2b02      	cmp	r3, #2
 800f55c:	d81d      	bhi.n	800f59a <USBD_LL_DataOutStage+0xae>
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d002      	beq.n	800f568 <USBD_LL_DataOutStage+0x7c>
 800f562:	2b01      	cmp	r3, #1
 800f564:	d003      	beq.n	800f56e <USBD_LL_DataOutStage+0x82>
 800f566:	e018      	b.n	800f59a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f568:	2300      	movs	r3, #0
 800f56a:	75bb      	strb	r3, [r7, #22]
            break;
 800f56c:	e018      	b.n	800f5a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f574:	b2db      	uxtb	r3, r3
 800f576:	4619      	mov	r1, r3
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 fa64 	bl	800fa46 <USBD_CoreFindIF>
 800f57e:	4603      	mov	r3, r0
 800f580:	75bb      	strb	r3, [r7, #22]
            break;
 800f582:	e00d      	b.n	800f5a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	4619      	mov	r1, r3
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 fa66 	bl	800fa60 <USBD_CoreFindEP>
 800f594:	4603      	mov	r3, r0
 800f596:	75bb      	strb	r3, [r7, #22]
            break;
 800f598:	e002      	b.n	800f5a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	75bb      	strb	r3, [r7, #22]
            break;
 800f59e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f5a0:	7dbb      	ldrb	r3, [r7, #22]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d119      	bne.n	800f5da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b03      	cmp	r3, #3
 800f5b0:	d113      	bne.n	800f5da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f5b2:	7dba      	ldrb	r2, [r7, #22]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	32ae      	adds	r2, #174	@ 0xae
 800f5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00b      	beq.n	800f5da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f5c2:	7dba      	ldrb	r2, [r7, #22]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f5ca:	7dba      	ldrb	r2, [r7, #22]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	32ae      	adds	r2, #174	@ 0xae
 800f5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f001 f984 	bl	80108e8 <USBD_CtlSendStatus>
 800f5e0:	e032      	b.n	800f648 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f5e2:	7afb      	ldrb	r3, [r7, #11]
 800f5e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 fa37 	bl	800fa60 <USBD_CoreFindEP>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5f6:	7dbb      	ldrb	r3, [r7, #22]
 800f5f8:	2bff      	cmp	r3, #255	@ 0xff
 800f5fa:	d025      	beq.n	800f648 <USBD_LL_DataOutStage+0x15c>
 800f5fc:	7dbb      	ldrb	r3, [r7, #22]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d122      	bne.n	800f648 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b03      	cmp	r3, #3
 800f60c:	d117      	bne.n	800f63e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f60e:	7dba      	ldrb	r2, [r7, #22]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	32ae      	adds	r2, #174	@ 0xae
 800f614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f618:	699b      	ldr	r3, [r3, #24]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d00f      	beq.n	800f63e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f61e:	7dba      	ldrb	r2, [r7, #22]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f626:	7dba      	ldrb	r2, [r7, #22]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	32ae      	adds	r2, #174	@ 0xae
 800f62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	7afa      	ldrb	r2, [r7, #11]
 800f634:	4611      	mov	r1, r2
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	4798      	blx	r3
 800f63a:	4603      	mov	r3, r0
 800f63c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f644:	7dfb      	ldrb	r3, [r7, #23]
 800f646:	e000      	b.n	800f64a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3718      	adds	r7, #24
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b086      	sub	sp, #24
 800f656:	af00      	add	r7, sp, #0
 800f658:	60f8      	str	r0, [r7, #12]
 800f65a:	460b      	mov	r3, r1
 800f65c:	607a      	str	r2, [r7, #4]
 800f65e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f660:	7afb      	ldrb	r3, [r7, #11]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d16f      	bne.n	800f746 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	3314      	adds	r3, #20
 800f66a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f672:	2b02      	cmp	r3, #2
 800f674:	d15a      	bne.n	800f72c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	689a      	ldr	r2, [r3, #8]
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d914      	bls.n	800f6ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	689a      	ldr	r2, [r3, #8]
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	1ad2      	subs	r2, r2, r3
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	461a      	mov	r2, r3
 800f696:	6879      	ldr	r1, [r7, #4]
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f001 f8e6 	bl	801086a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f001 fdfb 	bl	80112a0 <USBD_LL_PrepareReceive>
 800f6aa:	e03f      	b.n	800f72c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	68da      	ldr	r2, [r3, #12]
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	689b      	ldr	r3, [r3, #8]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d11c      	bne.n	800f6f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d316      	bcc.n	800f6f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	685a      	ldr	r2, [r3, #4]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d20f      	bcs.n	800f6f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f001 f8c7 	bl	801086a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f001 fdd8 	bl	80112a0 <USBD_LL_PrepareReceive>
 800f6f0:	e01c      	b.n	800f72c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	2b03      	cmp	r3, #3
 800f6fc:	d10f      	bne.n	800f71e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d009      	beq.n	800f71e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f71e:	2180      	movs	r1, #128	@ 0x80
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f001 fd13 	bl	801114c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f001 f8f1 	bl	801090e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d03a      	beq.n	800f7ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f7ff fe42 	bl	800f3c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f744:	e032      	b.n	800f7ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f746:	7afb      	ldrb	r3, [r7, #11]
 800f748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	4619      	mov	r1, r3
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f000 f985 	bl	800fa60 <USBD_CoreFindEP>
 800f756:	4603      	mov	r3, r0
 800f758:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f75a:	7dfb      	ldrb	r3, [r7, #23]
 800f75c:	2bff      	cmp	r3, #255	@ 0xff
 800f75e:	d025      	beq.n	800f7ac <USBD_LL_DataInStage+0x15a>
 800f760:	7dfb      	ldrb	r3, [r7, #23]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d122      	bne.n	800f7ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d11c      	bne.n	800f7ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f772:	7dfa      	ldrb	r2, [r7, #23]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	32ae      	adds	r2, #174	@ 0xae
 800f778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d014      	beq.n	800f7ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f782:	7dfa      	ldrb	r2, [r7, #23]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f78a:	7dfa      	ldrb	r2, [r7, #23]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	32ae      	adds	r2, #174	@ 0xae
 800f790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f794:	695b      	ldr	r3, [r3, #20]
 800f796:	7afa      	ldrb	r2, [r7, #11]
 800f798:	4611      	mov	r1, r2
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	4798      	blx	r3
 800f79e:	4603      	mov	r3, r0
 800f7a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f7a2:	7dbb      	ldrb	r3, [r7, #22]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f7a8:	7dbb      	ldrb	r3, [r7, #22]
 800f7aa:	e000      	b.n	800f7ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3718      	adds	r7, #24
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b084      	sub	sp, #16
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d014      	beq.n	800f81c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00e      	beq.n	800f81c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	6852      	ldr	r2, [r2, #4]
 800f80a:	b2d2      	uxtb	r2, r2
 800f80c:	4611      	mov	r1, r2
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	4798      	blx	r3
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d001      	beq.n	800f81c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f818:	2303      	movs	r3, #3
 800f81a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f81c:	2340      	movs	r3, #64	@ 0x40
 800f81e:	2200      	movs	r2, #0
 800f820:	2100      	movs	r1, #0
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f001 fc4d 	bl	80110c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2240      	movs	r2, #64	@ 0x40
 800f834:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f838:	2340      	movs	r3, #64	@ 0x40
 800f83a:	2200      	movs	r2, #0
 800f83c:	2180      	movs	r1, #128	@ 0x80
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f001 fc3f 	bl	80110c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2240      	movs	r2, #64	@ 0x40
 800f84e:	621a      	str	r2, [r3, #32]

  return ret;
 800f850:	7bfb      	ldrb	r3, [r7, #15]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b083      	sub	sp, #12
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
 800f862:	460b      	mov	r3, r1
 800f864:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	78fa      	ldrb	r2, [r7, #3]
 800f86a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b04      	cmp	r3, #4
 800f88c:	d006      	beq.n	800f89c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f894:	b2da      	uxtb	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2204      	movs	r2, #4
 800f8a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f8b2:	b480      	push	{r7}
 800f8b4:	b083      	sub	sp, #12
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b04      	cmp	r3, #4
 800f8c4:	d106      	bne.n	800f8d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d110      	bne.n	800f918 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00b      	beq.n	800f918 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f906:	69db      	ldr	r3, [r3, #28]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f912:	69db      	ldr	r3, [r3, #28]
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	460b      	mov	r3, r1
 800f92c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	32ae      	adds	r2, #174	@ 0xae
 800f938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d101      	bne.n	800f944 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f940:	2303      	movs	r3, #3
 800f942:	e01c      	b.n	800f97e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d115      	bne.n	800f97c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	32ae      	adds	r2, #174	@ 0xae
 800f95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00b      	beq.n	800f97c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	32ae      	adds	r2, #174	@ 0xae
 800f96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f972:	6a1b      	ldr	r3, [r3, #32]
 800f974:	78fa      	ldrb	r2, [r7, #3]
 800f976:	4611      	mov	r1, r2
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b082      	sub	sp, #8
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	460b      	mov	r3, r1
 800f990:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	32ae      	adds	r2, #174	@ 0xae
 800f99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d101      	bne.n	800f9a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	e01c      	b.n	800f9e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	d115      	bne.n	800f9e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	32ae      	adds	r2, #174	@ 0xae
 800f9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d00b      	beq.n	800f9e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	32ae      	adds	r2, #174	@ 0xae
 800f9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d8:	78fa      	ldrb	r2, [r7, #3]
 800f9da:	4611      	mov	r1, r2
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	b083      	sub	sp, #12
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00e      	beq.n	800fa3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	6852      	ldr	r2, [r2, #4]
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	4798      	blx	r3
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fa38:	2303      	movs	r3, #3
 800fa3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fa46:	b480      	push	{r7}
 800fa48:	b083      	sub	sp, #12
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	460b      	mov	r3, r1
 800fa50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fa52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fa6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	370c      	adds	r7, #12
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b086      	sub	sp, #24
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
 800fa82:	460b      	mov	r3, r1
 800fa84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	885b      	ldrh	r3, [r3, #2]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	7812      	ldrb	r2, [r2, #0]
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d91f      	bls.n	800fae0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800faa6:	e013      	b.n	800fad0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800faa8:	f107 030a 	add.w	r3, r7, #10
 800faac:	4619      	mov	r1, r3
 800faae:	6978      	ldr	r0, [r7, #20]
 800fab0:	f000 f81b 	bl	800faea <USBD_GetNextDesc>
 800fab4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	785b      	ldrb	r3, [r3, #1]
 800faba:	2b05      	cmp	r3, #5
 800fabc:	d108      	bne.n	800fad0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	789b      	ldrb	r3, [r3, #2]
 800fac6:	78fa      	ldrb	r2, [r7, #3]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d008      	beq.n	800fade <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800facc:	2300      	movs	r3, #0
 800face:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	885b      	ldrh	r3, [r3, #2]
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	897b      	ldrh	r3, [r7, #10]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d8e5      	bhi.n	800faa8 <USBD_GetEpDesc+0x2e>
 800fadc:	e000      	b.n	800fae0 <USBD_GetEpDesc+0x66>
          break;
 800fade:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fae0:	693b      	ldr	r3, [r7, #16]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800faea:	b480      	push	{r7}
 800faec:	b085      	sub	sp, #20
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	7812      	ldrb	r2, [r2, #0]
 800fb00:	4413      	add	r3, r2
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4413      	add	r3, r2
 800fb12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fb14:	68fb      	ldr	r3, [r7, #12]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3714      	adds	r7, #20
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fb22:	b480      	push	{r7}
 800fb24:	b087      	sub	sp, #28
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	3301      	adds	r3, #1
 800fb38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fb40:	8a3b      	ldrh	r3, [r7, #16]
 800fb42:	021b      	lsls	r3, r3, #8
 800fb44:	b21a      	sxth	r2, r3
 800fb46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	b21b      	sxth	r3, r3
 800fb4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fb50:	89fb      	ldrh	r3, [r7, #14]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	371c      	adds	r7, #28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr
	...

0800fb60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb76:	2b40      	cmp	r3, #64	@ 0x40
 800fb78:	d005      	beq.n	800fb86 <USBD_StdDevReq+0x26>
 800fb7a:	2b40      	cmp	r3, #64	@ 0x40
 800fb7c:	d857      	bhi.n	800fc2e <USBD_StdDevReq+0xce>
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00f      	beq.n	800fba2 <USBD_StdDevReq+0x42>
 800fb82:	2b20      	cmp	r3, #32
 800fb84:	d153      	bne.n	800fc2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	32ae      	adds	r2, #174	@ 0xae
 800fb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	4798      	blx	r3
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800fba0:	e04a      	b.n	800fc38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	785b      	ldrb	r3, [r3, #1]
 800fba6:	2b09      	cmp	r3, #9
 800fba8:	d83b      	bhi.n	800fc22 <USBD_StdDevReq+0xc2>
 800fbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb0 <USBD_StdDevReq+0x50>)
 800fbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb0:	0800fc05 	.word	0x0800fc05
 800fbb4:	0800fc19 	.word	0x0800fc19
 800fbb8:	0800fc23 	.word	0x0800fc23
 800fbbc:	0800fc0f 	.word	0x0800fc0f
 800fbc0:	0800fc23 	.word	0x0800fc23
 800fbc4:	0800fbe3 	.word	0x0800fbe3
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fc23 	.word	0x0800fc23
 800fbd0:	0800fbfb 	.word	0x0800fbfb
 800fbd4:	0800fbed 	.word	0x0800fbed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 fa3c 	bl	8010058 <USBD_GetDescriptor>
          break;
 800fbe0:	e024      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fbcb 	bl	8010380 <USBD_SetAddress>
          break;
 800fbea:	e01f      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fbec:	6839      	ldr	r1, [r7, #0]
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 fc0a 	bl	8010408 <USBD_SetConfig>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73fb      	strb	r3, [r7, #15]
          break;
 800fbf8:	e018      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fbfa:	6839      	ldr	r1, [r7, #0]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fcad 	bl	801055c <USBD_GetConfig>
          break;
 800fc02:	e013      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fc04:	6839      	ldr	r1, [r7, #0]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fcde 	bl	80105c8 <USBD_GetStatus>
          break;
 800fc0c:	e00e      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 fd0d 	bl	8010630 <USBD_SetFeature>
          break;
 800fc16:	e009      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fc18:	6839      	ldr	r1, [r7, #0]
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fd31 	bl	8010682 <USBD_ClrFeature>
          break;
 800fc20:	e004      	b.n	800fc2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fc22:	6839      	ldr	r1, [r7, #0]
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 fd88 	bl	801073a <USBD_CtlError>
          break;
 800fc2a:	bf00      	nop
      }
      break;
 800fc2c:	e004      	b.n	800fc38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fd82 	bl	801073a <USBD_CtlError>
      break;
 800fc36:	bf00      	nop
  }

  return ret;
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop

0800fc44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc5a:	2b40      	cmp	r3, #64	@ 0x40
 800fc5c:	d005      	beq.n	800fc6a <USBD_StdItfReq+0x26>
 800fc5e:	2b40      	cmp	r3, #64	@ 0x40
 800fc60:	d852      	bhi.n	800fd08 <USBD_StdItfReq+0xc4>
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <USBD_StdItfReq+0x26>
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	d14e      	bne.n	800fd08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	3b01      	subs	r3, #1
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d840      	bhi.n	800fcfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	889b      	ldrh	r3, [r3, #4]
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d836      	bhi.n	800fcf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	889b      	ldrh	r3, [r3, #4]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff fedb 	bl	800fa46 <USBD_CoreFindIF>
 800fc90:	4603      	mov	r3, r0
 800fc92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	2bff      	cmp	r3, #255	@ 0xff
 800fc98:	d01d      	beq.n	800fcd6 <USBD_StdItfReq+0x92>
 800fc9a:	7bbb      	ldrb	r3, [r7, #14]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d11a      	bne.n	800fcd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fca0:	7bba      	ldrb	r2, [r7, #14]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	32ae      	adds	r2, #174	@ 0xae
 800fca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00f      	beq.n	800fcd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fcb0:	7bba      	ldrb	r2, [r7, #14]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fcb8:	7bba      	ldrb	r2, [r7, #14]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	32ae      	adds	r2, #174	@ 0xae
 800fcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	6839      	ldr	r1, [r7, #0]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	4798      	blx	r3
 800fcca:	4603      	mov	r3, r0
 800fccc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fcce:	e004      	b.n	800fcda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fcd4:	e001      	b.n	800fcda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fcd6:	2303      	movs	r3, #3
 800fcd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	88db      	ldrh	r3, [r3, #6]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d110      	bne.n	800fd04 <USBD_StdItfReq+0xc0>
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d10d      	bne.n	800fd04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fdfd 	bl	80108e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fcee:	e009      	b.n	800fd04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fcf0:	6839      	ldr	r1, [r7, #0]
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fd21 	bl	801073a <USBD_CtlError>
          break;
 800fcf8:	e004      	b.n	800fd04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fd1c 	bl	801073a <USBD_CtlError>
          break;
 800fd02:	e000      	b.n	800fd06 <USBD_StdItfReq+0xc2>
          break;
 800fd04:	bf00      	nop
      }
      break;
 800fd06:	e004      	b.n	800fd12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fd08:	6839      	ldr	r1, [r7, #0]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 fd15 	bl	801073a <USBD_CtlError>
      break;
 800fd10:	bf00      	nop
  }

  return ret;
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	889b      	ldrh	r3, [r3, #4]
 800fd2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fd38:	2b40      	cmp	r3, #64	@ 0x40
 800fd3a:	d007      	beq.n	800fd4c <USBD_StdEPReq+0x30>
 800fd3c:	2b40      	cmp	r3, #64	@ 0x40
 800fd3e:	f200 817f 	bhi.w	8010040 <USBD_StdEPReq+0x324>
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d02a      	beq.n	800fd9c <USBD_StdEPReq+0x80>
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	f040 817a 	bne.w	8010040 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fd4c:	7bbb      	ldrb	r3, [r7, #14]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff fe85 	bl	800fa60 <USBD_CoreFindEP>
 800fd56:	4603      	mov	r3, r0
 800fd58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd5a:	7b7b      	ldrb	r3, [r7, #13]
 800fd5c:	2bff      	cmp	r3, #255	@ 0xff
 800fd5e:	f000 8174 	beq.w	801004a <USBD_StdEPReq+0x32e>
 800fd62:	7b7b      	ldrb	r3, [r7, #13]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f040 8170 	bne.w	801004a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fd6a:	7b7a      	ldrb	r2, [r7, #13]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fd72:	7b7a      	ldrb	r2, [r7, #13]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	32ae      	adds	r2, #174	@ 0xae
 800fd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 8163 	beq.w	801004a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fd84:	7b7a      	ldrb	r2, [r7, #13]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	32ae      	adds	r2, #174	@ 0xae
 800fd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	4798      	blx	r3
 800fd96:	4603      	mov	r3, r0
 800fd98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fd9a:	e156      	b.n	801004a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	785b      	ldrb	r3, [r3, #1]
 800fda0:	2b03      	cmp	r3, #3
 800fda2:	d008      	beq.n	800fdb6 <USBD_StdEPReq+0x9a>
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	f300 8145 	bgt.w	8010034 <USBD_StdEPReq+0x318>
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 809b 	beq.w	800fee6 <USBD_StdEPReq+0x1ca>
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d03c      	beq.n	800fe2e <USBD_StdEPReq+0x112>
 800fdb4:	e13e      	b.n	8010034 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	2b02      	cmp	r3, #2
 800fdc0:	d002      	beq.n	800fdc8 <USBD_StdEPReq+0xac>
 800fdc2:	2b03      	cmp	r3, #3
 800fdc4:	d016      	beq.n	800fdf4 <USBD_StdEPReq+0xd8>
 800fdc6:	e02c      	b.n	800fe22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fdc8:	7bbb      	ldrb	r3, [r7, #14]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00d      	beq.n	800fdea <USBD_StdEPReq+0xce>
 800fdce:	7bbb      	ldrb	r3, [r7, #14]
 800fdd0:	2b80      	cmp	r3, #128	@ 0x80
 800fdd2:	d00a      	beq.n	800fdea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f001 f9b7 	bl	801114c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdde:	2180      	movs	r1, #128	@ 0x80
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f001 f9b3 	bl	801114c <USBD_LL_StallEP>
 800fde6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fde8:	e020      	b.n	800fe2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fdea:	6839      	ldr	r1, [r7, #0]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fca4 	bl	801073a <USBD_CtlError>
              break;
 800fdf2:	e01b      	b.n	800fe2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	885b      	ldrh	r3, [r3, #2]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10e      	bne.n	800fe1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fdfc:	7bbb      	ldrb	r3, [r7, #14]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00b      	beq.n	800fe1a <USBD_StdEPReq+0xfe>
 800fe02:	7bbb      	ldrb	r3, [r7, #14]
 800fe04:	2b80      	cmp	r3, #128	@ 0x80
 800fe06:	d008      	beq.n	800fe1a <USBD_StdEPReq+0xfe>
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	88db      	ldrh	r3, [r3, #6]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d104      	bne.n	800fe1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe10:	7bbb      	ldrb	r3, [r7, #14]
 800fe12:	4619      	mov	r1, r3
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f001 f999 	bl	801114c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 fd64 	bl	80108e8 <USBD_CtlSendStatus>

              break;
 800fe20:	e004      	b.n	800fe2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 fc88 	bl	801073a <USBD_CtlError>
              break;
 800fe2a:	bf00      	nop
          }
          break;
 800fe2c:	e107      	b.n	801003e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d002      	beq.n	800fe40 <USBD_StdEPReq+0x124>
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d016      	beq.n	800fe6c <USBD_StdEPReq+0x150>
 800fe3e:	e04b      	b.n	800fed8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe40:	7bbb      	ldrb	r3, [r7, #14]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00d      	beq.n	800fe62 <USBD_StdEPReq+0x146>
 800fe46:	7bbb      	ldrb	r3, [r7, #14]
 800fe48:	2b80      	cmp	r3, #128	@ 0x80
 800fe4a:	d00a      	beq.n	800fe62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe4c:	7bbb      	ldrb	r3, [r7, #14]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f001 f97b 	bl	801114c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe56:	2180      	movs	r1, #128	@ 0x80
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f001 f977 	bl	801114c <USBD_LL_StallEP>
 800fe5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe60:	e040      	b.n	800fee4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fc68 	bl	801073a <USBD_CtlError>
              break;
 800fe6a:	e03b      	b.n	800fee4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	885b      	ldrh	r3, [r3, #2]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d136      	bne.n	800fee2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
 800fe76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d004      	beq.n	800fe88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fe7e:	7bbb      	ldrb	r3, [r7, #14]
 800fe80:	4619      	mov	r1, r3
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f001 f981 	bl	801118a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fd2d 	bl	80108e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fe8e:	7bbb      	ldrb	r3, [r7, #14]
 800fe90:	4619      	mov	r1, r3
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fde4 	bl	800fa60 <USBD_CoreFindEP>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe9c:	7b7b      	ldrb	r3, [r7, #13]
 800fe9e:	2bff      	cmp	r3, #255	@ 0xff
 800fea0:	d01f      	beq.n	800fee2 <USBD_StdEPReq+0x1c6>
 800fea2:	7b7b      	ldrb	r3, [r7, #13]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d11c      	bne.n	800fee2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fea8:	7b7a      	ldrb	r2, [r7, #13]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800feb0:	7b7a      	ldrb	r2, [r7, #13]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	32ae      	adds	r2, #174	@ 0xae
 800feb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d010      	beq.n	800fee2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fec0:	7b7a      	ldrb	r2, [r7, #13]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	32ae      	adds	r2, #174	@ 0xae
 800fec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	6839      	ldr	r1, [r7, #0]
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	4798      	blx	r3
 800fed2:	4603      	mov	r3, r0
 800fed4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fed6:	e004      	b.n	800fee2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fed8:	6839      	ldr	r1, [r7, #0]
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fc2d 	bl	801073a <USBD_CtlError>
              break;
 800fee0:	e000      	b.n	800fee4 <USBD_StdEPReq+0x1c8>
              break;
 800fee2:	bf00      	nop
          }
          break;
 800fee4:	e0ab      	b.n	801003e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d002      	beq.n	800fef8 <USBD_StdEPReq+0x1dc>
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d032      	beq.n	800ff5c <USBD_StdEPReq+0x240>
 800fef6:	e097      	b.n	8010028 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d007      	beq.n	800ff0e <USBD_StdEPReq+0x1f2>
 800fefe:	7bbb      	ldrb	r3, [r7, #14]
 800ff00:	2b80      	cmp	r3, #128	@ 0x80
 800ff02:	d004      	beq.n	800ff0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 fc17 	bl	801073a <USBD_CtlError>
                break;
 800ff0c:	e091      	b.n	8010032 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	da0b      	bge.n	800ff2e <USBD_StdEPReq+0x212>
 800ff16:	7bbb      	ldrb	r3, [r7, #14]
 800ff18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	009b      	lsls	r3, r3, #2
 800ff20:	4413      	add	r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	3310      	adds	r3, #16
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	4413      	add	r3, r2
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	e00b      	b.n	800ff46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff2e:	7bbb      	ldrb	r3, [r7, #14]
 800ff30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff34:	4613      	mov	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4413      	add	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	4413      	add	r3, r2
 800ff44:	3304      	adds	r3, #4
 800ff46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	2202      	movs	r2, #2
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 fc6d 	bl	8010834 <USBD_CtlSendData>
              break;
 800ff5a:	e06a      	b.n	8010032 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ff5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	da11      	bge.n	800ff88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	f003 020f 	and.w	r2, r3, #15
 800ff6a:	6879      	ldr	r1, [r7, #4]
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4413      	add	r3, r2
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	440b      	add	r3, r1
 800ff76:	3324      	adds	r3, #36	@ 0x24
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d117      	bne.n	800ffae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fbda 	bl	801073a <USBD_CtlError>
                  break;
 800ff86:	e054      	b.n	8010032 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ff88:	7bbb      	ldrb	r3, [r7, #14]
 800ff8a:	f003 020f 	and.w	r2, r3, #15
 800ff8e:	6879      	ldr	r1, [r7, #4]
 800ff90:	4613      	mov	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4413      	add	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	440b      	add	r3, r1
 800ff9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d104      	bne.n	800ffae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ffa4:	6839      	ldr	r1, [r7, #0]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fbc7 	bl	801073a <USBD_CtlError>
                  break;
 800ffac:	e041      	b.n	8010032 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da0b      	bge.n	800ffce <USBD_StdEPReq+0x2b2>
 800ffb6:	7bbb      	ldrb	r3, [r7, #14]
 800ffb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	3310      	adds	r3, #16
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	4413      	add	r3, r2
 800ffca:	3304      	adds	r3, #4
 800ffcc:	e00b      	b.n	800ffe6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
 800ffd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	4413      	add	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ffe8:	7bbb      	ldrb	r3, [r7, #14]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <USBD_StdEPReq+0x2d8>
 800ffee:	7bbb      	ldrb	r3, [r7, #14]
 800fff0:	2b80      	cmp	r3, #128	@ 0x80
 800fff2:	d103      	bne.n	800fffc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	2200      	movs	r2, #0
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	e00e      	b.n	801001a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f001 f8e1 	bl	80111c8 <USBD_LL_IsStallEP>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d003      	beq.n	8010014 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	2201      	movs	r2, #1
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	e002      	b.n	801001a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	2200      	movs	r2, #0
 8010018:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2202      	movs	r2, #2
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fc07 	bl	8010834 <USBD_CtlSendData>
              break;
 8010026:	e004      	b.n	8010032 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 fb85 	bl	801073a <USBD_CtlError>
              break;
 8010030:	bf00      	nop
          }
          break;
 8010032:	e004      	b.n	801003e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fb7f 	bl	801073a <USBD_CtlError>
          break;
 801003c:	bf00      	nop
      }
      break;
 801003e:	e005      	b.n	801004c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fb79 	bl	801073a <USBD_CtlError>
      break;
 8010048:	e000      	b.n	801004c <USBD_StdEPReq+0x330>
      break;
 801004a:	bf00      	nop
  }

  return ret;
 801004c:	7bfb      	ldrb	r3, [r7, #15]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010062:	2300      	movs	r3, #0
 8010064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801006a:	2300      	movs	r3, #0
 801006c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	885b      	ldrh	r3, [r3, #2]
 8010072:	0a1b      	lsrs	r3, r3, #8
 8010074:	b29b      	uxth	r3, r3
 8010076:	3b01      	subs	r3, #1
 8010078:	2b0e      	cmp	r3, #14
 801007a:	f200 8152 	bhi.w	8010322 <USBD_GetDescriptor+0x2ca>
 801007e:	a201      	add	r2, pc, #4	@ (adr r2, 8010084 <USBD_GetDescriptor+0x2c>)
 8010080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010084:	080100f5 	.word	0x080100f5
 8010088:	0801010d 	.word	0x0801010d
 801008c:	0801014d 	.word	0x0801014d
 8010090:	08010323 	.word	0x08010323
 8010094:	08010323 	.word	0x08010323
 8010098:	080102c3 	.word	0x080102c3
 801009c:	080102ef 	.word	0x080102ef
 80100a0:	08010323 	.word	0x08010323
 80100a4:	08010323 	.word	0x08010323
 80100a8:	08010323 	.word	0x08010323
 80100ac:	08010323 	.word	0x08010323
 80100b0:	08010323 	.word	0x08010323
 80100b4:	08010323 	.word	0x08010323
 80100b8:	08010323 	.word	0x08010323
 80100bc:	080100c1 	.word	0x080100c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100c6:	69db      	ldr	r3, [r3, #28]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100d2:	69db      	ldr	r3, [r3, #28]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	7c12      	ldrb	r2, [r2, #16]
 80100d8:	f107 0108 	add.w	r1, r7, #8
 80100dc:	4610      	mov	r0, r2
 80100de:	4798      	blx	r3
 80100e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100e2:	e126      	b.n	8010332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 fb27 	bl	801073a <USBD_CtlError>
        err++;
 80100ec:	7afb      	ldrb	r3, [r7, #11]
 80100ee:	3301      	adds	r3, #1
 80100f0:	72fb      	strb	r3, [r7, #11]
      break;
 80100f2:	e11e      	b.n	8010332 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	7c12      	ldrb	r2, [r2, #16]
 8010100:	f107 0108 	add.w	r1, r7, #8
 8010104:	4610      	mov	r0, r2
 8010106:	4798      	blx	r3
 8010108:	60f8      	str	r0, [r7, #12]
      break;
 801010a:	e112      	b.n	8010332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	7c1b      	ldrb	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d10d      	bne.n	8010130 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801011a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801011c:	f107 0208 	add.w	r2, r7, #8
 8010120:	4610      	mov	r0, r2
 8010122:	4798      	blx	r3
 8010124:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3301      	adds	r3, #1
 801012a:	2202      	movs	r2, #2
 801012c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801012e:	e100      	b.n	8010332 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010138:	f107 0208 	add.w	r2, r7, #8
 801013c:	4610      	mov	r0, r2
 801013e:	4798      	blx	r3
 8010140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3301      	adds	r3, #1
 8010146:	2202      	movs	r2, #2
 8010148:	701a      	strb	r2, [r3, #0]
      break;
 801014a:	e0f2      	b.n	8010332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	885b      	ldrh	r3, [r3, #2]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b05      	cmp	r3, #5
 8010154:	f200 80ac 	bhi.w	80102b0 <USBD_GetDescriptor+0x258>
 8010158:	a201      	add	r2, pc, #4	@ (adr r2, 8010160 <USBD_GetDescriptor+0x108>)
 801015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015e:	bf00      	nop
 8010160:	08010179 	.word	0x08010179
 8010164:	080101ad 	.word	0x080101ad
 8010168:	080101e1 	.word	0x080101e1
 801016c:	08010215 	.word	0x08010215
 8010170:	08010249 	.word	0x08010249
 8010174:	0801027d 	.word	0x0801027d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00b      	beq.n	801019c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	7c12      	ldrb	r2, [r2, #16]
 8010190:	f107 0108 	add.w	r1, r7, #8
 8010194:	4610      	mov	r0, r2
 8010196:	4798      	blx	r3
 8010198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801019a:	e091      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801019c:	6839      	ldr	r1, [r7, #0]
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 facb 	bl	801073a <USBD_CtlError>
            err++;
 80101a4:	7afb      	ldrb	r3, [r7, #11]
 80101a6:	3301      	adds	r3, #1
 80101a8:	72fb      	strb	r3, [r7, #11]
          break;
 80101aa:	e089      	b.n	80102c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00b      	beq.n	80101d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	7c12      	ldrb	r2, [r2, #16]
 80101c4:	f107 0108 	add.w	r1, r7, #8
 80101c8:	4610      	mov	r0, r2
 80101ca:	4798      	blx	r3
 80101cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ce:	e077      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101d0:	6839      	ldr	r1, [r7, #0]
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fab1 	bl	801073a <USBD_CtlError>
            err++;
 80101d8:	7afb      	ldrb	r3, [r7, #11]
 80101da:	3301      	adds	r3, #1
 80101dc:	72fb      	strb	r3, [r7, #11]
          break;
 80101de:	e06f      	b.n	80102c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00b      	beq.n	8010204 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	7c12      	ldrb	r2, [r2, #16]
 80101f8:	f107 0108 	add.w	r1, r7, #8
 80101fc:	4610      	mov	r0, r2
 80101fe:	4798      	blx	r3
 8010200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010202:	e05d      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fa97 	bl	801073a <USBD_CtlError>
            err++;
 801020c:	7afb      	ldrb	r3, [r7, #11]
 801020e:	3301      	adds	r3, #1
 8010210:	72fb      	strb	r3, [r7, #11]
          break;
 8010212:	e055      	b.n	80102c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00b      	beq.n	8010238 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	7c12      	ldrb	r2, [r2, #16]
 801022c:	f107 0108 	add.w	r1, r7, #8
 8010230:	4610      	mov	r0, r2
 8010232:	4798      	blx	r3
 8010234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010236:	e043      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010238:	6839      	ldr	r1, [r7, #0]
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 fa7d 	bl	801073a <USBD_CtlError>
            err++;
 8010240:	7afb      	ldrb	r3, [r7, #11]
 8010242:	3301      	adds	r3, #1
 8010244:	72fb      	strb	r3, [r7, #11]
          break;
 8010246:	e03b      	b.n	80102c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801024e:	695b      	ldr	r3, [r3, #20]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00b      	beq.n	801026c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801025a:	695b      	ldr	r3, [r3, #20]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	7c12      	ldrb	r2, [r2, #16]
 8010260:	f107 0108 	add.w	r1, r7, #8
 8010264:	4610      	mov	r0, r2
 8010266:	4798      	blx	r3
 8010268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801026a:	e029      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fa63 	bl	801073a <USBD_CtlError>
            err++;
 8010274:	7afb      	ldrb	r3, [r7, #11]
 8010276:	3301      	adds	r3, #1
 8010278:	72fb      	strb	r3, [r7, #11]
          break;
 801027a:	e021      	b.n	80102c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00b      	beq.n	80102a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801028e:	699b      	ldr	r3, [r3, #24]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	7c12      	ldrb	r2, [r2, #16]
 8010294:	f107 0108 	add.w	r1, r7, #8
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
 801029c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801029e:	e00f      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fa49 	bl	801073a <USBD_CtlError>
            err++;
 80102a8:	7afb      	ldrb	r3, [r7, #11]
 80102aa:	3301      	adds	r3, #1
 80102ac:	72fb      	strb	r3, [r7, #11]
          break;
 80102ae:	e007      	b.n	80102c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 fa41 	bl	801073a <USBD_CtlError>
          err++;
 80102b8:	7afb      	ldrb	r3, [r7, #11]
 80102ba:	3301      	adds	r3, #1
 80102bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80102be:	bf00      	nop
      }
      break;
 80102c0:	e037      	b.n	8010332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7c1b      	ldrb	r3, [r3, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d109      	bne.n	80102de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102d2:	f107 0208 	add.w	r2, r7, #8
 80102d6:	4610      	mov	r0, r2
 80102d8:	4798      	blx	r3
 80102da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102dc:	e029      	b.n	8010332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80102de:	6839      	ldr	r1, [r7, #0]
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 fa2a 	bl	801073a <USBD_CtlError>
        err++;
 80102e6:	7afb      	ldrb	r3, [r7, #11]
 80102e8:	3301      	adds	r3, #1
 80102ea:	72fb      	strb	r3, [r7, #11]
      break;
 80102ec:	e021      	b.n	8010332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	7c1b      	ldrb	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10d      	bne.n	8010312 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102fe:	f107 0208 	add.w	r2, r7, #8
 8010302:	4610      	mov	r0, r2
 8010304:	4798      	blx	r3
 8010306:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	3301      	adds	r3, #1
 801030c:	2207      	movs	r2, #7
 801030e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010310:	e00f      	b.n	8010332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010312:	6839      	ldr	r1, [r7, #0]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fa10 	bl	801073a <USBD_CtlError>
        err++;
 801031a:	7afb      	ldrb	r3, [r7, #11]
 801031c:	3301      	adds	r3, #1
 801031e:	72fb      	strb	r3, [r7, #11]
      break;
 8010320:	e007      	b.n	8010332 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010322:	6839      	ldr	r1, [r7, #0]
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fa08 	bl	801073a <USBD_CtlError>
      err++;
 801032a:	7afb      	ldrb	r3, [r7, #11]
 801032c:	3301      	adds	r3, #1
 801032e:	72fb      	strb	r3, [r7, #11]
      break;
 8010330:	bf00      	nop
  }

  if (err != 0U)
 8010332:	7afb      	ldrb	r3, [r7, #11]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d11e      	bne.n	8010376 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	88db      	ldrh	r3, [r3, #6]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d016      	beq.n	801036e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010340:	893b      	ldrh	r3, [r7, #8]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00e      	beq.n	8010364 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	88da      	ldrh	r2, [r3, #6]
 801034a:	893b      	ldrh	r3, [r7, #8]
 801034c:	4293      	cmp	r3, r2
 801034e:	bf28      	it	cs
 8010350:	4613      	movcs	r3, r2
 8010352:	b29b      	uxth	r3, r3
 8010354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010356:	893b      	ldrh	r3, [r7, #8]
 8010358:	461a      	mov	r2, r3
 801035a:	68f9      	ldr	r1, [r7, #12]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 fa69 	bl	8010834 <USBD_CtlSendData>
 8010362:	e009      	b.n	8010378 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f9e7 	bl	801073a <USBD_CtlError>
 801036c:	e004      	b.n	8010378 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 faba 	bl	80108e8 <USBD_CtlSendStatus>
 8010374:	e000      	b.n	8010378 <USBD_GetDescriptor+0x320>
    return;
 8010376:	bf00      	nop
  }
}
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop

08010380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	889b      	ldrh	r3, [r3, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d131      	bne.n	80103f6 <USBD_SetAddress+0x76>
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	88db      	ldrh	r3, [r3, #6]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d12d      	bne.n	80103f6 <USBD_SetAddress+0x76>
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	885b      	ldrh	r3, [r3, #2]
 801039e:	2b7f      	cmp	r3, #127	@ 0x7f
 80103a0:	d829      	bhi.n	80103f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	885b      	ldrh	r3, [r3, #2]
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b03      	cmp	r3, #3
 80103b8:	d104      	bne.n	80103c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f9bc 	bl	801073a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c2:	e01d      	b.n	8010400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7bfa      	ldrb	r2, [r7, #15]
 80103c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 ff25 	bl	8011220 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fa86 	bl	80108e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80103dc:	7bfb      	ldrb	r3, [r7, #15]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d004      	beq.n	80103ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2202      	movs	r2, #2
 80103e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ea:	e009      	b.n	8010400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2201      	movs	r2, #1
 80103f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103f4:	e004      	b.n	8010400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f99e 	bl	801073a <USBD_CtlError>
  }
}
 80103fe:	bf00      	nop
 8010400:	bf00      	nop
 8010402:	3710      	adds	r7, #16
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010412:	2300      	movs	r3, #0
 8010414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	885b      	ldrh	r3, [r3, #2]
 801041a:	b2da      	uxtb	r2, r3
 801041c:	4b4e      	ldr	r3, [pc, #312]	@ (8010558 <USBD_SetConfig+0x150>)
 801041e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010420:	4b4d      	ldr	r3, [pc, #308]	@ (8010558 <USBD_SetConfig+0x150>)
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d905      	bls.n	8010434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010428:	6839      	ldr	r1, [r7, #0]
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f985 	bl	801073a <USBD_CtlError>
    return USBD_FAIL;
 8010430:	2303      	movs	r3, #3
 8010432:	e08c      	b.n	801054e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b02      	cmp	r3, #2
 801043e:	d002      	beq.n	8010446 <USBD_SetConfig+0x3e>
 8010440:	2b03      	cmp	r3, #3
 8010442:	d029      	beq.n	8010498 <USBD_SetConfig+0x90>
 8010444:	e075      	b.n	8010532 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010446:	4b44      	ldr	r3, [pc, #272]	@ (8010558 <USBD_SetConfig+0x150>)
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d020      	beq.n	8010490 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801044e:	4b42      	ldr	r3, [pc, #264]	@ (8010558 <USBD_SetConfig+0x150>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	461a      	mov	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010458:	4b3f      	ldr	r3, [pc, #252]	@ (8010558 <USBD_SetConfig+0x150>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7fe ffb9 	bl	800f3d6 <USBD_SetClassConfig>
 8010464:	4603      	mov	r3, r0
 8010466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010468:	7bfb      	ldrb	r3, [r7, #15]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d008      	beq.n	8010480 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f962 	bl	801073a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2202      	movs	r2, #2
 801047a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801047e:	e065      	b.n	801054c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 fa31 	bl	80108e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2203      	movs	r2, #3
 801048a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801048e:	e05d      	b.n	801054c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fa29 	bl	80108e8 <USBD_CtlSendStatus>
      break;
 8010496:	e059      	b.n	801054c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010498:	4b2f      	ldr	r3, [pc, #188]	@ (8010558 <USBD_SetConfig+0x150>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d112      	bne.n	80104c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2202      	movs	r2, #2
 80104a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80104a8:	4b2b      	ldr	r3, [pc, #172]	@ (8010558 <USBD_SetConfig+0x150>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	461a      	mov	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104b2:	4b29      	ldr	r3, [pc, #164]	@ (8010558 <USBD_SetConfig+0x150>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	4619      	mov	r1, r3
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7fe ffa8 	bl	800f40e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 fa12 	bl	80108e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104c4:	e042      	b.n	801054c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80104c6:	4b24      	ldr	r3, [pc, #144]	@ (8010558 <USBD_SetConfig+0x150>)
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d02a      	beq.n	801052a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	4619      	mov	r1, r3
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7fe ff96 	bl	800f40e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80104e2:	4b1d      	ldr	r3, [pc, #116]	@ (8010558 <USBD_SetConfig+0x150>)
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80104ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010558 <USBD_SetConfig+0x150>)
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7fe ff6f 	bl	800f3d6 <USBD_SetClassConfig>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00f      	beq.n	8010522 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f918 	bl	801073a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	b2db      	uxtb	r3, r3
 8010510:	4619      	mov	r1, r3
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f7fe ff7b 	bl	800f40e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2202      	movs	r2, #2
 801051c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010520:	e014      	b.n	801054c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 f9e0 	bl	80108e8 <USBD_CtlSendStatus>
      break;
 8010528:	e010      	b.n	801054c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 f9dc 	bl	80108e8 <USBD_CtlSendStatus>
      break;
 8010530:	e00c      	b.n	801054c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 f900 	bl	801073a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801053a:	4b07      	ldr	r3, [pc, #28]	@ (8010558 <USBD_SetConfig+0x150>)
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7fe ff64 	bl	800f40e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010546:	2303      	movs	r3, #3
 8010548:	73fb      	strb	r3, [r7, #15]
      break;
 801054a:	bf00      	nop
  }

  return ret;
 801054c:	7bfb      	ldrb	r3, [r7, #15]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	240018d4 	.word	0x240018d4

0801055c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	88db      	ldrh	r3, [r3, #6]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d004      	beq.n	8010578 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801056e:	6839      	ldr	r1, [r7, #0]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f8e2 	bl	801073a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010576:	e023      	b.n	80105c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b02      	cmp	r3, #2
 8010582:	dc02      	bgt.n	801058a <USBD_GetConfig+0x2e>
 8010584:	2b00      	cmp	r3, #0
 8010586:	dc03      	bgt.n	8010590 <USBD_GetConfig+0x34>
 8010588:	e015      	b.n	80105b6 <USBD_GetConfig+0x5a>
 801058a:	2b03      	cmp	r3, #3
 801058c:	d00b      	beq.n	80105a6 <USBD_GetConfig+0x4a>
 801058e:	e012      	b.n	80105b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	3308      	adds	r3, #8
 801059a:	2201      	movs	r2, #1
 801059c:	4619      	mov	r1, r3
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f000 f948 	bl	8010834 <USBD_CtlSendData>
        break;
 80105a4:	e00c      	b.n	80105c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	3304      	adds	r3, #4
 80105aa:	2201      	movs	r2, #1
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 f940 	bl	8010834 <USBD_CtlSendData>
        break;
 80105b4:	e004      	b.n	80105c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f8be 	bl	801073a <USBD_CtlError>
        break;
 80105be:	bf00      	nop
}
 80105c0:	bf00      	nop
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	3b01      	subs	r3, #1
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d81e      	bhi.n	801061e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	88db      	ldrh	r3, [r3, #6]
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d004      	beq.n	80105f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80105e8:	6839      	ldr	r1, [r7, #0]
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 f8a5 	bl	801073a <USBD_CtlError>
        break;
 80105f0:	e01a      	b.n	8010628 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2201      	movs	r2, #1
 80105f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d005      	beq.n	801060e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	f043 0202 	orr.w	r2, r3, #2
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	330c      	adds	r3, #12
 8010612:	2202      	movs	r2, #2
 8010614:	4619      	mov	r1, r3
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 f90c 	bl	8010834 <USBD_CtlSendData>
      break;
 801061c:	e004      	b.n	8010628 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f88a 	bl	801073a <USBD_CtlError>
      break;
 8010626:	bf00      	nop
  }
}
 8010628:	bf00      	nop
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	885b      	ldrh	r3, [r3, #2]
 801063e:	2b01      	cmp	r3, #1
 8010640:	d107      	bne.n	8010652 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2201      	movs	r2, #1
 8010646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 f94c 	bl	80108e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010650:	e013      	b.n	801067a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	885b      	ldrh	r3, [r3, #2]
 8010656:	2b02      	cmp	r3, #2
 8010658:	d10b      	bne.n	8010672 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	889b      	ldrh	r3, [r3, #4]
 801065e:	0a1b      	lsrs	r3, r3, #8
 8010660:	b29b      	uxth	r3, r3
 8010662:	b2da      	uxtb	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 f93c 	bl	80108e8 <USBD_CtlSendStatus>
}
 8010670:	e003      	b.n	801067a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 f860 	bl	801073a <USBD_CtlError>
}
 801067a:	bf00      	nop
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010692:	b2db      	uxtb	r3, r3
 8010694:	3b01      	subs	r3, #1
 8010696:	2b02      	cmp	r3, #2
 8010698:	d80b      	bhi.n	80106b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	885b      	ldrh	r3, [r3, #2]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d10c      	bne.n	80106bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f91c 	bl	80108e8 <USBD_CtlSendStatus>
      }
      break;
 80106b0:	e004      	b.n	80106bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80106b2:	6839      	ldr	r1, [r7, #0]
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f840 	bl	801073a <USBD_CtlError>
      break;
 80106ba:	e000      	b.n	80106be <USBD_ClrFeature+0x3c>
      break;
 80106bc:	bf00      	nop
  }
}
 80106be:	bf00      	nop
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	781a      	ldrb	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	3301      	adds	r3, #1
 80106e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	781a      	ldrb	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3301      	adds	r3, #1
 80106ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f7ff fa16 	bl	800fb22 <SWAPBYTE>
 80106f6:	4603      	mov	r3, r0
 80106f8:	461a      	mov	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3301      	adds	r3, #1
 8010702:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3301      	adds	r3, #1
 8010708:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f7ff fa09 	bl	800fb22 <SWAPBYTE>
 8010710:	4603      	mov	r3, r0
 8010712:	461a      	mov	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3301      	adds	r3, #1
 801071c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3301      	adds	r3, #1
 8010722:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f7ff f9fc 	bl	800fb22 <SWAPBYTE>
 801072a:	4603      	mov	r3, r0
 801072c:	461a      	mov	r2, r3
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	80da      	strh	r2, [r3, #6]
}
 8010732:	bf00      	nop
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b082      	sub	sp, #8
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010744:	2180      	movs	r1, #128	@ 0x80
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 fd00 	bl	801114c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801074c:	2100      	movs	r1, #0
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fcfc 	bl	801114c <USBD_LL_StallEP>
}
 8010754:	bf00      	nop
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010768:	2300      	movs	r3, #0
 801076a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d042      	beq.n	80107f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010776:	6938      	ldr	r0, [r7, #16]
 8010778:	f000 f842 	bl	8010800 <USBD_GetLen>
 801077c:	4603      	mov	r3, r0
 801077e:	3301      	adds	r3, #1
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010786:	d808      	bhi.n	801079a <USBD_GetString+0x3e>
 8010788:	6938      	ldr	r0, [r7, #16]
 801078a:	f000 f839 	bl	8010800 <USBD_GetLen>
 801078e:	4603      	mov	r3, r0
 8010790:	3301      	adds	r3, #1
 8010792:	b29b      	uxth	r3, r3
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	b29a      	uxth	r2, r3
 8010798:	e001      	b.n	801079e <USBD_GetString+0x42>
 801079a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80107a2:	7dfb      	ldrb	r3, [r7, #23]
 80107a4:	68ba      	ldr	r2, [r7, #8]
 80107a6:	4413      	add	r3, r2
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	7812      	ldrb	r2, [r2, #0]
 80107ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80107ae:	7dfb      	ldrb	r3, [r7, #23]
 80107b0:	3301      	adds	r3, #1
 80107b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	4413      	add	r3, r2
 80107ba:	2203      	movs	r2, #3
 80107bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	3301      	adds	r3, #1
 80107c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80107c4:	e013      	b.n	80107ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80107c6:	7dfb      	ldrb	r3, [r7, #23]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	4413      	add	r3, r2
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	7812      	ldrb	r2, [r2, #0]
 80107d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	3301      	adds	r3, #1
 80107d6:	613b      	str	r3, [r7, #16]
    idx++;
 80107d8:	7dfb      	ldrb	r3, [r7, #23]
 80107da:	3301      	adds	r3, #1
 80107dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	4413      	add	r3, r2
 80107e4:	2200      	movs	r2, #0
 80107e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	3301      	adds	r3, #1
 80107ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1e7      	bne.n	80107c6 <USBD_GetString+0x6a>
 80107f6:	e000      	b.n	80107fa <USBD_GetString+0x9e>
    return;
 80107f8:	bf00      	nop
  }
}
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010810:	e005      	b.n	801081e <USBD_GetLen+0x1e>
  {
    len++;
 8010812:	7bfb      	ldrb	r3, [r7, #15]
 8010814:	3301      	adds	r3, #1
 8010816:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	3301      	adds	r3, #1
 801081c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1f5      	bne.n	8010812 <USBD_GetLen+0x12>
  }

  return len;
 8010826:	7bfb      	ldrb	r3, [r7, #15]
}
 8010828:	4618      	mov	r0, r3
 801082a:	3714      	adds	r7, #20
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2202      	movs	r2, #2
 8010844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	2100      	movs	r1, #0
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f000 fcff 	bl	801125e <USBD_LL_Transmit>

  return USBD_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	60f8      	str	r0, [r7, #12]
 8010872:	60b9      	str	r1, [r7, #8]
 8010874:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	2100      	movs	r1, #0
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f000 fcee 	bl	801125e <USBD_LL_Transmit>

  return USBD_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2203      	movs	r2, #3
 801089c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	2100      	movs	r1, #0
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f000 fcf2 	bl	80112a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b084      	sub	sp, #16
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	60b9      	str	r1, [r7, #8]
 80108d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	2100      	movs	r1, #0
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f000 fce1 	bl	80112a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2204      	movs	r2, #4
 80108f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108f8:	2300      	movs	r3, #0
 80108fa:	2200      	movs	r2, #0
 80108fc:	2100      	movs	r1, #0
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 fcad 	bl	801125e <USBD_LL_Transmit>

  return USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b082      	sub	sp, #8
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2205      	movs	r2, #5
 801091a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801091e:	2300      	movs	r3, #0
 8010920:	2200      	movs	r2, #0
 8010922:	2100      	movs	r1, #0
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fcbb 	bl	80112a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801092a:	2300      	movs	r3, #0
}
 801092c:	4618      	mov	r0, r3
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010938:	2201      	movs	r2, #1
 801093a:	4913      	ldr	r1, [pc, #76]	@ (8010988 <MX_USB_DEVICE_Init+0x54>)
 801093c:	4813      	ldr	r0, [pc, #76]	@ (801098c <MX_USB_DEVICE_Init+0x58>)
 801093e:	f7fe fccd 	bl	800f2dc <USBD_Init>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d001      	beq.n	801094c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010948:	f7f0 fd78 	bl	800143c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801094c:	4910      	ldr	r1, [pc, #64]	@ (8010990 <MX_USB_DEVICE_Init+0x5c>)
 801094e:	480f      	ldr	r0, [pc, #60]	@ (801098c <MX_USB_DEVICE_Init+0x58>)
 8010950:	f7fe fcf4 	bl	800f33c <USBD_RegisterClass>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801095a:	f7f0 fd6f 	bl	800143c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801095e:	490d      	ldr	r1, [pc, #52]	@ (8010994 <MX_USB_DEVICE_Init+0x60>)
 8010960:	480a      	ldr	r0, [pc, #40]	@ (801098c <MX_USB_DEVICE_Init+0x58>)
 8010962:	f7fe fbeb 	bl	800f13c <USBD_CDC_RegisterInterface>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801096c:	f7f0 fd66 	bl	800143c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010970:	4806      	ldr	r0, [pc, #24]	@ (801098c <MX_USB_DEVICE_Init+0x58>)
 8010972:	f7fe fd19 	bl	800f3a8 <USBD_Start>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801097c:	f7f0 fd5e 	bl	800143c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010980:	f7f6 fe86 	bl	8007690 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010984:	bf00      	nop
 8010986:	bd80      	pop	{r7, pc}
 8010988:	240000b0 	.word	0x240000b0
 801098c:	240018d8 	.word	0x240018d8
 8010990:	2400001c 	.word	0x2400001c
 8010994:	2400009c 	.word	0x2400009c

08010998 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801099c:	2200      	movs	r2, #0
 801099e:	4905      	ldr	r1, [pc, #20]	@ (80109b4 <CDC_Init_HS+0x1c>)
 80109a0:	4805      	ldr	r0, [pc, #20]	@ (80109b8 <CDC_Init_HS+0x20>)
 80109a2:	f7fe fbe5 	bl	800f170 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80109a6:	4905      	ldr	r1, [pc, #20]	@ (80109bc <CDC_Init_HS+0x24>)
 80109a8:	4803      	ldr	r0, [pc, #12]	@ (80109b8 <CDC_Init_HS+0x20>)
 80109aa:	f7fe fc03 	bl	800f1b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80109ae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	240023b4 	.word	0x240023b4
 80109b8:	240018d8 	.word	0x240018d8
 80109bc:	24001bb4 	.word	0x24001bb4

080109c0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80109c0:	b480      	push	{r7}
 80109c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80109c4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	4603      	mov	r3, r0
 80109d8:	6039      	str	r1, [r7, #0]
 80109da:	71fb      	strb	r3, [r7, #7]
 80109dc:	4613      	mov	r3, r2
 80109de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80109e0:	79fb      	ldrb	r3, [r7, #7]
 80109e2:	2b23      	cmp	r3, #35	@ 0x23
 80109e4:	d84a      	bhi.n	8010a7c <CDC_Control_HS+0xac>
 80109e6:	a201      	add	r2, pc, #4	@ (adr r2, 80109ec <CDC_Control_HS+0x1c>)
 80109e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ec:	08010a7d 	.word	0x08010a7d
 80109f0:	08010a7d 	.word	0x08010a7d
 80109f4:	08010a7d 	.word	0x08010a7d
 80109f8:	08010a7d 	.word	0x08010a7d
 80109fc:	08010a7d 	.word	0x08010a7d
 8010a00:	08010a7d 	.word	0x08010a7d
 8010a04:	08010a7d 	.word	0x08010a7d
 8010a08:	08010a7d 	.word	0x08010a7d
 8010a0c:	08010a7d 	.word	0x08010a7d
 8010a10:	08010a7d 	.word	0x08010a7d
 8010a14:	08010a7d 	.word	0x08010a7d
 8010a18:	08010a7d 	.word	0x08010a7d
 8010a1c:	08010a7d 	.word	0x08010a7d
 8010a20:	08010a7d 	.word	0x08010a7d
 8010a24:	08010a7d 	.word	0x08010a7d
 8010a28:	08010a7d 	.word	0x08010a7d
 8010a2c:	08010a7d 	.word	0x08010a7d
 8010a30:	08010a7d 	.word	0x08010a7d
 8010a34:	08010a7d 	.word	0x08010a7d
 8010a38:	08010a7d 	.word	0x08010a7d
 8010a3c:	08010a7d 	.word	0x08010a7d
 8010a40:	08010a7d 	.word	0x08010a7d
 8010a44:	08010a7d 	.word	0x08010a7d
 8010a48:	08010a7d 	.word	0x08010a7d
 8010a4c:	08010a7d 	.word	0x08010a7d
 8010a50:	08010a7d 	.word	0x08010a7d
 8010a54:	08010a7d 	.word	0x08010a7d
 8010a58:	08010a7d 	.word	0x08010a7d
 8010a5c:	08010a7d 	.word	0x08010a7d
 8010a60:	08010a7d 	.word	0x08010a7d
 8010a64:	08010a7d 	.word	0x08010a7d
 8010a68:	08010a7d 	.word	0x08010a7d
 8010a6c:	08010a7d 	.word	0x08010a7d
 8010a70:	08010a7d 	.word	0x08010a7d
 8010a74:	08010a7d 	.word	0x08010a7d
 8010a78:	08010a7d 	.word	0x08010a7d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a7c:	bf00      	nop
  }

  return (USBD_OK);
 8010a7e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8010a96:	6879      	ldr	r1, [r7, #4]
 8010a98:	4810      	ldr	r0, [pc, #64]	@ (8010adc <CDC_Receive_HS+0x50>)
 8010a9a:	f7fe fb8b 	bl	800f1b4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8010a9e:	480f      	ldr	r0, [pc, #60]	@ (8010adc <CDC_Receive_HS+0x50>)
 8010aa0:	f7fe fbe6 	bl	800f270 <USBD_CDC_ReceivePacket>

	memset(usb_rx_buf, '\0', 64);  /* clear the serial data rx buffer */
 8010aa4:	2240      	movs	r2, #64	@ 0x40
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	480d      	ldr	r0, [pc, #52]	@ (8010ae0 <CDC_Receive_HS+0x54>)
 8010aaa:	f001 f9ce 	bl	8011e4a <memset>
	uint8_t len = (uint8_t) *Len;
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_rx_buf, Buf, len);  /* copy the incoming data to the buffer */
 8010ab4:	7bfb      	ldrb	r3, [r7, #15]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	6879      	ldr	r1, [r7, #4]
 8010aba:	4809      	ldr	r0, [pc, #36]	@ (8010ae0 <CDC_Receive_HS+0x54>)
 8010abc:	f001 fa45 	bl	8011f4a <memcpy>
	memset(Buf, '\0', len);   /* clear Buf also */
 8010ac0:	7bfb      	ldrb	r3, [r7, #15]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f001 f9bf 	bl	8011e4a <memset>
	usb_rx_ready = 1;  /* set the serial data rx ready flag */
 8010acc:	4b05      	ldr	r3, [pc, #20]	@ (8010ae4 <CDC_Receive_HS+0x58>)
 8010ace:	2201      	movs	r2, #1
 8010ad0:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010ad2:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	240018d8 	.word	0x240018d8
 8010ae0:	2400188c 	.word	0x2400188c
 8010ae4:	240018cc 	.word	0x240018cc

08010ae8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010af4:	2300      	movs	r3, #0
 8010af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8010af8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b30 <CDC_Transmit_HS+0x48>)
 8010afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010afe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e00b      	b.n	8010b26 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8010b0e:	887b      	ldrh	r3, [r7, #2]
 8010b10:	461a      	mov	r2, r3
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	4806      	ldr	r0, [pc, #24]	@ (8010b30 <CDC_Transmit_HS+0x48>)
 8010b16:	f7fe fb2b 	bl	800f170 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8010b1a:	4805      	ldr	r0, [pc, #20]	@ (8010b30 <CDC_Transmit_HS+0x48>)
 8010b1c:	f7fe fb68 	bl	800f1f0 <USBD_CDC_TransmitPacket>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	240018d8 	.word	0x240018d8

08010b34 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b087      	sub	sp, #28
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8010b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
	...

08010b58 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	6039      	str	r1, [r7, #0]
 8010b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2212      	movs	r2, #18
 8010b68:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010b6a:	4b03      	ldr	r3, [pc, #12]	@ (8010b78 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	240000d0 	.word	0x240000d0

08010b7c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	4603      	mov	r3, r0
 8010b84:	6039      	str	r1, [r7, #0]
 8010b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2204      	movs	r2, #4
 8010b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b8e:	4b03      	ldr	r3, [pc, #12]	@ (8010b9c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr
 8010b9c:	240000e4 	.word	0x240000e4

08010ba0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	6039      	str	r1, [r7, #0]
 8010baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d105      	bne.n	8010bbe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	4907      	ldr	r1, [pc, #28]	@ (8010bd4 <USBD_HS_ProductStrDescriptor+0x34>)
 8010bb6:	4808      	ldr	r0, [pc, #32]	@ (8010bd8 <USBD_HS_ProductStrDescriptor+0x38>)
 8010bb8:	f7ff fdd0 	bl	801075c <USBD_GetString>
 8010bbc:	e004      	b.n	8010bc8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	4904      	ldr	r1, [pc, #16]	@ (8010bd4 <USBD_HS_ProductStrDescriptor+0x34>)
 8010bc2:	4805      	ldr	r0, [pc, #20]	@ (8010bd8 <USBD_HS_ProductStrDescriptor+0x38>)
 8010bc4:	f7ff fdca 	bl	801075c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bc8:	4b02      	ldr	r3, [pc, #8]	@ (8010bd4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	24002bb4 	.word	0x24002bb4
 8010bd8:	08013f40 	.word	0x08013f40

08010bdc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	4904      	ldr	r1, [pc, #16]	@ (8010bfc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010bec:	4804      	ldr	r0, [pc, #16]	@ (8010c00 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010bee:	f7ff fdb5 	bl	801075c <USBD_GetString>
  return USBD_StrDesc;
 8010bf2:	4b02      	ldr	r3, [pc, #8]	@ (8010bfc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	24002bb4 	.word	0x24002bb4
 8010c00:	08013f4c 	.word	0x08013f4c

08010c04 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	6039      	str	r1, [r7, #0]
 8010c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	221a      	movs	r2, #26
 8010c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c16:	f000 f843 	bl	8010ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010c1a:	4b02      	ldr	r3, [pc, #8]	@ (8010c24 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	240000e8 	.word	0x240000e8

08010c28 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	4907      	ldr	r1, [pc, #28]	@ (8010c5c <USBD_HS_ConfigStrDescriptor+0x34>)
 8010c3e:	4808      	ldr	r0, [pc, #32]	@ (8010c60 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010c40:	f7ff fd8c 	bl	801075c <USBD_GetString>
 8010c44:	e004      	b.n	8010c50 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	4904      	ldr	r1, [pc, #16]	@ (8010c5c <USBD_HS_ConfigStrDescriptor+0x34>)
 8010c4a:	4805      	ldr	r0, [pc, #20]	@ (8010c60 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010c4c:	f7ff fd86 	bl	801075c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c50:	4b02      	ldr	r3, [pc, #8]	@ (8010c5c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	24002bb4 	.word	0x24002bb4
 8010c60:	08013f58 	.word	0x08013f58

08010c64 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6039      	str	r1, [r7, #0]
 8010c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c70:	79fb      	ldrb	r3, [r7, #7]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d105      	bne.n	8010c82 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	4907      	ldr	r1, [pc, #28]	@ (8010c98 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010c7a:	4808      	ldr	r0, [pc, #32]	@ (8010c9c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010c7c:	f7ff fd6e 	bl	801075c <USBD_GetString>
 8010c80:	e004      	b.n	8010c8c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4904      	ldr	r1, [pc, #16]	@ (8010c98 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010c86:	4805      	ldr	r0, [pc, #20]	@ (8010c9c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010c88:	f7ff fd68 	bl	801075c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c8c:	4b02      	ldr	r3, [pc, #8]	@ (8010c98 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	24002bb4 	.word	0x24002bb4
 8010c9c:	08013f64 	.word	0x08013f64

08010ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ce4 <Get_SerialNum+0x44>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cac:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce8 <Get_SerialNum+0x48>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010cec <Get_SerialNum+0x4c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d009      	beq.n	8010cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cc6:	2208      	movs	r2, #8
 8010cc8:	4909      	ldr	r1, [pc, #36]	@ (8010cf0 <Get_SerialNum+0x50>)
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 f814 	bl	8010cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010cd0:	2204      	movs	r2, #4
 8010cd2:	4908      	ldr	r1, [pc, #32]	@ (8010cf4 <Get_SerialNum+0x54>)
 8010cd4:	68b8      	ldr	r0, [r7, #8]
 8010cd6:	f000 f80f 	bl	8010cf8 <IntToUnicode>
  }
}
 8010cda:	bf00      	nop
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	1ff1e800 	.word	0x1ff1e800
 8010ce8:	1ff1e804 	.word	0x1ff1e804
 8010cec:	1ff1e808 	.word	0x1ff1e808
 8010cf0:	240000ea 	.word	0x240000ea
 8010cf4:	240000fa 	.word	0x240000fa

08010cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b087      	sub	sp, #28
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	4613      	mov	r3, r2
 8010d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75fb      	strb	r3, [r7, #23]
 8010d0e:	e027      	b.n	8010d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	0f1b      	lsrs	r3, r3, #28
 8010d14:	2b09      	cmp	r3, #9
 8010d16:	d80b      	bhi.n	8010d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	0f1b      	lsrs	r3, r3, #28
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	4619      	mov	r1, r3
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	440b      	add	r3, r1
 8010d28:	3230      	adds	r2, #48	@ 0x30
 8010d2a:	b2d2      	uxtb	r2, r2
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e00a      	b.n	8010d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	0f1b      	lsrs	r3, r3, #28
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	440b      	add	r3, r1
 8010d40:	3237      	adds	r2, #55	@ 0x37
 8010d42:	b2d2      	uxtb	r2, r2
 8010d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	011b      	lsls	r3, r3, #4
 8010d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	3301      	adds	r3, #1
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	4413      	add	r3, r2
 8010d56:	2200      	movs	r2, #0
 8010d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	75fb      	strb	r3, [r7, #23]
 8010d60:	7dfa      	ldrb	r2, [r7, #23]
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d3d3      	bcc.n	8010d10 <IntToUnicode+0x18>
  }
}
 8010d68:	bf00      	nop
 8010d6a:	bf00      	nop
 8010d6c:	371c      	adds	r7, #28
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
	...

08010d78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b0b2      	sub	sp, #200	@ 0xc8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010d80:	f107 0310 	add.w	r3, r7, #16
 8010d84:	22b8      	movs	r2, #184	@ 0xb8
 8010d86:	2100      	movs	r1, #0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f001 f85e 	bl	8011e4a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a1a      	ldr	r2, [pc, #104]	@ (8010dfc <HAL_PCD_MspInit+0x84>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d12c      	bne.n	8010df2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010d98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010d9c:	f04f 0300 	mov.w	r3, #0
 8010da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010da4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8010da8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010dac:	f107 0310 	add.w	r3, r7, #16
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7f7 fbe3 	bl	800857c <HAL_RCCEx_PeriphCLKConfig>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8010dbc:	f7f0 fb3e 	bl	800143c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010dc0:	f7f6 fc66 	bl	8007690 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e00 <HAL_PCD_MspInit+0x88>)
 8010dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010dca:	4a0d      	ldr	r2, [pc, #52]	@ (8010e00 <HAL_PCD_MspInit+0x88>)
 8010dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8010dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8010e00 <HAL_PCD_MspInit+0x88>)
 8010dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010dde:	60fb      	str	r3, [r7, #12]
 8010de0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010de2:	2200      	movs	r2, #0
 8010de4:	2100      	movs	r1, #0
 8010de6:	204d      	movs	r0, #77	@ 0x4d
 8010de8:	f7f2 ffb5 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010dec:	204d      	movs	r0, #77	@ 0x4d
 8010dee:	f7f2 ffcc 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010df2:	bf00      	nop
 8010df4:	37c8      	adds	r7, #200	@ 0xc8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	40040000 	.word	0x40040000
 8010e00:	58024400 	.word	0x58024400

08010e04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	f7fe fb11 	bl	800f442 <USBD_LL_SetupStage>
}
 8010e20:	bf00      	nop
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	460b      	mov	r3, r1
 8010e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010e3a:	78fa      	ldrb	r2, [r7, #3]
 8010e3c:	6879      	ldr	r1, [r7, #4]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	4413      	add	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	440b      	add	r3, r1
 8010e48:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	78fb      	ldrb	r3, [r7, #3]
 8010e50:	4619      	mov	r1, r3
 8010e52:	f7fe fb4b 	bl	800f4ec <USBD_LL_DataOutStage>
}
 8010e56:	bf00      	nop
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	460b      	mov	r3, r1
 8010e68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010e70:	78fa      	ldrb	r2, [r7, #3]
 8010e72:	6879      	ldr	r1, [r7, #4]
 8010e74:	4613      	mov	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	4413      	add	r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	440b      	add	r3, r1
 8010e7e:	3320      	adds	r3, #32
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	78fb      	ldrb	r3, [r7, #3]
 8010e84:	4619      	mov	r1, r3
 8010e86:	f7fe fbe4 	bl	800f652 <USBD_LL_DataInStage>
}
 8010e8a:	bf00      	nop
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b082      	sub	sp, #8
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fd1e 	bl	800f8e2 <USBD_LL_SOF>
}
 8010ea6:	bf00      	nop
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	79db      	ldrb	r3, [r3, #7]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d102      	bne.n	8010ec8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	73fb      	strb	r3, [r7, #15]
 8010ec6:	e008      	b.n	8010eda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	79db      	ldrb	r3, [r3, #7]
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d102      	bne.n	8010ed6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	73fb      	strb	r3, [r7, #15]
 8010ed4:	e001      	b.n	8010eda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010ed6:	f7f0 fab1 	bl	800143c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ee0:	7bfa      	ldrb	r2, [r7, #15]
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe fcb8 	bl	800f85a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fe fc60 	bl	800f7b6 <USBD_LL_Reset>
}
 8010ef6:	bf00      	nop
 8010ef8:	3710      	adds	r7, #16
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
	...

08010f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe fcb3 	bl	800f87a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	6812      	ldr	r2, [r2, #0]
 8010f22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f26:	f043 0301 	orr.w	r3, r3, #1
 8010f2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	7adb      	ldrb	r3, [r3, #11]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d005      	beq.n	8010f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f34:	4b04      	ldr	r3, [pc, #16]	@ (8010f48 <HAL_PCD_SuspendCallback+0x48>)
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	4a03      	ldr	r2, [pc, #12]	@ (8010f48 <HAL_PCD_SuspendCallback+0x48>)
 8010f3a:	f043 0306 	orr.w	r3, r3, #6
 8010f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010f40:	bf00      	nop
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	e000ed00 	.word	0xe000ed00

08010f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe fca9 	bl	800f8b2 <USBD_LL_Resume>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	460b      	mov	r3, r1
 8010f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f7a:	78fa      	ldrb	r2, [r7, #3]
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fe fd01 	bl	800f986 <USBD_LL_IsoOUTIncomplete>
}
 8010f84:	bf00      	nop
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	460b      	mov	r3, r1
 8010f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f9e:	78fa      	ldrb	r2, [r7, #3]
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fcbd 	bl	800f922 <USBD_LL_IsoINIncomplete>
}
 8010fa8:	bf00      	nop
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fe fd13 	bl	800f9ea <USBD_LL_DevConnected>
}
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fe fd10 	bl	800fa00 <USBD_LL_DevDisconnected>
}
 8010fe0:	bf00      	nop
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d140      	bne.n	801107a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010ff8:	4a22      	ldr	r2, [pc, #136]	@ (8011084 <USBD_LL_Init+0x9c>)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4a20      	ldr	r2, [pc, #128]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011004:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011008:	4b1e      	ldr	r3, [pc, #120]	@ (8011084 <USBD_LL_Init+0x9c>)
 801100a:	4a1f      	ldr	r2, [pc, #124]	@ (8011088 <USBD_LL_Init+0xa0>)
 801100c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801100e:	4b1d      	ldr	r3, [pc, #116]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011010:	2209      	movs	r2, #9
 8011012:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8011014:	4b1b      	ldr	r3, [pc, #108]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011016:	2202      	movs	r2, #2
 8011018:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801101a:	4b1a      	ldr	r3, [pc, #104]	@ (8011084 <USBD_LL_Init+0x9c>)
 801101c:	2200      	movs	r2, #0
 801101e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011020:	4b18      	ldr	r3, [pc, #96]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011022:	2202      	movs	r2, #2
 8011024:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011026:	4b17      	ldr	r3, [pc, #92]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011028:	2200      	movs	r2, #0
 801102a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801102c:	4b15      	ldr	r3, [pc, #84]	@ (8011084 <USBD_LL_Init+0x9c>)
 801102e:	2200      	movs	r2, #0
 8011030:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011032:	4b14      	ldr	r3, [pc, #80]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011034:	2200      	movs	r2, #0
 8011036:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011038:	4b12      	ldr	r3, [pc, #72]	@ (8011084 <USBD_LL_Init+0x9c>)
 801103a:	2200      	movs	r2, #0
 801103c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801103e:	4b11      	ldr	r3, [pc, #68]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011040:	2200      	movs	r2, #0
 8011042:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011044:	4b0f      	ldr	r3, [pc, #60]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011046:	2200      	movs	r2, #0
 8011048:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801104a:	480e      	ldr	r0, [pc, #56]	@ (8011084 <USBD_LL_Init+0x9c>)
 801104c:	f7f5 f847 	bl	80060de <HAL_PCD_Init>
 8011050:	4603      	mov	r3, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d001      	beq.n	801105a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011056:	f7f0 f9f1 	bl	800143c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801105a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801105e:	4809      	ldr	r0, [pc, #36]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011060:	f7f6 fa9b 	bl	800759a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8011064:	2280      	movs	r2, #128	@ 0x80
 8011066:	2100      	movs	r1, #0
 8011068:	4806      	ldr	r0, [pc, #24]	@ (8011084 <USBD_LL_Init+0x9c>)
 801106a:	f7f6 fa4f 	bl	800750c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801106e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8011072:	2101      	movs	r1, #1
 8011074:	4803      	ldr	r0, [pc, #12]	@ (8011084 <USBD_LL_Init+0x9c>)
 8011076:	f7f6 fa49 	bl	800750c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801107a:	2300      	movs	r3, #0
}
 801107c:	4618      	mov	r0, r3
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	24002db4 	.word	0x24002db4
 8011088:	40040000 	.word	0x40040000

0801108c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011098:	2300      	movs	r3, #0
 801109a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f5 f927 	bl	80062f6 <HAL_PCD_Start>
 80110a8:	4603      	mov	r3, r0
 80110aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ac:	7bfb      	ldrb	r3, [r7, #15]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 f942 	bl	8011338 <USBD_Get_USB_Status>
 80110b4:	4603      	mov	r3, r0
 80110b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b084      	sub	sp, #16
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	461a      	mov	r2, r3
 80110d0:	4603      	mov	r3, r0
 80110d2:	70fb      	strb	r3, [r7, #3]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70bb      	strb	r3, [r7, #2]
 80110d8:	4613      	mov	r3, r2
 80110da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80110ea:	78bb      	ldrb	r3, [r7, #2]
 80110ec:	883a      	ldrh	r2, [r7, #0]
 80110ee:	78f9      	ldrb	r1, [r7, #3]
 80110f0:	f7f5 fe28 	bl	8006d44 <HAL_PCD_EP_Open>
 80110f4:	4603      	mov	r3, r0
 80110f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110f8:	7bfb      	ldrb	r3, [r7, #15]
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 f91c 	bl	8011338 <USBD_Get_USB_Status>
 8011100:	4603      	mov	r3, r0
 8011102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011104:	7bbb      	ldrb	r3, [r7, #14]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	460b      	mov	r3, r1
 8011118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801111e:	2300      	movs	r3, #0
 8011120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011128:	78fa      	ldrb	r2, [r7, #3]
 801112a:	4611      	mov	r1, r2
 801112c:	4618      	mov	r0, r3
 801112e:	f7f5 fe71 	bl	8006e14 <HAL_PCD_EP_Close>
 8011132:	4603      	mov	r3, r0
 8011134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011136:	7bfb      	ldrb	r3, [r7, #15]
 8011138:	4618      	mov	r0, r3
 801113a:	f000 f8fd 	bl	8011338 <USBD_Get_USB_Status>
 801113e:	4603      	mov	r3, r0
 8011140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011142:	7bbb      	ldrb	r3, [r7, #14]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801115c:	2300      	movs	r3, #0
 801115e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011166:	78fa      	ldrb	r2, [r7, #3]
 8011168:	4611      	mov	r1, r2
 801116a:	4618      	mov	r0, r3
 801116c:	f7f5 ff29 	bl	8006fc2 <HAL_PCD_EP_SetStall>
 8011170:	4603      	mov	r3, r0
 8011172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011174:	7bfb      	ldrb	r3, [r7, #15]
 8011176:	4618      	mov	r0, r3
 8011178:	f000 f8de 	bl	8011338 <USBD_Get_USB_Status>
 801117c:	4603      	mov	r3, r0
 801117e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011180:	7bbb      	ldrb	r3, [r7, #14]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b084      	sub	sp, #16
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	460b      	mov	r3, r1
 8011194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111a4:	78fa      	ldrb	r2, [r7, #3]
 80111a6:	4611      	mov	r1, r2
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7f5 ff6d 	bl	8007088 <HAL_PCD_EP_ClrStall>
 80111ae:	4603      	mov	r3, r0
 80111b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f000 f8bf 	bl	8011338 <USBD_Get_USB_Status>
 80111ba:	4603      	mov	r3, r0
 80111bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111be:	7bbb      	ldrb	r3, [r7, #14]
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3710      	adds	r7, #16
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80111dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	da0b      	bge.n	80111fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80111e4:	78fb      	ldrb	r3, [r7, #3]
 80111e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80111ea:	68f9      	ldr	r1, [r7, #12]
 80111ec:	4613      	mov	r3, r2
 80111ee:	00db      	lsls	r3, r3, #3
 80111f0:	4413      	add	r3, r2
 80111f2:	009b      	lsls	r3, r3, #2
 80111f4:	440b      	add	r3, r1
 80111f6:	3316      	adds	r3, #22
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	e00b      	b.n	8011214 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111fc:	78fb      	ldrb	r3, [r7, #3]
 80111fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011202:	68f9      	ldr	r1, [r7, #12]
 8011204:	4613      	mov	r3, r2
 8011206:	00db      	lsls	r3, r3, #3
 8011208:	4413      	add	r3, r2
 801120a:	009b      	lsls	r3, r3, #2
 801120c:	440b      	add	r3, r1
 801120e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011212:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	460b      	mov	r3, r1
 801122a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011230:	2300      	movs	r3, #0
 8011232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801123a:	78fa      	ldrb	r2, [r7, #3]
 801123c:	4611      	mov	r1, r2
 801123e:	4618      	mov	r0, r3
 8011240:	f7f5 fd5c 	bl	8006cfc <HAL_PCD_SetAddress>
 8011244:	4603      	mov	r3, r0
 8011246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011248:	7bfb      	ldrb	r3, [r7, #15]
 801124a:	4618      	mov	r0, r3
 801124c:	f000 f874 	bl	8011338 <USBD_Get_USB_Status>
 8011250:	4603      	mov	r3, r0
 8011252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011254:	7bbb      	ldrb	r3, [r7, #14]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3710      	adds	r7, #16
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b086      	sub	sp, #24
 8011262:	af00      	add	r7, sp, #0
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	607a      	str	r2, [r7, #4]
 8011268:	603b      	str	r3, [r7, #0]
 801126a:	460b      	mov	r3, r1
 801126c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801126e:	2300      	movs	r3, #0
 8011270:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801127c:	7af9      	ldrb	r1, [r7, #11]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	f7f5 fe64 	bl	8006f4e <HAL_PCD_EP_Transmit>
 8011286:	4603      	mov	r3, r0
 8011288:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801128a:	7dfb      	ldrb	r3, [r7, #23]
 801128c:	4618      	mov	r0, r3
 801128e:	f000 f853 	bl	8011338 <USBD_Get_USB_Status>
 8011292:	4603      	mov	r3, r0
 8011294:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011296:	7dbb      	ldrb	r3, [r7, #22]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3718      	adds	r7, #24
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	607a      	str	r2, [r7, #4]
 80112aa:	603b      	str	r3, [r7, #0]
 80112ac:	460b      	mov	r3, r1
 80112ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112b4:	2300      	movs	r3, #0
 80112b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80112be:	7af9      	ldrb	r1, [r7, #11]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	f7f5 fdf0 	bl	8006ea8 <HAL_PCD_EP_Receive>
 80112c8:	4603      	mov	r3, r0
 80112ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112cc:	7dfb      	ldrb	r3, [r7, #23]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f000 f832 	bl	8011338 <USBD_Get_USB_Status>
 80112d4:	4603      	mov	r3, r0
 80112d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3718      	adds	r7, #24
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b082      	sub	sp, #8
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	460b      	mov	r3, r1
 80112ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112f4:	78fa      	ldrb	r2, [r7, #3]
 80112f6:	4611      	mov	r1, r2
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7f5 fe10 	bl	8006f1e <HAL_PCD_EP_GetRxCount>
 80112fe:	4603      	mov	r3, r0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011310:	4b03      	ldr	r3, [pc, #12]	@ (8011320 <USBD_static_malloc+0x18>)
}
 8011312:	4618      	mov	r0, r3
 8011314:	370c      	adds	r7, #12
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr
 801131e:	bf00      	nop
 8011320:	24003298 	.word	0x24003298

08011324 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801132c:	bf00      	nop
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	4603      	mov	r3, r0
 8011340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011346:	79fb      	ldrb	r3, [r7, #7]
 8011348:	2b03      	cmp	r3, #3
 801134a:	d817      	bhi.n	801137c <USBD_Get_USB_Status+0x44>
 801134c:	a201      	add	r2, pc, #4	@ (adr r2, 8011354 <USBD_Get_USB_Status+0x1c>)
 801134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011352:	bf00      	nop
 8011354:	08011365 	.word	0x08011365
 8011358:	0801136b 	.word	0x0801136b
 801135c:	08011371 	.word	0x08011371
 8011360:	08011377 	.word	0x08011377
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	73fb      	strb	r3, [r7, #15]
    break;
 8011368:	e00b      	b.n	8011382 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801136a:	2303      	movs	r3, #3
 801136c:	73fb      	strb	r3, [r7, #15]
    break;
 801136e:	e008      	b.n	8011382 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011370:	2301      	movs	r3, #1
 8011372:	73fb      	strb	r3, [r7, #15]
    break;
 8011374:	e005      	b.n	8011382 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011376:	2303      	movs	r3, #3
 8011378:	73fb      	strb	r3, [r7, #15]
    break;
 801137a:	e002      	b.n	8011382 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801137c:	2303      	movs	r3, #3
 801137e:	73fb      	strb	r3, [r7, #15]
    break;
 8011380:	bf00      	nop
  }
  return usb_status;
 8011382:	7bfb      	ldrb	r3, [r7, #15]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3714      	adds	r7, #20
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <__cvt>:
 8011390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011392:	ed2d 8b02 	vpush	{d8}
 8011396:	eeb0 8b40 	vmov.f64	d8, d0
 801139a:	b085      	sub	sp, #20
 801139c:	4617      	mov	r7, r2
 801139e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80113a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80113a2:	ee18 2a90 	vmov	r2, s17
 80113a6:	f025 0520 	bic.w	r5, r5, #32
 80113aa:	2a00      	cmp	r2, #0
 80113ac:	bfb6      	itet	lt
 80113ae:	222d      	movlt	r2, #45	@ 0x2d
 80113b0:	2200      	movge	r2, #0
 80113b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80113b6:	2d46      	cmp	r5, #70	@ 0x46
 80113b8:	460c      	mov	r4, r1
 80113ba:	701a      	strb	r2, [r3, #0]
 80113bc:	d004      	beq.n	80113c8 <__cvt+0x38>
 80113be:	2d45      	cmp	r5, #69	@ 0x45
 80113c0:	d100      	bne.n	80113c4 <__cvt+0x34>
 80113c2:	3401      	adds	r4, #1
 80113c4:	2102      	movs	r1, #2
 80113c6:	e000      	b.n	80113ca <__cvt+0x3a>
 80113c8:	2103      	movs	r1, #3
 80113ca:	ab03      	add	r3, sp, #12
 80113cc:	9301      	str	r3, [sp, #4]
 80113ce:	ab02      	add	r3, sp, #8
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4622      	mov	r2, r4
 80113d4:	4633      	mov	r3, r6
 80113d6:	eeb0 0b48 	vmov.f64	d0, d8
 80113da:	f000 fe4d 	bl	8012078 <_dtoa_r>
 80113de:	2d47      	cmp	r5, #71	@ 0x47
 80113e0:	d114      	bne.n	801140c <__cvt+0x7c>
 80113e2:	07fb      	lsls	r3, r7, #31
 80113e4:	d50a      	bpl.n	80113fc <__cvt+0x6c>
 80113e6:	1902      	adds	r2, r0, r4
 80113e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80113ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f0:	bf08      	it	eq
 80113f2:	9203      	streq	r2, [sp, #12]
 80113f4:	2130      	movs	r1, #48	@ 0x30
 80113f6:	9b03      	ldr	r3, [sp, #12]
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d319      	bcc.n	8011430 <__cvt+0xa0>
 80113fc:	9b03      	ldr	r3, [sp, #12]
 80113fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011400:	1a1b      	subs	r3, r3, r0
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	b005      	add	sp, #20
 8011406:	ecbd 8b02 	vpop	{d8}
 801140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801140c:	2d46      	cmp	r5, #70	@ 0x46
 801140e:	eb00 0204 	add.w	r2, r0, r4
 8011412:	d1e9      	bne.n	80113e8 <__cvt+0x58>
 8011414:	7803      	ldrb	r3, [r0, #0]
 8011416:	2b30      	cmp	r3, #48	@ 0x30
 8011418:	d107      	bne.n	801142a <__cvt+0x9a>
 801141a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011422:	bf1c      	itt	ne
 8011424:	f1c4 0401 	rsbne	r4, r4, #1
 8011428:	6034      	strne	r4, [r6, #0]
 801142a:	6833      	ldr	r3, [r6, #0]
 801142c:	441a      	add	r2, r3
 801142e:	e7db      	b.n	80113e8 <__cvt+0x58>
 8011430:	1c5c      	adds	r4, r3, #1
 8011432:	9403      	str	r4, [sp, #12]
 8011434:	7019      	strb	r1, [r3, #0]
 8011436:	e7de      	b.n	80113f6 <__cvt+0x66>

08011438 <__exponent>:
 8011438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801143a:	2900      	cmp	r1, #0
 801143c:	bfba      	itte	lt
 801143e:	4249      	neglt	r1, r1
 8011440:	232d      	movlt	r3, #45	@ 0x2d
 8011442:	232b      	movge	r3, #43	@ 0x2b
 8011444:	2909      	cmp	r1, #9
 8011446:	7002      	strb	r2, [r0, #0]
 8011448:	7043      	strb	r3, [r0, #1]
 801144a:	dd29      	ble.n	80114a0 <__exponent+0x68>
 801144c:	f10d 0307 	add.w	r3, sp, #7
 8011450:	461d      	mov	r5, r3
 8011452:	270a      	movs	r7, #10
 8011454:	461a      	mov	r2, r3
 8011456:	fbb1 f6f7 	udiv	r6, r1, r7
 801145a:	fb07 1416 	mls	r4, r7, r6, r1
 801145e:	3430      	adds	r4, #48	@ 0x30
 8011460:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011464:	460c      	mov	r4, r1
 8011466:	2c63      	cmp	r4, #99	@ 0x63
 8011468:	f103 33ff 	add.w	r3, r3, #4294967295
 801146c:	4631      	mov	r1, r6
 801146e:	dcf1      	bgt.n	8011454 <__exponent+0x1c>
 8011470:	3130      	adds	r1, #48	@ 0x30
 8011472:	1e94      	subs	r4, r2, #2
 8011474:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011478:	1c41      	adds	r1, r0, #1
 801147a:	4623      	mov	r3, r4
 801147c:	42ab      	cmp	r3, r5
 801147e:	d30a      	bcc.n	8011496 <__exponent+0x5e>
 8011480:	f10d 0309 	add.w	r3, sp, #9
 8011484:	1a9b      	subs	r3, r3, r2
 8011486:	42ac      	cmp	r4, r5
 8011488:	bf88      	it	hi
 801148a:	2300      	movhi	r3, #0
 801148c:	3302      	adds	r3, #2
 801148e:	4403      	add	r3, r0
 8011490:	1a18      	subs	r0, r3, r0
 8011492:	b003      	add	sp, #12
 8011494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011496:	f813 6b01 	ldrb.w	r6, [r3], #1
 801149a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801149e:	e7ed      	b.n	801147c <__exponent+0x44>
 80114a0:	2330      	movs	r3, #48	@ 0x30
 80114a2:	3130      	adds	r1, #48	@ 0x30
 80114a4:	7083      	strb	r3, [r0, #2]
 80114a6:	70c1      	strb	r1, [r0, #3]
 80114a8:	1d03      	adds	r3, r0, #4
 80114aa:	e7f1      	b.n	8011490 <__exponent+0x58>
 80114ac:	0000      	movs	r0, r0
	...

080114b0 <_printf_float>:
 80114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	b08d      	sub	sp, #52	@ 0x34
 80114b6:	460c      	mov	r4, r1
 80114b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80114bc:	4616      	mov	r6, r2
 80114be:	461f      	mov	r7, r3
 80114c0:	4605      	mov	r5, r0
 80114c2:	f000 fccb 	bl	8011e5c <_localeconv_r>
 80114c6:	f8d0 b000 	ldr.w	fp, [r0]
 80114ca:	4658      	mov	r0, fp
 80114cc:	f7ee ff70 	bl	80003b0 <strlen>
 80114d0:	2300      	movs	r3, #0
 80114d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80114d4:	f8d8 3000 	ldr.w	r3, [r8]
 80114d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80114dc:	6822      	ldr	r2, [r4, #0]
 80114de:	9005      	str	r0, [sp, #20]
 80114e0:	3307      	adds	r3, #7
 80114e2:	f023 0307 	bic.w	r3, r3, #7
 80114e6:	f103 0108 	add.w	r1, r3, #8
 80114ea:	f8c8 1000 	str.w	r1, [r8]
 80114ee:	ed93 0b00 	vldr	d0, [r3]
 80114f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011750 <_printf_float+0x2a0>
 80114f6:	eeb0 7bc0 	vabs.f64	d7, d0
 80114fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011506:	dd24      	ble.n	8011552 <_printf_float+0xa2>
 8011508:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011510:	d502      	bpl.n	8011518 <_printf_float+0x68>
 8011512:	232d      	movs	r3, #45	@ 0x2d
 8011514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011518:	498f      	ldr	r1, [pc, #572]	@ (8011758 <_printf_float+0x2a8>)
 801151a:	4b90      	ldr	r3, [pc, #576]	@ (801175c <_printf_float+0x2ac>)
 801151c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011520:	bf94      	ite	ls
 8011522:	4688      	movls	r8, r1
 8011524:	4698      	movhi	r8, r3
 8011526:	f022 0204 	bic.w	r2, r2, #4
 801152a:	2303      	movs	r3, #3
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	6022      	str	r2, [r4, #0]
 8011530:	f04f 0a00 	mov.w	sl, #0
 8011534:	9700      	str	r7, [sp, #0]
 8011536:	4633      	mov	r3, r6
 8011538:	aa0b      	add	r2, sp, #44	@ 0x2c
 801153a:	4621      	mov	r1, r4
 801153c:	4628      	mov	r0, r5
 801153e:	f000 f9d1 	bl	80118e4 <_printf_common>
 8011542:	3001      	adds	r0, #1
 8011544:	f040 8089 	bne.w	801165a <_printf_float+0x1aa>
 8011548:	f04f 30ff 	mov.w	r0, #4294967295
 801154c:	b00d      	add	sp, #52	@ 0x34
 801154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011552:	eeb4 0b40 	vcmp.f64	d0, d0
 8011556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155a:	d709      	bvc.n	8011570 <_printf_float+0xc0>
 801155c:	ee10 3a90 	vmov	r3, s1
 8011560:	2b00      	cmp	r3, #0
 8011562:	bfbc      	itt	lt
 8011564:	232d      	movlt	r3, #45	@ 0x2d
 8011566:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801156a:	497d      	ldr	r1, [pc, #500]	@ (8011760 <_printf_float+0x2b0>)
 801156c:	4b7d      	ldr	r3, [pc, #500]	@ (8011764 <_printf_float+0x2b4>)
 801156e:	e7d5      	b.n	801151c <_printf_float+0x6c>
 8011570:	6863      	ldr	r3, [r4, #4]
 8011572:	1c59      	adds	r1, r3, #1
 8011574:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011578:	d139      	bne.n	80115ee <_printf_float+0x13e>
 801157a:	2306      	movs	r3, #6
 801157c:	6063      	str	r3, [r4, #4]
 801157e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011582:	2300      	movs	r3, #0
 8011584:	6022      	str	r2, [r4, #0]
 8011586:	9303      	str	r3, [sp, #12]
 8011588:	ab0a      	add	r3, sp, #40	@ 0x28
 801158a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801158e:	ab09      	add	r3, sp, #36	@ 0x24
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	6861      	ldr	r1, [r4, #4]
 8011594:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011598:	4628      	mov	r0, r5
 801159a:	f7ff fef9 	bl	8011390 <__cvt>
 801159e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80115a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80115a4:	4680      	mov	r8, r0
 80115a6:	d129      	bne.n	80115fc <_printf_float+0x14c>
 80115a8:	1cc8      	adds	r0, r1, #3
 80115aa:	db02      	blt.n	80115b2 <_printf_float+0x102>
 80115ac:	6863      	ldr	r3, [r4, #4]
 80115ae:	4299      	cmp	r1, r3
 80115b0:	dd41      	ble.n	8011636 <_printf_float+0x186>
 80115b2:	f1a9 0902 	sub.w	r9, r9, #2
 80115b6:	fa5f f989 	uxtb.w	r9, r9
 80115ba:	3901      	subs	r1, #1
 80115bc:	464a      	mov	r2, r9
 80115be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80115c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80115c4:	f7ff ff38 	bl	8011438 <__exponent>
 80115c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115ca:	1813      	adds	r3, r2, r0
 80115cc:	2a01      	cmp	r2, #1
 80115ce:	4682      	mov	sl, r0
 80115d0:	6123      	str	r3, [r4, #16]
 80115d2:	dc02      	bgt.n	80115da <_printf_float+0x12a>
 80115d4:	6822      	ldr	r2, [r4, #0]
 80115d6:	07d2      	lsls	r2, r2, #31
 80115d8:	d501      	bpl.n	80115de <_printf_float+0x12e>
 80115da:	3301      	adds	r3, #1
 80115dc:	6123      	str	r3, [r4, #16]
 80115de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d0a6      	beq.n	8011534 <_printf_float+0x84>
 80115e6:	232d      	movs	r3, #45	@ 0x2d
 80115e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115ec:	e7a2      	b.n	8011534 <_printf_float+0x84>
 80115ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80115f2:	d1c4      	bne.n	801157e <_printf_float+0xce>
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d1c2      	bne.n	801157e <_printf_float+0xce>
 80115f8:	2301      	movs	r3, #1
 80115fa:	e7bf      	b.n	801157c <_printf_float+0xcc>
 80115fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011600:	d9db      	bls.n	80115ba <_printf_float+0x10a>
 8011602:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011606:	d118      	bne.n	801163a <_printf_float+0x18a>
 8011608:	2900      	cmp	r1, #0
 801160a:	6863      	ldr	r3, [r4, #4]
 801160c:	dd0b      	ble.n	8011626 <_printf_float+0x176>
 801160e:	6121      	str	r1, [r4, #16]
 8011610:	b913      	cbnz	r3, 8011618 <_printf_float+0x168>
 8011612:	6822      	ldr	r2, [r4, #0]
 8011614:	07d0      	lsls	r0, r2, #31
 8011616:	d502      	bpl.n	801161e <_printf_float+0x16e>
 8011618:	3301      	adds	r3, #1
 801161a:	440b      	add	r3, r1
 801161c:	6123      	str	r3, [r4, #16]
 801161e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011620:	f04f 0a00 	mov.w	sl, #0
 8011624:	e7db      	b.n	80115de <_printf_float+0x12e>
 8011626:	b913      	cbnz	r3, 801162e <_printf_float+0x17e>
 8011628:	6822      	ldr	r2, [r4, #0]
 801162a:	07d2      	lsls	r2, r2, #31
 801162c:	d501      	bpl.n	8011632 <_printf_float+0x182>
 801162e:	3302      	adds	r3, #2
 8011630:	e7f4      	b.n	801161c <_printf_float+0x16c>
 8011632:	2301      	movs	r3, #1
 8011634:	e7f2      	b.n	801161c <_printf_float+0x16c>
 8011636:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801163a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801163c:	4299      	cmp	r1, r3
 801163e:	db05      	blt.n	801164c <_printf_float+0x19c>
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	6121      	str	r1, [r4, #16]
 8011644:	07d8      	lsls	r0, r3, #31
 8011646:	d5ea      	bpl.n	801161e <_printf_float+0x16e>
 8011648:	1c4b      	adds	r3, r1, #1
 801164a:	e7e7      	b.n	801161c <_printf_float+0x16c>
 801164c:	2900      	cmp	r1, #0
 801164e:	bfd4      	ite	le
 8011650:	f1c1 0202 	rsble	r2, r1, #2
 8011654:	2201      	movgt	r2, #1
 8011656:	4413      	add	r3, r2
 8011658:	e7e0      	b.n	801161c <_printf_float+0x16c>
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	055a      	lsls	r2, r3, #21
 801165e:	d407      	bmi.n	8011670 <_printf_float+0x1c0>
 8011660:	6923      	ldr	r3, [r4, #16]
 8011662:	4642      	mov	r2, r8
 8011664:	4631      	mov	r1, r6
 8011666:	4628      	mov	r0, r5
 8011668:	47b8      	blx	r7
 801166a:	3001      	adds	r0, #1
 801166c:	d12a      	bne.n	80116c4 <_printf_float+0x214>
 801166e:	e76b      	b.n	8011548 <_printf_float+0x98>
 8011670:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011674:	f240 80e0 	bls.w	8011838 <_printf_float+0x388>
 8011678:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801167c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011684:	d133      	bne.n	80116ee <_printf_float+0x23e>
 8011686:	4a38      	ldr	r2, [pc, #224]	@ (8011768 <_printf_float+0x2b8>)
 8011688:	2301      	movs	r3, #1
 801168a:	4631      	mov	r1, r6
 801168c:	4628      	mov	r0, r5
 801168e:	47b8      	blx	r7
 8011690:	3001      	adds	r0, #1
 8011692:	f43f af59 	beq.w	8011548 <_printf_float+0x98>
 8011696:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801169a:	4543      	cmp	r3, r8
 801169c:	db02      	blt.n	80116a4 <_printf_float+0x1f4>
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	07d8      	lsls	r0, r3, #31
 80116a2:	d50f      	bpl.n	80116c4 <_printf_float+0x214>
 80116a4:	9b05      	ldr	r3, [sp, #20]
 80116a6:	465a      	mov	r2, fp
 80116a8:	4631      	mov	r1, r6
 80116aa:	4628      	mov	r0, r5
 80116ac:	47b8      	blx	r7
 80116ae:	3001      	adds	r0, #1
 80116b0:	f43f af4a 	beq.w	8011548 <_printf_float+0x98>
 80116b4:	f04f 0900 	mov.w	r9, #0
 80116b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80116bc:	f104 0a1a 	add.w	sl, r4, #26
 80116c0:	45c8      	cmp	r8, r9
 80116c2:	dc09      	bgt.n	80116d8 <_printf_float+0x228>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	079b      	lsls	r3, r3, #30
 80116c8:	f100 8107 	bmi.w	80118da <_printf_float+0x42a>
 80116cc:	68e0      	ldr	r0, [r4, #12]
 80116ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116d0:	4298      	cmp	r0, r3
 80116d2:	bfb8      	it	lt
 80116d4:	4618      	movlt	r0, r3
 80116d6:	e739      	b.n	801154c <_printf_float+0x9c>
 80116d8:	2301      	movs	r3, #1
 80116da:	4652      	mov	r2, sl
 80116dc:	4631      	mov	r1, r6
 80116de:	4628      	mov	r0, r5
 80116e0:	47b8      	blx	r7
 80116e2:	3001      	adds	r0, #1
 80116e4:	f43f af30 	beq.w	8011548 <_printf_float+0x98>
 80116e8:	f109 0901 	add.w	r9, r9, #1
 80116ec:	e7e8      	b.n	80116c0 <_printf_float+0x210>
 80116ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	dc3b      	bgt.n	801176c <_printf_float+0x2bc>
 80116f4:	4a1c      	ldr	r2, [pc, #112]	@ (8011768 <_printf_float+0x2b8>)
 80116f6:	2301      	movs	r3, #1
 80116f8:	4631      	mov	r1, r6
 80116fa:	4628      	mov	r0, r5
 80116fc:	47b8      	blx	r7
 80116fe:	3001      	adds	r0, #1
 8011700:	f43f af22 	beq.w	8011548 <_printf_float+0x98>
 8011704:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011708:	ea59 0303 	orrs.w	r3, r9, r3
 801170c:	d102      	bne.n	8011714 <_printf_float+0x264>
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	07d9      	lsls	r1, r3, #31
 8011712:	d5d7      	bpl.n	80116c4 <_printf_float+0x214>
 8011714:	9b05      	ldr	r3, [sp, #20]
 8011716:	465a      	mov	r2, fp
 8011718:	4631      	mov	r1, r6
 801171a:	4628      	mov	r0, r5
 801171c:	47b8      	blx	r7
 801171e:	3001      	adds	r0, #1
 8011720:	f43f af12 	beq.w	8011548 <_printf_float+0x98>
 8011724:	f04f 0a00 	mov.w	sl, #0
 8011728:	f104 0b1a 	add.w	fp, r4, #26
 801172c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801172e:	425b      	negs	r3, r3
 8011730:	4553      	cmp	r3, sl
 8011732:	dc01      	bgt.n	8011738 <_printf_float+0x288>
 8011734:	464b      	mov	r3, r9
 8011736:	e794      	b.n	8011662 <_printf_float+0x1b2>
 8011738:	2301      	movs	r3, #1
 801173a:	465a      	mov	r2, fp
 801173c:	4631      	mov	r1, r6
 801173e:	4628      	mov	r0, r5
 8011740:	47b8      	blx	r7
 8011742:	3001      	adds	r0, #1
 8011744:	f43f af00 	beq.w	8011548 <_printf_float+0x98>
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	e7ee      	b.n	801172c <_printf_float+0x27c>
 801174e:	bf00      	nop
 8011750:	ffffffff 	.word	0xffffffff
 8011754:	7fefffff 	.word	0x7fefffff
 8011758:	08013fb4 	.word	0x08013fb4
 801175c:	08013fb8 	.word	0x08013fb8
 8011760:	08013fbc 	.word	0x08013fbc
 8011764:	08013fc0 	.word	0x08013fc0
 8011768:	08013fc4 	.word	0x08013fc4
 801176c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801176e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011772:	4553      	cmp	r3, sl
 8011774:	bfa8      	it	ge
 8011776:	4653      	movge	r3, sl
 8011778:	2b00      	cmp	r3, #0
 801177a:	4699      	mov	r9, r3
 801177c:	dc37      	bgt.n	80117ee <_printf_float+0x33e>
 801177e:	2300      	movs	r3, #0
 8011780:	9307      	str	r3, [sp, #28]
 8011782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011786:	f104 021a 	add.w	r2, r4, #26
 801178a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801178c:	9907      	ldr	r1, [sp, #28]
 801178e:	9306      	str	r3, [sp, #24]
 8011790:	eba3 0309 	sub.w	r3, r3, r9
 8011794:	428b      	cmp	r3, r1
 8011796:	dc31      	bgt.n	80117fc <_printf_float+0x34c>
 8011798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801179a:	459a      	cmp	sl, r3
 801179c:	dc3b      	bgt.n	8011816 <_printf_float+0x366>
 801179e:	6823      	ldr	r3, [r4, #0]
 80117a0:	07da      	lsls	r2, r3, #31
 80117a2:	d438      	bmi.n	8011816 <_printf_float+0x366>
 80117a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a6:	ebaa 0903 	sub.w	r9, sl, r3
 80117aa:	9b06      	ldr	r3, [sp, #24]
 80117ac:	ebaa 0303 	sub.w	r3, sl, r3
 80117b0:	4599      	cmp	r9, r3
 80117b2:	bfa8      	it	ge
 80117b4:	4699      	movge	r9, r3
 80117b6:	f1b9 0f00 	cmp.w	r9, #0
 80117ba:	dc34      	bgt.n	8011826 <_printf_float+0x376>
 80117bc:	f04f 0800 	mov.w	r8, #0
 80117c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80117c4:	f104 0b1a 	add.w	fp, r4, #26
 80117c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117ca:	ebaa 0303 	sub.w	r3, sl, r3
 80117ce:	eba3 0309 	sub.w	r3, r3, r9
 80117d2:	4543      	cmp	r3, r8
 80117d4:	f77f af76 	ble.w	80116c4 <_printf_float+0x214>
 80117d8:	2301      	movs	r3, #1
 80117da:	465a      	mov	r2, fp
 80117dc:	4631      	mov	r1, r6
 80117de:	4628      	mov	r0, r5
 80117e0:	47b8      	blx	r7
 80117e2:	3001      	adds	r0, #1
 80117e4:	f43f aeb0 	beq.w	8011548 <_printf_float+0x98>
 80117e8:	f108 0801 	add.w	r8, r8, #1
 80117ec:	e7ec      	b.n	80117c8 <_printf_float+0x318>
 80117ee:	4642      	mov	r2, r8
 80117f0:	4631      	mov	r1, r6
 80117f2:	4628      	mov	r0, r5
 80117f4:	47b8      	blx	r7
 80117f6:	3001      	adds	r0, #1
 80117f8:	d1c1      	bne.n	801177e <_printf_float+0x2ce>
 80117fa:	e6a5      	b.n	8011548 <_printf_float+0x98>
 80117fc:	2301      	movs	r3, #1
 80117fe:	4631      	mov	r1, r6
 8011800:	4628      	mov	r0, r5
 8011802:	9206      	str	r2, [sp, #24]
 8011804:	47b8      	blx	r7
 8011806:	3001      	adds	r0, #1
 8011808:	f43f ae9e 	beq.w	8011548 <_printf_float+0x98>
 801180c:	9b07      	ldr	r3, [sp, #28]
 801180e:	9a06      	ldr	r2, [sp, #24]
 8011810:	3301      	adds	r3, #1
 8011812:	9307      	str	r3, [sp, #28]
 8011814:	e7b9      	b.n	801178a <_printf_float+0x2da>
 8011816:	9b05      	ldr	r3, [sp, #20]
 8011818:	465a      	mov	r2, fp
 801181a:	4631      	mov	r1, r6
 801181c:	4628      	mov	r0, r5
 801181e:	47b8      	blx	r7
 8011820:	3001      	adds	r0, #1
 8011822:	d1bf      	bne.n	80117a4 <_printf_float+0x2f4>
 8011824:	e690      	b.n	8011548 <_printf_float+0x98>
 8011826:	9a06      	ldr	r2, [sp, #24]
 8011828:	464b      	mov	r3, r9
 801182a:	4442      	add	r2, r8
 801182c:	4631      	mov	r1, r6
 801182e:	4628      	mov	r0, r5
 8011830:	47b8      	blx	r7
 8011832:	3001      	adds	r0, #1
 8011834:	d1c2      	bne.n	80117bc <_printf_float+0x30c>
 8011836:	e687      	b.n	8011548 <_printf_float+0x98>
 8011838:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801183c:	f1b9 0f01 	cmp.w	r9, #1
 8011840:	dc01      	bgt.n	8011846 <_printf_float+0x396>
 8011842:	07db      	lsls	r3, r3, #31
 8011844:	d536      	bpl.n	80118b4 <_printf_float+0x404>
 8011846:	2301      	movs	r3, #1
 8011848:	4642      	mov	r2, r8
 801184a:	4631      	mov	r1, r6
 801184c:	4628      	mov	r0, r5
 801184e:	47b8      	blx	r7
 8011850:	3001      	adds	r0, #1
 8011852:	f43f ae79 	beq.w	8011548 <_printf_float+0x98>
 8011856:	9b05      	ldr	r3, [sp, #20]
 8011858:	465a      	mov	r2, fp
 801185a:	4631      	mov	r1, r6
 801185c:	4628      	mov	r0, r5
 801185e:	47b8      	blx	r7
 8011860:	3001      	adds	r0, #1
 8011862:	f43f ae71 	beq.w	8011548 <_printf_float+0x98>
 8011866:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801186a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011872:	f109 39ff 	add.w	r9, r9, #4294967295
 8011876:	d018      	beq.n	80118aa <_printf_float+0x3fa>
 8011878:	464b      	mov	r3, r9
 801187a:	f108 0201 	add.w	r2, r8, #1
 801187e:	4631      	mov	r1, r6
 8011880:	4628      	mov	r0, r5
 8011882:	47b8      	blx	r7
 8011884:	3001      	adds	r0, #1
 8011886:	d10c      	bne.n	80118a2 <_printf_float+0x3f2>
 8011888:	e65e      	b.n	8011548 <_printf_float+0x98>
 801188a:	2301      	movs	r3, #1
 801188c:	465a      	mov	r2, fp
 801188e:	4631      	mov	r1, r6
 8011890:	4628      	mov	r0, r5
 8011892:	47b8      	blx	r7
 8011894:	3001      	adds	r0, #1
 8011896:	f43f ae57 	beq.w	8011548 <_printf_float+0x98>
 801189a:	f108 0801 	add.w	r8, r8, #1
 801189e:	45c8      	cmp	r8, r9
 80118a0:	dbf3      	blt.n	801188a <_printf_float+0x3da>
 80118a2:	4653      	mov	r3, sl
 80118a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80118a8:	e6dc      	b.n	8011664 <_printf_float+0x1b4>
 80118aa:	f04f 0800 	mov.w	r8, #0
 80118ae:	f104 0b1a 	add.w	fp, r4, #26
 80118b2:	e7f4      	b.n	801189e <_printf_float+0x3ee>
 80118b4:	2301      	movs	r3, #1
 80118b6:	4642      	mov	r2, r8
 80118b8:	e7e1      	b.n	801187e <_printf_float+0x3ce>
 80118ba:	2301      	movs	r3, #1
 80118bc:	464a      	mov	r2, r9
 80118be:	4631      	mov	r1, r6
 80118c0:	4628      	mov	r0, r5
 80118c2:	47b8      	blx	r7
 80118c4:	3001      	adds	r0, #1
 80118c6:	f43f ae3f 	beq.w	8011548 <_printf_float+0x98>
 80118ca:	f108 0801 	add.w	r8, r8, #1
 80118ce:	68e3      	ldr	r3, [r4, #12]
 80118d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80118d2:	1a5b      	subs	r3, r3, r1
 80118d4:	4543      	cmp	r3, r8
 80118d6:	dcf0      	bgt.n	80118ba <_printf_float+0x40a>
 80118d8:	e6f8      	b.n	80116cc <_printf_float+0x21c>
 80118da:	f04f 0800 	mov.w	r8, #0
 80118de:	f104 0919 	add.w	r9, r4, #25
 80118e2:	e7f4      	b.n	80118ce <_printf_float+0x41e>

080118e4 <_printf_common>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	4616      	mov	r6, r2
 80118ea:	4698      	mov	r8, r3
 80118ec:	688a      	ldr	r2, [r1, #8]
 80118ee:	690b      	ldr	r3, [r1, #16]
 80118f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80118f4:	4293      	cmp	r3, r2
 80118f6:	bfb8      	it	lt
 80118f8:	4613      	movlt	r3, r2
 80118fa:	6033      	str	r3, [r6, #0]
 80118fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011900:	4607      	mov	r7, r0
 8011902:	460c      	mov	r4, r1
 8011904:	b10a      	cbz	r2, 801190a <_printf_common+0x26>
 8011906:	3301      	adds	r3, #1
 8011908:	6033      	str	r3, [r6, #0]
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	0699      	lsls	r1, r3, #26
 801190e:	bf42      	ittt	mi
 8011910:	6833      	ldrmi	r3, [r6, #0]
 8011912:	3302      	addmi	r3, #2
 8011914:	6033      	strmi	r3, [r6, #0]
 8011916:	6825      	ldr	r5, [r4, #0]
 8011918:	f015 0506 	ands.w	r5, r5, #6
 801191c:	d106      	bne.n	801192c <_printf_common+0x48>
 801191e:	f104 0a19 	add.w	sl, r4, #25
 8011922:	68e3      	ldr	r3, [r4, #12]
 8011924:	6832      	ldr	r2, [r6, #0]
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	42ab      	cmp	r3, r5
 801192a:	dc26      	bgt.n	801197a <_printf_common+0x96>
 801192c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011930:	6822      	ldr	r2, [r4, #0]
 8011932:	3b00      	subs	r3, #0
 8011934:	bf18      	it	ne
 8011936:	2301      	movne	r3, #1
 8011938:	0692      	lsls	r2, r2, #26
 801193a:	d42b      	bmi.n	8011994 <_printf_common+0xb0>
 801193c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011940:	4641      	mov	r1, r8
 8011942:	4638      	mov	r0, r7
 8011944:	47c8      	blx	r9
 8011946:	3001      	adds	r0, #1
 8011948:	d01e      	beq.n	8011988 <_printf_common+0xa4>
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	6922      	ldr	r2, [r4, #16]
 801194e:	f003 0306 	and.w	r3, r3, #6
 8011952:	2b04      	cmp	r3, #4
 8011954:	bf02      	ittt	eq
 8011956:	68e5      	ldreq	r5, [r4, #12]
 8011958:	6833      	ldreq	r3, [r6, #0]
 801195a:	1aed      	subeq	r5, r5, r3
 801195c:	68a3      	ldr	r3, [r4, #8]
 801195e:	bf0c      	ite	eq
 8011960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011964:	2500      	movne	r5, #0
 8011966:	4293      	cmp	r3, r2
 8011968:	bfc4      	itt	gt
 801196a:	1a9b      	subgt	r3, r3, r2
 801196c:	18ed      	addgt	r5, r5, r3
 801196e:	2600      	movs	r6, #0
 8011970:	341a      	adds	r4, #26
 8011972:	42b5      	cmp	r5, r6
 8011974:	d11a      	bne.n	80119ac <_printf_common+0xc8>
 8011976:	2000      	movs	r0, #0
 8011978:	e008      	b.n	801198c <_printf_common+0xa8>
 801197a:	2301      	movs	r3, #1
 801197c:	4652      	mov	r2, sl
 801197e:	4641      	mov	r1, r8
 8011980:	4638      	mov	r0, r7
 8011982:	47c8      	blx	r9
 8011984:	3001      	adds	r0, #1
 8011986:	d103      	bne.n	8011990 <_printf_common+0xac>
 8011988:	f04f 30ff 	mov.w	r0, #4294967295
 801198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011990:	3501      	adds	r5, #1
 8011992:	e7c6      	b.n	8011922 <_printf_common+0x3e>
 8011994:	18e1      	adds	r1, r4, r3
 8011996:	1c5a      	adds	r2, r3, #1
 8011998:	2030      	movs	r0, #48	@ 0x30
 801199a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801199e:	4422      	add	r2, r4
 80119a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80119a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80119a8:	3302      	adds	r3, #2
 80119aa:	e7c7      	b.n	801193c <_printf_common+0x58>
 80119ac:	2301      	movs	r3, #1
 80119ae:	4622      	mov	r2, r4
 80119b0:	4641      	mov	r1, r8
 80119b2:	4638      	mov	r0, r7
 80119b4:	47c8      	blx	r9
 80119b6:	3001      	adds	r0, #1
 80119b8:	d0e6      	beq.n	8011988 <_printf_common+0xa4>
 80119ba:	3601      	adds	r6, #1
 80119bc:	e7d9      	b.n	8011972 <_printf_common+0x8e>
	...

080119c0 <_printf_i>:
 80119c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119c4:	7e0f      	ldrb	r7, [r1, #24]
 80119c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80119c8:	2f78      	cmp	r7, #120	@ 0x78
 80119ca:	4691      	mov	r9, r2
 80119cc:	4680      	mov	r8, r0
 80119ce:	460c      	mov	r4, r1
 80119d0:	469a      	mov	sl, r3
 80119d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80119d6:	d807      	bhi.n	80119e8 <_printf_i+0x28>
 80119d8:	2f62      	cmp	r7, #98	@ 0x62
 80119da:	d80a      	bhi.n	80119f2 <_printf_i+0x32>
 80119dc:	2f00      	cmp	r7, #0
 80119de:	f000 80d2 	beq.w	8011b86 <_printf_i+0x1c6>
 80119e2:	2f58      	cmp	r7, #88	@ 0x58
 80119e4:	f000 80b9 	beq.w	8011b5a <_printf_i+0x19a>
 80119e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80119f0:	e03a      	b.n	8011a68 <_printf_i+0xa8>
 80119f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80119f6:	2b15      	cmp	r3, #21
 80119f8:	d8f6      	bhi.n	80119e8 <_printf_i+0x28>
 80119fa:	a101      	add	r1, pc, #4	@ (adr r1, 8011a00 <_printf_i+0x40>)
 80119fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a00:	08011a59 	.word	0x08011a59
 8011a04:	08011a6d 	.word	0x08011a6d
 8011a08:	080119e9 	.word	0x080119e9
 8011a0c:	080119e9 	.word	0x080119e9
 8011a10:	080119e9 	.word	0x080119e9
 8011a14:	080119e9 	.word	0x080119e9
 8011a18:	08011a6d 	.word	0x08011a6d
 8011a1c:	080119e9 	.word	0x080119e9
 8011a20:	080119e9 	.word	0x080119e9
 8011a24:	080119e9 	.word	0x080119e9
 8011a28:	080119e9 	.word	0x080119e9
 8011a2c:	08011b6d 	.word	0x08011b6d
 8011a30:	08011a97 	.word	0x08011a97
 8011a34:	08011b27 	.word	0x08011b27
 8011a38:	080119e9 	.word	0x080119e9
 8011a3c:	080119e9 	.word	0x080119e9
 8011a40:	08011b8f 	.word	0x08011b8f
 8011a44:	080119e9 	.word	0x080119e9
 8011a48:	08011a97 	.word	0x08011a97
 8011a4c:	080119e9 	.word	0x080119e9
 8011a50:	080119e9 	.word	0x080119e9
 8011a54:	08011b2f 	.word	0x08011b2f
 8011a58:	6833      	ldr	r3, [r6, #0]
 8011a5a:	1d1a      	adds	r2, r3, #4
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6032      	str	r2, [r6, #0]
 8011a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e09d      	b.n	8011ba8 <_printf_i+0x1e8>
 8011a6c:	6833      	ldr	r3, [r6, #0]
 8011a6e:	6820      	ldr	r0, [r4, #0]
 8011a70:	1d19      	adds	r1, r3, #4
 8011a72:	6031      	str	r1, [r6, #0]
 8011a74:	0606      	lsls	r6, r0, #24
 8011a76:	d501      	bpl.n	8011a7c <_printf_i+0xbc>
 8011a78:	681d      	ldr	r5, [r3, #0]
 8011a7a:	e003      	b.n	8011a84 <_printf_i+0xc4>
 8011a7c:	0645      	lsls	r5, r0, #25
 8011a7e:	d5fb      	bpl.n	8011a78 <_printf_i+0xb8>
 8011a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011a84:	2d00      	cmp	r5, #0
 8011a86:	da03      	bge.n	8011a90 <_printf_i+0xd0>
 8011a88:	232d      	movs	r3, #45	@ 0x2d
 8011a8a:	426d      	negs	r5, r5
 8011a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a90:	4859      	ldr	r0, [pc, #356]	@ (8011bf8 <_printf_i+0x238>)
 8011a92:	230a      	movs	r3, #10
 8011a94:	e011      	b.n	8011aba <_printf_i+0xfa>
 8011a96:	6821      	ldr	r1, [r4, #0]
 8011a98:	6833      	ldr	r3, [r6, #0]
 8011a9a:	0608      	lsls	r0, r1, #24
 8011a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011aa0:	d402      	bmi.n	8011aa8 <_printf_i+0xe8>
 8011aa2:	0649      	lsls	r1, r1, #25
 8011aa4:	bf48      	it	mi
 8011aa6:	b2ad      	uxthmi	r5, r5
 8011aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8011aaa:	4853      	ldr	r0, [pc, #332]	@ (8011bf8 <_printf_i+0x238>)
 8011aac:	6033      	str	r3, [r6, #0]
 8011aae:	bf14      	ite	ne
 8011ab0:	230a      	movne	r3, #10
 8011ab2:	2308      	moveq	r3, #8
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011aba:	6866      	ldr	r6, [r4, #4]
 8011abc:	60a6      	str	r6, [r4, #8]
 8011abe:	2e00      	cmp	r6, #0
 8011ac0:	bfa2      	ittt	ge
 8011ac2:	6821      	ldrge	r1, [r4, #0]
 8011ac4:	f021 0104 	bicge.w	r1, r1, #4
 8011ac8:	6021      	strge	r1, [r4, #0]
 8011aca:	b90d      	cbnz	r5, 8011ad0 <_printf_i+0x110>
 8011acc:	2e00      	cmp	r6, #0
 8011ace:	d04b      	beq.n	8011b68 <_printf_i+0x1a8>
 8011ad0:	4616      	mov	r6, r2
 8011ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8011ada:	5dc7      	ldrb	r7, [r0, r7]
 8011adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ae0:	462f      	mov	r7, r5
 8011ae2:	42bb      	cmp	r3, r7
 8011ae4:	460d      	mov	r5, r1
 8011ae6:	d9f4      	bls.n	8011ad2 <_printf_i+0x112>
 8011ae8:	2b08      	cmp	r3, #8
 8011aea:	d10b      	bne.n	8011b04 <_printf_i+0x144>
 8011aec:	6823      	ldr	r3, [r4, #0]
 8011aee:	07df      	lsls	r7, r3, #31
 8011af0:	d508      	bpl.n	8011b04 <_printf_i+0x144>
 8011af2:	6923      	ldr	r3, [r4, #16]
 8011af4:	6861      	ldr	r1, [r4, #4]
 8011af6:	4299      	cmp	r1, r3
 8011af8:	bfde      	ittt	le
 8011afa:	2330      	movle	r3, #48	@ 0x30
 8011afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011b04:	1b92      	subs	r2, r2, r6
 8011b06:	6122      	str	r2, [r4, #16]
 8011b08:	f8cd a000 	str.w	sl, [sp]
 8011b0c:	464b      	mov	r3, r9
 8011b0e:	aa03      	add	r2, sp, #12
 8011b10:	4621      	mov	r1, r4
 8011b12:	4640      	mov	r0, r8
 8011b14:	f7ff fee6 	bl	80118e4 <_printf_common>
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d14a      	bne.n	8011bb2 <_printf_i+0x1f2>
 8011b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b20:	b004      	add	sp, #16
 8011b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b26:	6823      	ldr	r3, [r4, #0]
 8011b28:	f043 0320 	orr.w	r3, r3, #32
 8011b2c:	6023      	str	r3, [r4, #0]
 8011b2e:	4833      	ldr	r0, [pc, #204]	@ (8011bfc <_printf_i+0x23c>)
 8011b30:	2778      	movs	r7, #120	@ 0x78
 8011b32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	6831      	ldr	r1, [r6, #0]
 8011b3a:	061f      	lsls	r7, r3, #24
 8011b3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011b40:	d402      	bmi.n	8011b48 <_printf_i+0x188>
 8011b42:	065f      	lsls	r7, r3, #25
 8011b44:	bf48      	it	mi
 8011b46:	b2ad      	uxthmi	r5, r5
 8011b48:	6031      	str	r1, [r6, #0]
 8011b4a:	07d9      	lsls	r1, r3, #31
 8011b4c:	bf44      	itt	mi
 8011b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8011b52:	6023      	strmi	r3, [r4, #0]
 8011b54:	b11d      	cbz	r5, 8011b5e <_printf_i+0x19e>
 8011b56:	2310      	movs	r3, #16
 8011b58:	e7ac      	b.n	8011ab4 <_printf_i+0xf4>
 8011b5a:	4827      	ldr	r0, [pc, #156]	@ (8011bf8 <_printf_i+0x238>)
 8011b5c:	e7e9      	b.n	8011b32 <_printf_i+0x172>
 8011b5e:	6823      	ldr	r3, [r4, #0]
 8011b60:	f023 0320 	bic.w	r3, r3, #32
 8011b64:	6023      	str	r3, [r4, #0]
 8011b66:	e7f6      	b.n	8011b56 <_printf_i+0x196>
 8011b68:	4616      	mov	r6, r2
 8011b6a:	e7bd      	b.n	8011ae8 <_printf_i+0x128>
 8011b6c:	6833      	ldr	r3, [r6, #0]
 8011b6e:	6825      	ldr	r5, [r4, #0]
 8011b70:	6961      	ldr	r1, [r4, #20]
 8011b72:	1d18      	adds	r0, r3, #4
 8011b74:	6030      	str	r0, [r6, #0]
 8011b76:	062e      	lsls	r6, r5, #24
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	d501      	bpl.n	8011b80 <_printf_i+0x1c0>
 8011b7c:	6019      	str	r1, [r3, #0]
 8011b7e:	e002      	b.n	8011b86 <_printf_i+0x1c6>
 8011b80:	0668      	lsls	r0, r5, #25
 8011b82:	d5fb      	bpl.n	8011b7c <_printf_i+0x1bc>
 8011b84:	8019      	strh	r1, [r3, #0]
 8011b86:	2300      	movs	r3, #0
 8011b88:	6123      	str	r3, [r4, #16]
 8011b8a:	4616      	mov	r6, r2
 8011b8c:	e7bc      	b.n	8011b08 <_printf_i+0x148>
 8011b8e:	6833      	ldr	r3, [r6, #0]
 8011b90:	1d1a      	adds	r2, r3, #4
 8011b92:	6032      	str	r2, [r6, #0]
 8011b94:	681e      	ldr	r6, [r3, #0]
 8011b96:	6862      	ldr	r2, [r4, #4]
 8011b98:	2100      	movs	r1, #0
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f7ee fbb8 	bl	8000310 <memchr>
 8011ba0:	b108      	cbz	r0, 8011ba6 <_printf_i+0x1e6>
 8011ba2:	1b80      	subs	r0, r0, r6
 8011ba4:	6060      	str	r0, [r4, #4]
 8011ba6:	6863      	ldr	r3, [r4, #4]
 8011ba8:	6123      	str	r3, [r4, #16]
 8011baa:	2300      	movs	r3, #0
 8011bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bb0:	e7aa      	b.n	8011b08 <_printf_i+0x148>
 8011bb2:	6923      	ldr	r3, [r4, #16]
 8011bb4:	4632      	mov	r2, r6
 8011bb6:	4649      	mov	r1, r9
 8011bb8:	4640      	mov	r0, r8
 8011bba:	47d0      	blx	sl
 8011bbc:	3001      	adds	r0, #1
 8011bbe:	d0ad      	beq.n	8011b1c <_printf_i+0x15c>
 8011bc0:	6823      	ldr	r3, [r4, #0]
 8011bc2:	079b      	lsls	r3, r3, #30
 8011bc4:	d413      	bmi.n	8011bee <_printf_i+0x22e>
 8011bc6:	68e0      	ldr	r0, [r4, #12]
 8011bc8:	9b03      	ldr	r3, [sp, #12]
 8011bca:	4298      	cmp	r0, r3
 8011bcc:	bfb8      	it	lt
 8011bce:	4618      	movlt	r0, r3
 8011bd0:	e7a6      	b.n	8011b20 <_printf_i+0x160>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4632      	mov	r2, r6
 8011bd6:	4649      	mov	r1, r9
 8011bd8:	4640      	mov	r0, r8
 8011bda:	47d0      	blx	sl
 8011bdc:	3001      	adds	r0, #1
 8011bde:	d09d      	beq.n	8011b1c <_printf_i+0x15c>
 8011be0:	3501      	adds	r5, #1
 8011be2:	68e3      	ldr	r3, [r4, #12]
 8011be4:	9903      	ldr	r1, [sp, #12]
 8011be6:	1a5b      	subs	r3, r3, r1
 8011be8:	42ab      	cmp	r3, r5
 8011bea:	dcf2      	bgt.n	8011bd2 <_printf_i+0x212>
 8011bec:	e7eb      	b.n	8011bc6 <_printf_i+0x206>
 8011bee:	2500      	movs	r5, #0
 8011bf0:	f104 0619 	add.w	r6, r4, #25
 8011bf4:	e7f5      	b.n	8011be2 <_printf_i+0x222>
 8011bf6:	bf00      	nop
 8011bf8:	08013fc6 	.word	0x08013fc6
 8011bfc:	08013fd7 	.word	0x08013fd7

08011c00 <std>:
 8011c00:	2300      	movs	r3, #0
 8011c02:	b510      	push	{r4, lr}
 8011c04:	4604      	mov	r4, r0
 8011c06:	e9c0 3300 	strd	r3, r3, [r0]
 8011c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c0e:	6083      	str	r3, [r0, #8]
 8011c10:	8181      	strh	r1, [r0, #12]
 8011c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c14:	81c2      	strh	r2, [r0, #14]
 8011c16:	6183      	str	r3, [r0, #24]
 8011c18:	4619      	mov	r1, r3
 8011c1a:	2208      	movs	r2, #8
 8011c1c:	305c      	adds	r0, #92	@ 0x5c
 8011c1e:	f000 f914 	bl	8011e4a <memset>
 8011c22:	4b0d      	ldr	r3, [pc, #52]	@ (8011c58 <std+0x58>)
 8011c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c26:	4b0d      	ldr	r3, [pc, #52]	@ (8011c5c <std+0x5c>)
 8011c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c60 <std+0x60>)
 8011c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c64 <std+0x64>)
 8011c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c32:	4b0d      	ldr	r3, [pc, #52]	@ (8011c68 <std+0x68>)
 8011c34:	6224      	str	r4, [r4, #32]
 8011c36:	429c      	cmp	r4, r3
 8011c38:	d006      	beq.n	8011c48 <std+0x48>
 8011c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c3e:	4294      	cmp	r4, r2
 8011c40:	d002      	beq.n	8011c48 <std+0x48>
 8011c42:	33d0      	adds	r3, #208	@ 0xd0
 8011c44:	429c      	cmp	r4, r3
 8011c46:	d105      	bne.n	8011c54 <std+0x54>
 8011c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c50:	f000 b978 	b.w	8011f44 <__retarget_lock_init_recursive>
 8011c54:	bd10      	pop	{r4, pc}
 8011c56:	bf00      	nop
 8011c58:	08011dc5 	.word	0x08011dc5
 8011c5c:	08011de7 	.word	0x08011de7
 8011c60:	08011e1f 	.word	0x08011e1f
 8011c64:	08011e43 	.word	0x08011e43
 8011c68:	240034b8 	.word	0x240034b8

08011c6c <stdio_exit_handler>:
 8011c6c:	4a02      	ldr	r2, [pc, #8]	@ (8011c78 <stdio_exit_handler+0xc>)
 8011c6e:	4903      	ldr	r1, [pc, #12]	@ (8011c7c <stdio_exit_handler+0x10>)
 8011c70:	4803      	ldr	r0, [pc, #12]	@ (8011c80 <stdio_exit_handler+0x14>)
 8011c72:	f000 b869 	b.w	8011d48 <_fwalk_sglue>
 8011c76:	bf00      	nop
 8011c78:	24000104 	.word	0x24000104
 8011c7c:	080137e1 	.word	0x080137e1
 8011c80:	24000114 	.word	0x24000114

08011c84 <cleanup_stdio>:
 8011c84:	6841      	ldr	r1, [r0, #4]
 8011c86:	4b0c      	ldr	r3, [pc, #48]	@ (8011cb8 <cleanup_stdio+0x34>)
 8011c88:	4299      	cmp	r1, r3
 8011c8a:	b510      	push	{r4, lr}
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	d001      	beq.n	8011c94 <cleanup_stdio+0x10>
 8011c90:	f001 fda6 	bl	80137e0 <_fflush_r>
 8011c94:	68a1      	ldr	r1, [r4, #8]
 8011c96:	4b09      	ldr	r3, [pc, #36]	@ (8011cbc <cleanup_stdio+0x38>)
 8011c98:	4299      	cmp	r1, r3
 8011c9a:	d002      	beq.n	8011ca2 <cleanup_stdio+0x1e>
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f001 fd9f 	bl	80137e0 <_fflush_r>
 8011ca2:	68e1      	ldr	r1, [r4, #12]
 8011ca4:	4b06      	ldr	r3, [pc, #24]	@ (8011cc0 <cleanup_stdio+0x3c>)
 8011ca6:	4299      	cmp	r1, r3
 8011ca8:	d004      	beq.n	8011cb4 <cleanup_stdio+0x30>
 8011caa:	4620      	mov	r0, r4
 8011cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cb0:	f001 bd96 	b.w	80137e0 <_fflush_r>
 8011cb4:	bd10      	pop	{r4, pc}
 8011cb6:	bf00      	nop
 8011cb8:	240034b8 	.word	0x240034b8
 8011cbc:	24003520 	.word	0x24003520
 8011cc0:	24003588 	.word	0x24003588

08011cc4 <global_stdio_init.part.0>:
 8011cc4:	b510      	push	{r4, lr}
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf4 <global_stdio_init.part.0+0x30>)
 8011cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8011cf8 <global_stdio_init.part.0+0x34>)
 8011cca:	4a0c      	ldr	r2, [pc, #48]	@ (8011cfc <global_stdio_init.part.0+0x38>)
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	4620      	mov	r0, r4
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	2104      	movs	r1, #4
 8011cd4:	f7ff ff94 	bl	8011c00 <std>
 8011cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011cdc:	2201      	movs	r2, #1
 8011cde:	2109      	movs	r1, #9
 8011ce0:	f7ff ff8e 	bl	8011c00 <std>
 8011ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011ce8:	2202      	movs	r2, #2
 8011cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cee:	2112      	movs	r1, #18
 8011cf0:	f7ff bf86 	b.w	8011c00 <std>
 8011cf4:	240035f0 	.word	0x240035f0
 8011cf8:	240034b8 	.word	0x240034b8
 8011cfc:	08011c6d 	.word	0x08011c6d

08011d00 <__sfp_lock_acquire>:
 8011d00:	4801      	ldr	r0, [pc, #4]	@ (8011d08 <__sfp_lock_acquire+0x8>)
 8011d02:	f000 b920 	b.w	8011f46 <__retarget_lock_acquire_recursive>
 8011d06:	bf00      	nop
 8011d08:	240035f9 	.word	0x240035f9

08011d0c <__sfp_lock_release>:
 8011d0c:	4801      	ldr	r0, [pc, #4]	@ (8011d14 <__sfp_lock_release+0x8>)
 8011d0e:	f000 b91b 	b.w	8011f48 <__retarget_lock_release_recursive>
 8011d12:	bf00      	nop
 8011d14:	240035f9 	.word	0x240035f9

08011d18 <__sinit>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	f7ff fff0 	bl	8011d00 <__sfp_lock_acquire>
 8011d20:	6a23      	ldr	r3, [r4, #32]
 8011d22:	b11b      	cbz	r3, 8011d2c <__sinit+0x14>
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f7ff bff0 	b.w	8011d0c <__sfp_lock_release>
 8011d2c:	4b04      	ldr	r3, [pc, #16]	@ (8011d40 <__sinit+0x28>)
 8011d2e:	6223      	str	r3, [r4, #32]
 8011d30:	4b04      	ldr	r3, [pc, #16]	@ (8011d44 <__sinit+0x2c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d1f5      	bne.n	8011d24 <__sinit+0xc>
 8011d38:	f7ff ffc4 	bl	8011cc4 <global_stdio_init.part.0>
 8011d3c:	e7f2      	b.n	8011d24 <__sinit+0xc>
 8011d3e:	bf00      	nop
 8011d40:	08011c85 	.word	0x08011c85
 8011d44:	240035f0 	.word	0x240035f0

08011d48 <_fwalk_sglue>:
 8011d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d4c:	4607      	mov	r7, r0
 8011d4e:	4688      	mov	r8, r1
 8011d50:	4614      	mov	r4, r2
 8011d52:	2600      	movs	r6, #0
 8011d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d58:	f1b9 0901 	subs.w	r9, r9, #1
 8011d5c:	d505      	bpl.n	8011d6a <_fwalk_sglue+0x22>
 8011d5e:	6824      	ldr	r4, [r4, #0]
 8011d60:	2c00      	cmp	r4, #0
 8011d62:	d1f7      	bne.n	8011d54 <_fwalk_sglue+0xc>
 8011d64:	4630      	mov	r0, r6
 8011d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d6a:	89ab      	ldrh	r3, [r5, #12]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d907      	bls.n	8011d80 <_fwalk_sglue+0x38>
 8011d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d74:	3301      	adds	r3, #1
 8011d76:	d003      	beq.n	8011d80 <_fwalk_sglue+0x38>
 8011d78:	4629      	mov	r1, r5
 8011d7a:	4638      	mov	r0, r7
 8011d7c:	47c0      	blx	r8
 8011d7e:	4306      	orrs	r6, r0
 8011d80:	3568      	adds	r5, #104	@ 0x68
 8011d82:	e7e9      	b.n	8011d58 <_fwalk_sglue+0x10>

08011d84 <siprintf>:
 8011d84:	b40e      	push	{r1, r2, r3}
 8011d86:	b500      	push	{lr}
 8011d88:	b09c      	sub	sp, #112	@ 0x70
 8011d8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d8c:	9002      	str	r0, [sp, #8]
 8011d8e:	9006      	str	r0, [sp, #24]
 8011d90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d94:	4809      	ldr	r0, [pc, #36]	@ (8011dbc <siprintf+0x38>)
 8011d96:	9107      	str	r1, [sp, #28]
 8011d98:	9104      	str	r1, [sp, #16]
 8011d9a:	4909      	ldr	r1, [pc, #36]	@ (8011dc0 <siprintf+0x3c>)
 8011d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da0:	9105      	str	r1, [sp, #20]
 8011da2:	6800      	ldr	r0, [r0, #0]
 8011da4:	9301      	str	r3, [sp, #4]
 8011da6:	a902      	add	r1, sp, #8
 8011da8:	f001 fb9a 	bl	80134e0 <_svfiprintf_r>
 8011dac:	9b02      	ldr	r3, [sp, #8]
 8011dae:	2200      	movs	r2, #0
 8011db0:	701a      	strb	r2, [r3, #0]
 8011db2:	b01c      	add	sp, #112	@ 0x70
 8011db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db8:	b003      	add	sp, #12
 8011dba:	4770      	bx	lr
 8011dbc:	24000110 	.word	0x24000110
 8011dc0:	ffff0208 	.word	0xffff0208

08011dc4 <__sread>:
 8011dc4:	b510      	push	{r4, lr}
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dcc:	f000 f86c 	bl	8011ea8 <_read_r>
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	bfab      	itete	ge
 8011dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8011dd8:	181b      	addge	r3, r3, r0
 8011dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011dde:	bfac      	ite	ge
 8011de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011de2:	81a3      	strhlt	r3, [r4, #12]
 8011de4:	bd10      	pop	{r4, pc}

08011de6 <__swrite>:
 8011de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dea:	461f      	mov	r7, r3
 8011dec:	898b      	ldrh	r3, [r1, #12]
 8011dee:	05db      	lsls	r3, r3, #23
 8011df0:	4605      	mov	r5, r0
 8011df2:	460c      	mov	r4, r1
 8011df4:	4616      	mov	r6, r2
 8011df6:	d505      	bpl.n	8011e04 <__swrite+0x1e>
 8011df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f000 f840 	bl	8011e84 <_lseek_r>
 8011e04:	89a3      	ldrh	r3, [r4, #12]
 8011e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e0e:	81a3      	strh	r3, [r4, #12]
 8011e10:	4632      	mov	r2, r6
 8011e12:	463b      	mov	r3, r7
 8011e14:	4628      	mov	r0, r5
 8011e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e1a:	f000 b857 	b.w	8011ecc <_write_r>

08011e1e <__sseek>:
 8011e1e:	b510      	push	{r4, lr}
 8011e20:	460c      	mov	r4, r1
 8011e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e26:	f000 f82d 	bl	8011e84 <_lseek_r>
 8011e2a:	1c43      	adds	r3, r0, #1
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	bf15      	itete	ne
 8011e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e3a:	81a3      	strheq	r3, [r4, #12]
 8011e3c:	bf18      	it	ne
 8011e3e:	81a3      	strhne	r3, [r4, #12]
 8011e40:	bd10      	pop	{r4, pc}

08011e42 <__sclose>:
 8011e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e46:	f000 b80d 	b.w	8011e64 <_close_r>

08011e4a <memset>:
 8011e4a:	4402      	add	r2, r0
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d100      	bne.n	8011e54 <memset+0xa>
 8011e52:	4770      	bx	lr
 8011e54:	f803 1b01 	strb.w	r1, [r3], #1
 8011e58:	e7f9      	b.n	8011e4e <memset+0x4>
	...

08011e5c <_localeconv_r>:
 8011e5c:	4800      	ldr	r0, [pc, #0]	@ (8011e60 <_localeconv_r+0x4>)
 8011e5e:	4770      	bx	lr
 8011e60:	24000250 	.word	0x24000250

08011e64 <_close_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	4d06      	ldr	r5, [pc, #24]	@ (8011e80 <_close_r+0x1c>)
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	602b      	str	r3, [r5, #0]
 8011e70:	f7ef ffa4 	bl	8001dbc <_close>
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	d102      	bne.n	8011e7e <_close_r+0x1a>
 8011e78:	682b      	ldr	r3, [r5, #0]
 8011e7a:	b103      	cbz	r3, 8011e7e <_close_r+0x1a>
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	240035f4 	.word	0x240035f4

08011e84 <_lseek_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4d07      	ldr	r5, [pc, #28]	@ (8011ea4 <_lseek_r+0x20>)
 8011e88:	4604      	mov	r4, r0
 8011e8a:	4608      	mov	r0, r1
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	2200      	movs	r2, #0
 8011e90:	602a      	str	r2, [r5, #0]
 8011e92:	461a      	mov	r2, r3
 8011e94:	f7ef ffb9 	bl	8001e0a <_lseek>
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	d102      	bne.n	8011ea2 <_lseek_r+0x1e>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	b103      	cbz	r3, 8011ea2 <_lseek_r+0x1e>
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	bd38      	pop	{r3, r4, r5, pc}
 8011ea4:	240035f4 	.word	0x240035f4

08011ea8 <_read_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d07      	ldr	r5, [pc, #28]	@ (8011ec8 <_read_r+0x20>)
 8011eac:	4604      	mov	r4, r0
 8011eae:	4608      	mov	r0, r1
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	602a      	str	r2, [r5, #0]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	f7ef ff47 	bl	8001d4a <_read>
 8011ebc:	1c43      	adds	r3, r0, #1
 8011ebe:	d102      	bne.n	8011ec6 <_read_r+0x1e>
 8011ec0:	682b      	ldr	r3, [r5, #0]
 8011ec2:	b103      	cbz	r3, 8011ec6 <_read_r+0x1e>
 8011ec4:	6023      	str	r3, [r4, #0]
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	240035f4 	.word	0x240035f4

08011ecc <_write_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d07      	ldr	r5, [pc, #28]	@ (8011eec <_write_r+0x20>)
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	4608      	mov	r0, r1
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	602a      	str	r2, [r5, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	f7ef ff52 	bl	8001d84 <_write>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	d102      	bne.n	8011eea <_write_r+0x1e>
 8011ee4:	682b      	ldr	r3, [r5, #0]
 8011ee6:	b103      	cbz	r3, 8011eea <_write_r+0x1e>
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	bd38      	pop	{r3, r4, r5, pc}
 8011eec:	240035f4 	.word	0x240035f4

08011ef0 <__errno>:
 8011ef0:	4b01      	ldr	r3, [pc, #4]	@ (8011ef8 <__errno+0x8>)
 8011ef2:	6818      	ldr	r0, [r3, #0]
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	24000110 	.word	0x24000110

08011efc <__libc_init_array>:
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	4d0d      	ldr	r5, [pc, #52]	@ (8011f34 <__libc_init_array+0x38>)
 8011f00:	4c0d      	ldr	r4, [pc, #52]	@ (8011f38 <__libc_init_array+0x3c>)
 8011f02:	1b64      	subs	r4, r4, r5
 8011f04:	10a4      	asrs	r4, r4, #2
 8011f06:	2600      	movs	r6, #0
 8011f08:	42a6      	cmp	r6, r4
 8011f0a:	d109      	bne.n	8011f20 <__libc_init_array+0x24>
 8011f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f3c <__libc_init_array+0x40>)
 8011f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f40 <__libc_init_array+0x44>)
 8011f10:	f001 fff6 	bl	8013f00 <_init>
 8011f14:	1b64      	subs	r4, r4, r5
 8011f16:	10a4      	asrs	r4, r4, #2
 8011f18:	2600      	movs	r6, #0
 8011f1a:	42a6      	cmp	r6, r4
 8011f1c:	d105      	bne.n	8011f2a <__libc_init_array+0x2e>
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f24:	4798      	blx	r3
 8011f26:	3601      	adds	r6, #1
 8011f28:	e7ee      	b.n	8011f08 <__libc_init_array+0xc>
 8011f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f2e:	4798      	blx	r3
 8011f30:	3601      	adds	r6, #1
 8011f32:	e7f2      	b.n	8011f1a <__libc_init_array+0x1e>
 8011f34:	08014330 	.word	0x08014330
 8011f38:	08014330 	.word	0x08014330
 8011f3c:	08014330 	.word	0x08014330
 8011f40:	08014334 	.word	0x08014334

08011f44 <__retarget_lock_init_recursive>:
 8011f44:	4770      	bx	lr

08011f46 <__retarget_lock_acquire_recursive>:
 8011f46:	4770      	bx	lr

08011f48 <__retarget_lock_release_recursive>:
 8011f48:	4770      	bx	lr

08011f4a <memcpy>:
 8011f4a:	440a      	add	r2, r1
 8011f4c:	4291      	cmp	r1, r2
 8011f4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f52:	d100      	bne.n	8011f56 <memcpy+0xc>
 8011f54:	4770      	bx	lr
 8011f56:	b510      	push	{r4, lr}
 8011f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f60:	4291      	cmp	r1, r2
 8011f62:	d1f9      	bne.n	8011f58 <memcpy+0xe>
 8011f64:	bd10      	pop	{r4, pc}

08011f66 <quorem>:
 8011f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6a:	6903      	ldr	r3, [r0, #16]
 8011f6c:	690c      	ldr	r4, [r1, #16]
 8011f6e:	42a3      	cmp	r3, r4
 8011f70:	4607      	mov	r7, r0
 8011f72:	db7e      	blt.n	8012072 <quorem+0x10c>
 8011f74:	3c01      	subs	r4, #1
 8011f76:	f101 0814 	add.w	r8, r1, #20
 8011f7a:	00a3      	lsls	r3, r4, #2
 8011f7c:	f100 0514 	add.w	r5, r0, #20
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f86:	9301      	str	r3, [sp, #4]
 8011f88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f90:	3301      	adds	r3, #1
 8011f92:	429a      	cmp	r2, r3
 8011f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f9c:	d32e      	bcc.n	8011ffc <quorem+0x96>
 8011f9e:	f04f 0a00 	mov.w	sl, #0
 8011fa2:	46c4      	mov	ip, r8
 8011fa4:	46ae      	mov	lr, r5
 8011fa6:	46d3      	mov	fp, sl
 8011fa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011fac:	b298      	uxth	r0, r3
 8011fae:	fb06 a000 	mla	r0, r6, r0, sl
 8011fb2:	0c02      	lsrs	r2, r0, #16
 8011fb4:	0c1b      	lsrs	r3, r3, #16
 8011fb6:	fb06 2303 	mla	r3, r6, r3, r2
 8011fba:	f8de 2000 	ldr.w	r2, [lr]
 8011fbe:	b280      	uxth	r0, r0
 8011fc0:	b292      	uxth	r2, r2
 8011fc2:	1a12      	subs	r2, r2, r0
 8011fc4:	445a      	add	r2, fp
 8011fc6:	f8de 0000 	ldr.w	r0, [lr]
 8011fca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011fd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011fd8:	b292      	uxth	r2, r2
 8011fda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011fde:	45e1      	cmp	r9, ip
 8011fe0:	f84e 2b04 	str.w	r2, [lr], #4
 8011fe4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011fe8:	d2de      	bcs.n	8011fa8 <quorem+0x42>
 8011fea:	9b00      	ldr	r3, [sp, #0]
 8011fec:	58eb      	ldr	r3, [r5, r3]
 8011fee:	b92b      	cbnz	r3, 8011ffc <quorem+0x96>
 8011ff0:	9b01      	ldr	r3, [sp, #4]
 8011ff2:	3b04      	subs	r3, #4
 8011ff4:	429d      	cmp	r5, r3
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	d32f      	bcc.n	801205a <quorem+0xf4>
 8011ffa:	613c      	str	r4, [r7, #16]
 8011ffc:	4638      	mov	r0, r7
 8011ffe:	f001 f90b 	bl	8013218 <__mcmp>
 8012002:	2800      	cmp	r0, #0
 8012004:	db25      	blt.n	8012052 <quorem+0xec>
 8012006:	4629      	mov	r1, r5
 8012008:	2000      	movs	r0, #0
 801200a:	f858 2b04 	ldr.w	r2, [r8], #4
 801200e:	f8d1 c000 	ldr.w	ip, [r1]
 8012012:	fa1f fe82 	uxth.w	lr, r2
 8012016:	fa1f f38c 	uxth.w	r3, ip
 801201a:	eba3 030e 	sub.w	r3, r3, lr
 801201e:	4403      	add	r3, r0
 8012020:	0c12      	lsrs	r2, r2, #16
 8012022:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012026:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801202a:	b29b      	uxth	r3, r3
 801202c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012030:	45c1      	cmp	r9, r8
 8012032:	f841 3b04 	str.w	r3, [r1], #4
 8012036:	ea4f 4022 	mov.w	r0, r2, asr #16
 801203a:	d2e6      	bcs.n	801200a <quorem+0xa4>
 801203c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012044:	b922      	cbnz	r2, 8012050 <quorem+0xea>
 8012046:	3b04      	subs	r3, #4
 8012048:	429d      	cmp	r5, r3
 801204a:	461a      	mov	r2, r3
 801204c:	d30b      	bcc.n	8012066 <quorem+0x100>
 801204e:	613c      	str	r4, [r7, #16]
 8012050:	3601      	adds	r6, #1
 8012052:	4630      	mov	r0, r6
 8012054:	b003      	add	sp, #12
 8012056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205a:	6812      	ldr	r2, [r2, #0]
 801205c:	3b04      	subs	r3, #4
 801205e:	2a00      	cmp	r2, #0
 8012060:	d1cb      	bne.n	8011ffa <quorem+0x94>
 8012062:	3c01      	subs	r4, #1
 8012064:	e7c6      	b.n	8011ff4 <quorem+0x8e>
 8012066:	6812      	ldr	r2, [r2, #0]
 8012068:	3b04      	subs	r3, #4
 801206a:	2a00      	cmp	r2, #0
 801206c:	d1ef      	bne.n	801204e <quorem+0xe8>
 801206e:	3c01      	subs	r4, #1
 8012070:	e7ea      	b.n	8012048 <quorem+0xe2>
 8012072:	2000      	movs	r0, #0
 8012074:	e7ee      	b.n	8012054 <quorem+0xee>
	...

08012078 <_dtoa_r>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	ed2d 8b02 	vpush	{d8}
 8012080:	69c7      	ldr	r7, [r0, #28]
 8012082:	b091      	sub	sp, #68	@ 0x44
 8012084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012088:	ec55 4b10 	vmov	r4, r5, d0
 801208c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801208e:	9107      	str	r1, [sp, #28]
 8012090:	4681      	mov	r9, r0
 8012092:	9209      	str	r2, [sp, #36]	@ 0x24
 8012094:	930d      	str	r3, [sp, #52]	@ 0x34
 8012096:	b97f      	cbnz	r7, 80120b8 <_dtoa_r+0x40>
 8012098:	2010      	movs	r0, #16
 801209a:	f000 fd8d 	bl	8012bb8 <malloc>
 801209e:	4602      	mov	r2, r0
 80120a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80120a4:	b920      	cbnz	r0, 80120b0 <_dtoa_r+0x38>
 80120a6:	4ba0      	ldr	r3, [pc, #640]	@ (8012328 <_dtoa_r+0x2b0>)
 80120a8:	21ef      	movs	r1, #239	@ 0xef
 80120aa:	48a0      	ldr	r0, [pc, #640]	@ (801232c <_dtoa_r+0x2b4>)
 80120ac:	f001 fbea 	bl	8013884 <__assert_func>
 80120b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80120b4:	6007      	str	r7, [r0, #0]
 80120b6:	60c7      	str	r7, [r0, #12]
 80120b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80120bc:	6819      	ldr	r1, [r3, #0]
 80120be:	b159      	cbz	r1, 80120d8 <_dtoa_r+0x60>
 80120c0:	685a      	ldr	r2, [r3, #4]
 80120c2:	604a      	str	r2, [r1, #4]
 80120c4:	2301      	movs	r3, #1
 80120c6:	4093      	lsls	r3, r2
 80120c8:	608b      	str	r3, [r1, #8]
 80120ca:	4648      	mov	r0, r9
 80120cc:	f000 fe6a 	bl	8012da4 <_Bfree>
 80120d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80120d4:	2200      	movs	r2, #0
 80120d6:	601a      	str	r2, [r3, #0]
 80120d8:	1e2b      	subs	r3, r5, #0
 80120da:	bfbb      	ittet	lt
 80120dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80120e0:	9303      	strlt	r3, [sp, #12]
 80120e2:	2300      	movge	r3, #0
 80120e4:	2201      	movlt	r2, #1
 80120e6:	bfac      	ite	ge
 80120e8:	6033      	strge	r3, [r6, #0]
 80120ea:	6032      	strlt	r2, [r6, #0]
 80120ec:	4b90      	ldr	r3, [pc, #576]	@ (8012330 <_dtoa_r+0x2b8>)
 80120ee:	9e03      	ldr	r6, [sp, #12]
 80120f0:	43b3      	bics	r3, r6
 80120f2:	d110      	bne.n	8012116 <_dtoa_r+0x9e>
 80120f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80120f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80120fa:	6013      	str	r3, [r2, #0]
 80120fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012100:	4323      	orrs	r3, r4
 8012102:	f000 84de 	beq.w	8012ac2 <_dtoa_r+0xa4a>
 8012106:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012108:	4f8a      	ldr	r7, [pc, #552]	@ (8012334 <_dtoa_r+0x2bc>)
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 84e0 	beq.w	8012ad0 <_dtoa_r+0xa58>
 8012110:	1cfb      	adds	r3, r7, #3
 8012112:	f000 bcdb 	b.w	8012acc <_dtoa_r+0xa54>
 8012116:	ed9d 8b02 	vldr	d8, [sp, #8]
 801211a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	d10a      	bne.n	801213a <_dtoa_r+0xc2>
 8012124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012126:	2301      	movs	r3, #1
 8012128:	6013      	str	r3, [r2, #0]
 801212a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801212c:	b113      	cbz	r3, 8012134 <_dtoa_r+0xbc>
 801212e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012130:	4b81      	ldr	r3, [pc, #516]	@ (8012338 <_dtoa_r+0x2c0>)
 8012132:	6013      	str	r3, [r2, #0]
 8012134:	4f81      	ldr	r7, [pc, #516]	@ (801233c <_dtoa_r+0x2c4>)
 8012136:	f000 bccb 	b.w	8012ad0 <_dtoa_r+0xa58>
 801213a:	aa0e      	add	r2, sp, #56	@ 0x38
 801213c:	a90f      	add	r1, sp, #60	@ 0x3c
 801213e:	4648      	mov	r0, r9
 8012140:	eeb0 0b48 	vmov.f64	d0, d8
 8012144:	f001 f918 	bl	8013378 <__d2b>
 8012148:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801214c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801214e:	9001      	str	r0, [sp, #4]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d045      	beq.n	80121e0 <_dtoa_r+0x168>
 8012154:	eeb0 7b48 	vmov.f64	d7, d8
 8012158:	ee18 1a90 	vmov	r1, s17
 801215c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012160:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012164:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012168:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801216c:	2500      	movs	r5, #0
 801216e:	ee07 1a90 	vmov	s15, r1
 8012172:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012176:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012310 <_dtoa_r+0x298>
 801217a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801217e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012318 <_dtoa_r+0x2a0>
 8012182:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012186:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012320 <_dtoa_r+0x2a8>
 801218a:	ee07 3a90 	vmov	s15, r3
 801218e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012192:	eeb0 7b46 	vmov.f64	d7, d6
 8012196:	eea4 7b05 	vfma.f64	d7, d4, d5
 801219a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801219e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80121a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a6:	ee16 8a90 	vmov	r8, s13
 80121aa:	d508      	bpl.n	80121be <_dtoa_r+0x146>
 80121ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80121b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	bf18      	it	ne
 80121ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 80121be:	f1b8 0f16 	cmp.w	r8, #22
 80121c2:	d82b      	bhi.n	801221c <_dtoa_r+0x1a4>
 80121c4:	495e      	ldr	r1, [pc, #376]	@ (8012340 <_dtoa_r+0x2c8>)
 80121c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80121ca:	ed91 7b00 	vldr	d7, [r1]
 80121ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80121d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d6:	d501      	bpl.n	80121dc <_dtoa_r+0x164>
 80121d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80121dc:	2100      	movs	r1, #0
 80121de:	e01e      	b.n	801221e <_dtoa_r+0x1a6>
 80121e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121e2:	4413      	add	r3, r2
 80121e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80121e8:	2920      	cmp	r1, #32
 80121ea:	bfc1      	itttt	gt
 80121ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80121f0:	408e      	lslgt	r6, r1
 80121f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80121f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80121fa:	bfd6      	itet	le
 80121fc:	f1c1 0120 	rsble	r1, r1, #32
 8012200:	4331      	orrgt	r1, r6
 8012202:	fa04 f101 	lslle.w	r1, r4, r1
 8012206:	ee07 1a90 	vmov	s15, r1
 801220a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801220e:	3b01      	subs	r3, #1
 8012210:	ee17 1a90 	vmov	r1, s15
 8012214:	2501      	movs	r5, #1
 8012216:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801221a:	e7a8      	b.n	801216e <_dtoa_r+0xf6>
 801221c:	2101      	movs	r1, #1
 801221e:	1ad2      	subs	r2, r2, r3
 8012220:	1e53      	subs	r3, r2, #1
 8012222:	9306      	str	r3, [sp, #24]
 8012224:	bf45      	ittet	mi
 8012226:	f1c2 0301 	rsbmi	r3, r2, #1
 801222a:	9305      	strmi	r3, [sp, #20]
 801222c:	2300      	movpl	r3, #0
 801222e:	2300      	movmi	r3, #0
 8012230:	bf4c      	ite	mi
 8012232:	9306      	strmi	r3, [sp, #24]
 8012234:	9305      	strpl	r3, [sp, #20]
 8012236:	f1b8 0f00 	cmp.w	r8, #0
 801223a:	910c      	str	r1, [sp, #48]	@ 0x30
 801223c:	db18      	blt.n	8012270 <_dtoa_r+0x1f8>
 801223e:	9b06      	ldr	r3, [sp, #24]
 8012240:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012244:	4443      	add	r3, r8
 8012246:	9306      	str	r3, [sp, #24]
 8012248:	2300      	movs	r3, #0
 801224a:	9a07      	ldr	r2, [sp, #28]
 801224c:	2a09      	cmp	r2, #9
 801224e:	d849      	bhi.n	80122e4 <_dtoa_r+0x26c>
 8012250:	2a05      	cmp	r2, #5
 8012252:	bfc4      	itt	gt
 8012254:	3a04      	subgt	r2, #4
 8012256:	9207      	strgt	r2, [sp, #28]
 8012258:	9a07      	ldr	r2, [sp, #28]
 801225a:	f1a2 0202 	sub.w	r2, r2, #2
 801225e:	bfcc      	ite	gt
 8012260:	2400      	movgt	r4, #0
 8012262:	2401      	movle	r4, #1
 8012264:	2a03      	cmp	r2, #3
 8012266:	d848      	bhi.n	80122fa <_dtoa_r+0x282>
 8012268:	e8df f002 	tbb	[pc, r2]
 801226c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012270:	9b05      	ldr	r3, [sp, #20]
 8012272:	2200      	movs	r2, #0
 8012274:	eba3 0308 	sub.w	r3, r3, r8
 8012278:	9305      	str	r3, [sp, #20]
 801227a:	920a      	str	r2, [sp, #40]	@ 0x28
 801227c:	f1c8 0300 	rsb	r3, r8, #0
 8012280:	e7e3      	b.n	801224a <_dtoa_r+0x1d2>
 8012282:	2200      	movs	r2, #0
 8012284:	9208      	str	r2, [sp, #32]
 8012286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012288:	2a00      	cmp	r2, #0
 801228a:	dc39      	bgt.n	8012300 <_dtoa_r+0x288>
 801228c:	f04f 0b01 	mov.w	fp, #1
 8012290:	46da      	mov	sl, fp
 8012292:	465a      	mov	r2, fp
 8012294:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012298:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801229c:	2100      	movs	r1, #0
 801229e:	2004      	movs	r0, #4
 80122a0:	f100 0614 	add.w	r6, r0, #20
 80122a4:	4296      	cmp	r6, r2
 80122a6:	d930      	bls.n	801230a <_dtoa_r+0x292>
 80122a8:	6079      	str	r1, [r7, #4]
 80122aa:	4648      	mov	r0, r9
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	f000 fd39 	bl	8012d24 <_Balloc>
 80122b2:	9b04      	ldr	r3, [sp, #16]
 80122b4:	4607      	mov	r7, r0
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d146      	bne.n	8012348 <_dtoa_r+0x2d0>
 80122ba:	4b22      	ldr	r3, [pc, #136]	@ (8012344 <_dtoa_r+0x2cc>)
 80122bc:	4602      	mov	r2, r0
 80122be:	f240 11af 	movw	r1, #431	@ 0x1af
 80122c2:	e6f2      	b.n	80120aa <_dtoa_r+0x32>
 80122c4:	2201      	movs	r2, #1
 80122c6:	e7dd      	b.n	8012284 <_dtoa_r+0x20c>
 80122c8:	2200      	movs	r2, #0
 80122ca:	9208      	str	r2, [sp, #32]
 80122cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122ce:	eb08 0b02 	add.w	fp, r8, r2
 80122d2:	f10b 0a01 	add.w	sl, fp, #1
 80122d6:	4652      	mov	r2, sl
 80122d8:	2a01      	cmp	r2, #1
 80122da:	bfb8      	it	lt
 80122dc:	2201      	movlt	r2, #1
 80122de:	e7db      	b.n	8012298 <_dtoa_r+0x220>
 80122e0:	2201      	movs	r2, #1
 80122e2:	e7f2      	b.n	80122ca <_dtoa_r+0x252>
 80122e4:	2401      	movs	r4, #1
 80122e6:	2200      	movs	r2, #0
 80122e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80122ec:	f04f 3bff 	mov.w	fp, #4294967295
 80122f0:	2100      	movs	r1, #0
 80122f2:	46da      	mov	sl, fp
 80122f4:	2212      	movs	r2, #18
 80122f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80122f8:	e7ce      	b.n	8012298 <_dtoa_r+0x220>
 80122fa:	2201      	movs	r2, #1
 80122fc:	9208      	str	r2, [sp, #32]
 80122fe:	e7f5      	b.n	80122ec <_dtoa_r+0x274>
 8012300:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012304:	46da      	mov	sl, fp
 8012306:	465a      	mov	r2, fp
 8012308:	e7c6      	b.n	8012298 <_dtoa_r+0x220>
 801230a:	3101      	adds	r1, #1
 801230c:	0040      	lsls	r0, r0, #1
 801230e:	e7c7      	b.n	80122a0 <_dtoa_r+0x228>
 8012310:	636f4361 	.word	0x636f4361
 8012314:	3fd287a7 	.word	0x3fd287a7
 8012318:	8b60c8b3 	.word	0x8b60c8b3
 801231c:	3fc68a28 	.word	0x3fc68a28
 8012320:	509f79fb 	.word	0x509f79fb
 8012324:	3fd34413 	.word	0x3fd34413
 8012328:	08013ff5 	.word	0x08013ff5
 801232c:	0801400c 	.word	0x0801400c
 8012330:	7ff00000 	.word	0x7ff00000
 8012334:	08013ff1 	.word	0x08013ff1
 8012338:	08013fc5 	.word	0x08013fc5
 801233c:	08013fc4 	.word	0x08013fc4
 8012340:	08014108 	.word	0x08014108
 8012344:	08014064 	.word	0x08014064
 8012348:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801234c:	f1ba 0f0e 	cmp.w	sl, #14
 8012350:	6010      	str	r0, [r2, #0]
 8012352:	d86f      	bhi.n	8012434 <_dtoa_r+0x3bc>
 8012354:	2c00      	cmp	r4, #0
 8012356:	d06d      	beq.n	8012434 <_dtoa_r+0x3bc>
 8012358:	f1b8 0f00 	cmp.w	r8, #0
 801235c:	f340 80c2 	ble.w	80124e4 <_dtoa_r+0x46c>
 8012360:	4aca      	ldr	r2, [pc, #808]	@ (801268c <_dtoa_r+0x614>)
 8012362:	f008 010f 	and.w	r1, r8, #15
 8012366:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801236a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801236e:	ed92 7b00 	vldr	d7, [r2]
 8012372:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012376:	f000 80a9 	beq.w	80124cc <_dtoa_r+0x454>
 801237a:	4ac5      	ldr	r2, [pc, #788]	@ (8012690 <_dtoa_r+0x618>)
 801237c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012380:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012384:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012388:	f001 010f 	and.w	r1, r1, #15
 801238c:	2203      	movs	r2, #3
 801238e:	48c0      	ldr	r0, [pc, #768]	@ (8012690 <_dtoa_r+0x618>)
 8012390:	2900      	cmp	r1, #0
 8012392:	f040 809d 	bne.w	80124d0 <_dtoa_r+0x458>
 8012396:	ed9d 6b02 	vldr	d6, [sp, #8]
 801239a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801239e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80123a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123a8:	2900      	cmp	r1, #0
 80123aa:	f000 80c1 	beq.w	8012530 <_dtoa_r+0x4b8>
 80123ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80123b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ba:	f140 80b9 	bpl.w	8012530 <_dtoa_r+0x4b8>
 80123be:	f1ba 0f00 	cmp.w	sl, #0
 80123c2:	f000 80b5 	beq.w	8012530 <_dtoa_r+0x4b8>
 80123c6:	f1bb 0f00 	cmp.w	fp, #0
 80123ca:	dd31      	ble.n	8012430 <_dtoa_r+0x3b8>
 80123cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80123d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80123d8:	f108 31ff 	add.w	r1, r8, #4294967295
 80123dc:	9104      	str	r1, [sp, #16]
 80123de:	3201      	adds	r2, #1
 80123e0:	465c      	mov	r4, fp
 80123e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80123e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80123ea:	ee07 2a90 	vmov	s15, r2
 80123ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80123f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80123f6:	ee15 2a90 	vmov	r2, s11
 80123fa:	ec51 0b15 	vmov	r0, r1, d5
 80123fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012402:	2c00      	cmp	r4, #0
 8012404:	f040 8098 	bne.w	8012538 <_dtoa_r+0x4c0>
 8012408:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801240c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012410:	ec41 0b17 	vmov	d7, r0, r1
 8012414:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	f300 8261 	bgt.w	80128e2 <_dtoa_r+0x86a>
 8012420:	eeb1 7b47 	vneg.f64	d7, d7
 8012424:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242c:	f100 80f5 	bmi.w	801261a <_dtoa_r+0x5a2>
 8012430:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012434:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012436:	2a00      	cmp	r2, #0
 8012438:	f2c0 812c 	blt.w	8012694 <_dtoa_r+0x61c>
 801243c:	f1b8 0f0e 	cmp.w	r8, #14
 8012440:	f300 8128 	bgt.w	8012694 <_dtoa_r+0x61c>
 8012444:	4b91      	ldr	r3, [pc, #580]	@ (801268c <_dtoa_r+0x614>)
 8012446:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801244a:	ed93 6b00 	vldr	d6, [r3]
 801244e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012450:	2b00      	cmp	r3, #0
 8012452:	da03      	bge.n	801245c <_dtoa_r+0x3e4>
 8012454:	f1ba 0f00 	cmp.w	sl, #0
 8012458:	f340 80d2 	ble.w	8012600 <_dtoa_r+0x588>
 801245c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012464:	463e      	mov	r6, r7
 8012466:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801246a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801246e:	ee15 3a10 	vmov	r3, s10
 8012472:	3330      	adds	r3, #48	@ 0x30
 8012474:	f806 3b01 	strb.w	r3, [r6], #1
 8012478:	1bf3      	subs	r3, r6, r7
 801247a:	459a      	cmp	sl, r3
 801247c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012480:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012484:	f040 80f8 	bne.w	8012678 <_dtoa_r+0x600>
 8012488:	ee37 7b07 	vadd.f64	d7, d7, d7
 801248c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	f300 80dd 	bgt.w	8012652 <_dtoa_r+0x5da>
 8012498:	eeb4 7b46 	vcmp.f64	d7, d6
 801249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a0:	d104      	bne.n	80124ac <_dtoa_r+0x434>
 80124a2:	ee15 3a10 	vmov	r3, s10
 80124a6:	07db      	lsls	r3, r3, #31
 80124a8:	f100 80d3 	bmi.w	8012652 <_dtoa_r+0x5da>
 80124ac:	9901      	ldr	r1, [sp, #4]
 80124ae:	4648      	mov	r0, r9
 80124b0:	f000 fc78 	bl	8012da4 <_Bfree>
 80124b4:	2300      	movs	r3, #0
 80124b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124b8:	7033      	strb	r3, [r6, #0]
 80124ba:	f108 0301 	add.w	r3, r8, #1
 80124be:	6013      	str	r3, [r2, #0]
 80124c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	f000 8304 	beq.w	8012ad0 <_dtoa_r+0xa58>
 80124c8:	601e      	str	r6, [r3, #0]
 80124ca:	e301      	b.n	8012ad0 <_dtoa_r+0xa58>
 80124cc:	2202      	movs	r2, #2
 80124ce:	e75e      	b.n	801238e <_dtoa_r+0x316>
 80124d0:	07cc      	lsls	r4, r1, #31
 80124d2:	d504      	bpl.n	80124de <_dtoa_r+0x466>
 80124d4:	ed90 6b00 	vldr	d6, [r0]
 80124d8:	3201      	adds	r2, #1
 80124da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80124de:	1049      	asrs	r1, r1, #1
 80124e0:	3008      	adds	r0, #8
 80124e2:	e755      	b.n	8012390 <_dtoa_r+0x318>
 80124e4:	d022      	beq.n	801252c <_dtoa_r+0x4b4>
 80124e6:	f1c8 0100 	rsb	r1, r8, #0
 80124ea:	4a68      	ldr	r2, [pc, #416]	@ (801268c <_dtoa_r+0x614>)
 80124ec:	f001 000f 	and.w	r0, r1, #15
 80124f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80124f4:	ed92 7b00 	vldr	d7, [r2]
 80124f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80124fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012500:	4863      	ldr	r0, [pc, #396]	@ (8012690 <_dtoa_r+0x618>)
 8012502:	1109      	asrs	r1, r1, #4
 8012504:	2400      	movs	r4, #0
 8012506:	2202      	movs	r2, #2
 8012508:	b929      	cbnz	r1, 8012516 <_dtoa_r+0x49e>
 801250a:	2c00      	cmp	r4, #0
 801250c:	f43f af49 	beq.w	80123a2 <_dtoa_r+0x32a>
 8012510:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012514:	e745      	b.n	80123a2 <_dtoa_r+0x32a>
 8012516:	07ce      	lsls	r6, r1, #31
 8012518:	d505      	bpl.n	8012526 <_dtoa_r+0x4ae>
 801251a:	ed90 6b00 	vldr	d6, [r0]
 801251e:	3201      	adds	r2, #1
 8012520:	2401      	movs	r4, #1
 8012522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012526:	1049      	asrs	r1, r1, #1
 8012528:	3008      	adds	r0, #8
 801252a:	e7ed      	b.n	8012508 <_dtoa_r+0x490>
 801252c:	2202      	movs	r2, #2
 801252e:	e738      	b.n	80123a2 <_dtoa_r+0x32a>
 8012530:	f8cd 8010 	str.w	r8, [sp, #16]
 8012534:	4654      	mov	r4, sl
 8012536:	e754      	b.n	80123e2 <_dtoa_r+0x36a>
 8012538:	4a54      	ldr	r2, [pc, #336]	@ (801268c <_dtoa_r+0x614>)
 801253a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801253e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012542:	9a08      	ldr	r2, [sp, #32]
 8012544:	ec41 0b17 	vmov	d7, r0, r1
 8012548:	443c      	add	r4, r7
 801254a:	b34a      	cbz	r2, 80125a0 <_dtoa_r+0x528>
 801254c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012550:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012554:	463e      	mov	r6, r7
 8012556:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801255a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801255e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012562:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012566:	ee14 2a90 	vmov	r2, s9
 801256a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801256e:	3230      	adds	r2, #48	@ 0x30
 8012570:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012574:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257c:	f806 2b01 	strb.w	r2, [r6], #1
 8012580:	d438      	bmi.n	80125f4 <_dtoa_r+0x57c>
 8012582:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012586:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258e:	d462      	bmi.n	8012656 <_dtoa_r+0x5de>
 8012590:	42a6      	cmp	r6, r4
 8012592:	f43f af4d 	beq.w	8012430 <_dtoa_r+0x3b8>
 8012596:	ee27 7b03 	vmul.f64	d7, d7, d3
 801259a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801259e:	e7e0      	b.n	8012562 <_dtoa_r+0x4ea>
 80125a0:	4621      	mov	r1, r4
 80125a2:	463e      	mov	r6, r7
 80125a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80125a8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80125ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80125b0:	ee14 2a90 	vmov	r2, s9
 80125b4:	3230      	adds	r2, #48	@ 0x30
 80125b6:	f806 2b01 	strb.w	r2, [r6], #1
 80125ba:	42a6      	cmp	r6, r4
 80125bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80125c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80125c4:	d119      	bne.n	80125fa <_dtoa_r+0x582>
 80125c6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80125ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80125ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	dc3e      	bgt.n	8012656 <_dtoa_r+0x5de>
 80125d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80125dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80125e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e4:	f57f af24 	bpl.w	8012430 <_dtoa_r+0x3b8>
 80125e8:	460e      	mov	r6, r1
 80125ea:	3901      	subs	r1, #1
 80125ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125f0:	2b30      	cmp	r3, #48	@ 0x30
 80125f2:	d0f9      	beq.n	80125e8 <_dtoa_r+0x570>
 80125f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80125f8:	e758      	b.n	80124ac <_dtoa_r+0x434>
 80125fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80125fe:	e7d5      	b.n	80125ac <_dtoa_r+0x534>
 8012600:	d10b      	bne.n	801261a <_dtoa_r+0x5a2>
 8012602:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012606:	ee26 6b07 	vmul.f64	d6, d6, d7
 801260a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801260e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012616:	f2c0 8161 	blt.w	80128dc <_dtoa_r+0x864>
 801261a:	2400      	movs	r4, #0
 801261c:	4625      	mov	r5, r4
 801261e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012620:	43db      	mvns	r3, r3
 8012622:	9304      	str	r3, [sp, #16]
 8012624:	463e      	mov	r6, r7
 8012626:	f04f 0800 	mov.w	r8, #0
 801262a:	4621      	mov	r1, r4
 801262c:	4648      	mov	r0, r9
 801262e:	f000 fbb9 	bl	8012da4 <_Bfree>
 8012632:	2d00      	cmp	r5, #0
 8012634:	d0de      	beq.n	80125f4 <_dtoa_r+0x57c>
 8012636:	f1b8 0f00 	cmp.w	r8, #0
 801263a:	d005      	beq.n	8012648 <_dtoa_r+0x5d0>
 801263c:	45a8      	cmp	r8, r5
 801263e:	d003      	beq.n	8012648 <_dtoa_r+0x5d0>
 8012640:	4641      	mov	r1, r8
 8012642:	4648      	mov	r0, r9
 8012644:	f000 fbae 	bl	8012da4 <_Bfree>
 8012648:	4629      	mov	r1, r5
 801264a:	4648      	mov	r0, r9
 801264c:	f000 fbaa 	bl	8012da4 <_Bfree>
 8012650:	e7d0      	b.n	80125f4 <_dtoa_r+0x57c>
 8012652:	f8cd 8010 	str.w	r8, [sp, #16]
 8012656:	4633      	mov	r3, r6
 8012658:	461e      	mov	r6, r3
 801265a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801265e:	2a39      	cmp	r2, #57	@ 0x39
 8012660:	d106      	bne.n	8012670 <_dtoa_r+0x5f8>
 8012662:	429f      	cmp	r7, r3
 8012664:	d1f8      	bne.n	8012658 <_dtoa_r+0x5e0>
 8012666:	9a04      	ldr	r2, [sp, #16]
 8012668:	3201      	adds	r2, #1
 801266a:	9204      	str	r2, [sp, #16]
 801266c:	2230      	movs	r2, #48	@ 0x30
 801266e:	703a      	strb	r2, [r7, #0]
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	3201      	adds	r2, #1
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	e7bd      	b.n	80125f4 <_dtoa_r+0x57c>
 8012678:	ee27 7b04 	vmul.f64	d7, d7, d4
 801267c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012684:	f47f aeef 	bne.w	8012466 <_dtoa_r+0x3ee>
 8012688:	e710      	b.n	80124ac <_dtoa_r+0x434>
 801268a:	bf00      	nop
 801268c:	08014108 	.word	0x08014108
 8012690:	080140e0 	.word	0x080140e0
 8012694:	9908      	ldr	r1, [sp, #32]
 8012696:	2900      	cmp	r1, #0
 8012698:	f000 80e3 	beq.w	8012862 <_dtoa_r+0x7ea>
 801269c:	9907      	ldr	r1, [sp, #28]
 801269e:	2901      	cmp	r1, #1
 80126a0:	f300 80c8 	bgt.w	8012834 <_dtoa_r+0x7bc>
 80126a4:	2d00      	cmp	r5, #0
 80126a6:	f000 80c1 	beq.w	801282c <_dtoa_r+0x7b4>
 80126aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80126ae:	9e05      	ldr	r6, [sp, #20]
 80126b0:	461c      	mov	r4, r3
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	9b05      	ldr	r3, [sp, #20]
 80126b6:	4413      	add	r3, r2
 80126b8:	9305      	str	r3, [sp, #20]
 80126ba:	9b06      	ldr	r3, [sp, #24]
 80126bc:	2101      	movs	r1, #1
 80126be:	4413      	add	r3, r2
 80126c0:	4648      	mov	r0, r9
 80126c2:	9306      	str	r3, [sp, #24]
 80126c4:	f000 fc22 	bl	8012f0c <__i2b>
 80126c8:	9b04      	ldr	r3, [sp, #16]
 80126ca:	4605      	mov	r5, r0
 80126cc:	b166      	cbz	r6, 80126e8 <_dtoa_r+0x670>
 80126ce:	9a06      	ldr	r2, [sp, #24]
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	dd09      	ble.n	80126e8 <_dtoa_r+0x670>
 80126d4:	42b2      	cmp	r2, r6
 80126d6:	9905      	ldr	r1, [sp, #20]
 80126d8:	bfa8      	it	ge
 80126da:	4632      	movge	r2, r6
 80126dc:	1a89      	subs	r1, r1, r2
 80126de:	9105      	str	r1, [sp, #20]
 80126e0:	9906      	ldr	r1, [sp, #24]
 80126e2:	1ab6      	subs	r6, r6, r2
 80126e4:	1a8a      	subs	r2, r1, r2
 80126e6:	9206      	str	r2, [sp, #24]
 80126e8:	b1fb      	cbz	r3, 801272a <_dtoa_r+0x6b2>
 80126ea:	9a08      	ldr	r2, [sp, #32]
 80126ec:	2a00      	cmp	r2, #0
 80126ee:	f000 80bc 	beq.w	801286a <_dtoa_r+0x7f2>
 80126f2:	b19c      	cbz	r4, 801271c <_dtoa_r+0x6a4>
 80126f4:	4629      	mov	r1, r5
 80126f6:	4622      	mov	r2, r4
 80126f8:	4648      	mov	r0, r9
 80126fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126fc:	f000 fcc6 	bl	801308c <__pow5mult>
 8012700:	9a01      	ldr	r2, [sp, #4]
 8012702:	4601      	mov	r1, r0
 8012704:	4605      	mov	r5, r0
 8012706:	4648      	mov	r0, r9
 8012708:	f000 fc16 	bl	8012f38 <__multiply>
 801270c:	9901      	ldr	r1, [sp, #4]
 801270e:	9004      	str	r0, [sp, #16]
 8012710:	4648      	mov	r0, r9
 8012712:	f000 fb47 	bl	8012da4 <_Bfree>
 8012716:	9a04      	ldr	r2, [sp, #16]
 8012718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801271a:	9201      	str	r2, [sp, #4]
 801271c:	1b1a      	subs	r2, r3, r4
 801271e:	d004      	beq.n	801272a <_dtoa_r+0x6b2>
 8012720:	9901      	ldr	r1, [sp, #4]
 8012722:	4648      	mov	r0, r9
 8012724:	f000 fcb2 	bl	801308c <__pow5mult>
 8012728:	9001      	str	r0, [sp, #4]
 801272a:	2101      	movs	r1, #1
 801272c:	4648      	mov	r0, r9
 801272e:	f000 fbed 	bl	8012f0c <__i2b>
 8012732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012734:	4604      	mov	r4, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 81d0 	beq.w	8012adc <_dtoa_r+0xa64>
 801273c:	461a      	mov	r2, r3
 801273e:	4601      	mov	r1, r0
 8012740:	4648      	mov	r0, r9
 8012742:	f000 fca3 	bl	801308c <__pow5mult>
 8012746:	9b07      	ldr	r3, [sp, #28]
 8012748:	2b01      	cmp	r3, #1
 801274a:	4604      	mov	r4, r0
 801274c:	f300 8095 	bgt.w	801287a <_dtoa_r+0x802>
 8012750:	9b02      	ldr	r3, [sp, #8]
 8012752:	2b00      	cmp	r3, #0
 8012754:	f040 808b 	bne.w	801286e <_dtoa_r+0x7f6>
 8012758:	9b03      	ldr	r3, [sp, #12]
 801275a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801275e:	2a00      	cmp	r2, #0
 8012760:	f040 8087 	bne.w	8012872 <_dtoa_r+0x7fa>
 8012764:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012768:	0d12      	lsrs	r2, r2, #20
 801276a:	0512      	lsls	r2, r2, #20
 801276c:	2a00      	cmp	r2, #0
 801276e:	f000 8082 	beq.w	8012876 <_dtoa_r+0x7fe>
 8012772:	9b05      	ldr	r3, [sp, #20]
 8012774:	3301      	adds	r3, #1
 8012776:	9305      	str	r3, [sp, #20]
 8012778:	9b06      	ldr	r3, [sp, #24]
 801277a:	3301      	adds	r3, #1
 801277c:	9306      	str	r3, [sp, #24]
 801277e:	2301      	movs	r3, #1
 8012780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012784:	2b00      	cmp	r3, #0
 8012786:	f000 81af 	beq.w	8012ae8 <_dtoa_r+0xa70>
 801278a:	6922      	ldr	r2, [r4, #16]
 801278c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012790:	6910      	ldr	r0, [r2, #16]
 8012792:	f000 fb6f 	bl	8012e74 <__hi0bits>
 8012796:	f1c0 0020 	rsb	r0, r0, #32
 801279a:	9b06      	ldr	r3, [sp, #24]
 801279c:	4418      	add	r0, r3
 801279e:	f010 001f 	ands.w	r0, r0, #31
 80127a2:	d076      	beq.n	8012892 <_dtoa_r+0x81a>
 80127a4:	f1c0 0220 	rsb	r2, r0, #32
 80127a8:	2a04      	cmp	r2, #4
 80127aa:	dd69      	ble.n	8012880 <_dtoa_r+0x808>
 80127ac:	9b05      	ldr	r3, [sp, #20]
 80127ae:	f1c0 001c 	rsb	r0, r0, #28
 80127b2:	4403      	add	r3, r0
 80127b4:	9305      	str	r3, [sp, #20]
 80127b6:	9b06      	ldr	r3, [sp, #24]
 80127b8:	4406      	add	r6, r0
 80127ba:	4403      	add	r3, r0
 80127bc:	9306      	str	r3, [sp, #24]
 80127be:	9b05      	ldr	r3, [sp, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	dd05      	ble.n	80127d0 <_dtoa_r+0x758>
 80127c4:	9901      	ldr	r1, [sp, #4]
 80127c6:	461a      	mov	r2, r3
 80127c8:	4648      	mov	r0, r9
 80127ca:	f000 fcb9 	bl	8013140 <__lshift>
 80127ce:	9001      	str	r0, [sp, #4]
 80127d0:	9b06      	ldr	r3, [sp, #24]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	dd05      	ble.n	80127e2 <_dtoa_r+0x76a>
 80127d6:	4621      	mov	r1, r4
 80127d8:	461a      	mov	r2, r3
 80127da:	4648      	mov	r0, r9
 80127dc:	f000 fcb0 	bl	8013140 <__lshift>
 80127e0:	4604      	mov	r4, r0
 80127e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d056      	beq.n	8012896 <_dtoa_r+0x81e>
 80127e8:	9801      	ldr	r0, [sp, #4]
 80127ea:	4621      	mov	r1, r4
 80127ec:	f000 fd14 	bl	8013218 <__mcmp>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	da50      	bge.n	8012896 <_dtoa_r+0x81e>
 80127f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80127f8:	9304      	str	r3, [sp, #16]
 80127fa:	9901      	ldr	r1, [sp, #4]
 80127fc:	2300      	movs	r3, #0
 80127fe:	220a      	movs	r2, #10
 8012800:	4648      	mov	r0, r9
 8012802:	f000 faf1 	bl	8012de8 <__multadd>
 8012806:	9b08      	ldr	r3, [sp, #32]
 8012808:	9001      	str	r0, [sp, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f000 816e 	beq.w	8012aec <_dtoa_r+0xa74>
 8012810:	4629      	mov	r1, r5
 8012812:	2300      	movs	r3, #0
 8012814:	220a      	movs	r2, #10
 8012816:	4648      	mov	r0, r9
 8012818:	f000 fae6 	bl	8012de8 <__multadd>
 801281c:	f1bb 0f00 	cmp.w	fp, #0
 8012820:	4605      	mov	r5, r0
 8012822:	dc64      	bgt.n	80128ee <_dtoa_r+0x876>
 8012824:	9b07      	ldr	r3, [sp, #28]
 8012826:	2b02      	cmp	r3, #2
 8012828:	dc3e      	bgt.n	80128a8 <_dtoa_r+0x830>
 801282a:	e060      	b.n	80128ee <_dtoa_r+0x876>
 801282c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801282e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012832:	e73c      	b.n	80126ae <_dtoa_r+0x636>
 8012834:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012838:	42a3      	cmp	r3, r4
 801283a:	bfbf      	itttt	lt
 801283c:	1ae2      	sublt	r2, r4, r3
 801283e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012840:	189b      	addlt	r3, r3, r2
 8012842:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012844:	bfae      	itee	ge
 8012846:	1b1c      	subge	r4, r3, r4
 8012848:	4623      	movlt	r3, r4
 801284a:	2400      	movlt	r4, #0
 801284c:	f1ba 0f00 	cmp.w	sl, #0
 8012850:	bfb5      	itete	lt
 8012852:	9a05      	ldrlt	r2, [sp, #20]
 8012854:	9e05      	ldrge	r6, [sp, #20]
 8012856:	eba2 060a 	sublt.w	r6, r2, sl
 801285a:	4652      	movge	r2, sl
 801285c:	bfb8      	it	lt
 801285e:	2200      	movlt	r2, #0
 8012860:	e727      	b.n	80126b2 <_dtoa_r+0x63a>
 8012862:	9e05      	ldr	r6, [sp, #20]
 8012864:	9d08      	ldr	r5, [sp, #32]
 8012866:	461c      	mov	r4, r3
 8012868:	e730      	b.n	80126cc <_dtoa_r+0x654>
 801286a:	461a      	mov	r2, r3
 801286c:	e758      	b.n	8012720 <_dtoa_r+0x6a8>
 801286e:	2300      	movs	r3, #0
 8012870:	e786      	b.n	8012780 <_dtoa_r+0x708>
 8012872:	9b02      	ldr	r3, [sp, #8]
 8012874:	e784      	b.n	8012780 <_dtoa_r+0x708>
 8012876:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012878:	e783      	b.n	8012782 <_dtoa_r+0x70a>
 801287a:	2300      	movs	r3, #0
 801287c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801287e:	e784      	b.n	801278a <_dtoa_r+0x712>
 8012880:	d09d      	beq.n	80127be <_dtoa_r+0x746>
 8012882:	9b05      	ldr	r3, [sp, #20]
 8012884:	321c      	adds	r2, #28
 8012886:	4413      	add	r3, r2
 8012888:	9305      	str	r3, [sp, #20]
 801288a:	9b06      	ldr	r3, [sp, #24]
 801288c:	4416      	add	r6, r2
 801288e:	4413      	add	r3, r2
 8012890:	e794      	b.n	80127bc <_dtoa_r+0x744>
 8012892:	4602      	mov	r2, r0
 8012894:	e7f5      	b.n	8012882 <_dtoa_r+0x80a>
 8012896:	f1ba 0f00 	cmp.w	sl, #0
 801289a:	f8cd 8010 	str.w	r8, [sp, #16]
 801289e:	46d3      	mov	fp, sl
 80128a0:	dc21      	bgt.n	80128e6 <_dtoa_r+0x86e>
 80128a2:	9b07      	ldr	r3, [sp, #28]
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	dd1e      	ble.n	80128e6 <_dtoa_r+0x86e>
 80128a8:	f1bb 0f00 	cmp.w	fp, #0
 80128ac:	f47f aeb7 	bne.w	801261e <_dtoa_r+0x5a6>
 80128b0:	4621      	mov	r1, r4
 80128b2:	465b      	mov	r3, fp
 80128b4:	2205      	movs	r2, #5
 80128b6:	4648      	mov	r0, r9
 80128b8:	f000 fa96 	bl	8012de8 <__multadd>
 80128bc:	4601      	mov	r1, r0
 80128be:	4604      	mov	r4, r0
 80128c0:	9801      	ldr	r0, [sp, #4]
 80128c2:	f000 fca9 	bl	8013218 <__mcmp>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f77f aea9 	ble.w	801261e <_dtoa_r+0x5a6>
 80128cc:	463e      	mov	r6, r7
 80128ce:	2331      	movs	r3, #49	@ 0x31
 80128d0:	f806 3b01 	strb.w	r3, [r6], #1
 80128d4:	9b04      	ldr	r3, [sp, #16]
 80128d6:	3301      	adds	r3, #1
 80128d8:	9304      	str	r3, [sp, #16]
 80128da:	e6a4      	b.n	8012626 <_dtoa_r+0x5ae>
 80128dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80128e0:	4654      	mov	r4, sl
 80128e2:	4625      	mov	r5, r4
 80128e4:	e7f2      	b.n	80128cc <_dtoa_r+0x854>
 80128e6:	9b08      	ldr	r3, [sp, #32]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 8103 	beq.w	8012af4 <_dtoa_r+0xa7c>
 80128ee:	2e00      	cmp	r6, #0
 80128f0:	dd05      	ble.n	80128fe <_dtoa_r+0x886>
 80128f2:	4629      	mov	r1, r5
 80128f4:	4632      	mov	r2, r6
 80128f6:	4648      	mov	r0, r9
 80128f8:	f000 fc22 	bl	8013140 <__lshift>
 80128fc:	4605      	mov	r5, r0
 80128fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012900:	2b00      	cmp	r3, #0
 8012902:	d058      	beq.n	80129b6 <_dtoa_r+0x93e>
 8012904:	6869      	ldr	r1, [r5, #4]
 8012906:	4648      	mov	r0, r9
 8012908:	f000 fa0c 	bl	8012d24 <_Balloc>
 801290c:	4606      	mov	r6, r0
 801290e:	b928      	cbnz	r0, 801291c <_dtoa_r+0x8a4>
 8012910:	4b82      	ldr	r3, [pc, #520]	@ (8012b1c <_dtoa_r+0xaa4>)
 8012912:	4602      	mov	r2, r0
 8012914:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012918:	f7ff bbc7 	b.w	80120aa <_dtoa_r+0x32>
 801291c:	692a      	ldr	r2, [r5, #16]
 801291e:	3202      	adds	r2, #2
 8012920:	0092      	lsls	r2, r2, #2
 8012922:	f105 010c 	add.w	r1, r5, #12
 8012926:	300c      	adds	r0, #12
 8012928:	f7ff fb0f 	bl	8011f4a <memcpy>
 801292c:	2201      	movs	r2, #1
 801292e:	4631      	mov	r1, r6
 8012930:	4648      	mov	r0, r9
 8012932:	f000 fc05 	bl	8013140 <__lshift>
 8012936:	1c7b      	adds	r3, r7, #1
 8012938:	9305      	str	r3, [sp, #20]
 801293a:	eb07 030b 	add.w	r3, r7, fp
 801293e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012940:	9b02      	ldr	r3, [sp, #8]
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	46a8      	mov	r8, r5
 8012948:	9308      	str	r3, [sp, #32]
 801294a:	4605      	mov	r5, r0
 801294c:	9b05      	ldr	r3, [sp, #20]
 801294e:	9801      	ldr	r0, [sp, #4]
 8012950:	4621      	mov	r1, r4
 8012952:	f103 3bff 	add.w	fp, r3, #4294967295
 8012956:	f7ff fb06 	bl	8011f66 <quorem>
 801295a:	4641      	mov	r1, r8
 801295c:	9002      	str	r0, [sp, #8]
 801295e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012962:	9801      	ldr	r0, [sp, #4]
 8012964:	f000 fc58 	bl	8013218 <__mcmp>
 8012968:	462a      	mov	r2, r5
 801296a:	9006      	str	r0, [sp, #24]
 801296c:	4621      	mov	r1, r4
 801296e:	4648      	mov	r0, r9
 8012970:	f000 fc6e 	bl	8013250 <__mdiff>
 8012974:	68c2      	ldr	r2, [r0, #12]
 8012976:	4606      	mov	r6, r0
 8012978:	b9fa      	cbnz	r2, 80129ba <_dtoa_r+0x942>
 801297a:	4601      	mov	r1, r0
 801297c:	9801      	ldr	r0, [sp, #4]
 801297e:	f000 fc4b 	bl	8013218 <__mcmp>
 8012982:	4602      	mov	r2, r0
 8012984:	4631      	mov	r1, r6
 8012986:	4648      	mov	r0, r9
 8012988:	920a      	str	r2, [sp, #40]	@ 0x28
 801298a:	f000 fa0b 	bl	8012da4 <_Bfree>
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012992:	9e05      	ldr	r6, [sp, #20]
 8012994:	ea43 0102 	orr.w	r1, r3, r2
 8012998:	9b08      	ldr	r3, [sp, #32]
 801299a:	4319      	orrs	r1, r3
 801299c:	d10f      	bne.n	80129be <_dtoa_r+0x946>
 801299e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80129a2:	d028      	beq.n	80129f6 <_dtoa_r+0x97e>
 80129a4:	9b06      	ldr	r3, [sp, #24]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	dd02      	ble.n	80129b0 <_dtoa_r+0x938>
 80129aa:	9b02      	ldr	r3, [sp, #8]
 80129ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80129b0:	f88b a000 	strb.w	sl, [fp]
 80129b4:	e639      	b.n	801262a <_dtoa_r+0x5b2>
 80129b6:	4628      	mov	r0, r5
 80129b8:	e7bd      	b.n	8012936 <_dtoa_r+0x8be>
 80129ba:	2201      	movs	r2, #1
 80129bc:	e7e2      	b.n	8012984 <_dtoa_r+0x90c>
 80129be:	9b06      	ldr	r3, [sp, #24]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	db04      	blt.n	80129ce <_dtoa_r+0x956>
 80129c4:	9907      	ldr	r1, [sp, #28]
 80129c6:	430b      	orrs	r3, r1
 80129c8:	9908      	ldr	r1, [sp, #32]
 80129ca:	430b      	orrs	r3, r1
 80129cc:	d120      	bne.n	8012a10 <_dtoa_r+0x998>
 80129ce:	2a00      	cmp	r2, #0
 80129d0:	ddee      	ble.n	80129b0 <_dtoa_r+0x938>
 80129d2:	9901      	ldr	r1, [sp, #4]
 80129d4:	2201      	movs	r2, #1
 80129d6:	4648      	mov	r0, r9
 80129d8:	f000 fbb2 	bl	8013140 <__lshift>
 80129dc:	4621      	mov	r1, r4
 80129de:	9001      	str	r0, [sp, #4]
 80129e0:	f000 fc1a 	bl	8013218 <__mcmp>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	dc03      	bgt.n	80129f0 <_dtoa_r+0x978>
 80129e8:	d1e2      	bne.n	80129b0 <_dtoa_r+0x938>
 80129ea:	f01a 0f01 	tst.w	sl, #1
 80129ee:	d0df      	beq.n	80129b0 <_dtoa_r+0x938>
 80129f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80129f4:	d1d9      	bne.n	80129aa <_dtoa_r+0x932>
 80129f6:	2339      	movs	r3, #57	@ 0x39
 80129f8:	f88b 3000 	strb.w	r3, [fp]
 80129fc:	4633      	mov	r3, r6
 80129fe:	461e      	mov	r6, r3
 8012a00:	3b01      	subs	r3, #1
 8012a02:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a06:	2a39      	cmp	r2, #57	@ 0x39
 8012a08:	d053      	beq.n	8012ab2 <_dtoa_r+0xa3a>
 8012a0a:	3201      	adds	r2, #1
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	e60c      	b.n	801262a <_dtoa_r+0x5b2>
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	dd07      	ble.n	8012a24 <_dtoa_r+0x9ac>
 8012a14:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012a18:	d0ed      	beq.n	80129f6 <_dtoa_r+0x97e>
 8012a1a:	f10a 0301 	add.w	r3, sl, #1
 8012a1e:	f88b 3000 	strb.w	r3, [fp]
 8012a22:	e602      	b.n	801262a <_dtoa_r+0x5b2>
 8012a24:	9b05      	ldr	r3, [sp, #20]
 8012a26:	9a05      	ldr	r2, [sp, #20]
 8012a28:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d029      	beq.n	8012a86 <_dtoa_r+0xa0e>
 8012a32:	9901      	ldr	r1, [sp, #4]
 8012a34:	2300      	movs	r3, #0
 8012a36:	220a      	movs	r2, #10
 8012a38:	4648      	mov	r0, r9
 8012a3a:	f000 f9d5 	bl	8012de8 <__multadd>
 8012a3e:	45a8      	cmp	r8, r5
 8012a40:	9001      	str	r0, [sp, #4]
 8012a42:	f04f 0300 	mov.w	r3, #0
 8012a46:	f04f 020a 	mov.w	r2, #10
 8012a4a:	4641      	mov	r1, r8
 8012a4c:	4648      	mov	r0, r9
 8012a4e:	d107      	bne.n	8012a60 <_dtoa_r+0x9e8>
 8012a50:	f000 f9ca 	bl	8012de8 <__multadd>
 8012a54:	4680      	mov	r8, r0
 8012a56:	4605      	mov	r5, r0
 8012a58:	9b05      	ldr	r3, [sp, #20]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	9305      	str	r3, [sp, #20]
 8012a5e:	e775      	b.n	801294c <_dtoa_r+0x8d4>
 8012a60:	f000 f9c2 	bl	8012de8 <__multadd>
 8012a64:	4629      	mov	r1, r5
 8012a66:	4680      	mov	r8, r0
 8012a68:	2300      	movs	r3, #0
 8012a6a:	220a      	movs	r2, #10
 8012a6c:	4648      	mov	r0, r9
 8012a6e:	f000 f9bb 	bl	8012de8 <__multadd>
 8012a72:	4605      	mov	r5, r0
 8012a74:	e7f0      	b.n	8012a58 <_dtoa_r+0x9e0>
 8012a76:	f1bb 0f00 	cmp.w	fp, #0
 8012a7a:	bfcc      	ite	gt
 8012a7c:	465e      	movgt	r6, fp
 8012a7e:	2601      	movle	r6, #1
 8012a80:	443e      	add	r6, r7
 8012a82:	f04f 0800 	mov.w	r8, #0
 8012a86:	9901      	ldr	r1, [sp, #4]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	4648      	mov	r0, r9
 8012a8c:	f000 fb58 	bl	8013140 <__lshift>
 8012a90:	4621      	mov	r1, r4
 8012a92:	9001      	str	r0, [sp, #4]
 8012a94:	f000 fbc0 	bl	8013218 <__mcmp>
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	dcaf      	bgt.n	80129fc <_dtoa_r+0x984>
 8012a9c:	d102      	bne.n	8012aa4 <_dtoa_r+0xa2c>
 8012a9e:	f01a 0f01 	tst.w	sl, #1
 8012aa2:	d1ab      	bne.n	80129fc <_dtoa_r+0x984>
 8012aa4:	4633      	mov	r3, r6
 8012aa6:	461e      	mov	r6, r3
 8012aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aac:	2a30      	cmp	r2, #48	@ 0x30
 8012aae:	d0fa      	beq.n	8012aa6 <_dtoa_r+0xa2e>
 8012ab0:	e5bb      	b.n	801262a <_dtoa_r+0x5b2>
 8012ab2:	429f      	cmp	r7, r3
 8012ab4:	d1a3      	bne.n	80129fe <_dtoa_r+0x986>
 8012ab6:	9b04      	ldr	r3, [sp, #16]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	9304      	str	r3, [sp, #16]
 8012abc:	2331      	movs	r3, #49	@ 0x31
 8012abe:	703b      	strb	r3, [r7, #0]
 8012ac0:	e5b3      	b.n	801262a <_dtoa_r+0x5b2>
 8012ac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012ac4:	4f16      	ldr	r7, [pc, #88]	@ (8012b20 <_dtoa_r+0xaa8>)
 8012ac6:	b11b      	cbz	r3, 8012ad0 <_dtoa_r+0xa58>
 8012ac8:	f107 0308 	add.w	r3, r7, #8
 8012acc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012ace:	6013      	str	r3, [r2, #0]
 8012ad0:	4638      	mov	r0, r7
 8012ad2:	b011      	add	sp, #68	@ 0x44
 8012ad4:	ecbd 8b02 	vpop	{d8}
 8012ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	9b07      	ldr	r3, [sp, #28]
 8012ade:	2b01      	cmp	r3, #1
 8012ae0:	f77f ae36 	ble.w	8012750 <_dtoa_r+0x6d8>
 8012ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ae8:	2001      	movs	r0, #1
 8012aea:	e656      	b.n	801279a <_dtoa_r+0x722>
 8012aec:	f1bb 0f00 	cmp.w	fp, #0
 8012af0:	f77f aed7 	ble.w	80128a2 <_dtoa_r+0x82a>
 8012af4:	463e      	mov	r6, r7
 8012af6:	9801      	ldr	r0, [sp, #4]
 8012af8:	4621      	mov	r1, r4
 8012afa:	f7ff fa34 	bl	8011f66 <quorem>
 8012afe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012b02:	f806 ab01 	strb.w	sl, [r6], #1
 8012b06:	1bf2      	subs	r2, r6, r7
 8012b08:	4593      	cmp	fp, r2
 8012b0a:	ddb4      	ble.n	8012a76 <_dtoa_r+0x9fe>
 8012b0c:	9901      	ldr	r1, [sp, #4]
 8012b0e:	2300      	movs	r3, #0
 8012b10:	220a      	movs	r2, #10
 8012b12:	4648      	mov	r0, r9
 8012b14:	f000 f968 	bl	8012de8 <__multadd>
 8012b18:	9001      	str	r0, [sp, #4]
 8012b1a:	e7ec      	b.n	8012af6 <_dtoa_r+0xa7e>
 8012b1c:	08014064 	.word	0x08014064
 8012b20:	08013fe8 	.word	0x08013fe8

08012b24 <_free_r>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	4605      	mov	r5, r0
 8012b28:	2900      	cmp	r1, #0
 8012b2a:	d041      	beq.n	8012bb0 <_free_r+0x8c>
 8012b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b30:	1f0c      	subs	r4, r1, #4
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	bfb8      	it	lt
 8012b36:	18e4      	addlt	r4, r4, r3
 8012b38:	f000 f8e8 	bl	8012d0c <__malloc_lock>
 8012b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8012bb4 <_free_r+0x90>)
 8012b3e:	6813      	ldr	r3, [r2, #0]
 8012b40:	b933      	cbnz	r3, 8012b50 <_free_r+0x2c>
 8012b42:	6063      	str	r3, [r4, #4]
 8012b44:	6014      	str	r4, [r2, #0]
 8012b46:	4628      	mov	r0, r5
 8012b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b4c:	f000 b8e4 	b.w	8012d18 <__malloc_unlock>
 8012b50:	42a3      	cmp	r3, r4
 8012b52:	d908      	bls.n	8012b66 <_free_r+0x42>
 8012b54:	6820      	ldr	r0, [r4, #0]
 8012b56:	1821      	adds	r1, r4, r0
 8012b58:	428b      	cmp	r3, r1
 8012b5a:	bf01      	itttt	eq
 8012b5c:	6819      	ldreq	r1, [r3, #0]
 8012b5e:	685b      	ldreq	r3, [r3, #4]
 8012b60:	1809      	addeq	r1, r1, r0
 8012b62:	6021      	streq	r1, [r4, #0]
 8012b64:	e7ed      	b.n	8012b42 <_free_r+0x1e>
 8012b66:	461a      	mov	r2, r3
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	b10b      	cbz	r3, 8012b70 <_free_r+0x4c>
 8012b6c:	42a3      	cmp	r3, r4
 8012b6e:	d9fa      	bls.n	8012b66 <_free_r+0x42>
 8012b70:	6811      	ldr	r1, [r2, #0]
 8012b72:	1850      	adds	r0, r2, r1
 8012b74:	42a0      	cmp	r0, r4
 8012b76:	d10b      	bne.n	8012b90 <_free_r+0x6c>
 8012b78:	6820      	ldr	r0, [r4, #0]
 8012b7a:	4401      	add	r1, r0
 8012b7c:	1850      	adds	r0, r2, r1
 8012b7e:	4283      	cmp	r3, r0
 8012b80:	6011      	str	r1, [r2, #0]
 8012b82:	d1e0      	bne.n	8012b46 <_free_r+0x22>
 8012b84:	6818      	ldr	r0, [r3, #0]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	6053      	str	r3, [r2, #4]
 8012b8a:	4408      	add	r0, r1
 8012b8c:	6010      	str	r0, [r2, #0]
 8012b8e:	e7da      	b.n	8012b46 <_free_r+0x22>
 8012b90:	d902      	bls.n	8012b98 <_free_r+0x74>
 8012b92:	230c      	movs	r3, #12
 8012b94:	602b      	str	r3, [r5, #0]
 8012b96:	e7d6      	b.n	8012b46 <_free_r+0x22>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	1821      	adds	r1, r4, r0
 8012b9c:	428b      	cmp	r3, r1
 8012b9e:	bf04      	itt	eq
 8012ba0:	6819      	ldreq	r1, [r3, #0]
 8012ba2:	685b      	ldreq	r3, [r3, #4]
 8012ba4:	6063      	str	r3, [r4, #4]
 8012ba6:	bf04      	itt	eq
 8012ba8:	1809      	addeq	r1, r1, r0
 8012baa:	6021      	streq	r1, [r4, #0]
 8012bac:	6054      	str	r4, [r2, #4]
 8012bae:	e7ca      	b.n	8012b46 <_free_r+0x22>
 8012bb0:	bd38      	pop	{r3, r4, r5, pc}
 8012bb2:	bf00      	nop
 8012bb4:	24003600 	.word	0x24003600

08012bb8 <malloc>:
 8012bb8:	4b02      	ldr	r3, [pc, #8]	@ (8012bc4 <malloc+0xc>)
 8012bba:	4601      	mov	r1, r0
 8012bbc:	6818      	ldr	r0, [r3, #0]
 8012bbe:	f000 b825 	b.w	8012c0c <_malloc_r>
 8012bc2:	bf00      	nop
 8012bc4:	24000110 	.word	0x24000110

08012bc8 <sbrk_aligned>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	4e0f      	ldr	r6, [pc, #60]	@ (8012c08 <sbrk_aligned+0x40>)
 8012bcc:	460c      	mov	r4, r1
 8012bce:	6831      	ldr	r1, [r6, #0]
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	b911      	cbnz	r1, 8012bda <sbrk_aligned+0x12>
 8012bd4:	f000 fe46 	bl	8013864 <_sbrk_r>
 8012bd8:	6030      	str	r0, [r6, #0]
 8012bda:	4621      	mov	r1, r4
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f000 fe41 	bl	8013864 <_sbrk_r>
 8012be2:	1c43      	adds	r3, r0, #1
 8012be4:	d103      	bne.n	8012bee <sbrk_aligned+0x26>
 8012be6:	f04f 34ff 	mov.w	r4, #4294967295
 8012bea:	4620      	mov	r0, r4
 8012bec:	bd70      	pop	{r4, r5, r6, pc}
 8012bee:	1cc4      	adds	r4, r0, #3
 8012bf0:	f024 0403 	bic.w	r4, r4, #3
 8012bf4:	42a0      	cmp	r0, r4
 8012bf6:	d0f8      	beq.n	8012bea <sbrk_aligned+0x22>
 8012bf8:	1a21      	subs	r1, r4, r0
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f000 fe32 	bl	8013864 <_sbrk_r>
 8012c00:	3001      	adds	r0, #1
 8012c02:	d1f2      	bne.n	8012bea <sbrk_aligned+0x22>
 8012c04:	e7ef      	b.n	8012be6 <sbrk_aligned+0x1e>
 8012c06:	bf00      	nop
 8012c08:	240035fc 	.word	0x240035fc

08012c0c <_malloc_r>:
 8012c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c10:	1ccd      	adds	r5, r1, #3
 8012c12:	f025 0503 	bic.w	r5, r5, #3
 8012c16:	3508      	adds	r5, #8
 8012c18:	2d0c      	cmp	r5, #12
 8012c1a:	bf38      	it	cc
 8012c1c:	250c      	movcc	r5, #12
 8012c1e:	2d00      	cmp	r5, #0
 8012c20:	4606      	mov	r6, r0
 8012c22:	db01      	blt.n	8012c28 <_malloc_r+0x1c>
 8012c24:	42a9      	cmp	r1, r5
 8012c26:	d904      	bls.n	8012c32 <_malloc_r+0x26>
 8012c28:	230c      	movs	r3, #12
 8012c2a:	6033      	str	r3, [r6, #0]
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d08 <_malloc_r+0xfc>
 8012c36:	f000 f869 	bl	8012d0c <__malloc_lock>
 8012c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c3e:	461c      	mov	r4, r3
 8012c40:	bb44      	cbnz	r4, 8012c94 <_malloc_r+0x88>
 8012c42:	4629      	mov	r1, r5
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ffbf 	bl	8012bc8 <sbrk_aligned>
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	d158      	bne.n	8012d02 <_malloc_r+0xf6>
 8012c50:	f8d8 4000 	ldr.w	r4, [r8]
 8012c54:	4627      	mov	r7, r4
 8012c56:	2f00      	cmp	r7, #0
 8012c58:	d143      	bne.n	8012ce2 <_malloc_r+0xd6>
 8012c5a:	2c00      	cmp	r4, #0
 8012c5c:	d04b      	beq.n	8012cf6 <_malloc_r+0xea>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	4639      	mov	r1, r7
 8012c62:	4630      	mov	r0, r6
 8012c64:	eb04 0903 	add.w	r9, r4, r3
 8012c68:	f000 fdfc 	bl	8013864 <_sbrk_r>
 8012c6c:	4581      	cmp	r9, r0
 8012c6e:	d142      	bne.n	8012cf6 <_malloc_r+0xea>
 8012c70:	6821      	ldr	r1, [r4, #0]
 8012c72:	1a6d      	subs	r5, r5, r1
 8012c74:	4629      	mov	r1, r5
 8012c76:	4630      	mov	r0, r6
 8012c78:	f7ff ffa6 	bl	8012bc8 <sbrk_aligned>
 8012c7c:	3001      	adds	r0, #1
 8012c7e:	d03a      	beq.n	8012cf6 <_malloc_r+0xea>
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	442b      	add	r3, r5
 8012c84:	6023      	str	r3, [r4, #0]
 8012c86:	f8d8 3000 	ldr.w	r3, [r8]
 8012c8a:	685a      	ldr	r2, [r3, #4]
 8012c8c:	bb62      	cbnz	r2, 8012ce8 <_malloc_r+0xdc>
 8012c8e:	f8c8 7000 	str.w	r7, [r8]
 8012c92:	e00f      	b.n	8012cb4 <_malloc_r+0xa8>
 8012c94:	6822      	ldr	r2, [r4, #0]
 8012c96:	1b52      	subs	r2, r2, r5
 8012c98:	d420      	bmi.n	8012cdc <_malloc_r+0xd0>
 8012c9a:	2a0b      	cmp	r2, #11
 8012c9c:	d917      	bls.n	8012cce <_malloc_r+0xc2>
 8012c9e:	1961      	adds	r1, r4, r5
 8012ca0:	42a3      	cmp	r3, r4
 8012ca2:	6025      	str	r5, [r4, #0]
 8012ca4:	bf18      	it	ne
 8012ca6:	6059      	strne	r1, [r3, #4]
 8012ca8:	6863      	ldr	r3, [r4, #4]
 8012caa:	bf08      	it	eq
 8012cac:	f8c8 1000 	streq.w	r1, [r8]
 8012cb0:	5162      	str	r2, [r4, r5]
 8012cb2:	604b      	str	r3, [r1, #4]
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f000 f82f 	bl	8012d18 <__malloc_unlock>
 8012cba:	f104 000b 	add.w	r0, r4, #11
 8012cbe:	1d23      	adds	r3, r4, #4
 8012cc0:	f020 0007 	bic.w	r0, r0, #7
 8012cc4:	1ac2      	subs	r2, r0, r3
 8012cc6:	bf1c      	itt	ne
 8012cc8:	1a1b      	subne	r3, r3, r0
 8012cca:	50a3      	strne	r3, [r4, r2]
 8012ccc:	e7af      	b.n	8012c2e <_malloc_r+0x22>
 8012cce:	6862      	ldr	r2, [r4, #4]
 8012cd0:	42a3      	cmp	r3, r4
 8012cd2:	bf0c      	ite	eq
 8012cd4:	f8c8 2000 	streq.w	r2, [r8]
 8012cd8:	605a      	strne	r2, [r3, #4]
 8012cda:	e7eb      	b.n	8012cb4 <_malloc_r+0xa8>
 8012cdc:	4623      	mov	r3, r4
 8012cde:	6864      	ldr	r4, [r4, #4]
 8012ce0:	e7ae      	b.n	8012c40 <_malloc_r+0x34>
 8012ce2:	463c      	mov	r4, r7
 8012ce4:	687f      	ldr	r7, [r7, #4]
 8012ce6:	e7b6      	b.n	8012c56 <_malloc_r+0x4a>
 8012ce8:	461a      	mov	r2, r3
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	42a3      	cmp	r3, r4
 8012cee:	d1fb      	bne.n	8012ce8 <_malloc_r+0xdc>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	6053      	str	r3, [r2, #4]
 8012cf4:	e7de      	b.n	8012cb4 <_malloc_r+0xa8>
 8012cf6:	230c      	movs	r3, #12
 8012cf8:	6033      	str	r3, [r6, #0]
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	f000 f80c 	bl	8012d18 <__malloc_unlock>
 8012d00:	e794      	b.n	8012c2c <_malloc_r+0x20>
 8012d02:	6005      	str	r5, [r0, #0]
 8012d04:	e7d6      	b.n	8012cb4 <_malloc_r+0xa8>
 8012d06:	bf00      	nop
 8012d08:	24003600 	.word	0x24003600

08012d0c <__malloc_lock>:
 8012d0c:	4801      	ldr	r0, [pc, #4]	@ (8012d14 <__malloc_lock+0x8>)
 8012d0e:	f7ff b91a 	b.w	8011f46 <__retarget_lock_acquire_recursive>
 8012d12:	bf00      	nop
 8012d14:	240035f8 	.word	0x240035f8

08012d18 <__malloc_unlock>:
 8012d18:	4801      	ldr	r0, [pc, #4]	@ (8012d20 <__malloc_unlock+0x8>)
 8012d1a:	f7ff b915 	b.w	8011f48 <__retarget_lock_release_recursive>
 8012d1e:	bf00      	nop
 8012d20:	240035f8 	.word	0x240035f8

08012d24 <_Balloc>:
 8012d24:	b570      	push	{r4, r5, r6, lr}
 8012d26:	69c6      	ldr	r6, [r0, #28]
 8012d28:	4604      	mov	r4, r0
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	b976      	cbnz	r6, 8012d4c <_Balloc+0x28>
 8012d2e:	2010      	movs	r0, #16
 8012d30:	f7ff ff42 	bl	8012bb8 <malloc>
 8012d34:	4602      	mov	r2, r0
 8012d36:	61e0      	str	r0, [r4, #28]
 8012d38:	b920      	cbnz	r0, 8012d44 <_Balloc+0x20>
 8012d3a:	4b18      	ldr	r3, [pc, #96]	@ (8012d9c <_Balloc+0x78>)
 8012d3c:	4818      	ldr	r0, [pc, #96]	@ (8012da0 <_Balloc+0x7c>)
 8012d3e:	216b      	movs	r1, #107	@ 0x6b
 8012d40:	f000 fda0 	bl	8013884 <__assert_func>
 8012d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d48:	6006      	str	r6, [r0, #0]
 8012d4a:	60c6      	str	r6, [r0, #12]
 8012d4c:	69e6      	ldr	r6, [r4, #28]
 8012d4e:	68f3      	ldr	r3, [r6, #12]
 8012d50:	b183      	cbz	r3, 8012d74 <_Balloc+0x50>
 8012d52:	69e3      	ldr	r3, [r4, #28]
 8012d54:	68db      	ldr	r3, [r3, #12]
 8012d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d5a:	b9b8      	cbnz	r0, 8012d8c <_Balloc+0x68>
 8012d5c:	2101      	movs	r1, #1
 8012d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8012d62:	1d72      	adds	r2, r6, #5
 8012d64:	0092      	lsls	r2, r2, #2
 8012d66:	4620      	mov	r0, r4
 8012d68:	f000 fdaa 	bl	80138c0 <_calloc_r>
 8012d6c:	b160      	cbz	r0, 8012d88 <_Balloc+0x64>
 8012d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d72:	e00e      	b.n	8012d92 <_Balloc+0x6e>
 8012d74:	2221      	movs	r2, #33	@ 0x21
 8012d76:	2104      	movs	r1, #4
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f000 fda1 	bl	80138c0 <_calloc_r>
 8012d7e:	69e3      	ldr	r3, [r4, #28]
 8012d80:	60f0      	str	r0, [r6, #12]
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d1e4      	bne.n	8012d52 <_Balloc+0x2e>
 8012d88:	2000      	movs	r0, #0
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	6802      	ldr	r2, [r0, #0]
 8012d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d92:	2300      	movs	r3, #0
 8012d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d98:	e7f7      	b.n	8012d8a <_Balloc+0x66>
 8012d9a:	bf00      	nop
 8012d9c:	08013ff5 	.word	0x08013ff5
 8012da0:	08014075 	.word	0x08014075

08012da4 <_Bfree>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	69c6      	ldr	r6, [r0, #28]
 8012da8:	4605      	mov	r5, r0
 8012daa:	460c      	mov	r4, r1
 8012dac:	b976      	cbnz	r6, 8012dcc <_Bfree+0x28>
 8012dae:	2010      	movs	r0, #16
 8012db0:	f7ff ff02 	bl	8012bb8 <malloc>
 8012db4:	4602      	mov	r2, r0
 8012db6:	61e8      	str	r0, [r5, #28]
 8012db8:	b920      	cbnz	r0, 8012dc4 <_Bfree+0x20>
 8012dba:	4b09      	ldr	r3, [pc, #36]	@ (8012de0 <_Bfree+0x3c>)
 8012dbc:	4809      	ldr	r0, [pc, #36]	@ (8012de4 <_Bfree+0x40>)
 8012dbe:	218f      	movs	r1, #143	@ 0x8f
 8012dc0:	f000 fd60 	bl	8013884 <__assert_func>
 8012dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dc8:	6006      	str	r6, [r0, #0]
 8012dca:	60c6      	str	r6, [r0, #12]
 8012dcc:	b13c      	cbz	r4, 8012dde <_Bfree+0x3a>
 8012dce:	69eb      	ldr	r3, [r5, #28]
 8012dd0:	6862      	ldr	r2, [r4, #4]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dd8:	6021      	str	r1, [r4, #0]
 8012dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012dde:	bd70      	pop	{r4, r5, r6, pc}
 8012de0:	08013ff5 	.word	0x08013ff5
 8012de4:	08014075 	.word	0x08014075

08012de8 <__multadd>:
 8012de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dec:	690d      	ldr	r5, [r1, #16]
 8012dee:	4607      	mov	r7, r0
 8012df0:	460c      	mov	r4, r1
 8012df2:	461e      	mov	r6, r3
 8012df4:	f101 0c14 	add.w	ip, r1, #20
 8012df8:	2000      	movs	r0, #0
 8012dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8012dfe:	b299      	uxth	r1, r3
 8012e00:	fb02 6101 	mla	r1, r2, r1, r6
 8012e04:	0c1e      	lsrs	r6, r3, #16
 8012e06:	0c0b      	lsrs	r3, r1, #16
 8012e08:	fb02 3306 	mla	r3, r2, r6, r3
 8012e0c:	b289      	uxth	r1, r1
 8012e0e:	3001      	adds	r0, #1
 8012e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e14:	4285      	cmp	r5, r0
 8012e16:	f84c 1b04 	str.w	r1, [ip], #4
 8012e1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e1e:	dcec      	bgt.n	8012dfa <__multadd+0x12>
 8012e20:	b30e      	cbz	r6, 8012e66 <__multadd+0x7e>
 8012e22:	68a3      	ldr	r3, [r4, #8]
 8012e24:	42ab      	cmp	r3, r5
 8012e26:	dc19      	bgt.n	8012e5c <__multadd+0x74>
 8012e28:	6861      	ldr	r1, [r4, #4]
 8012e2a:	4638      	mov	r0, r7
 8012e2c:	3101      	adds	r1, #1
 8012e2e:	f7ff ff79 	bl	8012d24 <_Balloc>
 8012e32:	4680      	mov	r8, r0
 8012e34:	b928      	cbnz	r0, 8012e42 <__multadd+0x5a>
 8012e36:	4602      	mov	r2, r0
 8012e38:	4b0c      	ldr	r3, [pc, #48]	@ (8012e6c <__multadd+0x84>)
 8012e3a:	480d      	ldr	r0, [pc, #52]	@ (8012e70 <__multadd+0x88>)
 8012e3c:	21ba      	movs	r1, #186	@ 0xba
 8012e3e:	f000 fd21 	bl	8013884 <__assert_func>
 8012e42:	6922      	ldr	r2, [r4, #16]
 8012e44:	3202      	adds	r2, #2
 8012e46:	f104 010c 	add.w	r1, r4, #12
 8012e4a:	0092      	lsls	r2, r2, #2
 8012e4c:	300c      	adds	r0, #12
 8012e4e:	f7ff f87c 	bl	8011f4a <memcpy>
 8012e52:	4621      	mov	r1, r4
 8012e54:	4638      	mov	r0, r7
 8012e56:	f7ff ffa5 	bl	8012da4 <_Bfree>
 8012e5a:	4644      	mov	r4, r8
 8012e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e60:	3501      	adds	r5, #1
 8012e62:	615e      	str	r6, [r3, #20]
 8012e64:	6125      	str	r5, [r4, #16]
 8012e66:	4620      	mov	r0, r4
 8012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6c:	08014064 	.word	0x08014064
 8012e70:	08014075 	.word	0x08014075

08012e74 <__hi0bits>:
 8012e74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012e78:	4603      	mov	r3, r0
 8012e7a:	bf36      	itet	cc
 8012e7c:	0403      	lslcc	r3, r0, #16
 8012e7e:	2000      	movcs	r0, #0
 8012e80:	2010      	movcc	r0, #16
 8012e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012e86:	bf3c      	itt	cc
 8012e88:	021b      	lslcc	r3, r3, #8
 8012e8a:	3008      	addcc	r0, #8
 8012e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e90:	bf3c      	itt	cc
 8012e92:	011b      	lslcc	r3, r3, #4
 8012e94:	3004      	addcc	r0, #4
 8012e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e9a:	bf3c      	itt	cc
 8012e9c:	009b      	lslcc	r3, r3, #2
 8012e9e:	3002      	addcc	r0, #2
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	db05      	blt.n	8012eb0 <__hi0bits+0x3c>
 8012ea4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012ea8:	f100 0001 	add.w	r0, r0, #1
 8012eac:	bf08      	it	eq
 8012eae:	2020      	moveq	r0, #32
 8012eb0:	4770      	bx	lr

08012eb2 <__lo0bits>:
 8012eb2:	6803      	ldr	r3, [r0, #0]
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	f013 0007 	ands.w	r0, r3, #7
 8012eba:	d00b      	beq.n	8012ed4 <__lo0bits+0x22>
 8012ebc:	07d9      	lsls	r1, r3, #31
 8012ebe:	d421      	bmi.n	8012f04 <__lo0bits+0x52>
 8012ec0:	0798      	lsls	r0, r3, #30
 8012ec2:	bf49      	itett	mi
 8012ec4:	085b      	lsrmi	r3, r3, #1
 8012ec6:	089b      	lsrpl	r3, r3, #2
 8012ec8:	2001      	movmi	r0, #1
 8012eca:	6013      	strmi	r3, [r2, #0]
 8012ecc:	bf5c      	itt	pl
 8012ece:	6013      	strpl	r3, [r2, #0]
 8012ed0:	2002      	movpl	r0, #2
 8012ed2:	4770      	bx	lr
 8012ed4:	b299      	uxth	r1, r3
 8012ed6:	b909      	cbnz	r1, 8012edc <__lo0bits+0x2a>
 8012ed8:	0c1b      	lsrs	r3, r3, #16
 8012eda:	2010      	movs	r0, #16
 8012edc:	b2d9      	uxtb	r1, r3
 8012ede:	b909      	cbnz	r1, 8012ee4 <__lo0bits+0x32>
 8012ee0:	3008      	adds	r0, #8
 8012ee2:	0a1b      	lsrs	r3, r3, #8
 8012ee4:	0719      	lsls	r1, r3, #28
 8012ee6:	bf04      	itt	eq
 8012ee8:	091b      	lsreq	r3, r3, #4
 8012eea:	3004      	addeq	r0, #4
 8012eec:	0799      	lsls	r1, r3, #30
 8012eee:	bf04      	itt	eq
 8012ef0:	089b      	lsreq	r3, r3, #2
 8012ef2:	3002      	addeq	r0, #2
 8012ef4:	07d9      	lsls	r1, r3, #31
 8012ef6:	d403      	bmi.n	8012f00 <__lo0bits+0x4e>
 8012ef8:	085b      	lsrs	r3, r3, #1
 8012efa:	f100 0001 	add.w	r0, r0, #1
 8012efe:	d003      	beq.n	8012f08 <__lo0bits+0x56>
 8012f00:	6013      	str	r3, [r2, #0]
 8012f02:	4770      	bx	lr
 8012f04:	2000      	movs	r0, #0
 8012f06:	4770      	bx	lr
 8012f08:	2020      	movs	r0, #32
 8012f0a:	4770      	bx	lr

08012f0c <__i2b>:
 8012f0c:	b510      	push	{r4, lr}
 8012f0e:	460c      	mov	r4, r1
 8012f10:	2101      	movs	r1, #1
 8012f12:	f7ff ff07 	bl	8012d24 <_Balloc>
 8012f16:	4602      	mov	r2, r0
 8012f18:	b928      	cbnz	r0, 8012f26 <__i2b+0x1a>
 8012f1a:	4b05      	ldr	r3, [pc, #20]	@ (8012f30 <__i2b+0x24>)
 8012f1c:	4805      	ldr	r0, [pc, #20]	@ (8012f34 <__i2b+0x28>)
 8012f1e:	f240 1145 	movw	r1, #325	@ 0x145
 8012f22:	f000 fcaf 	bl	8013884 <__assert_func>
 8012f26:	2301      	movs	r3, #1
 8012f28:	6144      	str	r4, [r0, #20]
 8012f2a:	6103      	str	r3, [r0, #16]
 8012f2c:	bd10      	pop	{r4, pc}
 8012f2e:	bf00      	nop
 8012f30:	08014064 	.word	0x08014064
 8012f34:	08014075 	.word	0x08014075

08012f38 <__multiply>:
 8012f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3c:	4614      	mov	r4, r2
 8012f3e:	690a      	ldr	r2, [r1, #16]
 8012f40:	6923      	ldr	r3, [r4, #16]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	bfa8      	it	ge
 8012f46:	4623      	movge	r3, r4
 8012f48:	460f      	mov	r7, r1
 8012f4a:	bfa4      	itt	ge
 8012f4c:	460c      	movge	r4, r1
 8012f4e:	461f      	movge	r7, r3
 8012f50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f58:	68a3      	ldr	r3, [r4, #8]
 8012f5a:	6861      	ldr	r1, [r4, #4]
 8012f5c:	eb0a 0609 	add.w	r6, sl, r9
 8012f60:	42b3      	cmp	r3, r6
 8012f62:	b085      	sub	sp, #20
 8012f64:	bfb8      	it	lt
 8012f66:	3101      	addlt	r1, #1
 8012f68:	f7ff fedc 	bl	8012d24 <_Balloc>
 8012f6c:	b930      	cbnz	r0, 8012f7c <__multiply+0x44>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	4b44      	ldr	r3, [pc, #272]	@ (8013084 <__multiply+0x14c>)
 8012f72:	4845      	ldr	r0, [pc, #276]	@ (8013088 <__multiply+0x150>)
 8012f74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012f78:	f000 fc84 	bl	8013884 <__assert_func>
 8012f7c:	f100 0514 	add.w	r5, r0, #20
 8012f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f84:	462b      	mov	r3, r5
 8012f86:	2200      	movs	r2, #0
 8012f88:	4543      	cmp	r3, r8
 8012f8a:	d321      	bcc.n	8012fd0 <__multiply+0x98>
 8012f8c:	f107 0114 	add.w	r1, r7, #20
 8012f90:	f104 0214 	add.w	r2, r4, #20
 8012f94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012f98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	1b13      	subs	r3, r2, r4
 8012fa0:	3b15      	subs	r3, #21
 8012fa2:	f023 0303 	bic.w	r3, r3, #3
 8012fa6:	3304      	adds	r3, #4
 8012fa8:	f104 0715 	add.w	r7, r4, #21
 8012fac:	42ba      	cmp	r2, r7
 8012fae:	bf38      	it	cc
 8012fb0:	2304      	movcc	r3, #4
 8012fb2:	9301      	str	r3, [sp, #4]
 8012fb4:	9b02      	ldr	r3, [sp, #8]
 8012fb6:	9103      	str	r1, [sp, #12]
 8012fb8:	428b      	cmp	r3, r1
 8012fba:	d80c      	bhi.n	8012fd6 <__multiply+0x9e>
 8012fbc:	2e00      	cmp	r6, #0
 8012fbe:	dd03      	ble.n	8012fc8 <__multiply+0x90>
 8012fc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d05b      	beq.n	8013080 <__multiply+0x148>
 8012fc8:	6106      	str	r6, [r0, #16]
 8012fca:	b005      	add	sp, #20
 8012fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd0:	f843 2b04 	str.w	r2, [r3], #4
 8012fd4:	e7d8      	b.n	8012f88 <__multiply+0x50>
 8012fd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012fda:	f1ba 0f00 	cmp.w	sl, #0
 8012fde:	d024      	beq.n	801302a <__multiply+0xf2>
 8012fe0:	f104 0e14 	add.w	lr, r4, #20
 8012fe4:	46a9      	mov	r9, r5
 8012fe6:	f04f 0c00 	mov.w	ip, #0
 8012fea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012fee:	f8d9 3000 	ldr.w	r3, [r9]
 8012ff2:	fa1f fb87 	uxth.w	fp, r7
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012ffc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013000:	f8d9 7000 	ldr.w	r7, [r9]
 8013004:	4463      	add	r3, ip
 8013006:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801300a:	fb0a c70b 	mla	r7, sl, fp, ip
 801300e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013012:	b29b      	uxth	r3, r3
 8013014:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013018:	4572      	cmp	r2, lr
 801301a:	f849 3b04 	str.w	r3, [r9], #4
 801301e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013022:	d8e2      	bhi.n	8012fea <__multiply+0xb2>
 8013024:	9b01      	ldr	r3, [sp, #4]
 8013026:	f845 c003 	str.w	ip, [r5, r3]
 801302a:	9b03      	ldr	r3, [sp, #12]
 801302c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013030:	3104      	adds	r1, #4
 8013032:	f1b9 0f00 	cmp.w	r9, #0
 8013036:	d021      	beq.n	801307c <__multiply+0x144>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	f104 0c14 	add.w	ip, r4, #20
 801303e:	46ae      	mov	lr, r5
 8013040:	f04f 0a00 	mov.w	sl, #0
 8013044:	f8bc b000 	ldrh.w	fp, [ip]
 8013048:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801304c:	fb09 770b 	mla	r7, r9, fp, r7
 8013050:	4457      	add	r7, sl
 8013052:	b29b      	uxth	r3, r3
 8013054:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013058:	f84e 3b04 	str.w	r3, [lr], #4
 801305c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013064:	f8be 3000 	ldrh.w	r3, [lr]
 8013068:	fb09 330a 	mla	r3, r9, sl, r3
 801306c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013070:	4562      	cmp	r2, ip
 8013072:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013076:	d8e5      	bhi.n	8013044 <__multiply+0x10c>
 8013078:	9f01      	ldr	r7, [sp, #4]
 801307a:	51eb      	str	r3, [r5, r7]
 801307c:	3504      	adds	r5, #4
 801307e:	e799      	b.n	8012fb4 <__multiply+0x7c>
 8013080:	3e01      	subs	r6, #1
 8013082:	e79b      	b.n	8012fbc <__multiply+0x84>
 8013084:	08014064 	.word	0x08014064
 8013088:	08014075 	.word	0x08014075

0801308c <__pow5mult>:
 801308c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013090:	4615      	mov	r5, r2
 8013092:	f012 0203 	ands.w	r2, r2, #3
 8013096:	4607      	mov	r7, r0
 8013098:	460e      	mov	r6, r1
 801309a:	d007      	beq.n	80130ac <__pow5mult+0x20>
 801309c:	4c25      	ldr	r4, [pc, #148]	@ (8013134 <__pow5mult+0xa8>)
 801309e:	3a01      	subs	r2, #1
 80130a0:	2300      	movs	r3, #0
 80130a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130a6:	f7ff fe9f 	bl	8012de8 <__multadd>
 80130aa:	4606      	mov	r6, r0
 80130ac:	10ad      	asrs	r5, r5, #2
 80130ae:	d03d      	beq.n	801312c <__pow5mult+0xa0>
 80130b0:	69fc      	ldr	r4, [r7, #28]
 80130b2:	b97c      	cbnz	r4, 80130d4 <__pow5mult+0x48>
 80130b4:	2010      	movs	r0, #16
 80130b6:	f7ff fd7f 	bl	8012bb8 <malloc>
 80130ba:	4602      	mov	r2, r0
 80130bc:	61f8      	str	r0, [r7, #28]
 80130be:	b928      	cbnz	r0, 80130cc <__pow5mult+0x40>
 80130c0:	4b1d      	ldr	r3, [pc, #116]	@ (8013138 <__pow5mult+0xac>)
 80130c2:	481e      	ldr	r0, [pc, #120]	@ (801313c <__pow5mult+0xb0>)
 80130c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80130c8:	f000 fbdc 	bl	8013884 <__assert_func>
 80130cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130d0:	6004      	str	r4, [r0, #0]
 80130d2:	60c4      	str	r4, [r0, #12]
 80130d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80130d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130dc:	b94c      	cbnz	r4, 80130f2 <__pow5mult+0x66>
 80130de:	f240 2171 	movw	r1, #625	@ 0x271
 80130e2:	4638      	mov	r0, r7
 80130e4:	f7ff ff12 	bl	8012f0c <__i2b>
 80130e8:	2300      	movs	r3, #0
 80130ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80130ee:	4604      	mov	r4, r0
 80130f0:	6003      	str	r3, [r0, #0]
 80130f2:	f04f 0900 	mov.w	r9, #0
 80130f6:	07eb      	lsls	r3, r5, #31
 80130f8:	d50a      	bpl.n	8013110 <__pow5mult+0x84>
 80130fa:	4631      	mov	r1, r6
 80130fc:	4622      	mov	r2, r4
 80130fe:	4638      	mov	r0, r7
 8013100:	f7ff ff1a 	bl	8012f38 <__multiply>
 8013104:	4631      	mov	r1, r6
 8013106:	4680      	mov	r8, r0
 8013108:	4638      	mov	r0, r7
 801310a:	f7ff fe4b 	bl	8012da4 <_Bfree>
 801310e:	4646      	mov	r6, r8
 8013110:	106d      	asrs	r5, r5, #1
 8013112:	d00b      	beq.n	801312c <__pow5mult+0xa0>
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	b938      	cbnz	r0, 8013128 <__pow5mult+0x9c>
 8013118:	4622      	mov	r2, r4
 801311a:	4621      	mov	r1, r4
 801311c:	4638      	mov	r0, r7
 801311e:	f7ff ff0b 	bl	8012f38 <__multiply>
 8013122:	6020      	str	r0, [r4, #0]
 8013124:	f8c0 9000 	str.w	r9, [r0]
 8013128:	4604      	mov	r4, r0
 801312a:	e7e4      	b.n	80130f6 <__pow5mult+0x6a>
 801312c:	4630      	mov	r0, r6
 801312e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013132:	bf00      	nop
 8013134:	080140d0 	.word	0x080140d0
 8013138:	08013ff5 	.word	0x08013ff5
 801313c:	08014075 	.word	0x08014075

08013140 <__lshift>:
 8013140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013144:	460c      	mov	r4, r1
 8013146:	6849      	ldr	r1, [r1, #4]
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801314e:	68a3      	ldr	r3, [r4, #8]
 8013150:	4607      	mov	r7, r0
 8013152:	4691      	mov	r9, r2
 8013154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013158:	f108 0601 	add.w	r6, r8, #1
 801315c:	42b3      	cmp	r3, r6
 801315e:	db0b      	blt.n	8013178 <__lshift+0x38>
 8013160:	4638      	mov	r0, r7
 8013162:	f7ff fddf 	bl	8012d24 <_Balloc>
 8013166:	4605      	mov	r5, r0
 8013168:	b948      	cbnz	r0, 801317e <__lshift+0x3e>
 801316a:	4602      	mov	r2, r0
 801316c:	4b28      	ldr	r3, [pc, #160]	@ (8013210 <__lshift+0xd0>)
 801316e:	4829      	ldr	r0, [pc, #164]	@ (8013214 <__lshift+0xd4>)
 8013170:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013174:	f000 fb86 	bl	8013884 <__assert_func>
 8013178:	3101      	adds	r1, #1
 801317a:	005b      	lsls	r3, r3, #1
 801317c:	e7ee      	b.n	801315c <__lshift+0x1c>
 801317e:	2300      	movs	r3, #0
 8013180:	f100 0114 	add.w	r1, r0, #20
 8013184:	f100 0210 	add.w	r2, r0, #16
 8013188:	4618      	mov	r0, r3
 801318a:	4553      	cmp	r3, sl
 801318c:	db33      	blt.n	80131f6 <__lshift+0xb6>
 801318e:	6920      	ldr	r0, [r4, #16]
 8013190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013194:	f104 0314 	add.w	r3, r4, #20
 8013198:	f019 091f 	ands.w	r9, r9, #31
 801319c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131a4:	d02b      	beq.n	80131fe <__lshift+0xbe>
 80131a6:	f1c9 0e20 	rsb	lr, r9, #32
 80131aa:	468a      	mov	sl, r1
 80131ac:	2200      	movs	r2, #0
 80131ae:	6818      	ldr	r0, [r3, #0]
 80131b0:	fa00 f009 	lsl.w	r0, r0, r9
 80131b4:	4310      	orrs	r0, r2
 80131b6:	f84a 0b04 	str.w	r0, [sl], #4
 80131ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80131be:	459c      	cmp	ip, r3
 80131c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80131c4:	d8f3      	bhi.n	80131ae <__lshift+0x6e>
 80131c6:	ebac 0304 	sub.w	r3, ip, r4
 80131ca:	3b15      	subs	r3, #21
 80131cc:	f023 0303 	bic.w	r3, r3, #3
 80131d0:	3304      	adds	r3, #4
 80131d2:	f104 0015 	add.w	r0, r4, #21
 80131d6:	4584      	cmp	ip, r0
 80131d8:	bf38      	it	cc
 80131da:	2304      	movcc	r3, #4
 80131dc:	50ca      	str	r2, [r1, r3]
 80131de:	b10a      	cbz	r2, 80131e4 <__lshift+0xa4>
 80131e0:	f108 0602 	add.w	r6, r8, #2
 80131e4:	3e01      	subs	r6, #1
 80131e6:	4638      	mov	r0, r7
 80131e8:	612e      	str	r6, [r5, #16]
 80131ea:	4621      	mov	r1, r4
 80131ec:	f7ff fdda 	bl	8012da4 <_Bfree>
 80131f0:	4628      	mov	r0, r5
 80131f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80131fa:	3301      	adds	r3, #1
 80131fc:	e7c5      	b.n	801318a <__lshift+0x4a>
 80131fe:	3904      	subs	r1, #4
 8013200:	f853 2b04 	ldr.w	r2, [r3], #4
 8013204:	f841 2f04 	str.w	r2, [r1, #4]!
 8013208:	459c      	cmp	ip, r3
 801320a:	d8f9      	bhi.n	8013200 <__lshift+0xc0>
 801320c:	e7ea      	b.n	80131e4 <__lshift+0xa4>
 801320e:	bf00      	nop
 8013210:	08014064 	.word	0x08014064
 8013214:	08014075 	.word	0x08014075

08013218 <__mcmp>:
 8013218:	690a      	ldr	r2, [r1, #16]
 801321a:	4603      	mov	r3, r0
 801321c:	6900      	ldr	r0, [r0, #16]
 801321e:	1a80      	subs	r0, r0, r2
 8013220:	b530      	push	{r4, r5, lr}
 8013222:	d10e      	bne.n	8013242 <__mcmp+0x2a>
 8013224:	3314      	adds	r3, #20
 8013226:	3114      	adds	r1, #20
 8013228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801322c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013238:	4295      	cmp	r5, r2
 801323a:	d003      	beq.n	8013244 <__mcmp+0x2c>
 801323c:	d205      	bcs.n	801324a <__mcmp+0x32>
 801323e:	f04f 30ff 	mov.w	r0, #4294967295
 8013242:	bd30      	pop	{r4, r5, pc}
 8013244:	42a3      	cmp	r3, r4
 8013246:	d3f3      	bcc.n	8013230 <__mcmp+0x18>
 8013248:	e7fb      	b.n	8013242 <__mcmp+0x2a>
 801324a:	2001      	movs	r0, #1
 801324c:	e7f9      	b.n	8013242 <__mcmp+0x2a>
	...

08013250 <__mdiff>:
 8013250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	4689      	mov	r9, r1
 8013256:	4606      	mov	r6, r0
 8013258:	4611      	mov	r1, r2
 801325a:	4648      	mov	r0, r9
 801325c:	4614      	mov	r4, r2
 801325e:	f7ff ffdb 	bl	8013218 <__mcmp>
 8013262:	1e05      	subs	r5, r0, #0
 8013264:	d112      	bne.n	801328c <__mdiff+0x3c>
 8013266:	4629      	mov	r1, r5
 8013268:	4630      	mov	r0, r6
 801326a:	f7ff fd5b 	bl	8012d24 <_Balloc>
 801326e:	4602      	mov	r2, r0
 8013270:	b928      	cbnz	r0, 801327e <__mdiff+0x2e>
 8013272:	4b3f      	ldr	r3, [pc, #252]	@ (8013370 <__mdiff+0x120>)
 8013274:	f240 2137 	movw	r1, #567	@ 0x237
 8013278:	483e      	ldr	r0, [pc, #248]	@ (8013374 <__mdiff+0x124>)
 801327a:	f000 fb03 	bl	8013884 <__assert_func>
 801327e:	2301      	movs	r3, #1
 8013280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013284:	4610      	mov	r0, r2
 8013286:	b003      	add	sp, #12
 8013288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801328c:	bfbc      	itt	lt
 801328e:	464b      	movlt	r3, r9
 8013290:	46a1      	movlt	r9, r4
 8013292:	4630      	mov	r0, r6
 8013294:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013298:	bfba      	itte	lt
 801329a:	461c      	movlt	r4, r3
 801329c:	2501      	movlt	r5, #1
 801329e:	2500      	movge	r5, #0
 80132a0:	f7ff fd40 	bl	8012d24 <_Balloc>
 80132a4:	4602      	mov	r2, r0
 80132a6:	b918      	cbnz	r0, 80132b0 <__mdiff+0x60>
 80132a8:	4b31      	ldr	r3, [pc, #196]	@ (8013370 <__mdiff+0x120>)
 80132aa:	f240 2145 	movw	r1, #581	@ 0x245
 80132ae:	e7e3      	b.n	8013278 <__mdiff+0x28>
 80132b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80132b4:	6926      	ldr	r6, [r4, #16]
 80132b6:	60c5      	str	r5, [r0, #12]
 80132b8:	f109 0310 	add.w	r3, r9, #16
 80132bc:	f109 0514 	add.w	r5, r9, #20
 80132c0:	f104 0e14 	add.w	lr, r4, #20
 80132c4:	f100 0b14 	add.w	fp, r0, #20
 80132c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80132cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	46d9      	mov	r9, fp
 80132d4:	f04f 0c00 	mov.w	ip, #0
 80132d8:	9b01      	ldr	r3, [sp, #4]
 80132da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80132de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80132e2:	9301      	str	r3, [sp, #4]
 80132e4:	fa1f f38a 	uxth.w	r3, sl
 80132e8:	4619      	mov	r1, r3
 80132ea:	b283      	uxth	r3, r0
 80132ec:	1acb      	subs	r3, r1, r3
 80132ee:	0c00      	lsrs	r0, r0, #16
 80132f0:	4463      	add	r3, ip
 80132f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80132f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013300:	4576      	cmp	r6, lr
 8013302:	f849 3b04 	str.w	r3, [r9], #4
 8013306:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801330a:	d8e5      	bhi.n	80132d8 <__mdiff+0x88>
 801330c:	1b33      	subs	r3, r6, r4
 801330e:	3b15      	subs	r3, #21
 8013310:	f023 0303 	bic.w	r3, r3, #3
 8013314:	3415      	adds	r4, #21
 8013316:	3304      	adds	r3, #4
 8013318:	42a6      	cmp	r6, r4
 801331a:	bf38      	it	cc
 801331c:	2304      	movcc	r3, #4
 801331e:	441d      	add	r5, r3
 8013320:	445b      	add	r3, fp
 8013322:	461e      	mov	r6, r3
 8013324:	462c      	mov	r4, r5
 8013326:	4544      	cmp	r4, r8
 8013328:	d30e      	bcc.n	8013348 <__mdiff+0xf8>
 801332a:	f108 0103 	add.w	r1, r8, #3
 801332e:	1b49      	subs	r1, r1, r5
 8013330:	f021 0103 	bic.w	r1, r1, #3
 8013334:	3d03      	subs	r5, #3
 8013336:	45a8      	cmp	r8, r5
 8013338:	bf38      	it	cc
 801333a:	2100      	movcc	r1, #0
 801333c:	440b      	add	r3, r1
 801333e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013342:	b191      	cbz	r1, 801336a <__mdiff+0x11a>
 8013344:	6117      	str	r7, [r2, #16]
 8013346:	e79d      	b.n	8013284 <__mdiff+0x34>
 8013348:	f854 1b04 	ldr.w	r1, [r4], #4
 801334c:	46e6      	mov	lr, ip
 801334e:	0c08      	lsrs	r0, r1, #16
 8013350:	fa1c fc81 	uxtah	ip, ip, r1
 8013354:	4471      	add	r1, lr
 8013356:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801335a:	b289      	uxth	r1, r1
 801335c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013360:	f846 1b04 	str.w	r1, [r6], #4
 8013364:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013368:	e7dd      	b.n	8013326 <__mdiff+0xd6>
 801336a:	3f01      	subs	r7, #1
 801336c:	e7e7      	b.n	801333e <__mdiff+0xee>
 801336e:	bf00      	nop
 8013370:	08014064 	.word	0x08014064
 8013374:	08014075 	.word	0x08014075

08013378 <__d2b>:
 8013378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801337c:	460f      	mov	r7, r1
 801337e:	2101      	movs	r1, #1
 8013380:	ec59 8b10 	vmov	r8, r9, d0
 8013384:	4616      	mov	r6, r2
 8013386:	f7ff fccd 	bl	8012d24 <_Balloc>
 801338a:	4604      	mov	r4, r0
 801338c:	b930      	cbnz	r0, 801339c <__d2b+0x24>
 801338e:	4602      	mov	r2, r0
 8013390:	4b23      	ldr	r3, [pc, #140]	@ (8013420 <__d2b+0xa8>)
 8013392:	4824      	ldr	r0, [pc, #144]	@ (8013424 <__d2b+0xac>)
 8013394:	f240 310f 	movw	r1, #783	@ 0x30f
 8013398:	f000 fa74 	bl	8013884 <__assert_func>
 801339c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133a4:	b10d      	cbz	r5, 80133aa <__d2b+0x32>
 80133a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133aa:	9301      	str	r3, [sp, #4]
 80133ac:	f1b8 0300 	subs.w	r3, r8, #0
 80133b0:	d023      	beq.n	80133fa <__d2b+0x82>
 80133b2:	4668      	mov	r0, sp
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	f7ff fd7c 	bl	8012eb2 <__lo0bits>
 80133ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133be:	b1d0      	cbz	r0, 80133f6 <__d2b+0x7e>
 80133c0:	f1c0 0320 	rsb	r3, r0, #32
 80133c4:	fa02 f303 	lsl.w	r3, r2, r3
 80133c8:	430b      	orrs	r3, r1
 80133ca:	40c2      	lsrs	r2, r0
 80133cc:	6163      	str	r3, [r4, #20]
 80133ce:	9201      	str	r2, [sp, #4]
 80133d0:	9b01      	ldr	r3, [sp, #4]
 80133d2:	61a3      	str	r3, [r4, #24]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	bf0c      	ite	eq
 80133d8:	2201      	moveq	r2, #1
 80133da:	2202      	movne	r2, #2
 80133dc:	6122      	str	r2, [r4, #16]
 80133de:	b1a5      	cbz	r5, 801340a <__d2b+0x92>
 80133e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80133e4:	4405      	add	r5, r0
 80133e6:	603d      	str	r5, [r7, #0]
 80133e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80133ec:	6030      	str	r0, [r6, #0]
 80133ee:	4620      	mov	r0, r4
 80133f0:	b003      	add	sp, #12
 80133f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f6:	6161      	str	r1, [r4, #20]
 80133f8:	e7ea      	b.n	80133d0 <__d2b+0x58>
 80133fa:	a801      	add	r0, sp, #4
 80133fc:	f7ff fd59 	bl	8012eb2 <__lo0bits>
 8013400:	9b01      	ldr	r3, [sp, #4]
 8013402:	6163      	str	r3, [r4, #20]
 8013404:	3020      	adds	r0, #32
 8013406:	2201      	movs	r2, #1
 8013408:	e7e8      	b.n	80133dc <__d2b+0x64>
 801340a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801340e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013412:	6038      	str	r0, [r7, #0]
 8013414:	6918      	ldr	r0, [r3, #16]
 8013416:	f7ff fd2d 	bl	8012e74 <__hi0bits>
 801341a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801341e:	e7e5      	b.n	80133ec <__d2b+0x74>
 8013420:	08014064 	.word	0x08014064
 8013424:	08014075 	.word	0x08014075

08013428 <__ssputs_r>:
 8013428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801342c:	688e      	ldr	r6, [r1, #8]
 801342e:	461f      	mov	r7, r3
 8013430:	42be      	cmp	r6, r7
 8013432:	680b      	ldr	r3, [r1, #0]
 8013434:	4682      	mov	sl, r0
 8013436:	460c      	mov	r4, r1
 8013438:	4690      	mov	r8, r2
 801343a:	d82d      	bhi.n	8013498 <__ssputs_r+0x70>
 801343c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013444:	d026      	beq.n	8013494 <__ssputs_r+0x6c>
 8013446:	6965      	ldr	r5, [r4, #20]
 8013448:	6909      	ldr	r1, [r1, #16]
 801344a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801344e:	eba3 0901 	sub.w	r9, r3, r1
 8013452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013456:	1c7b      	adds	r3, r7, #1
 8013458:	444b      	add	r3, r9
 801345a:	106d      	asrs	r5, r5, #1
 801345c:	429d      	cmp	r5, r3
 801345e:	bf38      	it	cc
 8013460:	461d      	movcc	r5, r3
 8013462:	0553      	lsls	r3, r2, #21
 8013464:	d527      	bpl.n	80134b6 <__ssputs_r+0x8e>
 8013466:	4629      	mov	r1, r5
 8013468:	f7ff fbd0 	bl	8012c0c <_malloc_r>
 801346c:	4606      	mov	r6, r0
 801346e:	b360      	cbz	r0, 80134ca <__ssputs_r+0xa2>
 8013470:	6921      	ldr	r1, [r4, #16]
 8013472:	464a      	mov	r2, r9
 8013474:	f7fe fd69 	bl	8011f4a <memcpy>
 8013478:	89a3      	ldrh	r3, [r4, #12]
 801347a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801347e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013482:	81a3      	strh	r3, [r4, #12]
 8013484:	6126      	str	r6, [r4, #16]
 8013486:	6165      	str	r5, [r4, #20]
 8013488:	444e      	add	r6, r9
 801348a:	eba5 0509 	sub.w	r5, r5, r9
 801348e:	6026      	str	r6, [r4, #0]
 8013490:	60a5      	str	r5, [r4, #8]
 8013492:	463e      	mov	r6, r7
 8013494:	42be      	cmp	r6, r7
 8013496:	d900      	bls.n	801349a <__ssputs_r+0x72>
 8013498:	463e      	mov	r6, r7
 801349a:	6820      	ldr	r0, [r4, #0]
 801349c:	4632      	mov	r2, r6
 801349e:	4641      	mov	r1, r8
 80134a0:	f000 f9c6 	bl	8013830 <memmove>
 80134a4:	68a3      	ldr	r3, [r4, #8]
 80134a6:	1b9b      	subs	r3, r3, r6
 80134a8:	60a3      	str	r3, [r4, #8]
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	4433      	add	r3, r6
 80134ae:	6023      	str	r3, [r4, #0]
 80134b0:	2000      	movs	r0, #0
 80134b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b6:	462a      	mov	r2, r5
 80134b8:	f000 fa28 	bl	801390c <_realloc_r>
 80134bc:	4606      	mov	r6, r0
 80134be:	2800      	cmp	r0, #0
 80134c0:	d1e0      	bne.n	8013484 <__ssputs_r+0x5c>
 80134c2:	6921      	ldr	r1, [r4, #16]
 80134c4:	4650      	mov	r0, sl
 80134c6:	f7ff fb2d 	bl	8012b24 <_free_r>
 80134ca:	230c      	movs	r3, #12
 80134cc:	f8ca 3000 	str.w	r3, [sl]
 80134d0:	89a3      	ldrh	r3, [r4, #12]
 80134d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134d6:	81a3      	strh	r3, [r4, #12]
 80134d8:	f04f 30ff 	mov.w	r0, #4294967295
 80134dc:	e7e9      	b.n	80134b2 <__ssputs_r+0x8a>
	...

080134e0 <_svfiprintf_r>:
 80134e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e4:	4698      	mov	r8, r3
 80134e6:	898b      	ldrh	r3, [r1, #12]
 80134e8:	061b      	lsls	r3, r3, #24
 80134ea:	b09d      	sub	sp, #116	@ 0x74
 80134ec:	4607      	mov	r7, r0
 80134ee:	460d      	mov	r5, r1
 80134f0:	4614      	mov	r4, r2
 80134f2:	d510      	bpl.n	8013516 <_svfiprintf_r+0x36>
 80134f4:	690b      	ldr	r3, [r1, #16]
 80134f6:	b973      	cbnz	r3, 8013516 <_svfiprintf_r+0x36>
 80134f8:	2140      	movs	r1, #64	@ 0x40
 80134fa:	f7ff fb87 	bl	8012c0c <_malloc_r>
 80134fe:	6028      	str	r0, [r5, #0]
 8013500:	6128      	str	r0, [r5, #16]
 8013502:	b930      	cbnz	r0, 8013512 <_svfiprintf_r+0x32>
 8013504:	230c      	movs	r3, #12
 8013506:	603b      	str	r3, [r7, #0]
 8013508:	f04f 30ff 	mov.w	r0, #4294967295
 801350c:	b01d      	add	sp, #116	@ 0x74
 801350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013512:	2340      	movs	r3, #64	@ 0x40
 8013514:	616b      	str	r3, [r5, #20]
 8013516:	2300      	movs	r3, #0
 8013518:	9309      	str	r3, [sp, #36]	@ 0x24
 801351a:	2320      	movs	r3, #32
 801351c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013520:	f8cd 800c 	str.w	r8, [sp, #12]
 8013524:	2330      	movs	r3, #48	@ 0x30
 8013526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80136c4 <_svfiprintf_r+0x1e4>
 801352a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801352e:	f04f 0901 	mov.w	r9, #1
 8013532:	4623      	mov	r3, r4
 8013534:	469a      	mov	sl, r3
 8013536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801353a:	b10a      	cbz	r2, 8013540 <_svfiprintf_r+0x60>
 801353c:	2a25      	cmp	r2, #37	@ 0x25
 801353e:	d1f9      	bne.n	8013534 <_svfiprintf_r+0x54>
 8013540:	ebba 0b04 	subs.w	fp, sl, r4
 8013544:	d00b      	beq.n	801355e <_svfiprintf_r+0x7e>
 8013546:	465b      	mov	r3, fp
 8013548:	4622      	mov	r2, r4
 801354a:	4629      	mov	r1, r5
 801354c:	4638      	mov	r0, r7
 801354e:	f7ff ff6b 	bl	8013428 <__ssputs_r>
 8013552:	3001      	adds	r0, #1
 8013554:	f000 80a7 	beq.w	80136a6 <_svfiprintf_r+0x1c6>
 8013558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801355a:	445a      	add	r2, fp
 801355c:	9209      	str	r2, [sp, #36]	@ 0x24
 801355e:	f89a 3000 	ldrb.w	r3, [sl]
 8013562:	2b00      	cmp	r3, #0
 8013564:	f000 809f 	beq.w	80136a6 <_svfiprintf_r+0x1c6>
 8013568:	2300      	movs	r3, #0
 801356a:	f04f 32ff 	mov.w	r2, #4294967295
 801356e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013572:	f10a 0a01 	add.w	sl, sl, #1
 8013576:	9304      	str	r3, [sp, #16]
 8013578:	9307      	str	r3, [sp, #28]
 801357a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801357e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013580:	4654      	mov	r4, sl
 8013582:	2205      	movs	r2, #5
 8013584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013588:	484e      	ldr	r0, [pc, #312]	@ (80136c4 <_svfiprintf_r+0x1e4>)
 801358a:	f7ec fec1 	bl	8000310 <memchr>
 801358e:	9a04      	ldr	r2, [sp, #16]
 8013590:	b9d8      	cbnz	r0, 80135ca <_svfiprintf_r+0xea>
 8013592:	06d0      	lsls	r0, r2, #27
 8013594:	bf44      	itt	mi
 8013596:	2320      	movmi	r3, #32
 8013598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801359c:	0711      	lsls	r1, r2, #28
 801359e:	bf44      	itt	mi
 80135a0:	232b      	movmi	r3, #43	@ 0x2b
 80135a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135a6:	f89a 3000 	ldrb.w	r3, [sl]
 80135aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80135ac:	d015      	beq.n	80135da <_svfiprintf_r+0xfa>
 80135ae:	9a07      	ldr	r2, [sp, #28]
 80135b0:	4654      	mov	r4, sl
 80135b2:	2000      	movs	r0, #0
 80135b4:	f04f 0c0a 	mov.w	ip, #10
 80135b8:	4621      	mov	r1, r4
 80135ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135be:	3b30      	subs	r3, #48	@ 0x30
 80135c0:	2b09      	cmp	r3, #9
 80135c2:	d94b      	bls.n	801365c <_svfiprintf_r+0x17c>
 80135c4:	b1b0      	cbz	r0, 80135f4 <_svfiprintf_r+0x114>
 80135c6:	9207      	str	r2, [sp, #28]
 80135c8:	e014      	b.n	80135f4 <_svfiprintf_r+0x114>
 80135ca:	eba0 0308 	sub.w	r3, r0, r8
 80135ce:	fa09 f303 	lsl.w	r3, r9, r3
 80135d2:	4313      	orrs	r3, r2
 80135d4:	9304      	str	r3, [sp, #16]
 80135d6:	46a2      	mov	sl, r4
 80135d8:	e7d2      	b.n	8013580 <_svfiprintf_r+0xa0>
 80135da:	9b03      	ldr	r3, [sp, #12]
 80135dc:	1d19      	adds	r1, r3, #4
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	9103      	str	r1, [sp, #12]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	bfbb      	ittet	lt
 80135e6:	425b      	neglt	r3, r3
 80135e8:	f042 0202 	orrlt.w	r2, r2, #2
 80135ec:	9307      	strge	r3, [sp, #28]
 80135ee:	9307      	strlt	r3, [sp, #28]
 80135f0:	bfb8      	it	lt
 80135f2:	9204      	strlt	r2, [sp, #16]
 80135f4:	7823      	ldrb	r3, [r4, #0]
 80135f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80135f8:	d10a      	bne.n	8013610 <_svfiprintf_r+0x130>
 80135fa:	7863      	ldrb	r3, [r4, #1]
 80135fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80135fe:	d132      	bne.n	8013666 <_svfiprintf_r+0x186>
 8013600:	9b03      	ldr	r3, [sp, #12]
 8013602:	1d1a      	adds	r2, r3, #4
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	9203      	str	r2, [sp, #12]
 8013608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801360c:	3402      	adds	r4, #2
 801360e:	9305      	str	r3, [sp, #20]
 8013610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136d4 <_svfiprintf_r+0x1f4>
 8013614:	7821      	ldrb	r1, [r4, #0]
 8013616:	2203      	movs	r2, #3
 8013618:	4650      	mov	r0, sl
 801361a:	f7ec fe79 	bl	8000310 <memchr>
 801361e:	b138      	cbz	r0, 8013630 <_svfiprintf_r+0x150>
 8013620:	9b04      	ldr	r3, [sp, #16]
 8013622:	eba0 000a 	sub.w	r0, r0, sl
 8013626:	2240      	movs	r2, #64	@ 0x40
 8013628:	4082      	lsls	r2, r0
 801362a:	4313      	orrs	r3, r2
 801362c:	3401      	adds	r4, #1
 801362e:	9304      	str	r3, [sp, #16]
 8013630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013634:	4824      	ldr	r0, [pc, #144]	@ (80136c8 <_svfiprintf_r+0x1e8>)
 8013636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801363a:	2206      	movs	r2, #6
 801363c:	f7ec fe68 	bl	8000310 <memchr>
 8013640:	2800      	cmp	r0, #0
 8013642:	d036      	beq.n	80136b2 <_svfiprintf_r+0x1d2>
 8013644:	4b21      	ldr	r3, [pc, #132]	@ (80136cc <_svfiprintf_r+0x1ec>)
 8013646:	bb1b      	cbnz	r3, 8013690 <_svfiprintf_r+0x1b0>
 8013648:	9b03      	ldr	r3, [sp, #12]
 801364a:	3307      	adds	r3, #7
 801364c:	f023 0307 	bic.w	r3, r3, #7
 8013650:	3308      	adds	r3, #8
 8013652:	9303      	str	r3, [sp, #12]
 8013654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013656:	4433      	add	r3, r6
 8013658:	9309      	str	r3, [sp, #36]	@ 0x24
 801365a:	e76a      	b.n	8013532 <_svfiprintf_r+0x52>
 801365c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013660:	460c      	mov	r4, r1
 8013662:	2001      	movs	r0, #1
 8013664:	e7a8      	b.n	80135b8 <_svfiprintf_r+0xd8>
 8013666:	2300      	movs	r3, #0
 8013668:	3401      	adds	r4, #1
 801366a:	9305      	str	r3, [sp, #20]
 801366c:	4619      	mov	r1, r3
 801366e:	f04f 0c0a 	mov.w	ip, #10
 8013672:	4620      	mov	r0, r4
 8013674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013678:	3a30      	subs	r2, #48	@ 0x30
 801367a:	2a09      	cmp	r2, #9
 801367c:	d903      	bls.n	8013686 <_svfiprintf_r+0x1a6>
 801367e:	2b00      	cmp	r3, #0
 8013680:	d0c6      	beq.n	8013610 <_svfiprintf_r+0x130>
 8013682:	9105      	str	r1, [sp, #20]
 8013684:	e7c4      	b.n	8013610 <_svfiprintf_r+0x130>
 8013686:	fb0c 2101 	mla	r1, ip, r1, r2
 801368a:	4604      	mov	r4, r0
 801368c:	2301      	movs	r3, #1
 801368e:	e7f0      	b.n	8013672 <_svfiprintf_r+0x192>
 8013690:	ab03      	add	r3, sp, #12
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	462a      	mov	r2, r5
 8013696:	4b0e      	ldr	r3, [pc, #56]	@ (80136d0 <_svfiprintf_r+0x1f0>)
 8013698:	a904      	add	r1, sp, #16
 801369a:	4638      	mov	r0, r7
 801369c:	f7fd ff08 	bl	80114b0 <_printf_float>
 80136a0:	1c42      	adds	r2, r0, #1
 80136a2:	4606      	mov	r6, r0
 80136a4:	d1d6      	bne.n	8013654 <_svfiprintf_r+0x174>
 80136a6:	89ab      	ldrh	r3, [r5, #12]
 80136a8:	065b      	lsls	r3, r3, #25
 80136aa:	f53f af2d 	bmi.w	8013508 <_svfiprintf_r+0x28>
 80136ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80136b0:	e72c      	b.n	801350c <_svfiprintf_r+0x2c>
 80136b2:	ab03      	add	r3, sp, #12
 80136b4:	9300      	str	r3, [sp, #0]
 80136b6:	462a      	mov	r2, r5
 80136b8:	4b05      	ldr	r3, [pc, #20]	@ (80136d0 <_svfiprintf_r+0x1f0>)
 80136ba:	a904      	add	r1, sp, #16
 80136bc:	4638      	mov	r0, r7
 80136be:	f7fe f97f 	bl	80119c0 <_printf_i>
 80136c2:	e7ed      	b.n	80136a0 <_svfiprintf_r+0x1c0>
 80136c4:	080141d0 	.word	0x080141d0
 80136c8:	080141da 	.word	0x080141da
 80136cc:	080114b1 	.word	0x080114b1
 80136d0:	08013429 	.word	0x08013429
 80136d4:	080141d6 	.word	0x080141d6

080136d8 <__sflush_r>:
 80136d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e0:	0716      	lsls	r6, r2, #28
 80136e2:	4605      	mov	r5, r0
 80136e4:	460c      	mov	r4, r1
 80136e6:	d454      	bmi.n	8013792 <__sflush_r+0xba>
 80136e8:	684b      	ldr	r3, [r1, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	dc02      	bgt.n	80136f4 <__sflush_r+0x1c>
 80136ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	dd48      	ble.n	8013786 <__sflush_r+0xae>
 80136f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136f6:	2e00      	cmp	r6, #0
 80136f8:	d045      	beq.n	8013786 <__sflush_r+0xae>
 80136fa:	2300      	movs	r3, #0
 80136fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013700:	682f      	ldr	r7, [r5, #0]
 8013702:	6a21      	ldr	r1, [r4, #32]
 8013704:	602b      	str	r3, [r5, #0]
 8013706:	d030      	beq.n	801376a <__sflush_r+0x92>
 8013708:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801370a:	89a3      	ldrh	r3, [r4, #12]
 801370c:	0759      	lsls	r1, r3, #29
 801370e:	d505      	bpl.n	801371c <__sflush_r+0x44>
 8013710:	6863      	ldr	r3, [r4, #4]
 8013712:	1ad2      	subs	r2, r2, r3
 8013714:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013716:	b10b      	cbz	r3, 801371c <__sflush_r+0x44>
 8013718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801371a:	1ad2      	subs	r2, r2, r3
 801371c:	2300      	movs	r3, #0
 801371e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013720:	6a21      	ldr	r1, [r4, #32]
 8013722:	4628      	mov	r0, r5
 8013724:	47b0      	blx	r6
 8013726:	1c43      	adds	r3, r0, #1
 8013728:	89a3      	ldrh	r3, [r4, #12]
 801372a:	d106      	bne.n	801373a <__sflush_r+0x62>
 801372c:	6829      	ldr	r1, [r5, #0]
 801372e:	291d      	cmp	r1, #29
 8013730:	d82b      	bhi.n	801378a <__sflush_r+0xb2>
 8013732:	4a2a      	ldr	r2, [pc, #168]	@ (80137dc <__sflush_r+0x104>)
 8013734:	410a      	asrs	r2, r1
 8013736:	07d6      	lsls	r6, r2, #31
 8013738:	d427      	bmi.n	801378a <__sflush_r+0xb2>
 801373a:	2200      	movs	r2, #0
 801373c:	6062      	str	r2, [r4, #4]
 801373e:	04d9      	lsls	r1, r3, #19
 8013740:	6922      	ldr	r2, [r4, #16]
 8013742:	6022      	str	r2, [r4, #0]
 8013744:	d504      	bpl.n	8013750 <__sflush_r+0x78>
 8013746:	1c42      	adds	r2, r0, #1
 8013748:	d101      	bne.n	801374e <__sflush_r+0x76>
 801374a:	682b      	ldr	r3, [r5, #0]
 801374c:	b903      	cbnz	r3, 8013750 <__sflush_r+0x78>
 801374e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013752:	602f      	str	r7, [r5, #0]
 8013754:	b1b9      	cbz	r1, 8013786 <__sflush_r+0xae>
 8013756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801375a:	4299      	cmp	r1, r3
 801375c:	d002      	beq.n	8013764 <__sflush_r+0x8c>
 801375e:	4628      	mov	r0, r5
 8013760:	f7ff f9e0 	bl	8012b24 <_free_r>
 8013764:	2300      	movs	r3, #0
 8013766:	6363      	str	r3, [r4, #52]	@ 0x34
 8013768:	e00d      	b.n	8013786 <__sflush_r+0xae>
 801376a:	2301      	movs	r3, #1
 801376c:	4628      	mov	r0, r5
 801376e:	47b0      	blx	r6
 8013770:	4602      	mov	r2, r0
 8013772:	1c50      	adds	r0, r2, #1
 8013774:	d1c9      	bne.n	801370a <__sflush_r+0x32>
 8013776:	682b      	ldr	r3, [r5, #0]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d0c6      	beq.n	801370a <__sflush_r+0x32>
 801377c:	2b1d      	cmp	r3, #29
 801377e:	d001      	beq.n	8013784 <__sflush_r+0xac>
 8013780:	2b16      	cmp	r3, #22
 8013782:	d11e      	bne.n	80137c2 <__sflush_r+0xea>
 8013784:	602f      	str	r7, [r5, #0]
 8013786:	2000      	movs	r0, #0
 8013788:	e022      	b.n	80137d0 <__sflush_r+0xf8>
 801378a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801378e:	b21b      	sxth	r3, r3
 8013790:	e01b      	b.n	80137ca <__sflush_r+0xf2>
 8013792:	690f      	ldr	r7, [r1, #16]
 8013794:	2f00      	cmp	r7, #0
 8013796:	d0f6      	beq.n	8013786 <__sflush_r+0xae>
 8013798:	0793      	lsls	r3, r2, #30
 801379a:	680e      	ldr	r6, [r1, #0]
 801379c:	bf08      	it	eq
 801379e:	694b      	ldreq	r3, [r1, #20]
 80137a0:	600f      	str	r7, [r1, #0]
 80137a2:	bf18      	it	ne
 80137a4:	2300      	movne	r3, #0
 80137a6:	eba6 0807 	sub.w	r8, r6, r7
 80137aa:	608b      	str	r3, [r1, #8]
 80137ac:	f1b8 0f00 	cmp.w	r8, #0
 80137b0:	dde9      	ble.n	8013786 <__sflush_r+0xae>
 80137b2:	6a21      	ldr	r1, [r4, #32]
 80137b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80137b6:	4643      	mov	r3, r8
 80137b8:	463a      	mov	r2, r7
 80137ba:	4628      	mov	r0, r5
 80137bc:	47b0      	blx	r6
 80137be:	2800      	cmp	r0, #0
 80137c0:	dc08      	bgt.n	80137d4 <__sflush_r+0xfc>
 80137c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137ca:	81a3      	strh	r3, [r4, #12]
 80137cc:	f04f 30ff 	mov.w	r0, #4294967295
 80137d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137d4:	4407      	add	r7, r0
 80137d6:	eba8 0800 	sub.w	r8, r8, r0
 80137da:	e7e7      	b.n	80137ac <__sflush_r+0xd4>
 80137dc:	dfbffffe 	.word	0xdfbffffe

080137e0 <_fflush_r>:
 80137e0:	b538      	push	{r3, r4, r5, lr}
 80137e2:	690b      	ldr	r3, [r1, #16]
 80137e4:	4605      	mov	r5, r0
 80137e6:	460c      	mov	r4, r1
 80137e8:	b913      	cbnz	r3, 80137f0 <_fflush_r+0x10>
 80137ea:	2500      	movs	r5, #0
 80137ec:	4628      	mov	r0, r5
 80137ee:	bd38      	pop	{r3, r4, r5, pc}
 80137f0:	b118      	cbz	r0, 80137fa <_fflush_r+0x1a>
 80137f2:	6a03      	ldr	r3, [r0, #32]
 80137f4:	b90b      	cbnz	r3, 80137fa <_fflush_r+0x1a>
 80137f6:	f7fe fa8f 	bl	8011d18 <__sinit>
 80137fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d0f3      	beq.n	80137ea <_fflush_r+0xa>
 8013802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013804:	07d0      	lsls	r0, r2, #31
 8013806:	d404      	bmi.n	8013812 <_fflush_r+0x32>
 8013808:	0599      	lsls	r1, r3, #22
 801380a:	d402      	bmi.n	8013812 <_fflush_r+0x32>
 801380c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801380e:	f7fe fb9a 	bl	8011f46 <__retarget_lock_acquire_recursive>
 8013812:	4628      	mov	r0, r5
 8013814:	4621      	mov	r1, r4
 8013816:	f7ff ff5f 	bl	80136d8 <__sflush_r>
 801381a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801381c:	07da      	lsls	r2, r3, #31
 801381e:	4605      	mov	r5, r0
 8013820:	d4e4      	bmi.n	80137ec <_fflush_r+0xc>
 8013822:	89a3      	ldrh	r3, [r4, #12]
 8013824:	059b      	lsls	r3, r3, #22
 8013826:	d4e1      	bmi.n	80137ec <_fflush_r+0xc>
 8013828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801382a:	f7fe fb8d 	bl	8011f48 <__retarget_lock_release_recursive>
 801382e:	e7dd      	b.n	80137ec <_fflush_r+0xc>

08013830 <memmove>:
 8013830:	4288      	cmp	r0, r1
 8013832:	b510      	push	{r4, lr}
 8013834:	eb01 0402 	add.w	r4, r1, r2
 8013838:	d902      	bls.n	8013840 <memmove+0x10>
 801383a:	4284      	cmp	r4, r0
 801383c:	4623      	mov	r3, r4
 801383e:	d807      	bhi.n	8013850 <memmove+0x20>
 8013840:	1e43      	subs	r3, r0, #1
 8013842:	42a1      	cmp	r1, r4
 8013844:	d008      	beq.n	8013858 <memmove+0x28>
 8013846:	f811 2b01 	ldrb.w	r2, [r1], #1
 801384a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801384e:	e7f8      	b.n	8013842 <memmove+0x12>
 8013850:	4402      	add	r2, r0
 8013852:	4601      	mov	r1, r0
 8013854:	428a      	cmp	r2, r1
 8013856:	d100      	bne.n	801385a <memmove+0x2a>
 8013858:	bd10      	pop	{r4, pc}
 801385a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801385e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013862:	e7f7      	b.n	8013854 <memmove+0x24>

08013864 <_sbrk_r>:
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4d06      	ldr	r5, [pc, #24]	@ (8013880 <_sbrk_r+0x1c>)
 8013868:	2300      	movs	r3, #0
 801386a:	4604      	mov	r4, r0
 801386c:	4608      	mov	r0, r1
 801386e:	602b      	str	r3, [r5, #0]
 8013870:	f7ee fad8 	bl	8001e24 <_sbrk>
 8013874:	1c43      	adds	r3, r0, #1
 8013876:	d102      	bne.n	801387e <_sbrk_r+0x1a>
 8013878:	682b      	ldr	r3, [r5, #0]
 801387a:	b103      	cbz	r3, 801387e <_sbrk_r+0x1a>
 801387c:	6023      	str	r3, [r4, #0]
 801387e:	bd38      	pop	{r3, r4, r5, pc}
 8013880:	240035f4 	.word	0x240035f4

08013884 <__assert_func>:
 8013884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013886:	4614      	mov	r4, r2
 8013888:	461a      	mov	r2, r3
 801388a:	4b09      	ldr	r3, [pc, #36]	@ (80138b0 <__assert_func+0x2c>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	4605      	mov	r5, r0
 8013890:	68d8      	ldr	r0, [r3, #12]
 8013892:	b954      	cbnz	r4, 80138aa <__assert_func+0x26>
 8013894:	4b07      	ldr	r3, [pc, #28]	@ (80138b4 <__assert_func+0x30>)
 8013896:	461c      	mov	r4, r3
 8013898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801389c:	9100      	str	r1, [sp, #0]
 801389e:	462b      	mov	r3, r5
 80138a0:	4905      	ldr	r1, [pc, #20]	@ (80138b8 <__assert_func+0x34>)
 80138a2:	f000 f86f 	bl	8013984 <fiprintf>
 80138a6:	f000 f87f 	bl	80139a8 <abort>
 80138aa:	4b04      	ldr	r3, [pc, #16]	@ (80138bc <__assert_func+0x38>)
 80138ac:	e7f4      	b.n	8013898 <__assert_func+0x14>
 80138ae:	bf00      	nop
 80138b0:	24000110 	.word	0x24000110
 80138b4:	08014226 	.word	0x08014226
 80138b8:	080141f8 	.word	0x080141f8
 80138bc:	080141eb 	.word	0x080141eb

080138c0 <_calloc_r>:
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	fba1 5402 	umull	r5, r4, r1, r2
 80138c6:	b93c      	cbnz	r4, 80138d8 <_calloc_r+0x18>
 80138c8:	4629      	mov	r1, r5
 80138ca:	f7ff f99f 	bl	8012c0c <_malloc_r>
 80138ce:	4606      	mov	r6, r0
 80138d0:	b928      	cbnz	r0, 80138de <_calloc_r+0x1e>
 80138d2:	2600      	movs	r6, #0
 80138d4:	4630      	mov	r0, r6
 80138d6:	bd70      	pop	{r4, r5, r6, pc}
 80138d8:	220c      	movs	r2, #12
 80138da:	6002      	str	r2, [r0, #0]
 80138dc:	e7f9      	b.n	80138d2 <_calloc_r+0x12>
 80138de:	462a      	mov	r2, r5
 80138e0:	4621      	mov	r1, r4
 80138e2:	f7fe fab2 	bl	8011e4a <memset>
 80138e6:	e7f5      	b.n	80138d4 <_calloc_r+0x14>

080138e8 <__ascii_mbtowc>:
 80138e8:	b082      	sub	sp, #8
 80138ea:	b901      	cbnz	r1, 80138ee <__ascii_mbtowc+0x6>
 80138ec:	a901      	add	r1, sp, #4
 80138ee:	b142      	cbz	r2, 8013902 <__ascii_mbtowc+0x1a>
 80138f0:	b14b      	cbz	r3, 8013906 <__ascii_mbtowc+0x1e>
 80138f2:	7813      	ldrb	r3, [r2, #0]
 80138f4:	600b      	str	r3, [r1, #0]
 80138f6:	7812      	ldrb	r2, [r2, #0]
 80138f8:	1e10      	subs	r0, r2, #0
 80138fa:	bf18      	it	ne
 80138fc:	2001      	movne	r0, #1
 80138fe:	b002      	add	sp, #8
 8013900:	4770      	bx	lr
 8013902:	4610      	mov	r0, r2
 8013904:	e7fb      	b.n	80138fe <__ascii_mbtowc+0x16>
 8013906:	f06f 0001 	mvn.w	r0, #1
 801390a:	e7f8      	b.n	80138fe <__ascii_mbtowc+0x16>

0801390c <_realloc_r>:
 801390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013910:	4680      	mov	r8, r0
 8013912:	4615      	mov	r5, r2
 8013914:	460c      	mov	r4, r1
 8013916:	b921      	cbnz	r1, 8013922 <_realloc_r+0x16>
 8013918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	4611      	mov	r1, r2
 801391e:	f7ff b975 	b.w	8012c0c <_malloc_r>
 8013922:	b92a      	cbnz	r2, 8013930 <_realloc_r+0x24>
 8013924:	f7ff f8fe 	bl	8012b24 <_free_r>
 8013928:	2400      	movs	r4, #0
 801392a:	4620      	mov	r0, r4
 801392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013930:	f000 f841 	bl	80139b6 <_malloc_usable_size_r>
 8013934:	4285      	cmp	r5, r0
 8013936:	4606      	mov	r6, r0
 8013938:	d802      	bhi.n	8013940 <_realloc_r+0x34>
 801393a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801393e:	d8f4      	bhi.n	801392a <_realloc_r+0x1e>
 8013940:	4629      	mov	r1, r5
 8013942:	4640      	mov	r0, r8
 8013944:	f7ff f962 	bl	8012c0c <_malloc_r>
 8013948:	4607      	mov	r7, r0
 801394a:	2800      	cmp	r0, #0
 801394c:	d0ec      	beq.n	8013928 <_realloc_r+0x1c>
 801394e:	42b5      	cmp	r5, r6
 8013950:	462a      	mov	r2, r5
 8013952:	4621      	mov	r1, r4
 8013954:	bf28      	it	cs
 8013956:	4632      	movcs	r2, r6
 8013958:	f7fe faf7 	bl	8011f4a <memcpy>
 801395c:	4621      	mov	r1, r4
 801395e:	4640      	mov	r0, r8
 8013960:	f7ff f8e0 	bl	8012b24 <_free_r>
 8013964:	463c      	mov	r4, r7
 8013966:	e7e0      	b.n	801392a <_realloc_r+0x1e>

08013968 <__ascii_wctomb>:
 8013968:	4603      	mov	r3, r0
 801396a:	4608      	mov	r0, r1
 801396c:	b141      	cbz	r1, 8013980 <__ascii_wctomb+0x18>
 801396e:	2aff      	cmp	r2, #255	@ 0xff
 8013970:	d904      	bls.n	801397c <__ascii_wctomb+0x14>
 8013972:	228a      	movs	r2, #138	@ 0x8a
 8013974:	601a      	str	r2, [r3, #0]
 8013976:	f04f 30ff 	mov.w	r0, #4294967295
 801397a:	4770      	bx	lr
 801397c:	700a      	strb	r2, [r1, #0]
 801397e:	2001      	movs	r0, #1
 8013980:	4770      	bx	lr
	...

08013984 <fiprintf>:
 8013984:	b40e      	push	{r1, r2, r3}
 8013986:	b503      	push	{r0, r1, lr}
 8013988:	4601      	mov	r1, r0
 801398a:	ab03      	add	r3, sp, #12
 801398c:	4805      	ldr	r0, [pc, #20]	@ (80139a4 <fiprintf+0x20>)
 801398e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013992:	6800      	ldr	r0, [r0, #0]
 8013994:	9301      	str	r3, [sp, #4]
 8013996:	f000 f83f 	bl	8013a18 <_vfiprintf_r>
 801399a:	b002      	add	sp, #8
 801399c:	f85d eb04 	ldr.w	lr, [sp], #4
 80139a0:	b003      	add	sp, #12
 80139a2:	4770      	bx	lr
 80139a4:	24000110 	.word	0x24000110

080139a8 <abort>:
 80139a8:	b508      	push	{r3, lr}
 80139aa:	2006      	movs	r0, #6
 80139ac:	f000 fa08 	bl	8013dc0 <raise>
 80139b0:	2001      	movs	r0, #1
 80139b2:	f7ee f9bf 	bl	8001d34 <_exit>

080139b6 <_malloc_usable_size_r>:
 80139b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139ba:	1f18      	subs	r0, r3, #4
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bfbc      	itt	lt
 80139c0:	580b      	ldrlt	r3, [r1, r0]
 80139c2:	18c0      	addlt	r0, r0, r3
 80139c4:	4770      	bx	lr

080139c6 <__sfputc_r>:
 80139c6:	6893      	ldr	r3, [r2, #8]
 80139c8:	3b01      	subs	r3, #1
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	b410      	push	{r4}
 80139ce:	6093      	str	r3, [r2, #8]
 80139d0:	da08      	bge.n	80139e4 <__sfputc_r+0x1e>
 80139d2:	6994      	ldr	r4, [r2, #24]
 80139d4:	42a3      	cmp	r3, r4
 80139d6:	db01      	blt.n	80139dc <__sfputc_r+0x16>
 80139d8:	290a      	cmp	r1, #10
 80139da:	d103      	bne.n	80139e4 <__sfputc_r+0x1e>
 80139dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139e0:	f000 b932 	b.w	8013c48 <__swbuf_r>
 80139e4:	6813      	ldr	r3, [r2, #0]
 80139e6:	1c58      	adds	r0, r3, #1
 80139e8:	6010      	str	r0, [r2, #0]
 80139ea:	7019      	strb	r1, [r3, #0]
 80139ec:	4608      	mov	r0, r1
 80139ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <__sfputs_r>:
 80139f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f6:	4606      	mov	r6, r0
 80139f8:	460f      	mov	r7, r1
 80139fa:	4614      	mov	r4, r2
 80139fc:	18d5      	adds	r5, r2, r3
 80139fe:	42ac      	cmp	r4, r5
 8013a00:	d101      	bne.n	8013a06 <__sfputs_r+0x12>
 8013a02:	2000      	movs	r0, #0
 8013a04:	e007      	b.n	8013a16 <__sfputs_r+0x22>
 8013a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a0a:	463a      	mov	r2, r7
 8013a0c:	4630      	mov	r0, r6
 8013a0e:	f7ff ffda 	bl	80139c6 <__sfputc_r>
 8013a12:	1c43      	adds	r3, r0, #1
 8013a14:	d1f3      	bne.n	80139fe <__sfputs_r+0xa>
 8013a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a18 <_vfiprintf_r>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	460d      	mov	r5, r1
 8013a1e:	b09d      	sub	sp, #116	@ 0x74
 8013a20:	4614      	mov	r4, r2
 8013a22:	4698      	mov	r8, r3
 8013a24:	4606      	mov	r6, r0
 8013a26:	b118      	cbz	r0, 8013a30 <_vfiprintf_r+0x18>
 8013a28:	6a03      	ldr	r3, [r0, #32]
 8013a2a:	b90b      	cbnz	r3, 8013a30 <_vfiprintf_r+0x18>
 8013a2c:	f7fe f974 	bl	8011d18 <__sinit>
 8013a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a32:	07d9      	lsls	r1, r3, #31
 8013a34:	d405      	bmi.n	8013a42 <_vfiprintf_r+0x2a>
 8013a36:	89ab      	ldrh	r3, [r5, #12]
 8013a38:	059a      	lsls	r2, r3, #22
 8013a3a:	d402      	bmi.n	8013a42 <_vfiprintf_r+0x2a>
 8013a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a3e:	f7fe fa82 	bl	8011f46 <__retarget_lock_acquire_recursive>
 8013a42:	89ab      	ldrh	r3, [r5, #12]
 8013a44:	071b      	lsls	r3, r3, #28
 8013a46:	d501      	bpl.n	8013a4c <_vfiprintf_r+0x34>
 8013a48:	692b      	ldr	r3, [r5, #16]
 8013a4a:	b99b      	cbnz	r3, 8013a74 <_vfiprintf_r+0x5c>
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f000 f938 	bl	8013cc4 <__swsetup_r>
 8013a54:	b170      	cbz	r0, 8013a74 <_vfiprintf_r+0x5c>
 8013a56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a58:	07dc      	lsls	r4, r3, #31
 8013a5a:	d504      	bpl.n	8013a66 <_vfiprintf_r+0x4e>
 8013a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a60:	b01d      	add	sp, #116	@ 0x74
 8013a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a66:	89ab      	ldrh	r3, [r5, #12]
 8013a68:	0598      	lsls	r0, r3, #22
 8013a6a:	d4f7      	bmi.n	8013a5c <_vfiprintf_r+0x44>
 8013a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a6e:	f7fe fa6b 	bl	8011f48 <__retarget_lock_release_recursive>
 8013a72:	e7f3      	b.n	8013a5c <_vfiprintf_r+0x44>
 8013a74:	2300      	movs	r3, #0
 8013a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a78:	2320      	movs	r3, #32
 8013a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a82:	2330      	movs	r3, #48	@ 0x30
 8013a84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013c34 <_vfiprintf_r+0x21c>
 8013a88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a8c:	f04f 0901 	mov.w	r9, #1
 8013a90:	4623      	mov	r3, r4
 8013a92:	469a      	mov	sl, r3
 8013a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a98:	b10a      	cbz	r2, 8013a9e <_vfiprintf_r+0x86>
 8013a9a:	2a25      	cmp	r2, #37	@ 0x25
 8013a9c:	d1f9      	bne.n	8013a92 <_vfiprintf_r+0x7a>
 8013a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8013aa2:	d00b      	beq.n	8013abc <_vfiprintf_r+0xa4>
 8013aa4:	465b      	mov	r3, fp
 8013aa6:	4622      	mov	r2, r4
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	4630      	mov	r0, r6
 8013aac:	f7ff ffa2 	bl	80139f4 <__sfputs_r>
 8013ab0:	3001      	adds	r0, #1
 8013ab2:	f000 80a7 	beq.w	8013c04 <_vfiprintf_r+0x1ec>
 8013ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ab8:	445a      	add	r2, fp
 8013aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8013abc:	f89a 3000 	ldrb.w	r3, [sl]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f000 809f 	beq.w	8013c04 <_vfiprintf_r+0x1ec>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8013acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ad0:	f10a 0a01 	add.w	sl, sl, #1
 8013ad4:	9304      	str	r3, [sp, #16]
 8013ad6:	9307      	str	r3, [sp, #28]
 8013ad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ade:	4654      	mov	r4, sl
 8013ae0:	2205      	movs	r2, #5
 8013ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ae6:	4853      	ldr	r0, [pc, #332]	@ (8013c34 <_vfiprintf_r+0x21c>)
 8013ae8:	f7ec fc12 	bl	8000310 <memchr>
 8013aec:	9a04      	ldr	r2, [sp, #16]
 8013aee:	b9d8      	cbnz	r0, 8013b28 <_vfiprintf_r+0x110>
 8013af0:	06d1      	lsls	r1, r2, #27
 8013af2:	bf44      	itt	mi
 8013af4:	2320      	movmi	r3, #32
 8013af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013afa:	0713      	lsls	r3, r2, #28
 8013afc:	bf44      	itt	mi
 8013afe:	232b      	movmi	r3, #43	@ 0x2b
 8013b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b04:	f89a 3000 	ldrb.w	r3, [sl]
 8013b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b0a:	d015      	beq.n	8013b38 <_vfiprintf_r+0x120>
 8013b0c:	9a07      	ldr	r2, [sp, #28]
 8013b0e:	4654      	mov	r4, sl
 8013b10:	2000      	movs	r0, #0
 8013b12:	f04f 0c0a 	mov.w	ip, #10
 8013b16:	4621      	mov	r1, r4
 8013b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b1c:	3b30      	subs	r3, #48	@ 0x30
 8013b1e:	2b09      	cmp	r3, #9
 8013b20:	d94b      	bls.n	8013bba <_vfiprintf_r+0x1a2>
 8013b22:	b1b0      	cbz	r0, 8013b52 <_vfiprintf_r+0x13a>
 8013b24:	9207      	str	r2, [sp, #28]
 8013b26:	e014      	b.n	8013b52 <_vfiprintf_r+0x13a>
 8013b28:	eba0 0308 	sub.w	r3, r0, r8
 8013b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8013b30:	4313      	orrs	r3, r2
 8013b32:	9304      	str	r3, [sp, #16]
 8013b34:	46a2      	mov	sl, r4
 8013b36:	e7d2      	b.n	8013ade <_vfiprintf_r+0xc6>
 8013b38:	9b03      	ldr	r3, [sp, #12]
 8013b3a:	1d19      	adds	r1, r3, #4
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	9103      	str	r1, [sp, #12]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	bfbb      	ittet	lt
 8013b44:	425b      	neglt	r3, r3
 8013b46:	f042 0202 	orrlt.w	r2, r2, #2
 8013b4a:	9307      	strge	r3, [sp, #28]
 8013b4c:	9307      	strlt	r3, [sp, #28]
 8013b4e:	bfb8      	it	lt
 8013b50:	9204      	strlt	r2, [sp, #16]
 8013b52:	7823      	ldrb	r3, [r4, #0]
 8013b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b56:	d10a      	bne.n	8013b6e <_vfiprintf_r+0x156>
 8013b58:	7863      	ldrb	r3, [r4, #1]
 8013b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b5c:	d132      	bne.n	8013bc4 <_vfiprintf_r+0x1ac>
 8013b5e:	9b03      	ldr	r3, [sp, #12]
 8013b60:	1d1a      	adds	r2, r3, #4
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	9203      	str	r2, [sp, #12]
 8013b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b6a:	3402      	adds	r4, #2
 8013b6c:	9305      	str	r3, [sp, #20]
 8013b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013c44 <_vfiprintf_r+0x22c>
 8013b72:	7821      	ldrb	r1, [r4, #0]
 8013b74:	2203      	movs	r2, #3
 8013b76:	4650      	mov	r0, sl
 8013b78:	f7ec fbca 	bl	8000310 <memchr>
 8013b7c:	b138      	cbz	r0, 8013b8e <_vfiprintf_r+0x176>
 8013b7e:	9b04      	ldr	r3, [sp, #16]
 8013b80:	eba0 000a 	sub.w	r0, r0, sl
 8013b84:	2240      	movs	r2, #64	@ 0x40
 8013b86:	4082      	lsls	r2, r0
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	3401      	adds	r4, #1
 8013b8c:	9304      	str	r3, [sp, #16]
 8013b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b92:	4829      	ldr	r0, [pc, #164]	@ (8013c38 <_vfiprintf_r+0x220>)
 8013b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b98:	2206      	movs	r2, #6
 8013b9a:	f7ec fbb9 	bl	8000310 <memchr>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d03f      	beq.n	8013c22 <_vfiprintf_r+0x20a>
 8013ba2:	4b26      	ldr	r3, [pc, #152]	@ (8013c3c <_vfiprintf_r+0x224>)
 8013ba4:	bb1b      	cbnz	r3, 8013bee <_vfiprintf_r+0x1d6>
 8013ba6:	9b03      	ldr	r3, [sp, #12]
 8013ba8:	3307      	adds	r3, #7
 8013baa:	f023 0307 	bic.w	r3, r3, #7
 8013bae:	3308      	adds	r3, #8
 8013bb0:	9303      	str	r3, [sp, #12]
 8013bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bb4:	443b      	add	r3, r7
 8013bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bb8:	e76a      	b.n	8013a90 <_vfiprintf_r+0x78>
 8013bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bbe:	460c      	mov	r4, r1
 8013bc0:	2001      	movs	r0, #1
 8013bc2:	e7a8      	b.n	8013b16 <_vfiprintf_r+0xfe>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	3401      	adds	r4, #1
 8013bc8:	9305      	str	r3, [sp, #20]
 8013bca:	4619      	mov	r1, r3
 8013bcc:	f04f 0c0a 	mov.w	ip, #10
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bd6:	3a30      	subs	r2, #48	@ 0x30
 8013bd8:	2a09      	cmp	r2, #9
 8013bda:	d903      	bls.n	8013be4 <_vfiprintf_r+0x1cc>
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d0c6      	beq.n	8013b6e <_vfiprintf_r+0x156>
 8013be0:	9105      	str	r1, [sp, #20]
 8013be2:	e7c4      	b.n	8013b6e <_vfiprintf_r+0x156>
 8013be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013be8:	4604      	mov	r4, r0
 8013bea:	2301      	movs	r3, #1
 8013bec:	e7f0      	b.n	8013bd0 <_vfiprintf_r+0x1b8>
 8013bee:	ab03      	add	r3, sp, #12
 8013bf0:	9300      	str	r3, [sp, #0]
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	4b12      	ldr	r3, [pc, #72]	@ (8013c40 <_vfiprintf_r+0x228>)
 8013bf6:	a904      	add	r1, sp, #16
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f7fd fc59 	bl	80114b0 <_printf_float>
 8013bfe:	4607      	mov	r7, r0
 8013c00:	1c78      	adds	r0, r7, #1
 8013c02:	d1d6      	bne.n	8013bb2 <_vfiprintf_r+0x19a>
 8013c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c06:	07d9      	lsls	r1, r3, #31
 8013c08:	d405      	bmi.n	8013c16 <_vfiprintf_r+0x1fe>
 8013c0a:	89ab      	ldrh	r3, [r5, #12]
 8013c0c:	059a      	lsls	r2, r3, #22
 8013c0e:	d402      	bmi.n	8013c16 <_vfiprintf_r+0x1fe>
 8013c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c12:	f7fe f999 	bl	8011f48 <__retarget_lock_release_recursive>
 8013c16:	89ab      	ldrh	r3, [r5, #12]
 8013c18:	065b      	lsls	r3, r3, #25
 8013c1a:	f53f af1f 	bmi.w	8013a5c <_vfiprintf_r+0x44>
 8013c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c20:	e71e      	b.n	8013a60 <_vfiprintf_r+0x48>
 8013c22:	ab03      	add	r3, sp, #12
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	462a      	mov	r2, r5
 8013c28:	4b05      	ldr	r3, [pc, #20]	@ (8013c40 <_vfiprintf_r+0x228>)
 8013c2a:	a904      	add	r1, sp, #16
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7fd fec7 	bl	80119c0 <_printf_i>
 8013c32:	e7e4      	b.n	8013bfe <_vfiprintf_r+0x1e6>
 8013c34:	080141d0 	.word	0x080141d0
 8013c38:	080141da 	.word	0x080141da
 8013c3c:	080114b1 	.word	0x080114b1
 8013c40:	080139f5 	.word	0x080139f5
 8013c44:	080141d6 	.word	0x080141d6

08013c48 <__swbuf_r>:
 8013c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c4a:	460e      	mov	r6, r1
 8013c4c:	4614      	mov	r4, r2
 8013c4e:	4605      	mov	r5, r0
 8013c50:	b118      	cbz	r0, 8013c5a <__swbuf_r+0x12>
 8013c52:	6a03      	ldr	r3, [r0, #32]
 8013c54:	b90b      	cbnz	r3, 8013c5a <__swbuf_r+0x12>
 8013c56:	f7fe f85f 	bl	8011d18 <__sinit>
 8013c5a:	69a3      	ldr	r3, [r4, #24]
 8013c5c:	60a3      	str	r3, [r4, #8]
 8013c5e:	89a3      	ldrh	r3, [r4, #12]
 8013c60:	071a      	lsls	r2, r3, #28
 8013c62:	d501      	bpl.n	8013c68 <__swbuf_r+0x20>
 8013c64:	6923      	ldr	r3, [r4, #16]
 8013c66:	b943      	cbnz	r3, 8013c7a <__swbuf_r+0x32>
 8013c68:	4621      	mov	r1, r4
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f000 f82a 	bl	8013cc4 <__swsetup_r>
 8013c70:	b118      	cbz	r0, 8013c7a <__swbuf_r+0x32>
 8013c72:	f04f 37ff 	mov.w	r7, #4294967295
 8013c76:	4638      	mov	r0, r7
 8013c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c7a:	6823      	ldr	r3, [r4, #0]
 8013c7c:	6922      	ldr	r2, [r4, #16]
 8013c7e:	1a98      	subs	r0, r3, r2
 8013c80:	6963      	ldr	r3, [r4, #20]
 8013c82:	b2f6      	uxtb	r6, r6
 8013c84:	4283      	cmp	r3, r0
 8013c86:	4637      	mov	r7, r6
 8013c88:	dc05      	bgt.n	8013c96 <__swbuf_r+0x4e>
 8013c8a:	4621      	mov	r1, r4
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	f7ff fda7 	bl	80137e0 <_fflush_r>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d1ed      	bne.n	8013c72 <__swbuf_r+0x2a>
 8013c96:	68a3      	ldr	r3, [r4, #8]
 8013c98:	3b01      	subs	r3, #1
 8013c9a:	60a3      	str	r3, [r4, #8]
 8013c9c:	6823      	ldr	r3, [r4, #0]
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	6022      	str	r2, [r4, #0]
 8013ca2:	701e      	strb	r6, [r3, #0]
 8013ca4:	6962      	ldr	r2, [r4, #20]
 8013ca6:	1c43      	adds	r3, r0, #1
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d004      	beq.n	8013cb6 <__swbuf_r+0x6e>
 8013cac:	89a3      	ldrh	r3, [r4, #12]
 8013cae:	07db      	lsls	r3, r3, #31
 8013cb0:	d5e1      	bpl.n	8013c76 <__swbuf_r+0x2e>
 8013cb2:	2e0a      	cmp	r6, #10
 8013cb4:	d1df      	bne.n	8013c76 <__swbuf_r+0x2e>
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	4628      	mov	r0, r5
 8013cba:	f7ff fd91 	bl	80137e0 <_fflush_r>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d0d9      	beq.n	8013c76 <__swbuf_r+0x2e>
 8013cc2:	e7d6      	b.n	8013c72 <__swbuf_r+0x2a>

08013cc4 <__swsetup_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4b29      	ldr	r3, [pc, #164]	@ (8013d6c <__swsetup_r+0xa8>)
 8013cc8:	4605      	mov	r5, r0
 8013cca:	6818      	ldr	r0, [r3, #0]
 8013ccc:	460c      	mov	r4, r1
 8013cce:	b118      	cbz	r0, 8013cd8 <__swsetup_r+0x14>
 8013cd0:	6a03      	ldr	r3, [r0, #32]
 8013cd2:	b90b      	cbnz	r3, 8013cd8 <__swsetup_r+0x14>
 8013cd4:	f7fe f820 	bl	8011d18 <__sinit>
 8013cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cdc:	0719      	lsls	r1, r3, #28
 8013cde:	d422      	bmi.n	8013d26 <__swsetup_r+0x62>
 8013ce0:	06da      	lsls	r2, r3, #27
 8013ce2:	d407      	bmi.n	8013cf4 <__swsetup_r+0x30>
 8013ce4:	2209      	movs	r2, #9
 8013ce6:	602a      	str	r2, [r5, #0]
 8013ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cec:	81a3      	strh	r3, [r4, #12]
 8013cee:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf2:	e033      	b.n	8013d5c <__swsetup_r+0x98>
 8013cf4:	0758      	lsls	r0, r3, #29
 8013cf6:	d512      	bpl.n	8013d1e <__swsetup_r+0x5a>
 8013cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cfa:	b141      	cbz	r1, 8013d0e <__swsetup_r+0x4a>
 8013cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d00:	4299      	cmp	r1, r3
 8013d02:	d002      	beq.n	8013d0a <__swsetup_r+0x46>
 8013d04:	4628      	mov	r0, r5
 8013d06:	f7fe ff0d 	bl	8012b24 <_free_r>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d0e:	89a3      	ldrh	r3, [r4, #12]
 8013d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013d14:	81a3      	strh	r3, [r4, #12]
 8013d16:	2300      	movs	r3, #0
 8013d18:	6063      	str	r3, [r4, #4]
 8013d1a:	6923      	ldr	r3, [r4, #16]
 8013d1c:	6023      	str	r3, [r4, #0]
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	f043 0308 	orr.w	r3, r3, #8
 8013d24:	81a3      	strh	r3, [r4, #12]
 8013d26:	6923      	ldr	r3, [r4, #16]
 8013d28:	b94b      	cbnz	r3, 8013d3e <__swsetup_r+0x7a>
 8013d2a:	89a3      	ldrh	r3, [r4, #12]
 8013d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d34:	d003      	beq.n	8013d3e <__swsetup_r+0x7a>
 8013d36:	4621      	mov	r1, r4
 8013d38:	4628      	mov	r0, r5
 8013d3a:	f000 f883 	bl	8013e44 <__smakebuf_r>
 8013d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d42:	f013 0201 	ands.w	r2, r3, #1
 8013d46:	d00a      	beq.n	8013d5e <__swsetup_r+0x9a>
 8013d48:	2200      	movs	r2, #0
 8013d4a:	60a2      	str	r2, [r4, #8]
 8013d4c:	6962      	ldr	r2, [r4, #20]
 8013d4e:	4252      	negs	r2, r2
 8013d50:	61a2      	str	r2, [r4, #24]
 8013d52:	6922      	ldr	r2, [r4, #16]
 8013d54:	b942      	cbnz	r2, 8013d68 <__swsetup_r+0xa4>
 8013d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013d5a:	d1c5      	bne.n	8013ce8 <__swsetup_r+0x24>
 8013d5c:	bd38      	pop	{r3, r4, r5, pc}
 8013d5e:	0799      	lsls	r1, r3, #30
 8013d60:	bf58      	it	pl
 8013d62:	6962      	ldrpl	r2, [r4, #20]
 8013d64:	60a2      	str	r2, [r4, #8]
 8013d66:	e7f4      	b.n	8013d52 <__swsetup_r+0x8e>
 8013d68:	2000      	movs	r0, #0
 8013d6a:	e7f7      	b.n	8013d5c <__swsetup_r+0x98>
 8013d6c:	24000110 	.word	0x24000110

08013d70 <_raise_r>:
 8013d70:	291f      	cmp	r1, #31
 8013d72:	b538      	push	{r3, r4, r5, lr}
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	d904      	bls.n	8013d84 <_raise_r+0x14>
 8013d7a:	2316      	movs	r3, #22
 8013d7c:	6003      	str	r3, [r0, #0]
 8013d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d82:	bd38      	pop	{r3, r4, r5, pc}
 8013d84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013d86:	b112      	cbz	r2, 8013d8e <_raise_r+0x1e>
 8013d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d8c:	b94b      	cbnz	r3, 8013da2 <_raise_r+0x32>
 8013d8e:	4628      	mov	r0, r5
 8013d90:	f000 f830 	bl	8013df4 <_getpid_r>
 8013d94:	4622      	mov	r2, r4
 8013d96:	4601      	mov	r1, r0
 8013d98:	4628      	mov	r0, r5
 8013d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d9e:	f000 b817 	b.w	8013dd0 <_kill_r>
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d00a      	beq.n	8013dbc <_raise_r+0x4c>
 8013da6:	1c59      	adds	r1, r3, #1
 8013da8:	d103      	bne.n	8013db2 <_raise_r+0x42>
 8013daa:	2316      	movs	r3, #22
 8013dac:	6003      	str	r3, [r0, #0]
 8013dae:	2001      	movs	r0, #1
 8013db0:	e7e7      	b.n	8013d82 <_raise_r+0x12>
 8013db2:	2100      	movs	r1, #0
 8013db4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013db8:	4620      	mov	r0, r4
 8013dba:	4798      	blx	r3
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	e7e0      	b.n	8013d82 <_raise_r+0x12>

08013dc0 <raise>:
 8013dc0:	4b02      	ldr	r3, [pc, #8]	@ (8013dcc <raise+0xc>)
 8013dc2:	4601      	mov	r1, r0
 8013dc4:	6818      	ldr	r0, [r3, #0]
 8013dc6:	f7ff bfd3 	b.w	8013d70 <_raise_r>
 8013dca:	bf00      	nop
 8013dcc:	24000110 	.word	0x24000110

08013dd0 <_kill_r>:
 8013dd0:	b538      	push	{r3, r4, r5, lr}
 8013dd2:	4d07      	ldr	r5, [pc, #28]	@ (8013df0 <_kill_r+0x20>)
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	4608      	mov	r0, r1
 8013dda:	4611      	mov	r1, r2
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	f7ed ff99 	bl	8001d14 <_kill>
 8013de2:	1c43      	adds	r3, r0, #1
 8013de4:	d102      	bne.n	8013dec <_kill_r+0x1c>
 8013de6:	682b      	ldr	r3, [r5, #0]
 8013de8:	b103      	cbz	r3, 8013dec <_kill_r+0x1c>
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	bd38      	pop	{r3, r4, r5, pc}
 8013dee:	bf00      	nop
 8013df0:	240035f4 	.word	0x240035f4

08013df4 <_getpid_r>:
 8013df4:	f7ed bf86 	b.w	8001d04 <_getpid>

08013df8 <__swhatbuf_r>:
 8013df8:	b570      	push	{r4, r5, r6, lr}
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e00:	2900      	cmp	r1, #0
 8013e02:	b096      	sub	sp, #88	@ 0x58
 8013e04:	4615      	mov	r5, r2
 8013e06:	461e      	mov	r6, r3
 8013e08:	da0d      	bge.n	8013e26 <__swhatbuf_r+0x2e>
 8013e0a:	89a3      	ldrh	r3, [r4, #12]
 8013e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e10:	f04f 0100 	mov.w	r1, #0
 8013e14:	bf14      	ite	ne
 8013e16:	2340      	movne	r3, #64	@ 0x40
 8013e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	6031      	str	r1, [r6, #0]
 8013e20:	602b      	str	r3, [r5, #0]
 8013e22:	b016      	add	sp, #88	@ 0x58
 8013e24:	bd70      	pop	{r4, r5, r6, pc}
 8013e26:	466a      	mov	r2, sp
 8013e28:	f000 f848 	bl	8013ebc <_fstat_r>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	dbec      	blt.n	8013e0a <__swhatbuf_r+0x12>
 8013e30:	9901      	ldr	r1, [sp, #4]
 8013e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013e3a:	4259      	negs	r1, r3
 8013e3c:	4159      	adcs	r1, r3
 8013e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e42:	e7eb      	b.n	8013e1c <__swhatbuf_r+0x24>

08013e44 <__smakebuf_r>:
 8013e44:	898b      	ldrh	r3, [r1, #12]
 8013e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e48:	079d      	lsls	r5, r3, #30
 8013e4a:	4606      	mov	r6, r0
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	d507      	bpl.n	8013e60 <__smakebuf_r+0x1c>
 8013e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	6123      	str	r3, [r4, #16]
 8013e58:	2301      	movs	r3, #1
 8013e5a:	6163      	str	r3, [r4, #20]
 8013e5c:	b003      	add	sp, #12
 8013e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e60:	ab01      	add	r3, sp, #4
 8013e62:	466a      	mov	r2, sp
 8013e64:	f7ff ffc8 	bl	8013df8 <__swhatbuf_r>
 8013e68:	9f00      	ldr	r7, [sp, #0]
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f7fe fecc 	bl	8012c0c <_malloc_r>
 8013e74:	b948      	cbnz	r0, 8013e8a <__smakebuf_r+0x46>
 8013e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e7a:	059a      	lsls	r2, r3, #22
 8013e7c:	d4ee      	bmi.n	8013e5c <__smakebuf_r+0x18>
 8013e7e:	f023 0303 	bic.w	r3, r3, #3
 8013e82:	f043 0302 	orr.w	r3, r3, #2
 8013e86:	81a3      	strh	r3, [r4, #12]
 8013e88:	e7e2      	b.n	8013e50 <__smakebuf_r+0xc>
 8013e8a:	89a3      	ldrh	r3, [r4, #12]
 8013e8c:	6020      	str	r0, [r4, #0]
 8013e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e92:	81a3      	strh	r3, [r4, #12]
 8013e94:	9b01      	ldr	r3, [sp, #4]
 8013e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e9a:	b15b      	cbz	r3, 8013eb4 <__smakebuf_r+0x70>
 8013e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	f000 f81d 	bl	8013ee0 <_isatty_r>
 8013ea6:	b128      	cbz	r0, 8013eb4 <__smakebuf_r+0x70>
 8013ea8:	89a3      	ldrh	r3, [r4, #12]
 8013eaa:	f023 0303 	bic.w	r3, r3, #3
 8013eae:	f043 0301 	orr.w	r3, r3, #1
 8013eb2:	81a3      	strh	r3, [r4, #12]
 8013eb4:	89a3      	ldrh	r3, [r4, #12]
 8013eb6:	431d      	orrs	r5, r3
 8013eb8:	81a5      	strh	r5, [r4, #12]
 8013eba:	e7cf      	b.n	8013e5c <__smakebuf_r+0x18>

08013ebc <_fstat_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	4d07      	ldr	r5, [pc, #28]	@ (8013edc <_fstat_r+0x20>)
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	4608      	mov	r0, r1
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	602b      	str	r3, [r5, #0]
 8013eca:	f7ed ff83 	bl	8001dd4 <_fstat>
 8013ece:	1c43      	adds	r3, r0, #1
 8013ed0:	d102      	bne.n	8013ed8 <_fstat_r+0x1c>
 8013ed2:	682b      	ldr	r3, [r5, #0]
 8013ed4:	b103      	cbz	r3, 8013ed8 <_fstat_r+0x1c>
 8013ed6:	6023      	str	r3, [r4, #0]
 8013ed8:	bd38      	pop	{r3, r4, r5, pc}
 8013eda:	bf00      	nop
 8013edc:	240035f4 	.word	0x240035f4

08013ee0 <_isatty_r>:
 8013ee0:	b538      	push	{r3, r4, r5, lr}
 8013ee2:	4d06      	ldr	r5, [pc, #24]	@ (8013efc <_isatty_r+0x1c>)
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	4608      	mov	r0, r1
 8013eea:	602b      	str	r3, [r5, #0]
 8013eec:	f7ed ff82 	bl	8001df4 <_isatty>
 8013ef0:	1c43      	adds	r3, r0, #1
 8013ef2:	d102      	bne.n	8013efa <_isatty_r+0x1a>
 8013ef4:	682b      	ldr	r3, [r5, #0]
 8013ef6:	b103      	cbz	r3, 8013efa <_isatty_r+0x1a>
 8013ef8:	6023      	str	r3, [r4, #0]
 8013efa:	bd38      	pop	{r3, r4, r5, pc}
 8013efc:	240035f4 	.word	0x240035f4

08013f00 <_init>:
 8013f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f02:	bf00      	nop
 8013f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f06:	bc08      	pop	{r3}
 8013f08:	469e      	mov	lr, r3
 8013f0a:	4770      	bx	lr

08013f0c <_fini>:
 8013f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0e:	bf00      	nop
 8013f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f12:	bc08      	pop	{r3}
 8013f14:	469e      	mov	lr, r3
 8013f16:	4770      	bx	lr
